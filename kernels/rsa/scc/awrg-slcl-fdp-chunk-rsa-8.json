{
  "name" : "awrg-slcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__138466, const global int* restrict v__138467, const global int* restrict v__138468, const global int* restrict v__138469, int v__138470, int v__138471, global int* v__138486, global int* v__138485, global int* v__138473, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__138474; \n  int v__138477; \n  /* Private Memory */\n  int v__138479_0;\n  \n  int v__138481_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11180 = v__138473; \n    local int v_w_id_138461; \n    if (get_local_id(0) == 0) {\n      v_w_id_138461 = atomic_inc(v_work_idx_11180); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_138461 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_138462 = get_local_id(0); v_l_id_138462 < 8; v_l_id_138462 = (v_l_id_138462 + get_local_size(0))) {\n        int v_tmp_138522 = -2147483648; \n        v__138474 = v_tmp_138522; \n        /* reduce_seq */\n        int v_stop_138523 = min(v__138466[(1 + (v__138466[(v_l_id_138462 + (8 * v_w_id_138461))] / 4))], v__138467[(1 + (v__138467[(v_l_id_138462 + (8 * v_w_id_138461))] / 4))]); \n        for (int v_i_138463 = 0; v_i_138463 < v_stop_138523; v_i_138463 = (1 + v_i_138463)) {\n          int v_tmp_138528 = -2147483648; \n          v__138477 = v_tmp_138528; \n          int v_index_138530 = v__138466[(2 + v_i_138463 + (v__138466[(v_l_id_138462 + (8 * v_w_id_138461))] / 4))]; \n          if (v_index_138530 < 0) {\n            v__138479_0 = v__138477; \n          } else {\n            if (v_index_138530 >= v_MWidthC_1) {\n              v__138479_0 = v__138477; \n            } else {\n              v__138479_0 = v__138468[v_index_138530]; \n            }\n          }\n          v__138481_0 = int_min(v__138467[(2 + v_i_138463 + (v__138467[(v_l_id_138462 + (8 * v_w_id_138461))] / 4))], v__138479_0); \n          v__138474 = int_max(v__138474, v__138481_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_138464 = 0; \n          v__138485[(v_l_id_138462 + (8 * v_w_id_138461))] = doubleMinMax(v__138474, v__138470, v__138469[(v_l_id_138462 + (8 * v_w_id_138461))], v__138471); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_138465 = 0; \n          v__138486[(v_l_id_138462 + (8 * v_w_id_138461))] = id(v__138485[(v_l_id_138462 + (8 * v_w_id_138461))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_138461 = atomic_inc(v_work_idx_11180); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__138466",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__138467",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__138468",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__138469",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__138470",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__138471",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__138485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__138473",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__138486",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}