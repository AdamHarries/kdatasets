{
  "name" : "swrg-slcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__153272, const global int* restrict v__153273, const global int* restrict v__153274, const global int* restrict v__153275, int v__153276, int v__153277, global int* v__153291, global int* v__153290, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__153279; \n  int v__153282; \n  /* Private Memory */\n  int v__153284_0;\n  \n  int v__153286_0;\n  \n  for (int v_wg_id_153267 = get_group_id(0); v_wg_id_153267 < ((v_MHeight_2)/(128)); v_wg_id_153267 = (v_wg_id_153267 + get_num_groups(0))) {\n    for (int v_l_id_153268 = get_local_id(0); v_l_id_153268 < 128; v_l_id_153268 = (v_l_id_153268 + get_local_size(0))) {\n      int v_tmp_153328 = -2147483648; \n      v__153279 = v_tmp_153328; \n      /* reduce_seq */\n      int v_stop_153329 = min(v__153272[(1 + (v__153272[(v_l_id_153268 + (128 * v_wg_id_153267))] / 4))], v__153273[(1 + (v__153273[(v_l_id_153268 + (128 * v_wg_id_153267))] / 4))]); \n      for (int v_i_153269 = 0; v_i_153269 < v_stop_153329; v_i_153269 = (1 + v_i_153269)) {\n        int v_tmp_153334 = -2147483648; \n        v__153282 = v_tmp_153334; \n        int v_index_153336 = v__153272[(2 + v_i_153269 + (v__153272[(v_l_id_153268 + (128 * v_wg_id_153267))] / 4))]; \n        if (v_index_153336 < 0) {\n          v__153284_0 = v__153282; \n        } else {\n          if (v_index_153336 >= v_MWidthC_1) {\n            v__153284_0 = v__153282; \n          } else {\n            v__153284_0 = v__153274[v_index_153336]; \n          }\n        }\n        v__153286_0 = int_min(v__153273[(2 + v_i_153269 + (v__153273[(v_l_id_153268 + (128 * v_wg_id_153267))] / 4))], v__153284_0); \n        v__153279 = int_max(v__153279, v__153286_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_153270 = 0; \n        v__153290[(v_l_id_153268 + (128 * v_wg_id_153267))] = doubleMinMax(v__153279, v__153276, v__153275[(v_l_id_153268 + (128 * v_wg_id_153267))], v__153277); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_153271 = 0; \n        v__153291[(v_l_id_153268 + (128 * v_wg_id_153267))] = id(v__153290[(v_l_id_153268 + (128 * v_wg_id_153267))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__153272",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__153273",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__153274",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__153275",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__153276",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__153277",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__153290",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__153291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}