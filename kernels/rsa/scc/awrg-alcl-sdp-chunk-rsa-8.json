{
  "name" : "awrg-alcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__139468, const global int* restrict v__139469, const global int* restrict v__139470, const global int* restrict v__139471, int v__139472, int v__139473, global int* v__139488, global int* v__139487, global int* v__139475, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__139476; \n  int v__139479; \n  /* Private Memory */\n  int v__139481_0;\n  \n  int v__139483_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11274 = v__139475; \n    local int v_w_id_139463; \n    if (get_local_id(0) == 0) {\n      v_w_id_139463 = atomic_inc(v_work_idx_11274); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_139463 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11272; \n        v_work_idx_11272 = 0; \n        int v_l_id_139464 = atomic_inc(&(v_work_idx_11272)); \n        while((v_l_id_139464 < 8)){\n          int v_tmp_139520 = -2147483648; \n          v__139476 = v_tmp_139520; \n          /* reduce_seq */\n          int v_stop_139521 = min(v__139468[(1 + (v__139468[(v_l_id_139464 + (8 * v_w_id_139463))] / 4))], v__139469[(1 + (v__139469[(v_l_id_139464 + (8 * v_w_id_139463))] / 4))]); \n          for (int v_i_139465 = 0; v_i_139465 < v_stop_139521; v_i_139465 = (1 + v_i_139465)) {\n            int v_tmp_139526 = -2147483648; \n            v__139479 = v_tmp_139526; \n            int v_index_139528 = v__139468[(2 + v_i_139465 + (v__139468[(v_l_id_139464 + (8 * v_w_id_139463))] / 4))]; \n            if (v_index_139528 < 0) {\n              v__139481_0 = v__139479; \n            } else {\n              if (v_index_139528 >= v_MWidthC_1) {\n                v__139481_0 = v__139479; \n              } else {\n                v__139481_0 = v__139470[v_index_139528]; \n              }\n            }\n            v__139483_0 = int_min(v__139469[(2 + v_i_139465 + (v__139469[(v_l_id_139464 + (8 * v_w_id_139463))] / 4))], v__139481_0); \n            v__139476 = int_max(v__139476, v__139483_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139466 = 0; \n            v__139487[(v_l_id_139464 + (8 * v_w_id_139463))] = doubleMinMax(v__139476, v__139472, v__139471[(v_l_id_139464 + (8 * v_w_id_139463))], v__139473); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139467 = 0; \n            v__139488[(v_l_id_139464 + (8 * v_w_id_139463))] = id(v__139487[(v_l_id_139464 + (8 * v_w_id_139463))]); \n          }\n          /* end map_seq */\n          v_l_id_139464 = atomic_inc(&(v_work_idx_11272)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_139463 = atomic_inc(v_work_idx_11274); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__139468",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__139469",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__139470",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__139471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139472",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__139473",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__139487",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139475",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__139488",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}