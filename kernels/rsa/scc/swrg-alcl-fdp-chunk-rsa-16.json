{
  "name" : "swrg-alcl-fdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__141657, const global int* restrict v__141658, const global int* restrict v__141659, const global int* restrict v__141660, int v__141661, int v__141662, global int* v__141676, global int* v__141675, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__141664; \n  int v__141667; \n  /* Private Memory */\n  int v__141669_0;\n  \n  int v__141671_0;\n  \n  for (int v_wg_id_141652 = get_group_id(0); v_wg_id_141652 < ((v_MHeight_2)/(16)); v_wg_id_141652 = (v_wg_id_141652 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11467; \n      v_work_idx_11467 = 0; \n      int v_l_id_141653 = atomic_inc(&(v_work_idx_11467)); \n      while((v_l_id_141653 < 16)){\n        int v_tmp_141709 = -2147483648; \n        v__141664 = v_tmp_141709; \n        /* reduce_seq */\n        int v_stop_141710 = min(v__141657[(1 + (v__141657[(v_l_id_141653 + (16 * v_wg_id_141652))] / 4))], v__141658[(1 + (v__141658[(v_l_id_141653 + (16 * v_wg_id_141652))] / 4))]); \n        for (int v_i_141654 = 0; v_i_141654 < v_stop_141710; v_i_141654 = (1 + v_i_141654)) {\n          int v_tmp_141715 = -2147483648; \n          v__141667 = v_tmp_141715; \n          int v_index_141717 = v__141657[(2 + v_i_141654 + (v__141657[(v_l_id_141653 + (16 * v_wg_id_141652))] / 4))]; \n          if (v_index_141717 < 0) {\n            v__141669_0 = v__141667; \n          } else {\n            if (v_index_141717 >= v_MWidthC_1) {\n              v__141669_0 = v__141667; \n            } else {\n              v__141669_0 = v__141659[v_index_141717]; \n            }\n          }\n          v__141671_0 = int_min(v__141658[(2 + v_i_141654 + (v__141658[(v_l_id_141653 + (16 * v_wg_id_141652))] / 4))], v__141669_0); \n          v__141664 = int_max(v__141664, v__141671_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141655 = 0; \n          v__141675[(v_l_id_141653 + (16 * v_wg_id_141652))] = doubleMinMax(v__141664, v__141661, v__141660[(v_l_id_141653 + (16 * v_wg_id_141652))], v__141662); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141656 = 0; \n          v__141676[(v_l_id_141653 + (16 * v_wg_id_141652))] = id(v__141675[(v_l_id_141653 + (16 * v_wg_id_141652))]); \n        }\n        /* end map_seq */\n        v_l_id_141653 = atomic_inc(&(v_work_idx_11467)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__141657",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__141658",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__141659",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__141660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__141661",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__141662",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__141675",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__141676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}