{
  "name" : "swrg-alcl-edp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__145962, const global int* restrict v__145963, const global int* restrict v__145964, const global int* restrict v__145965, int v__145966, int v__145967, global int* v__145981, global int* v__145980, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__145969; \n  int v__145972; \n  /* Private Memory */\n  int v__145974_0;\n  \n  int v__145976_0;\n  \n  for (int v_wg_id_145957 = get_group_id(0); v_wg_id_145957 < ((v_MHeight_2)/(32)); v_wg_id_145957 = (v_wg_id_145957 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11857; \n      v_work_idx_11857 = 0; \n      int v_l_id_145958 = atomic_inc(&(v_work_idx_11857)); \n      while((v_l_id_145958 < 32)){\n        int v_tmp_146014 = -2147483648; \n        v__145969 = v_tmp_146014; \n        /* reduce_seq */\n        int v_stop_146015 = min(v__145962[(1 + (v__145962[(v_l_id_145958 + (32 * v_wg_id_145957))] / 4))], v__145963[(1 + (v__145963[(v_l_id_145958 + (32 * v_wg_id_145957))] / 4))]); \n        for (int v_i_145959 = 0; v_i_145959 < v_stop_146015; v_i_145959 = (1 + v_i_145959)) {\n          int v_tmp_146020 = -2147483648; \n          v__145972 = v_tmp_146020; \n          int v_index_146022 = v__145962[(2 + v_i_145959 + (v__145962[(v_l_id_145958 + (32 * v_wg_id_145957))] / 4))]; \n          if (v_index_146022 < 0) {\n            v__145974_0 = v__145972; \n          } else {\n            if (v_index_146022 >= v_MWidthC_1) {\n              v__145974_0 = v__145972; \n            } else {\n              v__145974_0 = v__145964[v_index_146022]; \n            }\n          }\n          v__145976_0 = int_min(v__145963[(2 + v_i_145959 + (v__145963[(v_l_id_145958 + (32 * v_wg_id_145957))] / 4))], v__145974_0); \n          v__145969 = int_max(v__145969, v__145976_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_145960 = 0; \n          v__145980[(v_l_id_145958 + (32 * v_wg_id_145957))] = doubleMinMax(v__145969, v__145966, v__145965[(v_l_id_145958 + (32 * v_wg_id_145957))], v__145967); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_145961 = 0; \n          v__145981[(v_l_id_145958 + (32 * v_wg_id_145957))] = id(v__145980[(v_l_id_145958 + (32 * v_wg_id_145957))]); \n        }\n        /* end map_seq */\n        v_l_id_145958 = atomic_inc(&(v_work_idx_11857)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__145962",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__145963",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__145964",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__145965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__145966",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__145967",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__145980",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__145981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}