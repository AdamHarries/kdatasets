{
  "name" : "swrg-alcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__158658, const global int* restrict v__158659, const global int* restrict v__158660, const global int* restrict v__158661, int v__158662, int v__158663, global int* v__158677, global int* v__158676, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__158665; \n  int v__158668; \n  /* Private Memory */\n  int v__158670_0;\n  \n  int v__158672_0;\n  \n  for (int v_wg_id_158653 = get_group_id(0); v_wg_id_158653 < ((v_MHeight_2)/(256)); v_wg_id_158653 = (v_wg_id_158653 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_13009; \n      v_work_idx_13009 = 0; \n      int v_l_id_158654 = atomic_inc(&(v_work_idx_13009)); \n      while((v_l_id_158654 < 256)){\n        int v_tmp_158710 = -2147483648; \n        v__158665 = v_tmp_158710; \n        /* reduce_seq */\n        int v_stop_158711 = min(v__158658[(1 + (v__158658[(v_l_id_158654 + (256 * v_wg_id_158653))] / 4))], v__158659[(1 + (v__158659[(v_l_id_158654 + (256 * v_wg_id_158653))] / 4))]); \n        for (int v_i_158655 = 0; v_i_158655 < v_stop_158711; v_i_158655 = (1 + v_i_158655)) {\n          int v_tmp_158716 = -2147483648; \n          v__158668 = v_tmp_158716; \n          int v_index_158718 = v__158658[(2 + v_i_158655 + (v__158658[(v_l_id_158654 + (256 * v_wg_id_158653))] / 4))]; \n          if (v_index_158718 < 0) {\n            v__158670_0 = v__158668; \n          } else {\n            if (v_index_158718 >= v_MWidthC_1) {\n              v__158670_0 = v__158668; \n            } else {\n              v__158670_0 = v__158660[v_index_158718]; \n            }\n          }\n          v__158672_0 = int_min(v__158659[(2 + v_i_158655 + (v__158659[(v_l_id_158654 + (256 * v_wg_id_158653))] / 4))], v__158670_0); \n          v__158665 = int_max(v__158665, v__158672_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_158656 = 0; \n          v__158676[(v_l_id_158654 + (256 * v_wg_id_158653))] = doubleMinMax(v__158665, v__158662, v__158661[(v_l_id_158654 + (256 * v_wg_id_158653))], v__158663); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_158657 = 0; \n          v__158677[(v_l_id_158654 + (256 * v_wg_id_158653))] = id(v__158676[(v_l_id_158654 + (256 * v_wg_id_158653))]); \n        }\n        /* end map_seq */\n        v_l_id_158654 = atomic_inc(&(v_work_idx_13009)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__158658",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__158659",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__158660",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__158661",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__158662",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__158663",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__158676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__158677",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}