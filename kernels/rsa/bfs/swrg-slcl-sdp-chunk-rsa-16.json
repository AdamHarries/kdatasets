{
  "name" : "swrg-slcl-sdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__49220, const global int* restrict v__49221, const global int* restrict v__49222, const global int* restrict v__49223, int v__49224, int v__49225, global int* v__49239, global int* v__49238, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49227; \n  int v__49230; \n  /* Private Memory */\n  int v__49232_0;\n  \n  int v__49234_0;\n  \n  for (int v_wg_id_49215 = get_group_id(0); v_wg_id_49215 < ((v_MHeight_2)/(16)); v_wg_id_49215 = (v_wg_id_49215 + get_num_groups(0))) {\n    for (int v_l_id_49216 = get_local_id(0); v_l_id_49216 < 16; v_l_id_49216 = (v_l_id_49216 + get_local_size(0))) {\n      int v_tmp_49276 = 0; \n      v__49227 = v_tmp_49276; \n      /* reduce_seq */\n      int v_stop_49277 = min(v__49220[(1 + (v__49220[(v_l_id_49216 + (16 * v_wg_id_49215))] / 4))], v__49221[(1 + (v__49221[(v_l_id_49216 + (16 * v_wg_id_49215))] / 4))]); \n      for (int v_i_49217 = 0; v_i_49217 < v_stop_49277; v_i_49217 = (1 + v_i_49217)) {\n        int v_tmp_49282 = 0; \n        v__49230 = v_tmp_49282; \n        int v_index_49284 = v__49220[(2 + v_i_49217 + (v__49220[(v_l_id_49216 + (16 * v_wg_id_49215))] / 4))]; \n        if (v_index_49284 < 0) {\n          v__49232_0 = v__49230; \n        } else {\n          if (v_index_49284 >= v_MWidthC_1) {\n            v__49232_0 = v__49230; \n          } else {\n            v__49232_0 = v__49222[v_index_49284]; \n          }\n        }\n        v__49234_0 = bool_and(v__49221[(2 + v_i_49217 + (v__49221[(v_l_id_49216 + (16 * v_wg_id_49215))] / 4))], v__49232_0); \n        v__49227 = bool_or(v__49227, v__49234_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_49218 = 0; \n        v__49238[(v_l_id_49216 + (16 * v_wg_id_49215))] = doubleAndOr(v__49227, v__49224, v__49223[(v_l_id_49216 + (16 * v_wg_id_49215))], v__49225); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_49219 = 0; \n        v__49239[(v_l_id_49216 + (16 * v_wg_id_49215))] = id(v__49238[(v_l_id_49216 + (16 * v_wg_id_49215))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__49220",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__49221",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__49222",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__49223",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49224",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49225",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__49239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}