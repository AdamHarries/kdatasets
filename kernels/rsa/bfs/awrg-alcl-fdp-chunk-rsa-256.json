{
  "name" : "awrg-alcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__69422, const global int* restrict v__69423, const global int* restrict v__69424, const global int* restrict v__69425, int v__69426, int v__69427, global int* v__69442, global int* v__69441, global int* v__69429, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__69430; \n  int v__69433; \n  /* Private Memory */\n  int v__69435_0;\n  \n  int v__69437_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5008 = v__69429; \n    local int v_w_id_69417; \n    if (get_local_id(0) == 0) {\n      v_w_id_69417 = atomic_inc(v_work_idx_5008); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69417 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5006; \n        v_work_idx_5006 = 0; \n        int v_l_id_69418 = atomic_inc(&(v_work_idx_5006)); \n        while((v_l_id_69418 < 256)){\n          int v_tmp_69474 = 0; \n          v__69430 = v_tmp_69474; \n          /* reduce_seq */\n          int v_stop_69475 = min(v__69422[(1 + (v__69422[(v_l_id_69418 + (256 * v_w_id_69417))] / 4))], v__69423[(1 + (v__69423[(v_l_id_69418 + (256 * v_w_id_69417))] / 4))]); \n          for (int v_i_69419 = 0; v_i_69419 < v_stop_69475; v_i_69419 = (1 + v_i_69419)) {\n            int v_tmp_69480 = 0; \n            v__69433 = v_tmp_69480; \n            int v_index_69482 = v__69422[(2 + v_i_69419 + (v__69422[(v_l_id_69418 + (256 * v_w_id_69417))] / 4))]; \n            if (v_index_69482 < 0) {\n              v__69435_0 = v__69433; \n            } else {\n              if (v_index_69482 >= v_MWidthC_1) {\n                v__69435_0 = v__69433; \n              } else {\n                v__69435_0 = v__69424[v_index_69482]; \n              }\n            }\n            v__69437_0 = bool_and(v__69423[(2 + v_i_69419 + (v__69423[(v_l_id_69418 + (256 * v_w_id_69417))] / 4))], v__69435_0); \n            v__69430 = bool_or(v__69430, v__69437_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69420 = 0; \n            v__69441[(v_l_id_69418 + (256 * v_w_id_69417))] = doubleAndOr(v__69430, v__69426, v__69425[(v_l_id_69418 + (256 * v_w_id_69417))], v__69427); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69421 = 0; \n            v__69442[(v_l_id_69418 + (256 * v_w_id_69417))] = id(v__69441[(v_l_id_69418 + (256 * v_w_id_69417))]); \n          }\n          /* end map_seq */\n          v_l_id_69418 = atomic_inc(&(v_work_idx_5006)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69417 = atomic_inc(v_work_idx_5008); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69422",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__69423",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__69424",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__69425",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69426",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69427",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69441",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69429",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69442",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}