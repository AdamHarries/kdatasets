{
  "name" : "awrg-slcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__47187, const global int* restrict v__47188, const global int* restrict v__47189, const global int* restrict v__47190, int v__47191, int v__47192, global int* v__47207, global int* v__47206, global int* v__47194, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47195; \n  int v__47198; \n  /* Private Memory */\n  int v__47200_0;\n  \n  int v__47202_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2987 = v__47194; \n    local int v_w_id_47182; \n    if (get_local_id(0) == 0) {\n      v_w_id_47182 = atomic_inc(v_work_idx_2987); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47182 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_47183 = get_local_id(0); v_l_id_47183 < 8; v_l_id_47183 = (v_l_id_47183 + get_local_size(0))) {\n        int v_tmp_47243 = 0; \n        v__47195 = v_tmp_47243; \n        /* reduce_seq */\n        int v_stop_47244 = min(v__47187[(1 + (v__47187[(v_l_id_47183 + (8 * v_w_id_47182))] / 4))], v__47188[(1 + (v__47188[(v_l_id_47183 + (8 * v_w_id_47182))] / 4))]); \n        for (int v_i_47184 = 0; v_i_47184 < v_stop_47244; v_i_47184 = (1 + v_i_47184)) {\n          int v_tmp_47249 = 0; \n          v__47198 = v_tmp_47249; \n          int v_index_47251 = v__47187[(2 + v_i_47184 + (v__47187[(v_l_id_47183 + (8 * v_w_id_47182))] / 4))]; \n          if (v_index_47251 < 0) {\n            v__47200_0 = v__47198; \n          } else {\n            if (v_index_47251 >= v_MWidthC_1) {\n              v__47200_0 = v__47198; \n            } else {\n              v__47200_0 = v__47189[v_index_47251]; \n            }\n          }\n          v__47202_0 = bool_and(v__47188[(2 + v_i_47184 + (v__47188[(v_l_id_47183 + (8 * v_w_id_47182))] / 4))], v__47200_0); \n          v__47195 = bool_or(v__47195, v__47202_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47185 = 0; \n          v__47206[(v_l_id_47183 + (8 * v_w_id_47182))] = doubleAndOr(v__47195, v__47191, v__47190[(v_l_id_47183 + (8 * v_w_id_47182))], v__47192); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47186 = 0; \n          v__47207[(v_l_id_47183 + (8 * v_w_id_47182))] = id(v__47206[(v_l_id_47183 + (8 * v_w_id_47182))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_47182 = atomic_inc(v_work_idx_2987); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__47187",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__47188",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__47189",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__47190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47191",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47192",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47194",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47207",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}