{
  "name" : "awrg-slcl-sdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__64038, const global int* restrict v__64039, const global int* restrict v__64040, const global int* restrict v__64041, int v__64042, int v__64043, global int* v__64058, global int* v__64057, global int* v__64045, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__64046; \n  int v__64049; \n  /* Private Memory */\n  int v__64051_0;\n  \n  int v__64053_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4517 = v__64045; \n    local int v_w_id_64033; \n    if (get_local_id(0) == 0) {\n      v_w_id_64033 = atomic_inc(v_work_idx_4517); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_64033 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_64034 = get_local_id(0); v_l_id_64034 < 128; v_l_id_64034 = (v_l_id_64034 + get_local_size(0))) {\n        int v_tmp_64094 = 0; \n        v__64046 = v_tmp_64094; \n        /* reduce_seq */\n        int v_stop_64095 = min(v__64038[(1 + (v__64038[(v_l_id_64034 + (128 * v_w_id_64033))] / 4))], v__64039[(1 + (v__64039[(v_l_id_64034 + (128 * v_w_id_64033))] / 4))]); \n        for (int v_i_64035 = 0; v_i_64035 < v_stop_64095; v_i_64035 = (1 + v_i_64035)) {\n          int v_tmp_64100 = 0; \n          v__64049 = v_tmp_64100; \n          int v_index_64102 = v__64038[(2 + v_i_64035 + (v__64038[(v_l_id_64034 + (128 * v_w_id_64033))] / 4))]; \n          if (v_index_64102 < 0) {\n            v__64051_0 = v__64049; \n          } else {\n            if (v_index_64102 >= v_MWidthC_1) {\n              v__64051_0 = v__64049; \n            } else {\n              v__64051_0 = v__64040[v_index_64102]; \n            }\n          }\n          v__64053_0 = bool_and(v__64039[(2 + v_i_64035 + (v__64039[(v_l_id_64034 + (128 * v_w_id_64033))] / 4))], v__64051_0); \n          v__64046 = bool_or(v__64046, v__64053_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64036 = 0; \n          v__64057[(v_l_id_64034 + (128 * v_w_id_64033))] = doubleAndOr(v__64046, v__64042, v__64041[(v_l_id_64034 + (128 * v_w_id_64033))], v__64043); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64037 = 0; \n          v__64058[(v_l_id_64034 + (128 * v_w_id_64033))] = id(v__64057[(v_l_id_64034 + (128 * v_w_id_64033))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_64033 = atomic_inc(v_work_idx_4517); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64038",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__64039",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__64040",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__64041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64042",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64043",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64045",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__64058",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}