{
  "name" : "awrg-alcl-sdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__52421, const global int* restrict v__52422, const global int* restrict v__52423, const global int* restrict v__52424, int v__52425, int v__52426, global int* v__52441, global int* v__52440, global int* v__52428, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52429; \n  int v__52432; \n  /* Private Memory */\n  int v__52434_0;\n  \n  int v__52436_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3465 = v__52428; \n    local int v_w_id_52416; \n    if (get_local_id(0) == 0) {\n      v_w_id_52416 = atomic_inc(v_work_idx_3465); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52416 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3463; \n        v_work_idx_3463 = 0; \n        int v_l_id_52417 = atomic_inc(&(v_work_idx_3463)); \n        while((v_l_id_52417 < 16)){\n          int v_tmp_52473 = 0; \n          v__52429 = v_tmp_52473; \n          /* reduce_seq */\n          int v_stop_52474 = min(v__52421[(1 + (v__52421[(v_l_id_52417 + (16 * v_w_id_52416))] / 4))], v__52422[(1 + (v__52422[(v_l_id_52417 + (16 * v_w_id_52416))] / 4))]); \n          for (int v_i_52418 = 0; v_i_52418 < v_stop_52474; v_i_52418 = (1 + v_i_52418)) {\n            int v_tmp_52479 = 0; \n            v__52432 = v_tmp_52479; \n            int v_index_52481 = v__52421[(2 + v_i_52418 + (v__52421[(v_l_id_52417 + (16 * v_w_id_52416))] / 4))]; \n            if (v_index_52481 < 0) {\n              v__52434_0 = v__52432; \n            } else {\n              if (v_index_52481 >= v_MWidthC_1) {\n                v__52434_0 = v__52432; \n              } else {\n                v__52434_0 = v__52423[v_index_52481]; \n              }\n            }\n            v__52436_0 = bool_and(v__52422[(2 + v_i_52418 + (v__52422[(v_l_id_52417 + (16 * v_w_id_52416))] / 4))], v__52434_0); \n            v__52429 = bool_or(v__52429, v__52436_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52419 = 0; \n            v__52440[(v_l_id_52417 + (16 * v_w_id_52416))] = doubleAndOr(v__52429, v__52425, v__52424[(v_l_id_52417 + (16 * v_w_id_52416))], v__52426); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52420 = 0; \n            v__52441[(v_l_id_52417 + (16 * v_w_id_52416))] = id(v__52440[(v_l_id_52417 + (16 * v_w_id_52416))]); \n          }\n          /* end map_seq */\n          v_l_id_52417 = atomic_inc(&(v_work_idx_3463)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52416 = atomic_inc(v_work_idx_3465); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52421",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__52422",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__52423",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__52424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52425",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52426",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52440",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52428",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52441",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}