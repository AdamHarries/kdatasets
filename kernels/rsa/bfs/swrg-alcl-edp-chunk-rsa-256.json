{
  "name" : "swrg-alcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__67379, const global int* restrict v__67380, const global int* restrict v__67381, const global int* restrict v__67382, int v__67383, int v__67384, global int* v__67398, global int* v__67397, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__67386; \n  int v__67389; \n  /* Private Memory */\n  int v__67391_0;\n  \n  int v__67393_0;\n  \n  for (int v_wg_id_67374 = get_group_id(0); v_wg_id_67374 < ((v_MHeight_2)/(256)); v_wg_id_67374 = (v_wg_id_67374 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4816; \n      v_work_idx_4816 = 0; \n      int v_l_id_67375 = atomic_inc(&(v_work_idx_4816)); \n      while((v_l_id_67375 < 256)){\n        int v_tmp_67431 = 0; \n        v__67386 = v_tmp_67431; \n        /* reduce_seq */\n        int v_stop_67432 = min(v__67379[(1 + (v__67379[(v_l_id_67375 + (256 * v_wg_id_67374))] / 4))], v__67380[(1 + (v__67380[(v_l_id_67375 + (256 * v_wg_id_67374))] / 4))]); \n        for (int v_i_67376 = 0; v_i_67376 < v_stop_67432; v_i_67376 = (1 + v_i_67376)) {\n          int v_tmp_67437 = 0; \n          v__67389 = v_tmp_67437; \n          int v_index_67439 = v__67379[(2 + v_i_67376 + (v__67379[(v_l_id_67375 + (256 * v_wg_id_67374))] / 4))]; \n          if (v_index_67439 < 0) {\n            v__67391_0 = v__67389; \n          } else {\n            if (v_index_67439 >= v_MWidthC_1) {\n              v__67391_0 = v__67389; \n            } else {\n              v__67391_0 = v__67381[v_index_67439]; \n            }\n          }\n          v__67393_0 = bool_and(v__67380[(2 + v_i_67376 + (v__67380[(v_l_id_67375 + (256 * v_wg_id_67374))] / 4))], v__67391_0); \n          v__67386 = bool_or(v__67386, v__67393_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67377 = 0; \n          v__67397[(v_l_id_67375 + (256 * v_wg_id_67374))] = doubleAndOr(v__67386, v__67383, v__67382[(v_l_id_67375 + (256 * v_wg_id_67374))], v__67384); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67378 = 0; \n          v__67398[(v_l_id_67375 + (256 * v_wg_id_67374))] = id(v__67397[(v_l_id_67375 + (256 * v_wg_id_67374))]); \n        }\n        /* end map_seq */\n        v_l_id_67375 = atomic_inc(&(v_work_idx_4816)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__67379",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__67380",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__67381",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__67382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67383",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67384",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__67398",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}