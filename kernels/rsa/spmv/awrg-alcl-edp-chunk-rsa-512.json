{
  "name" : "awrg-alcl-edp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__43579, const global float* restrict v__43580, const global float* restrict v__43581, const global float* restrict v__43582, float v__43583, float v__43584, global float* v__43599, global float* v__43598, global int* v__43586, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43587; \n  float v__43590; \n  /* Private Memory */\n  float v__43592_0;\n  \n  float v__43594_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2668 = v__43586; \n    local int v_w_id_43574; \n    if (get_local_id(0) == 0) {\n      v_w_id_43574 = atomic_inc(v_work_idx_2668); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43574 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2666; \n        v_work_idx_2666 = 0; \n        int v_l_id_43575 = atomic_inc(&(v_work_idx_2666)); \n        while((v_l_id_43575 < 512)){\n          float v_tmp_43631 = 0.0f; \n          v__43587 = v_tmp_43631; \n          /* reduce_seq */\n          int v_stop_43632 = min(v__43579[(1 + (v__43579[(v_l_id_43575 + (512 * v_w_id_43574))] / 4))], ((global int*)(v__43580 + (((global int*)(v__43580))[(v_l_id_43575 + (512 * v_w_id_43574))] / 4)))[1]); \n          for (int v_i_43576 = 0; v_i_43576 < v_stop_43632; v_i_43576 = (1 + v_i_43576)) {\n            float v_tmp_43640 = 0.0f; \n            v__43590 = v_tmp_43640; \n            int v_index_43642 = v__43579[(2 + v_i_43576 + (v__43579[(v_l_id_43575 + (512 * v_w_id_43574))] / 4))]; \n            if (v_index_43642 < 0) {\n              v__43592_0 = v__43590; \n            } else {\n              if (v_index_43642 >= v_MWidthC_1) {\n                v__43592_0 = v__43590; \n              } else {\n                v__43592_0 = v__43581[v_index_43642]; \n              }\n            }\n            v__43594_0 = mult(v__43580[(2 + v_i_43576 + (((global int*)(v__43580))[(v_l_id_43575 + (512 * v_w_id_43574))] / 4))], v__43592_0); \n            v__43587 = add(v__43587, v__43594_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43577 = 0; \n            v__43598[(v_l_id_43575 + (512 * v_w_id_43574))] = doubleMultiplyAdd(v__43587, v__43583, v__43582[(v_l_id_43575 + (512 * v_w_id_43574))], v__43584); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43578 = 0; \n            v__43599[(v_l_id_43575 + (512 * v_w_id_43574))] = id(v__43598[(v_l_id_43575 + (512 * v_w_id_43574))]); \n          }\n          /* end map_seq */\n          v_l_id_43575 = atomic_inc(&(v_work_idx_2666)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43574 = atomic_inc(v_work_idx_2668); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__43579",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__43580",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__43581",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__43582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43583",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43584",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43586",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43599",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}