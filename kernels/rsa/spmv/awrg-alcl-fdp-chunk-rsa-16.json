{
  "name" : "awrg-alcl-fdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__22041, const global float* restrict v__22042, const global float* restrict v__22043, const global float* restrict v__22044, float v__22045, float v__22046, global float* v__22061, global float* v__22060, global int* v__22048, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22049; \n  float v__22052; \n  /* Private Memory */\n  float v__22054_0;\n  \n  float v__22056_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_741 = v__22048; \n    local int v_w_id_22036; \n    if (get_local_id(0) == 0) {\n      v_w_id_22036 = atomic_inc(v_work_idx_741); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22036 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_739; \n        v_work_idx_739 = 0; \n        int v_l_id_22037 = atomic_inc(&(v_work_idx_739)); \n        while((v_l_id_22037 < 16)){\n          float v_tmp_22093 = 0.0f; \n          v__22049 = v_tmp_22093; \n          /* reduce_seq */\n          int v_stop_22094 = min(v__22041[(1 + (v__22041[(v_l_id_22037 + (16 * v_w_id_22036))] / 4))], ((global int*)(v__22042 + (((global int*)(v__22042))[(v_l_id_22037 + (16 * v_w_id_22036))] / 4)))[1]); \n          for (int v_i_22038 = 0; v_i_22038 < v_stop_22094; v_i_22038 = (1 + v_i_22038)) {\n            float v_tmp_22102 = 0.0f; \n            v__22052 = v_tmp_22102; \n            int v_index_22104 = v__22041[(2 + v_i_22038 + (v__22041[(v_l_id_22037 + (16 * v_w_id_22036))] / 4))]; \n            if (v_index_22104 < 0) {\n              v__22054_0 = v__22052; \n            } else {\n              if (v_index_22104 >= v_MWidthC_1) {\n                v__22054_0 = v__22052; \n              } else {\n                v__22054_0 = v__22043[v_index_22104]; \n              }\n            }\n            v__22056_0 = mult(v__22042[(2 + v_i_22038 + (((global int*)(v__22042))[(v_l_id_22037 + (16 * v_w_id_22036))] / 4))], v__22054_0); \n            v__22049 = add(v__22049, v__22056_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22039 = 0; \n            v__22060[(v_l_id_22037 + (16 * v_w_id_22036))] = doubleMultiplyAdd(v__22049, v__22045, v__22044[(v_l_id_22037 + (16 * v_w_id_22036))], v__22046); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22040 = 0; \n            v__22061[(v_l_id_22037 + (16 * v_w_id_22036))] = id(v__22060[(v_l_id_22037 + (16 * v_w_id_22036))]); \n          }\n          /* end map_seq */\n          v_l_id_22037 = atomic_inc(&(v_work_idx_739)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22036 = atomic_inc(v_work_idx_741); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22041",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__22042",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__22043",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__22044",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22045",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22046",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22048",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}