{
  "name" : "awrg-alcl-sdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__26255, const global float* restrict v__26256, const global float* restrict v__26257, const global float* restrict v__26258, float v__26259, float v__26260, global float* v__26275, global float* v__26274, global int* v__26262, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26263; \n  float v__26266; \n  /* Private Memory */\n  float v__26268_0;\n  \n  float v__26270_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1118 = v__26262; \n    local int v_w_id_26250; \n    if (get_local_id(0) == 0) {\n      v_w_id_26250 = atomic_inc(v_work_idx_1118); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26250 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1116; \n        v_work_idx_1116 = 0; \n        int v_l_id_26251 = atomic_inc(&(v_work_idx_1116)); \n        while((v_l_id_26251 < 32)){\n          float v_tmp_26307 = 0.0f; \n          v__26263 = v_tmp_26307; \n          /* reduce_seq */\n          int v_stop_26308 = min(v__26255[(1 + (v__26255[(v_l_id_26251 + (32 * v_w_id_26250))] / 4))], ((global int*)(v__26256 + (((global int*)(v__26256))[(v_l_id_26251 + (32 * v_w_id_26250))] / 4)))[1]); \n          for (int v_i_26252 = 0; v_i_26252 < v_stop_26308; v_i_26252 = (1 + v_i_26252)) {\n            float v_tmp_26316 = 0.0f; \n            v__26266 = v_tmp_26316; \n            int v_index_26318 = v__26255[(2 + v_i_26252 + (v__26255[(v_l_id_26251 + (32 * v_w_id_26250))] / 4))]; \n            if (v_index_26318 < 0) {\n              v__26268_0 = v__26266; \n            } else {\n              if (v_index_26318 >= v_MWidthC_1) {\n                v__26268_0 = v__26266; \n              } else {\n                v__26268_0 = v__26257[v_index_26318]; \n              }\n            }\n            v__26270_0 = mult(v__26256[(2 + v_i_26252 + (((global int*)(v__26256))[(v_l_id_26251 + (32 * v_w_id_26250))] / 4))], v__26268_0); \n            v__26263 = add(v__26263, v__26270_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26253 = 0; \n            v__26274[(v_l_id_26251 + (32 * v_w_id_26250))] = doubleMultiplyAdd(v__26263, v__26259, v__26258[(v_l_id_26251 + (32 * v_w_id_26250))], v__26260); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26254 = 0; \n            v__26275[(v_l_id_26251 + (32 * v_w_id_26250))] = id(v__26274[(v_l_id_26251 + (32 * v_w_id_26250))]); \n          }\n          /* end map_seq */\n          v_l_id_26251 = atomic_inc(&(v_work_idx_1116)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26250 = atomic_inc(v_work_idx_1118); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26255",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__26256",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__26257",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__26258",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26259",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26260",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26262",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26275",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}