{
  "name" : "swrg-alcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__37063, const global float* restrict v__37064, const global float* restrict v__37065, const global float* restrict v__37066, float v__37067, float v__37068, global float* v__37082, global float* v__37081, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37070; \n  float v__37073; \n  /* Private Memory */\n  float v__37075_0;\n  \n  float v__37077_0;\n  \n  for (int v_wg_id_37058 = get_group_id(0); v_wg_id_37058 < ((v_MHeight_2)/(256)); v_wg_id_37058 = (v_wg_id_37058 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2079; \n      v_work_idx_2079 = 0; \n      int v_l_id_37059 = atomic_inc(&(v_work_idx_2079)); \n      while((v_l_id_37059 < 256)){\n        float v_tmp_37115 = 0.0f; \n        v__37070 = v_tmp_37115; \n        /* reduce_seq */\n        int v_stop_37116 = min(v__37063[(1 + (v__37063[(v_l_id_37059 + (256 * v_wg_id_37058))] / 4))], ((global int*)(v__37064 + (((global int*)(v__37064))[(v_l_id_37059 + (256 * v_wg_id_37058))] / 4)))[1]); \n        for (int v_i_37060 = 0; v_i_37060 < v_stop_37116; v_i_37060 = (1 + v_i_37060)) {\n          float v_tmp_37124 = 0.0f; \n          v__37073 = v_tmp_37124; \n          int v_index_37126 = v__37063[(2 + v_i_37060 + (v__37063[(v_l_id_37059 + (256 * v_wg_id_37058))] / 4))]; \n          if (v_index_37126 < 0) {\n            v__37075_0 = v__37073; \n          } else {\n            if (v_index_37126 >= v_MWidthC_1) {\n              v__37075_0 = v__37073; \n            } else {\n              v__37075_0 = v__37065[v_index_37126]; \n            }\n          }\n          v__37077_0 = mult(v__37064[(2 + v_i_37060 + (((global int*)(v__37064))[(v_l_id_37059 + (256 * v_wg_id_37058))] / 4))], v__37075_0); \n          v__37070 = add(v__37070, v__37077_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37061 = 0; \n          v__37081[(v_l_id_37059 + (256 * v_wg_id_37058))] = doubleMultiplyAdd(v__37070, v__37067, v__37066[(v_l_id_37059 + (256 * v_wg_id_37058))], v__37068); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37062 = 0; \n          v__37082[(v_l_id_37059 + (256 * v_wg_id_37058))] = id(v__37081[(v_l_id_37059 + (256 * v_wg_id_37058))]); \n        }\n        /* end map_seq */\n        v_l_id_37059 = atomic_inc(&(v_work_idx_2079)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__37063",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__37064",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__37065",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__37066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37067",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37068",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__37082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}