{
  "name" : "awrg-alcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__34917, const global float* restrict v__34918, const global float* restrict v__34919, const global float* restrict v__34920, float v__34921, float v__34922, global float* v__34937, global float* v__34936, global int* v__34924, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__34925; \n  float v__34928; \n  /* Private Memory */\n  float v__34930_0;\n  \n  float v__34932_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1893 = v__34924; \n    local int v_w_id_34912; \n    if (get_local_id(0) == 0) {\n      v_w_id_34912 = atomic_inc(v_work_idx_1893); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_34912 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1891; \n        v_work_idx_1891 = 0; \n        int v_l_id_34913 = atomic_inc(&(v_work_idx_1891)); \n        while((v_l_id_34913 < 128)){\n          float v_tmp_34969 = 0.0f; \n          v__34925 = v_tmp_34969; \n          /* reduce_seq */\n          int v_stop_34970 = min(v__34917[(1 + (v__34917[(v_l_id_34913 + (128 * v_w_id_34912))] / 4))], ((global int*)(v__34918 + (((global int*)(v__34918))[(v_l_id_34913 + (128 * v_w_id_34912))] / 4)))[1]); \n          for (int v_i_34914 = 0; v_i_34914 < v_stop_34970; v_i_34914 = (1 + v_i_34914)) {\n            float v_tmp_34978 = 0.0f; \n            v__34928 = v_tmp_34978; \n            int v_index_34980 = v__34917[(2 + v_i_34914 + (v__34917[(v_l_id_34913 + (128 * v_w_id_34912))] / 4))]; \n            if (v_index_34980 < 0) {\n              v__34930_0 = v__34928; \n            } else {\n              if (v_index_34980 >= v_MWidthC_1) {\n                v__34930_0 = v__34928; \n              } else {\n                v__34930_0 = v__34919[v_index_34980]; \n              }\n            }\n            v__34932_0 = mult(v__34918[(2 + v_i_34914 + (((global int*)(v__34918))[(v_l_id_34913 + (128 * v_w_id_34912))] / 4))], v__34930_0); \n            v__34925 = add(v__34925, v__34932_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_34915 = 0; \n            v__34936[(v_l_id_34913 + (128 * v_w_id_34912))] = doubleMultiplyAdd(v__34925, v__34921, v__34920[(v_l_id_34913 + (128 * v_w_id_34912))], v__34922); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_34916 = 0; \n            v__34937[(v_l_id_34913 + (128 * v_w_id_34912))] = id(v__34936[(v_l_id_34913 + (128 * v_w_id_34912))]); \n          }\n          /* end map_seq */\n          v_l_id_34913 = atomic_inc(&(v_work_idx_1891)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_34912 = atomic_inc(v_work_idx_1893); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__34917",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__34918",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__34919",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__34920",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34921",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34922",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34936",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34924",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__34937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}