{
  "name" : "swrg-slcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__96760, const global float* restrict v__96761, const global float* restrict v__96762, const global float* restrict v__96763, float v__96764, float v__96765, global float* v__96779, global float* v__96778, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96767; \n  float v__96770; \n  /* Private Memory */\n  float v__96772_0;\n  \n  float v__96774_0;\n  \n  for (int v_wg_id_96755 = get_group_id(0); v_wg_id_96755 < ((v_MHeight_2)/(256)); v_wg_id_96755 = (v_wg_id_96755 + get_num_groups(0))) {\n    for (int v_l_id_96756 = get_local_id(0); v_l_id_96756 < 256; v_l_id_96756 = (v_l_id_96756 + get_local_size(0))) {\n      float v_tmp_96816 = 3.4028235E38f; \n      v__96767 = v_tmp_96816; \n      /* reduce_seq */\n      int v_stop_96817 = min(v__96760[(1 + (v__96760[(v_l_id_96756 + (256 * v_wg_id_96755))] / 4))], ((global int*)(v__96761 + (((global int*)(v__96761))[(v_l_id_96756 + (256 * v_wg_id_96755))] / 4)))[1]); \n      for (int v_i_96757 = 0; v_i_96757 < v_stop_96817; v_i_96757 = (1 + v_i_96757)) {\n        float v_tmp_96825 = 3.4028235E38f; \n        v__96770 = v_tmp_96825; \n        int v_index_96827 = v__96760[(2 + v_i_96757 + (v__96760[(v_l_id_96756 + (256 * v_wg_id_96755))] / 4))]; \n        if (v_index_96827 < 0) {\n          v__96772_0 = v__96770; \n        } else {\n          if (v_index_96827 >= v_MWidthC_1) {\n            v__96772_0 = v__96770; \n          } else {\n            v__96772_0 = v__96762[v_index_96827]; \n          }\n        }\n        v__96774_0 = absadd(v__96761[(2 + v_i_96757 + (((global int*)(v__96761))[(v_l_id_96756 + (256 * v_wg_id_96755))] / 4))], v__96772_0); \n        v__96767 = clmin(v__96767, v__96774_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_96758 = 0; \n        v__96778[(v_l_id_96756 + (256 * v_wg_id_96755))] = doubleMultiplyAdd(v__96767, v__96764, v__96763[(v_l_id_96756 + (256 * v_wg_id_96755))], v__96765); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_96759 = 0; \n        v__96779[(v_l_id_96756 + (256 * v_wg_id_96755))] = id(v__96778[(v_l_id_96756 + (256 * v_wg_id_96755))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96760",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__96761",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__96762",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__96763",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96764",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96765",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96778",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__96779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}