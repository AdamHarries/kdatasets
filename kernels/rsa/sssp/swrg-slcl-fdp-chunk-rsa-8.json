{
  "name" : "swrg-slcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__75217, const global float* restrict v__75218, const global float* restrict v__75219, const global float* restrict v__75220, float v__75221, float v__75222, global float* v__75236, global float* v__75235, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75224; \n  float v__75227; \n  /* Private Memory */\n  float v__75229_0;\n  \n  float v__75231_0;\n  \n  for (int v_wg_id_75212 = get_group_id(0); v_wg_id_75212 < ((v_MHeight_2)/(8)); v_wg_id_75212 = (v_wg_id_75212 + get_num_groups(0))) {\n    for (int v_l_id_75213 = get_local_id(0); v_l_id_75213 < 8; v_l_id_75213 = (v_l_id_75213 + get_local_size(0))) {\n      float v_tmp_75273 = 3.4028235E38f; \n      v__75224 = v_tmp_75273; \n      /* reduce_seq */\n      int v_stop_75274 = min(v__75217[(1 + (v__75217[(v_l_id_75213 + (8 * v_wg_id_75212))] / 4))], ((global int*)(v__75218 + (((global int*)(v__75218))[(v_l_id_75213 + (8 * v_wg_id_75212))] / 4)))[1]); \n      for (int v_i_75214 = 0; v_i_75214 < v_stop_75274; v_i_75214 = (1 + v_i_75214)) {\n        float v_tmp_75282 = 3.4028235E38f; \n        v__75227 = v_tmp_75282; \n        int v_index_75284 = v__75217[(2 + v_i_75214 + (v__75217[(v_l_id_75213 + (8 * v_wg_id_75212))] / 4))]; \n        if (v_index_75284 < 0) {\n          v__75229_0 = v__75227; \n        } else {\n          if (v_index_75284 >= v_MWidthC_1) {\n            v__75229_0 = v__75227; \n          } else {\n            v__75229_0 = v__75219[v_index_75284]; \n          }\n        }\n        v__75231_0 = absadd(v__75218[(2 + v_i_75214 + (((global int*)(v__75218))[(v_l_id_75213 + (8 * v_wg_id_75212))] / 4))], v__75229_0); \n        v__75224 = clmin(v__75224, v__75231_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_75215 = 0; \n        v__75235[(v_l_id_75213 + (8 * v_wg_id_75212))] = doubleMultiplyAdd(v__75224, v__75221, v__75220[(v_l_id_75213 + (8 * v_wg_id_75212))], v__75222); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_75216 = 0; \n        v__75236[(v_l_id_75213 + (8 * v_wg_id_75212))] = id(v__75235[(v_l_id_75213 + (8 * v_wg_id_75212))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75217",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__75218",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__75219",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__75220",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75221",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75222",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__75236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}