{
  "name" : "swrg-slcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83802, const global float* restrict v__83803, const global float* restrict v__83804, const global float* restrict v__83805, float v__83806, float v__83807, global float* v__83821, global float* v__83820, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83809; \n  float v__83812; \n  /* Private Memory */\n  float v__83814_0;\n  \n  float v__83816_0;\n  \n  for (int v_wg_id_83797 = get_group_id(0); v_wg_id_83797 < ((v_MHeight_2)/(32)); v_wg_id_83797 = (v_wg_id_83797 + get_num_groups(0))) {\n    for (int v_l_id_83798 = get_local_id(0); v_l_id_83798 < 32; v_l_id_83798 = (v_l_id_83798 + get_local_size(0))) {\n      float v_tmp_83858 = 3.4028235E38f; \n      v__83809 = v_tmp_83858; \n      /* reduce_seq */\n      int v_stop_83859 = min(v__83802[(1 + (v__83802[(v_l_id_83798 + (32 * v_wg_id_83797))] / 4))], ((global int*)(v__83803 + (((global int*)(v__83803))[(v_l_id_83798 + (32 * v_wg_id_83797))] / 4)))[1]); \n      for (int v_i_83799 = 0; v_i_83799 < v_stop_83859; v_i_83799 = (1 + v_i_83799)) {\n        float v_tmp_83867 = 3.4028235E38f; \n        v__83812 = v_tmp_83867; \n        int v_index_83869 = v__83802[(2 + v_i_83799 + (v__83802[(v_l_id_83798 + (32 * v_wg_id_83797))] / 4))]; \n        if (v_index_83869 < 0) {\n          v__83814_0 = v__83812; \n        } else {\n          if (v_index_83869 >= v_MWidthC_1) {\n            v__83814_0 = v__83812; \n          } else {\n            v__83814_0 = v__83804[v_index_83869]; \n          }\n        }\n        v__83816_0 = absadd(v__83803[(2 + v_i_83799 + (((global int*)(v__83803))[(v_l_id_83798 + (32 * v_wg_id_83797))] / 4))], v__83814_0); \n        v__83809 = clmin(v__83809, v__83816_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_83800 = 0; \n        v__83820[(v_l_id_83798 + (32 * v_wg_id_83797))] = doubleMultiplyAdd(v__83809, v__83806, v__83805[(v_l_id_83798 + (32 * v_wg_id_83797))], v__83807); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_83801 = 0; \n        v__83821[(v_l_id_83798 + (32 * v_wg_id_83797))] = id(v__83820[(v_l_id_83798 + (32 * v_wg_id_83797))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83802",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__83803",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__83804",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__83805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83806",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83807",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__83821",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}