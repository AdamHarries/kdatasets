{
  "name" : "swrg-alcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97774, const global float* restrict v__97775, const global float* restrict v__97776, const global float* restrict v__97777, float v__97778, float v__97779, global float* v__97793, global float* v__97792, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97781; \n  float v__97784; \n  /* Private Memory */\n  float v__97786_0;\n  \n  float v__97788_0;\n  \n  for (int v_wg_id_97769 = get_group_id(0); v_wg_id_97769 < ((v_MHeight_2)/(256)); v_wg_id_97769 = (v_wg_id_97769 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7541; \n      v_work_idx_7541 = 0; \n      int v_l_id_97770 = atomic_inc(&(v_work_idx_7541)); \n      while((v_l_id_97770 < 256)){\n        float v_tmp_97826 = 3.4028235E38f; \n        v__97781 = v_tmp_97826; \n        /* reduce_seq */\n        int v_stop_97827 = min(v__97774[(1 + (v__97774[(v_l_id_97770 + (256 * v_wg_id_97769))] / 4))], ((global int*)(v__97775 + (((global int*)(v__97775))[(v_l_id_97770 + (256 * v_wg_id_97769))] / 4)))[1]); \n        for (int v_i_97771 = 0; v_i_97771 < v_stop_97827; v_i_97771 = (1 + v_i_97771)) {\n          float v_tmp_97835 = 3.4028235E38f; \n          v__97784 = v_tmp_97835; \n          int v_index_97837 = v__97774[(2 + v_i_97771 + (v__97774[(v_l_id_97770 + (256 * v_wg_id_97769))] / 4))]; \n          if (v_index_97837 < 0) {\n            v__97786_0 = v__97784; \n          } else {\n            if (v_index_97837 >= v_MWidthC_1) {\n              v__97786_0 = v__97784; \n            } else {\n              v__97786_0 = v__97776[v_index_97837]; \n            }\n          }\n          v__97788_0 = absadd(v__97775[(2 + v_i_97771 + (((global int*)(v__97775))[(v_l_id_97770 + (256 * v_wg_id_97769))] / 4))], v__97786_0); \n          v__97781 = clmin(v__97781, v__97788_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97772 = 0; \n          v__97792[(v_l_id_97770 + (256 * v_wg_id_97769))] = doubleMultiplyAdd(v__97781, v__97778, v__97777[(v_l_id_97770 + (256 * v_wg_id_97769))], v__97779); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97773 = 0; \n          v__97793[(v_l_id_97770 + (256 * v_wg_id_97769))] = id(v__97792[(v_l_id_97770 + (256 * v_wg_id_97769))]); \n        }\n        /* end map_seq */\n        v_l_id_97770 = atomic_inc(&(v_work_idx_7541)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__97774",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97775",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97776",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__97777",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97778",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97779",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97792",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__97793",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}