{
  "name" : "awrg-alcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__91414, const global float* restrict v__91415, const global float* restrict v__91416, const global float* restrict v__91417, float v__91418, float v__91419, global float* v__91434, global float* v__91433, global int* v__91421, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91422; \n  float v__91425; \n  /* Private Memory */\n  float v__91427_0;\n  \n  float v__91429_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6978 = v__91421; \n    local int v_w_id_91409; \n    if (get_local_id(0) == 0) {\n      v_w_id_91409 = atomic_inc(v_work_idx_6978); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_91409 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6976; \n        v_work_idx_6976 = 0; \n        int v_l_id_91410 = atomic_inc(&(v_work_idx_6976)); \n        while((v_l_id_91410 < 64)){\n          float v_tmp_91466 = 3.4028235E38f; \n          v__91422 = v_tmp_91466; \n          /* reduce_seq */\n          int v_stop_91467 = min(v__91414[(1 + (v__91414[(v_l_id_91410 + (64 * v_w_id_91409))] / 4))], ((global int*)(v__91415 + (((global int*)(v__91415))[(v_l_id_91410 + (64 * v_w_id_91409))] / 4)))[1]); \n          for (int v_i_91411 = 0; v_i_91411 < v_stop_91467; v_i_91411 = (1 + v_i_91411)) {\n            float v_tmp_91475 = 3.4028235E38f; \n            v__91425 = v_tmp_91475; \n            int v_index_91477 = v__91414[(2 + v_i_91411 + (v__91414[(v_l_id_91410 + (64 * v_w_id_91409))] / 4))]; \n            if (v_index_91477 < 0) {\n              v__91427_0 = v__91425; \n            } else {\n              if (v_index_91477 >= v_MWidthC_1) {\n                v__91427_0 = v__91425; \n              } else {\n                v__91427_0 = v__91416[v_index_91477]; \n              }\n            }\n            v__91429_0 = absadd(v__91415[(2 + v_i_91411 + (((global int*)(v__91415))[(v_l_id_91410 + (64 * v_w_id_91409))] / 4))], v__91427_0); \n            v__91422 = clmin(v__91422, v__91429_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91412 = 0; \n            v__91433[(v_l_id_91410 + (64 * v_w_id_91409))] = doubleMultiplyAdd(v__91422, v__91418, v__91417[(v_l_id_91410 + (64 * v_w_id_91409))], v__91419); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91413 = 0; \n            v__91434[(v_l_id_91410 + (64 * v_w_id_91409))] = id(v__91433[(v_l_id_91410 + (64 * v_w_id_91409))]); \n          }\n          /* end map_seq */\n          v_l_id_91410 = atomic_inc(&(v_work_idx_6976)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_91409 = atomic_inc(v_work_idx_6978); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__91414",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91415",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91416",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__91417",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91418",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91419",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91421",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__91434",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}