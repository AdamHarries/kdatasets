{
  "name" : "awrg-alcl-sdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__126118, const global float* restrict v__126119, const global float* restrict v__126120, const global float* restrict v__126121, float v__126122, float v__126123, global float* v__126138, global float* v__126137, global int* v__126125, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126126; \n  float v__126129; \n  /* Private Memory */\n  float v__126131_0;\n  \n  float v__126133_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10079 = v__126125; \n    local int v_w_id_126113; \n    if (get_local_id(0) == 0) {\n      v_w_id_126113 = atomic_inc(v_work_idx_10079); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126113 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10077; \n        v_work_idx_10077 = 0; \n        int v_l_id_126114 = atomic_inc(&(v_work_idx_10077)); \n        while((v_l_id_126114 < 128)){\n          float v_tmp_126170 = 0.0f; \n          v__126126 = v_tmp_126170; \n          /* reduce_seq */\n          int v_stop_126171 = min(v__126118[(1 + (v__126118[(v_l_id_126114 + (128 * v_w_id_126113))] / 4))], ((global int*)(v__126119 + (((global int*)(v__126119))[(v_l_id_126114 + (128 * v_w_id_126113))] / 4)))[1]); \n          for (int v_i_126115 = 0; v_i_126115 < v_stop_126171; v_i_126115 = (1 + v_i_126115)) {\n            float v_tmp_126179 = 0.0f; \n            v__126129 = v_tmp_126179; \n            int v_index_126181 = v__126118[(2 + v_i_126115 + (v__126118[(v_l_id_126114 + (128 * v_w_id_126113))] / 4))]; \n            if (v_index_126181 < 0) {\n              v__126131_0 = v__126129; \n            } else {\n              if (v_index_126181 >= v_MWidthC_1) {\n                v__126131_0 = v__126129; \n              } else {\n                v__126131_0 = v__126120[v_index_126181]; \n              }\n            }\n            v__126133_0 = mult(v__126119[(2 + v_i_126115 + (((global int*)(v__126119))[(v_l_id_126114 + (128 * v_w_id_126113))] / 4))], v__126131_0); \n            v__126126 = add(v__126126, v__126133_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126116 = 0; \n            v__126137[(v_l_id_126114 + (128 * v_w_id_126113))] = doubleMultiplyAdd(v__126126, v__126122, v__126121[(v_l_id_126114 + (128 * v_w_id_126113))], v__126123); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126117 = 0; \n            v__126138[(v_l_id_126114 + (128 * v_w_id_126113))] = id(v__126137[(v_l_id_126114 + (128 * v_w_id_126113))]); \n          }\n          /* end map_seq */\n          v_l_id_126114 = atomic_inc(&(v_work_idx_10077)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126113 = atomic_inc(v_work_idx_10079); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__126118",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126119",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126120",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__126121",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126122",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126123",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126125",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126138",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}