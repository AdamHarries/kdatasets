{
  "name" : "swrg-slcl-sdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__131456, const global float* restrict v__131457, const global float* restrict v__131458, const global float* restrict v__131459, float v__131460, float v__131461, global float* v__131475, global float* v__131474, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131463; \n  float v__131466; \n  /* Private Memory */\n  float v__131468_0;\n  \n  float v__131470_0;\n  \n  for (int v_wg_id_131451 = get_group_id(0); v_wg_id_131451 < ((v_MHeight_2)/(512)); v_wg_id_131451 = (v_wg_id_131451 + get_num_groups(0))) {\n    for (int v_l_id_131452 = get_local_id(0); v_l_id_131452 < 512; v_l_id_131452 = (v_l_id_131452 + get_local_size(0))) {\n      float v_tmp_131512 = 0.0f; \n      v__131463 = v_tmp_131512; \n      /* reduce_seq */\n      int v_stop_131513 = min(v__131456[(1 + (v__131456[(v_l_id_131452 + (512 * v_wg_id_131451))] / 4))], ((global int*)(v__131457 + (((global int*)(v__131457))[(v_l_id_131452 + (512 * v_wg_id_131451))] / 4)))[1]); \n      for (int v_i_131453 = 0; v_i_131453 < v_stop_131513; v_i_131453 = (1 + v_i_131453)) {\n        float v_tmp_131521 = 0.0f; \n        v__131466 = v_tmp_131521; \n        int v_index_131523 = v__131456[(2 + v_i_131453 + (v__131456[(v_l_id_131452 + (512 * v_wg_id_131451))] / 4))]; \n        if (v_index_131523 < 0) {\n          v__131468_0 = v__131466; \n        } else {\n          if (v_index_131523 >= v_MWidthC_1) {\n            v__131468_0 = v__131466; \n          } else {\n            v__131468_0 = v__131458[v_index_131523]; \n          }\n        }\n        v__131470_0 = mult(v__131457[(2 + v_i_131453 + (((global int*)(v__131457))[(v_l_id_131452 + (512 * v_wg_id_131451))] / 4))], v__131468_0); \n        v__131463 = add(v__131463, v__131470_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131454 = 0; \n        v__131474[(v_l_id_131452 + (512 * v_wg_id_131451))] = doubleMultiplyAdd(v__131463, v__131460, v__131459[(v_l_id_131452 + (512 * v_wg_id_131451))], v__131461); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131455 = 0; \n        v__131475[(v_l_id_131452 + (512 * v_wg_id_131451))] = id(v__131474[(v_l_id_131452 + (512 * v_wg_id_131451))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__131456",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__131457",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__131458",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__131459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131460",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131461",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__131474",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__131475",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}