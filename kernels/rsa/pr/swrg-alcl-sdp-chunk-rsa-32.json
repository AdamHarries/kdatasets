{
  "name" : "swrg-alcl-sdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__115388, const global float* restrict v__115389, const global float* restrict v__115390, const global float* restrict v__115391, float v__115392, float v__115393, global float* v__115407, global float* v__115406, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115395; \n  float v__115398; \n  /* Private Memory */\n  float v__115400_0;\n  \n  float v__115402_0;\n  \n  for (int v_wg_id_115383 = get_group_id(0); v_wg_id_115383 < ((v_MHeight_2)/(32)); v_wg_id_115383 = (v_wg_id_115383 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9114; \n      v_work_idx_9114 = 0; \n      int v_l_id_115384 = atomic_inc(&(v_work_idx_9114)); \n      while((v_l_id_115384 < 32)){\n        float v_tmp_115440 = 0.0f; \n        v__115395 = v_tmp_115440; \n        /* reduce_seq */\n        int v_stop_115441 = min(v__115388[(1 + (v__115388[(v_l_id_115384 + (32 * v_wg_id_115383))] / 4))], ((global int*)(v__115389 + (((global int*)(v__115389))[(v_l_id_115384 + (32 * v_wg_id_115383))] / 4)))[1]); \n        for (int v_i_115385 = 0; v_i_115385 < v_stop_115441; v_i_115385 = (1 + v_i_115385)) {\n          float v_tmp_115449 = 0.0f; \n          v__115398 = v_tmp_115449; \n          int v_index_115451 = v__115388[(2 + v_i_115385 + (v__115388[(v_l_id_115384 + (32 * v_wg_id_115383))] / 4))]; \n          if (v_index_115451 < 0) {\n            v__115400_0 = v__115398; \n          } else {\n            if (v_index_115451 >= v_MWidthC_1) {\n              v__115400_0 = v__115398; \n            } else {\n              v__115400_0 = v__115390[v_index_115451]; \n            }\n          }\n          v__115402_0 = mult(v__115389[(2 + v_i_115385 + (((global int*)(v__115389))[(v_l_id_115384 + (32 * v_wg_id_115383))] / 4))], v__115400_0); \n          v__115395 = add(v__115395, v__115402_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115386 = 0; \n          v__115406[(v_l_id_115384 + (32 * v_wg_id_115383))] = doubleMultiplyAdd(v__115395, v__115392, v__115391[(v_l_id_115384 + (32 * v_wg_id_115383))], v__115393); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115387 = 0; \n          v__115407[(v_l_id_115384 + (32 * v_wg_id_115383))] = id(v__115406[(v_l_id_115384 + (32 * v_wg_id_115383))]); \n        }\n        /* end map_seq */\n        v_l_id_115384 = atomic_inc(&(v_work_idx_9114)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__115388",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115389",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115390",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__115391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115392",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115393",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__115407",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}