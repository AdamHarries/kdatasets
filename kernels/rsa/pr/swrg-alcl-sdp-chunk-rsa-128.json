{
  "name" : "swrg-alcl-sdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__123972, const global float* restrict v__123973, const global float* restrict v__123974, const global float* restrict v__123975, float v__123976, float v__123977, global float* v__123991, global float* v__123990, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123979; \n  float v__123982; \n  /* Private Memory */\n  float v__123984_0;\n  \n  float v__123986_0;\n  \n  for (int v_wg_id_123967 = get_group_id(0); v_wg_id_123967 < ((v_MHeight_2)/(128)); v_wg_id_123967 = (v_wg_id_123967 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9882; \n      v_work_idx_9882 = 0; \n      int v_l_id_123968 = atomic_inc(&(v_work_idx_9882)); \n      while((v_l_id_123968 < 128)){\n        float v_tmp_124024 = 0.0f; \n        v__123979 = v_tmp_124024; \n        /* reduce_seq */\n        int v_stop_124025 = min(v__123972[(1 + (v__123972[(v_l_id_123968 + (128 * v_wg_id_123967))] / 4))], ((global int*)(v__123973 + (((global int*)(v__123973))[(v_l_id_123968 + (128 * v_wg_id_123967))] / 4)))[1]); \n        for (int v_i_123969 = 0; v_i_123969 < v_stop_124025; v_i_123969 = (1 + v_i_123969)) {\n          float v_tmp_124033 = 0.0f; \n          v__123982 = v_tmp_124033; \n          int v_index_124035 = v__123972[(2 + v_i_123969 + (v__123972[(v_l_id_123968 + (128 * v_wg_id_123967))] / 4))]; \n          if (v_index_124035 < 0) {\n            v__123984_0 = v__123982; \n          } else {\n            if (v_index_124035 >= v_MWidthC_1) {\n              v__123984_0 = v__123982; \n            } else {\n              v__123984_0 = v__123974[v_index_124035]; \n            }\n          }\n          v__123986_0 = mult(v__123973[(2 + v_i_123969 + (((global int*)(v__123973))[(v_l_id_123968 + (128 * v_wg_id_123967))] / 4))], v__123984_0); \n          v__123979 = add(v__123979, v__123986_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_123970 = 0; \n          v__123990[(v_l_id_123968 + (128 * v_wg_id_123967))] = doubleMultiplyAdd(v__123979, v__123976, v__123975[(v_l_id_123968 + (128 * v_wg_id_123967))], v__123977); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_123971 = 0; \n          v__123991[(v_l_id_123968 + (128 * v_wg_id_123967))] = id(v__123990[(v_l_id_123968 + (128 * v_wg_id_123967))]); \n        }\n        /* end map_seq */\n        v_l_id_123968 = atomic_inc(&(v_work_idx_9882)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__123972",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__123973",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__123974",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__123975",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123976",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123977",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__123990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__123991",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}