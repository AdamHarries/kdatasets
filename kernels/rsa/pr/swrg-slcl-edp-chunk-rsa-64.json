{
  "name" : "swrg-slcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__118744, const global float* restrict v__118745, const global float* restrict v__118746, const global float* restrict v__118747, float v__118748, float v__118749, global float* v__118763, global float* v__118762, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118751; \n  float v__118754; \n  /* Private Memory */\n  float v__118756_0;\n  \n  float v__118758_0;\n  \n  for (int v_wg_id_118739 = get_group_id(0); v_wg_id_118739 < ((v_MHeight_2)/(64)); v_wg_id_118739 = (v_wg_id_118739 + get_num_groups(0))) {\n    for (int v_l_id_118740 = get_local_id(0); v_l_id_118740 < 64; v_l_id_118740 = (v_l_id_118740 + get_local_size(0))) {\n      float v_tmp_118800 = 0.0f; \n      v__118751 = v_tmp_118800; \n      /* reduce_seq */\n      int v_stop_118801 = min(v__118744[(1 + (v__118744[(v_l_id_118740 + (64 * v_wg_id_118739))] / 4))], ((global int*)(v__118745 + (((global int*)(v__118745))[(v_l_id_118740 + (64 * v_wg_id_118739))] / 4)))[1]); \n      for (int v_i_118741 = 0; v_i_118741 < v_stop_118801; v_i_118741 = (1 + v_i_118741)) {\n        float v_tmp_118809 = 0.0f; \n        v__118754 = v_tmp_118809; \n        int v_index_118811 = v__118744[(2 + v_i_118741 + (v__118744[(v_l_id_118740 + (64 * v_wg_id_118739))] / 4))]; \n        if (v_index_118811 < 0) {\n          v__118756_0 = v__118754; \n        } else {\n          if (v_index_118811 >= v_MWidthC_1) {\n            v__118756_0 = v__118754; \n          } else {\n            v__118756_0 = v__118746[v_index_118811]; \n          }\n        }\n        v__118758_0 = mult(v__118745[(2 + v_i_118741 + (((global int*)(v__118745))[(v_l_id_118740 + (64 * v_wg_id_118739))] / 4))], v__118756_0); \n        v__118751 = add(v__118751, v__118758_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_118742 = 0; \n        v__118762[(v_l_id_118740 + (64 * v_wg_id_118739))] = doubleMultiplyAdd(v__118751, v__118748, v__118747[(v_l_id_118740 + (64 * v_wg_id_118739))], v__118749); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_118743 = 0; \n        v__118763[(v_l_id_118740 + (64 * v_wg_id_118739))] = id(v__118762[(v_l_id_118740 + (64 * v_wg_id_118739))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__118744",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__118745",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__118746",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__118747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118748",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118749",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__118762",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__118763",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}