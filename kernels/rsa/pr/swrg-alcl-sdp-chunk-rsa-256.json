{
  "name" : "swrg-alcl-sdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__128264, const global float* restrict v__128265, const global float* restrict v__128266, const global float* restrict v__128267, float v__128268, float v__128269, global float* v__128283, global float* v__128282, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128271; \n  float v__128274; \n  /* Private Memory */\n  float v__128276_0;\n  \n  float v__128278_0;\n  \n  for (int v_wg_id_128259 = get_group_id(0); v_wg_id_128259 < ((v_MHeight_2)/(256)); v_wg_id_128259 = (v_wg_id_128259 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10266; \n      v_work_idx_10266 = 0; \n      int v_l_id_128260 = atomic_inc(&(v_work_idx_10266)); \n      while((v_l_id_128260 < 256)){\n        float v_tmp_128316 = 0.0f; \n        v__128271 = v_tmp_128316; \n        /* reduce_seq */\n        int v_stop_128317 = min(v__128264[(1 + (v__128264[(v_l_id_128260 + (256 * v_wg_id_128259))] / 4))], ((global int*)(v__128265 + (((global int*)(v__128265))[(v_l_id_128260 + (256 * v_wg_id_128259))] / 4)))[1]); \n        for (int v_i_128261 = 0; v_i_128261 < v_stop_128317; v_i_128261 = (1 + v_i_128261)) {\n          float v_tmp_128325 = 0.0f; \n          v__128274 = v_tmp_128325; \n          int v_index_128327 = v__128264[(2 + v_i_128261 + (v__128264[(v_l_id_128260 + (256 * v_wg_id_128259))] / 4))]; \n          if (v_index_128327 < 0) {\n            v__128276_0 = v__128274; \n          } else {\n            if (v_index_128327 >= v_MWidthC_1) {\n              v__128276_0 = v__128274; \n            } else {\n              v__128276_0 = v__128266[v_index_128327]; \n            }\n          }\n          v__128278_0 = mult(v__128265[(2 + v_i_128261 + (((global int*)(v__128265))[(v_l_id_128260 + (256 * v_wg_id_128259))] / 4))], v__128276_0); \n          v__128271 = add(v__128271, v__128278_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128262 = 0; \n          v__128282[(v_l_id_128260 + (256 * v_wg_id_128259))] = doubleMultiplyAdd(v__128271, v__128268, v__128267[(v_l_id_128260 + (256 * v_wg_id_128259))], v__128269); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128263 = 0; \n          v__128283[(v_l_id_128260 + (256 * v_wg_id_128259))] = id(v__128282[(v_l_id_128260 + (256 * v_wg_id_128259))]); \n        }\n        /* end map_seq */\n        v_l_id_128260 = atomic_inc(&(v_work_idx_10266)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__128264",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__128265",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__128266",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__128267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128268",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128269",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__128282",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__128283",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}