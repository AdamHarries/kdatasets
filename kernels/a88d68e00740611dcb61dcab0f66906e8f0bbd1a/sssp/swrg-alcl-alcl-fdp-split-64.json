{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68610, const global float* restrict v__68611, const global float* restrict v__68612, const global float* restrict v__68613, float v__68614, float v__68615, global float* v__68632, local float* v__68627, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68618; \n  float v__68620; \n  float v__57071; \n  /* Private Memory */\n  float v__68622_0;\n  \n  float v__68624_0;\n  \n  for (int v_wg_id_68603 = get_group_id(0); v_wg_id_68603 < v_MHeight_2; v_wg_id_68603 = (v_wg_id_68603 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5571; \n      v_work_idx_5571 = 0; \n      int v_l_id_68604 = atomic_inc(&(v_work_idx_5571)); \n      while((v_l_id_68604 < v_MWidthC_1)){\n        float v_tmp_68685 = 3.4028235E38f; \n        v__68618 = v_tmp_68685; \n        /* reduce_seq */\n        for (int v_i_68605 = 0; v_i_68605 < 64; v_i_68605 = (1 + v_i_68605)) {\n          float v_tmp_68686 = 3.4028235E38f; \n          v__68620 = v_tmp_68686; \n          int v_index_68687 = v__68610[(v_l_id_68604 + (64 * v_MWidthC_1 * v_wg_id_68603) + (v_MWidthC_1 * v_i_68605))]; \n          if (v_index_68687 < 0) {\n            v__68622_0 = v__68620; \n          } else {\n            if (v_index_68687 >= v_VLength_3) {\n              v__68622_0 = v__68620; \n            } else {\n              v__68622_0 = v__68612[v_index_68687]; \n            }\n          }\n          v__68624_0 = absadd(v__68622_0, v__68611[(v_l_id_68604 + (64 * v_MWidthC_1 * v_wg_id_68603) + (v_MWidthC_1 * v_i_68605))]); \n          v__68618 = clmin(v__68624_0, v__68618); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68606 = 0; \n          v__68627[v_l_id_68604] = id(v__68618); \n        }\n        /* end map_seq */\n        v_l_id_68604 = atomic_inc(&(v_work_idx_5571)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5566; \n      v_work_idx_5566 = 0; \n      int v_l_id_68607 = atomic_inc(&(v_work_idx_5566)); \n      while((v_l_id_68607 < 1)){\n        float v_tmp_68690 = 3.4028235E38f; \n        v__57071 = v_tmp_68690; \n        /* reduce_seq */\n        for (int v_i_68608 = 0; v_i_68608 < v_MWidthC_1; v_i_68608 = (1 + v_i_68608)) {\n          v__57071 = clmin(v__57071, v__68627[(v_i_68608 + (v_MWidthC_1 * v_l_id_68607))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68609 = 0; \n          v__68632[v_wg_id_68603] = doubleMultiplyAdd(v__57071, v__68614, v__68613[v_wg_id_68603], v__68615); \n        }\n        /* end map_seq */\n        v_l_id_68607 = atomic_inc(&(v_work_idx_5566)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68610",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68611",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68612",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68632",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68627",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}