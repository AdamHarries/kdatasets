{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61022, const global float* restrict v__61023, const global float* restrict v__61024, const global float* restrict v__61025, float v__61026, float v__61027, global float* v__61044, global float* v__61034, local float* v__61039, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61030; \n  float v__61035; \n  float v__57071; \n  /* Private Memory */\n  float v__61032_0;\n  \n  for (int v_wg_id_61014 = get_group_id(0); v_wg_id_61014 < v_MHeight_2; v_wg_id_61014 = (v_wg_id_61014 + get_num_groups(0))) {\n    for (int v_l_id_61015 = get_local_id(0); v_l_id_61015 < v_MWidthC_1; v_l_id_61015 = (v_l_id_61015 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_61016 = 0; v_i_61016 < 16; v_i_61016 = (1 + v_i_61016)) {\n        float v_tmp_61105 = 3.4028235E38f; \n        v__61030 = v_tmp_61105; \n        int v_index_61106 = v__61022[(v_l_id_61015 + (16 * v_MWidthC_1 * v_wg_id_61014) + (v_MWidthC_1 * v_i_61016))]; \n        if (v_index_61106 < 0) {\n          v__61032_0 = v__61030; \n        } else {\n          if (v_index_61106 >= v_VLength_3) {\n            v__61032_0 = v__61030; \n          } else {\n            v__61032_0 = v__61024[v_index_61106]; \n          }\n        }\n        v__61034[(15 + (16 * v_MWidthC_1 * v_wg_id_61014) + (-1 * v_i_61016) + (16 * v_l_id_61015))] = absadd(v__61032_0, v__61023[(v_l_id_61015 + (16 * v_MWidthC_1 * v_wg_id_61014) + (v_MWidthC_1 * v_i_61016))]); \n      }\n      /* end map_seq */\n      float v_tmp_61107 = 3.4028235E38f; \n      v__61035 = v_tmp_61107; \n      /* reduce_seq */\n      for (int v_i_61017 = 0; v_i_61017 < 16; v_i_61017 = (1 + v_i_61017)) {\n        v__61035 = clmin(v__61035, v__61034[(v_i_61017 + (16 * v_MWidthC_1 * v_wg_id_61014) + (16 * v_l_id_61015))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_61018 = 0; \n        v__61039[v_l_id_61015] = id(v__61035); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4856; \n      v_work_idx_4856 = 0; \n      int v_l_id_61019 = atomic_inc(&(v_work_idx_4856)); \n      while((v_l_id_61019 < 1)){\n        float v_tmp_61110 = 3.4028235E38f; \n        v__57071 = v_tmp_61110; \n        /* reduce_seq */\n        for (int v_i_61020 = 0; v_i_61020 < v_MWidthC_1; v_i_61020 = (1 + v_i_61020)) {\n          v__57071 = clmin(v__57071, v__61039[(v_i_61020 + (v_MWidthC_1 * v_l_id_61019))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61021 = 0; \n          v__61044[v_wg_id_61014] = doubleMultiplyAdd(v__57071, v__61026, v__61025[v_wg_id_61014], v__61027); \n        }\n        /* end map_seq */\n        v_l_id_61019 = atomic_inc(&(v_work_idx_4856)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61022",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61023",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61024",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61025",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61026",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61027",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61034",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61044",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61039",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}