{
  "name" : "swrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73868, const global float* restrict v__73869, const global float* restrict v__73870, const global float* restrict v__73871, float v__73872, float v__73873, global float* v__73886, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73876; \n  float v__73878; \n  /* Private Memory */\n  float v__73880_0;\n  \n  float v__73882_0;\n  \n  for (int v_wg_id_73864 = get_group_id(0); v_wg_id_73864 < ((v_MHeight_2)/(256)); v_wg_id_73864 = (v_wg_id_73864 + get_num_groups(0))) {\n    for (int v_l_id_73865 = get_local_id(0); v_l_id_73865 < 256; v_l_id_73865 = (v_l_id_73865 + get_local_size(0))) {\n      float v_tmp_73928 = 3.4028235E38f; \n      v__73876 = v_tmp_73928; \n      /* reduce_seq */\n      for (int v_i_73866 = 0; v_i_73866 < v_MWidthC_1; v_i_73866 = (1 + v_i_73866)) {\n        float v_tmp_73929 = 3.4028235E38f; \n        v__73878 = v_tmp_73929; \n        int v_index_73930 = v__73868[(v_i_73866 + (256 * v_MWidthC_1 * v_wg_id_73864) + (v_MWidthC_1 * v_l_id_73865))]; \n        if (v_index_73930 < 0) {\n          v__73880_0 = v__73878; \n        } else {\n          if (v_index_73930 >= v_VLength_3) {\n            v__73880_0 = v__73878; \n          } else {\n            v__73880_0 = v__73870[v_index_73930]; \n          }\n        }\n        v__73882_0 = absadd(v__73880_0, v__73869[(v_i_73866 + (256 * v_MWidthC_1 * v_wg_id_73864) + (v_MWidthC_1 * v_l_id_73865))]); \n        v__73876 = clmin(v__73882_0, v__73876); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_73867 = 0; \n        v__73886[(v_l_id_73865 + (256 * v_wg_id_73864))] = doubleMultiplyAdd(v__73876, v__73872, v__73871[(v_l_id_73865 + (256 * v_wg_id_73864))], v__73873); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73868",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73869",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73870",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73871",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73872",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73873",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__73886",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}