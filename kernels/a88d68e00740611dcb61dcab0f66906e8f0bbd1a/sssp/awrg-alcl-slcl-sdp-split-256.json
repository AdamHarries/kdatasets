{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76546, const global float* restrict v__76547, const global float* restrict v__76548, const global float* restrict v__76549, float v__76550, float v__76551, global float* v__76569, global float* v__76559, global int* v__76553, local float* v__76564, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76555; \n  float v__76560; \n  float v__57071; \n  /* Private Memory */\n  float v__76557_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6317 = v__76553; \n    local int v_w_id_76538; \n    if (get_local_id(0) == 0) {\n      v_w_id_76538 = atomic_inc(v_work_idx_6317); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76538 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6315; \n        v_work_idx_6315 = 0; \n        int v_l_id_76539 = atomic_inc(&(v_work_idx_6315)); \n        while((v_l_id_76539 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_76540 = 0; v_i_76540 < 256; v_i_76540 = (1 + v_i_76540)) {\n            float v_tmp_76624 = 3.4028235E38f; \n            v__76555 = v_tmp_76624; \n            int v_index_76625 = v__76546[(v_l_id_76539 + (256 * v_MWidthC_1 * v_w_id_76538) + (v_MWidthC_1 * v_i_76540))]; \n            if (v_index_76625 < 0) {\n              v__76557_0 = v__76555; \n            } else {\n              if (v_index_76625 >= v_VLength_3) {\n                v__76557_0 = v__76555; \n              } else {\n                v__76557_0 = v__76548[v_index_76625]; \n              }\n            }\n            v__76559[(255 + (256 * v_MWidthC_1 * v_w_id_76538) + (-1 * v_i_76540) + (256 * v_l_id_76539))] = absadd(v__76557_0, v__76547[(v_l_id_76539 + (256 * v_MWidthC_1 * v_w_id_76538) + (v_MWidthC_1 * v_i_76540))]); \n          }\n          /* end map_seq */\n          float v_tmp_76626 = 3.4028235E38f; \n          v__76560 = v_tmp_76626; \n          /* reduce_seq */\n          for (int v_i_76541 = 0; v_i_76541 < 256; v_i_76541 = (1 + v_i_76541)) {\n            v__76560 = clmin(v__76560, v__76559[(v_i_76541 + (256 * v_MWidthC_1 * v_w_id_76538) + (256 * v_l_id_76539))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76542 = 0; \n            v__76564[v_l_id_76539] = id(v__76560); \n          }\n          /* end map_seq */\n          v_l_id_76539 = atomic_inc(&(v_work_idx_6315)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_76543 = get_local_id(0); \n        float v_tmp_76629 = 3.4028235E38f; \n        v__57071 = v_tmp_76629; \n        /* reduce_seq */\n        for (int v_i_76544 = 0; v_i_76544 < v_MWidthC_1; v_i_76544 = (1 + v_i_76544)) {\n          v__57071 = clmin(v__57071, v__76564[(v_i_76544 + (v_MWidthC_1 * v_l_id_76543))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76545 = 0; \n          v__76569[v_w_id_76538] = doubleMultiplyAdd(v__57071, v__76550, v__76549[v_w_id_76538], v__76551); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76538 = atomic_inc(v_work_idx_6317); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76546",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76547",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76548",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76549",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76550",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76551",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76559",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76553",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76564",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}