{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58614, const global float* restrict v__58615, const global float* restrict v__58616, const global float* restrict v__58617, float v__58618, float v__58619, global float* v__58636, local float* v__58631, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58622; \n  float v__58624; \n  float v__57071; \n  /* Private Memory */\n  float v__58626_0;\n  \n  float v__58628_0;\n  \n  for (int v_wg_id_58607 = get_group_id(0); v_wg_id_58607 < v_MHeight_2; v_wg_id_58607 = (v_wg_id_58607 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4635; \n      v_work_idx_4635 = 0; \n      int v_l_id_58608 = atomic_inc(&(v_work_idx_4635)); \n      while((v_l_id_58608 < v_MWidthC_1)){\n        float v_tmp_58689 = 3.4028235E38f; \n        v__58622 = v_tmp_58689; \n        /* reduce_seq */\n        for (int v_i_58609 = 0; v_i_58609 < 8; v_i_58609 = (1 + v_i_58609)) {\n          float v_tmp_58690 = 3.4028235E38f; \n          v__58624 = v_tmp_58690; \n          int v_index_58691 = v__58614[(v_l_id_58608 + (8 * v_MWidthC_1 * v_wg_id_58607) + (v_MWidthC_1 * v_i_58609))]; \n          if (v_index_58691 < 0) {\n            v__58626_0 = v__58624; \n          } else {\n            if (v_index_58691 >= v_VLength_3) {\n              v__58626_0 = v__58624; \n            } else {\n              v__58626_0 = v__58616[v_index_58691]; \n            }\n          }\n          v__58628_0 = absadd(v__58626_0, v__58615[(v_l_id_58608 + (8 * v_MWidthC_1 * v_wg_id_58607) + (v_MWidthC_1 * v_i_58609))]); \n          v__58622 = clmin(v__58628_0, v__58622); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58610 = 0; \n          v__58631[v_l_id_58608] = id(v__58622); \n        }\n        /* end map_seq */\n        v_l_id_58608 = atomic_inc(&(v_work_idx_4635)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4630; \n      v_work_idx_4630 = 0; \n      int v_l_id_58611 = atomic_inc(&(v_work_idx_4630)); \n      while((v_l_id_58611 < 1)){\n        float v_tmp_58694 = 3.4028235E38f; \n        v__57071 = v_tmp_58694; \n        /* reduce_seq */\n        for (int v_i_58612 = 0; v_i_58612 < v_MWidthC_1; v_i_58612 = (1 + v_i_58612)) {\n          v__57071 = clmin(v__57071, v__58631[(v_i_58612 + (v_MWidthC_1 * v_l_id_58611))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58613 = 0; \n          v__58636[v_wg_id_58607] = doubleMultiplyAdd(v__57071, v__58618, v__58617[v_wg_id_58607], v__58619); \n        }\n        /* end map_seq */\n        v_l_id_58611 = atomic_inc(&(v_work_idx_4630)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58614",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58615",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58616",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58618",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58619",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58631",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}