{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56869, const global float* restrict v__56870, const global float* restrict v__56871, const global float* restrict v__56872, float v__56873, float v__56874, global float* v__56888, global float* v__56882, global int* v__56876, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__56878; \n  float v__56883; \n  /* Private Memory */\n  float v__56880_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4480 = v__56876; \n    local int v_w_id_56865; \n    if (get_local_id(0) == 0) {\n      v_w_id_56865 = atomic_inc(v_work_idx_4480); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56865 < v_MHeight_2)){\n      for (int v_l_id_56866 = get_local_id(0); v_l_id_56866 < v_MWidthC_1; v_l_id_56866 = (v_l_id_56866 + get_local_size(0))) {\n        float v_tmp_56926 = 3.4028235E38f; \n        v__56878 = v_tmp_56926; \n        int v_index_56927 = v__56869[(v_l_id_56866 + (v_MWidthC_1 * v_w_id_56865))]; \n        if (v_index_56927 < 0) {\n          v__56880_0 = v__56878; \n        } else {\n          if (v_index_56927 >= v_VLength_3) {\n            v__56880_0 = v__56878; \n          } else {\n            v__56880_0 = v__56871[v_index_56927]; \n          }\n        }\n        v__56882[(-1 + v_MWidthC_1 + (-1 * v_l_id_56866) + (v_MWidthC_1 * v_w_id_56865))] = absadd(v__56880_0, v__56870[(v_l_id_56866 + (v_MWidthC_1 * v_w_id_56865))]); \n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_56928 = 3.4028235E38f; \n      v__56883 = v_tmp_56928; \n      /* reduce_seq */\n      for (int v_i_56867 = 0; v_i_56867 < v_MWidthC_1; v_i_56867 = (1 + v_i_56867)) {\n        v__56883 = clmin(v__56883, v__56882[(v_i_56867 + (v_MWidthC_1 * v_w_id_56865))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_56868 = 0; \n        v__56888[v_w_id_56865] = doubleMultiplyAdd(v__56883, v__56873, v__56872[v_w_id_56865], v__56874); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_56865 = atomic_inc(v_work_idx_4480); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__56869",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56871",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56873",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56874",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56876",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}