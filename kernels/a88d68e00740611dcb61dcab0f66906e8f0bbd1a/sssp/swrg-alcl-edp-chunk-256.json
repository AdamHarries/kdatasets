{
  "name" : "swrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74799, const global float* restrict v__74800, const global float* restrict v__74801, const global float* restrict v__74802, float v__74803, float v__74804, global float* v__74819, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74806; \n  float v__74809; \n  /* Private Memory */\n  float v__74811_0;\n  \n  float v__74813_0;\n  \n  int v__74817_0;\n  \n  for (int v_wg_id_74795 = get_group_id(0); v_wg_id_74795 < ((v_MHeight_2)/(256)); v_wg_id_74795 = (v_wg_id_74795 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6146; \n      v_work_idx_6146 = 0; \n      int v_l_id_74796 = atomic_inc(&(v_work_idx_6146)); \n      while((v_l_id_74796 < 256)){\n        float v_tmp_74863 = 3.4028235E38f; \n        v__74806 = v_tmp_74863; \n        /* reduce_while_seq */\n        for (int v_i_74797 = 0; v_i_74797 < v_MWidthC_1; v_i_74797 = (1 + v_i_74797)) {\n          v__74817_0 = check(v__74806, v__74799[(v_i_74797 + (256 * v_MWidthC_1 * v_wg_id_74795) + (v_MWidthC_1 * v_l_id_74796))]); \n          if (v__74817_0) {\n          } else {\n            break;\n          }\n          float v_tmp_74864 = 3.4028235E38f; \n          v__74809 = v_tmp_74864; \n          int v_index_74865 = v__74799[(v_i_74797 + (256 * v_MWidthC_1 * v_wg_id_74795) + (v_MWidthC_1 * v_l_id_74796))]; \n          if (v_index_74865 < 0) {\n            v__74811_0 = v__74809; \n          } else {\n            if (v_index_74865 >= v_VLength_3) {\n              v__74811_0 = v__74809; \n            } else {\n              v__74811_0 = v__74801[v_index_74865]; \n            }\n          }\n          v__74813_0 = absadd(v__74811_0, v__74800[(v_i_74797 + (256 * v_MWidthC_1 * v_wg_id_74795) + (v_MWidthC_1 * v_l_id_74796))]); \n          v__74806 = clmin(v__74813_0, v__74806); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74798 = 0; \n          v__74819[(v_l_id_74796 + (256 * v_wg_id_74795))] = doubleMultiplyAdd(v__74806, v__74803, v__74802[(v_l_id_74796 + (256 * v_wg_id_74795))], v__74804); \n        }\n        /* end map_seq */\n        v_l_id_74796 = atomic_inc(&(v_work_idx_6146)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__74799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74800",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74801",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74802",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74803",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74804",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__74819",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}