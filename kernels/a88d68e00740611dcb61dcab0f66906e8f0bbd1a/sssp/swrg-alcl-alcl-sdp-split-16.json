{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61852, const global float* restrict v__61853, const global float* restrict v__61854, const global float* restrict v__61855, float v__61856, float v__61857, global float* v__61874, global float* v__61864, local float* v__61869, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61860; \n  float v__61865; \n  float v__57071; \n  /* Private Memory */\n  float v__61862_0;\n  \n  for (int v_wg_id_61844 = get_group_id(0); v_wg_id_61844 < v_MHeight_2; v_wg_id_61844 = (v_wg_id_61844 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4937; \n      v_work_idx_4937 = 0; \n      int v_l_id_61845 = atomic_inc(&(v_work_idx_4937)); \n      while((v_l_id_61845 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_61846 = 0; v_i_61846 < 16; v_i_61846 = (1 + v_i_61846)) {\n          float v_tmp_61927 = 3.4028235E38f; \n          v__61860 = v_tmp_61927; \n          int v_index_61928 = v__61852[(v_l_id_61845 + (16 * v_MWidthC_1 * v_wg_id_61844) + (v_MWidthC_1 * v_i_61846))]; \n          if (v_index_61928 < 0) {\n            v__61862_0 = v__61860; \n          } else {\n            if (v_index_61928 >= v_VLength_3) {\n              v__61862_0 = v__61860; \n            } else {\n              v__61862_0 = v__61854[v_index_61928]; \n            }\n          }\n          v__61864[(15 + (16 * v_MWidthC_1 * v_wg_id_61844) + (-1 * v_i_61846) + (16 * v_l_id_61845))] = absadd(v__61862_0, v__61853[(v_l_id_61845 + (16 * v_MWidthC_1 * v_wg_id_61844) + (v_MWidthC_1 * v_i_61846))]); \n        }\n        /* end map_seq */\n        float v_tmp_61929 = 3.4028235E38f; \n        v__61865 = v_tmp_61929; \n        /* reduce_seq */\n        for (int v_i_61847 = 0; v_i_61847 < 16; v_i_61847 = (1 + v_i_61847)) {\n          v__61865 = clmin(v__61865, v__61864[(v_i_61847 + (16 * v_MWidthC_1 * v_wg_id_61844) + (16 * v_l_id_61845))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61848 = 0; \n          v__61869[v_l_id_61845] = id(v__61865); \n        }\n        /* end map_seq */\n        v_l_id_61845 = atomic_inc(&(v_work_idx_4937)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4931; \n      v_work_idx_4931 = 0; \n      int v_l_id_61849 = atomic_inc(&(v_work_idx_4931)); \n      while((v_l_id_61849 < 1)){\n        float v_tmp_61932 = 3.4028235E38f; \n        v__57071 = v_tmp_61932; \n        /* reduce_seq */\n        for (int v_i_61850 = 0; v_i_61850 < v_MWidthC_1; v_i_61850 = (1 + v_i_61850)) {\n          v__57071 = clmin(v__57071, v__61869[(v_i_61850 + (v_MWidthC_1 * v_l_id_61849))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61851 = 0; \n          v__61874[v_wg_id_61844] = doubleMultiplyAdd(v__57071, v__61856, v__61855[v_wg_id_61844], v__61857); \n        }\n        /* end map_seq */\n        v_l_id_61849 = atomic_inc(&(v_work_idx_4931)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61852",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61853",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61854",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61856",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61857",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61864",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61874",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61869",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}