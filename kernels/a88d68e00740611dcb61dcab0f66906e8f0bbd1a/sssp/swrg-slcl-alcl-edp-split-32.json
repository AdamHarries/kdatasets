{
  "name" : "swrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__64558, const global float* restrict v__64559, const global float* restrict v__64560, const global float* restrict v__64561, float v__64562, float v__64563, global float* v__64582, local float* v__64577, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64566; \n  float v__64568; \n  float v__57071; \n  /* Private Memory */\n  float v__64570_0;\n  \n  float v__64572_0;\n  \n  int v__64576_0;\n  \n  for (int v_wg_id_64551 = get_group_id(0); v_wg_id_64551 < v_MHeight_2; v_wg_id_64551 = (v_wg_id_64551 + get_num_groups(0))) {\n    for (int v_l_id_64552 = get_local_id(0); v_l_id_64552 < v_MWidthC_1; v_l_id_64552 = (v_l_id_64552 + get_local_size(0))) {\n      float v_tmp_64646 = 3.4028235E38f; \n      v__64566 = v_tmp_64646; \n      /* reduce_while_seq */\n      for (int v_i_64553 = 0; v_i_64553 < 32; v_i_64553 = (1 + v_i_64553)) {\n        v__64576_0 = check(v__64566, v__64558[(v_l_id_64552 + (32 * v_MWidthC_1 * v_wg_id_64551) + (v_MWidthC_1 * v_i_64553))]); \n        if (v__64576_0) {\n        } else {\n          break;\n        }\n        float v_tmp_64647 = 3.4028235E38f; \n        v__64568 = v_tmp_64647; \n        int v_index_64648 = v__64558[(v_l_id_64552 + (32 * v_MWidthC_1 * v_wg_id_64551) + (v_MWidthC_1 * v_i_64553))]; \n        if (v_index_64648 < 0) {\n          v__64570_0 = v__64568; \n        } else {\n          if (v_index_64648 >= v_VLength_3) {\n            v__64570_0 = v__64568; \n          } else {\n            v__64570_0 = v__64560[v_index_64648]; \n          }\n        }\n        v__64572_0 = absadd(v__64570_0, v__64559[(v_l_id_64552 + (32 * v_MWidthC_1 * v_wg_id_64551) + (v_MWidthC_1 * v_i_64553))]); \n        v__64566 = clmin(v__64572_0, v__64566); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64554 = 0; \n        v__64577[v_l_id_64552] = id(v__64566); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5187; \n      v_work_idx_5187 = 0; \n      int v_l_id_64555 = atomic_inc(&(v_work_idx_5187)); \n      while((v_l_id_64555 < 1)){\n        float v_tmp_64651 = 3.4028235E38f; \n        v__57071 = v_tmp_64651; \n        /* reduce_seq */\n        for (int v_i_64556 = 0; v_i_64556 < v_MWidthC_1; v_i_64556 = (1 + v_i_64556)) {\n          v__57071 = clmin(v__57071, v__64577[(v_i_64556 + (v_MWidthC_1 * v_l_id_64555))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64557 = 0; \n          v__64582[v_wg_id_64551] = doubleMultiplyAdd(v__57071, v__64562, v__64561[v_wg_id_64551], v__64563); \n        }\n        /* end map_seq */\n        v_l_id_64555 = atomic_inc(&(v_work_idx_5187)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__64558",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64559",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64560",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64561",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64562",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64563",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__64582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64577",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}