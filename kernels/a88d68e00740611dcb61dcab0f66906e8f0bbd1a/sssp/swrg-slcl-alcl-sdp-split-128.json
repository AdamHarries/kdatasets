{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71018, const global float* restrict v__71019, const global float* restrict v__71020, const global float* restrict v__71021, float v__71022, float v__71023, global float* v__71040, global float* v__71030, local float* v__71035, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71026; \n  float v__71031; \n  float v__57071; \n  /* Private Memory */\n  float v__71028_0;\n  \n  for (int v_wg_id_71010 = get_group_id(0); v_wg_id_71010 < v_MHeight_2; v_wg_id_71010 = (v_wg_id_71010 + get_num_groups(0))) {\n    for (int v_l_id_71011 = get_local_id(0); v_l_id_71011 < v_MWidthC_1; v_l_id_71011 = (v_l_id_71011 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_71012 = 0; v_i_71012 < 128; v_i_71012 = (1 + v_i_71012)) {\n        float v_tmp_71101 = 3.4028235E38f; \n        v__71026 = v_tmp_71101; \n        int v_index_71102 = v__71018[(v_l_id_71011 + (128 * v_MWidthC_1 * v_wg_id_71010) + (v_MWidthC_1 * v_i_71012))]; \n        if (v_index_71102 < 0) {\n          v__71028_0 = v__71026; \n        } else {\n          if (v_index_71102 >= v_VLength_3) {\n            v__71028_0 = v__71026; \n          } else {\n            v__71028_0 = v__71020[v_index_71102]; \n          }\n        }\n        v__71030[(127 + (128 * v_MWidthC_1 * v_wg_id_71010) + (-1 * v_i_71012) + (128 * v_l_id_71011))] = absadd(v__71028_0, v__71019[(v_l_id_71011 + (128 * v_MWidthC_1 * v_wg_id_71010) + (v_MWidthC_1 * v_i_71012))]); \n      }\n      /* end map_seq */\n      float v_tmp_71103 = 3.4028235E38f; \n      v__71031 = v_tmp_71103; \n      /* reduce_seq */\n      for (int v_i_71013 = 0; v_i_71013 < 128; v_i_71013 = (1 + v_i_71013)) {\n        v__71031 = clmin(v__71031, v__71030[(v_i_71013 + (128 * v_MWidthC_1 * v_wg_id_71010) + (128 * v_l_id_71011))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71014 = 0; \n        v__71035[v_l_id_71011] = id(v__71031); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5792; \n      v_work_idx_5792 = 0; \n      int v_l_id_71015 = atomic_inc(&(v_work_idx_5792)); \n      while((v_l_id_71015 < 1)){\n        float v_tmp_71106 = 3.4028235E38f; \n        v__57071 = v_tmp_71106; \n        /* reduce_seq */\n        for (int v_i_71016 = 0; v_i_71016 < v_MWidthC_1; v_i_71016 = (1 + v_i_71016)) {\n          v__57071 = clmin(v__57071, v__71035[(v_i_71016 + (v_MWidthC_1 * v_l_id_71015))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71017 = 0; \n          v__71040[v_wg_id_71010] = doubleMultiplyAdd(v__57071, v__71022, v__71021[v_wg_id_71010], v__71023); \n        }\n        /* end map_seq */\n        v_l_id_71015 = atomic_inc(&(v_work_idx_5792)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71018",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71019",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71020",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71021",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71022",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71023",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71030",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71040",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71035",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}