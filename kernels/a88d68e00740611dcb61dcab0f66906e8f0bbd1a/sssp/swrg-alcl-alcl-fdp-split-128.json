{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71942, const global float* restrict v__71943, const global float* restrict v__71944, const global float* restrict v__71945, float v__71946, float v__71947, global float* v__71964, local float* v__71959, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71950; \n  float v__71952; \n  float v__57071; \n  /* Private Memory */\n  float v__71954_0;\n  \n  float v__71956_0;\n  \n  for (int v_wg_id_71935 = get_group_id(0); v_wg_id_71935 < v_MHeight_2; v_wg_id_71935 = (v_wg_id_71935 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5883; \n      v_work_idx_5883 = 0; \n      int v_l_id_71936 = atomic_inc(&(v_work_idx_5883)); \n      while((v_l_id_71936 < v_MWidthC_1)){\n        float v_tmp_72017 = 3.4028235E38f; \n        v__71950 = v_tmp_72017; \n        /* reduce_seq */\n        for (int v_i_71937 = 0; v_i_71937 < 128; v_i_71937 = (1 + v_i_71937)) {\n          float v_tmp_72018 = 3.4028235E38f; \n          v__71952 = v_tmp_72018; \n          int v_index_72019 = v__71942[(v_l_id_71936 + (128 * v_MWidthC_1 * v_wg_id_71935) + (v_MWidthC_1 * v_i_71937))]; \n          if (v_index_72019 < 0) {\n            v__71954_0 = v__71952; \n          } else {\n            if (v_index_72019 >= v_VLength_3) {\n              v__71954_0 = v__71952; \n            } else {\n              v__71954_0 = v__71944[v_index_72019]; \n            }\n          }\n          v__71956_0 = absadd(v__71954_0, v__71943[(v_l_id_71936 + (128 * v_MWidthC_1 * v_wg_id_71935) + (v_MWidthC_1 * v_i_71937))]); \n          v__71950 = clmin(v__71956_0, v__71950); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71938 = 0; \n          v__71959[v_l_id_71936] = id(v__71950); \n        }\n        /* end map_seq */\n        v_l_id_71936 = atomic_inc(&(v_work_idx_5883)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5878; \n      v_work_idx_5878 = 0; \n      int v_l_id_71939 = atomic_inc(&(v_work_idx_5878)); \n      while((v_l_id_71939 < 1)){\n        float v_tmp_72022 = 3.4028235E38f; \n        v__57071 = v_tmp_72022; \n        /* reduce_seq */\n        for (int v_i_71940 = 0; v_i_71940 < v_MWidthC_1; v_i_71940 = (1 + v_i_71940)) {\n          v__57071 = clmin(v__57071, v__71959[(v_i_71940 + (v_MWidthC_1 * v_l_id_71939))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71941 = 0; \n          v__71964[v_wg_id_71935] = doubleMultiplyAdd(v__57071, v__71946, v__71945[v_wg_id_71935], v__71947); \n        }\n        /* end map_seq */\n        v_l_id_71939 = atomic_inc(&(v_work_idx_5878)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__71942",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71943",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71944",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71945",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71946",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71947",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71964",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71959",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}