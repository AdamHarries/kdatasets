{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74350, const global float* restrict v__74351, const global float* restrict v__74352, const global float* restrict v__74353, float v__74354, float v__74355, global float* v__74372, global float* v__74362, local float* v__74367, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74358; \n  float v__74363; \n  float v__57071; \n  /* Private Memory */\n  float v__74360_0;\n  \n  for (int v_wg_id_74342 = get_group_id(0); v_wg_id_74342 < v_MHeight_2; v_wg_id_74342 = (v_wg_id_74342 + get_num_groups(0))) {\n    for (int v_l_id_74343 = get_local_id(0); v_l_id_74343 < v_MWidthC_1; v_l_id_74343 = (v_l_id_74343 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_74344 = 0; v_i_74344 < 256; v_i_74344 = (1 + v_i_74344)) {\n        float v_tmp_74433 = 3.4028235E38f; \n        v__74358 = v_tmp_74433; \n        int v_index_74434 = v__74350[(v_l_id_74343 + (256 * v_MWidthC_1 * v_wg_id_74342) + (v_MWidthC_1 * v_i_74344))]; \n        if (v_index_74434 < 0) {\n          v__74360_0 = v__74358; \n        } else {\n          if (v_index_74434 >= v_VLength_3) {\n            v__74360_0 = v__74358; \n          } else {\n            v__74360_0 = v__74352[v_index_74434]; \n          }\n        }\n        v__74362[(255 + (256 * v_MWidthC_1 * v_wg_id_74342) + (-1 * v_i_74344) + (256 * v_l_id_74343))] = absadd(v__74360_0, v__74351[(v_l_id_74343 + (256 * v_MWidthC_1 * v_wg_id_74342) + (v_MWidthC_1 * v_i_74344))]); \n      }\n      /* end map_seq */\n      float v_tmp_74435 = 3.4028235E38f; \n      v__74363 = v_tmp_74435; \n      /* reduce_seq */\n      for (int v_i_74345 = 0; v_i_74345 < 256; v_i_74345 = (1 + v_i_74345)) {\n        v__74363 = clmin(v__74363, v__74362[(v_i_74345 + (256 * v_MWidthC_1 * v_wg_id_74342) + (256 * v_l_id_74343))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74346 = 0; \n        v__74367[v_l_id_74343] = id(v__74363); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6104; \n      v_work_idx_6104 = 0; \n      int v_l_id_74347 = atomic_inc(&(v_work_idx_6104)); \n      while((v_l_id_74347 < 1)){\n        float v_tmp_74438 = 3.4028235E38f; \n        v__57071 = v_tmp_74438; \n        /* reduce_seq */\n        for (int v_i_74348 = 0; v_i_74348 < v_MWidthC_1; v_i_74348 = (1 + v_i_74348)) {\n          v__57071 = clmin(v__57071, v__74367[(v_i_74348 + (v_MWidthC_1 * v_l_id_74347))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74349 = 0; \n          v__74372[v_wg_id_74342] = doubleMultiplyAdd(v__57071, v__74354, v__74353[v_wg_id_74342], v__74355); \n        }\n        /* end map_seq */\n        v_l_id_74347 = atomic_inc(&(v_work_idx_6104)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74350",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74351",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74352",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74353",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74354",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74355",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74362",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74372",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74367",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}