{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75540, const global float* restrict v__75541, const global float* restrict v__75542, const global float* restrict v__75543, float v__75544, float v__75545, global float* v__75559, global int* v__75547, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75549; \n  float v__75551; \n  /* Private Memory */\n  float v__75553_0;\n  \n  float v__75555_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6219 = v__75547; \n    local int v_w_id_75536; \n    if (get_local_id(0) == 0) {\n      v_w_id_75536 = atomic_inc(v_work_idx_6219); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75536 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_75537 = get_local_id(0); v_l_id_75537 < 256; v_l_id_75537 = (v_l_id_75537 + get_local_size(0))) {\n        float v_tmp_75600 = 3.4028235E38f; \n        v__75549 = v_tmp_75600; \n        /* reduce_seq */\n        for (int v_i_75538 = 0; v_i_75538 < v_MWidthC_1; v_i_75538 = (1 + v_i_75538)) {\n          float v_tmp_75601 = 3.4028235E38f; \n          v__75551 = v_tmp_75601; \n          int v_index_75602 = v__75540[(v_i_75538 + (256 * v_MWidthC_1 * v_w_id_75536) + (v_MWidthC_1 * v_l_id_75537))]; \n          if (v_index_75602 < 0) {\n            v__75553_0 = v__75551; \n          } else {\n            if (v_index_75602 >= v_VLength_3) {\n              v__75553_0 = v__75551; \n            } else {\n              v__75553_0 = v__75542[v_index_75602]; \n            }\n          }\n          v__75555_0 = absadd(v__75553_0, v__75541[(v_i_75538 + (256 * v_MWidthC_1 * v_w_id_75536) + (v_MWidthC_1 * v_l_id_75537))]); \n          v__75549 = clmin(v__75555_0, v__75549); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75539 = 0; \n          v__75559[(v_l_id_75537 + (256 * v_w_id_75536))] = doubleMultiplyAdd(v__75549, v__75544, v__75543[(v_l_id_75537 + (256 * v_w_id_75536))], v__75545); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_75536 = atomic_inc(v_work_idx_6219); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75542",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75543",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75544",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75545",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75547",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__75559",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}