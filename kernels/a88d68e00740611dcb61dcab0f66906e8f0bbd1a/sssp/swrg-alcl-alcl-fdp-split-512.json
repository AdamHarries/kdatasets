{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78606, const global float* restrict v__78607, const global float* restrict v__78608, const global float* restrict v__78609, float v__78610, float v__78611, global float* v__78628, local float* v__78623, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78614; \n  float v__78616; \n  float v__57071; \n  /* Private Memory */\n  float v__78618_0;\n  \n  float v__78620_0;\n  \n  for (int v_wg_id_78599 = get_group_id(0); v_wg_id_78599 < v_MHeight_2; v_wg_id_78599 = (v_wg_id_78599 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6507; \n      v_work_idx_6507 = 0; \n      int v_l_id_78600 = atomic_inc(&(v_work_idx_6507)); \n      while((v_l_id_78600 < v_MWidthC_1)){\n        float v_tmp_78681 = 3.4028235E38f; \n        v__78614 = v_tmp_78681; \n        /* reduce_seq */\n        for (int v_i_78601 = 0; v_i_78601 < 512; v_i_78601 = (1 + v_i_78601)) {\n          float v_tmp_78682 = 3.4028235E38f; \n          v__78616 = v_tmp_78682; \n          int v_index_78683 = v__78606[(v_l_id_78600 + (512 * v_MWidthC_1 * v_wg_id_78599) + (v_MWidthC_1 * v_i_78601))]; \n          if (v_index_78683 < 0) {\n            v__78618_0 = v__78616; \n          } else {\n            if (v_index_78683 >= v_VLength_3) {\n              v__78618_0 = v__78616; \n            } else {\n              v__78618_0 = v__78608[v_index_78683]; \n            }\n          }\n          v__78620_0 = absadd(v__78618_0, v__78607[(v_l_id_78600 + (512 * v_MWidthC_1 * v_wg_id_78599) + (v_MWidthC_1 * v_i_78601))]); \n          v__78614 = clmin(v__78620_0, v__78614); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78602 = 0; \n          v__78623[v_l_id_78600] = id(v__78614); \n        }\n        /* end map_seq */\n        v_l_id_78600 = atomic_inc(&(v_work_idx_6507)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6502; \n      v_work_idx_6502 = 0; \n      int v_l_id_78603 = atomic_inc(&(v_work_idx_6502)); \n      while((v_l_id_78603 < 1)){\n        float v_tmp_78686 = 3.4028235E38f; \n        v__57071 = v_tmp_78686; \n        /* reduce_seq */\n        for (int v_i_78604 = 0; v_i_78604 < v_MWidthC_1; v_i_78604 = (1 + v_i_78604)) {\n          v__57071 = clmin(v__57071, v__78623[(v_i_78604 + (v_MWidthC_1 * v_l_id_78603))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78605 = 0; \n          v__78628[v_wg_id_78599] = doubleMultiplyAdd(v__57071, v__78610, v__78609[v_wg_id_78599], v__78611); \n        }\n        /* end map_seq */\n        v_l_id_78603 = atomic_inc(&(v_work_idx_6502)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78606",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78607",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78608",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78609",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78610",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78611",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78623",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}