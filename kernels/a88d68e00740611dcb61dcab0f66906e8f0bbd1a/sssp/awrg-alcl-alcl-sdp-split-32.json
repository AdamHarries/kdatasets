{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66847, const global float* restrict v__66848, const global float* restrict v__66849, const global float* restrict v__66850, float v__66851, float v__66852, global float* v__66870, global float* v__66860, global int* v__66854, local float* v__66865, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66856; \n  float v__66861; \n  float v__57071; \n  /* Private Memory */\n  float v__66858_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5413 = v__66854; \n    local int v_w_id_66839; \n    if (get_local_id(0) == 0) {\n      v_w_id_66839 = atomic_inc(v_work_idx_5413); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66839 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5411; \n        v_work_idx_5411 = 0; \n        int v_l_id_66840 = atomic_inc(&(v_work_idx_5411)); \n        while((v_l_id_66840 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66841 = 0; v_i_66841 < 32; v_i_66841 = (1 + v_i_66841)) {\n            float v_tmp_66921 = 3.4028235E38f; \n            v__66856 = v_tmp_66921; \n            int v_index_66922 = v__66847[(v_l_id_66840 + (32 * v_MWidthC_1 * v_w_id_66839) + (v_MWidthC_1 * v_i_66841))]; \n            if (v_index_66922 < 0) {\n              v__66858_0 = v__66856; \n            } else {\n              if (v_index_66922 >= v_VLength_3) {\n                v__66858_0 = v__66856; \n              } else {\n                v__66858_0 = v__66849[v_index_66922]; \n              }\n            }\n            v__66860[(31 + (32 * v_MWidthC_1 * v_w_id_66839) + (-1 * v_i_66841) + (32 * v_l_id_66840))] = absadd(v__66858_0, v__66848[(v_l_id_66840 + (32 * v_MWidthC_1 * v_w_id_66839) + (v_MWidthC_1 * v_i_66841))]); \n          }\n          /* end map_seq */\n          float v_tmp_66923 = 3.4028235E38f; \n          v__66861 = v_tmp_66923; \n          /* reduce_seq */\n          for (int v_i_66842 = 0; v_i_66842 < 32; v_i_66842 = (1 + v_i_66842)) {\n            v__66861 = clmin(v__66861, v__66860[(v_i_66842 + (32 * v_MWidthC_1 * v_w_id_66839) + (32 * v_l_id_66840))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66843 = 0; \n            v__66865[v_l_id_66840] = id(v__66861); \n          }\n          /* end map_seq */\n          v_l_id_66840 = atomic_inc(&(v_work_idx_5411)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5405; \n        v_work_idx_5405 = 0; \n        int v_l_id_66844 = atomic_inc(&(v_work_idx_5405)); \n        while((v_l_id_66844 < 1)){\n          float v_tmp_66926 = 3.4028235E38f; \n          v__57071 = v_tmp_66926; \n          /* reduce_seq */\n          for (int v_i_66845 = 0; v_i_66845 < v_MWidthC_1; v_i_66845 = (1 + v_i_66845)) {\n            v__57071 = clmin(v__57071, v__66865[(v_i_66845 + (v_MWidthC_1 * v_l_id_66844))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66846 = 0; \n            v__66870[v_w_id_66839] = doubleMultiplyAdd(v__57071, v__66851, v__66850[v_w_id_66839], v__66852); \n          }\n          /* end map_seq */\n          v_l_id_66844 = atomic_inc(&(v_work_idx_5405)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66839 = atomic_inc(v_work_idx_5413); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66847",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66848",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66849",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66850",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66851",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66852",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66860",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66854",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66865",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}