{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79030, const global float* restrict v__79031, const global float* restrict v__79032, const global float* restrict v__79033, float v__79034, float v__79035, global float* v__79053, global float* v__79043, global int* v__79037, local float* v__79048, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79039; \n  float v__79044; \n  float v__57071; \n  /* Private Memory */\n  float v__79041_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6547 = v__79037; \n    local int v_w_id_79022; \n    if (get_local_id(0) == 0) {\n      v_w_id_79022 = atomic_inc(v_work_idx_6547); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79022 < v_MHeight_2)){\n      for (int v_l_id_79023 = get_local_id(0); v_l_id_79023 < v_MWidthC_1; v_l_id_79023 = (v_l_id_79023 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_79024 = 0; v_i_79024 < 512; v_i_79024 = (1 + v_i_79024)) {\n          float v_tmp_79116 = 3.4028235E38f; \n          v__79039 = v_tmp_79116; \n          int v_index_79117 = v__79030[(v_l_id_79023 + (512 * v_MWidthC_1 * v_w_id_79022) + (v_MWidthC_1 * v_i_79024))]; \n          if (v_index_79117 < 0) {\n            v__79041_0 = v__79039; \n          } else {\n            if (v_index_79117 >= v_VLength_3) {\n              v__79041_0 = v__79039; \n            } else {\n              v__79041_0 = v__79032[v_index_79117]; \n            }\n          }\n          v__79043[(511 + (512 * v_MWidthC_1 * v_w_id_79022) + (-1 * v_i_79024) + (512 * v_l_id_79023))] = absadd(v__79041_0, v__79031[(v_l_id_79023 + (512 * v_MWidthC_1 * v_w_id_79022) + (v_MWidthC_1 * v_i_79024))]); \n        }\n        /* end map_seq */\n        float v_tmp_79118 = 3.4028235E38f; \n        v__79044 = v_tmp_79118; \n        /* reduce_seq */\n        for (int v_i_79025 = 0; v_i_79025 < 512; v_i_79025 = (1 + v_i_79025)) {\n          v__79044 = clmin(v__79044, v__79043[(v_i_79025 + (512 * v_MWidthC_1 * v_w_id_79022) + (512 * v_l_id_79023))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79026 = 0; \n          v__79048[v_l_id_79023] = id(v__79044); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79027 = get_local_id(0); \n        float v_tmp_79121 = 3.4028235E38f; \n        v__57071 = v_tmp_79121; \n        /* reduce_seq */\n        for (int v_i_79028 = 0; v_i_79028 < v_MWidthC_1; v_i_79028 = (1 + v_i_79028)) {\n          v__57071 = clmin(v__57071, v__79048[(v_i_79028 + (v_MWidthC_1 * v_l_id_79027))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79029 = 0; \n          v__79053[v_w_id_79022] = doubleMultiplyAdd(v__57071, v__79034, v__79033[v_w_id_79022], v__79035); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79022 = atomic_inc(v_work_idx_6547); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79030",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79031",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79032",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79033",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79034",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79035",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79043",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79037",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79053",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79048",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}