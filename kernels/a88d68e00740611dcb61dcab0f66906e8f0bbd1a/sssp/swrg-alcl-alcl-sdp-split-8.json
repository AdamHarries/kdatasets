{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58520, const global float* restrict v__58521, const global float* restrict v__58522, const global float* restrict v__58523, float v__58524, float v__58525, global float* v__58542, global float* v__58532, local float* v__58537, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58528; \n  float v__58533; \n  float v__57071; \n  /* Private Memory */\n  float v__58530_0;\n  \n  for (int v_wg_id_58512 = get_group_id(0); v_wg_id_58512 < v_MHeight_2; v_wg_id_58512 = (v_wg_id_58512 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4625; \n      v_work_idx_4625 = 0; \n      int v_l_id_58513 = atomic_inc(&(v_work_idx_4625)); \n      while((v_l_id_58513 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58514 = 0; v_i_58514 < 8; v_i_58514 = (1 + v_i_58514)) {\n          float v_tmp_58595 = 3.4028235E38f; \n          v__58528 = v_tmp_58595; \n          int v_index_58596 = v__58520[(v_l_id_58513 + (8 * v_MWidthC_1 * v_wg_id_58512) + (v_MWidthC_1 * v_i_58514))]; \n          if (v_index_58596 < 0) {\n            v__58530_0 = v__58528; \n          } else {\n            if (v_index_58596 >= v_VLength_3) {\n              v__58530_0 = v__58528; \n            } else {\n              v__58530_0 = v__58522[v_index_58596]; \n            }\n          }\n          v__58532[(7 + (8 * v_MWidthC_1 * v_wg_id_58512) + (-1 * v_i_58514) + (8 * v_l_id_58513))] = absadd(v__58530_0, v__58521[(v_l_id_58513 + (8 * v_MWidthC_1 * v_wg_id_58512) + (v_MWidthC_1 * v_i_58514))]); \n        }\n        /* end map_seq */\n        float v_tmp_58597 = 3.4028235E38f; \n        v__58533 = v_tmp_58597; \n        /* reduce_seq */\n        for (int v_i_58515 = 0; v_i_58515 < 8; v_i_58515 = (1 + v_i_58515)) {\n          v__58533 = clmin(v__58533, v__58532[(v_i_58515 + (8 * v_MWidthC_1 * v_wg_id_58512) + (8 * v_l_id_58513))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58516 = 0; \n          v__58537[v_l_id_58513] = id(v__58533); \n        }\n        /* end map_seq */\n        v_l_id_58513 = atomic_inc(&(v_work_idx_4625)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4619; \n      v_work_idx_4619 = 0; \n      int v_l_id_58517 = atomic_inc(&(v_work_idx_4619)); \n      while((v_l_id_58517 < 1)){\n        float v_tmp_58600 = 3.4028235E38f; \n        v__57071 = v_tmp_58600; \n        /* reduce_seq */\n        for (int v_i_58518 = 0; v_i_58518 < v_MWidthC_1; v_i_58518 = (1 + v_i_58518)) {\n          v__57071 = clmin(v__57071, v__58537[(v_i_58518 + (v_MWidthC_1 * v_l_id_58517))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58519 = 0; \n          v__58542[v_wg_id_58512] = doubleMultiplyAdd(v__57071, v__58524, v__58523[v_wg_id_58512], v__58525); \n        }\n        /* end map_seq */\n        v_l_id_58517 = atomic_inc(&(v_work_idx_4619)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58520",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58521",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58522",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58523",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58524",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58525",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58532",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58542",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58537",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}