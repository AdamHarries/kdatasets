{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57690, const global float* restrict v__57691, const global float* restrict v__57692, const global float* restrict v__57693, float v__57694, float v__57695, global float* v__57712, global float* v__57702, local float* v__57707, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57698; \n  float v__57703; \n  float v__57071; \n  /* Private Memory */\n  float v__57700_0;\n  \n  for (int v_wg_id_57682 = get_group_id(0); v_wg_id_57682 < v_MHeight_2; v_wg_id_57682 = (v_wg_id_57682 + get_num_groups(0))) {\n    for (int v_l_id_57683 = get_local_id(0); v_l_id_57683 < v_MWidthC_1; v_l_id_57683 = (v_l_id_57683 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_57684 = 0; v_i_57684 < 8; v_i_57684 = (1 + v_i_57684)) {\n        float v_tmp_57773 = 3.4028235E38f; \n        v__57698 = v_tmp_57773; \n        int v_index_57774 = v__57690[(v_l_id_57683 + (8 * v_MWidthC_1 * v_wg_id_57682) + (v_MWidthC_1 * v_i_57684))]; \n        if (v_index_57774 < 0) {\n          v__57700_0 = v__57698; \n        } else {\n          if (v_index_57774 >= v_VLength_3) {\n            v__57700_0 = v__57698; \n          } else {\n            v__57700_0 = v__57692[v_index_57774]; \n          }\n        }\n        v__57702[(7 + (8 * v_MWidthC_1 * v_wg_id_57682) + (-1 * v_i_57684) + (8 * v_l_id_57683))] = absadd(v__57700_0, v__57691[(v_l_id_57683 + (8 * v_MWidthC_1 * v_wg_id_57682) + (v_MWidthC_1 * v_i_57684))]); \n      }\n      /* end map_seq */\n      float v_tmp_57775 = 3.4028235E38f; \n      v__57703 = v_tmp_57775; \n      /* reduce_seq */\n      for (int v_i_57685 = 0; v_i_57685 < 8; v_i_57685 = (1 + v_i_57685)) {\n        v__57703 = clmin(v__57703, v__57702[(v_i_57685 + (8 * v_MWidthC_1 * v_wg_id_57682) + (8 * v_l_id_57683))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57686 = 0; \n        v__57707[v_l_id_57683] = id(v__57703); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4544; \n      v_work_idx_4544 = 0; \n      int v_l_id_57687 = atomic_inc(&(v_work_idx_4544)); \n      while((v_l_id_57687 < 1)){\n        float v_tmp_57778 = 3.4028235E38f; \n        v__57071 = v_tmp_57778; \n        /* reduce_seq */\n        for (int v_i_57688 = 0; v_i_57688 < v_MWidthC_1; v_i_57688 = (1 + v_i_57688)) {\n          v__57071 = clmin(v__57071, v__57707[(v_i_57688 + (v_MWidthC_1 * v_l_id_57687))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_57689 = 0; \n          v__57712[v_wg_id_57682] = doubleMultiplyAdd(v__57071, v__57694, v__57693[v_wg_id_57682], v__57695); \n        }\n        /* end map_seq */\n        v_l_id_57687 = atomic_inc(&(v_work_idx_4544)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__57690",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57691",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57692",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57694",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57695",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__57702",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__57712",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__57707",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}