{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76019, const global float* restrict v__76020, const global float* restrict v__76021, const global float* restrict v__76022, float v__76023, float v__76024, global float* v__76042, global float* v__76032, global int* v__76026, local float* v__76037, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76028; \n  float v__76033; \n  float v__57071; \n  /* Private Memory */\n  float v__76030_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6264 = v__76026; \n    local int v_w_id_76011; \n    if (get_local_id(0) == 0) {\n      v_w_id_76011 = atomic_inc(v_work_idx_6264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76011 < v_MHeight_2)){\n      for (int v_l_id_76012 = get_local_id(0); v_l_id_76012 < v_MWidthC_1; v_l_id_76012 = (v_l_id_76012 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_76013 = 0; v_i_76013 < 256; v_i_76013 = (1 + v_i_76013)) {\n          float v_tmp_76101 = 3.4028235E38f; \n          v__76028 = v_tmp_76101; \n          int v_index_76102 = v__76019[(v_l_id_76012 + (256 * v_MWidthC_1 * v_w_id_76011) + (v_MWidthC_1 * v_i_76013))]; \n          if (v_index_76102 < 0) {\n            v__76030_0 = v__76028; \n          } else {\n            if (v_index_76102 >= v_VLength_3) {\n              v__76030_0 = v__76028; \n            } else {\n              v__76030_0 = v__76021[v_index_76102]; \n            }\n          }\n          v__76032[(255 + (256 * v_MWidthC_1 * v_w_id_76011) + (-1 * v_i_76013) + (256 * v_l_id_76012))] = absadd(v__76030_0, v__76020[(v_l_id_76012 + (256 * v_MWidthC_1 * v_w_id_76011) + (v_MWidthC_1 * v_i_76013))]); \n        }\n        /* end map_seq */\n        float v_tmp_76103 = 3.4028235E38f; \n        v__76033 = v_tmp_76103; \n        /* reduce_seq */\n        for (int v_i_76014 = 0; v_i_76014 < 256; v_i_76014 = (1 + v_i_76014)) {\n          v__76033 = clmin(v__76033, v__76032[(v_i_76014 + (256 * v_MWidthC_1 * v_w_id_76011) + (256 * v_l_id_76012))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76015 = 0; \n          v__76037[v_l_id_76012] = id(v__76033); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6257; \n        v_work_idx_6257 = 0; \n        int v_l_id_76016 = atomic_inc(&(v_work_idx_6257)); \n        while((v_l_id_76016 < 1)){\n          float v_tmp_76106 = 3.4028235E38f; \n          v__57071 = v_tmp_76106; \n          /* reduce_seq */\n          for (int v_i_76017 = 0; v_i_76017 < v_MWidthC_1; v_i_76017 = (1 + v_i_76017)) {\n            v__57071 = clmin(v__57071, v__76037[(v_i_76017 + (v_MWidthC_1 * v_l_id_76016))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76018 = 0; \n            v__76042[v_w_id_76011] = doubleMultiplyAdd(v__57071, v__76023, v__76022[v_w_id_76011], v__76024); \n          }\n          /* end map_seq */\n          v_l_id_76016 = atomic_inc(&(v_work_idx_6257)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76011 = atomic_inc(v_work_idx_6264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76019",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76020",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76021",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76023",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76024",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76032",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76026",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76037",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}