{
  "name" : "swrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61650, const global float* restrict v__61651, const global float* restrict v__61652, const global float* restrict v__61653, float v__61654, float v__61655, global float* v__61672, local float* v__61667, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61658; \n  float v__61660; \n  float v__57071; \n  /* Private Memory */\n  float v__61662_0;\n  \n  float v__61664_0;\n  \n  for (int v_wg_id_61643 = get_group_id(0); v_wg_id_61643 < v_MHeight_2; v_wg_id_61643 = (v_wg_id_61643 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4917; \n      v_work_idx_4917 = 0; \n      int v_l_id_61644 = atomic_inc(&(v_work_idx_4917)); \n      while((v_l_id_61644 < v_MWidthC_1)){\n        float v_tmp_61729 = 3.4028235E38f; \n        v__61658 = v_tmp_61729; \n        /* reduce_seq */\n        for (int v_i_61645 = 0; v_i_61645 < 16; v_i_61645 = (1 + v_i_61645)) {\n          float v_tmp_61730 = 3.4028235E38f; \n          v__61660 = v_tmp_61730; \n          int v_index_61731 = v__61650[(v_l_id_61644 + (16 * v_MWidthC_1 * v_wg_id_61643) + (v_MWidthC_1 * v_i_61645))]; \n          if (v_index_61731 < 0) {\n            v__61662_0 = v__61660; \n          } else {\n            if (v_index_61731 >= v_VLength_3) {\n              v__61662_0 = v__61660; \n            } else {\n              v__61662_0 = v__61652[v_index_61731]; \n            }\n          }\n          v__61664_0 = absadd(v__61662_0, v__61651[(v_l_id_61644 + (16 * v_MWidthC_1 * v_wg_id_61643) + (v_MWidthC_1 * v_i_61645))]); \n          v__61658 = clmin(v__61664_0, v__61658); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61646 = 0; \n          v__61667[v_l_id_61644] = id(v__61658); \n        }\n        /* end map_seq */\n        v_l_id_61644 = atomic_inc(&(v_work_idx_4917)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_61647 = get_local_id(0); \n      float v_tmp_61734 = 3.4028235E38f; \n      v__57071 = v_tmp_61734; \n      /* reduce_seq */\n      for (int v_i_61648 = 0; v_i_61648 < v_MWidthC_1; v_i_61648 = (1 + v_i_61648)) {\n        v__57071 = clmin(v__57071, v__61667[(v_i_61648 + (v_MWidthC_1 * v_l_id_61647))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_61649 = 0; \n        v__61672[v_wg_id_61643] = doubleMultiplyAdd(v__57071, v__61654, v__61653[v_wg_id_61643], v__61655); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__61650",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61651",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61652",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61654",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61655",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61667",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}