{
  "name" : "swrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60804, const global float* restrict v__60805, const global float* restrict v__60806, const global float* restrict v__60807, float v__60808, float v__60809, global float* v__60826, local float* v__60821, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60812; \n  float v__60814; \n  float v__57071; \n  /* Private Memory */\n  float v__60816_0;\n  \n  float v__60818_0;\n  \n  for (int v_wg_id_60797 = get_group_id(0); v_wg_id_60797 < v_MHeight_2; v_wg_id_60797 = (v_wg_id_60797 + get_num_groups(0))) {\n    for (int v_l_id_60798 = get_local_id(0); v_l_id_60798 < v_MWidthC_1; v_l_id_60798 = (v_l_id_60798 + get_local_size(0))) {\n      float v_tmp_60891 = 3.4028235E38f; \n      v__60812 = v_tmp_60891; \n      /* reduce_seq */\n      for (int v_i_60799 = 0; v_i_60799 < 16; v_i_60799 = (1 + v_i_60799)) {\n        float v_tmp_60892 = 3.4028235E38f; \n        v__60814 = v_tmp_60892; \n        int v_index_60893 = v__60804[(v_l_id_60798 + (16 * v_MWidthC_1 * v_wg_id_60797) + (v_MWidthC_1 * v_i_60799))]; \n        if (v_index_60893 < 0) {\n          v__60816_0 = v__60814; \n        } else {\n          if (v_index_60893 >= v_VLength_3) {\n            v__60816_0 = v__60814; \n          } else {\n            v__60816_0 = v__60806[v_index_60893]; \n          }\n        }\n        v__60818_0 = absadd(v__60816_0, v__60805[(v_l_id_60798 + (16 * v_MWidthC_1 * v_wg_id_60797) + (v_MWidthC_1 * v_i_60799))]); \n        v__60812 = clmin(v__60818_0, v__60812); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60800 = 0; \n        v__60821[v_l_id_60798] = id(v__60812); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_60801 = get_local_id(0); \n      float v_tmp_60896 = 3.4028235E38f; \n      v__57071 = v_tmp_60896; \n      /* reduce_seq */\n      for (int v_i_60802 = 0; v_i_60802 < v_MWidthC_1; v_i_60802 = (1 + v_i_60802)) {\n        v__57071 = clmin(v__57071, v__60821[(v_i_60802 + (v_MWidthC_1 * v_l_id_60801))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60803 = 0; \n        v__60826[v_wg_id_60797] = doubleMultiplyAdd(v__57071, v__60808, v__60807[v_wg_id_60797], v__60809); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60804",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60805",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60806",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60808",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60809",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__60826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60821",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}