{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62997, const global float* restrict v__62998, const global float* restrict v__62999, const global float* restrict v__63000, float v__63001, float v__63002, global float* v__63016, global float* v__63010, global int* v__63004, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63006; \n  float v__63011; \n  /* Private Memory */\n  float v__63008_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5044 = v__63004; \n    local int v_w_id_62992; \n    if (get_local_id(0) == 0) {\n      v_w_id_62992 = atomic_inc(v_work_idx_5044); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62992 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5042; \n        v_work_idx_5042 = 0; \n        int v_l_id_62993 = atomic_inc(&(v_work_idx_5042)); \n        while((v_l_id_62993 < 16)){\n          /* map_seq */\n          for (int v_i_62994 = 0; v_i_62994 < v_MWidthC_1; v_i_62994 = (1 + v_i_62994)) {\n            float v_tmp_63055 = 3.4028235E38f; \n            v__63006 = v_tmp_63055; \n            int v_index_63056 = v__62997[(v_i_62994 + (16 * v_MWidthC_1 * v_w_id_62992) + (v_MWidthC_1 * v_l_id_62993))]; \n            if (v_index_63056 < 0) {\n              v__63008_0 = v__63006; \n            } else {\n              if (v_index_63056 >= v_VLength_3) {\n                v__63008_0 = v__63006; \n              } else {\n                v__63008_0 = v__62999[v_index_63056]; \n              }\n            }\n            v__63010[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_62992) + (-1 * v_i_62994) + (v_MWidthC_1 * v_l_id_62993))] = absadd(v__63008_0, v__62998[(v_i_62994 + (16 * v_MWidthC_1 * v_w_id_62992) + (v_MWidthC_1 * v_l_id_62993))]); \n          }\n          /* end map_seq */\n          float v_tmp_63057 = 3.4028235E38f; \n          v__63011 = v_tmp_63057; \n          /* reduce_seq */\n          for (int v_i_62995 = 0; v_i_62995 < v_MWidthC_1; v_i_62995 = (1 + v_i_62995)) {\n            v__63011 = clmin(v__63011, v__63010[(v_i_62995 + (16 * v_MWidthC_1 * v_w_id_62992) + (v_MWidthC_1 * v_l_id_62993))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62996 = 0; \n            v__63016[(v_l_id_62993 + (16 * v_w_id_62992))] = doubleMultiplyAdd(v__63011, v__63001, v__63000[(v_l_id_62993 + (16 * v_w_id_62992))], v__63002); \n          }\n          /* end map_seq */\n          v_l_id_62993 = atomic_inc(&(v_work_idx_5042)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62992 = atomic_inc(v_work_idx_5044); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62997",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62999",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63001",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63002",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63004",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}