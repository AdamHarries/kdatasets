{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73511, const global float* restrict v__73512, const global float* restrict v__73513, const global float* restrict v__73514, float v__73515, float v__73516, global float* v__73534, global float* v__73524, global int* v__73518, local float* v__73529, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73520; \n  float v__73525; \n  float v__57071; \n  /* Private Memory */\n  float v__73522_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6037 = v__73518; \n    local int v_w_id_73503; \n    if (get_local_id(0) == 0) {\n      v_w_id_73503 = atomic_inc(v_work_idx_6037); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73503 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6035; \n        v_work_idx_6035 = 0; \n        int v_l_id_73504 = atomic_inc(&(v_work_idx_6035)); \n        while((v_l_id_73504 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_73505 = 0; v_i_73505 < 128; v_i_73505 = (1 + v_i_73505)) {\n            float v_tmp_73585 = 3.4028235E38f; \n            v__73520 = v_tmp_73585; \n            int v_index_73586 = v__73511[(v_l_id_73504 + (128 * v_MWidthC_1 * v_w_id_73503) + (v_MWidthC_1 * v_i_73505))]; \n            if (v_index_73586 < 0) {\n              v__73522_0 = v__73520; \n            } else {\n              if (v_index_73586 >= v_VLength_3) {\n                v__73522_0 = v__73520; \n              } else {\n                v__73522_0 = v__73513[v_index_73586]; \n              }\n            }\n            v__73524[(127 + (128 * v_MWidthC_1 * v_w_id_73503) + (-1 * v_i_73505) + (128 * v_l_id_73504))] = absadd(v__73522_0, v__73512[(v_l_id_73504 + (128 * v_MWidthC_1 * v_w_id_73503) + (v_MWidthC_1 * v_i_73505))]); \n          }\n          /* end map_seq */\n          float v_tmp_73587 = 3.4028235E38f; \n          v__73525 = v_tmp_73587; \n          /* reduce_seq */\n          for (int v_i_73506 = 0; v_i_73506 < 128; v_i_73506 = (1 + v_i_73506)) {\n            v__73525 = clmin(v__73525, v__73524[(v_i_73506 + (128 * v_MWidthC_1 * v_w_id_73503) + (128 * v_l_id_73504))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73507 = 0; \n            v__73529[v_l_id_73504] = id(v__73525); \n          }\n          /* end map_seq */\n          v_l_id_73504 = atomic_inc(&(v_work_idx_6035)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6029; \n        v_work_idx_6029 = 0; \n        int v_l_id_73508 = atomic_inc(&(v_work_idx_6029)); \n        while((v_l_id_73508 < 1)){\n          float v_tmp_73590 = 3.4028235E38f; \n          v__57071 = v_tmp_73590; \n          /* reduce_seq */\n          for (int v_i_73509 = 0; v_i_73509 < v_MWidthC_1; v_i_73509 = (1 + v_i_73509)) {\n            v__57071 = clmin(v__57071, v__73529[(v_i_73509 + (v_MWidthC_1 * v_l_id_73508))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73510 = 0; \n            v__73534[v_w_id_73503] = doubleMultiplyAdd(v__57071, v__73515, v__73514[v_w_id_73503], v__73516); \n          }\n          /* end map_seq */\n          v_l_id_73508 = atomic_inc(&(v_work_idx_6029)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73503 = atomic_inc(v_work_idx_6037); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73511",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73512",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73513",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73514",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73515",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73516",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73524",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73518",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73534",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73529",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}