{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39566, const global int* restrict v__39567, const global int* restrict v__39568, const global int* restrict v__39569, int v__39570, int v__39571, global int* v__39591, global int* v__39573, local int* v__39586, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39575; \n  int v__39577; \n  int v__33230; \n  /* Private Memory */\n  int v__39579_0;\n  \n  int v__39581_0;\n  \n  int v__39585_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2862 = v__39573; \n    local int v_w_id_39559; \n    if (get_local_id(0) == 0) {\n      v_w_id_39559 = atomic_inc(v_work_idx_2862); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39559 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2860; \n        v_work_idx_2860 = 0; \n        int v_l_id_39560 = atomic_inc(&(v_work_idx_2860)); \n        while((v_l_id_39560 < v_MWidthC_1)){\n          int v_tmp_39649 = 0; \n          v__39575 = v_tmp_39649; \n          /* reduce_while_seq */\n          for (int v_i_39561 = 0; v_i_39561 < 16; v_i_39561 = (1 + v_i_39561)) {\n            v__39585_0 = check(v__39575, v__39566[(v_l_id_39560 + (16 * v_MWidthC_1 * v_w_id_39559) + (v_MWidthC_1 * v_i_39561))]); \n            if (v__39585_0) {\n            } else {\n              break;\n            }\n            int v_tmp_39650 = 0; \n            v__39577 = v_tmp_39650; \n            int v_index_39651 = v__39566[(v_l_id_39560 + (16 * v_MWidthC_1 * v_w_id_39559) + (v_MWidthC_1 * v_i_39561))]; \n            if (v_index_39651 < 0) {\n              v__39579_0 = v__39577; \n            } else {\n              if (v_index_39651 >= v_VLength_3) {\n                v__39579_0 = v__39577; \n              } else {\n                v__39579_0 = v__39568[v_index_39651]; \n              }\n            }\n            v__39581_0 = bool_and(v__39579_0, v__39567[(v_l_id_39560 + (16 * v_MWidthC_1 * v_w_id_39559) + (v_MWidthC_1 * v_i_39561))]); \n            v__39575 = bool_or(v__39581_0, v__39575); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39562 = 0; \n            v__39586[v_l_id_39560] = id(v__39575); \n          }\n          /* end map_seq */\n          v_l_id_39560 = atomic_inc(&(v_work_idx_2860)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_39563 = get_local_id(0); \n        int v_tmp_39654 = 0; \n        v__33230 = v_tmp_39654; \n        /* reduce_seq */\n        for (int v_i_39564 = 0; v_i_39564 < v_MWidthC_1; v_i_39564 = (1 + v_i_39564)) {\n          v__33230 = bool_or(v__33230, v__39586[(v_i_39564 + (v_MWidthC_1 * v_l_id_39563))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_39565 = 0; \n          v__39591[v_w_id_39559] = doubleAndOr(v__33230, v__39570, v__39569[v_w_id_39559], v__39571); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39559 = atomic_inc(v_work_idx_2862); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__39566",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39567",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39568",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39570",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39571",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39573",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39591",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39586",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}