{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33098, const global int* restrict v__33099, const global int* restrict v__33100, const global int* restrict v__33101, int v__33102, int v__33103, global int* v__33116, global int* v__33110, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33106; \n  int v__33111; \n  /* Private Memory */\n  int v__33108_0;\n  \n  for (int v_wg_id_33094 = get_group_id(0); v_wg_id_33094 < v_MHeight_2; v_wg_id_33094 = (v_wg_id_33094 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_2259; \n      v_l_id_2259 = 0; \n      int v_l_id_33095 = atomic_inc(&(v_l_id_2259)); \n      while((v_l_id_33095 < v_MWidthC_1)){\n        int v_tmp_33148 = 0; \n        v__33106 = v_tmp_33148; \n        int v_index_33149 = v__33098[(v_l_id_33095 + (v_MWidthC_1 * v_wg_id_33094))]; \n        if (v_index_33149 < 0) {\n          v__33108_0 = v__33106; \n        } else {\n          if (v_index_33149 >= v_VLength_3) {\n            v__33108_0 = v__33106; \n          } else {\n            v__33108_0 = v__33100[v_index_33149]; \n          }\n        }\n        v__33110[(-1 + v_MWidthC_1 + (-1 * v_l_id_33095) + (v_MWidthC_1 * v_wg_id_33094))] = bool_and(v__33108_0, v__33099[(v_l_id_33095 + (v_MWidthC_1 * v_wg_id_33094))]); \n        v_l_id_33095 = atomic_inc(&(v_l_id_2259)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    int v_tmp_33150 = 0; \n    v__33111 = v_tmp_33150; \n    /* reduce_seq */\n    for (int v_i_33096 = 0; v_i_33096 < v_MWidthC_1; v_i_33096 = (1 + v_i_33096)) {\n      v__33111 = bool_or(v__33111, v__33110[(v_i_33096 + (v_MWidthC_1 * v_wg_id_33094))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_33097 = 0; \n      v__33116[v_wg_id_33094] = doubleAndOr(v__33111, v__33102, v__33101[v_wg_id_33094], v__33103); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__33098",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33100",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33101",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33102",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33103",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}