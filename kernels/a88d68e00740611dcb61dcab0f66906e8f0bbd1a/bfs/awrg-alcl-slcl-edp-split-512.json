{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56226, const global int* restrict v__56227, const global int* restrict v__56228, const global int* restrict v__56229, int v__56230, int v__56231, global int* v__56251, global int* v__56233, local int* v__56246, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56235; \n  int v__56237; \n  int v__33230; \n  /* Private Memory */\n  int v__56239_0;\n  \n  int v__56241_0;\n  \n  int v__56245_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4422 = v__56233; \n    local int v_w_id_56219; \n    if (get_local_id(0) == 0) {\n      v_w_id_56219 = atomic_inc(v_work_idx_4422); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56219 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4420; \n        v_work_idx_4420 = 0; \n        int v_l_id_56220 = atomic_inc(&(v_work_idx_4420)); \n        while((v_l_id_56220 < v_MWidthC_1)){\n          int v_tmp_56309 = 0; \n          v__56235 = v_tmp_56309; \n          /* reduce_while_seq */\n          for (int v_i_56221 = 0; v_i_56221 < 512; v_i_56221 = (1 + v_i_56221)) {\n            v__56245_0 = check(v__56235, v__56226[(v_l_id_56220 + (512 * v_MWidthC_1 * v_w_id_56219) + (v_MWidthC_1 * v_i_56221))]); \n            if (v__56245_0) {\n            } else {\n              break;\n            }\n            int v_tmp_56310 = 0; \n            v__56237 = v_tmp_56310; \n            int v_index_56311 = v__56226[(v_l_id_56220 + (512 * v_MWidthC_1 * v_w_id_56219) + (v_MWidthC_1 * v_i_56221))]; \n            if (v_index_56311 < 0) {\n              v__56239_0 = v__56237; \n            } else {\n              if (v_index_56311 >= v_VLength_3) {\n                v__56239_0 = v__56237; \n              } else {\n                v__56239_0 = v__56228[v_index_56311]; \n              }\n            }\n            v__56241_0 = bool_and(v__56239_0, v__56227[(v_l_id_56220 + (512 * v_MWidthC_1 * v_w_id_56219) + (v_MWidthC_1 * v_i_56221))]); \n            v__56235 = bool_or(v__56241_0, v__56235); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56222 = 0; \n            v__56246[v_l_id_56220] = id(v__56235); \n          }\n          /* end map_seq */\n          v_l_id_56220 = atomic_inc(&(v_work_idx_4420)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_56223 = get_local_id(0); \n        int v_tmp_56314 = 0; \n        v__33230 = v_tmp_56314; \n        /* reduce_seq */\n        for (int v_i_56224 = 0; v_i_56224 < v_MWidthC_1; v_i_56224 = (1 + v_i_56224)) {\n          v__33230 = bool_or(v__33230, v__56246[(v_i_56224 + (v_MWidthC_1 * v_l_id_56223))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_56225 = 0; \n          v__56251[v_w_id_56219] = doubleAndOr(v__33230, v__56230, v__56229[v_w_id_56219], v__56231); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56219 = atomic_inc(v_work_idx_4422); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__56226",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56227",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56228",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56230",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56231",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56233",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56251",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__56246",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}