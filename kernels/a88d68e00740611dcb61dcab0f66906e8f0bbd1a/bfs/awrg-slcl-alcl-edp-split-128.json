{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49043, const global int* restrict v__49044, const global int* restrict v__49045, const global int* restrict v__49046, int v__49047, int v__49048, global int* v__49068, global int* v__49050, local int* v__49063, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49052; \n  int v__49054; \n  int v__33230; \n  /* Private Memory */\n  int v__49056_0;\n  \n  int v__49058_0;\n  \n  int v__49062_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3745 = v__49050; \n    local int v_w_id_49036; \n    if (get_local_id(0) == 0) {\n      v_w_id_49036 = atomic_inc(v_work_idx_3745); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_49036 < v_MHeight_2)){\n      for (int v_l_id_49037 = get_local_id(0); v_l_id_49037 < v_MWidthC_1; v_l_id_49037 = (v_l_id_49037 + get_local_size(0))) {\n        int v_tmp_49130 = 0; \n        v__49052 = v_tmp_49130; \n        /* reduce_while_seq */\n        for (int v_i_49038 = 0; v_i_49038 < 128; v_i_49038 = (1 + v_i_49038)) {\n          v__49062_0 = check(v__49052, v__49043[(v_l_id_49037 + (128 * v_MWidthC_1 * v_w_id_49036) + (v_MWidthC_1 * v_i_49038))]); \n          if (v__49062_0) {\n          } else {\n            break;\n          }\n          int v_tmp_49131 = 0; \n          v__49054 = v_tmp_49131; \n          int v_index_49132 = v__49043[(v_l_id_49037 + (128 * v_MWidthC_1 * v_w_id_49036) + (v_MWidthC_1 * v_i_49038))]; \n          if (v_index_49132 < 0) {\n            v__49056_0 = v__49054; \n          } else {\n            if (v_index_49132 >= v_VLength_3) {\n              v__49056_0 = v__49054; \n            } else {\n              v__49056_0 = v__49045[v_index_49132]; \n            }\n          }\n          v__49058_0 = bool_and(v__49056_0, v__49044[(v_l_id_49037 + (128 * v_MWidthC_1 * v_w_id_49036) + (v_MWidthC_1 * v_i_49038))]); \n          v__49052 = bool_or(v__49058_0, v__49052); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_49039 = 0; \n          v__49063[v_l_id_49037] = id(v__49052); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3739; \n        v_work_idx_3739 = 0; \n        int v_l_id_49040 = atomic_inc(&(v_work_idx_3739)); \n        while((v_l_id_49040 < 1)){\n          int v_tmp_49135 = 0; \n          v__33230 = v_tmp_49135; \n          /* reduce_seq */\n          for (int v_i_49041 = 0; v_i_49041 < v_MWidthC_1; v_i_49041 = (1 + v_i_49041)) {\n            v__33230 = bool_or(v__33230, v__49063[(v_i_49041 + (v_MWidthC_1 * v_l_id_49040))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_49042 = 0; \n            v__49068[v_w_id_49036] = doubleAndOr(v__33230, v__49047, v__49046[v_w_id_49036], v__49048); \n          }\n          /* end map_seq */\n          v_l_id_49040 = atomic_inc(&(v_work_idx_3739)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_49036 = atomic_inc(v_work_idx_3745); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__49043",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49044",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49045",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49047",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49048",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49050",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__49068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__49063",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}