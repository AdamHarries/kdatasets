{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46036, const global int* restrict v__46037, const global int* restrict v__46038, const global int* restrict v__46039, int v__46040, int v__46041, global int* v__46059, global int* v__46049, global int* v__46043, local int* v__46054, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46045; \n  int v__46050; \n  int v__33230; \n  /* Private Memory */\n  int v__46047_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3466 = v__46043; \n    local int v_w_id_46028; \n    if (get_local_id(0) == 0) {\n      v_w_id_46028 = atomic_inc(v_work_idx_3466); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_46028 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3464; \n        v_work_idx_3464 = 0; \n        int v_l_id_46029 = atomic_inc(&(v_work_idx_3464)); \n        while((v_l_id_46029 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_46030 = 0; v_i_46030 < 64; v_i_46030 = (1 + v_i_46030)) {\n            int v_tmp_46114 = 0; \n            v__46045 = v_tmp_46114; \n            int v_index_46115 = v__46036[(v_l_id_46029 + (64 * v_MWidthC_1 * v_w_id_46028) + (v_MWidthC_1 * v_i_46030))]; \n            if (v_index_46115 < 0) {\n              v__46047_0 = v__46045; \n            } else {\n              if (v_index_46115 >= v_VLength_3) {\n                v__46047_0 = v__46045; \n              } else {\n                v__46047_0 = v__46038[v_index_46115]; \n              }\n            }\n            v__46049[(63 + (64 * v_MWidthC_1 * v_w_id_46028) + (-1 * v_i_46030) + (64 * v_l_id_46029))] = bool_and(v__46047_0, v__46037[(v_l_id_46029 + (64 * v_MWidthC_1 * v_w_id_46028) + (v_MWidthC_1 * v_i_46030))]); \n          }\n          /* end map_seq */\n          int v_tmp_46116 = 0; \n          v__46050 = v_tmp_46116; \n          /* reduce_seq */\n          for (int v_i_46031 = 0; v_i_46031 < 64; v_i_46031 = (1 + v_i_46031)) {\n            v__46050 = bool_or(v__46050, v__46049[(v_i_46031 + (64 * v_MWidthC_1 * v_w_id_46028) + (64 * v_l_id_46029))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46032 = 0; \n            v__46054[v_l_id_46029] = id(v__46050); \n          }\n          /* end map_seq */\n          v_l_id_46029 = atomic_inc(&(v_work_idx_3464)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_46033 = get_local_id(0); \n        int v_tmp_46119 = 0; \n        v__33230 = v_tmp_46119; \n        /* reduce_seq */\n        for (int v_i_46034 = 0; v_i_46034 < v_MWidthC_1; v_i_46034 = (1 + v_i_46034)) {\n          v__33230 = bool_or(v__33230, v__46054[(v_i_46034 + (v_MWidthC_1 * v_l_id_46033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46035 = 0; \n          v__46059[v_w_id_46028] = doubleAndOr(v__33230, v__46040, v__46039[v_w_id_46028], v__46041); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_46028 = atomic_inc(v_work_idx_3466); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46036",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46037",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46038",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46040",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46041",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46049",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46043",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46054",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}