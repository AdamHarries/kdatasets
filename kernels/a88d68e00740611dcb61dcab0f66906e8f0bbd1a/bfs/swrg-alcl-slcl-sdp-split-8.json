{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34374, const global int* restrict v__34375, const global int* restrict v__34376, const global int* restrict v__34377, int v__34378, int v__34379, global int* v__34396, global int* v__34386, local int* v__34391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34382; \n  int v__34387; \n  int v__33230; \n  /* Private Memory */\n  int v__34384_0;\n  \n  for (int v_wg_id_34366 = get_group_id(0); v_wg_id_34366 < v_MHeight_2; v_wg_id_34366 = (v_wg_id_34366 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2369; \n      v_work_idx_2369 = 0; \n      int v_l_id_34367 = atomic_inc(&(v_work_idx_2369)); \n      while((v_l_id_34367 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_34368 = 0; v_i_34368 < 8; v_i_34368 = (1 + v_i_34368)) {\n          int v_tmp_34453 = 0; \n          v__34382 = v_tmp_34453; \n          int v_index_34454 = v__34374[(v_l_id_34367 + (8 * v_MWidthC_1 * v_wg_id_34366) + (v_MWidthC_1 * v_i_34368))]; \n          if (v_index_34454 < 0) {\n            v__34384_0 = v__34382; \n          } else {\n            if (v_index_34454 >= v_VLength_3) {\n              v__34384_0 = v__34382; \n            } else {\n              v__34384_0 = v__34376[v_index_34454]; \n            }\n          }\n          v__34386[(7 + (8 * v_MWidthC_1 * v_wg_id_34366) + (-1 * v_i_34368) + (8 * v_l_id_34367))] = bool_and(v__34384_0, v__34375[(v_l_id_34367 + (8 * v_MWidthC_1 * v_wg_id_34366) + (v_MWidthC_1 * v_i_34368))]); \n        }\n        /* end map_seq */\n        int v_tmp_34455 = 0; \n        v__34387 = v_tmp_34455; \n        /* reduce_seq */\n        for (int v_i_34369 = 0; v_i_34369 < 8; v_i_34369 = (1 + v_i_34369)) {\n          v__34387 = bool_or(v__34387, v__34386[(v_i_34369 + (8 * v_MWidthC_1 * v_wg_id_34366) + (8 * v_l_id_34367))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34370 = 0; \n          v__34391[v_l_id_34367] = id(v__34387); \n        }\n        /* end map_seq */\n        v_l_id_34367 = atomic_inc(&(v_work_idx_2369)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_34371 = get_local_id(0); \n      int v_tmp_34458 = 0; \n      v__33230 = v_tmp_34458; \n      /* reduce_seq */\n      for (int v_i_34372 = 0; v_i_34372 < v_MWidthC_1; v_i_34372 = (1 + v_i_34372)) {\n        v__33230 = bool_or(v__33230, v__34391[(v_i_34372 + (v_MWidthC_1 * v_l_id_34371))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_34373 = 0; \n        v__34396[v_wg_id_34366] = doubleAndOr(v__33230, v__34378, v__34377[v_wg_id_34366], v__34379); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34374",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34375",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34376",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34377",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34378",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34379",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34386",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__34396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}