{
  "name" : "awrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55026, const global int* restrict v__55027, const global int* restrict v__55028, const global int* restrict v__55029, int v__55030, int v__55031, global int* v__55045, global int* v__55033, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55035; \n  int v__55037; \n  /* Private Memory */\n  int v__55039_0;\n  \n  int v__55041_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4304 = v__55033; \n    local int v_w_id_55022; \n    if (get_local_id(0) == 0) {\n      v_w_id_55022 = atomic_inc(v_work_idx_4304); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55022 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_55023 = get_local_id(0); v_l_id_55023 < 512; v_l_id_55023 = (v_l_id_55023 + get_local_size(0))) {\n        int v_tmp_55086 = 0; \n        v__55035 = v_tmp_55086; \n        /* reduce_seq */\n        for (int v_i_55024 = 0; v_i_55024 < v_MWidthC_1; v_i_55024 = (1 + v_i_55024)) {\n          int v_tmp_55087 = 0; \n          v__55037 = v_tmp_55087; \n          int v_index_55088 = v__55026[(v_i_55024 + (512 * v_MWidthC_1 * v_w_id_55022) + (v_MWidthC_1 * v_l_id_55023))]; \n          if (v_index_55088 < 0) {\n            v__55039_0 = v__55037; \n          } else {\n            if (v_index_55088 >= v_VLength_3) {\n              v__55039_0 = v__55037; \n            } else {\n              v__55039_0 = v__55028[v_index_55088]; \n            }\n          }\n          v__55041_0 = bool_and(v__55039_0, v__55027[(v_i_55024 + (512 * v_MWidthC_1 * v_w_id_55022) + (v_MWidthC_1 * v_l_id_55023))]); \n          v__55035 = bool_or(v__55041_0, v__55035); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55025 = 0; \n          v__55045[(v_l_id_55023 + (512 * v_w_id_55022))] = doubleAndOr(v__55035, v__55030, v__55029[(v_l_id_55023 + (512 * v_w_id_55022))], v__55031); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_55022 = atomic_inc(v_work_idx_4304); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55028",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55030",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55031",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55033",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}