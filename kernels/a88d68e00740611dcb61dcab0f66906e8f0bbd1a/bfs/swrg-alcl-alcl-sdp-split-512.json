{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54666, const global int* restrict v__54667, const global int* restrict v__54668, const global int* restrict v__54669, int v__54670, int v__54671, global int* v__54688, global int* v__54678, local int* v__54683, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54674; \n  int v__54679; \n  int v__33230; \n  /* Private Memory */\n  int v__54676_0;\n  \n  for (int v_wg_id_54658 = get_group_id(0); v_wg_id_54658 < v_MHeight_2; v_wg_id_54658 = (v_wg_id_54658 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4270; \n      v_work_idx_4270 = 0; \n      int v_l_id_54659 = atomic_inc(&(v_work_idx_4270)); \n      while((v_l_id_54659 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_54660 = 0; v_i_54660 < 512; v_i_54660 = (1 + v_i_54660)) {\n          int v_tmp_54741 = 0; \n          v__54674 = v_tmp_54741; \n          int v_index_54742 = v__54666[(v_l_id_54659 + (512 * v_MWidthC_1 * v_wg_id_54658) + (v_MWidthC_1 * v_i_54660))]; \n          if (v_index_54742 < 0) {\n            v__54676_0 = v__54674; \n          } else {\n            if (v_index_54742 >= v_VLength_3) {\n              v__54676_0 = v__54674; \n            } else {\n              v__54676_0 = v__54668[v_index_54742]; \n            }\n          }\n          v__54678[(511 + (512 * v_MWidthC_1 * v_wg_id_54658) + (-1 * v_i_54660) + (512 * v_l_id_54659))] = bool_and(v__54676_0, v__54667[(v_l_id_54659 + (512 * v_MWidthC_1 * v_wg_id_54658) + (v_MWidthC_1 * v_i_54660))]); \n        }\n        /* end map_seq */\n        int v_tmp_54743 = 0; \n        v__54679 = v_tmp_54743; \n        /* reduce_seq */\n        for (int v_i_54661 = 0; v_i_54661 < 512; v_i_54661 = (1 + v_i_54661)) {\n          v__54679 = bool_or(v__54679, v__54678[(v_i_54661 + (512 * v_MWidthC_1 * v_wg_id_54658) + (512 * v_l_id_54659))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54662 = 0; \n          v__54683[v_l_id_54659] = id(v__54679); \n        }\n        /* end map_seq */\n        v_l_id_54659 = atomic_inc(&(v_work_idx_4270)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4264; \n      v_work_idx_4264 = 0; \n      int v_l_id_54663 = atomic_inc(&(v_work_idx_4264)); \n      while((v_l_id_54663 < 1)){\n        int v_tmp_54746 = 0; \n        v__33230 = v_tmp_54746; \n        /* reduce_seq */\n        for (int v_i_54664 = 0; v_i_54664 < v_MWidthC_1; v_i_54664 = (1 + v_i_54664)) {\n          v__33230 = bool_or(v__33230, v__54683[(v_i_54664 + (v_MWidthC_1 * v_l_id_54663))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54665 = 0; \n          v__54688[v_wg_id_54658] = doubleAndOr(v__33230, v__54670, v__54669[v_wg_id_54658], v__54671); \n        }\n        /* end map_seq */\n        v_l_id_54663 = atomic_inc(&(v_work_idx_4264)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54666",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54667",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54668",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54669",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54670",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54671",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54678",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54688",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54683",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}