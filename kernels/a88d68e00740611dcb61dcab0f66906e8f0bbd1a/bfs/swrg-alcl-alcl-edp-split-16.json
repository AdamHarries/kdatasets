{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38194, const global int* restrict v__38195, const global int* restrict v__38196, const global int* restrict v__38197, int v__38198, int v__38199, global int* v__38218, local int* v__38213, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38202; \n  int v__38204; \n  int v__33230; \n  /* Private Memory */\n  int v__38206_0;\n  \n  int v__38208_0;\n  \n  int v__38212_0;\n  \n  for (int v_wg_id_38187 = get_group_id(0); v_wg_id_38187 < v_MHeight_2; v_wg_id_38187 = (v_wg_id_38187 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2730; \n      v_work_idx_2730 = 0; \n      int v_l_id_38188 = atomic_inc(&(v_work_idx_2730)); \n      while((v_l_id_38188 < v_MWidthC_1)){\n        int v_tmp_38274 = 0; \n        v__38202 = v_tmp_38274; \n        /* reduce_while_seq */\n        for (int v_i_38189 = 0; v_i_38189 < 16; v_i_38189 = (1 + v_i_38189)) {\n          v__38212_0 = check(v__38202, v__38194[(v_l_id_38188 + (16 * v_MWidthC_1 * v_wg_id_38187) + (v_MWidthC_1 * v_i_38189))]); \n          if (v__38212_0) {\n          } else {\n            break;\n          }\n          int v_tmp_38275 = 0; \n          v__38204 = v_tmp_38275; \n          int v_index_38276 = v__38194[(v_l_id_38188 + (16 * v_MWidthC_1 * v_wg_id_38187) + (v_MWidthC_1 * v_i_38189))]; \n          if (v_index_38276 < 0) {\n            v__38206_0 = v__38204; \n          } else {\n            if (v_index_38276 >= v_VLength_3) {\n              v__38206_0 = v__38204; \n            } else {\n              v__38206_0 = v__38196[v_index_38276]; \n            }\n          }\n          v__38208_0 = bool_and(v__38206_0, v__38195[(v_l_id_38188 + (16 * v_MWidthC_1 * v_wg_id_38187) + (v_MWidthC_1 * v_i_38189))]); \n          v__38202 = bool_or(v__38208_0, v__38202); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38190 = 0; \n          v__38213[v_l_id_38188] = id(v__38202); \n        }\n        /* end map_seq */\n        v_l_id_38188 = atomic_inc(&(v_work_idx_2730)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2725; \n      v_work_idx_2725 = 0; \n      int v_l_id_38191 = atomic_inc(&(v_work_idx_2725)); \n      while((v_l_id_38191 < 1)){\n        int v_tmp_38279 = 0; \n        v__33230 = v_tmp_38279; \n        /* reduce_seq */\n        for (int v_i_38192 = 0; v_i_38192 < v_MWidthC_1; v_i_38192 = (1 + v_i_38192)) {\n          v__33230 = bool_or(v__33230, v__38213[(v_i_38192 + (v_MWidthC_1 * v_l_id_38191))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38193 = 0; \n          v__38218[v_wg_id_38187] = doubleAndOr(v__33230, v__38198, v__38197[v_wg_id_38187], v__38199); \n        }\n        /* end map_seq */\n        v_l_id_38191 = atomic_inc(&(v_work_idx_2725)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__38194",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38195",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38196",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38197",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38198",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38199",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__38218",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38213",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}