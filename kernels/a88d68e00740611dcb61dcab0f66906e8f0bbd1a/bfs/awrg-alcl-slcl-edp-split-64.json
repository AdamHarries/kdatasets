{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46230, const global int* restrict v__46231, const global int* restrict v__46232, const global int* restrict v__46233, int v__46234, int v__46235, global int* v__46255, global int* v__46237, local int* v__46250, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46239; \n  int v__46241; \n  int v__33230; \n  /* Private Memory */\n  int v__46243_0;\n  \n  int v__46245_0;\n  \n  int v__46249_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3486 = v__46237; \n    local int v_w_id_46223; \n    if (get_local_id(0) == 0) {\n      v_w_id_46223 = atomic_inc(v_work_idx_3486); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_46223 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3484; \n        v_work_idx_3484 = 0; \n        int v_l_id_46224 = atomic_inc(&(v_work_idx_3484)); \n        while((v_l_id_46224 < v_MWidthC_1)){\n          int v_tmp_46313 = 0; \n          v__46239 = v_tmp_46313; \n          /* reduce_while_seq */\n          for (int v_i_46225 = 0; v_i_46225 < 64; v_i_46225 = (1 + v_i_46225)) {\n            v__46249_0 = check(v__46239, v__46230[(v_l_id_46224 + (64 * v_MWidthC_1 * v_w_id_46223) + (v_MWidthC_1 * v_i_46225))]); \n            if (v__46249_0) {\n            } else {\n              break;\n            }\n            int v_tmp_46314 = 0; \n            v__46241 = v_tmp_46314; \n            int v_index_46315 = v__46230[(v_l_id_46224 + (64 * v_MWidthC_1 * v_w_id_46223) + (v_MWidthC_1 * v_i_46225))]; \n            if (v_index_46315 < 0) {\n              v__46243_0 = v__46241; \n            } else {\n              if (v_index_46315 >= v_VLength_3) {\n                v__46243_0 = v__46241; \n              } else {\n                v__46243_0 = v__46232[v_index_46315]; \n              }\n            }\n            v__46245_0 = bool_and(v__46243_0, v__46231[(v_l_id_46224 + (64 * v_MWidthC_1 * v_w_id_46223) + (v_MWidthC_1 * v_i_46225))]); \n            v__46239 = bool_or(v__46245_0, v__46239); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46226 = 0; \n            v__46250[v_l_id_46224] = id(v__46239); \n          }\n          /* end map_seq */\n          v_l_id_46224 = atomic_inc(&(v_work_idx_3484)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_46227 = get_local_id(0); \n        int v_tmp_46318 = 0; \n        v__33230 = v_tmp_46318; \n        /* reduce_seq */\n        for (int v_i_46228 = 0; v_i_46228 < v_MWidthC_1; v_i_46228 = (1 + v_i_46228)) {\n          v__33230 = bool_or(v__33230, v__46250[(v_i_46228 + (v_MWidthC_1 * v_l_id_46227))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46229 = 0; \n          v__46255[v_w_id_46223] = doubleAndOr(v__33230, v__46234, v__46233[v_w_id_46223], v__46235); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_46223 = atomic_inc(v_work_idx_3486); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__46230",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46231",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46232",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46234",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46235",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46237",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46255",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46250",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}