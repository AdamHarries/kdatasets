{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34674, const global int* restrict v__34675, const global int* restrict v__34676, const global int* restrict v__34677, int v__34678, int v__34679, global int* v__34696, global int* v__34686, local int* v__34691, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34682; \n  int v__34687; \n  int v__33230; \n  /* Private Memory */\n  int v__34684_0;\n  \n  for (int v_wg_id_34666 = get_group_id(0); v_wg_id_34666 < v_MHeight_2; v_wg_id_34666 = (v_wg_id_34666 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2398; \n      v_work_idx_2398 = 0; \n      int v_l_id_34667 = atomic_inc(&(v_work_idx_2398)); \n      while((v_l_id_34667 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_34668 = 0; v_i_34668 < 8; v_i_34668 = (1 + v_i_34668)) {\n          int v_tmp_34749 = 0; \n          v__34682 = v_tmp_34749; \n          int v_index_34750 = v__34674[(v_l_id_34667 + (8 * v_MWidthC_1 * v_wg_id_34666) + (v_MWidthC_1 * v_i_34668))]; \n          if (v_index_34750 < 0) {\n            v__34684_0 = v__34682; \n          } else {\n            if (v_index_34750 >= v_VLength_3) {\n              v__34684_0 = v__34682; \n            } else {\n              v__34684_0 = v__34676[v_index_34750]; \n            }\n          }\n          v__34686[(7 + (8 * v_MWidthC_1 * v_wg_id_34666) + (-1 * v_i_34668) + (8 * v_l_id_34667))] = bool_and(v__34684_0, v__34675[(v_l_id_34667 + (8 * v_MWidthC_1 * v_wg_id_34666) + (v_MWidthC_1 * v_i_34668))]); \n        }\n        /* end map_seq */\n        int v_tmp_34751 = 0; \n        v__34687 = v_tmp_34751; \n        /* reduce_seq */\n        for (int v_i_34669 = 0; v_i_34669 < 8; v_i_34669 = (1 + v_i_34669)) {\n          v__34687 = bool_or(v__34687, v__34686[(v_i_34669 + (8 * v_MWidthC_1 * v_wg_id_34666) + (8 * v_l_id_34667))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34670 = 0; \n          v__34691[v_l_id_34667] = id(v__34687); \n        }\n        /* end map_seq */\n        v_l_id_34667 = atomic_inc(&(v_work_idx_2398)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2392; \n      v_work_idx_2392 = 0; \n      int v_l_id_34671 = atomic_inc(&(v_work_idx_2392)); \n      while((v_l_id_34671 < 1)){\n        int v_tmp_34754 = 0; \n        v__33230 = v_tmp_34754; \n        /* reduce_seq */\n        for (int v_i_34672 = 0; v_i_34672 < v_MWidthC_1; v_i_34672 = (1 + v_i_34672)) {\n          v__33230 = bool_or(v__33230, v__34691[(v_i_34672 + (v_MWidthC_1 * v_l_id_34671))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34673 = 0; \n          v__34696[v_wg_id_34666] = doubleAndOr(v__33230, v__34678, v__34677[v_wg_id_34666], v__34679); \n        }\n        /* end map_seq */\n        v_l_id_34671 = atomic_inc(&(v_work_idx_2392)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34674",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34675",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34676",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34677",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34678",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34679",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34686",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__34696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34691",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}