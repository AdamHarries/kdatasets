{
  "name" : "swrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__101416, const global float* restrict v__101417, const global float* restrict v__101418, const global float* restrict v__101419, float v__101420, float v__101421, global float* v__101440, local float* v__101435, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101424; \n  float v__101426; \n  float v__80917; \n  /* Private Memory */\n  float v__101428_0;\n  \n  float v__101430_0;\n  \n  int v__101434_0;\n  \n  for (int v_wg_id_101409 = get_group_id(0); v_wg_id_101409 < v_MHeight_2; v_wg_id_101409 = (v_wg_id_101409 + get_num_groups(0))) {\n    for (int v_l_id_101410 = get_local_id(0); v_l_id_101410 < v_MWidthC_1; v_l_id_101410 = (v_l_id_101410 + get_local_size(0))) {\n      float v_tmp_101508 = 0.0f; \n      v__101424 = v_tmp_101508; \n      /* reduce_while_seq */\n      for (int v_i_101411 = 0; v_i_101411 < 512; v_i_101411 = (1 + v_i_101411)) {\n        v__101434_0 = check(v__101424, v__101416[(v_l_id_101410 + (512 * v_MWidthC_1 * v_wg_id_101409) + (v_MWidthC_1 * v_i_101411))]); \n        if (v__101434_0) {\n        } else {\n          break;\n        }\n        float v_tmp_101509 = 0.0f; \n        v__101426 = v_tmp_101509; \n        int v_index_101510 = v__101416[(v_l_id_101410 + (512 * v_MWidthC_1 * v_wg_id_101409) + (v_MWidthC_1 * v_i_101411))]; \n        if (v_index_101510 < 0) {\n          v__101428_0 = v__101426; \n        } else {\n          if (v_index_101510 >= v_VLength_3) {\n            v__101428_0 = v__101426; \n          } else {\n            v__101428_0 = v__101418[v_index_101510]; \n          }\n        }\n        v__101430_0 = mult(v__101428_0, v__101417[(v_l_id_101410 + (512 * v_MWidthC_1 * v_wg_id_101409) + (v_MWidthC_1 * v_i_101411))]); \n        v__101424 = add(v__101430_0, v__101424); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101412 = 0; \n        v__101435[v_l_id_101410] = id(v__101424); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101413 = get_local_id(0); \n      float v_tmp_101513 = 0.0f; \n      v__80917 = v_tmp_101513; \n      /* reduce_seq */\n      for (int v_i_101414 = 0; v_i_101414 < v_MWidthC_1; v_i_101414 = (1 + v_i_101414)) {\n        v__80917 = add(v__80917, v__101435[(v_i_101414 + (v_MWidthC_1 * v_l_id_101413))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101415 = 0; \n        v__101440[v_wg_id_101409] = doubleMultiplyAdd(v__80917, v__101420, v__101419[v_wg_id_101409], v__101421); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__101416",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101417",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101418",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101420",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101421",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101440",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101435",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}