{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__104114, const global float* restrict v__104115, const global float* restrict v__104116, const global float* restrict v__104117, float v__104118, float v__104119, global float* v__104137, global int* v__104121, local float* v__104132, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104123; \n  float v__104125; \n  float v__80917; \n  /* Private Memory */\n  float v__104127_0;\n  \n  float v__104129_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8899 = v__104121; \n    local int v_w_id_104107; \n    if (get_local_id(0) == 0) {\n      v_w_id_104107 = atomic_inc(v_work_idx_8899); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104107 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8897; \n        v_work_idx_8897 = 0; \n        int v_l_id_104108 = atomic_inc(&(v_work_idx_8897)); \n        while((v_l_id_104108 < v_MWidthC_1)){\n          float v_tmp_104188 = 0.0f; \n          v__104123 = v_tmp_104188; \n          /* reduce_seq */\n          for (int v_i_104109 = 0; v_i_104109 < 512; v_i_104109 = (1 + v_i_104109)) {\n            float v_tmp_104189 = 0.0f; \n            v__104125 = v_tmp_104189; \n            int v_index_104190 = v__104114[(v_l_id_104108 + (512 * v_MWidthC_1 * v_w_id_104107) + (v_MWidthC_1 * v_i_104109))]; \n            if (v_index_104190 < 0) {\n              v__104127_0 = v__104125; \n            } else {\n              if (v_index_104190 >= v_VLength_3) {\n                v__104127_0 = v__104125; \n              } else {\n                v__104127_0 = v__104116[v_index_104190]; \n              }\n            }\n            v__104129_0 = mult(v__104127_0, v__104115[(v_l_id_104108 + (512 * v_MWidthC_1 * v_w_id_104107) + (v_MWidthC_1 * v_i_104109))]); \n            v__104123 = add(v__104129_0, v__104123); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104110 = 0; \n            v__104132[v_l_id_104108] = id(v__104123); \n          }\n          /* end map_seq */\n          v_l_id_104108 = atomic_inc(&(v_work_idx_8897)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8892; \n        v_work_idx_8892 = 0; \n        int v_l_id_104111 = atomic_inc(&(v_work_idx_8892)); \n        while((v_l_id_104111 < 1)){\n          float v_tmp_104193 = 0.0f; \n          v__80917 = v_tmp_104193; \n          /* reduce_seq */\n          for (int v_i_104112 = 0; v_i_104112 < v_MWidthC_1; v_i_104112 = (1 + v_i_104112)) {\n            v__80917 = add(v__80917, v__104132[(v_i_104112 + (v_MWidthC_1 * v_l_id_104111))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104113 = 0; \n            v__104137[v_w_id_104107] = doubleMultiplyAdd(v__80917, v__104118, v__104117[v_w_id_104107], v__104119); \n          }\n          /* end map_seq */\n          v_l_id_104111 = atomic_inc(&(v_work_idx_8892)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104107 = atomic_inc(v_work_idx_8899); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__104114",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104115",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104116",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104117",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104118",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104119",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104121",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104132",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}