{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84970, const global float* restrict v__84971, const global float* restrict v__84972, const global float* restrict v__84973, float v__84974, float v__84975, global float* v__84992, local float* v__84987, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84978; \n  float v__84980; \n  float v__80917; \n  /* Private Memory */\n  float v__84982_0;\n  \n  float v__84984_0;\n  \n  for (int v_wg_id_84963 = get_group_id(0); v_wg_id_84963 < v_MHeight_2; v_wg_id_84963 = (v_wg_id_84963 + get_num_groups(0))) {\n    for (int v_l_id_84964 = get_local_id(0); v_l_id_84964 < v_MWidthC_1; v_l_id_84964 = (v_l_id_84964 + get_local_size(0))) {\n      float v_tmp_85053 = 0.0f; \n      v__84978 = v_tmp_85053; \n      /* reduce_seq */\n      for (int v_i_84965 = 0; v_i_84965 < 16; v_i_84965 = (1 + v_i_84965)) {\n        float v_tmp_85054 = 0.0f; \n        v__84980 = v_tmp_85054; \n        int v_index_85055 = v__84970[(v_l_id_84964 + (16 * v_MWidthC_1 * v_wg_id_84963) + (v_MWidthC_1 * v_i_84965))]; \n        if (v_index_85055 < 0) {\n          v__84982_0 = v__84980; \n        } else {\n          if (v_index_85055 >= v_VLength_3) {\n            v__84982_0 = v__84980; \n          } else {\n            v__84982_0 = v__84972[v_index_85055]; \n          }\n        }\n        v__84984_0 = mult(v__84982_0, v__84971[(v_l_id_84964 + (16 * v_MWidthC_1 * v_wg_id_84963) + (v_MWidthC_1 * v_i_84965))]); \n        v__84978 = add(v__84984_0, v__84978); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84966 = 0; \n        v__84987[v_l_id_84964] = id(v__84978); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7093; \n      v_work_idx_7093 = 0; \n      int v_l_id_84967 = atomic_inc(&(v_work_idx_7093)); \n      while((v_l_id_84967 < 1)){\n        float v_tmp_85058 = 0.0f; \n        v__80917 = v_tmp_85058; \n        /* reduce_seq */\n        for (int v_i_84968 = 0; v_i_84968 < v_MWidthC_1; v_i_84968 = (1 + v_i_84968)) {\n          v__80917 = add(v__80917, v__84987[(v_i_84968 + (v_MWidthC_1 * v_l_id_84967))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84969 = 0; \n          v__84992[v_wg_id_84963] = doubleMultiplyAdd(v__80917, v__84974, v__84973[v_wg_id_84963], v__84975); \n        }\n        /* end map_seq */\n        v_l_id_84967 = atomic_inc(&(v_work_idx_7093)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__84970",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84971",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84972",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84973",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84974",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84975",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__84992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84987",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}