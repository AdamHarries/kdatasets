{
  "name" : "swrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81212, const global float* restrict v__81213, const global float* restrict v__81214, const global float* restrict v__81215, float v__81216, float v__81217, global float* v__81234, global float* v__81224, local float* v__81229, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81220; \n  float v__81225; \n  float v__80917; \n  /* Private Memory */\n  float v__81222_0;\n  \n  for (int v_wg_id_81204 = get_group_id(0); v_wg_id_81204 < v_MHeight_2; v_wg_id_81204 = (v_wg_id_81204 + get_num_groups(0))) {\n    for (int v_l_id_81205 = get_local_id(0); v_l_id_81205 < v_MWidthC_1; v_l_id_81205 = (v_l_id_81205 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_81206 = 0; v_i_81206 < 8; v_i_81206 = (1 + v_i_81206)) {\n        float v_tmp_81299 = 0.0f; \n        v__81220 = v_tmp_81299; \n        int v_index_81300 = v__81212[(v_l_id_81205 + (8 * v_MWidthC_1 * v_wg_id_81204) + (v_MWidthC_1 * v_i_81206))]; \n        if (v_index_81300 < 0) {\n          v__81222_0 = v__81220; \n        } else {\n          if (v_index_81300 >= v_VLength_3) {\n            v__81222_0 = v__81220; \n          } else {\n            v__81222_0 = v__81214[v_index_81300]; \n          }\n        }\n        v__81224[(7 + (8 * v_MWidthC_1 * v_wg_id_81204) + (-1 * v_i_81206) + (8 * v_l_id_81205))] = mult(v__81222_0, v__81213[(v_l_id_81205 + (8 * v_MWidthC_1 * v_wg_id_81204) + (v_MWidthC_1 * v_i_81206))]); \n      }\n      /* end map_seq */\n      float v_tmp_81301 = 0.0f; \n      v__81225 = v_tmp_81301; \n      /* reduce_seq */\n      for (int v_i_81207 = 0; v_i_81207 < 8; v_i_81207 = (1 + v_i_81207)) {\n        v__81225 = add(v__81225, v__81224[(v_i_81207 + (8 * v_MWidthC_1 * v_wg_id_81204) + (8 * v_l_id_81205))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81208 = 0; \n        v__81229[v_l_id_81205] = id(v__81225); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81209 = get_local_id(0); \n      float v_tmp_81304 = 0.0f; \n      v__80917 = v_tmp_81304; \n      /* reduce_seq */\n      for (int v_i_81210 = 0; v_i_81210 < v_MWidthC_1; v_i_81210 = (1 + v_i_81210)) {\n        v__80917 = add(v__80917, v__81229[(v_i_81210 + (v_MWidthC_1 * v_l_id_81209))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81211 = 0; \n        v__81234[v_wg_id_81204] = doubleMultiplyAdd(v__80917, v__81216, v__81215[v_wg_id_81204], v__81217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81212",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81213",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81224",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81234",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81229",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}