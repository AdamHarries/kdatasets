{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83407, const global float* restrict v__83408, const global float* restrict v__83409, const global float* restrict v__83410, float v__83411, float v__83412, global float* v__83432, global int* v__83414, local float* v__83427, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83416; \n  float v__83418; \n  float v__80917; \n  /* Private Memory */\n  float v__83420_0;\n  \n  float v__83422_0;\n  \n  int v__83426_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6951 = v__83414; \n    local int v_w_id_83400; \n    if (get_local_id(0) == 0) {\n      v_w_id_83400 = atomic_inc(v_work_idx_6951); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83400 < v_MHeight_2)){\n      for (int v_l_id_83401 = get_local_id(0); v_l_id_83401 < v_MWidthC_1; v_l_id_83401 = (v_l_id_83401 + get_local_size(0))) {\n        float v_tmp_83494 = 0.0f; \n        v__83416 = v_tmp_83494; \n        /* reduce_while_seq */\n        for (int v_i_83402 = 0; v_i_83402 < 8; v_i_83402 = (1 + v_i_83402)) {\n          v__83426_0 = check(v__83416, v__83407[(v_l_id_83401 + (8 * v_MWidthC_1 * v_w_id_83400) + (v_MWidthC_1 * v_i_83402))]); \n          if (v__83426_0) {\n          } else {\n            break;\n          }\n          float v_tmp_83495 = 0.0f; \n          v__83418 = v_tmp_83495; \n          int v_index_83496 = v__83407[(v_l_id_83401 + (8 * v_MWidthC_1 * v_w_id_83400) + (v_MWidthC_1 * v_i_83402))]; \n          if (v_index_83496 < 0) {\n            v__83420_0 = v__83418; \n          } else {\n            if (v_index_83496 >= v_VLength_3) {\n              v__83420_0 = v__83418; \n            } else {\n              v__83420_0 = v__83409[v_index_83496]; \n            }\n          }\n          v__83422_0 = mult(v__83420_0, v__83408[(v_l_id_83401 + (8 * v_MWidthC_1 * v_w_id_83400) + (v_MWidthC_1 * v_i_83402))]); \n          v__83416 = add(v__83422_0, v__83416); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83403 = 0; \n          v__83427[v_l_id_83401] = id(v__83416); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6945; \n        v_work_idx_6945 = 0; \n        int v_l_id_83404 = atomic_inc(&(v_work_idx_6945)); \n        while((v_l_id_83404 < 1)){\n          float v_tmp_83499 = 0.0f; \n          v__80917 = v_tmp_83499; \n          /* reduce_seq */\n          for (int v_i_83405 = 0; v_i_83405 < v_MWidthC_1; v_i_83405 = (1 + v_i_83405)) {\n            v__80917 = add(v__80917, v__83427[(v_i_83405 + (v_MWidthC_1 * v_l_id_83404))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83406 = 0; \n            v__83432[v_w_id_83400] = doubleMultiplyAdd(v__80917, v__83411, v__83410[v_w_id_83400], v__83412); \n          }\n          /* end map_seq */\n          v_l_id_83404 = atomic_inc(&(v_work_idx_6945)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83400 = atomic_inc(v_work_idx_6951); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83407",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83408",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83409",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83410",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83411",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83412",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83414",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83432",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83427",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}