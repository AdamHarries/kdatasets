{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99214, const global float* restrict v__99215, const global float* restrict v__99216, const global float* restrict v__99217, float v__99218, float v__99219, global float* v__99238, local float* v__99233, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99222; \n  float v__99224; \n  float v__80917; \n  /* Private Memory */\n  float v__99226_0;\n  \n  float v__99228_0;\n  \n  int v__99232_0;\n  \n  for (int v_wg_id_99207 = get_group_id(0); v_wg_id_99207 < v_MHeight_2; v_wg_id_99207 = (v_wg_id_99207 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8432; \n      v_work_idx_8432 = 0; \n      int v_l_id_99208 = atomic_inc(&(v_work_idx_8432)); \n      while((v_l_id_99208 < v_MWidthC_1)){\n        float v_tmp_99294 = 0.0f; \n        v__99222 = v_tmp_99294; \n        /* reduce_while_seq */\n        for (int v_i_99209 = 0; v_i_99209 < 256; v_i_99209 = (1 + v_i_99209)) {\n          v__99232_0 = check(v__99222, v__99214[(v_l_id_99208 + (256 * v_MWidthC_1 * v_wg_id_99207) + (v_MWidthC_1 * v_i_99209))]); \n          if (v__99232_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99295 = 0.0f; \n          v__99224 = v_tmp_99295; \n          int v_index_99296 = v__99214[(v_l_id_99208 + (256 * v_MWidthC_1 * v_wg_id_99207) + (v_MWidthC_1 * v_i_99209))]; \n          if (v_index_99296 < 0) {\n            v__99226_0 = v__99224; \n          } else {\n            if (v_index_99296 >= v_VLength_3) {\n              v__99226_0 = v__99224; \n            } else {\n              v__99226_0 = v__99216[v_index_99296]; \n            }\n          }\n          v__99228_0 = mult(v__99226_0, v__99215[(v_l_id_99208 + (256 * v_MWidthC_1 * v_wg_id_99207) + (v_MWidthC_1 * v_i_99209))]); \n          v__99222 = add(v__99228_0, v__99222); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99210 = 0; \n          v__99233[v_l_id_99208] = id(v__99222); \n        }\n        /* end map_seq */\n        v_l_id_99208 = atomic_inc(&(v_work_idx_8432)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8427; \n      v_work_idx_8427 = 0; \n      int v_l_id_99211 = atomic_inc(&(v_work_idx_8427)); \n      while((v_l_id_99211 < 1)){\n        float v_tmp_99299 = 0.0f; \n        v__80917 = v_tmp_99299; \n        /* reduce_seq */\n        for (int v_i_99212 = 0; v_i_99212 < v_MWidthC_1; v_i_99212 = (1 + v_i_99212)) {\n          v__80917 = add(v__80917, v__99233[(v_i_99212 + (v_MWidthC_1 * v_l_id_99211))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99213 = 0; \n          v__99238[v_wg_id_99207] = doubleMultiplyAdd(v__80917, v__99218, v__99217[v_wg_id_99207], v__99219); \n        }\n        /* end map_seq */\n        v_l_id_99211 = atomic_inc(&(v_work_idx_8427)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99214",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99215",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99216",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99217",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99218",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99219",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__99238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99233",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}