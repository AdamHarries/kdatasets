{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99544, const global float* restrict v__99545, const global float* restrict v__99546, const global float* restrict v__99547, float v__99548, float v__99549, global float* v__99567, global float* v__99557, global int* v__99551, local float* v__99562, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99553; \n  float v__99558; \n  float v__80917; \n  /* Private Memory */\n  float v__99555_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8462 = v__99551; \n    local int v_w_id_99536; \n    if (get_local_id(0) == 0) {\n      v_w_id_99536 = atomic_inc(v_work_idx_8462); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99536 < v_MHeight_2)){\n      for (int v_l_id_99537 = get_local_id(0); v_l_id_99537 < v_MWidthC_1; v_l_id_99537 = (v_l_id_99537 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99538 = 0; v_i_99538 < 256; v_i_99538 = (1 + v_i_99538)) {\n          float v_tmp_99630 = 0.0f; \n          v__99553 = v_tmp_99630; \n          int v_index_99631 = v__99544[(v_l_id_99537 + (256 * v_MWidthC_1 * v_w_id_99536) + (v_MWidthC_1 * v_i_99538))]; \n          if (v_index_99631 < 0) {\n            v__99555_0 = v__99553; \n          } else {\n            if (v_index_99631 >= v_VLength_3) {\n              v__99555_0 = v__99553; \n            } else {\n              v__99555_0 = v__99546[v_index_99631]; \n            }\n          }\n          v__99557[(255 + (256 * v_MWidthC_1 * v_w_id_99536) + (-1 * v_i_99538) + (256 * v_l_id_99537))] = mult(v__99555_0, v__99545[(v_l_id_99537 + (256 * v_MWidthC_1 * v_w_id_99536) + (v_MWidthC_1 * v_i_99538))]); \n        }\n        /* end map_seq */\n        float v_tmp_99632 = 0.0f; \n        v__99558 = v_tmp_99632; \n        /* reduce_seq */\n        for (int v_i_99539 = 0; v_i_99539 < 256; v_i_99539 = (1 + v_i_99539)) {\n          v__99558 = add(v__99558, v__99557[(v_i_99539 + (256 * v_MWidthC_1 * v_w_id_99536) + (256 * v_l_id_99537))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99540 = 0; \n          v__99562[v_l_id_99537] = id(v__99558); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99541 = get_local_id(0); \n        float v_tmp_99635 = 0.0f; \n        v__80917 = v_tmp_99635; \n        /* reduce_seq */\n        for (int v_i_99542 = 0; v_i_99542 < v_MWidthC_1; v_i_99542 = (1 + v_i_99542)) {\n          v__80917 = add(v__80917, v__99562[(v_i_99542 + (v_MWidthC_1 * v_l_id_99541))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99543 = 0; \n          v__99567[v_w_id_99536] = doubleMultiplyAdd(v__80917, v__99548, v__99547[v_w_id_99536], v__99549); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99536 = atomic_inc(v_work_idx_8462); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99544",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99545",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99546",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99547",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99548",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99549",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99557",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99551",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99567",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99562",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}