{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83205, const global float* restrict v__83206, const global float* restrict v__83207, const global float* restrict v__83208, float v__83209, float v__83210, global float* v__83228, global float* v__83218, global int* v__83212, local float* v__83223, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83214; \n  float v__83219; \n  float v__80917; \n  /* Private Memory */\n  float v__83216_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6931 = v__83212; \n    local int v_w_id_83197; \n    if (get_local_id(0) == 0) {\n      v_w_id_83197 = atomic_inc(v_work_idx_6931); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83197 < v_MHeight_2)){\n      for (int v_l_id_83198 = get_local_id(0); v_l_id_83198 < v_MWidthC_1; v_l_id_83198 = (v_l_id_83198 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_83199 = 0; v_i_83199 < 8; v_i_83199 = (1 + v_i_83199)) {\n          float v_tmp_83287 = 0.0f; \n          v__83214 = v_tmp_83287; \n          int v_index_83288 = v__83205[(v_l_id_83198 + (8 * v_MWidthC_1 * v_w_id_83197) + (v_MWidthC_1 * v_i_83199))]; \n          if (v_index_83288 < 0) {\n            v__83216_0 = v__83214; \n          } else {\n            if (v_index_83288 >= v_VLength_3) {\n              v__83216_0 = v__83214; \n            } else {\n              v__83216_0 = v__83207[v_index_83288]; \n            }\n          }\n          v__83218[(7 + (8 * v_MWidthC_1 * v_w_id_83197) + (-1 * v_i_83199) + (8 * v_l_id_83198))] = mult(v__83216_0, v__83206[(v_l_id_83198 + (8 * v_MWidthC_1 * v_w_id_83197) + (v_MWidthC_1 * v_i_83199))]); \n        }\n        /* end map_seq */\n        float v_tmp_83289 = 0.0f; \n        v__83219 = v_tmp_83289; \n        /* reduce_seq */\n        for (int v_i_83200 = 0; v_i_83200 < 8; v_i_83200 = (1 + v_i_83200)) {\n          v__83219 = add(v__83219, v__83218[(v_i_83200 + (8 * v_MWidthC_1 * v_w_id_83197) + (8 * v_l_id_83198))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83201 = 0; \n          v__83223[v_l_id_83198] = id(v__83219); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6924; \n        v_work_idx_6924 = 0; \n        int v_l_id_83202 = atomic_inc(&(v_work_idx_6924)); \n        while((v_l_id_83202 < 1)){\n          float v_tmp_83292 = 0.0f; \n          v__80917 = v_tmp_83292; \n          /* reduce_seq */\n          for (int v_i_83203 = 0; v_i_83203 < v_MWidthC_1; v_i_83203 = (1 + v_i_83203)) {\n            v__80917 = add(v__80917, v__83223[(v_i_83203 + (v_MWidthC_1 * v_l_id_83202))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83204 = 0; \n            v__83228[v_w_id_83197] = doubleMultiplyAdd(v__80917, v__83209, v__83208[v_w_id_83197], v__83210); \n          }\n          /* end map_seq */\n          v_l_id_83202 = atomic_inc(&(v_work_idx_6924)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83197 = atomic_inc(v_work_idx_6931); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83205",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83206",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83218",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83212",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83223",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}