{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86983, const global float* restrict v__86984, const global float* restrict v__86985, const global float* restrict v__86986, float v__86987, float v__86988, global float* v__87004, global int* v__86990, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86991; \n  float v__86994; \n  /* Private Memory */\n  float v__86996_0;\n  \n  float v__86998_0;\n  \n  int v__87002_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7285 = v__86990; \n    local int v_w_id_86979; \n    if (get_local_id(0) == 0) {\n      v_w_id_86979 = atomic_inc(v_work_idx_7285); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86979 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7283; \n        v_work_idx_7283 = 0; \n        int v_l_id_86980 = atomic_inc(&(v_work_idx_7283)); \n        while((v_l_id_86980 < 16)){\n          float v_tmp_87047 = 0.0f; \n          v__86991 = v_tmp_87047; \n          /* reduce_while_seq */\n          for (int v_i_86981 = 0; v_i_86981 < v_MWidthC_1; v_i_86981 = (1 + v_i_86981)) {\n            v__87002_0 = check(v__86991, v__86983[(v_i_86981 + (16 * v_MWidthC_1 * v_w_id_86979) + (v_MWidthC_1 * v_l_id_86980))]); \n            if (v__87002_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87048 = 0.0f; \n            v__86994 = v_tmp_87048; \n            int v_index_87049 = v__86983[(v_i_86981 + (16 * v_MWidthC_1 * v_w_id_86979) + (v_MWidthC_1 * v_l_id_86980))]; \n            if (v_index_87049 < 0) {\n              v__86996_0 = v__86994; \n            } else {\n              if (v_index_87049 >= v_VLength_3) {\n                v__86996_0 = v__86994; \n              } else {\n                v__86996_0 = v__86985[v_index_87049]; \n              }\n            }\n            v__86998_0 = mult(v__86996_0, v__86984[(v_i_86981 + (16 * v_MWidthC_1 * v_w_id_86979) + (v_MWidthC_1 * v_l_id_86980))]); \n            v__86991 = add(v__86998_0, v__86991); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86982 = 0; \n            v__87004[(v_l_id_86980 + (16 * v_w_id_86979))] = doubleMultiplyAdd(v__86991, v__86987, v__86986[(v_l_id_86980 + (16 * v_w_id_86979))], v__86988); \n          }\n          /* end map_seq */\n          v_l_id_86980 = atomic_inc(&(v_work_idx_7283)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86979 = atomic_inc(v_work_idx_7285); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86983",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86985",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86987",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86988",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86990",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}