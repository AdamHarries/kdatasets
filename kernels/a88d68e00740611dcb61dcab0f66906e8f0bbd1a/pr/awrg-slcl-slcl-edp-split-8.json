{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83094, const global float* restrict v__83095, const global float* restrict v__83096, const global float* restrict v__83097, float v__83098, float v__83099, global float* v__83119, global int* v__83101, local float* v__83114, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83103; \n  float v__83105; \n  float v__80917; \n  /* Private Memory */\n  float v__83107_0;\n  \n  float v__83109_0;\n  \n  int v__83113_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6920 = v__83101; \n    local int v_w_id_83087; \n    if (get_local_id(0) == 0) {\n      v_w_id_83087 = atomic_inc(v_work_idx_6920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83087 < v_MHeight_2)){\n      for (int v_l_id_83088 = get_local_id(0); v_l_id_83088 < v_MWidthC_1; v_l_id_83088 = (v_l_id_83088 + get_local_size(0))) {\n        float v_tmp_83185 = 0.0f; \n        v__83103 = v_tmp_83185; \n        /* reduce_while_seq */\n        for (int v_i_83089 = 0; v_i_83089 < 8; v_i_83089 = (1 + v_i_83089)) {\n          v__83113_0 = check(v__83103, v__83094[(v_l_id_83088 + (8 * v_MWidthC_1 * v_w_id_83087) + (v_MWidthC_1 * v_i_83089))]); \n          if (v__83113_0) {\n          } else {\n            break;\n          }\n          float v_tmp_83186 = 0.0f; \n          v__83105 = v_tmp_83186; \n          int v_index_83187 = v__83094[(v_l_id_83088 + (8 * v_MWidthC_1 * v_w_id_83087) + (v_MWidthC_1 * v_i_83089))]; \n          if (v_index_83187 < 0) {\n            v__83107_0 = v__83105; \n          } else {\n            if (v_index_83187 >= v_VLength_3) {\n              v__83107_0 = v__83105; \n            } else {\n              v__83107_0 = v__83096[v_index_83187]; \n            }\n          }\n          v__83109_0 = mult(v__83107_0, v__83095[(v_l_id_83088 + (8 * v_MWidthC_1 * v_w_id_83087) + (v_MWidthC_1 * v_i_83089))]); \n          v__83103 = add(v__83109_0, v__83103); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83090 = 0; \n          v__83114[v_l_id_83088] = id(v__83103); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83091 = get_local_id(0); \n        float v_tmp_83190 = 0.0f; \n        v__80917 = v_tmp_83190; \n        /* reduce_seq */\n        for (int v_i_83092 = 0; v_i_83092 < v_MWidthC_1; v_i_83092 = (1 + v_i_83092)) {\n          v__80917 = add(v__80917, v__83114[(v_i_83092 + (v_MWidthC_1 * v_l_id_83091))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83093 = 0; \n          v__83119[v_w_id_83087] = doubleMultiplyAdd(v__80917, v__83098, v__83097[v_w_id_83087], v__83099); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83087 = atomic_inc(v_work_idx_6920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83094",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83095",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83096",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83097",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83098",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83099",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83101",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83119",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83114",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}