{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101837, const global float* restrict v__101838, const global float* restrict v__101839, const global float* restrict v__101840, float v__101841, float v__101842, global float* v__101855, global float* v__101849, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101845; \n  float v__101850; \n  /* Private Memory */\n  float v__101847_0;\n  \n  for (int v_wg_id_101832 = get_group_id(0); v_wg_id_101832 < ((v_MHeight_2)/(512)); v_wg_id_101832 = (v_wg_id_101832 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8673; \n      v_work_idx_8673 = 0; \n      int v_l_id_101833 = atomic_inc(&(v_work_idx_8673)); \n      while((v_l_id_101833 < 512)){\n        /* map_seq */\n        for (int v_i_101834 = 0; v_i_101834 < v_MWidthC_1; v_i_101834 = (1 + v_i_101834)) {\n          float v_tmp_101895 = 0.0f; \n          v__101845 = v_tmp_101895; \n          int v_index_101896 = v__101837[(v_i_101834 + (512 * v_MWidthC_1 * v_wg_id_101832) + (v_MWidthC_1 * v_l_id_101833))]; \n          if (v_index_101896 < 0) {\n            v__101847_0 = v__101845; \n          } else {\n            if (v_index_101896 >= v_VLength_3) {\n              v__101847_0 = v__101845; \n            } else {\n              v__101847_0 = v__101839[v_index_101896]; \n            }\n          }\n          v__101849[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_101832) + (-1 * v_i_101834) + (v_MWidthC_1 * v_l_id_101833))] = mult(v__101847_0, v__101838[(v_i_101834 + (512 * v_MWidthC_1 * v_wg_id_101832) + (v_MWidthC_1 * v_l_id_101833))]); \n        }\n        /* end map_seq */\n        float v_tmp_101897 = 0.0f; \n        v__101850 = v_tmp_101897; \n        /* reduce_seq */\n        for (int v_i_101835 = 0; v_i_101835 < v_MWidthC_1; v_i_101835 = (1 + v_i_101835)) {\n          v__101850 = add(v__101850, v__101849[(v_i_101835 + (512 * v_MWidthC_1 * v_wg_id_101832) + (v_MWidthC_1 * v_l_id_101833))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101836 = 0; \n          v__101855[(v_l_id_101833 + (512 * v_wg_id_101832))] = doubleMultiplyAdd(v__101850, v__101841, v__101840[(v_l_id_101833 + (512 * v_wg_id_101832))], v__101842); \n        }\n        /* end map_seq */\n        v_l_id_101833 = atomic_inc(&(v_work_idx_8673)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101837",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101838",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}