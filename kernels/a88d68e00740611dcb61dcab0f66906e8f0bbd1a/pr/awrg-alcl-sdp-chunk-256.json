{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100171, const global float* restrict v__100172, const global float* restrict v__100173, const global float* restrict v__100174, float v__100175, float v__100176, global float* v__100190, global float* v__100184, global int* v__100178, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100180; \n  float v__100185; \n  /* Private Memory */\n  float v__100182_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8519 = v__100178; \n    local int v_w_id_100166; \n    if (get_local_id(0) == 0) {\n      v_w_id_100166 = atomic_inc(v_work_idx_8519); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100166 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8517; \n        v_work_idx_8517 = 0; \n        int v_l_id_100167 = atomic_inc(&(v_work_idx_8517)); \n        while((v_l_id_100167 < 256)){\n          /* map_seq */\n          for (int v_i_100168 = 0; v_i_100168 < v_MWidthC_1; v_i_100168 = (1 + v_i_100168)) {\n            float v_tmp_100229 = 0.0f; \n            v__100180 = v_tmp_100229; \n            int v_index_100230 = v__100171[(v_i_100168 + (256 * v_MWidthC_1 * v_w_id_100166) + (v_MWidthC_1 * v_l_id_100167))]; \n            if (v_index_100230 < 0) {\n              v__100182_0 = v__100180; \n            } else {\n              if (v_index_100230 >= v_VLength_3) {\n                v__100182_0 = v__100180; \n              } else {\n                v__100182_0 = v__100173[v_index_100230]; \n              }\n            }\n            v__100184[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_100166) + (-1 * v_i_100168) + (v_MWidthC_1 * v_l_id_100167))] = mult(v__100182_0, v__100172[(v_i_100168 + (256 * v_MWidthC_1 * v_w_id_100166) + (v_MWidthC_1 * v_l_id_100167))]); \n          }\n          /* end map_seq */\n          float v_tmp_100231 = 0.0f; \n          v__100185 = v_tmp_100231; \n          /* reduce_seq */\n          for (int v_i_100169 = 0; v_i_100169 < v_MWidthC_1; v_i_100169 = (1 + v_i_100169)) {\n            v__100185 = add(v__100185, v__100184[(v_i_100169 + (256 * v_MWidthC_1 * v_w_id_100166) + (v_MWidthC_1 * v_l_id_100167))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100170 = 0; \n            v__100190[(v_l_id_100167 + (256 * v_w_id_100166))] = doubleMultiplyAdd(v__100185, v__100175, v__100174[(v_l_id_100167 + (256 * v_w_id_100166))], v__100176); \n          }\n          /* end map_seq */\n          v_l_id_100167 = atomic_inc(&(v_work_idx_8517)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100166 = atomic_inc(v_work_idx_8519); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100171",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100172",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100173",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100174",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100175",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100176",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100178",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}