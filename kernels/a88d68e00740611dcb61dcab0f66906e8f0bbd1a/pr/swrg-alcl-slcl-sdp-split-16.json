{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85398, const global float* restrict v__85399, const global float* restrict v__85400, const global float* restrict v__85401, float v__85402, float v__85403, global float* v__85420, global float* v__85410, local float* v__85415, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85406; \n  float v__85411; \n  float v__80917; \n  /* Private Memory */\n  float v__85408_0;\n  \n  for (int v_wg_id_85390 = get_group_id(0); v_wg_id_85390 < v_MHeight_2; v_wg_id_85390 = (v_wg_id_85390 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7135; \n      v_work_idx_7135 = 0; \n      int v_l_id_85391 = atomic_inc(&(v_work_idx_7135)); \n      while((v_l_id_85391 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85392 = 0; v_i_85392 < 16; v_i_85392 = (1 + v_i_85392)) {\n          float v_tmp_85477 = 0.0f; \n          v__85406 = v_tmp_85477; \n          int v_index_85478 = v__85398[(v_l_id_85391 + (16 * v_MWidthC_1 * v_wg_id_85390) + (v_MWidthC_1 * v_i_85392))]; \n          if (v_index_85478 < 0) {\n            v__85408_0 = v__85406; \n          } else {\n            if (v_index_85478 >= v_VLength_3) {\n              v__85408_0 = v__85406; \n            } else {\n              v__85408_0 = v__85400[v_index_85478]; \n            }\n          }\n          v__85410[(15 + (16 * v_MWidthC_1 * v_wg_id_85390) + (-1 * v_i_85392) + (16 * v_l_id_85391))] = mult(v__85408_0, v__85399[(v_l_id_85391 + (16 * v_MWidthC_1 * v_wg_id_85390) + (v_MWidthC_1 * v_i_85392))]); \n        }\n        /* end map_seq */\n        float v_tmp_85479 = 0.0f; \n        v__85411 = v_tmp_85479; \n        /* reduce_seq */\n        for (int v_i_85393 = 0; v_i_85393 < 16; v_i_85393 = (1 + v_i_85393)) {\n          v__85411 = add(v__85411, v__85410[(v_i_85393 + (16 * v_MWidthC_1 * v_wg_id_85390) + (16 * v_l_id_85391))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85394 = 0; \n          v__85415[v_l_id_85391] = id(v__85411); \n        }\n        /* end map_seq */\n        v_l_id_85391 = atomic_inc(&(v_work_idx_7135)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85395 = get_local_id(0); \n      float v_tmp_85482 = 0.0f; \n      v__80917 = v_tmp_85482; \n      /* reduce_seq */\n      for (int v_i_85396 = 0; v_i_85396 < v_MWidthC_1; v_i_85396 = (1 + v_i_85396)) {\n        v__80917 = add(v__80917, v__85415[(v_i_85396 + (v_MWidthC_1 * v_l_id_85395))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85397 = 0; \n        v__85420[v_wg_id_85390] = doubleMultiplyAdd(v__80917, v__85402, v__85401[v_wg_id_85390], v__85403); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85398",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85399",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85400",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85402",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85403",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85410",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85415",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}