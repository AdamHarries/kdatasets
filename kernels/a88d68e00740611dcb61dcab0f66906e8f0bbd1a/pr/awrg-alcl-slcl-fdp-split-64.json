{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93825, const global float* restrict v__93826, const global float* restrict v__93827, const global float* restrict v__93828, float v__93829, float v__93830, global float* v__93848, global int* v__93832, local float* v__93843, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93834; \n  float v__93836; \n  float v__80917; \n  /* Private Memory */\n  float v__93838_0;\n  \n  float v__93840_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7930 = v__93832; \n    local int v_w_id_93818; \n    if (get_local_id(0) == 0) {\n      v_w_id_93818 = atomic_inc(v_work_idx_7930); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93818 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7928; \n        v_work_idx_7928 = 0; \n        int v_l_id_93819 = atomic_inc(&(v_work_idx_7928)); \n        while((v_l_id_93819 < v_MWidthC_1)){\n          float v_tmp_93903 = 0.0f; \n          v__93834 = v_tmp_93903; \n          /* reduce_seq */\n          for (int v_i_93820 = 0; v_i_93820 < 64; v_i_93820 = (1 + v_i_93820)) {\n            float v_tmp_93904 = 0.0f; \n            v__93836 = v_tmp_93904; \n            int v_index_93905 = v__93825[(v_l_id_93819 + (64 * v_MWidthC_1 * v_w_id_93818) + (v_MWidthC_1 * v_i_93820))]; \n            if (v_index_93905 < 0) {\n              v__93838_0 = v__93836; \n            } else {\n              if (v_index_93905 >= v_VLength_3) {\n                v__93838_0 = v__93836; \n              } else {\n                v__93838_0 = v__93827[v_index_93905]; \n              }\n            }\n            v__93840_0 = mult(v__93838_0, v__93826[(v_l_id_93819 + (64 * v_MWidthC_1 * v_w_id_93818) + (v_MWidthC_1 * v_i_93820))]); \n            v__93834 = add(v__93840_0, v__93834); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93821 = 0; \n            v__93843[v_l_id_93819] = id(v__93834); \n          }\n          /* end map_seq */\n          v_l_id_93819 = atomic_inc(&(v_work_idx_7928)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93822 = get_local_id(0); \n        float v_tmp_93908 = 0.0f; \n        v__80917 = v_tmp_93908; \n        /* reduce_seq */\n        for (int v_i_93823 = 0; v_i_93823 < v_MWidthC_1; v_i_93823 = (1 + v_i_93823)) {\n          v__80917 = add(v__80917, v__93843[(v_i_93823 + (v_MWidthC_1 * v_l_id_93822))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93824 = 0; \n          v__93848[v_w_id_93818] = doubleMultiplyAdd(v__80917, v__93829, v__93828[v_w_id_93818], v__93830); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93818 = atomic_inc(v_work_idx_7930); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93825",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93826",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93827",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93829",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93830",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93832",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93848",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93843",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}