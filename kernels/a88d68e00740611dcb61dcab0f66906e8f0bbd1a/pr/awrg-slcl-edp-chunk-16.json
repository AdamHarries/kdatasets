{
  "name" : "awrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86131, const global float* restrict v__86132, const global float* restrict v__86133, const global float* restrict v__86134, float v__86135, float v__86136, global float* v__86152, global int* v__86138, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86139; \n  float v__86142; \n  /* Private Memory */\n  float v__86144_0;\n  \n  float v__86146_0;\n  \n  int v__86150_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7204 = v__86138; \n    local int v_w_id_86127; \n    if (get_local_id(0) == 0) {\n      v_w_id_86127 = atomic_inc(v_work_idx_7204); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86127 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_86128 = get_local_id(0); v_l_id_86128 < 16; v_l_id_86128 = (v_l_id_86128 + get_local_size(0))) {\n        float v_tmp_86199 = 0.0f; \n        v__86139 = v_tmp_86199; \n        /* reduce_while_seq */\n        for (int v_i_86129 = 0; v_i_86129 < v_MWidthC_1; v_i_86129 = (1 + v_i_86129)) {\n          v__86150_0 = check(v__86139, v__86131[(v_i_86129 + (16 * v_MWidthC_1 * v_w_id_86127) + (v_MWidthC_1 * v_l_id_86128))]); \n          if (v__86150_0) {\n          } else {\n            break;\n          }\n          float v_tmp_86200 = 0.0f; \n          v__86142 = v_tmp_86200; \n          int v_index_86201 = v__86131[(v_i_86129 + (16 * v_MWidthC_1 * v_w_id_86127) + (v_MWidthC_1 * v_l_id_86128))]; \n          if (v_index_86201 < 0) {\n            v__86144_0 = v__86142; \n          } else {\n            if (v_index_86201 >= v_VLength_3) {\n              v__86144_0 = v__86142; \n            } else {\n              v__86144_0 = v__86133[v_index_86201]; \n            }\n          }\n          v__86146_0 = mult(v__86144_0, v__86132[(v_i_86129 + (16 * v_MWidthC_1 * v_w_id_86127) + (v_MWidthC_1 * v_l_id_86128))]); \n          v__86139 = add(v__86146_0, v__86139); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86130 = 0; \n          v__86152[(v_l_id_86128 + (16 * v_w_id_86127))] = doubleMultiplyAdd(v__86139, v__86135, v__86134[(v_l_id_86128 + (16 * v_w_id_86127))], v__86136); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_86127 = atomic_inc(v_work_idx_7204); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86131",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86132",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86133",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86135",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86136",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86138",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}