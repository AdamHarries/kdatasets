{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94118, const global float* restrict v__94119, const global float* restrict v__94120, const global float* restrict v__94121, float v__94122, float v__94123, global float* v__94141, global int* v__94125, local float* v__94136, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94127; \n  float v__94129; \n  float v__80917; \n  /* Private Memory */\n  float v__94131_0;\n  \n  float v__94133_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7963 = v__94125; \n    local int v_w_id_94111; \n    if (get_local_id(0) == 0) {\n      v_w_id_94111 = atomic_inc(v_work_idx_7963); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94111 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7961; \n        v_work_idx_7961 = 0; \n        int v_l_id_94112 = atomic_inc(&(v_work_idx_7961)); \n        while((v_l_id_94112 < v_MWidthC_1)){\n          float v_tmp_94192 = 0.0f; \n          v__94127 = v_tmp_94192; \n          /* reduce_seq */\n          for (int v_i_94113 = 0; v_i_94113 < 64; v_i_94113 = (1 + v_i_94113)) {\n            float v_tmp_94193 = 0.0f; \n            v__94129 = v_tmp_94193; \n            int v_index_94194 = v__94118[(v_l_id_94112 + (64 * v_MWidthC_1 * v_w_id_94111) + (v_MWidthC_1 * v_i_94113))]; \n            if (v_index_94194 < 0) {\n              v__94131_0 = v__94129; \n            } else {\n              if (v_index_94194 >= v_VLength_3) {\n                v__94131_0 = v__94129; \n              } else {\n                v__94131_0 = v__94120[v_index_94194]; \n              }\n            }\n            v__94133_0 = mult(v__94131_0, v__94119[(v_l_id_94112 + (64 * v_MWidthC_1 * v_w_id_94111) + (v_MWidthC_1 * v_i_94113))]); \n            v__94127 = add(v__94133_0, v__94127); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94114 = 0; \n            v__94136[v_l_id_94112] = id(v__94127); \n          }\n          /* end map_seq */\n          v_l_id_94112 = atomic_inc(&(v_work_idx_7961)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7956; \n        v_work_idx_7956 = 0; \n        int v_l_id_94115 = atomic_inc(&(v_work_idx_7956)); \n        while((v_l_id_94115 < 1)){\n          float v_tmp_94197 = 0.0f; \n          v__80917 = v_tmp_94197; \n          /* reduce_seq */\n          for (int v_i_94116 = 0; v_i_94116 < v_MWidthC_1; v_i_94116 = (1 + v_i_94116)) {\n            v__80917 = add(v__80917, v__94136[(v_i_94116 + (v_MWidthC_1 * v_l_id_94115))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94117 = 0; \n            v__94141[v_w_id_94111] = doubleMultiplyAdd(v__80917, v__94122, v__94121[v_w_id_94111], v__94123); \n          }\n          /* end map_seq */\n          v_l_id_94115 = atomic_inc(&(v_work_idx_7956)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94111 = atomic_inc(v_work_idx_7963); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94118",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94119",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94120",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94121",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94122",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94123",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94125",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94141",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94136",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}