{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82554, const global float* restrict v__82555, const global float* restrict v__82556, const global float* restrict v__82557, float v__82558, float v__82559, global float* v__82578, local float* v__82573, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82562; \n  float v__82564; \n  float v__80917; \n  /* Private Memory */\n  float v__82566_0;\n  \n  float v__82568_0;\n  \n  int v__82572_0;\n  \n  for (int v_wg_id_82547 = get_group_id(0); v_wg_id_82547 < v_MHeight_2; v_wg_id_82547 = (v_wg_id_82547 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6872; \n      v_work_idx_6872 = 0; \n      int v_l_id_82548 = atomic_inc(&(v_work_idx_6872)); \n      while((v_l_id_82548 < v_MWidthC_1)){\n        float v_tmp_82634 = 0.0f; \n        v__82562 = v_tmp_82634; \n        /* reduce_while_seq */\n        for (int v_i_82549 = 0; v_i_82549 < 8; v_i_82549 = (1 + v_i_82549)) {\n          v__82572_0 = check(v__82562, v__82554[(v_l_id_82548 + (8 * v_MWidthC_1 * v_wg_id_82547) + (v_MWidthC_1 * v_i_82549))]); \n          if (v__82572_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82635 = 0.0f; \n          v__82564 = v_tmp_82635; \n          int v_index_82636 = v__82554[(v_l_id_82548 + (8 * v_MWidthC_1 * v_wg_id_82547) + (v_MWidthC_1 * v_i_82549))]; \n          if (v_index_82636 < 0) {\n            v__82566_0 = v__82564; \n          } else {\n            if (v_index_82636 >= v_VLength_3) {\n              v__82566_0 = v__82564; \n            } else {\n              v__82566_0 = v__82556[v_index_82636]; \n            }\n          }\n          v__82568_0 = mult(v__82566_0, v__82555[(v_l_id_82548 + (8 * v_MWidthC_1 * v_wg_id_82547) + (v_MWidthC_1 * v_i_82549))]); \n          v__82562 = add(v__82568_0, v__82562); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82550 = 0; \n          v__82573[v_l_id_82548] = id(v__82562); \n        }\n        /* end map_seq */\n        v_l_id_82548 = atomic_inc(&(v_work_idx_6872)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6867; \n      v_work_idx_6867 = 0; \n      int v_l_id_82551 = atomic_inc(&(v_work_idx_6867)); \n      while((v_l_id_82551 < 1)){\n        float v_tmp_82639 = 0.0f; \n        v__80917 = v_tmp_82639; \n        /* reduce_seq */\n        for (int v_i_82552 = 0; v_i_82552 < v_MWidthC_1; v_i_82552 = (1 + v_i_82552)) {\n          v__80917 = add(v__80917, v__82573[(v_i_82552 + (v_MWidthC_1 * v_l_id_82551))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82553 = 0; \n          v__82578[v_wg_id_82547] = doubleMultiplyAdd(v__80917, v__82558, v__82557[v_wg_id_82547], v__82559); \n        }\n        /* end map_seq */\n        v_l_id_82551 = atomic_inc(&(v_work_idx_6867)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82554",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82555",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82556",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82557",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82558",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82559",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82578",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82573",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}