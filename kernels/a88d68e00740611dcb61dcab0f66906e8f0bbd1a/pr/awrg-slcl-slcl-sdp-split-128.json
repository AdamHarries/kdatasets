{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96212, const global float* restrict v__96213, const global float* restrict v__96214, const global float* restrict v__96215, float v__96216, float v__96217, global float* v__96235, global float* v__96225, global int* v__96219, local float* v__96230, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96221; \n  float v__96226; \n  float v__80917; \n  /* Private Memory */\n  float v__96223_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8150 = v__96219; \n    local int v_w_id_96204; \n    if (get_local_id(0) == 0) {\n      v_w_id_96204 = atomic_inc(v_work_idx_8150); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96204 < v_MHeight_2)){\n      for (int v_l_id_96205 = get_local_id(0); v_l_id_96205 < v_MWidthC_1; v_l_id_96205 = (v_l_id_96205 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_96206 = 0; v_i_96206 < 128; v_i_96206 = (1 + v_i_96206)) {\n          float v_tmp_96298 = 0.0f; \n          v__96221 = v_tmp_96298; \n          int v_index_96299 = v__96212[(v_l_id_96205 + (128 * v_MWidthC_1 * v_w_id_96204) + (v_MWidthC_1 * v_i_96206))]; \n          if (v_index_96299 < 0) {\n            v__96223_0 = v__96221; \n          } else {\n            if (v_index_96299 >= v_VLength_3) {\n              v__96223_0 = v__96221; \n            } else {\n              v__96223_0 = v__96214[v_index_96299]; \n            }\n          }\n          v__96225[(127 + (128 * v_MWidthC_1 * v_w_id_96204) + (-1 * v_i_96206) + (128 * v_l_id_96205))] = mult(v__96223_0, v__96213[(v_l_id_96205 + (128 * v_MWidthC_1 * v_w_id_96204) + (v_MWidthC_1 * v_i_96206))]); \n        }\n        /* end map_seq */\n        float v_tmp_96300 = 0.0f; \n        v__96226 = v_tmp_96300; \n        /* reduce_seq */\n        for (int v_i_96207 = 0; v_i_96207 < 128; v_i_96207 = (1 + v_i_96207)) {\n          v__96226 = add(v__96226, v__96225[(v_i_96207 + (128 * v_MWidthC_1 * v_w_id_96204) + (128 * v_l_id_96205))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96208 = 0; \n          v__96230[v_l_id_96205] = id(v__96226); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96209 = get_local_id(0); \n        float v_tmp_96303 = 0.0f; \n        v__80917 = v_tmp_96303; \n        /* reduce_seq */\n        for (int v_i_96210 = 0; v_i_96210 < v_MWidthC_1; v_i_96210 = (1 + v_i_96210)) {\n          v__80917 = add(v__80917, v__96230[(v_i_96210 + (v_MWidthC_1 * v_l_id_96209))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96211 = 0; \n          v__96235[v_w_id_96204] = doubleMultiplyAdd(v__80917, v__96216, v__96215[v_w_id_96204], v__96217); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96204 = atomic_inc(v_work_idx_8150); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96212",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96213",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96225",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96219",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96230",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}