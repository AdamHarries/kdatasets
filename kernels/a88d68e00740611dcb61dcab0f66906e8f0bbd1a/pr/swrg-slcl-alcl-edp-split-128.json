{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__95068, const global float* restrict v__95069, const global float* restrict v__95070, const global float* restrict v__95071, float v__95072, float v__95073, global float* v__95092, local float* v__95087, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95076; \n  float v__95078; \n  float v__80917; \n  /* Private Memory */\n  float v__95080_0;\n  \n  float v__95082_0;\n  \n  int v__95086_0;\n  \n  for (int v_wg_id_95061 = get_group_id(0); v_wg_id_95061 < v_MHeight_2; v_wg_id_95061 = (v_wg_id_95061 + get_num_groups(0))) {\n    for (int v_l_id_95062 = get_local_id(0); v_l_id_95062 < v_MWidthC_1; v_l_id_95062 = (v_l_id_95062 + get_local_size(0))) {\n      float v_tmp_95156 = 0.0f; \n      v__95076 = v_tmp_95156; \n      /* reduce_while_seq */\n      for (int v_i_95063 = 0; v_i_95063 < 128; v_i_95063 = (1 + v_i_95063)) {\n        v__95086_0 = check(v__95076, v__95068[(v_l_id_95062 + (128 * v_MWidthC_1 * v_wg_id_95061) + (v_MWidthC_1 * v_i_95063))]); \n        if (v__95086_0) {\n        } else {\n          break;\n        }\n        float v_tmp_95157 = 0.0f; \n        v__95078 = v_tmp_95157; \n        int v_index_95158 = v__95068[(v_l_id_95062 + (128 * v_MWidthC_1 * v_wg_id_95061) + (v_MWidthC_1 * v_i_95063))]; \n        if (v_index_95158 < 0) {\n          v__95080_0 = v__95078; \n        } else {\n          if (v_index_95158 >= v_VLength_3) {\n            v__95080_0 = v__95078; \n          } else {\n            v__95080_0 = v__95070[v_index_95158]; \n          }\n        }\n        v__95082_0 = mult(v__95080_0, v__95069[(v_l_id_95062 + (128 * v_MWidthC_1 * v_wg_id_95061) + (v_MWidthC_1 * v_i_95063))]); \n        v__95076 = add(v__95082_0, v__95076); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_95064 = 0; \n        v__95087[v_l_id_95062] = id(v__95076); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8038; \n      v_work_idx_8038 = 0; \n      int v_l_id_95065 = atomic_inc(&(v_work_idx_8038)); \n      while((v_l_id_95065 < 1)){\n        float v_tmp_95161 = 0.0f; \n        v__80917 = v_tmp_95161; \n        /* reduce_seq */\n        for (int v_i_95066 = 0; v_i_95066 < v_MWidthC_1; v_i_95066 = (1 + v_i_95066)) {\n          v__80917 = add(v__80917, v__95087[(v_i_95066 + (v_MWidthC_1 * v_l_id_95065))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95067 = 0; \n          v__95092[v_wg_id_95061] = doubleMultiplyAdd(v__80917, v__95072, v__95071[v_wg_id_95061], v__95073); \n        }\n        /* end map_seq */\n        v_l_id_95065 = atomic_inc(&(v_work_idx_8038)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95068",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95069",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95070",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95092",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95087",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}