{
  "name" : "swrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84650, const global float* restrict v__84651, const global float* restrict v__84652, const global float* restrict v__84653, float v__84654, float v__84655, global float* v__84672, local float* v__84667, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84658; \n  float v__84660; \n  float v__80917; \n  /* Private Memory */\n  float v__84662_0;\n  \n  float v__84664_0;\n  \n  for (int v_wg_id_84643 = get_group_id(0); v_wg_id_84643 < v_MHeight_2; v_wg_id_84643 = (v_wg_id_84643 + get_num_groups(0))) {\n    for (int v_l_id_84644 = get_local_id(0); v_l_id_84644 < v_MWidthC_1; v_l_id_84644 = (v_l_id_84644 + get_local_size(0))) {\n      float v_tmp_84737 = 0.0f; \n      v__84658 = v_tmp_84737; \n      /* reduce_seq */\n      for (int v_i_84645 = 0; v_i_84645 < 16; v_i_84645 = (1 + v_i_84645)) {\n        float v_tmp_84738 = 0.0f; \n        v__84660 = v_tmp_84738; \n        int v_index_84739 = v__84650[(v_l_id_84644 + (16 * v_MWidthC_1 * v_wg_id_84643) + (v_MWidthC_1 * v_i_84645))]; \n        if (v_index_84739 < 0) {\n          v__84662_0 = v__84660; \n        } else {\n          if (v_index_84739 >= v_VLength_3) {\n            v__84662_0 = v__84660; \n          } else {\n            v__84662_0 = v__84652[v_index_84739]; \n          }\n        }\n        v__84664_0 = mult(v__84662_0, v__84651[(v_l_id_84644 + (16 * v_MWidthC_1 * v_wg_id_84643) + (v_MWidthC_1 * v_i_84645))]); \n        v__84658 = add(v__84664_0, v__84658); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84646 = 0; \n        v__84667[v_l_id_84644] = id(v__84658); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_84647 = get_local_id(0); \n      float v_tmp_84742 = 0.0f; \n      v__80917 = v_tmp_84742; \n      /* reduce_seq */\n      for (int v_i_84648 = 0; v_i_84648 < v_MWidthC_1; v_i_84648 = (1 + v_i_84648)) {\n        v__80917 = add(v__80917, v__84667[(v_i_84648 + (v_MWidthC_1 * v_l_id_84647))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84649 = 0; \n        v__84672[v_wg_id_84643] = doubleMultiplyAdd(v__80917, v__84654, v__84653[v_wg_id_84643], v__84655); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__84650",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84651",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84652",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84654",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84655",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__84672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84667",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}