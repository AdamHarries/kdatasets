{
  "name" : "swrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101204, const global float* restrict v__101205, const global float* restrict v__101206, const global float* restrict v__101207, float v__101208, float v__101209, global float* v__101226, global float* v__101216, local float* v__101221, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101212; \n  float v__101217; \n  float v__80917; \n  /* Private Memory */\n  float v__101214_0;\n  \n  for (int v_wg_id_101196 = get_group_id(0); v_wg_id_101196 < v_MHeight_2; v_wg_id_101196 = (v_wg_id_101196 + get_num_groups(0))) {\n    for (int v_l_id_101197 = get_local_id(0); v_l_id_101197 < v_MWidthC_1; v_l_id_101197 = (v_l_id_101197 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_101198 = 0; v_i_101198 < 512; v_i_101198 = (1 + v_i_101198)) {\n        float v_tmp_101291 = 0.0f; \n        v__101212 = v_tmp_101291; \n        int v_index_101292 = v__101204[(v_l_id_101197 + (512 * v_MWidthC_1 * v_wg_id_101196) + (v_MWidthC_1 * v_i_101198))]; \n        if (v_index_101292 < 0) {\n          v__101214_0 = v__101212; \n        } else {\n          if (v_index_101292 >= v_VLength_3) {\n            v__101214_0 = v__101212; \n          } else {\n            v__101214_0 = v__101206[v_index_101292]; \n          }\n        }\n        v__101216[(511 + (512 * v_MWidthC_1 * v_wg_id_101196) + (-1 * v_i_101198) + (512 * v_l_id_101197))] = mult(v__101214_0, v__101205[(v_l_id_101197 + (512 * v_MWidthC_1 * v_wg_id_101196) + (v_MWidthC_1 * v_i_101198))]); \n      }\n      /* end map_seq */\n      float v_tmp_101293 = 0.0f; \n      v__101217 = v_tmp_101293; \n      /* reduce_seq */\n      for (int v_i_101199 = 0; v_i_101199 < 512; v_i_101199 = (1 + v_i_101199)) {\n        v__101217 = add(v__101217, v__101216[(v_i_101199 + (512 * v_MWidthC_1 * v_wg_id_101196) + (512 * v_l_id_101197))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101200 = 0; \n        v__101221[v_l_id_101197] = id(v__101217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101201 = get_local_id(0); \n      float v_tmp_101296 = 0.0f; \n      v__80917 = v_tmp_101296; \n      /* reduce_seq */\n      for (int v_i_101202 = 0; v_i_101202 < v_MWidthC_1; v_i_101202 = (1 + v_i_101202)) {\n        v__80917 = add(v__80917, v__101221[(v_i_101202 + (v_MWidthC_1 * v_l_id_101201))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101203 = 0; \n        v__101226[v_wg_id_101196] = doubleMultiplyAdd(v__80917, v__101208, v__101207[v_wg_id_101196], v__101209); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101204",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101205",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101206",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101207",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101208",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101209",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101216",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101221",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}