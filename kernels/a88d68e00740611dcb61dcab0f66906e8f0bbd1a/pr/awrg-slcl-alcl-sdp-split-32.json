{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89869, const global float* restrict v__89870, const global float* restrict v__89871, const global float* restrict v__89872, float v__89873, float v__89874, global float* v__89892, global float* v__89882, global int* v__89876, local float* v__89887, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89878; \n  float v__89883; \n  float v__80917; \n  /* Private Memory */\n  float v__89880_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7555 = v__89876; \n    local int v_w_id_89861; \n    if (get_local_id(0) == 0) {\n      v_w_id_89861 = atomic_inc(v_work_idx_7555); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89861 < v_MHeight_2)){\n      for (int v_l_id_89862 = get_local_id(0); v_l_id_89862 < v_MWidthC_1; v_l_id_89862 = (v_l_id_89862 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_89863 = 0; v_i_89863 < 32; v_i_89863 = (1 + v_i_89863)) {\n          float v_tmp_89951 = 0.0f; \n          v__89878 = v_tmp_89951; \n          int v_index_89952 = v__89869[(v_l_id_89862 + (32 * v_MWidthC_1 * v_w_id_89861) + (v_MWidthC_1 * v_i_89863))]; \n          if (v_index_89952 < 0) {\n            v__89880_0 = v__89878; \n          } else {\n            if (v_index_89952 >= v_VLength_3) {\n              v__89880_0 = v__89878; \n            } else {\n              v__89880_0 = v__89871[v_index_89952]; \n            }\n          }\n          v__89882[(31 + (32 * v_MWidthC_1 * v_w_id_89861) + (-1 * v_i_89863) + (32 * v_l_id_89862))] = mult(v__89880_0, v__89870[(v_l_id_89862 + (32 * v_MWidthC_1 * v_w_id_89861) + (v_MWidthC_1 * v_i_89863))]); \n        }\n        /* end map_seq */\n        float v_tmp_89953 = 0.0f; \n        v__89883 = v_tmp_89953; \n        /* reduce_seq */\n        for (int v_i_89864 = 0; v_i_89864 < 32; v_i_89864 = (1 + v_i_89864)) {\n          v__89883 = add(v__89883, v__89882[(v_i_89864 + (32 * v_MWidthC_1 * v_w_id_89861) + (32 * v_l_id_89862))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89865 = 0; \n          v__89887[v_l_id_89862] = id(v__89883); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7548; \n        v_work_idx_7548 = 0; \n        int v_l_id_89866 = atomic_inc(&(v_work_idx_7548)); \n        while((v_l_id_89866 < 1)){\n          float v_tmp_89956 = 0.0f; \n          v__80917 = v_tmp_89956; \n          /* reduce_seq */\n          for (int v_i_89867 = 0; v_i_89867 < v_MWidthC_1; v_i_89867 = (1 + v_i_89867)) {\n            v__80917 = add(v__80917, v__89887[(v_i_89867 + (v_MWidthC_1 * v_l_id_89866))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89868 = 0; \n            v__89892[v_w_id_89861] = doubleMultiplyAdd(v__80917, v__89873, v__89872[v_w_id_89861], v__89874); \n          }\n          /* end map_seq */\n          v_l_id_89866 = atomic_inc(&(v_work_idx_7548)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89861 = atomic_inc(v_work_idx_7555); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89869",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89870",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89871",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89873",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89874",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89882",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89876",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89887",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}