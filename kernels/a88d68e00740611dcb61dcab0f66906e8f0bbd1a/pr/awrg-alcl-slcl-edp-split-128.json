{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97254, const global float* restrict v__97255, const global float* restrict v__97256, const global float* restrict v__97257, float v__97258, float v__97259, global float* v__97279, global int* v__97261, local float* v__97274, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97263; \n  float v__97265; \n  float v__80917; \n  /* Private Memory */\n  float v__97267_0;\n  \n  float v__97269_0;\n  \n  int v__97273_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8252 = v__97261; \n    local int v_w_id_97247; \n    if (get_local_id(0) == 0) {\n      v_w_id_97247 = atomic_inc(v_work_idx_8252); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97247 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8250; \n        v_work_idx_8250 = 0; \n        int v_l_id_97248 = atomic_inc(&(v_work_idx_8250)); \n        while((v_l_id_97248 < v_MWidthC_1)){\n          float v_tmp_97337 = 0.0f; \n          v__97263 = v_tmp_97337; \n          /* reduce_while_seq */\n          for (int v_i_97249 = 0; v_i_97249 < 128; v_i_97249 = (1 + v_i_97249)) {\n            v__97273_0 = check(v__97263, v__97254[(v_l_id_97248 + (128 * v_MWidthC_1 * v_w_id_97247) + (v_MWidthC_1 * v_i_97249))]); \n            if (v__97273_0) {\n            } else {\n              break;\n            }\n            float v_tmp_97338 = 0.0f; \n            v__97265 = v_tmp_97338; \n            int v_index_97339 = v__97254[(v_l_id_97248 + (128 * v_MWidthC_1 * v_w_id_97247) + (v_MWidthC_1 * v_i_97249))]; \n            if (v_index_97339 < 0) {\n              v__97267_0 = v__97265; \n            } else {\n              if (v_index_97339 >= v_VLength_3) {\n                v__97267_0 = v__97265; \n              } else {\n                v__97267_0 = v__97256[v_index_97339]; \n              }\n            }\n            v__97269_0 = mult(v__97267_0, v__97255[(v_l_id_97248 + (128 * v_MWidthC_1 * v_w_id_97247) + (v_MWidthC_1 * v_i_97249))]); \n            v__97263 = add(v__97269_0, v__97263); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97250 = 0; \n            v__97274[v_l_id_97248] = id(v__97263); \n          }\n          /* end map_seq */\n          v_l_id_97248 = atomic_inc(&(v_work_idx_8250)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_97251 = get_local_id(0); \n        float v_tmp_97342 = 0.0f; \n        v__80917 = v_tmp_97342; \n        /* reduce_seq */\n        for (int v_i_97252 = 0; v_i_97252 < v_MWidthC_1; v_i_97252 = (1 + v_i_97252)) {\n          v__80917 = add(v__80917, v__97274[(v_i_97252 + (v_MWidthC_1 * v_l_id_97251))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97253 = 0; \n          v__97279[v_w_id_97247] = doubleMultiplyAdd(v__80917, v__97258, v__97257[v_w_id_97247], v__97259); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97247 = atomic_inc(v_work_idx_8252); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97254",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97255",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97256",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97257",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97258",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97259",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97261",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97279",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97274",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}