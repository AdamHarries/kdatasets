{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91532, const global float* restrict v__91533, const global float* restrict v__91534, const global float* restrict v__91535, float v__91536, float v__91537, global float* v__91554, global float* v__91544, local float* v__91549, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91540; \n  float v__91545; \n  float v__80917; \n  /* Private Memory */\n  float v__91542_0;\n  \n  for (int v_wg_id_91524 = get_group_id(0); v_wg_id_91524 < v_MHeight_2; v_wg_id_91524 = (v_wg_id_91524 + get_num_groups(0))) {\n    for (int v_l_id_91525 = get_local_id(0); v_l_id_91525 < v_MWidthC_1; v_l_id_91525 = (v_l_id_91525 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_91526 = 0; v_i_91526 < 64; v_i_91526 = (1 + v_i_91526)) {\n        float v_tmp_91615 = 0.0f; \n        v__91540 = v_tmp_91615; \n        int v_index_91616 = v__91532[(v_l_id_91525 + (64 * v_MWidthC_1 * v_wg_id_91524) + (v_MWidthC_1 * v_i_91526))]; \n        if (v_index_91616 < 0) {\n          v__91542_0 = v__91540; \n        } else {\n          if (v_index_91616 >= v_VLength_3) {\n            v__91542_0 = v__91540; \n          } else {\n            v__91542_0 = v__91534[v_index_91616]; \n          }\n        }\n        v__91544[(63 + (64 * v_MWidthC_1 * v_wg_id_91524) + (-1 * v_i_91526) + (64 * v_l_id_91525))] = mult(v__91542_0, v__91533[(v_l_id_91525 + (64 * v_MWidthC_1 * v_wg_id_91524) + (v_MWidthC_1 * v_i_91526))]); \n      }\n      /* end map_seq */\n      float v_tmp_91617 = 0.0f; \n      v__91545 = v_tmp_91617; \n      /* reduce_seq */\n      for (int v_i_91527 = 0; v_i_91527 < 64; v_i_91527 = (1 + v_i_91527)) {\n        v__91545 = add(v__91545, v__91544[(v_i_91527 + (64 * v_MWidthC_1 * v_wg_id_91524) + (64 * v_l_id_91525))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91528 = 0; \n        v__91549[v_l_id_91525] = id(v__91545); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7707; \n      v_work_idx_7707 = 0; \n      int v_l_id_91529 = atomic_inc(&(v_work_idx_7707)); \n      while((v_l_id_91529 < 1)){\n        float v_tmp_91620 = 0.0f; \n        v__80917 = v_tmp_91620; \n        /* reduce_seq */\n        for (int v_i_91530 = 0; v_i_91530 < v_MWidthC_1; v_i_91530 = (1 + v_i_91530)) {\n          v__80917 = add(v__80917, v__91549[(v_i_91530 + (v_MWidthC_1 * v_l_id_91529))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91531 = 0; \n          v__91554[v_wg_id_91524] = doubleMultiplyAdd(v__80917, v__91536, v__91535[v_wg_id_91524], v__91537); \n        }\n        /* end map_seq */\n        v_l_id_91529 = atomic_inc(&(v_work_idx_7707)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__91532",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91533",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91534",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91535",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91536",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91537",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91544",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__91554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91549",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}