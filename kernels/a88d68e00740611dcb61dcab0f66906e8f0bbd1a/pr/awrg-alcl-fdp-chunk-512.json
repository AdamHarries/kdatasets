{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103574, const global float* restrict v__103575, const global float* restrict v__103576, const global float* restrict v__103577, float v__103578, float v__103579, global float* v__103593, global int* v__103581, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103583; \n  float v__103585; \n  /* Private Memory */\n  float v__103587_0;\n  \n  float v__103589_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8838 = v__103581; \n    local int v_w_id_103570; \n    if (get_local_id(0) == 0) {\n      v_w_id_103570 = atomic_inc(v_work_idx_8838); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103570 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8836; \n        v_work_idx_8836 = 0; \n        int v_l_id_103571 = atomic_inc(&(v_work_idx_8836)); \n        while((v_l_id_103571 < 512)){\n          float v_tmp_103630 = 0.0f; \n          v__103583 = v_tmp_103630; \n          /* reduce_seq */\n          for (int v_i_103572 = 0; v_i_103572 < v_MWidthC_1; v_i_103572 = (1 + v_i_103572)) {\n            float v_tmp_103631 = 0.0f; \n            v__103585 = v_tmp_103631; \n            int v_index_103632 = v__103574[(v_i_103572 + (512 * v_MWidthC_1 * v_w_id_103570) + (v_MWidthC_1 * v_l_id_103571))]; \n            if (v_index_103632 < 0) {\n              v__103587_0 = v__103585; \n            } else {\n              if (v_index_103632 >= v_VLength_3) {\n                v__103587_0 = v__103585; \n              } else {\n                v__103587_0 = v__103576[v_index_103632]; \n              }\n            }\n            v__103589_0 = mult(v__103587_0, v__103575[(v_i_103572 + (512 * v_MWidthC_1 * v_w_id_103570) + (v_MWidthC_1 * v_l_id_103571))]); \n            v__103583 = add(v__103589_0, v__103583); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103573 = 0; \n            v__103593[(v_l_id_103571 + (512 * v_w_id_103570))] = doubleMultiplyAdd(v__103583, v__103578, v__103577[(v_l_id_103571 + (512 * v_w_id_103570))], v__103579); \n          }\n          /* end map_seq */\n          v_l_id_103571 = atomic_inc(&(v_work_idx_8836)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103570 = atomic_inc(v_work_idx_8838); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__103574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103575",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103576",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103577",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103578",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103579",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103581",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}