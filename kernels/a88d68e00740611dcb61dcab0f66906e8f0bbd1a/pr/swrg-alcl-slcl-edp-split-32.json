{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__88926, const global float* restrict v__88927, const global float* restrict v__88928, const global float* restrict v__88929, float v__88930, float v__88931, global float* v__88950, local float* v__88945, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88934; \n  float v__88936; \n  float v__80917; \n  /* Private Memory */\n  float v__88938_0;\n  \n  float v__88940_0;\n  \n  int v__88944_0;\n  \n  for (int v_wg_id_88919 = get_group_id(0); v_wg_id_88919 < v_MHeight_2; v_wg_id_88919 = (v_wg_id_88919 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7465; \n      v_work_idx_7465 = 0; \n      int v_l_id_88920 = atomic_inc(&(v_work_idx_7465)); \n      while((v_l_id_88920 < v_MWidthC_1)){\n        float v_tmp_89010 = 0.0f; \n        v__88934 = v_tmp_89010; \n        /* reduce_while_seq */\n        for (int v_i_88921 = 0; v_i_88921 < 32; v_i_88921 = (1 + v_i_88921)) {\n          v__88944_0 = check(v__88934, v__88926[(v_l_id_88920 + (32 * v_MWidthC_1 * v_wg_id_88919) + (v_MWidthC_1 * v_i_88921))]); \n          if (v__88944_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89011 = 0.0f; \n          v__88936 = v_tmp_89011; \n          int v_index_89012 = v__88926[(v_l_id_88920 + (32 * v_MWidthC_1 * v_wg_id_88919) + (v_MWidthC_1 * v_i_88921))]; \n          if (v_index_89012 < 0) {\n            v__88938_0 = v__88936; \n          } else {\n            if (v_index_89012 >= v_VLength_3) {\n              v__88938_0 = v__88936; \n            } else {\n              v__88938_0 = v__88928[v_index_89012]; \n            }\n          }\n          v__88940_0 = mult(v__88938_0, v__88927[(v_l_id_88920 + (32 * v_MWidthC_1 * v_wg_id_88919) + (v_MWidthC_1 * v_i_88921))]); \n          v__88934 = add(v__88940_0, v__88934); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88922 = 0; \n          v__88945[v_l_id_88920] = id(v__88934); \n        }\n        /* end map_seq */\n        v_l_id_88920 = atomic_inc(&(v_work_idx_7465)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_88923 = get_local_id(0); \n      float v_tmp_89015 = 0.0f; \n      v__80917 = v_tmp_89015; \n      /* reduce_seq */\n      for (int v_i_88924 = 0; v_i_88924 < v_MWidthC_1; v_i_88924 = (1 + v_i_88924)) {\n        v__80917 = add(v__80917, v__88945[(v_i_88924 + (v_MWidthC_1 * v_l_id_88923))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88925 = 0; \n        v__88950[v_wg_id_88919] = doubleMultiplyAdd(v__80917, v__88930, v__88929[v_wg_id_88919], v__88931); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88926",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88927",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88928",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88930",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88931",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88945",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}