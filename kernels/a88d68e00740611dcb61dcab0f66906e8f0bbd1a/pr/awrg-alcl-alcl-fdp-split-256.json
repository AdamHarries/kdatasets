{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100782, const global float* restrict v__100783, const global float* restrict v__100784, const global float* restrict v__100785, float v__100786, float v__100787, global float* v__100805, global int* v__100789, local float* v__100800, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100791; \n  float v__100793; \n  float v__80917; \n  /* Private Memory */\n  float v__100795_0;\n  \n  float v__100797_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8587 = v__100789; \n    local int v_w_id_100775; \n    if (get_local_id(0) == 0) {\n      v_w_id_100775 = atomic_inc(v_work_idx_8587); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100775 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8585; \n        v_work_idx_8585 = 0; \n        int v_l_id_100776 = atomic_inc(&(v_work_idx_8585)); \n        while((v_l_id_100776 < v_MWidthC_1)){\n          float v_tmp_100856 = 0.0f; \n          v__100791 = v_tmp_100856; \n          /* reduce_seq */\n          for (int v_i_100777 = 0; v_i_100777 < 256; v_i_100777 = (1 + v_i_100777)) {\n            float v_tmp_100857 = 0.0f; \n            v__100793 = v_tmp_100857; \n            int v_index_100858 = v__100782[(v_l_id_100776 + (256 * v_MWidthC_1 * v_w_id_100775) + (v_MWidthC_1 * v_i_100777))]; \n            if (v_index_100858 < 0) {\n              v__100795_0 = v__100793; \n            } else {\n              if (v_index_100858 >= v_VLength_3) {\n                v__100795_0 = v__100793; \n              } else {\n                v__100795_0 = v__100784[v_index_100858]; \n              }\n            }\n            v__100797_0 = mult(v__100795_0, v__100783[(v_l_id_100776 + (256 * v_MWidthC_1 * v_w_id_100775) + (v_MWidthC_1 * v_i_100777))]); \n            v__100791 = add(v__100797_0, v__100791); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100778 = 0; \n            v__100800[v_l_id_100776] = id(v__100791); \n          }\n          /* end map_seq */\n          v_l_id_100776 = atomic_inc(&(v_work_idx_8585)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8580; \n        v_work_idx_8580 = 0; \n        int v_l_id_100779 = atomic_inc(&(v_work_idx_8580)); \n        while((v_l_id_100779 < 1)){\n          float v_tmp_100861 = 0.0f; \n          v__80917 = v_tmp_100861; \n          /* reduce_seq */\n          for (int v_i_100780 = 0; v_i_100780 < v_MWidthC_1; v_i_100780 = (1 + v_i_100780)) {\n            v__80917 = add(v__80917, v__100800[(v_i_100780 + (v_MWidthC_1 * v_l_id_100779))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100781 = 0; \n            v__100805[v_w_id_100775] = doubleMultiplyAdd(v__80917, v__100786, v__100785[v_w_id_100775], v__100787); \n          }\n          /* end map_seq */\n          v_l_id_100779 = atomic_inc(&(v_work_idx_8580)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100775 = atomic_inc(v_work_idx_8587); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100782",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100783",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100784",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100785",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100786",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100787",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100789",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100800",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}