{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83306, const global float* restrict v__83307, const global float* restrict v__83308, const global float* restrict v__83309, float v__83310, float v__83311, global float* v__83329, global int* v__83313, local float* v__83324, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83315; \n  float v__83317; \n  float v__80917; \n  /* Private Memory */\n  float v__83319_0;\n  \n  float v__83321_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6941 = v__83313; \n    local int v_w_id_83299; \n    if (get_local_id(0) == 0) {\n      v_w_id_83299 = atomic_inc(v_work_idx_6941); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83299 < v_MHeight_2)){\n      for (int v_l_id_83300 = get_local_id(0); v_l_id_83300 < v_MWidthC_1; v_l_id_83300 = (v_l_id_83300 + get_local_size(0))) {\n        float v_tmp_83388 = 0.0f; \n        v__83315 = v_tmp_83388; \n        /* reduce_seq */\n        for (int v_i_83301 = 0; v_i_83301 < 8; v_i_83301 = (1 + v_i_83301)) {\n          float v_tmp_83389 = 0.0f; \n          v__83317 = v_tmp_83389; \n          int v_index_83390 = v__83306[(v_l_id_83300 + (8 * v_MWidthC_1 * v_w_id_83299) + (v_MWidthC_1 * v_i_83301))]; \n          if (v_index_83390 < 0) {\n            v__83319_0 = v__83317; \n          } else {\n            if (v_index_83390 >= v_VLength_3) {\n              v__83319_0 = v__83317; \n            } else {\n              v__83319_0 = v__83308[v_index_83390]; \n            }\n          }\n          v__83321_0 = mult(v__83319_0, v__83307[(v_l_id_83300 + (8 * v_MWidthC_1 * v_w_id_83299) + (v_MWidthC_1 * v_i_83301))]); \n          v__83315 = add(v__83321_0, v__83315); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83302 = 0; \n          v__83324[v_l_id_83300] = id(v__83315); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6935; \n        v_work_idx_6935 = 0; \n        int v_l_id_83303 = atomic_inc(&(v_work_idx_6935)); \n        while((v_l_id_83303 < 1)){\n          float v_tmp_83393 = 0.0f; \n          v__80917 = v_tmp_83393; \n          /* reduce_seq */\n          for (int v_i_83304 = 0; v_i_83304 < v_MWidthC_1; v_i_83304 = (1 + v_i_83304)) {\n            v__80917 = add(v__80917, v__83324[(v_i_83304 + (v_MWidthC_1 * v_l_id_83303))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83305 = 0; \n            v__83329[v_w_id_83299] = doubleMultiplyAdd(v__80917, v__83310, v__83309[v_w_id_83299], v__83311); \n          }\n          /* end map_seq */\n          v_l_id_83303 = atomic_inc(&(v_work_idx_6935)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83299 = atomic_inc(v_work_idx_6941); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83306",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83307",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83308",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83309",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83310",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83311",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83313",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83324",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}