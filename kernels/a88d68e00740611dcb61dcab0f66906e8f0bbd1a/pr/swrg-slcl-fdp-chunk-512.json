{
  "name" : "swrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101046, const global float* restrict v__101047, const global float* restrict v__101048, const global float* restrict v__101049, float v__101050, float v__101051, global float* v__101064, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101054; \n  float v__101056; \n  /* Private Memory */\n  float v__101058_0;\n  \n  float v__101060_0;\n  \n  for (int v_wg_id_101042 = get_group_id(0); v_wg_id_101042 < ((v_MHeight_2)/(512)); v_wg_id_101042 = (v_wg_id_101042 + get_num_groups(0))) {\n    for (int v_l_id_101043 = get_local_id(0); v_l_id_101043 < 512; v_l_id_101043 = (v_l_id_101043 + get_local_size(0))) {\n      float v_tmp_101106 = 0.0f; \n      v__101054 = v_tmp_101106; \n      /* reduce_seq */\n      for (int v_i_101044 = 0; v_i_101044 < v_MWidthC_1; v_i_101044 = (1 + v_i_101044)) {\n        float v_tmp_101107 = 0.0f; \n        v__101056 = v_tmp_101107; \n        int v_index_101108 = v__101046[(v_i_101044 + (512 * v_MWidthC_1 * v_wg_id_101042) + (v_MWidthC_1 * v_l_id_101043))]; \n        if (v_index_101108 < 0) {\n          v__101058_0 = v__101056; \n        } else {\n          if (v_index_101108 >= v_VLength_3) {\n            v__101058_0 = v__101056; \n          } else {\n            v__101058_0 = v__101048[v_index_101108]; \n          }\n        }\n        v__101060_0 = mult(v__101058_0, v__101047[(v_i_101044 + (512 * v_MWidthC_1 * v_wg_id_101042) + (v_MWidthC_1 * v_l_id_101043))]); \n        v__101054 = add(v__101060_0, v__101054); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101045 = 0; \n        v__101064[(v_l_id_101043 + (512 * v_wg_id_101042))] = doubleMultiplyAdd(v__101054, v__101050, v__101049[(v_l_id_101043 + (512 * v_wg_id_101042))], v__101051); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101048",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101049",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101050",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101051",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}