{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103724, const global float* restrict v__103725, const global float* restrict v__103726, const global float* restrict v__103727, float v__103728, float v__103729, global float* v__103747, global float* v__103737, global int* v__103731, local float* v__103742, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103733; \n  float v__103738; \n  float v__80917; \n  /* Private Memory */\n  float v__103735_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8856 = v__103731; \n    local int v_w_id_103716; \n    if (get_local_id(0) == 0) {\n      v_w_id_103716 = atomic_inc(v_work_idx_8856); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103716 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8854; \n        v_work_idx_8854 = 0; \n        int v_l_id_103717 = atomic_inc(&(v_work_idx_8854)); \n        while((v_l_id_103717 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_103718 = 0; v_i_103718 < 512; v_i_103718 = (1 + v_i_103718)) {\n            float v_tmp_103802 = 0.0f; \n            v__103733 = v_tmp_103802; \n            int v_index_103803 = v__103724[(v_l_id_103717 + (512 * v_MWidthC_1 * v_w_id_103716) + (v_MWidthC_1 * v_i_103718))]; \n            if (v_index_103803 < 0) {\n              v__103735_0 = v__103733; \n            } else {\n              if (v_index_103803 >= v_VLength_3) {\n                v__103735_0 = v__103733; \n              } else {\n                v__103735_0 = v__103726[v_index_103803]; \n              }\n            }\n            v__103737[(511 + (512 * v_MWidthC_1 * v_w_id_103716) + (-1 * v_i_103718) + (512 * v_l_id_103717))] = mult(v__103735_0, v__103725[(v_l_id_103717 + (512 * v_MWidthC_1 * v_w_id_103716) + (v_MWidthC_1 * v_i_103718))]); \n          }\n          /* end map_seq */\n          float v_tmp_103804 = 0.0f; \n          v__103738 = v_tmp_103804; \n          /* reduce_seq */\n          for (int v_i_103719 = 0; v_i_103719 < 512; v_i_103719 = (1 + v_i_103719)) {\n            v__103738 = add(v__103738, v__103737[(v_i_103719 + (512 * v_MWidthC_1 * v_w_id_103716) + (512 * v_l_id_103717))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103720 = 0; \n            v__103742[v_l_id_103717] = id(v__103738); \n          }\n          /* end map_seq */\n          v_l_id_103717 = atomic_inc(&(v_work_idx_8854)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103721 = get_local_id(0); \n        float v_tmp_103807 = 0.0f; \n        v__80917 = v_tmp_103807; \n        /* reduce_seq */\n        for (int v_i_103722 = 0; v_i_103722 < v_MWidthC_1; v_i_103722 = (1 + v_i_103722)) {\n          v__80917 = add(v__80917, v__103742[(v_i_103722 + (v_MWidthC_1 * v_l_id_103721))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103723 = 0; \n          v__103747[v_w_id_103716] = doubleMultiplyAdd(v__80917, v__103728, v__103727[v_w_id_103716], v__103729); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103716 = atomic_inc(v_work_idx_8856); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103724",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103725",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103726",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103728",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103729",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103737",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103731",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103742",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}