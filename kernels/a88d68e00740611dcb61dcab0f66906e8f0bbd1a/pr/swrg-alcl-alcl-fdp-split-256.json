{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99120, const global float* restrict v__99121, const global float* restrict v__99122, const global float* restrict v__99123, float v__99124, float v__99125, global float* v__99142, local float* v__99137, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99128; \n  float v__99130; \n  float v__80917; \n  /* Private Memory */\n  float v__99132_0;\n  \n  float v__99134_0;\n  \n  for (int v_wg_id_99113 = get_group_id(0); v_wg_id_99113 < v_MHeight_2; v_wg_id_99113 = (v_wg_id_99113 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8422; \n      v_work_idx_8422 = 0; \n      int v_l_id_99114 = atomic_inc(&(v_work_idx_8422)); \n      while((v_l_id_99114 < v_MWidthC_1)){\n        float v_tmp_99195 = 0.0f; \n        v__99128 = v_tmp_99195; \n        /* reduce_seq */\n        for (int v_i_99115 = 0; v_i_99115 < 256; v_i_99115 = (1 + v_i_99115)) {\n          float v_tmp_99196 = 0.0f; \n          v__99130 = v_tmp_99196; \n          int v_index_99197 = v__99120[(v_l_id_99114 + (256 * v_MWidthC_1 * v_wg_id_99113) + (v_MWidthC_1 * v_i_99115))]; \n          if (v_index_99197 < 0) {\n            v__99132_0 = v__99130; \n          } else {\n            if (v_index_99197 >= v_VLength_3) {\n              v__99132_0 = v__99130; \n            } else {\n              v__99132_0 = v__99122[v_index_99197]; \n            }\n          }\n          v__99134_0 = mult(v__99132_0, v__99121[(v_l_id_99114 + (256 * v_MWidthC_1 * v_wg_id_99113) + (v_MWidthC_1 * v_i_99115))]); \n          v__99128 = add(v__99134_0, v__99128); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99116 = 0; \n          v__99137[v_l_id_99114] = id(v__99128); \n        }\n        /* end map_seq */\n        v_l_id_99114 = atomic_inc(&(v_work_idx_8422)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8417; \n      v_work_idx_8417 = 0; \n      int v_l_id_99117 = atomic_inc(&(v_work_idx_8417)); \n      while((v_l_id_99117 < 1)){\n        float v_tmp_99200 = 0.0f; \n        v__80917 = v_tmp_99200; \n        /* reduce_seq */\n        for (int v_i_99118 = 0; v_i_99118 < v_MWidthC_1; v_i_99118 = (1 + v_i_99118)) {\n          v__80917 = add(v__80917, v__99137[(v_i_99118 + (v_MWidthC_1 * v_l_id_99117))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99119 = 0; \n          v__99142[v_wg_id_99113] = doubleMultiplyAdd(v__80917, v__99124, v__99123[v_wg_id_99113], v__99125); \n        }\n        /* end map_seq */\n        v_l_id_99117 = atomic_inc(&(v_work_idx_8417)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99120",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99121",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99122",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99124",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99125",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__99142",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99137",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}