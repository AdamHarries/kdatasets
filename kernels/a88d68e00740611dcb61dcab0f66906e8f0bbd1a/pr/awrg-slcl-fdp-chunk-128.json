{
  "name" : "awrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96054, const global float* restrict v__96055, const global float* restrict v__96056, const global float* restrict v__96057, float v__96058, float v__96059, global float* v__96073, global int* v__96061, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96063; \n  float v__96065; \n  /* Private Memory */\n  float v__96067_0;\n  \n  float v__96069_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8134 = v__96061; \n    local int v_w_id_96050; \n    if (get_local_id(0) == 0) {\n      v_w_id_96050 = atomic_inc(v_work_idx_8134); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96050 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_96051 = get_local_id(0); v_l_id_96051 < 128; v_l_id_96051 = (v_l_id_96051 + get_local_size(0))) {\n        float v_tmp_96114 = 0.0f; \n        v__96063 = v_tmp_96114; \n        /* reduce_seq */\n        for (int v_i_96052 = 0; v_i_96052 < v_MWidthC_1; v_i_96052 = (1 + v_i_96052)) {\n          float v_tmp_96115 = 0.0f; \n          v__96065 = v_tmp_96115; \n          int v_index_96116 = v__96054[(v_i_96052 + (128 * v_MWidthC_1 * v_w_id_96050) + (v_MWidthC_1 * v_l_id_96051))]; \n          if (v_index_96116 < 0) {\n            v__96067_0 = v__96065; \n          } else {\n            if (v_index_96116 >= v_VLength_3) {\n              v__96067_0 = v__96065; \n            } else {\n              v__96067_0 = v__96056[v_index_96116]; \n            }\n          }\n          v__96069_0 = mult(v__96067_0, v__96055[(v_i_96052 + (128 * v_MWidthC_1 * v_w_id_96050) + (v_MWidthC_1 * v_l_id_96051))]); \n          v__96063 = add(v__96069_0, v__96063); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96053 = 0; \n          v__96073[(v_l_id_96051 + (128 * v_w_id_96050))] = doubleMultiplyAdd(v__96063, v__96058, v__96057[(v_l_id_96051 + (128 * v_w_id_96050))], v__96059); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_96050 = atomic_inc(v_work_idx_8134); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__96054",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96055",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96056",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96058",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96059",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96061",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96073",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}