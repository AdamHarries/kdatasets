{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93403, const global float* restrict v__93404, const global float* restrict v__93405, const global float* restrict v__93406, float v__93407, float v__93408, global float* v__93428, global int* v__93410, local float* v__93423, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93412; \n  float v__93414; \n  float v__80917; \n  /* Private Memory */\n  float v__93416_0;\n  \n  float v__93418_0;\n  \n  int v__93422_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7887 = v__93410; \n    local int v_w_id_93396; \n    if (get_local_id(0) == 0) {\n      v_w_id_93396 = atomic_inc(v_work_idx_7887); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93396 < v_MHeight_2)){\n      for (int v_l_id_93397 = get_local_id(0); v_l_id_93397 < v_MWidthC_1; v_l_id_93397 = (v_l_id_93397 + get_local_size(0))) {\n        float v_tmp_93490 = 0.0f; \n        v__93412 = v_tmp_93490; \n        /* reduce_while_seq */\n        for (int v_i_93398 = 0; v_i_93398 < 64; v_i_93398 = (1 + v_i_93398)) {\n          v__93422_0 = check(v__93412, v__93403[(v_l_id_93397 + (64 * v_MWidthC_1 * v_w_id_93396) + (v_MWidthC_1 * v_i_93398))]); \n          if (v__93422_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93491 = 0.0f; \n          v__93414 = v_tmp_93491; \n          int v_index_93492 = v__93403[(v_l_id_93397 + (64 * v_MWidthC_1 * v_w_id_93396) + (v_MWidthC_1 * v_i_93398))]; \n          if (v_index_93492 < 0) {\n            v__93416_0 = v__93414; \n          } else {\n            if (v_index_93492 >= v_VLength_3) {\n              v__93416_0 = v__93414; \n            } else {\n              v__93416_0 = v__93405[v_index_93492]; \n            }\n          }\n          v__93418_0 = mult(v__93416_0, v__93404[(v_l_id_93397 + (64 * v_MWidthC_1 * v_w_id_93396) + (v_MWidthC_1 * v_i_93398))]); \n          v__93412 = add(v__93418_0, v__93412); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93399 = 0; \n          v__93423[v_l_id_93397] = id(v__93412); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7881; \n        v_work_idx_7881 = 0; \n        int v_l_id_93400 = atomic_inc(&(v_work_idx_7881)); \n        while((v_l_id_93400 < 1)){\n          float v_tmp_93495 = 0.0f; \n          v__80917 = v_tmp_93495; \n          /* reduce_seq */\n          for (int v_i_93401 = 0; v_i_93401 < v_MWidthC_1; v_i_93401 = (1 + v_i_93401)) {\n            v__80917 = add(v__80917, v__93423[(v_i_93401 + (v_MWidthC_1 * v_l_id_93400))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93402 = 0; \n            v__93428[v_w_id_93396] = doubleMultiplyAdd(v__80917, v__93407, v__93406[v_w_id_93396], v__93408); \n          }\n          /* end map_seq */\n          v_l_id_93400 = atomic_inc(&(v_work_idx_7881)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93396 = atomic_inc(v_work_idx_7887); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93403",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93404",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93405",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93407",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93408",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93410",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93428",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93423",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}