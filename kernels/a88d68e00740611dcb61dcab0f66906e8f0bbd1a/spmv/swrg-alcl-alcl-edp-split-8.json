{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__11021, const global float* restrict v__11022, const global float* restrict v__11023, const global float* restrict v__11024, float v__11025, float v__11026, global float* v__11045, local float* v__11040, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11029; \n  float v__11031; \n  float v__9384; \n  /* Private Memory */\n  float v__11033_0;\n  \n  float v__11035_0;\n  \n  int v__11039_0;\n  \n  for (int v_wg_id_11014 = get_group_id(0); v_wg_id_11014 < v_MHeight_2; v_wg_id_11014 = (v_wg_id_11014 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_191; \n      v_work_idx_191 = 0; \n      int v_l_id_11015 = atomic_inc(&(v_work_idx_191)); \n      while((v_l_id_11015 < v_MWidthC_1)){\n        float v_tmp_11101 = 0.0f; \n        v__11029 = v_tmp_11101; \n        /* reduce_while_seq */\n        for (int v_i_11016 = 0; v_i_11016 < 8; v_i_11016 = (1 + v_i_11016)) {\n          v__11039_0 = check(v__11029, v__11021[(v_l_id_11015 + (8 * v_MWidthC_1 * v_wg_id_11014) + (v_MWidthC_1 * v_i_11016))]); \n          if (v__11039_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11102 = 0.0f; \n          v__11031 = v_tmp_11102; \n          int v_index_11103 = v__11021[(v_l_id_11015 + (8 * v_MWidthC_1 * v_wg_id_11014) + (v_MWidthC_1 * v_i_11016))]; \n          if (v_index_11103 < 0) {\n            v__11033_0 = v__11031; \n          } else {\n            if (v_index_11103 >= v_VLength_3) {\n              v__11033_0 = v__11031; \n            } else {\n              v__11033_0 = v__11023[v_index_11103]; \n            }\n          }\n          v__11035_0 = mult(v__11033_0, v__11022[(v_l_id_11015 + (8 * v_MWidthC_1 * v_wg_id_11014) + (v_MWidthC_1 * v_i_11016))]); \n          v__11029 = add(v__11035_0, v__11029); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11017 = 0; \n          v__11040[v_l_id_11015] = id(v__11029); \n        }\n        /* end map_seq */\n        v_l_id_11015 = atomic_inc(&(v_work_idx_191)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_186; \n      v_work_idx_186 = 0; \n      int v_l_id_11018 = atomic_inc(&(v_work_idx_186)); \n      while((v_l_id_11018 < 1)){\n        float v_tmp_11106 = 0.0f; \n        v__9384 = v_tmp_11106; \n        /* reduce_seq */\n        for (int v_i_11019 = 0; v_i_11019 < v_MWidthC_1; v_i_11019 = (1 + v_i_11019)) {\n          v__9384 = add(v__9384, v__11040[(v_i_11019 + (v_MWidthC_1 * v_l_id_11018))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11020 = 0; \n          v__11045[v_wg_id_11014] = doubleMultiplyAdd(v__9384, v__11025, v__11024[v_wg_id_11014], v__11026); \n        }\n        /* end map_seq */\n        v_l_id_11018 = atomic_inc(&(v_work_idx_186)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__11021",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11022",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11023",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11025",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11026",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__11045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11040",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}