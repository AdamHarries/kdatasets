{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24161, const global float* restrict v__24162, const global float* restrict v__24163, const global float* restrict v__24164, float v__24165, float v__24166, global float* v__24183, global float* v__24173, local float* v__24178, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24169; \n  float v__24174; \n  float v__9384; \n  /* Private Memory */\n  float v__24171_0;\n  \n  for (int v_wg_id_24153 = get_group_id(0); v_wg_id_24153 < v_MHeight_2; v_wg_id_24153 = (v_wg_id_24153 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1419; \n      v_work_idx_1419 = 0; \n      int v_l_id_24154 = atomic_inc(&(v_work_idx_1419)); \n      while((v_l_id_24154 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_24155 = 0; v_i_24155 < 128; v_i_24155 = (1 + v_i_24155)) {\n          float v_tmp_24236 = 0.0f; \n          v__24169 = v_tmp_24236; \n          int v_index_24237 = v__24161[(v_l_id_24154 + (128 * v_MWidthC_1 * v_wg_id_24153) + (v_MWidthC_1 * v_i_24155))]; \n          if (v_index_24237 < 0) {\n            v__24171_0 = v__24169; \n          } else {\n            if (v_index_24237 >= v_VLength_3) {\n              v__24171_0 = v__24169; \n            } else {\n              v__24171_0 = v__24163[v_index_24237]; \n            }\n          }\n          v__24173[(127 + (128 * v_MWidthC_1 * v_wg_id_24153) + (-1 * v_i_24155) + (128 * v_l_id_24154))] = mult(v__24171_0, v__24162[(v_l_id_24154 + (128 * v_MWidthC_1 * v_wg_id_24153) + (v_MWidthC_1 * v_i_24155))]); \n        }\n        /* end map_seq */\n        float v_tmp_24238 = 0.0f; \n        v__24174 = v_tmp_24238; \n        /* reduce_seq */\n        for (int v_i_24156 = 0; v_i_24156 < 128; v_i_24156 = (1 + v_i_24156)) {\n          v__24174 = add(v__24174, v__24173[(v_i_24156 + (128 * v_MWidthC_1 * v_wg_id_24153) + (128 * v_l_id_24154))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24157 = 0; \n          v__24178[v_l_id_24154] = id(v__24174); \n        }\n        /* end map_seq */\n        v_l_id_24154 = atomic_inc(&(v_work_idx_1419)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1413; \n      v_work_idx_1413 = 0; \n      int v_l_id_24158 = atomic_inc(&(v_work_idx_1413)); \n      while((v_l_id_24158 < 1)){\n        float v_tmp_24241 = 0.0f; \n        v__9384 = v_tmp_24241; \n        /* reduce_seq */\n        for (int v_i_24159 = 0; v_i_24159 < v_MWidthC_1; v_i_24159 = (1 + v_i_24159)) {\n          v__9384 = add(v__9384, v__24178[(v_i_24159 + (v_MWidthC_1 * v_l_id_24158))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24160 = 0; \n          v__24183[v_wg_id_24153] = doubleMultiplyAdd(v__9384, v__24165, v__24164[v_wg_id_24153], v__24166); \n        }\n        /* end map_seq */\n        v_l_id_24158 = atomic_inc(&(v_work_idx_1413)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24161",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24162",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24163",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24165",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24166",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24173",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__24183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24178",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}