{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23959, const global float* restrict v__23960, const global float* restrict v__23961, const global float* restrict v__23962, float v__23963, float v__23964, global float* v__23981, local float* v__23976, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23967; \n  float v__23969; \n  float v__9384; \n  /* Private Memory */\n  float v__23971_0;\n  \n  float v__23973_0;\n  \n  for (int v_wg_id_23952 = get_group_id(0); v_wg_id_23952 < v_MHeight_2; v_wg_id_23952 = (v_wg_id_23952 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1399; \n      v_work_idx_1399 = 0; \n      int v_l_id_23953 = atomic_inc(&(v_work_idx_1399)); \n      while((v_l_id_23953 < v_MWidthC_1)){\n        float v_tmp_24038 = 0.0f; \n        v__23967 = v_tmp_24038; \n        /* reduce_seq */\n        for (int v_i_23954 = 0; v_i_23954 < 128; v_i_23954 = (1 + v_i_23954)) {\n          float v_tmp_24039 = 0.0f; \n          v__23969 = v_tmp_24039; \n          int v_index_24040 = v__23959[(v_l_id_23953 + (128 * v_MWidthC_1 * v_wg_id_23952) + (v_MWidthC_1 * v_i_23954))]; \n          if (v_index_24040 < 0) {\n            v__23971_0 = v__23969; \n          } else {\n            if (v_index_24040 >= v_VLength_3) {\n              v__23971_0 = v__23969; \n            } else {\n              v__23971_0 = v__23961[v_index_24040]; \n            }\n          }\n          v__23973_0 = mult(v__23971_0, v__23960[(v_l_id_23953 + (128 * v_MWidthC_1 * v_wg_id_23952) + (v_MWidthC_1 * v_i_23954))]); \n          v__23967 = add(v__23973_0, v__23967); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23955 = 0; \n          v__23976[v_l_id_23953] = id(v__23967); \n        }\n        /* end map_seq */\n        v_l_id_23953 = atomic_inc(&(v_work_idx_1399)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23956 = get_local_id(0); \n      float v_tmp_24043 = 0.0f; \n      v__9384 = v_tmp_24043; \n      /* reduce_seq */\n      for (int v_i_23957 = 0; v_i_23957 < v_MWidthC_1; v_i_23957 = (1 + v_i_23957)) {\n        v__9384 = add(v__9384, v__23976[(v_i_23957 + (v_MWidthC_1 * v_l_id_23956))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23958 = 0; \n        v__23981[v_wg_id_23952] = doubleMultiplyAdd(v__9384, v__23963, v__23962[v_wg_id_23952], v__23964); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__23959",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23960",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23961",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23962",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23963",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23964",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23976",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}