{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31110, const global float* restrict v__31111, const global float* restrict v__31112, const global float* restrict v__31113, float v__31114, float v__31115, global float* v__31129, global float* v__31123, global int* v__31117, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31119; \n  float v__31124; \n  /* Private Memory */\n  float v__31121_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2071 = v__31117; \n    local int v_w_id_31105; \n    if (get_local_id(0) == 0) {\n      v_w_id_31105 = atomic_inc(v_work_idx_2071); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31105 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_31106 = get_local_id(0); v_l_id_31106 < 512; v_l_id_31106 = (v_l_id_31106 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_31107 = 0; v_i_31107 < v_MWidthC_1; v_i_31107 = (1 + v_i_31107)) {\n          float v_tmp_31172 = 0.0f; \n          v__31119 = v_tmp_31172; \n          int v_index_31173 = v__31110[(v_i_31107 + (512 * v_MWidthC_1 * v_w_id_31105) + (v_MWidthC_1 * v_l_id_31106))]; \n          if (v_index_31173 < 0) {\n            v__31121_0 = v__31119; \n          } else {\n            if (v_index_31173 >= v_VLength_3) {\n              v__31121_0 = v__31119; \n            } else {\n              v__31121_0 = v__31112[v_index_31173]; \n            }\n          }\n          v__31123[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_31105) + (-1 * v_i_31107) + (v_MWidthC_1 * v_l_id_31106))] = mult(v__31121_0, v__31111[(v_i_31107 + (512 * v_MWidthC_1 * v_w_id_31105) + (v_MWidthC_1 * v_l_id_31106))]); \n        }\n        /* end map_seq */\n        float v_tmp_31174 = 0.0f; \n        v__31124 = v_tmp_31174; \n        /* reduce_seq */\n        for (int v_i_31108 = 0; v_i_31108 < v_MWidthC_1; v_i_31108 = (1 + v_i_31108)) {\n          v__31124 = add(v__31124, v__31123[(v_i_31108 + (512 * v_MWidthC_1 * v_w_id_31105) + (v_MWidthC_1 * v_l_id_31106))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31109 = 0; \n          v__31129[(v_l_id_31106 + (512 * v_w_id_31105))] = doubleMultiplyAdd(v__31124, v__31114, v__31113[(v_l_id_31106 + (512 * v_w_id_31105))], v__31115); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_31105 = atomic_inc(v_work_idx_2071); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__31110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31112",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31114",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31115",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31117",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31129",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}