{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28433, const global float* restrict v__28434, const global float* restrict v__28435, const global float* restrict v__28436, float v__28437, float v__28438, global float* v__28456, global int* v__28440, local float* v__28451, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28442; \n  float v__28444; \n  float v__9384; \n  /* Private Memory */\n  float v__28446_0;\n  \n  float v__28448_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1820 = v__28440; \n    local int v_w_id_28426; \n    if (get_local_id(0) == 0) {\n      v_w_id_28426 = atomic_inc(v_work_idx_1820); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28426 < v_MHeight_2)){\n      for (int v_l_id_28427 = get_local_id(0); v_l_id_28427 < v_MWidthC_1; v_l_id_28427 = (v_l_id_28427 + get_local_size(0))) {\n        float v_tmp_28515 = 0.0f; \n        v__28442 = v_tmp_28515; \n        /* reduce_seq */\n        for (int v_i_28428 = 0; v_i_28428 < 256; v_i_28428 = (1 + v_i_28428)) {\n          float v_tmp_28516 = 0.0f; \n          v__28444 = v_tmp_28516; \n          int v_index_28517 = v__28433[(v_l_id_28427 + (256 * v_MWidthC_1 * v_w_id_28426) + (v_MWidthC_1 * v_i_28428))]; \n          if (v_index_28517 < 0) {\n            v__28446_0 = v__28444; \n          } else {\n            if (v_index_28517 >= v_VLength_3) {\n              v__28446_0 = v__28444; \n            } else {\n              v__28446_0 = v__28435[v_index_28517]; \n            }\n          }\n          v__28448_0 = mult(v__28446_0, v__28434[(v_l_id_28427 + (256 * v_MWidthC_1 * v_w_id_28426) + (v_MWidthC_1 * v_i_28428))]); \n          v__28442 = add(v__28448_0, v__28442); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28429 = 0; \n          v__28451[v_l_id_28427] = id(v__28442); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1814; \n        v_work_idx_1814 = 0; \n        int v_l_id_28430 = atomic_inc(&(v_work_idx_1814)); \n        while((v_l_id_28430 < 1)){\n          float v_tmp_28520 = 0.0f; \n          v__9384 = v_tmp_28520; \n          /* reduce_seq */\n          for (int v_i_28431 = 0; v_i_28431 < v_MWidthC_1; v_i_28431 = (1 + v_i_28431)) {\n            v__9384 = add(v__9384, v__28451[(v_i_28431 + (v_MWidthC_1 * v_l_id_28430))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28432 = 0; \n            v__28456[v_w_id_28426] = doubleMultiplyAdd(v__9384, v__28437, v__28436[v_w_id_28426], v__28438); \n          }\n          /* end map_seq */\n          v_l_id_28430 = atomic_inc(&(v_work_idx_1814)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28426 = atomic_inc(v_work_idx_1820); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28433",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28434",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28435",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28437",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28438",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28440",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28451",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}