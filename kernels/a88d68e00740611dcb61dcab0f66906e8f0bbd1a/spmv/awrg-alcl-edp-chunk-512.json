{
  "name" : "awrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32110, const global float* restrict v__32111, const global float* restrict v__32112, const global float* restrict v__32113, float v__32114, float v__32115, global float* v__32131, global int* v__32117, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32118; \n  float v__32121; \n  /* Private Memory */\n  float v__32123_0;\n  \n  float v__32125_0;\n  \n  int v__32129_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2164 = v__32117; \n    local int v_w_id_32106; \n    if (get_local_id(0) == 0) {\n      v_w_id_32106 = atomic_inc(v_work_idx_2164); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32106 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2162; \n        v_work_idx_2162 = 0; \n        int v_l_id_32107 = atomic_inc(&(v_work_idx_2162)); \n        while((v_l_id_32107 < 512)){\n          float v_tmp_32174 = 0.0f; \n          v__32118 = v_tmp_32174; \n          /* reduce_while_seq */\n          for (int v_i_32108 = 0; v_i_32108 < v_MWidthC_1; v_i_32108 = (1 + v_i_32108)) {\n            v__32129_0 = check(v__32118, v__32110[(v_i_32108 + (512 * v_MWidthC_1 * v_w_id_32106) + (v_MWidthC_1 * v_l_id_32107))]); \n            if (v__32129_0) {\n            } else {\n              break;\n            }\n            float v_tmp_32175 = 0.0f; \n            v__32121 = v_tmp_32175; \n            int v_index_32176 = v__32110[(v_i_32108 + (512 * v_MWidthC_1 * v_w_id_32106) + (v_MWidthC_1 * v_l_id_32107))]; \n            if (v_index_32176 < 0) {\n              v__32123_0 = v__32121; \n            } else {\n              if (v_index_32176 >= v_VLength_3) {\n                v__32123_0 = v__32121; \n              } else {\n                v__32123_0 = v__32112[v_index_32176]; \n              }\n            }\n            v__32125_0 = mult(v__32123_0, v__32111[(v_i_32108 + (512 * v_MWidthC_1 * v_w_id_32106) + (v_MWidthC_1 * v_l_id_32107))]); \n            v__32118 = add(v__32125_0, v__32118); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32109 = 0; \n            v__32131[(v_l_id_32107 + (512 * v_w_id_32106))] = doubleMultiplyAdd(v__32118, v__32114, v__32113[(v_l_id_32107 + (512 * v_w_id_32106))], v__32115); \n          }\n          /* end map_seq */\n          v_l_id_32107 = atomic_inc(&(v_work_idx_2162)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32106 = atomic_inc(v_work_idx_2164); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__32110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32112",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32114",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32115",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32117",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32131",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}