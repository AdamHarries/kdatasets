{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10533, const global float* restrict v__10534, const global float* restrict v__10535, const global float* restrict v__10536, float v__10537, float v__10538, global float* v__10555, global float* v__10545, local float* v__10550, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10541; \n  float v__10546; \n  float v__9384; \n  /* Private Memory */\n  float v__10543_0;\n  \n  for (int v_wg_id_10525 = get_group_id(0); v_wg_id_10525 < v_MHeight_2; v_wg_id_10525 = (v_wg_id_10525 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_142; \n      v_work_idx_142 = 0; \n      int v_l_id_10526 = atomic_inc(&(v_work_idx_142)); \n      while((v_l_id_10526 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_10527 = 0; v_i_10527 < 8; v_i_10527 = (1 + v_i_10527)) {\n          float v_tmp_10612 = 0.0f; \n          v__10541 = v_tmp_10612; \n          int v_index_10613 = v__10533[(v_l_id_10526 + (8 * v_MWidthC_1 * v_wg_id_10525) + (v_MWidthC_1 * v_i_10527))]; \n          if (v_index_10613 < 0) {\n            v__10543_0 = v__10541; \n          } else {\n            if (v_index_10613 >= v_VLength_3) {\n              v__10543_0 = v__10541; \n            } else {\n              v__10543_0 = v__10535[v_index_10613]; \n            }\n          }\n          v__10545[(7 + (8 * v_MWidthC_1 * v_wg_id_10525) + (-1 * v_i_10527) + (8 * v_l_id_10526))] = mult(v__10543_0, v__10534[(v_l_id_10526 + (8 * v_MWidthC_1 * v_wg_id_10525) + (v_MWidthC_1 * v_i_10527))]); \n        }\n        /* end map_seq */\n        float v_tmp_10614 = 0.0f; \n        v__10546 = v_tmp_10614; \n        /* reduce_seq */\n        for (int v_i_10528 = 0; v_i_10528 < 8; v_i_10528 = (1 + v_i_10528)) {\n          v__10546 = add(v__10546, v__10545[(v_i_10528 + (8 * v_MWidthC_1 * v_wg_id_10525) + (8 * v_l_id_10526))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10529 = 0; \n          v__10550[v_l_id_10526] = id(v__10546); \n        }\n        /* end map_seq */\n        v_l_id_10526 = atomic_inc(&(v_work_idx_142)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_10530 = get_local_id(0); \n      float v_tmp_10617 = 0.0f; \n      v__9384 = v_tmp_10617; \n      /* reduce_seq */\n      for (int v_i_10531 = 0; v_i_10531 < v_MWidthC_1; v_i_10531 = (1 + v_i_10531)) {\n        v__9384 = add(v__9384, v__10550[(v_i_10531 + (v_MWidthC_1 * v_l_id_10530))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10532 = 0; \n        v__10555[v_wg_id_10525] = doubleMultiplyAdd(v__9384, v__10537, v__10536[v_wg_id_10525], v__10538); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10533",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10534",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10535",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10536",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10537",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10538",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10545",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10555",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10550",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}