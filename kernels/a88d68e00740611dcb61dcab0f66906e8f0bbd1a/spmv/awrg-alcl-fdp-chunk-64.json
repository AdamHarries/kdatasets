{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22045, const global float* restrict v__22046, const global float* restrict v__22047, const global float* restrict v__22048, float v__22049, float v__22050, global float* v__22064, global int* v__22052, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22054; \n  float v__22056; \n  /* Private Memory */\n  float v__22058_0;\n  \n  float v__22060_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1221 = v__22052; \n    local int v_w_id_22041; \n    if (get_local_id(0) == 0) {\n      v_w_id_22041 = atomic_inc(v_work_idx_1221); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22041 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1219; \n        v_work_idx_1219 = 0; \n        int v_l_id_22042 = atomic_inc(&(v_work_idx_1219)); \n        while((v_l_id_22042 < 64)){\n          float v_tmp_22101 = 0.0f; \n          v__22054 = v_tmp_22101; \n          /* reduce_seq */\n          for (int v_i_22043 = 0; v_i_22043 < v_MWidthC_1; v_i_22043 = (1 + v_i_22043)) {\n            float v_tmp_22102 = 0.0f; \n            v__22056 = v_tmp_22102; \n            int v_index_22103 = v__22045[(v_i_22043 + (64 * v_MWidthC_1 * v_w_id_22041) + (v_MWidthC_1 * v_l_id_22042))]; \n            if (v_index_22103 < 0) {\n              v__22058_0 = v__22056; \n            } else {\n              if (v_index_22103 >= v_VLength_3) {\n                v__22058_0 = v__22056; \n              } else {\n                v__22058_0 = v__22047[v_index_22103]; \n              }\n            }\n            v__22060_0 = mult(v__22058_0, v__22046[(v_i_22043 + (64 * v_MWidthC_1 * v_w_id_22041) + (v_MWidthC_1 * v_l_id_22042))]); \n            v__22054 = add(v__22060_0, v__22054); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22044 = 0; \n            v__22064[(v_l_id_22042 + (64 * v_w_id_22041))] = doubleMultiplyAdd(v__22054, v__22049, v__22048[(v_l_id_22042 + (64 * v_w_id_22041))], v__22050); \n          }\n          /* end map_seq */\n          v_l_id_22042 = atomic_inc(&(v_work_idx_1219)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22041 = atomic_inc(v_work_idx_1221); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22047",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22049",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22050",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22052",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}