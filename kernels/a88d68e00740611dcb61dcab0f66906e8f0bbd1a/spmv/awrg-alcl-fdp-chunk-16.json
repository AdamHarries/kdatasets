{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15381, const global float* restrict v__15382, const global float* restrict v__15383, const global float* restrict v__15384, float v__15385, float v__15386, global float* v__15400, global int* v__15388, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15390; \n  float v__15392; \n  /* Private Memory */\n  float v__15394_0;\n  \n  float v__15396_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_597 = v__15388; \n    local int v_w_id_15377; \n    if (get_local_id(0) == 0) {\n      v_w_id_15377 = atomic_inc(v_work_idx_597); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15377 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_595; \n        v_work_idx_595 = 0; \n        int v_l_id_15378 = atomic_inc(&(v_work_idx_595)); \n        while((v_l_id_15378 < 16)){\n          float v_tmp_15437 = 0.0f; \n          v__15390 = v_tmp_15437; \n          /* reduce_seq */\n          for (int v_i_15379 = 0; v_i_15379 < v_MWidthC_1; v_i_15379 = (1 + v_i_15379)) {\n            float v_tmp_15438 = 0.0f; \n            v__15392 = v_tmp_15438; \n            int v_index_15439 = v__15381[(v_i_15379 + (16 * v_MWidthC_1 * v_w_id_15377) + (v_MWidthC_1 * v_l_id_15378))]; \n            if (v_index_15439 < 0) {\n              v__15394_0 = v__15392; \n            } else {\n              if (v_index_15439 >= v_VLength_3) {\n                v__15394_0 = v__15392; \n              } else {\n                v__15394_0 = v__15383[v_index_15439]; \n              }\n            }\n            v__15396_0 = mult(v__15394_0, v__15382[(v_i_15379 + (16 * v_MWidthC_1 * v_w_id_15377) + (v_MWidthC_1 * v_l_id_15378))]); \n            v__15390 = add(v__15396_0, v__15390); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15380 = 0; \n            v__15400[(v_l_id_15378 + (16 * v_w_id_15377))] = doubleMultiplyAdd(v__15390, v__15385, v__15384[(v_l_id_15378 + (16 * v_w_id_15377))], v__15386); \n          }\n          /* end map_seq */\n          v_l_id_15378 = atomic_inc(&(v_work_idx_595)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15377 = atomic_inc(v_work_idx_597); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15381",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15383",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15384",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15385",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15386",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15388",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}