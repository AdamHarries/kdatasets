{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25306, const global float* restrict v__25307, const global float* restrict v__25308, const global float* restrict v__25309, float v__25310, float v__25311, global float* v__25325, global float* v__25319, global int* v__25313, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25315; \n  float v__25320; \n  /* Private Memory */\n  float v__25317_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1526 = v__25313; \n    local int v_w_id_25301; \n    if (get_local_id(0) == 0) {\n      v_w_id_25301 = atomic_inc(v_work_idx_1526); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25301 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1524; \n        v_work_idx_1524 = 0; \n        int v_l_id_25302 = atomic_inc(&(v_work_idx_1524)); \n        while((v_l_id_25302 < 128)){\n          /* map_seq */\n          for (int v_i_25303 = 0; v_i_25303 < v_MWidthC_1; v_i_25303 = (1 + v_i_25303)) {\n            float v_tmp_25364 = 0.0f; \n            v__25315 = v_tmp_25364; \n            int v_index_25365 = v__25306[(v_i_25303 + (128 * v_MWidthC_1 * v_w_id_25301) + (v_MWidthC_1 * v_l_id_25302))]; \n            if (v_index_25365 < 0) {\n              v__25317_0 = v__25315; \n            } else {\n              if (v_index_25365 >= v_VLength_3) {\n                v__25317_0 = v__25315; \n              } else {\n                v__25317_0 = v__25308[v_index_25365]; \n              }\n            }\n            v__25319[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_25301) + (-1 * v_i_25303) + (v_MWidthC_1 * v_l_id_25302))] = mult(v__25317_0, v__25307[(v_i_25303 + (128 * v_MWidthC_1 * v_w_id_25301) + (v_MWidthC_1 * v_l_id_25302))]); \n          }\n          /* end map_seq */\n          float v_tmp_25366 = 0.0f; \n          v__25320 = v_tmp_25366; \n          /* reduce_seq */\n          for (int v_i_25304 = 0; v_i_25304 < v_MWidthC_1; v_i_25304 = (1 + v_i_25304)) {\n            v__25320 = add(v__25320, v__25319[(v_i_25304 + (128 * v_MWidthC_1 * v_w_id_25301) + (v_MWidthC_1 * v_l_id_25302))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25305 = 0; \n            v__25325[(v_l_id_25302 + (128 * v_w_id_25301))] = doubleMultiplyAdd(v__25320, v__25310, v__25309[(v_l_id_25302 + (128 * v_w_id_25301))], v__25311); \n          }\n          /* end map_seq */\n          v_l_id_25302 = atomic_inc(&(v_work_idx_1524)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25301 = atomic_inc(v_work_idx_1526); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25306",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25307",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25308",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25309",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25310",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25311",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25313",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}