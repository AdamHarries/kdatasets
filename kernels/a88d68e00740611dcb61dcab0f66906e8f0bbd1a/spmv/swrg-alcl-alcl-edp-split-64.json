{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__21017, const global float* restrict v__21018, const global float* restrict v__21019, const global float* restrict v__21020, float v__21021, float v__21022, global float* v__21041, local float* v__21036, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21025; \n  float v__21027; \n  float v__9384; \n  /* Private Memory */\n  float v__21029_0;\n  \n  float v__21031_0;\n  \n  int v__21035_0;\n  \n  for (int v_wg_id_21010 = get_group_id(0); v_wg_id_21010 < v_MHeight_2; v_wg_id_21010 = (v_wg_id_21010 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1127; \n      v_work_idx_1127 = 0; \n      int v_l_id_21011 = atomic_inc(&(v_work_idx_1127)); \n      while((v_l_id_21011 < v_MWidthC_1)){\n        float v_tmp_21097 = 0.0f; \n        v__21025 = v_tmp_21097; \n        /* reduce_while_seq */\n        for (int v_i_21012 = 0; v_i_21012 < 64; v_i_21012 = (1 + v_i_21012)) {\n          v__21035_0 = check(v__21025, v__21017[(v_l_id_21011 + (64 * v_MWidthC_1 * v_wg_id_21010) + (v_MWidthC_1 * v_i_21012))]); \n          if (v__21035_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21098 = 0.0f; \n          v__21027 = v_tmp_21098; \n          int v_index_21099 = v__21017[(v_l_id_21011 + (64 * v_MWidthC_1 * v_wg_id_21010) + (v_MWidthC_1 * v_i_21012))]; \n          if (v_index_21099 < 0) {\n            v__21029_0 = v__21027; \n          } else {\n            if (v_index_21099 >= v_VLength_3) {\n              v__21029_0 = v__21027; \n            } else {\n              v__21029_0 = v__21019[v_index_21099]; \n            }\n          }\n          v__21031_0 = mult(v__21029_0, v__21018[(v_l_id_21011 + (64 * v_MWidthC_1 * v_wg_id_21010) + (v_MWidthC_1 * v_i_21012))]); \n          v__21025 = add(v__21031_0, v__21025); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21013 = 0; \n          v__21036[v_l_id_21011] = id(v__21025); \n        }\n        /* end map_seq */\n        v_l_id_21011 = atomic_inc(&(v_work_idx_1127)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1122; \n      v_work_idx_1122 = 0; \n      int v_l_id_21014 = atomic_inc(&(v_work_idx_1122)); \n      while((v_l_id_21014 < 1)){\n        float v_tmp_21102 = 0.0f; \n        v__9384 = v_tmp_21102; \n        /* reduce_seq */\n        for (int v_i_21015 = 0; v_i_21015 < v_MWidthC_1; v_i_21015 = (1 + v_i_21015)) {\n          v__9384 = add(v__9384, v__21036[(v_i_21015 + (v_MWidthC_1 * v_l_id_21014))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21016 = 0; \n          v__21041[v_wg_id_21010] = doubleMultiplyAdd(v__9384, v__21021, v__21020[v_wg_id_21010], v__21022); \n        }\n        /* end map_seq */\n        v_l_id_21014 = atomic_inc(&(v_work_idx_1122)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21017",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21018",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21019",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21020",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21021",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21022",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__21041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21036",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}