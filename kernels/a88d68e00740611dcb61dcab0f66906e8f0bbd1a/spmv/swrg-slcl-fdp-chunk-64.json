{
  "name" : "swrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19517, const global float* restrict v__19518, const global float* restrict v__19519, const global float* restrict v__19520, float v__19521, float v__19522, global float* v__19535, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19525; \n  float v__19527; \n  /* Private Memory */\n  float v__19529_0;\n  \n  float v__19531_0;\n  \n  for (int v_wg_id_19513 = get_group_id(0); v_wg_id_19513 < ((v_MHeight_2)/(64)); v_wg_id_19513 = (v_wg_id_19513 + get_num_groups(0))) {\n    for (int v_l_id_19514 = get_local_id(0); v_l_id_19514 < 64; v_l_id_19514 = (v_l_id_19514 + get_local_size(0))) {\n      float v_tmp_19577 = 0.0f; \n      v__19525 = v_tmp_19577; \n      /* reduce_seq */\n      for (int v_i_19515 = 0; v_i_19515 < v_MWidthC_1; v_i_19515 = (1 + v_i_19515)) {\n        float v_tmp_19578 = 0.0f; \n        v__19527 = v_tmp_19578; \n        int v_index_19579 = v__19517[(v_i_19515 + (64 * v_MWidthC_1 * v_wg_id_19513) + (v_MWidthC_1 * v_l_id_19514))]; \n        if (v_index_19579 < 0) {\n          v__19529_0 = v__19527; \n        } else {\n          if (v_index_19579 >= v_VLength_3) {\n            v__19529_0 = v__19527; \n          } else {\n            v__19529_0 = v__19519[v_index_19579]; \n          }\n        }\n        v__19531_0 = mult(v__19529_0, v__19518[(v_i_19515 + (64 * v_MWidthC_1 * v_wg_id_19513) + (v_MWidthC_1 * v_l_id_19514))]); \n        v__19525 = add(v__19531_0, v__19525); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19516 = 0; \n        v__19535[(v_l_id_19514 + (64 * v_wg_id_19513))] = doubleMultiplyAdd(v__19525, v__19521, v__19520[(v_l_id_19514 + (64 * v_wg_id_19513))], v__19522); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19519",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19521",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19522",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19535",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}