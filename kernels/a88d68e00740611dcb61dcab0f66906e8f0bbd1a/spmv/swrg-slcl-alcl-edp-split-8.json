{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__10207, const global float* restrict v__10208, const global float* restrict v__10209, const global float* restrict v__10210, float v__10211, float v__10212, global float* v__10231, local float* v__10226, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10215; \n  float v__10217; \n  float v__9384; \n  /* Private Memory */\n  float v__10219_0;\n  \n  float v__10221_0;\n  \n  int v__10225_0;\n  \n  for (int v_wg_id_10200 = get_group_id(0); v_wg_id_10200 < v_MHeight_2; v_wg_id_10200 = (v_wg_id_10200 + get_num_groups(0))) {\n    for (int v_l_id_10201 = get_local_id(0); v_l_id_10201 < v_MWidthC_1; v_l_id_10201 = (v_l_id_10201 + get_local_size(0))) {\n      float v_tmp_10295 = 0.0f; \n      v__10215 = v_tmp_10295; \n      /* reduce_while_seq */\n      for (int v_i_10202 = 0; v_i_10202 < 8; v_i_10202 = (1 + v_i_10202)) {\n        v__10225_0 = check(v__10215, v__10207[(v_l_id_10201 + (8 * v_MWidthC_1 * v_wg_id_10200) + (v_MWidthC_1 * v_i_10202))]); \n        if (v__10225_0) {\n        } else {\n          break;\n        }\n        float v_tmp_10296 = 0.0f; \n        v__10217 = v_tmp_10296; \n        int v_index_10297 = v__10207[(v_l_id_10201 + (8 * v_MWidthC_1 * v_wg_id_10200) + (v_MWidthC_1 * v_i_10202))]; \n        if (v_index_10297 < 0) {\n          v__10219_0 = v__10217; \n        } else {\n          if (v_index_10297 >= v_VLength_3) {\n            v__10219_0 = v__10217; \n          } else {\n            v__10219_0 = v__10209[v_index_10297]; \n          }\n        }\n        v__10221_0 = mult(v__10219_0, v__10208[(v_l_id_10201 + (8 * v_MWidthC_1 * v_wg_id_10200) + (v_MWidthC_1 * v_i_10202))]); \n        v__10215 = add(v__10221_0, v__10215); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10203 = 0; \n        v__10226[v_l_id_10201] = id(v__10215); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_109; \n      v_work_idx_109 = 0; \n      int v_l_id_10204 = atomic_inc(&(v_work_idx_109)); \n      while((v_l_id_10204 < 1)){\n        float v_tmp_10300 = 0.0f; \n        v__9384 = v_tmp_10300; \n        /* reduce_seq */\n        for (int v_i_10205 = 0; v_i_10205 < v_MWidthC_1; v_i_10205 = (1 + v_i_10205)) {\n          v__9384 = add(v__9384, v__10226[(v_i_10205 + (v_MWidthC_1 * v_l_id_10204))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10206 = 0; \n          v__10231[v_wg_id_10200] = doubleMultiplyAdd(v__9384, v__10211, v__10210[v_wg_id_10200], v__10212); \n        }\n        /* end map_seq */\n        v_l_id_10204 = atomic_inc(&(v_work_idx_109)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10207",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10208",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10209",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10211",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10212",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10226",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}