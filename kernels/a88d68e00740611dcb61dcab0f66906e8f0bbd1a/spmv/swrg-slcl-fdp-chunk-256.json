{
  "name" : "swrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26181, const global float* restrict v__26182, const global float* restrict v__26183, const global float* restrict v__26184, float v__26185, float v__26186, global float* v__26199, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26189; \n  float v__26191; \n  /* Private Memory */\n  float v__26193_0;\n  \n  float v__26195_0;\n  \n  for (int v_wg_id_26177 = get_group_id(0); v_wg_id_26177 < ((v_MHeight_2)/(256)); v_wg_id_26177 = (v_wg_id_26177 + get_num_groups(0))) {\n    for (int v_l_id_26178 = get_local_id(0); v_l_id_26178 < 256; v_l_id_26178 = (v_l_id_26178 + get_local_size(0))) {\n      float v_tmp_26241 = 0.0f; \n      v__26189 = v_tmp_26241; \n      /* reduce_seq */\n      for (int v_i_26179 = 0; v_i_26179 < v_MWidthC_1; v_i_26179 = (1 + v_i_26179)) {\n        float v_tmp_26242 = 0.0f; \n        v__26191 = v_tmp_26242; \n        int v_index_26243 = v__26181[(v_i_26179 + (256 * v_MWidthC_1 * v_wg_id_26177) + (v_MWidthC_1 * v_l_id_26178))]; \n        if (v_index_26243 < 0) {\n          v__26193_0 = v__26191; \n        } else {\n          if (v_index_26243 >= v_VLength_3) {\n            v__26193_0 = v__26191; \n          } else {\n            v__26193_0 = v__26183[v_index_26243]; \n          }\n        }\n        v__26195_0 = mult(v__26193_0, v__26182[(v_i_26179 + (256 * v_MWidthC_1 * v_wg_id_26177) + (v_MWidthC_1 * v_l_id_26178))]); \n        v__26189 = add(v__26195_0, v__26189); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26180 = 0; \n        v__26199[(v_l_id_26178 + (256 * v_wg_id_26177))] = doubleMultiplyAdd(v__26189, v__26185, v__26184[(v_l_id_26178 + (256 * v_wg_id_26177))], v__26186); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__26181",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26182",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26183",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26185",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26186",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__26199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}