{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47971, const global int* restrict v__47972, const global int* restrict v__47973, const global int* restrict v__47974, int v__47975, int v__47976, global int* v__47990, global int* v__47984, global int* v__47978, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47980; \n  int v__47985; \n  /* Private Memory */\n  int v__47982_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3060 = v__47978; \n    local int v_w_id_47966; \n    if (get_local_id(0) == 0) {\n      v_w_id_47966 = atomic_inc(v_work_idx_3060); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47966 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3058; \n        v_work_idx_3058 = 0; \n        int v_l_id_47967 = atomic_inc(&(v_work_idx_3058)); \n        while((v_l_id_47967 < 8)){\n          /* map_seq */\n          for (int v_i_47968 = 0; v_i_47968 < v_MWidthC_1; v_i_47968 = (1 + v_i_47968)) {\n            int v_tmp_48029 = 0; \n            v__47980 = v_tmp_48029; \n            int v_index_48030 = v__47971[(v_i_47968 + (8 * v_MWidthC_1 * v_w_id_47966) + (v_MWidthC_1 * v_l_id_47967))]; \n            if (v_index_48030 < 0) {\n              v__47982_0 = v__47980; \n            } else {\n              if (v_index_48030 >= v_VLength_3) {\n                v__47982_0 = v__47980; \n              } else {\n                v__47982_0 = v__47973[v_index_48030]; \n              }\n            }\n            v__47984[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_47966) + (-1 * v_i_47968) + (v_MWidthC_1 * v_l_id_47967))] = bool_and(v__47982_0, v__47972[(v_i_47968 + (8 * v_MWidthC_1 * v_w_id_47966) + (v_MWidthC_1 * v_l_id_47967))]); \n          }\n          /* end map_seq */\n          int v_tmp_48031 = 0; \n          v__47985 = v_tmp_48031; \n          /* reduce_seq */\n          for (int v_i_47969 = 0; v_i_47969 < v_MWidthC_1; v_i_47969 = (1 + v_i_47969)) {\n            v__47985 = bool_or(v__47985, v__47984[(v_i_47969 + (8 * v_MWidthC_1 * v_w_id_47966) + (v_MWidthC_1 * v_l_id_47967))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_47970 = 0; \n            v__47990[(v_l_id_47967 + (8 * v_w_id_47966))] = doubleAndOr(v__47985, v__47975, v__47974[(v_l_id_47967 + (8 * v_w_id_47966))], v__47976); \n          }\n          /* end map_seq */\n          v_l_id_47967 = atomic_inc(&(v_work_idx_3058)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47966 = atomic_inc(v_work_idx_3060); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47971",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47973",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47975",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47976",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47978",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}