{
  "name" : "swrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62150, const global int* restrict v__62151, const global int* restrict v__62152, const global int* restrict v__62153, int v__62154, int v__62155, global int* v__62172, global int* v__62162, local int* v__62167, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62158; \n  int v__62163; \n  int v__45239; \n  /* Private Memory */\n  int v__62160_0;\n  \n  for (int v_wg_id_62142 = get_group_id(0); v_wg_id_62142 < v_MHeight_2; v_wg_id_62142 = (v_wg_id_62142 + get_num_groups(0))) {\n    for (int v_l_id_62143 = get_local_id(0); v_l_id_62143 < v_MWidthC_1; v_l_id_62143 = (v_l_id_62143 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_62144 = 0; v_i_62144 < 128; v_i_62144 = (1 + v_i_62144)) {\n        int v_tmp_62237 = 0; \n        v__62158 = v_tmp_62237; \n        int v_index_62238 = v__62150[(v_l_id_62143 + (128 * v_MWidthC_1 * v_wg_id_62142) + (v_MWidthC_1 * v_i_62144))]; \n        if (v_index_62238 < 0) {\n          v__62160_0 = v__62158; \n        } else {\n          if (v_index_62238 >= v_VLength_3) {\n            v__62160_0 = v__62158; \n          } else {\n            v__62160_0 = v__62152[v_index_62238]; \n          }\n        }\n        v__62162[(127 + (128 * v_MWidthC_1 * v_wg_id_62142) + (-1 * v_i_62144) + (128 * v_l_id_62143))] = bool_and(v__62160_0, v__62151[(v_l_id_62143 + (128 * v_MWidthC_1 * v_wg_id_62142) + (v_MWidthC_1 * v_i_62144))]); \n      }\n      /* end map_seq */\n      int v_tmp_62239 = 0; \n      v__62163 = v_tmp_62239; \n      /* reduce_seq */\n      for (int v_i_62145 = 0; v_i_62145 < 128; v_i_62145 = (1 + v_i_62145)) {\n        v__62163 = bool_or(v__62163, v__62162[(v_i_62145 + (128 * v_MWidthC_1 * v_wg_id_62142) + (128 * v_l_id_62143))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62146 = 0; \n        v__62167[v_l_id_62143] = id(v__62163); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_62147 = get_local_id(0); \n      int v_tmp_62242 = 0; \n      v__45239 = v_tmp_62242; \n      /* reduce_seq */\n      for (int v_i_62148 = 0; v_i_62148 < v_MWidthC_1; v_i_62148 = (1 + v_i_62148)) {\n        v__45239 = bool_or(v__45239, v__62167[(v_i_62148 + (v_MWidthC_1 * v_l_id_62147))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62149 = 0; \n        v__62172[v_wg_id_62142] = doubleAndOr(v__45239, v__62154, v__62153[v_wg_id_62142], v__62155); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62150",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62151",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62152",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62154",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62155",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62162",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__62172",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62167",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}