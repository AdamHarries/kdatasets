{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60145, const global int* restrict v__60146, const global int* restrict v__60147, const global int* restrict v__60148, int v__60149, int v__60150, global int* v__60168, global int* v__60152, local int* v__60163, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__60154; \n  int v__60156; \n  int v__45239; \n  /* Private Memory */\n  int v__60158_0;\n  \n  int v__60160_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4164 = v__60152; \n    local int v_w_id_60138; \n    if (get_local_id(0) == 0) {\n      v_w_id_60138 = atomic_inc(v_work_idx_4164); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60138 < v_MHeight_2)){\n      for (int v_l_id_60139 = get_local_id(0); v_l_id_60139 < v_MWidthC_1; v_l_id_60139 = (v_l_id_60139 + get_local_size(0))) {\n        int v_tmp_60231 = 0; \n        v__60154 = v_tmp_60231; \n        /* reduce_seq */\n        for (int v_i_60140 = 0; v_i_60140 < 64; v_i_60140 = (1 + v_i_60140)) {\n          int v_tmp_60232 = 0; \n          v__60156 = v_tmp_60232; \n          int v_index_60233 = v__60145[(v_l_id_60139 + (64 * v_MWidthC_1 * v_w_id_60138) + (v_MWidthC_1 * v_i_60140))]; \n          if (v_index_60233 < 0) {\n            v__60158_0 = v__60156; \n          } else {\n            if (v_index_60233 >= v_VLength_3) {\n              v__60158_0 = v__60156; \n            } else {\n              v__60158_0 = v__60147[v_index_60233]; \n            }\n          }\n          v__60160_0 = bool_and(v__60158_0, v__60146[(v_l_id_60139 + (64 * v_MWidthC_1 * v_w_id_60138) + (v_MWidthC_1 * v_i_60140))]); \n          v__60154 = bool_or(v__60160_0, v__60154); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60141 = 0; \n          v__60163[v_l_id_60139] = id(v__60154); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_60142 = get_local_id(0); \n        int v_tmp_60236 = 0; \n        v__45239 = v_tmp_60236; \n        /* reduce_seq */\n        for (int v_i_60143 = 0; v_i_60143 < v_MWidthC_1; v_i_60143 = (1 + v_i_60143)) {\n          v__45239 = bool_or(v__45239, v__60163[(v_i_60143 + (v_MWidthC_1 * v_l_id_60142))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60144 = 0; \n          v__60168[v_w_id_60138] = doubleAndOr(v__45239, v__60149, v__60148[v_w_id_60138], v__60150); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60138 = atomic_inc(v_work_idx_4164); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60145",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60146",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60147",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60148",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60149",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60150",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60152",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60163",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}