{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58551, const global int* restrict v__58552, const global int* restrict v__58553, const global int* restrict v__58554, int v__58555, int v__58556, global int* v__58569, global int* v__58563, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58559; \n  int v__58564; \n  /* Private Memory */\n  int v__58561_0;\n  \n  for (int v_wg_id_58546 = get_group_id(0); v_wg_id_58546 < ((v_MHeight_2)/(64)); v_wg_id_58546 = (v_wg_id_58546 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4018; \n      v_work_idx_4018 = 0; \n      int v_l_id_58547 = atomic_inc(&(v_work_idx_4018)); \n      while((v_l_id_58547 < 64)){\n        /* map_seq */\n        for (int v_i_58548 = 0; v_i_58548 < v_MWidthC_1; v_i_58548 = (1 + v_i_58548)) {\n          int v_tmp_58609 = 0; \n          v__58559 = v_tmp_58609; \n          int v_index_58610 = v__58551[(v_i_58548 + (64 * v_MWidthC_1 * v_wg_id_58546) + (v_MWidthC_1 * v_l_id_58547))]; \n          if (v_index_58610 < 0) {\n            v__58561_0 = v__58559; \n          } else {\n            if (v_index_58610 >= v_VLength_3) {\n              v__58561_0 = v__58559; \n            } else {\n              v__58561_0 = v__58553[v_index_58610]; \n            }\n          }\n          v__58563[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_58546) + (-1 * v_i_58548) + (v_MWidthC_1 * v_l_id_58547))] = bool_and(v__58561_0, v__58552[(v_i_58548 + (64 * v_MWidthC_1 * v_wg_id_58546) + (v_MWidthC_1 * v_l_id_58547))]); \n        }\n        /* end map_seq */\n        int v_tmp_58611 = 0; \n        v__58564 = v_tmp_58611; \n        /* reduce_seq */\n        for (int v_i_58549 = 0; v_i_58549 < v_MWidthC_1; v_i_58549 = (1 + v_i_58549)) {\n          v__58564 = bool_or(v__58564, v__58563[(v_i_58549 + (64 * v_MWidthC_1 * v_wg_id_58546) + (v_MWidthC_1 * v_l_id_58547))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58550 = 0; \n          v__58569[(v_l_id_58547 + (64 * v_wg_id_58546))] = doubleAndOr(v__58564, v__58555, v__58554[(v_l_id_58547 + (64 * v_wg_id_58546))], v__58556); \n        }\n        /* end map_seq */\n        v_l_id_58547 = atomic_inc(&(v_work_idx_4018)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58551",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58552",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58553",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58555",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58556",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}