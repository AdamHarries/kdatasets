{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67755, const global int* restrict v__67756, const global int* restrict v__67757, const global int* restrict v__67758, int v__67759, int v__67760, global int* v__67777, global int* v__67767, local int* v__67772, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__67763; \n  int v__67768; \n  int v__45239; \n  /* Private Memory */\n  int v__67765_0;\n  \n  for (int v_wg_id_67747 = get_group_id(0); v_wg_id_67747 < v_MHeight_2; v_wg_id_67747 = (v_wg_id_67747 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4855; \n      v_work_idx_4855 = 0; \n      int v_l_id_67748 = atomic_inc(&(v_work_idx_4855)); \n      while((v_l_id_67748 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_67749 = 0; v_i_67749 < 256; v_i_67749 = (1 + v_i_67749)) {\n          int v_tmp_67830 = 0; \n          v__67763 = v_tmp_67830; \n          int v_index_67831 = v__67755[(v_l_id_67748 + (256 * v_MWidthC_1 * v_wg_id_67747) + (v_MWidthC_1 * v_i_67749))]; \n          if (v_index_67831 < 0) {\n            v__67765_0 = v__67763; \n          } else {\n            if (v_index_67831 >= v_VLength_3) {\n              v__67765_0 = v__67763; \n            } else {\n              v__67765_0 = v__67757[v_index_67831]; \n            }\n          }\n          v__67767[(255 + (256 * v_MWidthC_1 * v_wg_id_67747) + (-1 * v_i_67749) + (256 * v_l_id_67748))] = bool_and(v__67765_0, v__67756[(v_l_id_67748 + (256 * v_MWidthC_1 * v_wg_id_67747) + (v_MWidthC_1 * v_i_67749))]); \n        }\n        /* end map_seq */\n        int v_tmp_67832 = 0; \n        v__67768 = v_tmp_67832; \n        /* reduce_seq */\n        for (int v_i_67750 = 0; v_i_67750 < 256; v_i_67750 = (1 + v_i_67750)) {\n          v__67768 = bool_or(v__67768, v__67767[(v_i_67750 + (256 * v_MWidthC_1 * v_wg_id_67747) + (256 * v_l_id_67748))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67751 = 0; \n          v__67772[v_l_id_67748] = id(v__67768); \n        }\n        /* end map_seq */\n        v_l_id_67748 = atomic_inc(&(v_work_idx_4855)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4849; \n      v_work_idx_4849 = 0; \n      int v_l_id_67752 = atomic_inc(&(v_work_idx_4849)); \n      while((v_l_id_67752 < 1)){\n        int v_tmp_67835 = 0; \n        v__45239 = v_tmp_67835; \n        /* reduce_seq */\n        for (int v_i_67753 = 0; v_i_67753 < v_MWidthC_1; v_i_67753 = (1 + v_i_67753)) {\n          v__45239 = bool_or(v__45239, v__67772[(v_i_67753 + (v_MWidthC_1 * v_l_id_67752))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67754 = 0; \n          v__67777[v_wg_id_67747] = doubleAndOr(v__45239, v__67759, v__67758[v_wg_id_67747], v__67760); \n        }\n        /* end map_seq */\n        v_l_id_67752 = atomic_inc(&(v_work_idx_4849)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__67755",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67756",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67757",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67758",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67759",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67760",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67767",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__67777",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67772",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}