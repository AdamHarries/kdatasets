{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44567, const global int* restrict v__44568, const global int* restrict v__44569, const global int* restrict v__44570, int v__44571, int v__44572, global int* v__44585, global int* v__44579, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44575; \n  int v__44580; \n  /* Private Memory */\n  int v__44577_0;\n  \n  for (int v_wg_id_44563 = get_group_id(0); v_wg_id_44563 < v_MHeight_2; v_wg_id_44563 = (v_wg_id_44563 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_2763; \n      v_l_id_2763 = 0; \n      int v_l_id_44564 = atomic_inc(&(v_l_id_2763)); \n      while((v_l_id_44564 < v_MWidthC_1)){\n        int v_tmp_44617 = 0; \n        v__44575 = v_tmp_44617; \n        int v_index_44618 = v__44567[(v_l_id_44564 + (v_MWidthC_1 * v_wg_id_44563))]; \n        if (v_index_44618 < 0) {\n          v__44577_0 = v__44575; \n        } else {\n          if (v_index_44618 >= v_VLength_3) {\n            v__44577_0 = v__44575; \n          } else {\n            v__44577_0 = v__44569[v_index_44618]; \n          }\n        }\n        v__44579[(-1 + v_MWidthC_1 + (-1 * v_l_id_44564) + (v_MWidthC_1 * v_wg_id_44563))] = bool_and(v__44577_0, v__44568[(v_l_id_44564 + (v_MWidthC_1 * v_wg_id_44563))]); \n        v_l_id_44564 = atomic_inc(&(v_l_id_2763)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    int v_tmp_44619 = 0; \n    v__44580 = v_tmp_44619; \n    /* reduce_seq */\n    for (int v_i_44565 = 0; v_i_44565 < v_MWidthC_1; v_i_44565 = (1 + v_i_44565)) {\n      v__44580 = bool_or(v__44580, v__44579[(v_i_44565 + (v_MWidthC_1 * v_wg_id_44563))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_44566 = 0; \n      v__44585[v_wg_id_44563] = doubleAndOr(v__44580, v__44571, v__44570[v_wg_id_44563], v__44572); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__44567",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44568",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44569",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44570",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44571",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44572",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__44585",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}