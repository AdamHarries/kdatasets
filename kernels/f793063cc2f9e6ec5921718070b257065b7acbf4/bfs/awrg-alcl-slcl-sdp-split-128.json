{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65339, const global int* restrict v__65340, const global int* restrict v__65341, const global int* restrict v__65342, int v__65343, int v__65344, global int* v__65362, global int* v__65352, global int* v__65346, local int* v__65357, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__65348; \n  int v__65353; \n  int v__45239; \n  /* Private Memory */\n  int v__65350_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4642 = v__65346; \n    local int v_w_id_65331; \n    if (get_local_id(0) == 0) {\n      v_w_id_65331 = atomic_inc(v_work_idx_4642); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65331 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4640; \n        v_work_idx_4640 = 0; \n        int v_l_id_65332 = atomic_inc(&(v_work_idx_4640)); \n        while((v_l_id_65332 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_65333 = 0; v_i_65333 < 128; v_i_65333 = (1 + v_i_65333)) {\n            int v_tmp_65417 = 0; \n            v__65348 = v_tmp_65417; \n            int v_index_65418 = v__65339[(v_l_id_65332 + (128 * v_MWidthC_1 * v_w_id_65331) + (v_MWidthC_1 * v_i_65333))]; \n            if (v_index_65418 < 0) {\n              v__65350_0 = v__65348; \n            } else {\n              if (v_index_65418 >= v_VLength_3) {\n                v__65350_0 = v__65348; \n              } else {\n                v__65350_0 = v__65341[v_index_65418]; \n              }\n            }\n            v__65352[(127 + (128 * v_MWidthC_1 * v_w_id_65331) + (-1 * v_i_65333) + (128 * v_l_id_65332))] = bool_and(v__65350_0, v__65340[(v_l_id_65332 + (128 * v_MWidthC_1 * v_w_id_65331) + (v_MWidthC_1 * v_i_65333))]); \n          }\n          /* end map_seq */\n          int v_tmp_65419 = 0; \n          v__65353 = v_tmp_65419; \n          /* reduce_seq */\n          for (int v_i_65334 = 0; v_i_65334 < 128; v_i_65334 = (1 + v_i_65334)) {\n            v__65353 = bool_or(v__65353, v__65352[(v_i_65334 + (128 * v_MWidthC_1 * v_w_id_65331) + (128 * v_l_id_65332))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_65335 = 0; \n            v__65357[v_l_id_65332] = id(v__65353); \n          }\n          /* end map_seq */\n          v_l_id_65332 = atomic_inc(&(v_work_idx_4640)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65336 = get_local_id(0); \n        int v_tmp_65422 = 0; \n        v__45239 = v_tmp_65422; \n        /* reduce_seq */\n        for (int v_i_65337 = 0; v_i_65337 < v_MWidthC_1; v_i_65337 = (1 + v_i_65337)) {\n          v__45239 = bool_or(v__45239, v__65357[(v_i_65337 + (v_MWidthC_1 * v_l_id_65336))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65338 = 0; \n          v__65362[v_w_id_65331] = doubleAndOr(v__45239, v__65343, v__65342[v_w_id_65331], v__65344); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65331 = atomic_inc(v_work_idx_4642); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65339",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65340",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65341",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65342",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65343",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65344",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65352",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65346",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65357",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}