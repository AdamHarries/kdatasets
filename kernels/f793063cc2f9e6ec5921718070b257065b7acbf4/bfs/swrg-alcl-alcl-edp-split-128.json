{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63711, const global int* restrict v__63712, const global int* restrict v__63713, const global int* restrict v__63714, int v__63715, int v__63716, global int* v__63735, local int* v__63730, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__63719; \n  int v__63721; \n  int v__45239; \n  /* Private Memory */\n  int v__63723_0;\n  \n  int v__63725_0;\n  \n  int v__63729_0;\n  \n  for (int v_wg_id_63704 = get_group_id(0); v_wg_id_63704 < v_MHeight_2; v_wg_id_63704 = (v_wg_id_63704 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4491; \n      v_work_idx_4491 = 0; \n      int v_l_id_63705 = atomic_inc(&(v_work_idx_4491)); \n      while((v_l_id_63705 < v_MWidthC_1)){\n        int v_tmp_63791 = 0; \n        v__63719 = v_tmp_63791; \n        /* reduce_while_seq */\n        for (int v_i_63706 = 0; v_i_63706 < 128; v_i_63706 = (1 + v_i_63706)) {\n          v__63729_0 = check(v__63719, v__63711[(v_l_id_63705 + (128 * v_MWidthC_1 * v_wg_id_63704) + (v_MWidthC_1 * v_i_63706))]); \n          if (v__63729_0) {\n          } else {\n            break;\n          }\n          int v_tmp_63792 = 0; \n          v__63721 = v_tmp_63792; \n          int v_index_63793 = v__63711[(v_l_id_63705 + (128 * v_MWidthC_1 * v_wg_id_63704) + (v_MWidthC_1 * v_i_63706))]; \n          if (v_index_63793 < 0) {\n            v__63723_0 = v__63721; \n          } else {\n            if (v_index_63793 >= v_VLength_3) {\n              v__63723_0 = v__63721; \n            } else {\n              v__63723_0 = v__63713[v_index_63793]; \n            }\n          }\n          v__63725_0 = bool_and(v__63723_0, v__63712[(v_l_id_63705 + (128 * v_MWidthC_1 * v_wg_id_63704) + (v_MWidthC_1 * v_i_63706))]); \n          v__63719 = bool_or(v__63725_0, v__63719); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63707 = 0; \n          v__63730[v_l_id_63705] = id(v__63719); \n        }\n        /* end map_seq */\n        v_l_id_63705 = atomic_inc(&(v_work_idx_4491)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4486; \n      v_work_idx_4486 = 0; \n      int v_l_id_63708 = atomic_inc(&(v_work_idx_4486)); \n      while((v_l_id_63708 < 1)){\n        int v_tmp_63796 = 0; \n        v__45239 = v_tmp_63796; \n        /* reduce_seq */\n        for (int v_i_63709 = 0; v_i_63709 < v_MWidthC_1; v_i_63709 = (1 + v_i_63709)) {\n          v__45239 = bool_or(v__45239, v__63730[(v_i_63709 + (v_MWidthC_1 * v_l_id_63708))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63710 = 0; \n          v__63735[v_wg_id_63704] = doubleAndOr(v__45239, v__63715, v__63714[v_wg_id_63704], v__63716); \n        }\n        /* end map_seq */\n        v_l_id_63708 = atomic_inc(&(v_work_idx_4486)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63711",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63712",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63713",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63715",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63716",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__63735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63730",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}