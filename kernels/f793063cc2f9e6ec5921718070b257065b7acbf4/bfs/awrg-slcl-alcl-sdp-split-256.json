{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68825, const global int* restrict v__68826, const global int* restrict v__68827, const global int* restrict v__68828, int v__68829, int v__68830, global int* v__68848, global int* v__68838, global int* v__68832, local int* v__68843, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68834; \n  int v__68839; \n  int v__45239; \n  /* Private Memory */\n  int v__68836_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4952 = v__68832; \n    local int v_w_id_68817; \n    if (get_local_id(0) == 0) {\n      v_w_id_68817 = atomic_inc(v_work_idx_4952); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68817 < v_MHeight_2)){\n      for (int v_l_id_68818 = get_local_id(0); v_l_id_68818 < v_MWidthC_1; v_l_id_68818 = (v_l_id_68818 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_68819 = 0; v_i_68819 < 256; v_i_68819 = (1 + v_i_68819)) {\n          int v_tmp_68907 = 0; \n          v__68834 = v_tmp_68907; \n          int v_index_68908 = v__68825[(v_l_id_68818 + (256 * v_MWidthC_1 * v_w_id_68817) + (v_MWidthC_1 * v_i_68819))]; \n          if (v_index_68908 < 0) {\n            v__68836_0 = v__68834; \n          } else {\n            if (v_index_68908 >= v_VLength_3) {\n              v__68836_0 = v__68834; \n            } else {\n              v__68836_0 = v__68827[v_index_68908]; \n            }\n          }\n          v__68838[(255 + (256 * v_MWidthC_1 * v_w_id_68817) + (-1 * v_i_68819) + (256 * v_l_id_68818))] = bool_and(v__68836_0, v__68826[(v_l_id_68818 + (256 * v_MWidthC_1 * v_w_id_68817) + (v_MWidthC_1 * v_i_68819))]); \n        }\n        /* end map_seq */\n        int v_tmp_68909 = 0; \n        v__68839 = v_tmp_68909; \n        /* reduce_seq */\n        for (int v_i_68820 = 0; v_i_68820 < 256; v_i_68820 = (1 + v_i_68820)) {\n          v__68839 = bool_or(v__68839, v__68838[(v_i_68820 + (256 * v_MWidthC_1 * v_w_id_68817) + (256 * v_l_id_68818))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68821 = 0; \n          v__68843[v_l_id_68818] = id(v__68839); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4945; \n        v_work_idx_4945 = 0; \n        int v_l_id_68822 = atomic_inc(&(v_work_idx_4945)); \n        while((v_l_id_68822 < 1)){\n          int v_tmp_68912 = 0; \n          v__45239 = v_tmp_68912; \n          /* reduce_seq */\n          for (int v_i_68823 = 0; v_i_68823 < v_MWidthC_1; v_i_68823 = (1 + v_i_68823)) {\n            v__45239 = bool_or(v__45239, v__68843[(v_i_68823 + (v_MWidthC_1 * v_l_id_68822))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_68824 = 0; \n            v__68848[v_w_id_68817] = doubleAndOr(v__45239, v__68829, v__68828[v_w_id_68817], v__68830); \n          }\n          /* end map_seq */\n          v_l_id_68822 = atomic_inc(&(v_work_idx_4945)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_68817 = atomic_inc(v_work_idx_4952); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68825",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68826",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68827",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68829",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68830",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68838",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68832",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68848",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68843",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}