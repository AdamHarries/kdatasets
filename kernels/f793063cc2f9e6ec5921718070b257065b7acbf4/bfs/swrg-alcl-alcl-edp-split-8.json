{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46783, const global int* restrict v__46784, const global int* restrict v__46785, const global int* restrict v__46786, int v__46787, int v__46788, global int* v__46807, local int* v__46802, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46791; \n  int v__46793; \n  int v__45239; \n  /* Private Memory */\n  int v__46795_0;\n  \n  int v__46797_0;\n  \n  int v__46801_0;\n  \n  for (int v_wg_id_46776 = get_group_id(0); v_wg_id_46776 < v_MHeight_2; v_wg_id_46776 = (v_wg_id_46776 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2955; \n      v_work_idx_2955 = 0; \n      int v_l_id_46777 = atomic_inc(&(v_work_idx_2955)); \n      while((v_l_id_46777 < v_MWidthC_1)){\n        int v_tmp_46863 = 0; \n        v__46791 = v_tmp_46863; \n        /* reduce_while_seq */\n        for (int v_i_46778 = 0; v_i_46778 < 8; v_i_46778 = (1 + v_i_46778)) {\n          v__46801_0 = check(v__46791, v__46783[(v_l_id_46777 + (8 * v_MWidthC_1 * v_wg_id_46776) + (v_MWidthC_1 * v_i_46778))]); \n          if (v__46801_0) {\n          } else {\n            break;\n          }\n          int v_tmp_46864 = 0; \n          v__46793 = v_tmp_46864; \n          int v_index_46865 = v__46783[(v_l_id_46777 + (8 * v_MWidthC_1 * v_wg_id_46776) + (v_MWidthC_1 * v_i_46778))]; \n          if (v_index_46865 < 0) {\n            v__46795_0 = v__46793; \n          } else {\n            if (v_index_46865 >= v_VLength_3) {\n              v__46795_0 = v__46793; \n            } else {\n              v__46795_0 = v__46785[v_index_46865]; \n            }\n          }\n          v__46797_0 = bool_and(v__46795_0, v__46784[(v_l_id_46777 + (8 * v_MWidthC_1 * v_wg_id_46776) + (v_MWidthC_1 * v_i_46778))]); \n          v__46791 = bool_or(v__46797_0, v__46791); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46779 = 0; \n          v__46802[v_l_id_46777] = id(v__46791); \n        }\n        /* end map_seq */\n        v_l_id_46777 = atomic_inc(&(v_work_idx_2955)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2950; \n      v_work_idx_2950 = 0; \n      int v_l_id_46780 = atomic_inc(&(v_work_idx_2950)); \n      while((v_l_id_46780 < 1)){\n        int v_tmp_46868 = 0; \n        v__45239 = v_tmp_46868; \n        /* reduce_seq */\n        for (int v_i_46781 = 0; v_i_46781 < v_MWidthC_1; v_i_46781 = (1 + v_i_46781)) {\n          v__45239 = bool_or(v__45239, v__46802[(v_i_46781 + (v_MWidthC_1 * v_l_id_46780))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46782 = 0; \n          v__46807[v_wg_id_46776] = doubleAndOr(v__45239, v__46787, v__46786[v_wg_id_46776], v__46788); \n        }\n        /* end map_seq */\n        v_l_id_46780 = atomic_inc(&(v_work_idx_2950)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__46783",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46784",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46785",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46786",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46787",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46788",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__46807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46802",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}