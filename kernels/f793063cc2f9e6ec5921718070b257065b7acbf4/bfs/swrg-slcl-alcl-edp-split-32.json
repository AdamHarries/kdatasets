{
  "name" : "swrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54214, const global int* restrict v__54215, const global int* restrict v__54216, const global int* restrict v__54217, int v__54218, int v__54219, global int* v__54238, local int* v__54233, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54222; \n  int v__54224; \n  int v__45239; \n  /* Private Memory */\n  int v__54226_0;\n  \n  int v__54228_0;\n  \n  int v__54232_0;\n  \n  for (int v_wg_id_54207 = get_group_id(0); v_wg_id_54207 < v_MHeight_2; v_wg_id_54207 = (v_wg_id_54207 + get_num_groups(0))) {\n    for (int v_l_id_54208 = get_local_id(0); v_l_id_54208 < v_MWidthC_1; v_l_id_54208 = (v_l_id_54208 + get_local_size(0))) {\n      int v_tmp_54302 = 0; \n      v__54222 = v_tmp_54302; \n      /* reduce_while_seq */\n      for (int v_i_54209 = 0; v_i_54209 < 32; v_i_54209 = (1 + v_i_54209)) {\n        v__54232_0 = check(v__54222, v__54214[(v_l_id_54208 + (32 * v_MWidthC_1 * v_wg_id_54207) + (v_MWidthC_1 * v_i_54209))]); \n        if (v__54232_0) {\n        } else {\n          break;\n        }\n        int v_tmp_54303 = 0; \n        v__54224 = v_tmp_54303; \n        int v_index_54304 = v__54214[(v_l_id_54208 + (32 * v_MWidthC_1 * v_wg_id_54207) + (v_MWidthC_1 * v_i_54209))]; \n        if (v_index_54304 < 0) {\n          v__54226_0 = v__54224; \n        } else {\n          if (v_index_54304 >= v_VLength_3) {\n            v__54226_0 = v__54224; \n          } else {\n            v__54226_0 = v__54216[v_index_54304]; \n          }\n        }\n        v__54228_0 = bool_and(v__54226_0, v__54215[(v_l_id_54208 + (32 * v_MWidthC_1 * v_wg_id_54207) + (v_MWidthC_1 * v_i_54209))]); \n        v__54222 = bool_or(v__54228_0, v__54222); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_54210 = 0; \n        v__54233[v_l_id_54208] = id(v__54222); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3623; \n      v_work_idx_3623 = 0; \n      int v_l_id_54211 = atomic_inc(&(v_work_idx_3623)); \n      while((v_l_id_54211 < 1)){\n        int v_tmp_54307 = 0; \n        v__45239 = v_tmp_54307; \n        /* reduce_seq */\n        for (int v_i_54212 = 0; v_i_54212 < v_MWidthC_1; v_i_54212 = (1 + v_i_54212)) {\n          v__45239 = bool_or(v__45239, v__54233[(v_i_54212 + (v_MWidthC_1 * v_l_id_54211))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54213 = 0; \n          v__54238[v_wg_id_54207] = doubleAndOr(v__45239, v__54218, v__54217[v_wg_id_54207], v__54219); \n        }\n        /* end map_seq */\n        v_l_id_54211 = atomic_inc(&(v_work_idx_3623)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__54214",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54215",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54216",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54217",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54218",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54219",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54233",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}