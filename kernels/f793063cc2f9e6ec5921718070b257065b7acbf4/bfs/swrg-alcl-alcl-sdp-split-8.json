{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46595, const global int* restrict v__46596, const global int* restrict v__46597, const global int* restrict v__46598, int v__46599, int v__46600, global int* v__46617, global int* v__46607, local int* v__46612, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46603; \n  int v__46608; \n  int v__45239; \n  /* Private Memory */\n  int v__46605_0;\n  \n  for (int v_wg_id_46587 = get_group_id(0); v_wg_id_46587 < v_MHeight_2; v_wg_id_46587 = (v_wg_id_46587 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2935; \n      v_work_idx_2935 = 0; \n      int v_l_id_46588 = atomic_inc(&(v_work_idx_2935)); \n      while((v_l_id_46588 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_46589 = 0; v_i_46589 < 8; v_i_46589 = (1 + v_i_46589)) {\n          int v_tmp_46670 = 0; \n          v__46603 = v_tmp_46670; \n          int v_index_46671 = v__46595[(v_l_id_46588 + (8 * v_MWidthC_1 * v_wg_id_46587) + (v_MWidthC_1 * v_i_46589))]; \n          if (v_index_46671 < 0) {\n            v__46605_0 = v__46603; \n          } else {\n            if (v_index_46671 >= v_VLength_3) {\n              v__46605_0 = v__46603; \n            } else {\n              v__46605_0 = v__46597[v_index_46671]; \n            }\n          }\n          v__46607[(7 + (8 * v_MWidthC_1 * v_wg_id_46587) + (-1 * v_i_46589) + (8 * v_l_id_46588))] = bool_and(v__46605_0, v__46596[(v_l_id_46588 + (8 * v_MWidthC_1 * v_wg_id_46587) + (v_MWidthC_1 * v_i_46589))]); \n        }\n        /* end map_seq */\n        int v_tmp_46672 = 0; \n        v__46608 = v_tmp_46672; \n        /* reduce_seq */\n        for (int v_i_46590 = 0; v_i_46590 < 8; v_i_46590 = (1 + v_i_46590)) {\n          v__46608 = bool_or(v__46608, v__46607[(v_i_46590 + (8 * v_MWidthC_1 * v_wg_id_46587) + (8 * v_l_id_46588))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46591 = 0; \n          v__46612[v_l_id_46588] = id(v__46608); \n        }\n        /* end map_seq */\n        v_l_id_46588 = atomic_inc(&(v_work_idx_2935)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2929; \n      v_work_idx_2929 = 0; \n      int v_l_id_46592 = atomic_inc(&(v_work_idx_2929)); \n      while((v_l_id_46592 < 1)){\n        int v_tmp_46675 = 0; \n        v__45239 = v_tmp_46675; \n        /* reduce_seq */\n        for (int v_i_46593 = 0; v_i_46593 < v_MWidthC_1; v_i_46593 = (1 + v_i_46593)) {\n          v__45239 = bool_or(v__45239, v__46612[(v_i_46593 + (v_MWidthC_1 * v_l_id_46592))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46594 = 0; \n          v__46617[v_wg_id_46587] = doubleAndOr(v__45239, v__46599, v__46598[v_wg_id_46587], v__46600); \n        }\n        /* end map_seq */\n        v_l_id_46592 = atomic_inc(&(v_work_idx_2929)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46595",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46596",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46597",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46599",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46600",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46607",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__46617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46612",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}