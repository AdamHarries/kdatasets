{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45434, const global int* restrict v__45435, const global int* restrict v__45436, const global int* restrict v__45437, int v__45438, int v__45439, global int* v__45458, local int* v__45453, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45442; \n  int v__45444; \n  int v__45239; \n  /* Private Memory */\n  int v__45446_0;\n  \n  int v__45448_0;\n  \n  int v__45452_0;\n  \n  for (int v_wg_id_45427 = get_group_id(0); v_wg_id_45427 < v_MHeight_2; v_wg_id_45427 = (v_wg_id_45427 + get_num_groups(0))) {\n    for (int v_l_id_45428 = get_local_id(0); v_l_id_45428 < v_MWidthC_1; v_l_id_45428 = (v_l_id_45428 + get_local_size(0))) {\n      int v_tmp_45526 = 0; \n      v__45442 = v_tmp_45526; \n      /* reduce_while_seq */\n      for (int v_i_45429 = 0; v_i_45429 < 8; v_i_45429 = (1 + v_i_45429)) {\n        v__45452_0 = check(v__45442, v__45434[(v_l_id_45428 + (8 * v_MWidthC_1 * v_wg_id_45427) + (v_MWidthC_1 * v_i_45429))]); \n        if (v__45452_0) {\n        } else {\n          break;\n        }\n        int v_tmp_45527 = 0; \n        v__45444 = v_tmp_45527; \n        int v_index_45528 = v__45434[(v_l_id_45428 + (8 * v_MWidthC_1 * v_wg_id_45427) + (v_MWidthC_1 * v_i_45429))]; \n        if (v_index_45528 < 0) {\n          v__45446_0 = v__45444; \n        } else {\n          if (v_index_45528 >= v_VLength_3) {\n            v__45446_0 = v__45444; \n          } else {\n            v__45446_0 = v__45436[v_index_45528]; \n          }\n        }\n        v__45448_0 = bool_and(v__45446_0, v__45435[(v_l_id_45428 + (8 * v_MWidthC_1 * v_wg_id_45427) + (v_MWidthC_1 * v_i_45429))]); \n        v__45442 = bool_or(v__45448_0, v__45442); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45430 = 0; \n        v__45453[v_l_id_45428] = id(v__45442); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_45431 = get_local_id(0); \n      int v_tmp_45531 = 0; \n      v__45239 = v_tmp_45531; \n      /* reduce_seq */\n      for (int v_i_45432 = 0; v_i_45432 < v_MWidthC_1; v_i_45432 = (1 + v_i_45432)) {\n        v__45239 = bool_or(v__45239, v__45453[(v_i_45432 + (v_MWidthC_1 * v_l_id_45431))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45433 = 0; \n        v__45458[v_wg_id_45427] = doubleAndOr(v__45239, v__45438, v__45437[v_wg_id_45427], v__45439); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__45434",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45435",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45436",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45437",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45438",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45439",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__45458",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45453",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}