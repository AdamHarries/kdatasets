{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54955, const global int* restrict v__54956, const global int* restrict v__54957, const global int* restrict v__54958, int v__54959, int v__54960, global int* v__54979, local int* v__54974, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54963; \n  int v__54965; \n  int v__45239; \n  /* Private Memory */\n  int v__54967_0;\n  \n  int v__54969_0;\n  \n  int v__54973_0;\n  \n  for (int v_wg_id_54948 = get_group_id(0); v_wg_id_54948 < v_MHeight_2; v_wg_id_54948 = (v_wg_id_54948 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3692; \n      v_work_idx_3692 = 0; \n      int v_l_id_54949 = atomic_inc(&(v_work_idx_3692)); \n      while((v_l_id_54949 < v_MWidthC_1)){\n        int v_tmp_55039 = 0; \n        v__54963 = v_tmp_55039; \n        /* reduce_while_seq */\n        for (int v_i_54950 = 0; v_i_54950 < 32; v_i_54950 = (1 + v_i_54950)) {\n          v__54973_0 = check(v__54963, v__54955[(v_l_id_54949 + (32 * v_MWidthC_1 * v_wg_id_54948) + (v_MWidthC_1 * v_i_54950))]); \n          if (v__54973_0) {\n          } else {\n            break;\n          }\n          int v_tmp_55040 = 0; \n          v__54965 = v_tmp_55040; \n          int v_index_55041 = v__54955[(v_l_id_54949 + (32 * v_MWidthC_1 * v_wg_id_54948) + (v_MWidthC_1 * v_i_54950))]; \n          if (v_index_55041 < 0) {\n            v__54967_0 = v__54965; \n          } else {\n            if (v_index_55041 >= v_VLength_3) {\n              v__54967_0 = v__54965; \n            } else {\n              v__54967_0 = v__54957[v_index_55041]; \n            }\n          }\n          v__54969_0 = bool_and(v__54967_0, v__54956[(v_l_id_54949 + (32 * v_MWidthC_1 * v_wg_id_54948) + (v_MWidthC_1 * v_i_54950))]); \n          v__54963 = bool_or(v__54969_0, v__54963); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54951 = 0; \n          v__54974[v_l_id_54949] = id(v__54963); \n        }\n        /* end map_seq */\n        v_l_id_54949 = atomic_inc(&(v_work_idx_3692)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_54952 = get_local_id(0); \n      int v_tmp_55044 = 0; \n      v__45239 = v_tmp_55044; \n      /* reduce_seq */\n      for (int v_i_54953 = 0; v_i_54953 < v_MWidthC_1; v_i_54953 = (1 + v_i_54953)) {\n        v__45239 = bool_or(v__45239, v__54974[(v_i_54953 + (v_MWidthC_1 * v_l_id_54952))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_54954 = 0; \n        v__54979[v_wg_id_54948] = doubleAndOr(v__45239, v__54959, v__54958[v_wg_id_54948], v__54960); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__54955",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54956",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54957",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54958",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54959",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54960",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54979",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54974",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}