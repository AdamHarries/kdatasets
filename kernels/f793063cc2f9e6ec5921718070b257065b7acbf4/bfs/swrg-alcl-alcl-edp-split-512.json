{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72175, const global int* restrict v__72176, const global int* restrict v__72177, const global int* restrict v__72178, int v__72179, int v__72180, global int* v__72199, local int* v__72194, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__72183; \n  int v__72185; \n  int v__45239; \n  /* Private Memory */\n  int v__72187_0;\n  \n  int v__72189_0;\n  \n  int v__72193_0;\n  \n  for (int v_wg_id_72168 = get_group_id(0); v_wg_id_72168 < v_MHeight_2; v_wg_id_72168 = (v_wg_id_72168 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5259; \n      v_work_idx_5259 = 0; \n      int v_l_id_72169 = atomic_inc(&(v_work_idx_5259)); \n      while((v_l_id_72169 < v_MWidthC_1)){\n        int v_tmp_72255 = 0; \n        v__72183 = v_tmp_72255; \n        /* reduce_while_seq */\n        for (int v_i_72170 = 0; v_i_72170 < 512; v_i_72170 = (1 + v_i_72170)) {\n          v__72193_0 = check(v__72183, v__72175[(v_l_id_72169 + (512 * v_MWidthC_1 * v_wg_id_72168) + (v_MWidthC_1 * v_i_72170))]); \n          if (v__72193_0) {\n          } else {\n            break;\n          }\n          int v_tmp_72256 = 0; \n          v__72185 = v_tmp_72256; \n          int v_index_72257 = v__72175[(v_l_id_72169 + (512 * v_MWidthC_1 * v_wg_id_72168) + (v_MWidthC_1 * v_i_72170))]; \n          if (v_index_72257 < 0) {\n            v__72187_0 = v__72185; \n          } else {\n            if (v_index_72257 >= v_VLength_3) {\n              v__72187_0 = v__72185; \n            } else {\n              v__72187_0 = v__72177[v_index_72257]; \n            }\n          }\n          v__72189_0 = bool_and(v__72187_0, v__72176[(v_l_id_72169 + (512 * v_MWidthC_1 * v_wg_id_72168) + (v_MWidthC_1 * v_i_72170))]); \n          v__72183 = bool_or(v__72189_0, v__72183); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72171 = 0; \n          v__72194[v_l_id_72169] = id(v__72183); \n        }\n        /* end map_seq */\n        v_l_id_72169 = atomic_inc(&(v_work_idx_5259)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5254; \n      v_work_idx_5254 = 0; \n      int v_l_id_72172 = atomic_inc(&(v_work_idx_5254)); \n      while((v_l_id_72172 < 1)){\n        int v_tmp_72260 = 0; \n        v__45239 = v_tmp_72260; \n        /* reduce_seq */\n        for (int v_i_72173 = 0; v_i_72173 < v_MWidthC_1; v_i_72173 = (1 + v_i_72173)) {\n          v__45239 = bool_or(v__45239, v__72194[(v_i_72173 + (v_MWidthC_1 * v_l_id_72172))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72174 = 0; \n          v__72199[v_wg_id_72168] = doubleAndOr(v__45239, v__72179, v__72178[v_wg_id_72168], v__72180); \n        }\n        /* end map_seq */\n        v_l_id_72172 = atomic_inc(&(v_work_idx_5254)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__72175",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72176",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72177",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72179",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72180",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__72199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72194",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}