{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66706, const global int* restrict v__66707, const global int* restrict v__66708, const global int* restrict v__66709, int v__66710, int v__66711, global int* v__66728, global int* v__66718, local int* v__66723, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__66714; \n  int v__66719; \n  int v__45239; \n  /* Private Memory */\n  int v__66716_0;\n  \n  for (int v_wg_id_66698 = get_group_id(0); v_wg_id_66698 < v_MHeight_2; v_wg_id_66698 = (v_wg_id_66698 + get_num_groups(0))) {\n    for (int v_l_id_66699 = get_local_id(0); v_l_id_66699 < v_MWidthC_1; v_l_id_66699 = (v_l_id_66699 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_66700 = 0; v_i_66700 < 256; v_i_66700 = (1 + v_i_66700)) {\n        int v_tmp_66789 = 0; \n        v__66714 = v_tmp_66789; \n        int v_index_66790 = v__66706[(v_l_id_66699 + (256 * v_MWidthC_1 * v_wg_id_66698) + (v_MWidthC_1 * v_i_66700))]; \n        if (v_index_66790 < 0) {\n          v__66716_0 = v__66714; \n        } else {\n          if (v_index_66790 >= v_VLength_3) {\n            v__66716_0 = v__66714; \n          } else {\n            v__66716_0 = v__66708[v_index_66790]; \n          }\n        }\n        v__66718[(255 + (256 * v_MWidthC_1 * v_wg_id_66698) + (-1 * v_i_66700) + (256 * v_l_id_66699))] = bool_and(v__66716_0, v__66707[(v_l_id_66699 + (256 * v_MWidthC_1 * v_wg_id_66698) + (v_MWidthC_1 * v_i_66700))]); \n      }\n      /* end map_seq */\n      int v_tmp_66791 = 0; \n      v__66719 = v_tmp_66791; \n      /* reduce_seq */\n      for (int v_i_66701 = 0; v_i_66701 < 256; v_i_66701 = (1 + v_i_66701)) {\n        v__66719 = bool_or(v__66719, v__66718[(v_i_66701 + (256 * v_MWidthC_1 * v_wg_id_66698) + (256 * v_l_id_66699))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_66702 = 0; \n        v__66723[v_l_id_66699] = id(v__66719); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4756; \n      v_work_idx_4756 = 0; \n      int v_l_id_66703 = atomic_inc(&(v_work_idx_4756)); \n      while((v_l_id_66703 < 1)){\n        int v_tmp_66794 = 0; \n        v__45239 = v_tmp_66794; \n        /* reduce_seq */\n        for (int v_i_66704 = 0; v_i_66704 < v_MWidthC_1; v_i_66704 = (1 + v_i_66704)) {\n          v__45239 = bool_or(v__45239, v__66723[(v_i_66704 + (v_MWidthC_1 * v_l_id_66703))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66705 = 0; \n          v__66728[v_wg_id_66698] = doubleAndOr(v__45239, v__66710, v__66709[v_wg_id_66698], v__66711); \n        }\n        /* end map_seq */\n        v_l_id_66703 = atomic_inc(&(v_work_idx_4756)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66706",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66707",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66708",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66709",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66710",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66711",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66718",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__66728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66723",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}