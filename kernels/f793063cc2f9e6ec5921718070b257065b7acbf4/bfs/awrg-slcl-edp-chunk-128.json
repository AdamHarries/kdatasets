{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63956, const global int* restrict v__63957, const global int* restrict v__63958, const global int* restrict v__63959, int v__63960, int v__63961, global int* v__63977, global int* v__63963, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__63964; \n  int v__63967; \n  /* Private Memory */\n  int v__63969_0;\n  \n  int v__63971_0;\n  \n  int v__63975_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4511 = v__63963; \n    local int v_w_id_63952; \n    if (get_local_id(0) == 0) {\n      v_w_id_63952 = atomic_inc(v_work_idx_4511); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63952 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_63953 = get_local_id(0); v_l_id_63953 < 128; v_l_id_63953 = (v_l_id_63953 + get_local_size(0))) {\n        int v_tmp_64024 = 0; \n        v__63964 = v_tmp_64024; \n        /* reduce_while_seq */\n        for (int v_i_63954 = 0; v_i_63954 < v_MWidthC_1; v_i_63954 = (1 + v_i_63954)) {\n          v__63975_0 = check(v__63964, v__63956[(v_i_63954 + (128 * v_MWidthC_1 * v_w_id_63952) + (v_MWidthC_1 * v_l_id_63953))]); \n          if (v__63975_0) {\n          } else {\n            break;\n          }\n          int v_tmp_64025 = 0; \n          v__63967 = v_tmp_64025; \n          int v_index_64026 = v__63956[(v_i_63954 + (128 * v_MWidthC_1 * v_w_id_63952) + (v_MWidthC_1 * v_l_id_63953))]; \n          if (v_index_64026 < 0) {\n            v__63969_0 = v__63967; \n          } else {\n            if (v_index_64026 >= v_VLength_3) {\n              v__63969_0 = v__63967; \n            } else {\n              v__63969_0 = v__63958[v_index_64026]; \n            }\n          }\n          v__63971_0 = bool_and(v__63969_0, v__63957[(v_i_63954 + (128 * v_MWidthC_1 * v_w_id_63952) + (v_MWidthC_1 * v_l_id_63953))]); \n          v__63964 = bool_or(v__63971_0, v__63964); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63955 = 0; \n          v__63977[(v_l_id_63953 + (128 * v_w_id_63952))] = doubleAndOr(v__63964, v__63960, v__63959[(v_l_id_63953 + (128 * v_w_id_63952))], v__63961); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_63952 = atomic_inc(v_work_idx_4511); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63956",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63957",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63958",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63960",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63961",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63963",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63977",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}