{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49778, const global int* restrict v__49779, const global int* restrict v__49780, const global int* restrict v__49781, int v__49782, int v__49783, global int* v__49800, global int* v__49790, local int* v__49795, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49786; \n  int v__49791; \n  int v__45239; \n  /* Private Memory */\n  int v__49788_0;\n  \n  for (int v_wg_id_49770 = get_group_id(0); v_wg_id_49770 < v_MHeight_2; v_wg_id_49770 = (v_wg_id_49770 + get_num_groups(0))) {\n    for (int v_l_id_49771 = get_local_id(0); v_l_id_49771 < v_MWidthC_1; v_l_id_49771 = (v_l_id_49771 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_49772 = 0; v_i_49772 < 16; v_i_49772 = (1 + v_i_49772)) {\n        int v_tmp_49861 = 0; \n        v__49786 = v_tmp_49861; \n        int v_index_49862 = v__49778[(v_l_id_49771 + (16 * v_MWidthC_1 * v_wg_id_49770) + (v_MWidthC_1 * v_i_49772))]; \n        if (v_index_49862 < 0) {\n          v__49788_0 = v__49786; \n        } else {\n          if (v_index_49862 >= v_VLength_3) {\n            v__49788_0 = v__49786; \n          } else {\n            v__49788_0 = v__49780[v_index_49862]; \n          }\n        }\n        v__49790[(15 + (16 * v_MWidthC_1 * v_wg_id_49770) + (-1 * v_i_49772) + (16 * v_l_id_49771))] = bool_and(v__49788_0, v__49779[(v_l_id_49771 + (16 * v_MWidthC_1 * v_wg_id_49770) + (v_MWidthC_1 * v_i_49772))]); \n      }\n      /* end map_seq */\n      int v_tmp_49863 = 0; \n      v__49791 = v_tmp_49863; \n      /* reduce_seq */\n      for (int v_i_49773 = 0; v_i_49773 < 16; v_i_49773 = (1 + v_i_49773)) {\n        v__49791 = bool_or(v__49791, v__49790[(v_i_49773 + (16 * v_MWidthC_1 * v_wg_id_49770) + (16 * v_l_id_49771))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_49774 = 0; \n        v__49795[v_l_id_49771] = id(v__49791); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3220; \n      v_work_idx_3220 = 0; \n      int v_l_id_49775 = atomic_inc(&(v_work_idx_3220)); \n      while((v_l_id_49775 < 1)){\n        int v_tmp_49866 = 0; \n        v__45239 = v_tmp_49866; \n        /* reduce_seq */\n        for (int v_i_49776 = 0; v_i_49776 < v_MWidthC_1; v_i_49776 = (1 + v_i_49776)) {\n          v__45239 = bool_or(v__45239, v__49795[(v_i_49776 + (v_MWidthC_1 * v_l_id_49775))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_49777 = 0; \n          v__49800[v_wg_id_49770] = doubleAndOr(v__45239, v__49782, v__49781[v_wg_id_49770], v__49783); \n        }\n        /* end map_seq */\n        v_l_id_49775 = atomic_inc(&(v_work_idx_3220)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__49778",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49779",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49780",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49781",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49782",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49783",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49790",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__49800",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__49795",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}