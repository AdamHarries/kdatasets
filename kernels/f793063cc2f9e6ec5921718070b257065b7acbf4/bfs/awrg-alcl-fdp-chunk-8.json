{
  "name" : "awrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48042, const global int* restrict v__48043, const global int* restrict v__48044, const global int* restrict v__48045, int v__48046, int v__48047, global int* v__48061, global int* v__48049, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48051; \n  int v__48053; \n  /* Private Memory */\n  int v__48055_0;\n  \n  int v__48057_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3067 = v__48049; \n    local int v_w_id_48038; \n    if (get_local_id(0) == 0) {\n      v_w_id_48038 = atomic_inc(v_work_idx_3067); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48038 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3065; \n        v_work_idx_3065 = 0; \n        int v_l_id_48039 = atomic_inc(&(v_work_idx_3065)); \n        while((v_l_id_48039 < 8)){\n          int v_tmp_48098 = 0; \n          v__48051 = v_tmp_48098; \n          /* reduce_seq */\n          for (int v_i_48040 = 0; v_i_48040 < v_MWidthC_1; v_i_48040 = (1 + v_i_48040)) {\n            int v_tmp_48099 = 0; \n            v__48053 = v_tmp_48099; \n            int v_index_48100 = v__48042[(v_i_48040 + (8 * v_MWidthC_1 * v_w_id_48038) + (v_MWidthC_1 * v_l_id_48039))]; \n            if (v_index_48100 < 0) {\n              v__48055_0 = v__48053; \n            } else {\n              if (v_index_48100 >= v_VLength_3) {\n                v__48055_0 = v__48053; \n              } else {\n                v__48055_0 = v__48044[v_index_48100]; \n              }\n            }\n            v__48057_0 = bool_and(v__48055_0, v__48043[(v_i_48040 + (8 * v_MWidthC_1 * v_w_id_48038) + (v_MWidthC_1 * v_l_id_48039))]); \n            v__48051 = bool_or(v__48057_0, v__48051); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48041 = 0; \n            v__48061[(v_l_id_48039 + (8 * v_w_id_48038))] = doubleAndOr(v__48051, v__48046, v__48045[(v_l_id_48039 + (8 * v_w_id_48038))], v__48047); \n          }\n          /* end map_seq */\n          v_l_id_48039 = atomic_inc(&(v_work_idx_3065)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48038 = atomic_inc(v_work_idx_3067); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__48042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48044",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48046",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48047",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48049",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}