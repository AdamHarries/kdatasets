{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50921, const global int* restrict v__50922, const global int* restrict v__50923, const global int* restrict v__50924, int v__50925, int v__50926, global int* v__50943, local int* v__50938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50929; \n  int v__50931; \n  int v__45239; \n  /* Private Memory */\n  int v__50933_0;\n  \n  int v__50935_0;\n  \n  for (int v_wg_id_50914 = get_group_id(0); v_wg_id_50914 < v_MHeight_2; v_wg_id_50914 = (v_wg_id_50914 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3329; \n      v_work_idx_3329 = 0; \n      int v_l_id_50915 = atomic_inc(&(v_work_idx_3329)); \n      while((v_l_id_50915 < v_MWidthC_1)){\n        int v_tmp_50996 = 0; \n        v__50929 = v_tmp_50996; \n        /* reduce_seq */\n        for (int v_i_50916 = 0; v_i_50916 < 16; v_i_50916 = (1 + v_i_50916)) {\n          int v_tmp_50997 = 0; \n          v__50931 = v_tmp_50997; \n          int v_index_50998 = v__50921[(v_l_id_50915 + (16 * v_MWidthC_1 * v_wg_id_50914) + (v_MWidthC_1 * v_i_50916))]; \n          if (v_index_50998 < 0) {\n            v__50933_0 = v__50931; \n          } else {\n            if (v_index_50998 >= v_VLength_3) {\n              v__50933_0 = v__50931; \n            } else {\n              v__50933_0 = v__50923[v_index_50998]; \n            }\n          }\n          v__50935_0 = bool_and(v__50933_0, v__50922[(v_l_id_50915 + (16 * v_MWidthC_1 * v_wg_id_50914) + (v_MWidthC_1 * v_i_50916))]); \n          v__50929 = bool_or(v__50935_0, v__50929); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50917 = 0; \n          v__50938[v_l_id_50915] = id(v__50929); \n        }\n        /* end map_seq */\n        v_l_id_50915 = atomic_inc(&(v_work_idx_3329)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3324; \n      v_work_idx_3324 = 0; \n      int v_l_id_50918 = atomic_inc(&(v_work_idx_3324)); \n      while((v_l_id_50918 < 1)){\n        int v_tmp_51001 = 0; \n        v__45239 = v_tmp_51001; \n        /* reduce_seq */\n        for (int v_i_50919 = 0; v_i_50919 < v_MWidthC_1; v_i_50919 = (1 + v_i_50919)) {\n          v__45239 = bool_or(v__45239, v__50938[(v_i_50919 + (v_MWidthC_1 * v_l_id_50918))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50920 = 0; \n          v__50943[v_wg_id_50914] = doubleAndOr(v__45239, v__50925, v__50924[v_wg_id_50914], v__50926); \n        }\n        /* end map_seq */\n        v_l_id_50918 = atomic_inc(&(v_work_idx_3324)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__50921",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50922",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50923",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50925",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50926",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__50943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__50938",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}