{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46689, const global int* restrict v__46690, const global int* restrict v__46691, const global int* restrict v__46692, int v__46693, int v__46694, global int* v__46711, local int* v__46706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46697; \n  int v__46699; \n  int v__45239; \n  /* Private Memory */\n  int v__46701_0;\n  \n  int v__46703_0;\n  \n  for (int v_wg_id_46682 = get_group_id(0); v_wg_id_46682 < v_MHeight_2; v_wg_id_46682 = (v_wg_id_46682 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2945; \n      v_work_idx_2945 = 0; \n      int v_l_id_46683 = atomic_inc(&(v_work_idx_2945)); \n      while((v_l_id_46683 < v_MWidthC_1)){\n        int v_tmp_46764 = 0; \n        v__46697 = v_tmp_46764; \n        /* reduce_seq */\n        for (int v_i_46684 = 0; v_i_46684 < 8; v_i_46684 = (1 + v_i_46684)) {\n          int v_tmp_46765 = 0; \n          v__46699 = v_tmp_46765; \n          int v_index_46766 = v__46689[(v_l_id_46683 + (8 * v_MWidthC_1 * v_wg_id_46682) + (v_MWidthC_1 * v_i_46684))]; \n          if (v_index_46766 < 0) {\n            v__46701_0 = v__46699; \n          } else {\n            if (v_index_46766 >= v_VLength_3) {\n              v__46701_0 = v__46699; \n            } else {\n              v__46701_0 = v__46691[v_index_46766]; \n            }\n          }\n          v__46703_0 = bool_and(v__46701_0, v__46690[(v_l_id_46683 + (8 * v_MWidthC_1 * v_wg_id_46682) + (v_MWidthC_1 * v_i_46684))]); \n          v__46697 = bool_or(v__46703_0, v__46697); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46685 = 0; \n          v__46706[v_l_id_46683] = id(v__46697); \n        }\n        /* end map_seq */\n        v_l_id_46683 = atomic_inc(&(v_work_idx_2945)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2940; \n      v_work_idx_2940 = 0; \n      int v_l_id_46686 = atomic_inc(&(v_work_idx_2940)); \n      while((v_l_id_46686 < 1)){\n        int v_tmp_46769 = 0; \n        v__45239 = v_tmp_46769; \n        /* reduce_seq */\n        for (int v_i_46687 = 0; v_i_46687 < v_MWidthC_1; v_i_46687 = (1 + v_i_46687)) {\n          v__45239 = bool_or(v__45239, v__46706[(v_i_46687 + (v_MWidthC_1 * v_l_id_46686))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46688 = 0; \n          v__46711[v_wg_id_46682] = doubleAndOr(v__45239, v__46693, v__46692[v_wg_id_46682], v__46694); \n        }\n        /* end map_seq */\n        v_l_id_46686 = atomic_inc(&(v_work_idx_2940)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__46689",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46690",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46691",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46693",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46694",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__46711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}