{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54010, const global int* restrict v__54011, const global int* restrict v__54012, const global int* restrict v__54013, int v__54014, int v__54015, global int* v__54032, global int* v__54022, local int* v__54027, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54018; \n  int v__54023; \n  int v__45239; \n  /* Private Memory */\n  int v__54020_0;\n  \n  for (int v_wg_id_54002 = get_group_id(0); v_wg_id_54002 < v_MHeight_2; v_wg_id_54002 = (v_wg_id_54002 + get_num_groups(0))) {\n    for (int v_l_id_54003 = get_local_id(0); v_l_id_54003 < v_MWidthC_1; v_l_id_54003 = (v_l_id_54003 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_54004 = 0; v_i_54004 < 32; v_i_54004 = (1 + v_i_54004)) {\n        int v_tmp_54093 = 0; \n        v__54018 = v_tmp_54093; \n        int v_index_54094 = v__54010[(v_l_id_54003 + (32 * v_MWidthC_1 * v_wg_id_54002) + (v_MWidthC_1 * v_i_54004))]; \n        if (v_index_54094 < 0) {\n          v__54020_0 = v__54018; \n        } else {\n          if (v_index_54094 >= v_VLength_3) {\n            v__54020_0 = v__54018; \n          } else {\n            v__54020_0 = v__54012[v_index_54094]; \n          }\n        }\n        v__54022[(31 + (32 * v_MWidthC_1 * v_wg_id_54002) + (-1 * v_i_54004) + (32 * v_l_id_54003))] = bool_and(v__54020_0, v__54011[(v_l_id_54003 + (32 * v_MWidthC_1 * v_wg_id_54002) + (v_MWidthC_1 * v_i_54004))]); \n      }\n      /* end map_seq */\n      int v_tmp_54095 = 0; \n      v__54023 = v_tmp_54095; \n      /* reduce_seq */\n      for (int v_i_54005 = 0; v_i_54005 < 32; v_i_54005 = (1 + v_i_54005)) {\n        v__54023 = bool_or(v__54023, v__54022[(v_i_54005 + (32 * v_MWidthC_1 * v_wg_id_54002) + (32 * v_l_id_54003))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_54006 = 0; \n        v__54027[v_l_id_54003] = id(v__54023); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3604; \n      v_work_idx_3604 = 0; \n      int v_l_id_54007 = atomic_inc(&(v_work_idx_3604)); \n      while((v_l_id_54007 < 1)){\n        int v_tmp_54098 = 0; \n        v__45239 = v_tmp_54098; \n        /* reduce_seq */\n        for (int v_i_54008 = 0; v_i_54008 < v_MWidthC_1; v_i_54008 = (1 + v_i_54008)) {\n          v__45239 = bool_or(v__45239, v__54027[(v_i_54008 + (v_MWidthC_1 * v_l_id_54007))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54009 = 0; \n          v__54032[v_wg_id_54002] = doubleAndOr(v__45239, v__54014, v__54013[v_wg_id_54002], v__54015); \n        }\n        /* end map_seq */\n        v_l_id_54007 = atomic_inc(&(v_work_idx_3604)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54010",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54011",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54012",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54013",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54014",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54015",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54022",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54032",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54027",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}