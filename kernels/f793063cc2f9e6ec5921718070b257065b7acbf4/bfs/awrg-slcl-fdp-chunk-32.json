{
  "name" : "awrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55419, const global int* restrict v__55420, const global int* restrict v__55421, const global int* restrict v__55422, int v__55423, int v__55424, global int* v__55438, global int* v__55426, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55428; \n  int v__55430; \n  /* Private Memory */\n  int v__55432_0;\n  \n  int v__55434_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3737 = v__55426; \n    local int v_w_id_55415; \n    if (get_local_id(0) == 0) {\n      v_w_id_55415 = atomic_inc(v_work_idx_3737); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55415 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_55416 = get_local_id(0); v_l_id_55416 < 32; v_l_id_55416 = (v_l_id_55416 + get_local_size(0))) {\n        int v_tmp_55479 = 0; \n        v__55428 = v_tmp_55479; \n        /* reduce_seq */\n        for (int v_i_55417 = 0; v_i_55417 < v_MWidthC_1; v_i_55417 = (1 + v_i_55417)) {\n          int v_tmp_55480 = 0; \n          v__55430 = v_tmp_55480; \n          int v_index_55481 = v__55419[(v_i_55417 + (32 * v_MWidthC_1 * v_w_id_55415) + (v_MWidthC_1 * v_l_id_55416))]; \n          if (v_index_55481 < 0) {\n            v__55432_0 = v__55430; \n          } else {\n            if (v_index_55481 >= v_VLength_3) {\n              v__55432_0 = v__55430; \n            } else {\n              v__55432_0 = v__55421[v_index_55481]; \n            }\n          }\n          v__55434_0 = bool_and(v__55432_0, v__55420[(v_i_55417 + (32 * v_MWidthC_1 * v_w_id_55415) + (v_MWidthC_1 * v_l_id_55416))]); \n          v__55428 = bool_or(v__55434_0, v__55428); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55418 = 0; \n          v__55438[(v_l_id_55416 + (32 * v_w_id_55415))] = doubleAndOr(v__55428, v__55423, v__55422[(v_l_id_55416 + (32 * v_w_id_55415))], v__55424); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_55415 = atomic_inc(v_work_idx_3737); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55421",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55422",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55423",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55424",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55426",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55438",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}