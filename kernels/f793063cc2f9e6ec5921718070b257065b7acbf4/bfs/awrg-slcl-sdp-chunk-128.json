{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63808, const global int* restrict v__63809, const global int* restrict v__63810, const global int* restrict v__63811, int v__63812, int v__63813, global int* v__63827, global int* v__63821, global int* v__63815, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__63817; \n  int v__63822; \n  /* Private Memory */\n  int v__63819_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4499 = v__63815; \n    local int v_w_id_63803; \n    if (get_local_id(0) == 0) {\n      v_w_id_63803 = atomic_inc(v_work_idx_4499); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63803 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_63804 = get_local_id(0); v_l_id_63804 < 128; v_l_id_63804 = (v_l_id_63804 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_63805 = 0; v_i_63805 < v_MWidthC_1; v_i_63805 = (1 + v_i_63805)) {\n          int v_tmp_63870 = 0; \n          v__63817 = v_tmp_63870; \n          int v_index_63871 = v__63808[(v_i_63805 + (128 * v_MWidthC_1 * v_w_id_63803) + (v_MWidthC_1 * v_l_id_63804))]; \n          if (v_index_63871 < 0) {\n            v__63819_0 = v__63817; \n          } else {\n            if (v_index_63871 >= v_VLength_3) {\n              v__63819_0 = v__63817; \n            } else {\n              v__63819_0 = v__63810[v_index_63871]; \n            }\n          }\n          v__63821[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_63803) + (-1 * v_i_63805) + (v_MWidthC_1 * v_l_id_63804))] = bool_and(v__63819_0, v__63809[(v_i_63805 + (128 * v_MWidthC_1 * v_w_id_63803) + (v_MWidthC_1 * v_l_id_63804))]); \n        }\n        /* end map_seq */\n        int v_tmp_63872 = 0; \n        v__63822 = v_tmp_63872; \n        /* reduce_seq */\n        for (int v_i_63806 = 0; v_i_63806 < v_MWidthC_1; v_i_63806 = (1 + v_i_63806)) {\n          v__63822 = bool_or(v__63822, v__63821[(v_i_63806 + (128 * v_MWidthC_1 * v_w_id_63803) + (v_MWidthC_1 * v_l_id_63804))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63807 = 0; \n          v__63827[(v_l_id_63804 + (128 * v_w_id_63803))] = doubleAndOr(v__63822, v__63812, v__63811[(v_l_id_63804 + (128 * v_w_id_63803))], v__63813); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_63803 = atomic_inc(v_work_idx_4499); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63808",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63810",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63811",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63812",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63813",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63821",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63815",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63827",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}