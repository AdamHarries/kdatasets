{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67015, const global int* restrict v__67016, const global int* restrict v__67017, const global int* restrict v__67018, int v__67019, int v__67020, global int* v__67033, global int* v__67027, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__67023; \n  int v__67028; \n  /* Private Memory */\n  int v__67025_0;\n  \n  for (int v_wg_id_67010 = get_group_id(0); v_wg_id_67010 < ((v_MHeight_2)/(256)); v_wg_id_67010 = (v_wg_id_67010 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4786; \n      v_work_idx_4786 = 0; \n      int v_l_id_67011 = atomic_inc(&(v_work_idx_4786)); \n      while((v_l_id_67011 < 256)){\n        /* map_seq */\n        for (int v_i_67012 = 0; v_i_67012 < v_MWidthC_1; v_i_67012 = (1 + v_i_67012)) {\n          int v_tmp_67073 = 0; \n          v__67023 = v_tmp_67073; \n          int v_index_67074 = v__67015[(v_i_67012 + (256 * v_MWidthC_1 * v_wg_id_67010) + (v_MWidthC_1 * v_l_id_67011))]; \n          if (v_index_67074 < 0) {\n            v__67025_0 = v__67023; \n          } else {\n            if (v_index_67074 >= v_VLength_3) {\n              v__67025_0 = v__67023; \n            } else {\n              v__67025_0 = v__67017[v_index_67074]; \n            }\n          }\n          v__67027[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_67010) + (-1 * v_i_67012) + (v_MWidthC_1 * v_l_id_67011))] = bool_and(v__67025_0, v__67016[(v_i_67012 + (256 * v_MWidthC_1 * v_wg_id_67010) + (v_MWidthC_1 * v_l_id_67011))]); \n        }\n        /* end map_seq */\n        int v_tmp_67075 = 0; \n        v__67028 = v_tmp_67075; \n        /* reduce_seq */\n        for (int v_i_67013 = 0; v_i_67013 < v_MWidthC_1; v_i_67013 = (1 + v_i_67013)) {\n          v__67028 = bool_or(v__67028, v__67027[(v_i_67013 + (256 * v_MWidthC_1 * v_wg_id_67010) + (v_MWidthC_1 * v_l_id_67011))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67014 = 0; \n          v__67033[(v_l_id_67011 + (256 * v_wg_id_67010))] = doubleAndOr(v__67028, v__67019, v__67018[(v_l_id_67011 + (256 * v_wg_id_67010))], v__67020); \n        }\n        /* end map_seq */\n        v_l_id_67011 = atomic_inc(&(v_work_idx_4786)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__67015",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67017",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67019",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67020",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__67033",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}