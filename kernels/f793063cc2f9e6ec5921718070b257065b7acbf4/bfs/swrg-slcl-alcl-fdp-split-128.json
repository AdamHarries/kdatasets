{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62576, const global int* restrict v__62577, const global int* restrict v__62578, const global int* restrict v__62579, int v__62580, int v__62581, global int* v__62598, local int* v__62593, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62584; \n  int v__62586; \n  int v__45239; \n  /* Private Memory */\n  int v__62588_0;\n  \n  int v__62590_0;\n  \n  for (int v_wg_id_62569 = get_group_id(0); v_wg_id_62569 < v_MHeight_2; v_wg_id_62569 = (v_wg_id_62569 + get_num_groups(0))) {\n    for (int v_l_id_62570 = get_local_id(0); v_l_id_62570 < v_MWidthC_1; v_l_id_62570 = (v_l_id_62570 + get_local_size(0))) {\n      int v_tmp_62659 = 0; \n      v__62584 = v_tmp_62659; \n      /* reduce_seq */\n      for (int v_i_62571 = 0; v_i_62571 < 128; v_i_62571 = (1 + v_i_62571)) {\n        int v_tmp_62660 = 0; \n        v__62586 = v_tmp_62660; \n        int v_index_62661 = v__62576[(v_l_id_62570 + (128 * v_MWidthC_1 * v_wg_id_62569) + (v_MWidthC_1 * v_i_62571))]; \n        if (v_index_62661 < 0) {\n          v__62588_0 = v__62586; \n        } else {\n          if (v_index_62661 >= v_VLength_3) {\n            v__62588_0 = v__62586; \n          } else {\n            v__62588_0 = v__62578[v_index_62661]; \n          }\n        }\n        v__62590_0 = bool_and(v__62588_0, v__62577[(v_l_id_62570 + (128 * v_MWidthC_1 * v_wg_id_62569) + (v_MWidthC_1 * v_i_62571))]); \n        v__62584 = bool_or(v__62590_0, v__62584); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62572 = 0; \n        v__62593[v_l_id_62570] = id(v__62584); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4382; \n      v_work_idx_4382 = 0; \n      int v_l_id_62573 = atomic_inc(&(v_work_idx_4382)); \n      while((v_l_id_62573 < 1)){\n        int v_tmp_62664 = 0; \n        v__45239 = v_tmp_62664; \n        /* reduce_seq */\n        for (int v_i_62574 = 0; v_i_62574 < v_MWidthC_1; v_i_62574 = (1 + v_i_62574)) {\n          v__45239 = bool_or(v__45239, v__62593[(v_i_62574 + (v_MWidthC_1 * v_l_id_62573))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62575 = 0; \n          v__62598[v_wg_id_62569] = doubleAndOr(v__45239, v__62580, v__62579[v_wg_id_62569], v__62581); \n        }\n        /* end map_seq */\n        v_l_id_62573 = atomic_inc(&(v_work_idx_4382)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62576",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62577",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62578",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62580",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62581",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62593",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}