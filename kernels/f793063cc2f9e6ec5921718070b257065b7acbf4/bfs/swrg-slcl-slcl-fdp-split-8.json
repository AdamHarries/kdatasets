{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45328, const global int* restrict v__45329, const global int* restrict v__45330, const global int* restrict v__45331, int v__45332, int v__45333, global int* v__45350, local int* v__45345, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45336; \n  int v__45338; \n  int v__45239; \n  /* Private Memory */\n  int v__45340_0;\n  \n  int v__45342_0;\n  \n  for (int v_wg_id_45321 = get_group_id(0); v_wg_id_45321 < v_MHeight_2; v_wg_id_45321 = (v_wg_id_45321 + get_num_groups(0))) {\n    for (int v_l_id_45322 = get_local_id(0); v_l_id_45322 < v_MWidthC_1; v_l_id_45322 = (v_l_id_45322 + get_local_size(0))) {\n      int v_tmp_45415 = 0; \n      v__45336 = v_tmp_45415; \n      /* reduce_seq */\n      for (int v_i_45323 = 0; v_i_45323 < 8; v_i_45323 = (1 + v_i_45323)) {\n        int v_tmp_45416 = 0; \n        v__45338 = v_tmp_45416; \n        int v_index_45417 = v__45328[(v_l_id_45322 + (8 * v_MWidthC_1 * v_wg_id_45321) + (v_MWidthC_1 * v_i_45323))]; \n        if (v_index_45417 < 0) {\n          v__45340_0 = v__45338; \n        } else {\n          if (v_index_45417 >= v_VLength_3) {\n            v__45340_0 = v__45338; \n          } else {\n            v__45340_0 = v__45330[v_index_45417]; \n          }\n        }\n        v__45342_0 = bool_and(v__45340_0, v__45329[(v_l_id_45322 + (8 * v_MWidthC_1 * v_wg_id_45321) + (v_MWidthC_1 * v_i_45323))]); \n        v__45336 = bool_or(v__45342_0, v__45336); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45324 = 0; \n        v__45345[v_l_id_45322] = id(v__45336); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_45325 = get_local_id(0); \n      int v_tmp_45420 = 0; \n      v__45239 = v_tmp_45420; \n      /* reduce_seq */\n      for (int v_i_45326 = 0; v_i_45326 < v_MWidthC_1; v_i_45326 = (1 + v_i_45326)) {\n        v__45239 = bool_or(v__45239, v__45345[(v_i_45326 + (v_MWidthC_1 * v_l_id_45325))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45327 = 0; \n        v__45350[v_wg_id_45321] = doubleAndOr(v__45239, v__45332, v__45331[v_wg_id_45321], v__45333); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45328",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45329",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45330",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45331",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45332",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45333",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__45350",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45345",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}