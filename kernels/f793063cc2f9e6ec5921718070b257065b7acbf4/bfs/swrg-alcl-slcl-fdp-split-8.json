{
  "name" : "swrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46393, const global int* restrict v__46394, const global int* restrict v__46395, const global int* restrict v__46396, int v__46397, int v__46398, global int* v__46415, local int* v__46410, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46401; \n  int v__46403; \n  int v__45239; \n  /* Private Memory */\n  int v__46405_0;\n  \n  int v__46407_0;\n  \n  for (int v_wg_id_46386 = get_group_id(0); v_wg_id_46386 < v_MHeight_2; v_wg_id_46386 = (v_wg_id_46386 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2915; \n      v_work_idx_2915 = 0; \n      int v_l_id_46387 = atomic_inc(&(v_work_idx_2915)); \n      while((v_l_id_46387 < v_MWidthC_1)){\n        int v_tmp_46472 = 0; \n        v__46401 = v_tmp_46472; \n        /* reduce_seq */\n        for (int v_i_46388 = 0; v_i_46388 < 8; v_i_46388 = (1 + v_i_46388)) {\n          int v_tmp_46473 = 0; \n          v__46403 = v_tmp_46473; \n          int v_index_46474 = v__46393[(v_l_id_46387 + (8 * v_MWidthC_1 * v_wg_id_46386) + (v_MWidthC_1 * v_i_46388))]; \n          if (v_index_46474 < 0) {\n            v__46405_0 = v__46403; \n          } else {\n            if (v_index_46474 >= v_VLength_3) {\n              v__46405_0 = v__46403; \n            } else {\n              v__46405_0 = v__46395[v_index_46474]; \n            }\n          }\n          v__46407_0 = bool_and(v__46405_0, v__46394[(v_l_id_46387 + (8 * v_MWidthC_1 * v_wg_id_46386) + (v_MWidthC_1 * v_i_46388))]); \n          v__46401 = bool_or(v__46407_0, v__46401); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46389 = 0; \n          v__46410[v_l_id_46387] = id(v__46401); \n        }\n        /* end map_seq */\n        v_l_id_46387 = atomic_inc(&(v_work_idx_2915)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_46390 = get_local_id(0); \n      int v_tmp_46477 = 0; \n      v__45239 = v_tmp_46477; \n      /* reduce_seq */\n      for (int v_i_46391 = 0; v_i_46391 < v_MWidthC_1; v_i_46391 = (1 + v_i_46391)) {\n        v__45239 = bool_or(v__45239, v__46410[(v_i_46391 + (v_MWidthC_1 * v_l_id_46390))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_46392 = 0; \n        v__46415[v_wg_id_46386] = doubleAndOr(v__45239, v__46397, v__46396[v_wg_id_46386], v__46398); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__46393",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46394",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46395",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46397",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46398",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__46415",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46410",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}