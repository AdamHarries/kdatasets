{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52643, const global int* restrict v__52644, const global int* restrict v__52645, const global int* restrict v__52646, int v__52647, int v__52648, global int* v__52666, global int* v__52656, global int* v__52650, local int* v__52661, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52652; \n  int v__52657; \n  int v__45239; \n  /* Private Memory */\n  int v__52654_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3490 = v__52650; \n    local int v_w_id_52635; \n    if (get_local_id(0) == 0) {\n      v_w_id_52635 = atomic_inc(v_work_idx_3490); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52635 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3488; \n        v_work_idx_3488 = 0; \n        int v_l_id_52636 = atomic_inc(&(v_work_idx_3488)); \n        while((v_l_id_52636 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_52637 = 0; v_i_52637 < 16; v_i_52637 = (1 + v_i_52637)) {\n            int v_tmp_52721 = 0; \n            v__52652 = v_tmp_52721; \n            int v_index_52722 = v__52643[(v_l_id_52636 + (16 * v_MWidthC_1 * v_w_id_52635) + (v_MWidthC_1 * v_i_52637))]; \n            if (v_index_52722 < 0) {\n              v__52654_0 = v__52652; \n            } else {\n              if (v_index_52722 >= v_VLength_3) {\n                v__52654_0 = v__52652; \n              } else {\n                v__52654_0 = v__52645[v_index_52722]; \n              }\n            }\n            v__52656[(15 + (16 * v_MWidthC_1 * v_w_id_52635) + (-1 * v_i_52637) + (16 * v_l_id_52636))] = bool_and(v__52654_0, v__52644[(v_l_id_52636 + (16 * v_MWidthC_1 * v_w_id_52635) + (v_MWidthC_1 * v_i_52637))]); \n          }\n          /* end map_seq */\n          int v_tmp_52723 = 0; \n          v__52657 = v_tmp_52723; \n          /* reduce_seq */\n          for (int v_i_52638 = 0; v_i_52638 < 16; v_i_52638 = (1 + v_i_52638)) {\n            v__52657 = bool_or(v__52657, v__52656[(v_i_52638 + (16 * v_MWidthC_1 * v_w_id_52635) + (16 * v_l_id_52636))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52639 = 0; \n            v__52661[v_l_id_52636] = id(v__52657); \n          }\n          /* end map_seq */\n          v_l_id_52636 = atomic_inc(&(v_work_idx_3488)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52640 = get_local_id(0); \n        int v_tmp_52726 = 0; \n        v__45239 = v_tmp_52726; \n        /* reduce_seq */\n        for (int v_i_52641 = 0; v_i_52641 < v_MWidthC_1; v_i_52641 = (1 + v_i_52641)) {\n          v__45239 = bool_or(v__45239, v__52661[(v_i_52641 + (v_MWidthC_1 * v_l_id_52640))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52642 = 0; \n          v__52666[v_w_id_52635] = doubleAndOr(v__45239, v__52647, v__52646[v_w_id_52635], v__52648); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52635 = atomic_inc(v_work_idx_3490); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52643",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52644",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52645",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52647",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52648",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52656",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52650",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52666",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52661",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}