{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73803, const global int* restrict v__73804, const global int* restrict v__73805, const global int* restrict v__73806, int v__73807, int v__73808, global int* v__73826, global int* v__73816, global int* v__73810, local int* v__73821, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__73812; \n  int v__73817; \n  int v__45239; \n  /* Private Memory */\n  int v__73814_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5410 = v__73810; \n    local int v_w_id_73795; \n    if (get_local_id(0) == 0) {\n      v_w_id_73795 = atomic_inc(v_work_idx_5410); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73795 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5408; \n        v_work_idx_5408 = 0; \n        int v_l_id_73796 = atomic_inc(&(v_work_idx_5408)); \n        while((v_l_id_73796 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_73797 = 0; v_i_73797 < 512; v_i_73797 = (1 + v_i_73797)) {\n            int v_tmp_73881 = 0; \n            v__73812 = v_tmp_73881; \n            int v_index_73882 = v__73803[(v_l_id_73796 + (512 * v_MWidthC_1 * v_w_id_73795) + (v_MWidthC_1 * v_i_73797))]; \n            if (v_index_73882 < 0) {\n              v__73814_0 = v__73812; \n            } else {\n              if (v_index_73882 >= v_VLength_3) {\n                v__73814_0 = v__73812; \n              } else {\n                v__73814_0 = v__73805[v_index_73882]; \n              }\n            }\n            v__73816[(511 + (512 * v_MWidthC_1 * v_w_id_73795) + (-1 * v_i_73797) + (512 * v_l_id_73796))] = bool_and(v__73814_0, v__73804[(v_l_id_73796 + (512 * v_MWidthC_1 * v_w_id_73795) + (v_MWidthC_1 * v_i_73797))]); \n          }\n          /* end map_seq */\n          int v_tmp_73883 = 0; \n          v__73817 = v_tmp_73883; \n          /* reduce_seq */\n          for (int v_i_73798 = 0; v_i_73798 < 512; v_i_73798 = (1 + v_i_73798)) {\n            v__73817 = bool_or(v__73817, v__73816[(v_i_73798 + (512 * v_MWidthC_1 * v_w_id_73795) + (512 * v_l_id_73796))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73799 = 0; \n            v__73821[v_l_id_73796] = id(v__73817); \n          }\n          /* end map_seq */\n          v_l_id_73796 = atomic_inc(&(v_work_idx_5408)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_73800 = get_local_id(0); \n        int v_tmp_73886 = 0; \n        v__45239 = v_tmp_73886; \n        /* reduce_seq */\n        for (int v_i_73801 = 0; v_i_73801 < v_MWidthC_1; v_i_73801 = (1 + v_i_73801)) {\n          v__45239 = bool_or(v__45239, v__73821[(v_i_73801 + (v_MWidthC_1 * v_l_id_73800))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_73802 = 0; \n          v__73826[v_w_id_73795] = doubleAndOr(v__45239, v__73807, v__73806[v_w_id_73795], v__73808); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73795 = atomic_inc(v_work_idx_5410); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73803",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73804",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73805",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73807",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73808",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73816",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73810",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73821",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}