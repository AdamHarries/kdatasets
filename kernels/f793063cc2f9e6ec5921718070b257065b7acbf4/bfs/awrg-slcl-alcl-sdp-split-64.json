{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60361, const global int* restrict v__60362, const global int* restrict v__60363, const global int* restrict v__60364, int v__60365, int v__60366, global int* v__60384, global int* v__60374, global int* v__60368, local int* v__60379, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__60370; \n  int v__60375; \n  int v__45239; \n  /* Private Memory */\n  int v__60372_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4184 = v__60368; \n    local int v_w_id_60353; \n    if (get_local_id(0) == 0) {\n      v_w_id_60353 = atomic_inc(v_work_idx_4184); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60353 < v_MHeight_2)){\n      for (int v_l_id_60354 = get_local_id(0); v_l_id_60354 < v_MWidthC_1; v_l_id_60354 = (v_l_id_60354 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_60355 = 0; v_i_60355 < 64; v_i_60355 = (1 + v_i_60355)) {\n          int v_tmp_60443 = 0; \n          v__60370 = v_tmp_60443; \n          int v_index_60444 = v__60361[(v_l_id_60354 + (64 * v_MWidthC_1 * v_w_id_60353) + (v_MWidthC_1 * v_i_60355))]; \n          if (v_index_60444 < 0) {\n            v__60372_0 = v__60370; \n          } else {\n            if (v_index_60444 >= v_VLength_3) {\n              v__60372_0 = v__60370; \n            } else {\n              v__60372_0 = v__60363[v_index_60444]; \n            }\n          }\n          v__60374[(63 + (64 * v_MWidthC_1 * v_w_id_60353) + (-1 * v_i_60355) + (64 * v_l_id_60354))] = bool_and(v__60372_0, v__60362[(v_l_id_60354 + (64 * v_MWidthC_1 * v_w_id_60353) + (v_MWidthC_1 * v_i_60355))]); \n        }\n        /* end map_seq */\n        int v_tmp_60445 = 0; \n        v__60375 = v_tmp_60445; \n        /* reduce_seq */\n        for (int v_i_60356 = 0; v_i_60356 < 64; v_i_60356 = (1 + v_i_60356)) {\n          v__60375 = bool_or(v__60375, v__60374[(v_i_60356 + (64 * v_MWidthC_1 * v_w_id_60353) + (64 * v_l_id_60354))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60357 = 0; \n          v__60379[v_l_id_60354] = id(v__60375); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4177; \n        v_work_idx_4177 = 0; \n        int v_l_id_60358 = atomic_inc(&(v_work_idx_4177)); \n        while((v_l_id_60358 < 1)){\n          int v_tmp_60448 = 0; \n          v__45239 = v_tmp_60448; \n          /* reduce_seq */\n          for (int v_i_60359 = 0; v_i_60359 < v_MWidthC_1; v_i_60359 = (1 + v_i_60359)) {\n            v__45239 = bool_or(v__45239, v__60379[(v_i_60359 + (v_MWidthC_1 * v_l_id_60358))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60360 = 0; \n            v__60384[v_w_id_60353] = doubleAndOr(v__45239, v__60365, v__60364[v_w_id_60353], v__60366); \n          }\n          /* end map_seq */\n          v_l_id_60358 = atomic_inc(&(v_work_idx_4177)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60353 = atomic_inc(v_work_idx_4184); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__60361",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60362",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60363",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60365",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60366",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60374",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60368",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60384",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60379",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}