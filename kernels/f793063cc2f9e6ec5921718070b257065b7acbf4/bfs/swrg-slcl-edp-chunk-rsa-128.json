{
  "name" : "swrg-slcl-edp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__62070, const global int* restrict v__62071, const global int* restrict v__62072, const global int* restrict v__62073, int v__62074, int v__62075, global int* v__62089, global int* v__62088, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62077; \n  int v__62080; \n  /* Private Memory */\n  int v__62082_0;\n  \n  int v__62084_0;\n  \n  for (int v_wg_id_62065 = get_group_id(0); v_wg_id_62065 < ((v_MHeight_2)/(128)); v_wg_id_62065 = (v_wg_id_62065 + get_num_groups(0))) {\n    for (int v_l_id_62066 = get_local_id(0); v_l_id_62066 < 128; v_l_id_62066 = (v_l_id_62066 + get_local_size(0))) {\n      int v_tmp_62126 = 0; \n      v__62077 = v_tmp_62126; \n      /* reduce_seq */\n      int v_stop_62127 = min(v__62070[(1 + (v__62070[(v_l_id_62066 + (128 * v_wg_id_62065))] / 4))], v__62071[(1 + (v__62071[(v_l_id_62066 + (128 * v_wg_id_62065))] / 4))]); \n      for (int v_i_62067 = 0; v_i_62067 < v_stop_62127; v_i_62067 = (1 + v_i_62067)) {\n        int v_tmp_62132 = 0; \n        v__62080 = v_tmp_62132; \n        int v_index_62134 = v__62070[(2 + v_i_62067 + (v__62070[(v_l_id_62066 + (128 * v_wg_id_62065))] / 4))]; \n        if (v_index_62134 < 0) {\n          v__62082_0 = v__62080; \n        } else {\n          if (v_index_62134 >= v_MWidthC_1) {\n            v__62082_0 = v__62080; \n          } else {\n            v__62082_0 = v__62072[v_index_62134]; \n          }\n        }\n        v__62084_0 = bool_and(v__62071[(2 + v_i_62067 + (v__62071[(v_l_id_62066 + (128 * v_wg_id_62065))] / 4))], v__62082_0); \n        v__62077 = bool_or(v__62077, v__62084_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62068 = 0; \n        v__62088[(v_l_id_62066 + (128 * v_wg_id_62065))] = doubleAndOr(v__62077, v__62074, v__62073[(v_l_id_62066 + (128 * v_wg_id_62065))], v__62075); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62069 = 0; \n        v__62089[(v_l_id_62066 + (128 * v_wg_id_62065))] = id(v__62088[(v_l_id_62066 + (128 * v_wg_id_62065))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62070",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__62071",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__62072",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__62073",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62074",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62075",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62088",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__62089",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}