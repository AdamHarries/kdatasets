{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73259, const global int* restrict v__73260, const global int* restrict v__73261, const global int* restrict v__73262, int v__73263, int v__73264, global int* v__73284, global int* v__73266, local int* v__73279, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__73268; \n  int v__73270; \n  int v__45239; \n  /* Private Memory */\n  int v__73272_0;\n  \n  int v__73274_0;\n  \n  int v__73278_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5356 = v__73266; \n    local int v_w_id_73252; \n    if (get_local_id(0) == 0) {\n      v_w_id_73252 = atomic_inc(v_work_idx_5356); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73252 < v_MHeight_2)){\n      for (int v_l_id_73253 = get_local_id(0); v_l_id_73253 < v_MWidthC_1; v_l_id_73253 = (v_l_id_73253 + get_local_size(0))) {\n        int v_tmp_73346 = 0; \n        v__73268 = v_tmp_73346; \n        /* reduce_while_seq */\n        for (int v_i_73254 = 0; v_i_73254 < 512; v_i_73254 = (1 + v_i_73254)) {\n          v__73278_0 = check(v__73268, v__73259[(v_l_id_73253 + (512 * v_MWidthC_1 * v_w_id_73252) + (v_MWidthC_1 * v_i_73254))]); \n          if (v__73278_0) {\n          } else {\n            break;\n          }\n          int v_tmp_73347 = 0; \n          v__73270 = v_tmp_73347; \n          int v_index_73348 = v__73259[(v_l_id_73253 + (512 * v_MWidthC_1 * v_w_id_73252) + (v_MWidthC_1 * v_i_73254))]; \n          if (v_index_73348 < 0) {\n            v__73272_0 = v__73270; \n          } else {\n            if (v_index_73348 >= v_VLength_3) {\n              v__73272_0 = v__73270; \n            } else {\n              v__73272_0 = v__73261[v_index_73348]; \n            }\n          }\n          v__73274_0 = bool_and(v__73272_0, v__73260[(v_l_id_73253 + (512 * v_MWidthC_1 * v_w_id_73252) + (v_MWidthC_1 * v_i_73254))]); \n          v__73268 = bool_or(v__73274_0, v__73268); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_73255 = 0; \n          v__73279[v_l_id_73253] = id(v__73268); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5350; \n        v_work_idx_5350 = 0; \n        int v_l_id_73256 = atomic_inc(&(v_work_idx_5350)); \n        while((v_l_id_73256 < 1)){\n          int v_tmp_73351 = 0; \n          v__45239 = v_tmp_73351; \n          /* reduce_seq */\n          for (int v_i_73257 = 0; v_i_73257 < v_MWidthC_1; v_i_73257 = (1 + v_i_73257)) {\n            v__45239 = bool_or(v__45239, v__73279[(v_i_73257 + (v_MWidthC_1 * v_l_id_73256))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73258 = 0; \n            v__73284[v_w_id_73252] = doubleAndOr(v__45239, v__73263, v__73262[v_w_id_73252], v__73264); \n          }\n          /* end map_seq */\n          v_l_id_73256 = atomic_inc(&(v_work_idx_5350)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73252 = atomic_inc(v_work_idx_5356); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__73259",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73260",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73261",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73262",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73263",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73264",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73266",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73284",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73279",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}