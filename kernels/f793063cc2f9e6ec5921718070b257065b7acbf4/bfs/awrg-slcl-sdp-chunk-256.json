{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68040, const global int* restrict v__68041, const global int* restrict v__68042, const global int* restrict v__68043, int v__68044, int v__68045, global int* v__68059, global int* v__68053, global int* v__68047, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68049; \n  int v__68054; \n  /* Private Memory */\n  int v__68051_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4883 = v__68047; \n    local int v_w_id_68035; \n    if (get_local_id(0) == 0) {\n      v_w_id_68035 = atomic_inc(v_work_idx_4883); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68035 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_68036 = get_local_id(0); v_l_id_68036 < 256; v_l_id_68036 = (v_l_id_68036 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_68037 = 0; v_i_68037 < v_MWidthC_1; v_i_68037 = (1 + v_i_68037)) {\n          int v_tmp_68102 = 0; \n          v__68049 = v_tmp_68102; \n          int v_index_68103 = v__68040[(v_i_68037 + (256 * v_MWidthC_1 * v_w_id_68035) + (v_MWidthC_1 * v_l_id_68036))]; \n          if (v_index_68103 < 0) {\n            v__68051_0 = v__68049; \n          } else {\n            if (v_index_68103 >= v_VLength_3) {\n              v__68051_0 = v__68049; \n            } else {\n              v__68051_0 = v__68042[v_index_68103]; \n            }\n          }\n          v__68053[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_68035) + (-1 * v_i_68037) + (v_MWidthC_1 * v_l_id_68036))] = bool_and(v__68051_0, v__68041[(v_i_68037 + (256 * v_MWidthC_1 * v_w_id_68035) + (v_MWidthC_1 * v_l_id_68036))]); \n        }\n        /* end map_seq */\n        int v_tmp_68104 = 0; \n        v__68054 = v_tmp_68104; \n        /* reduce_seq */\n        for (int v_i_68038 = 0; v_i_68038 < v_MWidthC_1; v_i_68038 = (1 + v_i_68038)) {\n          v__68054 = bool_or(v__68054, v__68053[(v_i_68038 + (256 * v_MWidthC_1 * v_w_id_68035) + (v_MWidthC_1 * v_l_id_68036))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68039 = 0; \n          v__68059[(v_l_id_68036 + (256 * v_w_id_68035))] = doubleAndOr(v__68054, v__68044, v__68043[(v_l_id_68036 + (256 * v_w_id_68035))], v__68045); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_68035 = atomic_inc(v_work_idx_4883); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68040",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68042",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68044",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68045",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68053",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68047",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}