{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63617, const global int* restrict v__63618, const global int* restrict v__63619, const global int* restrict v__63620, int v__63621, int v__63622, global int* v__63639, local int* v__63634, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__63625; \n  int v__63627; \n  int v__45239; \n  /* Private Memory */\n  int v__63629_0;\n  \n  int v__63631_0;\n  \n  for (int v_wg_id_63610 = get_group_id(0); v_wg_id_63610 < v_MHeight_2; v_wg_id_63610 = (v_wg_id_63610 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4481; \n      v_work_idx_4481 = 0; \n      int v_l_id_63611 = atomic_inc(&(v_work_idx_4481)); \n      while((v_l_id_63611 < v_MWidthC_1)){\n        int v_tmp_63692 = 0; \n        v__63625 = v_tmp_63692; \n        /* reduce_seq */\n        for (int v_i_63612 = 0; v_i_63612 < 128; v_i_63612 = (1 + v_i_63612)) {\n          int v_tmp_63693 = 0; \n          v__63627 = v_tmp_63693; \n          int v_index_63694 = v__63617[(v_l_id_63611 + (128 * v_MWidthC_1 * v_wg_id_63610) + (v_MWidthC_1 * v_i_63612))]; \n          if (v_index_63694 < 0) {\n            v__63629_0 = v__63627; \n          } else {\n            if (v_index_63694 >= v_VLength_3) {\n              v__63629_0 = v__63627; \n            } else {\n              v__63629_0 = v__63619[v_index_63694]; \n            }\n          }\n          v__63631_0 = bool_and(v__63629_0, v__63618[(v_l_id_63611 + (128 * v_MWidthC_1 * v_wg_id_63610) + (v_MWidthC_1 * v_i_63612))]); \n          v__63625 = bool_or(v__63631_0, v__63625); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63613 = 0; \n          v__63634[v_l_id_63611] = id(v__63625); \n        }\n        /* end map_seq */\n        v_l_id_63611 = atomic_inc(&(v_work_idx_4481)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4476; \n      v_work_idx_4476 = 0; \n      int v_l_id_63614 = atomic_inc(&(v_work_idx_4476)); \n      while((v_l_id_63614 < 1)){\n        int v_tmp_63697 = 0; \n        v__45239 = v_tmp_63697; \n        /* reduce_seq */\n        for (int v_i_63615 = 0; v_i_63615 < v_MWidthC_1; v_i_63615 = (1 + v_i_63615)) {\n          v__45239 = bool_or(v__45239, v__63634[(v_i_63615 + (v_MWidthC_1 * v_l_id_63614))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63616 = 0; \n          v__63639[v_wg_id_63610] = doubleAndOr(v__45239, v__63621, v__63620[v_wg_id_63610], v__63622); \n        }\n        /* end map_seq */\n        v_l_id_63614 = atomic_inc(&(v_work_idx_4476)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63617",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63618",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63619",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63620",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63621",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63622",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__63639",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63634",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}