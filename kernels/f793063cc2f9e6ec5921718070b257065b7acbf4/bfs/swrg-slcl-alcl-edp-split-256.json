{
  "name" : "swrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66910, const global int* restrict v__66911, const global int* restrict v__66912, const global int* restrict v__66913, int v__66914, int v__66915, global int* v__66934, local int* v__66929, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__66918; \n  int v__66920; \n  int v__45239; \n  /* Private Memory */\n  int v__66922_0;\n  \n  int v__66924_0;\n  \n  int v__66928_0;\n  \n  for (int v_wg_id_66903 = get_group_id(0); v_wg_id_66903 < v_MHeight_2; v_wg_id_66903 = (v_wg_id_66903 + get_num_groups(0))) {\n    for (int v_l_id_66904 = get_local_id(0); v_l_id_66904 < v_MWidthC_1; v_l_id_66904 = (v_l_id_66904 + get_local_size(0))) {\n      int v_tmp_66998 = 0; \n      v__66918 = v_tmp_66998; \n      /* reduce_while_seq */\n      for (int v_i_66905 = 0; v_i_66905 < 256; v_i_66905 = (1 + v_i_66905)) {\n        v__66928_0 = check(v__66918, v__66910[(v_l_id_66904 + (256 * v_MWidthC_1 * v_wg_id_66903) + (v_MWidthC_1 * v_i_66905))]); \n        if (v__66928_0) {\n        } else {\n          break;\n        }\n        int v_tmp_66999 = 0; \n        v__66920 = v_tmp_66999; \n        int v_index_67000 = v__66910[(v_l_id_66904 + (256 * v_MWidthC_1 * v_wg_id_66903) + (v_MWidthC_1 * v_i_66905))]; \n        if (v_index_67000 < 0) {\n          v__66922_0 = v__66920; \n        } else {\n          if (v_index_67000 >= v_VLength_3) {\n            v__66922_0 = v__66920; \n          } else {\n            v__66922_0 = v__66912[v_index_67000]; \n          }\n        }\n        v__66924_0 = bool_and(v__66922_0, v__66911[(v_l_id_66904 + (256 * v_MWidthC_1 * v_wg_id_66903) + (v_MWidthC_1 * v_i_66905))]); \n        v__66918 = bool_or(v__66924_0, v__66918); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_66906 = 0; \n        v__66929[v_l_id_66904] = id(v__66918); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4775; \n      v_work_idx_4775 = 0; \n      int v_l_id_66907 = atomic_inc(&(v_work_idx_4775)); \n      while((v_l_id_66907 < 1)){\n        int v_tmp_67003 = 0; \n        v__45239 = v_tmp_67003; \n        /* reduce_seq */\n        for (int v_i_66908 = 0; v_i_66908 < v_MWidthC_1; v_i_66908 = (1 + v_i_66908)) {\n          v__45239 = bool_or(v__45239, v__66929[(v_i_66908 + (v_MWidthC_1 * v_l_id_66907))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66909 = 0; \n          v__66934[v_wg_id_66903] = doubleAndOr(v__45239, v__66914, v__66913[v_wg_id_66903], v__66915); \n        }\n        /* end map_seq */\n        v_l_id_66907 = atomic_inc(&(v_work_idx_4775)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66910",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66911",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66912",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66913",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66914",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66915",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__66934",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66929",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}