{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61107, const global int* restrict v__61108, const global int* restrict v__61109, const global int* restrict v__61110, int v__61111, int v__61112, global int* v__61130, global int* v__61120, global int* v__61114, local int* v__61125, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__61116; \n  int v__61121; \n  int v__45239; \n  /* Private Memory */\n  int v__61118_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4258 = v__61114; \n    local int v_w_id_61099; \n    if (get_local_id(0) == 0) {\n      v_w_id_61099 = atomic_inc(v_work_idx_4258); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_61099 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4256; \n        v_work_idx_4256 = 0; \n        int v_l_id_61100 = atomic_inc(&(v_work_idx_4256)); \n        while((v_l_id_61100 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_61101 = 0; v_i_61101 < 64; v_i_61101 = (1 + v_i_61101)) {\n            int v_tmp_61185 = 0; \n            v__61116 = v_tmp_61185; \n            int v_index_61186 = v__61107[(v_l_id_61100 + (64 * v_MWidthC_1 * v_w_id_61099) + (v_MWidthC_1 * v_i_61101))]; \n            if (v_index_61186 < 0) {\n              v__61118_0 = v__61116; \n            } else {\n              if (v_index_61186 >= v_VLength_3) {\n                v__61118_0 = v__61116; \n              } else {\n                v__61118_0 = v__61109[v_index_61186]; \n              }\n            }\n            v__61120[(63 + (64 * v_MWidthC_1 * v_w_id_61099) + (-1 * v_i_61101) + (64 * v_l_id_61100))] = bool_and(v__61118_0, v__61108[(v_l_id_61100 + (64 * v_MWidthC_1 * v_w_id_61099) + (v_MWidthC_1 * v_i_61101))]); \n          }\n          /* end map_seq */\n          int v_tmp_61187 = 0; \n          v__61121 = v_tmp_61187; \n          /* reduce_seq */\n          for (int v_i_61102 = 0; v_i_61102 < 64; v_i_61102 = (1 + v_i_61102)) {\n            v__61121 = bool_or(v__61121, v__61120[(v_i_61102 + (64 * v_MWidthC_1 * v_w_id_61099) + (64 * v_l_id_61100))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_61103 = 0; \n            v__61125[v_l_id_61100] = id(v__61121); \n          }\n          /* end map_seq */\n          v_l_id_61100 = atomic_inc(&(v_work_idx_4256)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_61104 = get_local_id(0); \n        int v_tmp_61190 = 0; \n        v__45239 = v_tmp_61190; \n        /* reduce_seq */\n        for (int v_i_61105 = 0; v_i_61105 < v_MWidthC_1; v_i_61105 = (1 + v_i_61105)) {\n          v__45239 = bool_or(v__45239, v__61125[(v_i_61105 + (v_MWidthC_1 * v_l_id_61104))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61106 = 0; \n          v__61130[v_w_id_61099] = doubleAndOr(v__45239, v__61111, v__61110[v_w_id_61099], v__61112); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_61099 = atomic_inc(v_work_idx_4258); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61107",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61108",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61109",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61111",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61112",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61120",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61114",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__61130",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61125",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}