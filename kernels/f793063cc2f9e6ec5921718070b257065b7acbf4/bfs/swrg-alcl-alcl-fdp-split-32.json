{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55153, const global int* restrict v__55154, const global int* restrict v__55155, const global int* restrict v__55156, int v__55157, int v__55158, global int* v__55175, local int* v__55170, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55161; \n  int v__55163; \n  int v__45239; \n  /* Private Memory */\n  int v__55165_0;\n  \n  int v__55167_0;\n  \n  for (int v_wg_id_55146 = get_group_id(0); v_wg_id_55146 < v_MHeight_2; v_wg_id_55146 = (v_wg_id_55146 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3713; \n      v_work_idx_3713 = 0; \n      int v_l_id_55147 = atomic_inc(&(v_work_idx_3713)); \n      while((v_l_id_55147 < v_MWidthC_1)){\n        int v_tmp_55228 = 0; \n        v__55161 = v_tmp_55228; \n        /* reduce_seq */\n        for (int v_i_55148 = 0; v_i_55148 < 32; v_i_55148 = (1 + v_i_55148)) {\n          int v_tmp_55229 = 0; \n          v__55163 = v_tmp_55229; \n          int v_index_55230 = v__55153[(v_l_id_55147 + (32 * v_MWidthC_1 * v_wg_id_55146) + (v_MWidthC_1 * v_i_55148))]; \n          if (v_index_55230 < 0) {\n            v__55165_0 = v__55163; \n          } else {\n            if (v_index_55230 >= v_VLength_3) {\n              v__55165_0 = v__55163; \n            } else {\n              v__55165_0 = v__55155[v_index_55230]; \n            }\n          }\n          v__55167_0 = bool_and(v__55165_0, v__55154[(v_l_id_55147 + (32 * v_MWidthC_1 * v_wg_id_55146) + (v_MWidthC_1 * v_i_55148))]); \n          v__55161 = bool_or(v__55167_0, v__55161); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55149 = 0; \n          v__55170[v_l_id_55147] = id(v__55161); \n        }\n        /* end map_seq */\n        v_l_id_55147 = atomic_inc(&(v_work_idx_3713)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3708; \n      v_work_idx_3708 = 0; \n      int v_l_id_55150 = atomic_inc(&(v_work_idx_3708)); \n      while((v_l_id_55150 < 1)){\n        int v_tmp_55233 = 0; \n        v__45239 = v_tmp_55233; \n        /* reduce_seq */\n        for (int v_i_55151 = 0; v_i_55151 < v_MWidthC_1; v_i_55151 = (1 + v_i_55151)) {\n          v__45239 = bool_or(v__45239, v__55170[(v_i_55151 + (v_MWidthC_1 * v_l_id_55150))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55152 = 0; \n          v__55175[v_wg_id_55146] = doubleAndOr(v__45239, v__55157, v__55156[v_wg_id_55146], v__55158); \n        }\n        /* end map_seq */\n        v_l_id_55150 = atomic_inc(&(v_work_idx_3708)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55153",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55154",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__55175",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55170",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}