{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51015, const global int* restrict v__51016, const global int* restrict v__51017, const global int* restrict v__51018, int v__51019, int v__51020, global int* v__51039, local int* v__51034, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51023; \n  int v__51025; \n  int v__45239; \n  /* Private Memory */\n  int v__51027_0;\n  \n  int v__51029_0;\n  \n  int v__51033_0;\n  \n  for (int v_wg_id_51008 = get_group_id(0); v_wg_id_51008 < v_MHeight_2; v_wg_id_51008 = (v_wg_id_51008 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3339; \n      v_work_idx_3339 = 0; \n      int v_l_id_51009 = atomic_inc(&(v_work_idx_3339)); \n      while((v_l_id_51009 < v_MWidthC_1)){\n        int v_tmp_51095 = 0; \n        v__51023 = v_tmp_51095; \n        /* reduce_while_seq */\n        for (int v_i_51010 = 0; v_i_51010 < 16; v_i_51010 = (1 + v_i_51010)) {\n          v__51033_0 = check(v__51023, v__51015[(v_l_id_51009 + (16 * v_MWidthC_1 * v_wg_id_51008) + (v_MWidthC_1 * v_i_51010))]); \n          if (v__51033_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51096 = 0; \n          v__51025 = v_tmp_51096; \n          int v_index_51097 = v__51015[(v_l_id_51009 + (16 * v_MWidthC_1 * v_wg_id_51008) + (v_MWidthC_1 * v_i_51010))]; \n          if (v_index_51097 < 0) {\n            v__51027_0 = v__51025; \n          } else {\n            if (v_index_51097 >= v_VLength_3) {\n              v__51027_0 = v__51025; \n            } else {\n              v__51027_0 = v__51017[v_index_51097]; \n            }\n          }\n          v__51029_0 = bool_and(v__51027_0, v__51016[(v_l_id_51009 + (16 * v_MWidthC_1 * v_wg_id_51008) + (v_MWidthC_1 * v_i_51010))]); \n          v__51023 = bool_or(v__51029_0, v__51023); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51011 = 0; \n          v__51034[v_l_id_51009] = id(v__51023); \n        }\n        /* end map_seq */\n        v_l_id_51009 = atomic_inc(&(v_work_idx_3339)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3334; \n      v_work_idx_3334 = 0; \n      int v_l_id_51012 = atomic_inc(&(v_work_idx_3334)); \n      while((v_l_id_51012 < 1)){\n        int v_tmp_51100 = 0; \n        v__45239 = v_tmp_51100; \n        /* reduce_seq */\n        for (int v_i_51013 = 0; v_i_51013 < v_MWidthC_1; v_i_51013 = (1 + v_i_51013)) {\n          v__45239 = bool_or(v__45239, v__51034[(v_i_51013 + (v_MWidthC_1 * v_l_id_51012))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51014 = 0; \n          v__51039[v_wg_id_51008] = doubleAndOr(v__45239, v__51019, v__51018[v_wg_id_51008], v__51020); \n        }\n        /* end map_seq */\n        v_l_id_51012 = atomic_inc(&(v_work_idx_3334)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__51015",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51016",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51017",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51019",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51020",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__51039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51034",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}