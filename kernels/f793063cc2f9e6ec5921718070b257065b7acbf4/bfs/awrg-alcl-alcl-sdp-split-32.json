{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57172, const global int* restrict v__57173, const global int* restrict v__57174, const global int* restrict v__57175, int v__57176, int v__57177, global int* v__57195, global int* v__57185, global int* v__57179, local int* v__57190, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__57181; \n  int v__57186; \n  int v__45239; \n  /* Private Memory */\n  int v__57183_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3906 = v__57179; \n    local int v_w_id_57164; \n    if (get_local_id(0) == 0) {\n      v_w_id_57164 = atomic_inc(v_work_idx_3906); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_57164 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3904; \n        v_work_idx_3904 = 0; \n        int v_l_id_57165 = atomic_inc(&(v_work_idx_3904)); \n        while((v_l_id_57165 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_57166 = 0; v_i_57166 < 32; v_i_57166 = (1 + v_i_57166)) {\n            int v_tmp_57246 = 0; \n            v__57181 = v_tmp_57246; \n            int v_index_57247 = v__57172[(v_l_id_57165 + (32 * v_MWidthC_1 * v_w_id_57164) + (v_MWidthC_1 * v_i_57166))]; \n            if (v_index_57247 < 0) {\n              v__57183_0 = v__57181; \n            } else {\n              if (v_index_57247 >= v_VLength_3) {\n                v__57183_0 = v__57181; \n              } else {\n                v__57183_0 = v__57174[v_index_57247]; \n              }\n            }\n            v__57185[(31 + (32 * v_MWidthC_1 * v_w_id_57164) + (-1 * v_i_57166) + (32 * v_l_id_57165))] = bool_and(v__57183_0, v__57173[(v_l_id_57165 + (32 * v_MWidthC_1 * v_w_id_57164) + (v_MWidthC_1 * v_i_57166))]); \n          }\n          /* end map_seq */\n          int v_tmp_57248 = 0; \n          v__57186 = v_tmp_57248; \n          /* reduce_seq */\n          for (int v_i_57167 = 0; v_i_57167 < 32; v_i_57167 = (1 + v_i_57167)) {\n            v__57186 = bool_or(v__57186, v__57185[(v_i_57167 + (32 * v_MWidthC_1 * v_w_id_57164) + (32 * v_l_id_57165))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_57168 = 0; \n            v__57190[v_l_id_57165] = id(v__57186); \n          }\n          /* end map_seq */\n          v_l_id_57165 = atomic_inc(&(v_work_idx_3904)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3898; \n        v_work_idx_3898 = 0; \n        int v_l_id_57169 = atomic_inc(&(v_work_idx_3898)); \n        while((v_l_id_57169 < 1)){\n          int v_tmp_57251 = 0; \n          v__45239 = v_tmp_57251; \n          /* reduce_seq */\n          for (int v_i_57170 = 0; v_i_57170 < v_MWidthC_1; v_i_57170 = (1 + v_i_57170)) {\n            v__45239 = bool_or(v__45239, v__57190[(v_i_57170 + (v_MWidthC_1 * v_l_id_57169))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_57171 = 0; \n            v__57195[v_w_id_57164] = doubleAndOr(v__45239, v__57176, v__57175[v_w_id_57164], v__57177); \n          }\n          /* end map_seq */\n          v_l_id_57169 = atomic_inc(&(v_work_idx_3898)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_57164 = atomic_inc(v_work_idx_3906); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__57172",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57173",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57174",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57175",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57176",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57177",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__57185",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57179",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__57195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__57190",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}