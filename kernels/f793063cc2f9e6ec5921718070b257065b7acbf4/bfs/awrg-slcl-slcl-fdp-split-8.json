{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47449, const global int* restrict v__47450, const global int* restrict v__47451, const global int* restrict v__47452, int v__47453, int v__47454, global int* v__47472, global int* v__47456, local int* v__47467, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47458; \n  int v__47460; \n  int v__45239; \n  /* Private Memory */\n  int v__47462_0;\n  \n  int v__47464_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3012 = v__47456; \n    local int v_w_id_47442; \n    if (get_local_id(0) == 0) {\n      v_w_id_47442 = atomic_inc(v_work_idx_3012); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47442 < v_MHeight_2)){\n      for (int v_l_id_47443 = get_local_id(0); v_l_id_47443 < v_MWidthC_1; v_l_id_47443 = (v_l_id_47443 + get_local_size(0))) {\n        int v_tmp_47535 = 0; \n        v__47458 = v_tmp_47535; \n        /* reduce_seq */\n        for (int v_i_47444 = 0; v_i_47444 < 8; v_i_47444 = (1 + v_i_47444)) {\n          int v_tmp_47536 = 0; \n          v__47460 = v_tmp_47536; \n          int v_index_47537 = v__47449[(v_l_id_47443 + (8 * v_MWidthC_1 * v_w_id_47442) + (v_MWidthC_1 * v_i_47444))]; \n          if (v_index_47537 < 0) {\n            v__47462_0 = v__47460; \n          } else {\n            if (v_index_47537 >= v_VLength_3) {\n              v__47462_0 = v__47460; \n            } else {\n              v__47462_0 = v__47451[v_index_47537]; \n            }\n          }\n          v__47464_0 = bool_and(v__47462_0, v__47450[(v_l_id_47443 + (8 * v_MWidthC_1 * v_w_id_47442) + (v_MWidthC_1 * v_i_47444))]); \n          v__47458 = bool_or(v__47464_0, v__47458); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47445 = 0; \n          v__47467[v_l_id_47443] = id(v__47458); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_47446 = get_local_id(0); \n        int v_tmp_47540 = 0; \n        v__45239 = v_tmp_47540; \n        /* reduce_seq */\n        for (int v_i_47447 = 0; v_i_47447 < v_MWidthC_1; v_i_47447 = (1 + v_i_47447)) {\n          v__45239 = bool_or(v__45239, v__47467[(v_i_47447 + (v_MWidthC_1 * v_l_id_47446))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47448 = 0; \n          v__47472[v_w_id_47442] = doubleAndOr(v__45239, v__47453, v__47452[v_w_id_47442], v__47454); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47442 = atomic_inc(v_work_idx_3012); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__47449",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47450",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47451",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47452",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47453",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47454",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47456",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47467",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}