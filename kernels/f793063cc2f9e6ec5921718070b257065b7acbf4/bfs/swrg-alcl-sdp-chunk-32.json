{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54319, const global int* restrict v__54320, const global int* restrict v__54321, const global int* restrict v__54322, int v__54323, int v__54324, global int* v__54337, global int* v__54331, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54327; \n  int v__54332; \n  /* Private Memory */\n  int v__54329_0;\n  \n  for (int v_wg_id_54314 = get_group_id(0); v_wg_id_54314 < ((v_MHeight_2)/(32)); v_wg_id_54314 = (v_wg_id_54314 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3634; \n      v_work_idx_3634 = 0; \n      int v_l_id_54315 = atomic_inc(&(v_work_idx_3634)); \n      while((v_l_id_54315 < 32)){\n        /* map_seq */\n        for (int v_i_54316 = 0; v_i_54316 < v_MWidthC_1; v_i_54316 = (1 + v_i_54316)) {\n          int v_tmp_54377 = 0; \n          v__54327 = v_tmp_54377; \n          int v_index_54378 = v__54319[(v_i_54316 + (32 * v_MWidthC_1 * v_wg_id_54314) + (v_MWidthC_1 * v_l_id_54315))]; \n          if (v_index_54378 < 0) {\n            v__54329_0 = v__54327; \n          } else {\n            if (v_index_54378 >= v_VLength_3) {\n              v__54329_0 = v__54327; \n            } else {\n              v__54329_0 = v__54321[v_index_54378]; \n            }\n          }\n          v__54331[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_54314) + (-1 * v_i_54316) + (v_MWidthC_1 * v_l_id_54315))] = bool_and(v__54329_0, v__54320[(v_i_54316 + (32 * v_MWidthC_1 * v_wg_id_54314) + (v_MWidthC_1 * v_l_id_54315))]); \n        }\n        /* end map_seq */\n        int v_tmp_54379 = 0; \n        v__54332 = v_tmp_54379; \n        /* reduce_seq */\n        for (int v_i_54317 = 0; v_i_54317 < v_MWidthC_1; v_i_54317 = (1 + v_i_54317)) {\n          v__54332 = bool_or(v__54332, v__54331[(v_i_54317 + (32 * v_MWidthC_1 * v_wg_id_54314) + (v_MWidthC_1 * v_l_id_54315))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54318 = 0; \n          v__54337[(v_l_id_54315 + (32 * v_wg_id_54314))] = doubleAndOr(v__54332, v__54323, v__54322[(v_l_id_54315 + (32 * v_wg_id_54314))], v__54324); \n        }\n        /* end map_seq */\n        v_l_id_54315 = atomic_inc(&(v_work_idx_3634)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54320",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54321",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54323",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54324",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54331",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54337",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}