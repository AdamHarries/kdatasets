{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50827, const global int* restrict v__50828, const global int* restrict v__50829, const global int* restrict v__50830, int v__50831, int v__50832, global int* v__50849, global int* v__50839, local int* v__50844, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50835; \n  int v__50840; \n  int v__45239; \n  /* Private Memory */\n  int v__50837_0;\n  \n  for (int v_wg_id_50819 = get_group_id(0); v_wg_id_50819 < v_MHeight_2; v_wg_id_50819 = (v_wg_id_50819 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3319; \n      v_work_idx_3319 = 0; \n      int v_l_id_50820 = atomic_inc(&(v_work_idx_3319)); \n      while((v_l_id_50820 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_50821 = 0; v_i_50821 < 16; v_i_50821 = (1 + v_i_50821)) {\n          int v_tmp_50902 = 0; \n          v__50835 = v_tmp_50902; \n          int v_index_50903 = v__50827[(v_l_id_50820 + (16 * v_MWidthC_1 * v_wg_id_50819) + (v_MWidthC_1 * v_i_50821))]; \n          if (v_index_50903 < 0) {\n            v__50837_0 = v__50835; \n          } else {\n            if (v_index_50903 >= v_VLength_3) {\n              v__50837_0 = v__50835; \n            } else {\n              v__50837_0 = v__50829[v_index_50903]; \n            }\n          }\n          v__50839[(15 + (16 * v_MWidthC_1 * v_wg_id_50819) + (-1 * v_i_50821) + (16 * v_l_id_50820))] = bool_and(v__50837_0, v__50828[(v_l_id_50820 + (16 * v_MWidthC_1 * v_wg_id_50819) + (v_MWidthC_1 * v_i_50821))]); \n        }\n        /* end map_seq */\n        int v_tmp_50904 = 0; \n        v__50840 = v_tmp_50904; \n        /* reduce_seq */\n        for (int v_i_50822 = 0; v_i_50822 < 16; v_i_50822 = (1 + v_i_50822)) {\n          v__50840 = bool_or(v__50840, v__50839[(v_i_50822 + (16 * v_MWidthC_1 * v_wg_id_50819) + (16 * v_l_id_50820))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50823 = 0; \n          v__50844[v_l_id_50820] = id(v__50840); \n        }\n        /* end map_seq */\n        v_l_id_50820 = atomic_inc(&(v_work_idx_3319)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3313; \n      v_work_idx_3313 = 0; \n      int v_l_id_50824 = atomic_inc(&(v_work_idx_3313)); \n      while((v_l_id_50824 < 1)){\n        int v_tmp_50907 = 0; \n        v__45239 = v_tmp_50907; \n        /* reduce_seq */\n        for (int v_i_50825 = 0; v_i_50825 < v_MWidthC_1; v_i_50825 = (1 + v_i_50825)) {\n          v__45239 = bool_or(v__45239, v__50844[(v_i_50825 + (v_MWidthC_1 * v_l_id_50824))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50826 = 0; \n          v__50849[v_wg_id_50819] = doubleAndOr(v__45239, v__50831, v__50830[v_wg_id_50819], v__50832); \n        }\n        /* end map_seq */\n        v_l_id_50824 = atomic_inc(&(v_work_idx_3313)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__50827",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50828",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50829",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50831",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50832",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__50839",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__50849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__50844",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}