{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58622, const global int* restrict v__58623, const global int* restrict v__58624, const global int* restrict v__58625, int v__58626, int v__58627, global int* v__58640, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58630; \n  int v__58632; \n  /* Private Memory */\n  int v__58634_0;\n  \n  int v__58636_0;\n  \n  for (int v_wg_id_58618 = get_group_id(0); v_wg_id_58618 < ((v_MHeight_2)/(64)); v_wg_id_58618 = (v_wg_id_58618 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4024; \n      v_work_idx_4024 = 0; \n      int v_l_id_58619 = atomic_inc(&(v_work_idx_4024)); \n      while((v_l_id_58619 < 64)){\n        int v_tmp_58678 = 0; \n        v__58630 = v_tmp_58678; \n        /* reduce_seq */\n        for (int v_i_58620 = 0; v_i_58620 < v_MWidthC_1; v_i_58620 = (1 + v_i_58620)) {\n          int v_tmp_58679 = 0; \n          v__58632 = v_tmp_58679; \n          int v_index_58680 = v__58622[(v_i_58620 + (64 * v_MWidthC_1 * v_wg_id_58618) + (v_MWidthC_1 * v_l_id_58619))]; \n          if (v_index_58680 < 0) {\n            v__58634_0 = v__58632; \n          } else {\n            if (v_index_58680 >= v_VLength_3) {\n              v__58634_0 = v__58632; \n            } else {\n              v__58634_0 = v__58624[v_index_58680]; \n            }\n          }\n          v__58636_0 = bool_and(v__58634_0, v__58623[(v_i_58620 + (64 * v_MWidthC_1 * v_wg_id_58618) + (v_MWidthC_1 * v_l_id_58619))]); \n          v__58630 = bool_or(v__58636_0, v__58630); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58621 = 0; \n          v__58640[(v_l_id_58619 + (64 * v_wg_id_58618))] = doubleAndOr(v__58630, v__58626, v__58625[(v_l_id_58619 + (64 * v_wg_id_58618))], v__58627); \n        }\n        /* end map_seq */\n        v_l_id_58619 = atomic_inc(&(v_work_idx_4024)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58622",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58624",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58626",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58627",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58640",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}