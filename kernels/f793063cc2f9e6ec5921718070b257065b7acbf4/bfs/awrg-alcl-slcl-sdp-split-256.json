{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69571, const global int* restrict v__69572, const global int* restrict v__69573, const global int* restrict v__69574, int v__69575, int v__69576, global int* v__69594, global int* v__69584, global int* v__69578, local int* v__69589, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__69580; \n  int v__69585; \n  int v__45239; \n  /* Private Memory */\n  int v__69582_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5026 = v__69578; \n    local int v_w_id_69563; \n    if (get_local_id(0) == 0) {\n      v_w_id_69563 = atomic_inc(v_work_idx_5026); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69563 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5024; \n        v_work_idx_5024 = 0; \n        int v_l_id_69564 = atomic_inc(&(v_work_idx_5024)); \n        while((v_l_id_69564 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_69565 = 0; v_i_69565 < 256; v_i_69565 = (1 + v_i_69565)) {\n            int v_tmp_69649 = 0; \n            v__69580 = v_tmp_69649; \n            int v_index_69650 = v__69571[(v_l_id_69564 + (256 * v_MWidthC_1 * v_w_id_69563) + (v_MWidthC_1 * v_i_69565))]; \n            if (v_index_69650 < 0) {\n              v__69582_0 = v__69580; \n            } else {\n              if (v_index_69650 >= v_VLength_3) {\n                v__69582_0 = v__69580; \n              } else {\n                v__69582_0 = v__69573[v_index_69650]; \n              }\n            }\n            v__69584[(255 + (256 * v_MWidthC_1 * v_w_id_69563) + (-1 * v_i_69565) + (256 * v_l_id_69564))] = bool_and(v__69582_0, v__69572[(v_l_id_69564 + (256 * v_MWidthC_1 * v_w_id_69563) + (v_MWidthC_1 * v_i_69565))]); \n          }\n          /* end map_seq */\n          int v_tmp_69651 = 0; \n          v__69585 = v_tmp_69651; \n          /* reduce_seq */\n          for (int v_i_69566 = 0; v_i_69566 < 256; v_i_69566 = (1 + v_i_69566)) {\n            v__69585 = bool_or(v__69585, v__69584[(v_i_69566 + (256 * v_MWidthC_1 * v_w_id_69563) + (256 * v_l_id_69564))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69567 = 0; \n            v__69589[v_l_id_69564] = id(v__69585); \n          }\n          /* end map_seq */\n          v_l_id_69564 = atomic_inc(&(v_work_idx_5024)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69568 = get_local_id(0); \n        int v_tmp_69654 = 0; \n        v__45239 = v_tmp_69654; \n        /* reduce_seq */\n        for (int v_i_69569 = 0; v_i_69569 < v_MWidthC_1; v_i_69569 = (1 + v_i_69569)) {\n          v__45239 = bool_or(v__45239, v__69589[(v_i_69569 + (v_MWidthC_1 * v_l_id_69568))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69570 = 0; \n          v__69594[v_w_id_69563] = doubleAndOr(v__45239, v__69575, v__69574[v_w_id_69563], v__69576); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69563 = atomic_inc(v_work_idx_5026); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__69571",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69572",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69573",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69575",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69576",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69584",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69578",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69589",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}