{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47867, const global int* restrict v__47868, const global int* restrict v__47869, const global int* restrict v__47870, int v__47871, int v__47872, global int* v__47892, global int* v__47874, local int* v__47887, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47876; \n  int v__47878; \n  int v__45239; \n  /* Private Memory */\n  int v__47880_0;\n  \n  int v__47882_0;\n  \n  int v__47886_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3052 = v__47874; \n    local int v_w_id_47860; \n    if (get_local_id(0) == 0) {\n      v_w_id_47860 = atomic_inc(v_work_idx_3052); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47860 < v_MHeight_2)){\n      for (int v_l_id_47861 = get_local_id(0); v_l_id_47861 < v_MWidthC_1; v_l_id_47861 = (v_l_id_47861 + get_local_size(0))) {\n        int v_tmp_47954 = 0; \n        v__47876 = v_tmp_47954; \n        /* reduce_while_seq */\n        for (int v_i_47862 = 0; v_i_47862 < 8; v_i_47862 = (1 + v_i_47862)) {\n          v__47886_0 = check(v__47876, v__47867[(v_l_id_47861 + (8 * v_MWidthC_1 * v_w_id_47860) + (v_MWidthC_1 * v_i_47862))]); \n          if (v__47886_0) {\n          } else {\n            break;\n          }\n          int v_tmp_47955 = 0; \n          v__47878 = v_tmp_47955; \n          int v_index_47956 = v__47867[(v_l_id_47861 + (8 * v_MWidthC_1 * v_w_id_47860) + (v_MWidthC_1 * v_i_47862))]; \n          if (v_index_47956 < 0) {\n            v__47880_0 = v__47878; \n          } else {\n            if (v_index_47956 >= v_VLength_3) {\n              v__47880_0 = v__47878; \n            } else {\n              v__47880_0 = v__47869[v_index_47956]; \n            }\n          }\n          v__47882_0 = bool_and(v__47880_0, v__47868[(v_l_id_47861 + (8 * v_MWidthC_1 * v_w_id_47860) + (v_MWidthC_1 * v_i_47862))]); \n          v__47876 = bool_or(v__47882_0, v__47876); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47863 = 0; \n          v__47887[v_l_id_47861] = id(v__47876); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3046; \n        v_work_idx_3046 = 0; \n        int v_l_id_47864 = atomic_inc(&(v_work_idx_3046)); \n        while((v_l_id_47864 < 1)){\n          int v_tmp_47959 = 0; \n          v__45239 = v_tmp_47959; \n          /* reduce_seq */\n          for (int v_i_47865 = 0; v_i_47865 < v_MWidthC_1; v_i_47865 = (1 + v_i_47865)) {\n            v__45239 = bool_or(v__45239, v__47887[(v_i_47865 + (v_MWidthC_1 * v_l_id_47864))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_47866 = 0; \n            v__47892[v_w_id_47860] = doubleAndOr(v__45239, v__47871, v__47870[v_w_id_47860], v__47872); \n          }\n          /* end map_seq */\n          v_l_id_47864 = atomic_inc(&(v_work_idx_3046)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47860 = atomic_inc(v_work_idx_3052); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47867",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47868",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47869",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47871",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47872",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47874",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47887",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}