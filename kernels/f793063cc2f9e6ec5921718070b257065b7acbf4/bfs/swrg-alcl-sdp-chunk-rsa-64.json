{
  "name" : "swrg-alcl-sdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__58769, const global int* restrict v__58770, const global int* restrict v__58771, const global int* restrict v__58772, int v__58773, int v__58774, global int* v__58788, global int* v__58787, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58776; \n  int v__58779; \n  /* Private Memory */\n  int v__58781_0;\n  \n  int v__58783_0;\n  \n  for (int v_wg_id_58764 = get_group_id(0); v_wg_id_58764 < ((v_MHeight_2)/(64)); v_wg_id_58764 = (v_wg_id_58764 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4036; \n      v_work_idx_4036 = 0; \n      int v_l_id_58765 = atomic_inc(&(v_work_idx_4036)); \n      while((v_l_id_58765 < 64)){\n        int v_tmp_58821 = 0; \n        v__58776 = v_tmp_58821; \n        /* reduce_seq */\n        int v_stop_58822 = min(v__58769[(1 + (v__58769[(v_l_id_58765 + (64 * v_wg_id_58764))] / 4))], v__58770[(1 + (v__58770[(v_l_id_58765 + (64 * v_wg_id_58764))] / 4))]); \n        for (int v_i_58766 = 0; v_i_58766 < v_stop_58822; v_i_58766 = (1 + v_i_58766)) {\n          int v_tmp_58827 = 0; \n          v__58779 = v_tmp_58827; \n          int v_index_58829 = v__58769[(2 + v_i_58766 + (v__58769[(v_l_id_58765 + (64 * v_wg_id_58764))] / 4))]; \n          if (v_index_58829 < 0) {\n            v__58781_0 = v__58779; \n          } else {\n            if (v_index_58829 >= v_MWidthC_1) {\n              v__58781_0 = v__58779; \n            } else {\n              v__58781_0 = v__58771[v_index_58829]; \n            }\n          }\n          v__58783_0 = bool_and(v__58770[(2 + v_i_58766 + (v__58770[(v_l_id_58765 + (64 * v_wg_id_58764))] / 4))], v__58781_0); \n          v__58776 = bool_or(v__58776, v__58783_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58767 = 0; \n          v__58787[(v_l_id_58765 + (64 * v_wg_id_58764))] = doubleAndOr(v__58776, v__58773, v__58772[(v_l_id_58765 + (64 * v_wg_id_58764))], v__58774); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58768 = 0; \n          v__58788[(v_l_id_58765 + (64 * v_wg_id_58764))] = id(v__58787[(v_l_id_58765 + (64 * v_wg_id_58764))]); \n        }\n        /* end map_seq */\n        v_l_id_58765 = atomic_inc(&(v_work_idx_4036)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58769",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__58770",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__58771",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__58772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58773",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58774",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58787",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__58788",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}