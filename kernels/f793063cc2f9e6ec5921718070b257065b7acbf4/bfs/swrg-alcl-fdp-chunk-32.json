{
  "name" : "swrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54390, const global int* restrict v__54391, const global int* restrict v__54392, const global int* restrict v__54393, int v__54394, int v__54395, global int* v__54408, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54398; \n  int v__54400; \n  /* Private Memory */\n  int v__54402_0;\n  \n  int v__54404_0;\n  \n  for (int v_wg_id_54386 = get_group_id(0); v_wg_id_54386 < ((v_MHeight_2)/(32)); v_wg_id_54386 = (v_wg_id_54386 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3640; \n      v_work_idx_3640 = 0; \n      int v_l_id_54387 = atomic_inc(&(v_work_idx_3640)); \n      while((v_l_id_54387 < 32)){\n        int v_tmp_54446 = 0; \n        v__54398 = v_tmp_54446; \n        /* reduce_seq */\n        for (int v_i_54388 = 0; v_i_54388 < v_MWidthC_1; v_i_54388 = (1 + v_i_54388)) {\n          int v_tmp_54447 = 0; \n          v__54400 = v_tmp_54447; \n          int v_index_54448 = v__54390[(v_i_54388 + (32 * v_MWidthC_1 * v_wg_id_54386) + (v_MWidthC_1 * v_l_id_54387))]; \n          if (v_index_54448 < 0) {\n            v__54402_0 = v__54400; \n          } else {\n            if (v_index_54448 >= v_VLength_3) {\n              v__54402_0 = v__54400; \n            } else {\n              v__54402_0 = v__54392[v_index_54448]; \n            }\n          }\n          v__54404_0 = bool_and(v__54402_0, v__54391[(v_i_54388 + (32 * v_MWidthC_1 * v_wg_id_54386) + (v_MWidthC_1 * v_l_id_54387))]); \n          v__54398 = bool_or(v__54404_0, v__54398); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54389 = 0; \n          v__54408[(v_l_id_54387 + (32 * v_wg_id_54386))] = doubleAndOr(v__54398, v__54394, v__54393[(v_l_id_54387 + (32 * v_wg_id_54386))], v__54395); \n        }\n        /* end map_seq */\n        v_l_id_54387 = atomic_inc(&(v_work_idx_3640)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__54390",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54392",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54393",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54394",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54395",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54408",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}