{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62923, const global int* restrict v__62924, const global int* restrict v__62925, const global int* restrict v__62926, int v__62927, int v__62928, global int* v__62943, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62930; \n  int v__62933; \n  /* Private Memory */\n  int v__62935_0;\n  \n  int v__62937_0;\n  \n  int v__62941_0;\n  \n  for (int v_wg_id_62919 = get_group_id(0); v_wg_id_62919 < ((v_MHeight_2)/(128)); v_wg_id_62919 = (v_wg_id_62919 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4414; \n      v_work_idx_4414 = 0; \n      int v_l_id_62920 = atomic_inc(&(v_work_idx_4414)); \n      while((v_l_id_62920 < 128)){\n        int v_tmp_62987 = 0; \n        v__62930 = v_tmp_62987; \n        /* reduce_while_seq */\n        for (int v_i_62921 = 0; v_i_62921 < v_MWidthC_1; v_i_62921 = (1 + v_i_62921)) {\n          v__62941_0 = check(v__62930, v__62923[(v_i_62921 + (128 * v_MWidthC_1 * v_wg_id_62919) + (v_MWidthC_1 * v_l_id_62920))]); \n          if (v__62941_0) {\n          } else {\n            break;\n          }\n          int v_tmp_62988 = 0; \n          v__62933 = v_tmp_62988; \n          int v_index_62989 = v__62923[(v_i_62921 + (128 * v_MWidthC_1 * v_wg_id_62919) + (v_MWidthC_1 * v_l_id_62920))]; \n          if (v_index_62989 < 0) {\n            v__62935_0 = v__62933; \n          } else {\n            if (v_index_62989 >= v_VLength_3) {\n              v__62935_0 = v__62933; \n            } else {\n              v__62935_0 = v__62925[v_index_62989]; \n            }\n          }\n          v__62937_0 = bool_and(v__62935_0, v__62924[(v_i_62921 + (128 * v_MWidthC_1 * v_wg_id_62919) + (v_MWidthC_1 * v_l_id_62920))]); \n          v__62930 = bool_or(v__62937_0, v__62930); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62922 = 0; \n          v__62943[(v_l_id_62920 + (128 * v_wg_id_62919))] = doubleAndOr(v__62930, v__62927, v__62926[(v_l_id_62920 + (128 * v_wg_id_62919))], v__62928); \n        }\n        /* end map_seq */\n        v_l_id_62920 = atomic_inc(&(v_work_idx_4414)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62923",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62925",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62927",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62928",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}