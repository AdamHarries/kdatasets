{
  "name" : "swrg-alcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__50451, const global int* restrict v__50452, const global int* restrict v__50453, const global int* restrict v__50454, int v__50455, int v__50456, global int* v__50470, global int* v__50469, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50458; \n  int v__50461; \n  /* Private Memory */\n  int v__50463_0;\n  \n  int v__50465_0;\n  \n  for (int v_wg_id_50446 = get_group_id(0); v_wg_id_50446 < ((v_MHeight_2)/(16)); v_wg_id_50446 = (v_wg_id_50446 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3280; \n      v_work_idx_3280 = 0; \n      int v_l_id_50447 = atomic_inc(&(v_work_idx_3280)); \n      while((v_l_id_50447 < 16)){\n        int v_tmp_50503 = 0; \n        v__50458 = v_tmp_50503; \n        /* reduce_seq */\n        int v_stop_50504 = min(v__50451[(1 + (v__50451[(v_l_id_50447 + (16 * v_wg_id_50446))] / 4))], v__50452[(1 + (v__50452[(v_l_id_50447 + (16 * v_wg_id_50446))] / 4))]); \n        for (int v_i_50448 = 0; v_i_50448 < v_stop_50504; v_i_50448 = (1 + v_i_50448)) {\n          int v_tmp_50509 = 0; \n          v__50461 = v_tmp_50509; \n          int v_index_50511 = v__50451[(2 + v_i_50448 + (v__50451[(v_l_id_50447 + (16 * v_wg_id_50446))] / 4))]; \n          if (v_index_50511 < 0) {\n            v__50463_0 = v__50461; \n          } else {\n            if (v_index_50511 >= v_MWidthC_1) {\n              v__50463_0 = v__50461; \n            } else {\n              v__50463_0 = v__50453[v_index_50511]; \n            }\n          }\n          v__50465_0 = bool_and(v__50452[(2 + v_i_50448 + (v__50452[(v_l_id_50447 + (16 * v_wg_id_50446))] / 4))], v__50463_0); \n          v__50458 = bool_or(v__50458, v__50465_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50449 = 0; \n          v__50469[(v_l_id_50447 + (16 * v_wg_id_50446))] = doubleAndOr(v__50458, v__50455, v__50454[(v_l_id_50447 + (16 * v_wg_id_50446))], v__50456); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50450 = 0; \n          v__50470[(v_l_id_50447 + (16 * v_wg_id_50446))] = id(v__50469[(v_l_id_50447 + (16 * v_wg_id_50446))]); \n        }\n        /* end map_seq */\n        v_l_id_50447 = atomic_inc(&(v_work_idx_3280)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__50451",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__50452",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__50453",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__50454",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50455",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50456",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__50469",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__50470",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}