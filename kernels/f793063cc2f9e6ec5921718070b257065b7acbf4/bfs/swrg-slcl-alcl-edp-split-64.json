{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58446, const global int* restrict v__58447, const global int* restrict v__58448, const global int* restrict v__58449, int v__58450, int v__58451, global int* v__58470, local int* v__58465, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58454; \n  int v__58456; \n  int v__45239; \n  /* Private Memory */\n  int v__58458_0;\n  \n  int v__58460_0;\n  \n  int v__58464_0;\n  \n  for (int v_wg_id_58439 = get_group_id(0); v_wg_id_58439 < v_MHeight_2; v_wg_id_58439 = (v_wg_id_58439 + get_num_groups(0))) {\n    for (int v_l_id_58440 = get_local_id(0); v_l_id_58440 < v_MWidthC_1; v_l_id_58440 = (v_l_id_58440 + get_local_size(0))) {\n      int v_tmp_58534 = 0; \n      v__58454 = v_tmp_58534; \n      /* reduce_while_seq */\n      for (int v_i_58441 = 0; v_i_58441 < 64; v_i_58441 = (1 + v_i_58441)) {\n        v__58464_0 = check(v__58454, v__58446[(v_l_id_58440 + (64 * v_MWidthC_1 * v_wg_id_58439) + (v_MWidthC_1 * v_i_58441))]); \n        if (v__58464_0) {\n        } else {\n          break;\n        }\n        int v_tmp_58535 = 0; \n        v__58456 = v_tmp_58535; \n        int v_index_58536 = v__58446[(v_l_id_58440 + (64 * v_MWidthC_1 * v_wg_id_58439) + (v_MWidthC_1 * v_i_58441))]; \n        if (v_index_58536 < 0) {\n          v__58458_0 = v__58456; \n        } else {\n          if (v_index_58536 >= v_VLength_3) {\n            v__58458_0 = v__58456; \n          } else {\n            v__58458_0 = v__58448[v_index_58536]; \n          }\n        }\n        v__58460_0 = bool_and(v__58458_0, v__58447[(v_l_id_58440 + (64 * v_MWidthC_1 * v_wg_id_58439) + (v_MWidthC_1 * v_i_58441))]); \n        v__58454 = bool_or(v__58460_0, v__58454); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58442 = 0; \n        v__58465[v_l_id_58440] = id(v__58454); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4007; \n      v_work_idx_4007 = 0; \n      int v_l_id_58443 = atomic_inc(&(v_work_idx_4007)); \n      while((v_l_id_58443 < 1)){\n        int v_tmp_58539 = 0; \n        v__45239 = v_tmp_58539; \n        /* reduce_seq */\n        for (int v_i_58444 = 0; v_i_58444 < v_MWidthC_1; v_i_58444 = (1 + v_i_58444)) {\n          v__45239 = bool_or(v__45239, v__58465[(v_i_58444 + (v_MWidthC_1 * v_l_id_58443))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58445 = 0; \n          v__58470[v_wg_id_58439] = doubleAndOr(v__45239, v__58450, v__58449[v_wg_id_58439], v__58451); \n        }\n        /* end map_seq */\n        v_l_id_58443 = atomic_inc(&(v_work_idx_4007)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__58446",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58447",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58448",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58449",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58450",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58451",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58470",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58465",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}