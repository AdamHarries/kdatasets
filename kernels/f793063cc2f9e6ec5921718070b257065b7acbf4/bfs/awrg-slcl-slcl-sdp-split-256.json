{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68504, const global int* restrict v__68505, const global int* restrict v__68506, const global int* restrict v__68507, int v__68508, int v__68509, global int* v__68527, global int* v__68517, global int* v__68511, local int* v__68522, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68513; \n  int v__68518; \n  int v__45239; \n  /* Private Memory */\n  int v__68515_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4923 = v__68511; \n    local int v_w_id_68496; \n    if (get_local_id(0) == 0) {\n      v_w_id_68496 = atomic_inc(v_work_idx_4923); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68496 < v_MHeight_2)){\n      for (int v_l_id_68497 = get_local_id(0); v_l_id_68497 < v_MWidthC_1; v_l_id_68497 = (v_l_id_68497 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_68498 = 0; v_i_68498 < 256; v_i_68498 = (1 + v_i_68498)) {\n          int v_tmp_68590 = 0; \n          v__68513 = v_tmp_68590; \n          int v_index_68591 = v__68504[(v_l_id_68497 + (256 * v_MWidthC_1 * v_w_id_68496) + (v_MWidthC_1 * v_i_68498))]; \n          if (v_index_68591 < 0) {\n            v__68515_0 = v__68513; \n          } else {\n            if (v_index_68591 >= v_VLength_3) {\n              v__68515_0 = v__68513; \n            } else {\n              v__68515_0 = v__68506[v_index_68591]; \n            }\n          }\n          v__68517[(255 + (256 * v_MWidthC_1 * v_w_id_68496) + (-1 * v_i_68498) + (256 * v_l_id_68497))] = bool_and(v__68515_0, v__68505[(v_l_id_68497 + (256 * v_MWidthC_1 * v_w_id_68496) + (v_MWidthC_1 * v_i_68498))]); \n        }\n        /* end map_seq */\n        int v_tmp_68592 = 0; \n        v__68518 = v_tmp_68592; \n        /* reduce_seq */\n        for (int v_i_68499 = 0; v_i_68499 < 256; v_i_68499 = (1 + v_i_68499)) {\n          v__68518 = bool_or(v__68518, v__68517[(v_i_68499 + (256 * v_MWidthC_1 * v_w_id_68496) + (256 * v_l_id_68497))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68500 = 0; \n          v__68522[v_l_id_68497] = id(v__68518); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_68501 = get_local_id(0); \n        int v_tmp_68595 = 0; \n        v__45239 = v_tmp_68595; \n        /* reduce_seq */\n        for (int v_i_68502 = 0; v_i_68502 < v_MWidthC_1; v_i_68502 = (1 + v_i_68502)) {\n          v__45239 = bool_or(v__45239, v__68522[(v_i_68502 + (v_MWidthC_1 * v_l_id_68501))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68503 = 0; \n          v__68527[v_w_id_68496] = doubleAndOr(v__45239, v__68508, v__68507[v_w_id_68496], v__68509); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_68496 = atomic_inc(v_work_idx_4923); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68504",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68505",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68506",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68507",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68508",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68509",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68517",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68511",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68527",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68522",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}