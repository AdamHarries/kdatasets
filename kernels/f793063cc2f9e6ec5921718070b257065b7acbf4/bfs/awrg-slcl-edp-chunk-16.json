{
  "name" : "awrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51260, const global int* restrict v__51261, const global int* restrict v__51262, const global int* restrict v__51263, int v__51264, int v__51265, global int* v__51281, global int* v__51267, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51268; \n  int v__51271; \n  /* Private Memory */\n  int v__51273_0;\n  \n  int v__51275_0;\n  \n  int v__51279_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3359 = v__51267; \n    local int v_w_id_51256; \n    if (get_local_id(0) == 0) {\n      v_w_id_51256 = atomic_inc(v_work_idx_3359); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_51256 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_51257 = get_local_id(0); v_l_id_51257 < 16; v_l_id_51257 = (v_l_id_51257 + get_local_size(0))) {\n        int v_tmp_51328 = 0; \n        v__51268 = v_tmp_51328; \n        /* reduce_while_seq */\n        for (int v_i_51258 = 0; v_i_51258 < v_MWidthC_1; v_i_51258 = (1 + v_i_51258)) {\n          v__51279_0 = check(v__51268, v__51260[(v_i_51258 + (16 * v_MWidthC_1 * v_w_id_51256) + (v_MWidthC_1 * v_l_id_51257))]); \n          if (v__51279_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51329 = 0; \n          v__51271 = v_tmp_51329; \n          int v_index_51330 = v__51260[(v_i_51258 + (16 * v_MWidthC_1 * v_w_id_51256) + (v_MWidthC_1 * v_l_id_51257))]; \n          if (v_index_51330 < 0) {\n            v__51273_0 = v__51271; \n          } else {\n            if (v_index_51330 >= v_VLength_3) {\n              v__51273_0 = v__51271; \n            } else {\n              v__51273_0 = v__51262[v_index_51330]; \n            }\n          }\n          v__51275_0 = bool_and(v__51273_0, v__51261[(v_i_51258 + (16 * v_MWidthC_1 * v_w_id_51256) + (v_MWidthC_1 * v_l_id_51257))]); \n          v__51268 = bool_or(v__51275_0, v__51268); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51259 = 0; \n          v__51281[(v_l_id_51257 + (16 * v_w_id_51256))] = doubleAndOr(v__51268, v__51264, v__51263[(v_l_id_51257 + (16 * v_w_id_51256))], v__51265); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_51256 = atomic_inc(v_work_idx_3359); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__51260",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51261",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51262",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51263",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51264",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51265",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51267",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__51281",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}