{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70938, const global int* restrict v__70939, const global int* restrict v__70940, const global int* restrict v__70941, int v__70942, int v__70943, global int* v__70960, global int* v__70950, local int* v__70955, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__70946; \n  int v__70951; \n  int v__45239; \n  /* Private Memory */\n  int v__70948_0;\n  \n  for (int v_wg_id_70930 = get_group_id(0); v_wg_id_70930 < v_MHeight_2; v_wg_id_70930 = (v_wg_id_70930 + get_num_groups(0))) {\n    for (int v_l_id_70931 = get_local_id(0); v_l_id_70931 < v_MWidthC_1; v_l_id_70931 = (v_l_id_70931 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_70932 = 0; v_i_70932 < 512; v_i_70932 = (1 + v_i_70932)) {\n        int v_tmp_71021 = 0; \n        v__70946 = v_tmp_71021; \n        int v_index_71022 = v__70938[(v_l_id_70931 + (512 * v_MWidthC_1 * v_wg_id_70930) + (v_MWidthC_1 * v_i_70932))]; \n        if (v_index_71022 < 0) {\n          v__70948_0 = v__70946; \n        } else {\n          if (v_index_71022 >= v_VLength_3) {\n            v__70948_0 = v__70946; \n          } else {\n            v__70948_0 = v__70940[v_index_71022]; \n          }\n        }\n        v__70950[(511 + (512 * v_MWidthC_1 * v_wg_id_70930) + (-1 * v_i_70932) + (512 * v_l_id_70931))] = bool_and(v__70948_0, v__70939[(v_l_id_70931 + (512 * v_MWidthC_1 * v_wg_id_70930) + (v_MWidthC_1 * v_i_70932))]); \n      }\n      /* end map_seq */\n      int v_tmp_71023 = 0; \n      v__70951 = v_tmp_71023; \n      /* reduce_seq */\n      for (int v_i_70933 = 0; v_i_70933 < 512; v_i_70933 = (1 + v_i_70933)) {\n        v__70951 = bool_or(v__70951, v__70950[(v_i_70933 + (512 * v_MWidthC_1 * v_wg_id_70930) + (512 * v_l_id_70931))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70934 = 0; \n        v__70955[v_l_id_70931] = id(v__70951); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5140; \n      v_work_idx_5140 = 0; \n      int v_l_id_70935 = atomic_inc(&(v_work_idx_5140)); \n      while((v_l_id_70935 < 1)){\n        int v_tmp_71026 = 0; \n        v__45239 = v_tmp_71026; \n        /* reduce_seq */\n        for (int v_i_70936 = 0; v_i_70936 < v_MWidthC_1; v_i_70936 = (1 + v_i_70936)) {\n          v__45239 = bool_or(v__45239, v__70955[(v_i_70936 + (v_MWidthC_1 * v_l_id_70935))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_70937 = 0; \n          v__70960[v_wg_id_70930] = doubleAndOr(v__45239, v__70942, v__70941[v_wg_id_70930], v__70943); \n        }\n        /* end map_seq */\n        v_l_id_70935 = atomic_inc(&(v_work_idx_5140)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__70938",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70939",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70940",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70941",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70942",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70943",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70950",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__70960",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70955",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}