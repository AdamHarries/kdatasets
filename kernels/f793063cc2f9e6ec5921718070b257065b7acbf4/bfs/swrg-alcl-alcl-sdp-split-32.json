{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55059, const global int* restrict v__55060, const global int* restrict v__55061, const global int* restrict v__55062, int v__55063, int v__55064, global int* v__55081, global int* v__55071, local int* v__55076, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55067; \n  int v__55072; \n  int v__45239; \n  /* Private Memory */\n  int v__55069_0;\n  \n  for (int v_wg_id_55051 = get_group_id(0); v_wg_id_55051 < v_MHeight_2; v_wg_id_55051 = (v_wg_id_55051 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3703; \n      v_work_idx_3703 = 0; \n      int v_l_id_55052 = atomic_inc(&(v_work_idx_3703)); \n      while((v_l_id_55052 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_55053 = 0; v_i_55053 < 32; v_i_55053 = (1 + v_i_55053)) {\n          int v_tmp_55134 = 0; \n          v__55067 = v_tmp_55134; \n          int v_index_55135 = v__55059[(v_l_id_55052 + (32 * v_MWidthC_1 * v_wg_id_55051) + (v_MWidthC_1 * v_i_55053))]; \n          if (v_index_55135 < 0) {\n            v__55069_0 = v__55067; \n          } else {\n            if (v_index_55135 >= v_VLength_3) {\n              v__55069_0 = v__55067; \n            } else {\n              v__55069_0 = v__55061[v_index_55135]; \n            }\n          }\n          v__55071[(31 + (32 * v_MWidthC_1 * v_wg_id_55051) + (-1 * v_i_55053) + (32 * v_l_id_55052))] = bool_and(v__55069_0, v__55060[(v_l_id_55052 + (32 * v_MWidthC_1 * v_wg_id_55051) + (v_MWidthC_1 * v_i_55053))]); \n        }\n        /* end map_seq */\n        int v_tmp_55136 = 0; \n        v__55072 = v_tmp_55136; \n        /* reduce_seq */\n        for (int v_i_55054 = 0; v_i_55054 < 32; v_i_55054 = (1 + v_i_55054)) {\n          v__55072 = bool_or(v__55072, v__55071[(v_i_55054 + (32 * v_MWidthC_1 * v_wg_id_55051) + (32 * v_l_id_55052))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55055 = 0; \n          v__55076[v_l_id_55052] = id(v__55072); \n        }\n        /* end map_seq */\n        v_l_id_55052 = atomic_inc(&(v_work_idx_3703)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3697; \n      v_work_idx_3697 = 0; \n      int v_l_id_55056 = atomic_inc(&(v_work_idx_3697)); \n      while((v_l_id_55056 < 1)){\n        int v_tmp_55139 = 0; \n        v__45239 = v_tmp_55139; \n        /* reduce_seq */\n        for (int v_i_55057 = 0; v_i_55057 < v_MWidthC_1; v_i_55057 = (1 + v_i_55057)) {\n          v__45239 = bool_or(v__45239, v__55076[(v_i_55057 + (v_MWidthC_1 * v_l_id_55056))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55058 = 0; \n          v__55081[v_wg_id_55051] = doubleAndOr(v__45239, v__55063, v__55062[v_wg_id_55051], v__55064); \n        }\n        /* end map_seq */\n        v_l_id_55056 = atomic_inc(&(v_work_idx_3697)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__55059",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55060",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55061",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55062",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55063",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55064",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55071",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__55081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55076",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}