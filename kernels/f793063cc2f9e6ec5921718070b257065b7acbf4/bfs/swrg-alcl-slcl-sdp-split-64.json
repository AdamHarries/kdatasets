{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58991, const global int* restrict v__58992, const global int* restrict v__58993, const global int* restrict v__58994, int v__58995, int v__58996, global int* v__59013, global int* v__59003, local int* v__59008, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58999; \n  int v__59004; \n  int v__45239; \n  /* Private Memory */\n  int v__59001_0;\n  \n  for (int v_wg_id_58983 = get_group_id(0); v_wg_id_58983 < v_MHeight_2; v_wg_id_58983 = (v_wg_id_58983 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4058; \n      v_work_idx_4058 = 0; \n      int v_l_id_58984 = atomic_inc(&(v_work_idx_4058)); \n      while((v_l_id_58984 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58985 = 0; v_i_58985 < 64; v_i_58985 = (1 + v_i_58985)) {\n          int v_tmp_59070 = 0; \n          v__58999 = v_tmp_59070; \n          int v_index_59071 = v__58991[(v_l_id_58984 + (64 * v_MWidthC_1 * v_wg_id_58983) + (v_MWidthC_1 * v_i_58985))]; \n          if (v_index_59071 < 0) {\n            v__59001_0 = v__58999; \n          } else {\n            if (v_index_59071 >= v_VLength_3) {\n              v__59001_0 = v__58999; \n            } else {\n              v__59001_0 = v__58993[v_index_59071]; \n            }\n          }\n          v__59003[(63 + (64 * v_MWidthC_1 * v_wg_id_58983) + (-1 * v_i_58985) + (64 * v_l_id_58984))] = bool_and(v__59001_0, v__58992[(v_l_id_58984 + (64 * v_MWidthC_1 * v_wg_id_58983) + (v_MWidthC_1 * v_i_58985))]); \n        }\n        /* end map_seq */\n        int v_tmp_59072 = 0; \n        v__59004 = v_tmp_59072; \n        /* reduce_seq */\n        for (int v_i_58986 = 0; v_i_58986 < 64; v_i_58986 = (1 + v_i_58986)) {\n          v__59004 = bool_or(v__59004, v__59003[(v_i_58986 + (64 * v_MWidthC_1 * v_wg_id_58983) + (64 * v_l_id_58984))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58987 = 0; \n          v__59008[v_l_id_58984] = id(v__59004); \n        }\n        /* end map_seq */\n        v_l_id_58984 = atomic_inc(&(v_work_idx_4058)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_58988 = get_local_id(0); \n      int v_tmp_59075 = 0; \n      v__45239 = v_tmp_59075; \n      /* reduce_seq */\n      for (int v_i_58989 = 0; v_i_58989 < v_MWidthC_1; v_i_58989 = (1 + v_i_58989)) {\n        v__45239 = bool_or(v__45239, v__59008[(v_i_58989 + (v_MWidthC_1 * v_l_id_58988))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58990 = 0; \n        v__59013[v_wg_id_58983] = doubleAndOr(v__45239, v__58995, v__58994[v_wg_id_58983], v__58996); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58991",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58992",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58993",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58994",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58995",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58996",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59003",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__59013",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59008",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}