{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73900, const global int* restrict v__73901, const global int* restrict v__73902, const global int* restrict v__73903, int v__73904, int v__73905, global int* v__73923, global int* v__73907, local int* v__73918, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__73909; \n  int v__73911; \n  int v__45239; \n  /* Private Memory */\n  int v__73913_0;\n  \n  int v__73915_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5420 = v__73907; \n    local int v_w_id_73893; \n    if (get_local_id(0) == 0) {\n      v_w_id_73893 = atomic_inc(v_work_idx_5420); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73893 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5418; \n        v_work_idx_5418 = 0; \n        int v_l_id_73894 = atomic_inc(&(v_work_idx_5418)); \n        while((v_l_id_73894 < v_MWidthC_1)){\n          int v_tmp_73978 = 0; \n          v__73909 = v_tmp_73978; \n          /* reduce_seq */\n          for (int v_i_73895 = 0; v_i_73895 < 512; v_i_73895 = (1 + v_i_73895)) {\n            int v_tmp_73979 = 0; \n            v__73911 = v_tmp_73979; \n            int v_index_73980 = v__73900[(v_l_id_73894 + (512 * v_MWidthC_1 * v_w_id_73893) + (v_MWidthC_1 * v_i_73895))]; \n            if (v_index_73980 < 0) {\n              v__73913_0 = v__73911; \n            } else {\n              if (v_index_73980 >= v_VLength_3) {\n                v__73913_0 = v__73911; \n              } else {\n                v__73913_0 = v__73902[v_index_73980]; \n              }\n            }\n            v__73915_0 = bool_and(v__73913_0, v__73901[(v_l_id_73894 + (512 * v_MWidthC_1 * v_w_id_73893) + (v_MWidthC_1 * v_i_73895))]); \n            v__73909 = bool_or(v__73915_0, v__73909); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73896 = 0; \n            v__73918[v_l_id_73894] = id(v__73909); \n          }\n          /* end map_seq */\n          v_l_id_73894 = atomic_inc(&(v_work_idx_5418)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_73897 = get_local_id(0); \n        int v_tmp_73983 = 0; \n        v__45239 = v_tmp_73983; \n        /* reduce_seq */\n        for (int v_i_73898 = 0; v_i_73898 < v_MWidthC_1; v_i_73898 = (1 + v_i_73898)) {\n          v__45239 = bool_or(v__45239, v__73918[(v_i_73898 + (v_MWidthC_1 * v_l_id_73897))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_73899 = 0; \n          v__73923[v_w_id_73893] = doubleAndOr(v__45239, v__73904, v__73903[v_w_id_73893], v__73905); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73893 = atomic_inc(v_work_idx_5420); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73900",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73901",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73902",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73903",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73904",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73905",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73907",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73923",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73918",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}