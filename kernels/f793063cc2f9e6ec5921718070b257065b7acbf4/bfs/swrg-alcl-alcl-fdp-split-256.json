{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67849, const global int* restrict v__67850, const global int* restrict v__67851, const global int* restrict v__67852, int v__67853, int v__67854, global int* v__67871, local int* v__67866, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__67857; \n  int v__67859; \n  int v__45239; \n  /* Private Memory */\n  int v__67861_0;\n  \n  int v__67863_0;\n  \n  for (int v_wg_id_67842 = get_group_id(0); v_wg_id_67842 < v_MHeight_2; v_wg_id_67842 = (v_wg_id_67842 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4865; \n      v_work_idx_4865 = 0; \n      int v_l_id_67843 = atomic_inc(&(v_work_idx_4865)); \n      while((v_l_id_67843 < v_MWidthC_1)){\n        int v_tmp_67924 = 0; \n        v__67857 = v_tmp_67924; \n        /* reduce_seq */\n        for (int v_i_67844 = 0; v_i_67844 < 256; v_i_67844 = (1 + v_i_67844)) {\n          int v_tmp_67925 = 0; \n          v__67859 = v_tmp_67925; \n          int v_index_67926 = v__67849[(v_l_id_67843 + (256 * v_MWidthC_1 * v_wg_id_67842) + (v_MWidthC_1 * v_i_67844))]; \n          if (v_index_67926 < 0) {\n            v__67861_0 = v__67859; \n          } else {\n            if (v_index_67926 >= v_VLength_3) {\n              v__67861_0 = v__67859; \n            } else {\n              v__67861_0 = v__67851[v_index_67926]; \n            }\n          }\n          v__67863_0 = bool_and(v__67861_0, v__67850[(v_l_id_67843 + (256 * v_MWidthC_1 * v_wg_id_67842) + (v_MWidthC_1 * v_i_67844))]); \n          v__67857 = bool_or(v__67863_0, v__67857); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67845 = 0; \n          v__67866[v_l_id_67843] = id(v__67857); \n        }\n        /* end map_seq */\n        v_l_id_67843 = atomic_inc(&(v_work_idx_4865)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4860; \n      v_work_idx_4860 = 0; \n      int v_l_id_67846 = atomic_inc(&(v_work_idx_4860)); \n      while((v_l_id_67846 < 1)){\n        int v_tmp_67929 = 0; \n        v__45239 = v_tmp_67929; \n        /* reduce_seq */\n        for (int v_i_67847 = 0; v_i_67847 < v_MWidthC_1; v_i_67847 = (1 + v_i_67847)) {\n          v__45239 = bool_or(v__45239, v__67866[(v_i_67847 + (v_MWidthC_1 * v_l_id_67846))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67848 = 0; \n          v__67871[v_wg_id_67842] = doubleAndOr(v__45239, v__67853, v__67852[v_wg_id_67842], v__67854); \n        }\n        /* end map_seq */\n        v_l_id_67846 = atomic_inc(&(v_work_idx_4860)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__67849",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67850",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67851",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67852",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67853",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67854",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__67871",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67866",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}