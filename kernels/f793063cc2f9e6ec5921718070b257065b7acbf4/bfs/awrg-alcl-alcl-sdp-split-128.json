{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65636, const global int* restrict v__65637, const global int* restrict v__65638, const global int* restrict v__65639, int v__65640, int v__65641, global int* v__65659, global int* v__65649, global int* v__65643, local int* v__65654, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__65645; \n  int v__65650; \n  int v__45239; \n  /* Private Memory */\n  int v__65647_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4674 = v__65643; \n    local int v_w_id_65628; \n    if (get_local_id(0) == 0) {\n      v_w_id_65628 = atomic_inc(v_work_idx_4674); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65628 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4672; \n        v_work_idx_4672 = 0; \n        int v_l_id_65629 = atomic_inc(&(v_work_idx_4672)); \n        while((v_l_id_65629 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_65630 = 0; v_i_65630 < 128; v_i_65630 = (1 + v_i_65630)) {\n            int v_tmp_65710 = 0; \n            v__65645 = v_tmp_65710; \n            int v_index_65711 = v__65636[(v_l_id_65629 + (128 * v_MWidthC_1 * v_w_id_65628) + (v_MWidthC_1 * v_i_65630))]; \n            if (v_index_65711 < 0) {\n              v__65647_0 = v__65645; \n            } else {\n              if (v_index_65711 >= v_VLength_3) {\n                v__65647_0 = v__65645; \n              } else {\n                v__65647_0 = v__65638[v_index_65711]; \n              }\n            }\n            v__65649[(127 + (128 * v_MWidthC_1 * v_w_id_65628) + (-1 * v_i_65630) + (128 * v_l_id_65629))] = bool_and(v__65647_0, v__65637[(v_l_id_65629 + (128 * v_MWidthC_1 * v_w_id_65628) + (v_MWidthC_1 * v_i_65630))]); \n          }\n          /* end map_seq */\n          int v_tmp_65712 = 0; \n          v__65650 = v_tmp_65712; \n          /* reduce_seq */\n          for (int v_i_65631 = 0; v_i_65631 < 128; v_i_65631 = (1 + v_i_65631)) {\n            v__65650 = bool_or(v__65650, v__65649[(v_i_65631 + (128 * v_MWidthC_1 * v_w_id_65628) + (128 * v_l_id_65629))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_65632 = 0; \n            v__65654[v_l_id_65629] = id(v__65650); \n          }\n          /* end map_seq */\n          v_l_id_65629 = atomic_inc(&(v_work_idx_4672)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4666; \n        v_work_idx_4666 = 0; \n        int v_l_id_65633 = atomic_inc(&(v_work_idx_4666)); \n        while((v_l_id_65633 < 1)){\n          int v_tmp_65715 = 0; \n          v__45239 = v_tmp_65715; \n          /* reduce_seq */\n          for (int v_i_65634 = 0; v_i_65634 < v_MWidthC_1; v_i_65634 = (1 + v_i_65634)) {\n            v__45239 = bool_or(v__45239, v__65654[(v_i_65634 + (v_MWidthC_1 * v_l_id_65633))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_65635 = 0; \n            v__65659[v_w_id_65628] = doubleAndOr(v__45239, v__65640, v__65639[v_w_id_65628], v__65641); \n          }\n          /* end map_seq */\n          v_l_id_65633 = atomic_inc(&(v_work_idx_4666)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65628 = atomic_inc(v_work_idx_4674); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65636",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65637",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65638",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65639",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65640",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65641",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65649",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65643",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65659",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65654",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}