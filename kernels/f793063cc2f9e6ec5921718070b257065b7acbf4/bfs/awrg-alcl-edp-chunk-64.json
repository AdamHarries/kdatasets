{
  "name" : "awrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60807, const global int* restrict v__60808, const global int* restrict v__60809, const global int* restrict v__60810, int v__60811, int v__60812, global int* v__60828, global int* v__60814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__60815; \n  int v__60818; \n  /* Private Memory */\n  int v__60820_0;\n  \n  int v__60822_0;\n  \n  int v__60826_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4226 = v__60814; \n    local int v_w_id_60803; \n    if (get_local_id(0) == 0) {\n      v_w_id_60803 = atomic_inc(v_work_idx_4226); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60803 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4224; \n        v_work_idx_4224 = 0; \n        int v_l_id_60804 = atomic_inc(&(v_work_idx_4224)); \n        while((v_l_id_60804 < 64)){\n          int v_tmp_60871 = 0; \n          v__60815 = v_tmp_60871; \n          /* reduce_while_seq */\n          for (int v_i_60805 = 0; v_i_60805 < v_MWidthC_1; v_i_60805 = (1 + v_i_60805)) {\n            v__60826_0 = check(v__60815, v__60807[(v_i_60805 + (64 * v_MWidthC_1 * v_w_id_60803) + (v_MWidthC_1 * v_l_id_60804))]); \n            if (v__60826_0) {\n            } else {\n              break;\n            }\n            int v_tmp_60872 = 0; \n            v__60818 = v_tmp_60872; \n            int v_index_60873 = v__60807[(v_i_60805 + (64 * v_MWidthC_1 * v_w_id_60803) + (v_MWidthC_1 * v_l_id_60804))]; \n            if (v_index_60873 < 0) {\n              v__60820_0 = v__60818; \n            } else {\n              if (v_index_60873 >= v_VLength_3) {\n                v__60820_0 = v__60818; \n              } else {\n                v__60820_0 = v__60809[v_index_60873]; \n              }\n            }\n            v__60822_0 = bool_and(v__60820_0, v__60808[(v_i_60805 + (64 * v_MWidthC_1 * v_w_id_60803) + (v_MWidthC_1 * v_l_id_60804))]); \n            v__60815 = bool_or(v__60822_0, v__60815); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60806 = 0; \n            v__60828[(v_l_id_60804 + (64 * v_w_id_60803))] = doubleAndOr(v__60815, v__60811, v__60810[(v_l_id_60804 + (64 * v_w_id_60803))], v__60812); \n          }\n          /* end map_seq */\n          v_l_id_60804 = atomic_inc(&(v_work_idx_4224)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60803 = atomic_inc(v_work_idx_4226); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__60807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60808",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60814",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}