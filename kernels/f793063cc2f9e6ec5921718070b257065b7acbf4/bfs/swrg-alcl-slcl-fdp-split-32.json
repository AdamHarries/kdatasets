{
  "name" : "swrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54857, const global int* restrict v__54858, const global int* restrict v__54859, const global int* restrict v__54860, int v__54861, int v__54862, global int* v__54879, local int* v__54874, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54865; \n  int v__54867; \n  int v__45239; \n  /* Private Memory */\n  int v__54869_0;\n  \n  int v__54871_0;\n  \n  for (int v_wg_id_54850 = get_group_id(0); v_wg_id_54850 < v_MHeight_2; v_wg_id_54850 = (v_wg_id_54850 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3683; \n      v_work_idx_3683 = 0; \n      int v_l_id_54851 = atomic_inc(&(v_work_idx_3683)); \n      while((v_l_id_54851 < v_MWidthC_1)){\n        int v_tmp_54936 = 0; \n        v__54865 = v_tmp_54936; \n        /* reduce_seq */\n        for (int v_i_54852 = 0; v_i_54852 < 32; v_i_54852 = (1 + v_i_54852)) {\n          int v_tmp_54937 = 0; \n          v__54867 = v_tmp_54937; \n          int v_index_54938 = v__54857[(v_l_id_54851 + (32 * v_MWidthC_1 * v_wg_id_54850) + (v_MWidthC_1 * v_i_54852))]; \n          if (v_index_54938 < 0) {\n            v__54869_0 = v__54867; \n          } else {\n            if (v_index_54938 >= v_VLength_3) {\n              v__54869_0 = v__54867; \n            } else {\n              v__54869_0 = v__54859[v_index_54938]; \n            }\n          }\n          v__54871_0 = bool_and(v__54869_0, v__54858[(v_l_id_54851 + (32 * v_MWidthC_1 * v_wg_id_54850) + (v_MWidthC_1 * v_i_54852))]); \n          v__54865 = bool_or(v__54871_0, v__54865); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54853 = 0; \n          v__54874[v_l_id_54851] = id(v__54865); \n        }\n        /* end map_seq */\n        v_l_id_54851 = atomic_inc(&(v_work_idx_3683)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_54854 = get_local_id(0); \n      int v_tmp_54941 = 0; \n      v__45239 = v_tmp_54941; \n      /* reduce_seq */\n      for (int v_i_54855 = 0; v_i_54855 < v_MWidthC_1; v_i_54855 = (1 + v_i_54855)) {\n        v__45239 = bool_or(v__45239, v__54874[(v_i_54855 + (v_MWidthC_1 * v_l_id_54854))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_54856 = 0; \n        v__54879[v_wg_id_54850] = doubleAndOr(v__45239, v__54861, v__54860[v_wg_id_54850], v__54862); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__54857",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54858",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54859",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54860",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54861",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54862",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54874",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}