{
  "name" : "swrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62256, const global int* restrict v__62257, const global int* restrict v__62258, const global int* restrict v__62259, int v__62260, int v__62261, global int* v__62278, local int* v__62273, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62264; \n  int v__62266; \n  int v__45239; \n  /* Private Memory */\n  int v__62268_0;\n  \n  int v__62270_0;\n  \n  for (int v_wg_id_62249 = get_group_id(0); v_wg_id_62249 < v_MHeight_2; v_wg_id_62249 = (v_wg_id_62249 + get_num_groups(0))) {\n    for (int v_l_id_62250 = get_local_id(0); v_l_id_62250 < v_MWidthC_1; v_l_id_62250 = (v_l_id_62250 + get_local_size(0))) {\n      int v_tmp_62343 = 0; \n      v__62264 = v_tmp_62343; \n      /* reduce_seq */\n      for (int v_i_62251 = 0; v_i_62251 < 128; v_i_62251 = (1 + v_i_62251)) {\n        int v_tmp_62344 = 0; \n        v__62266 = v_tmp_62344; \n        int v_index_62345 = v__62256[(v_l_id_62250 + (128 * v_MWidthC_1 * v_wg_id_62249) + (v_MWidthC_1 * v_i_62251))]; \n        if (v_index_62345 < 0) {\n          v__62268_0 = v__62266; \n        } else {\n          if (v_index_62345 >= v_VLength_3) {\n            v__62268_0 = v__62266; \n          } else {\n            v__62268_0 = v__62258[v_index_62345]; \n          }\n        }\n        v__62270_0 = bool_and(v__62268_0, v__62257[(v_l_id_62250 + (128 * v_MWidthC_1 * v_wg_id_62249) + (v_MWidthC_1 * v_i_62251))]); \n        v__62264 = bool_or(v__62270_0, v__62264); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62252 = 0; \n        v__62273[v_l_id_62250] = id(v__62264); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_62253 = get_local_id(0); \n      int v_tmp_62348 = 0; \n      v__45239 = v_tmp_62348; \n      /* reduce_seq */\n      for (int v_i_62254 = 0; v_i_62254 < v_MWidthC_1; v_i_62254 = (1 + v_i_62254)) {\n        v__45239 = bool_or(v__45239, v__62273[(v_i_62254 + (v_MWidthC_1 * v_l_id_62253))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_62255 = 0; \n        v__62278[v_wg_id_62249] = doubleAndOr(v__45239, v__62260, v__62259[v_wg_id_62249], v__62261); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62256",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62257",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62258",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62259",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62260",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62261",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62273",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}