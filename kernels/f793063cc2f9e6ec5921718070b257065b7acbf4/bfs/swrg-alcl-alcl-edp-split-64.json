{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59479, const global int* restrict v__59480, const global int* restrict v__59481, const global int* restrict v__59482, int v__59483, int v__59484, global int* v__59503, local int* v__59498, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__59487; \n  int v__59489; \n  int v__45239; \n  /* Private Memory */\n  int v__59491_0;\n  \n  int v__59493_0;\n  \n  int v__59497_0;\n  \n  for (int v_wg_id_59472 = get_group_id(0); v_wg_id_59472 < v_MHeight_2; v_wg_id_59472 = (v_wg_id_59472 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4107; \n      v_work_idx_4107 = 0; \n      int v_l_id_59473 = atomic_inc(&(v_work_idx_4107)); \n      while((v_l_id_59473 < v_MWidthC_1)){\n        int v_tmp_59559 = 0; \n        v__59487 = v_tmp_59559; \n        /* reduce_while_seq */\n        for (int v_i_59474 = 0; v_i_59474 < 64; v_i_59474 = (1 + v_i_59474)) {\n          v__59497_0 = check(v__59487, v__59479[(v_l_id_59473 + (64 * v_MWidthC_1 * v_wg_id_59472) + (v_MWidthC_1 * v_i_59474))]); \n          if (v__59497_0) {\n          } else {\n            break;\n          }\n          int v_tmp_59560 = 0; \n          v__59489 = v_tmp_59560; \n          int v_index_59561 = v__59479[(v_l_id_59473 + (64 * v_MWidthC_1 * v_wg_id_59472) + (v_MWidthC_1 * v_i_59474))]; \n          if (v_index_59561 < 0) {\n            v__59491_0 = v__59489; \n          } else {\n            if (v_index_59561 >= v_VLength_3) {\n              v__59491_0 = v__59489; \n            } else {\n              v__59491_0 = v__59481[v_index_59561]; \n            }\n          }\n          v__59493_0 = bool_and(v__59491_0, v__59480[(v_l_id_59473 + (64 * v_MWidthC_1 * v_wg_id_59472) + (v_MWidthC_1 * v_i_59474))]); \n          v__59487 = bool_or(v__59493_0, v__59487); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59475 = 0; \n          v__59498[v_l_id_59473] = id(v__59487); \n        }\n        /* end map_seq */\n        v_l_id_59473 = atomic_inc(&(v_work_idx_4107)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4102; \n      v_work_idx_4102 = 0; \n      int v_l_id_59476 = atomic_inc(&(v_work_idx_4102)); \n      while((v_l_id_59476 < 1)){\n        int v_tmp_59564 = 0; \n        v__45239 = v_tmp_59564; \n        /* reduce_seq */\n        for (int v_i_59477 = 0; v_i_59477 < v_MWidthC_1; v_i_59477 = (1 + v_i_59477)) {\n          v__45239 = bool_or(v__45239, v__59498[(v_i_59477 + (v_MWidthC_1 * v_l_id_59476))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59478 = 0; \n          v__59503[v_wg_id_59472] = doubleAndOr(v__45239, v__59483, v__59482[v_wg_id_59472], v__59484); \n        }\n        /* end map_seq */\n        v_l_id_59476 = atomic_inc(&(v_work_idx_4102)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__59479",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59480",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59481",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59483",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59484",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__59503",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59498",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}