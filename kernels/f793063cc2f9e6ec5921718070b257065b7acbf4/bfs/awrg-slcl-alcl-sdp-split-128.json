{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64593, const global int* restrict v__64594, const global int* restrict v__64595, const global int* restrict v__64596, int v__64597, int v__64598, global int* v__64616, global int* v__64606, global int* v__64600, local int* v__64611, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__64602; \n  int v__64607; \n  int v__45239; \n  /* Private Memory */\n  int v__64604_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4568 = v__64600; \n    local int v_w_id_64585; \n    if (get_local_id(0) == 0) {\n      v_w_id_64585 = atomic_inc(v_work_idx_4568); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_64585 < v_MHeight_2)){\n      for (int v_l_id_64586 = get_local_id(0); v_l_id_64586 < v_MWidthC_1; v_l_id_64586 = (v_l_id_64586 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_64587 = 0; v_i_64587 < 128; v_i_64587 = (1 + v_i_64587)) {\n          int v_tmp_64675 = 0; \n          v__64602 = v_tmp_64675; \n          int v_index_64676 = v__64593[(v_l_id_64586 + (128 * v_MWidthC_1 * v_w_id_64585) + (v_MWidthC_1 * v_i_64587))]; \n          if (v_index_64676 < 0) {\n            v__64604_0 = v__64602; \n          } else {\n            if (v_index_64676 >= v_VLength_3) {\n              v__64604_0 = v__64602; \n            } else {\n              v__64604_0 = v__64595[v_index_64676]; \n            }\n          }\n          v__64606[(127 + (128 * v_MWidthC_1 * v_w_id_64585) + (-1 * v_i_64587) + (128 * v_l_id_64586))] = bool_and(v__64604_0, v__64594[(v_l_id_64586 + (128 * v_MWidthC_1 * v_w_id_64585) + (v_MWidthC_1 * v_i_64587))]); \n        }\n        /* end map_seq */\n        int v_tmp_64677 = 0; \n        v__64607 = v_tmp_64677; \n        /* reduce_seq */\n        for (int v_i_64588 = 0; v_i_64588 < 128; v_i_64588 = (1 + v_i_64588)) {\n          v__64607 = bool_or(v__64607, v__64606[(v_i_64588 + (128 * v_MWidthC_1 * v_w_id_64585) + (128 * v_l_id_64586))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64589 = 0; \n          v__64611[v_l_id_64586] = id(v__64607); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4561; \n        v_work_idx_4561 = 0; \n        int v_l_id_64590 = atomic_inc(&(v_work_idx_4561)); \n        while((v_l_id_64590 < 1)){\n          int v_tmp_64680 = 0; \n          v__45239 = v_tmp_64680; \n          /* reduce_seq */\n          for (int v_i_64591 = 0; v_i_64591 < v_MWidthC_1; v_i_64591 = (1 + v_i_64591)) {\n            v__45239 = bool_or(v__45239, v__64611[(v_i_64591 + (v_MWidthC_1 * v_l_id_64590))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_64592 = 0; \n            v__64616[v_w_id_64585] = doubleAndOr(v__45239, v__64597, v__64596[v_w_id_64585], v__64598); \n          }\n          /* end map_seq */\n          v_l_id_64590 = atomic_inc(&(v_work_idx_4561)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_64585 = atomic_inc(v_work_idx_4568); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64593",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64594",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64595",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64597",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64598",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64606",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64600",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__64616",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64611",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}