{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63321, const global int* restrict v__63322, const global int* restrict v__63323, const global int* restrict v__63324, int v__63325, int v__63326, global int* v__63343, local int* v__63338, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__63329; \n  int v__63331; \n  int v__45239; \n  /* Private Memory */\n  int v__63333_0;\n  \n  int v__63335_0;\n  \n  for (int v_wg_id_63314 = get_group_id(0); v_wg_id_63314 < v_MHeight_2; v_wg_id_63314 = (v_wg_id_63314 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4451; \n      v_work_idx_4451 = 0; \n      int v_l_id_63315 = atomic_inc(&(v_work_idx_4451)); \n      while((v_l_id_63315 < v_MWidthC_1)){\n        int v_tmp_63400 = 0; \n        v__63329 = v_tmp_63400; \n        /* reduce_seq */\n        for (int v_i_63316 = 0; v_i_63316 < 128; v_i_63316 = (1 + v_i_63316)) {\n          int v_tmp_63401 = 0; \n          v__63331 = v_tmp_63401; \n          int v_index_63402 = v__63321[(v_l_id_63315 + (128 * v_MWidthC_1 * v_wg_id_63314) + (v_MWidthC_1 * v_i_63316))]; \n          if (v_index_63402 < 0) {\n            v__63333_0 = v__63331; \n          } else {\n            if (v_index_63402 >= v_VLength_3) {\n              v__63333_0 = v__63331; \n            } else {\n              v__63333_0 = v__63323[v_index_63402]; \n            }\n          }\n          v__63335_0 = bool_and(v__63333_0, v__63322[(v_l_id_63315 + (128 * v_MWidthC_1 * v_wg_id_63314) + (v_MWidthC_1 * v_i_63316))]); \n          v__63329 = bool_or(v__63335_0, v__63329); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63317 = 0; \n          v__63338[v_l_id_63315] = id(v__63329); \n        }\n        /* end map_seq */\n        v_l_id_63315 = atomic_inc(&(v_work_idx_4451)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_63318 = get_local_id(0); \n      int v_tmp_63405 = 0; \n      v__45239 = v_tmp_63405; \n      /* reduce_seq */\n      for (int v_i_63319 = 0; v_i_63319 < v_MWidthC_1; v_i_63319 = (1 + v_i_63319)) {\n        v__45239 = bool_or(v__45239, v__63338[(v_i_63319 + (v_MWidthC_1 * v_l_id_63318))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_63320 = 0; \n        v__63343[v_wg_id_63314] = doubleAndOr(v__45239, v__63325, v__63324[v_wg_id_63314], v__63326); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63321",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63322",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63323",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63324",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63325",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63326",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__63343",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63338",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}