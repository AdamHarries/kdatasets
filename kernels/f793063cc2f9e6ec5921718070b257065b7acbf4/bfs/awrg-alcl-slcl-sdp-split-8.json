{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48411, const global int* restrict v__48412, const global int* restrict v__48413, const global int* restrict v__48414, int v__48415, int v__48416, global int* v__48434, global int* v__48424, global int* v__48418, local int* v__48429, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48420; \n  int v__48425; \n  int v__45239; \n  /* Private Memory */\n  int v__48422_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3106 = v__48418; \n    local int v_w_id_48403; \n    if (get_local_id(0) == 0) {\n      v_w_id_48403 = atomic_inc(v_work_idx_3106); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48403 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3104; \n        v_work_idx_3104 = 0; \n        int v_l_id_48404 = atomic_inc(&(v_work_idx_3104)); \n        while((v_l_id_48404 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_48405 = 0; v_i_48405 < 8; v_i_48405 = (1 + v_i_48405)) {\n            int v_tmp_48489 = 0; \n            v__48420 = v_tmp_48489; \n            int v_index_48490 = v__48411[(v_l_id_48404 + (8 * v_MWidthC_1 * v_w_id_48403) + (v_MWidthC_1 * v_i_48405))]; \n            if (v_index_48490 < 0) {\n              v__48422_0 = v__48420; \n            } else {\n              if (v_index_48490 >= v_VLength_3) {\n                v__48422_0 = v__48420; \n              } else {\n                v__48422_0 = v__48413[v_index_48490]; \n              }\n            }\n            v__48424[(7 + (8 * v_MWidthC_1 * v_w_id_48403) + (-1 * v_i_48405) + (8 * v_l_id_48404))] = bool_and(v__48422_0, v__48412[(v_l_id_48404 + (8 * v_MWidthC_1 * v_w_id_48403) + (v_MWidthC_1 * v_i_48405))]); \n          }\n          /* end map_seq */\n          int v_tmp_48491 = 0; \n          v__48425 = v_tmp_48491; \n          /* reduce_seq */\n          for (int v_i_48406 = 0; v_i_48406 < 8; v_i_48406 = (1 + v_i_48406)) {\n            v__48425 = bool_or(v__48425, v__48424[(v_i_48406 + (8 * v_MWidthC_1 * v_w_id_48403) + (8 * v_l_id_48404))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48407 = 0; \n            v__48429[v_l_id_48404] = id(v__48425); \n          }\n          /* end map_seq */\n          v_l_id_48404 = atomic_inc(&(v_work_idx_3104)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_48408 = get_local_id(0); \n        int v_tmp_48494 = 0; \n        v__45239 = v_tmp_48494; \n        /* reduce_seq */\n        for (int v_i_48409 = 0; v_i_48409 < v_MWidthC_1; v_i_48409 = (1 + v_i_48409)) {\n          v__45239 = bool_or(v__45239, v__48429[(v_i_48409 + (v_MWidthC_1 * v_l_id_48408))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48410 = 0; \n          v__48434[v_w_id_48403] = doubleAndOr(v__45239, v__48415, v__48414[v_w_id_48403], v__48416); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48403 = atomic_inc(v_work_idx_3106); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48411",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48412",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48413",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48414",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48415",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48416",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48424",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48418",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48434",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48429",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}