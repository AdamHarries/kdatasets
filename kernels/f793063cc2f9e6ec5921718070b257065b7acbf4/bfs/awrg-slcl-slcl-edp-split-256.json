{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68714, const global int* restrict v__68715, const global int* restrict v__68716, const global int* restrict v__68717, int v__68718, int v__68719, global int* v__68739, global int* v__68721, local int* v__68734, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68723; \n  int v__68725; \n  int v__45239; \n  /* Private Memory */\n  int v__68727_0;\n  \n  int v__68729_0;\n  \n  int v__68733_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4941 = v__68721; \n    local int v_w_id_68707; \n    if (get_local_id(0) == 0) {\n      v_w_id_68707 = atomic_inc(v_work_idx_4941); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68707 < v_MHeight_2)){\n      for (int v_l_id_68708 = get_local_id(0); v_l_id_68708 < v_MWidthC_1; v_l_id_68708 = (v_l_id_68708 + get_local_size(0))) {\n        int v_tmp_68805 = 0; \n        v__68723 = v_tmp_68805; \n        /* reduce_while_seq */\n        for (int v_i_68709 = 0; v_i_68709 < 256; v_i_68709 = (1 + v_i_68709)) {\n          v__68733_0 = check(v__68723, v__68714[(v_l_id_68708 + (256 * v_MWidthC_1 * v_w_id_68707) + (v_MWidthC_1 * v_i_68709))]); \n          if (v__68733_0) {\n          } else {\n            break;\n          }\n          int v_tmp_68806 = 0; \n          v__68725 = v_tmp_68806; \n          int v_index_68807 = v__68714[(v_l_id_68708 + (256 * v_MWidthC_1 * v_w_id_68707) + (v_MWidthC_1 * v_i_68709))]; \n          if (v_index_68807 < 0) {\n            v__68727_0 = v__68725; \n          } else {\n            if (v_index_68807 >= v_VLength_3) {\n              v__68727_0 = v__68725; \n            } else {\n              v__68727_0 = v__68716[v_index_68807]; \n            }\n          }\n          v__68729_0 = bool_and(v__68727_0, v__68715[(v_l_id_68708 + (256 * v_MWidthC_1 * v_w_id_68707) + (v_MWidthC_1 * v_i_68709))]); \n          v__68723 = bool_or(v__68729_0, v__68723); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68710 = 0; \n          v__68734[v_l_id_68708] = id(v__68723); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_68711 = get_local_id(0); \n        int v_tmp_68810 = 0; \n        v__45239 = v_tmp_68810; \n        /* reduce_seq */\n        for (int v_i_68712 = 0; v_i_68712 < v_MWidthC_1; v_i_68712 = (1 + v_i_68712)) {\n          v__45239 = bool_or(v__45239, v__68734[(v_i_68712 + (v_MWidthC_1 * v_l_id_68711))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68713 = 0; \n          v__68739[v_w_id_68707] = doubleAndOr(v__45239, v__68718, v__68717[v_w_id_68707], v__68719); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_68707 = atomic_inc(v_work_idx_4941); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__68714",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68715",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68716",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68718",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68719",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68721",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68734",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}