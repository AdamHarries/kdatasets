{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72736, const global int* restrict v__72737, const global int* restrict v__72738, const global int* restrict v__72739, int v__72740, int v__72741, global int* v__72759, global int* v__72749, global int* v__72743, local int* v__72754, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__72745; \n  int v__72750; \n  int v__45239; \n  /* Private Memory */\n  int v__72747_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5307 = v__72743; \n    local int v_w_id_72728; \n    if (get_local_id(0) == 0) {\n      v_w_id_72728 = atomic_inc(v_work_idx_5307); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72728 < v_MHeight_2)){\n      for (int v_l_id_72729 = get_local_id(0); v_l_id_72729 < v_MWidthC_1; v_l_id_72729 = (v_l_id_72729 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72730 = 0; v_i_72730 < 512; v_i_72730 = (1 + v_i_72730)) {\n          int v_tmp_72822 = 0; \n          v__72745 = v_tmp_72822; \n          int v_index_72823 = v__72736[(v_l_id_72729 + (512 * v_MWidthC_1 * v_w_id_72728) + (v_MWidthC_1 * v_i_72730))]; \n          if (v_index_72823 < 0) {\n            v__72747_0 = v__72745; \n          } else {\n            if (v_index_72823 >= v_VLength_3) {\n              v__72747_0 = v__72745; \n            } else {\n              v__72747_0 = v__72738[v_index_72823]; \n            }\n          }\n          v__72749[(511 + (512 * v_MWidthC_1 * v_w_id_72728) + (-1 * v_i_72730) + (512 * v_l_id_72729))] = bool_and(v__72747_0, v__72737[(v_l_id_72729 + (512 * v_MWidthC_1 * v_w_id_72728) + (v_MWidthC_1 * v_i_72730))]); \n        }\n        /* end map_seq */\n        int v_tmp_72824 = 0; \n        v__72750 = v_tmp_72824; \n        /* reduce_seq */\n        for (int v_i_72731 = 0; v_i_72731 < 512; v_i_72731 = (1 + v_i_72731)) {\n          v__72750 = bool_or(v__72750, v__72749[(v_i_72731 + (512 * v_MWidthC_1 * v_w_id_72728) + (512 * v_l_id_72729))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72732 = 0; \n          v__72754[v_l_id_72729] = id(v__72750); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72733 = get_local_id(0); \n        int v_tmp_72827 = 0; \n        v__45239 = v_tmp_72827; \n        /* reduce_seq */\n        for (int v_i_72734 = 0; v_i_72734 < v_MWidthC_1; v_i_72734 = (1 + v_i_72734)) {\n          v__45239 = bool_or(v__45239, v__72754[(v_i_72734 + (v_MWidthC_1 * v_l_id_72733))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72735 = 0; \n          v__72759[v_w_id_72728] = doubleAndOr(v__45239, v__72740, v__72739[v_w_id_72728], v__72741); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72728 = atomic_inc(v_work_idx_5307); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72736",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72737",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72738",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72740",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72741",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72749",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72743",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72759",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72754",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}