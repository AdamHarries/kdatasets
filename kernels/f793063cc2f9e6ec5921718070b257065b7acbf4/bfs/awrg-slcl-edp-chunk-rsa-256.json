{
  "name" : "awrg-slcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__68424, const global int* restrict v__68425, const global int* restrict v__68426, const global int* restrict v__68427, int v__68428, int v__68429, global int* v__68444, global int* v__68443, global int* v__68431, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68432; \n  int v__68435; \n  /* Private Memory */\n  int v__68437_0;\n  \n  int v__68439_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4913 = v__68431; \n    local int v_w_id_68419; \n    if (get_local_id(0) == 0) {\n      v_w_id_68419 = atomic_inc(v_work_idx_4913); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68419 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_68420 = get_local_id(0); v_l_id_68420 < 256; v_l_id_68420 = (v_l_id_68420 + get_local_size(0))) {\n        int v_tmp_68480 = 0; \n        v__68432 = v_tmp_68480; \n        /* reduce_seq */\n        int v_stop_68481 = min(v__68424[(1 + (v__68424[(v_l_id_68420 + (256 * v_w_id_68419))] / 4))], v__68425[(1 + (v__68425[(v_l_id_68420 + (256 * v_w_id_68419))] / 4))]); \n        for (int v_i_68421 = 0; v_i_68421 < v_stop_68481; v_i_68421 = (1 + v_i_68421)) {\n          int v_tmp_68486 = 0; \n          v__68435 = v_tmp_68486; \n          int v_index_68488 = v__68424[(2 + v_i_68421 + (v__68424[(v_l_id_68420 + (256 * v_w_id_68419))] / 4))]; \n          if (v_index_68488 < 0) {\n            v__68437_0 = v__68435; \n          } else {\n            if (v_index_68488 >= v_MWidthC_1) {\n              v__68437_0 = v__68435; \n            } else {\n              v__68437_0 = v__68426[v_index_68488]; \n            }\n          }\n          v__68439_0 = bool_and(v__68425[(2 + v_i_68421 + (v__68425[(v_l_id_68420 + (256 * v_w_id_68419))] / 4))], v__68437_0); \n          v__68432 = bool_or(v__68432, v__68439_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68422 = 0; \n          v__68443[(v_l_id_68420 + (256 * v_w_id_68419))] = doubleAndOr(v__68432, v__68428, v__68427[(v_l_id_68420 + (256 * v_w_id_68419))], v__68429); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68423 = 0; \n          v__68444[(v_l_id_68420 + (256 * v_w_id_68419))] = id(v__68443[(v_l_id_68420 + (256 * v_w_id_68419))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_68419 = atomic_inc(v_work_idx_4913); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__68424",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__68425",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__68426",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__68427",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68428",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68429",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68431",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68444",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}