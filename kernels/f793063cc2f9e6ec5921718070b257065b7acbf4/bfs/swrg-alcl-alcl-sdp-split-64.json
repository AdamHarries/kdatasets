{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59291, const global int* restrict v__59292, const global int* restrict v__59293, const global int* restrict v__59294, int v__59295, int v__59296, global int* v__59313, global int* v__59303, local int* v__59308, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__59299; \n  int v__59304; \n  int v__45239; \n  /* Private Memory */\n  int v__59301_0;\n  \n  for (int v_wg_id_59283 = get_group_id(0); v_wg_id_59283 < v_MHeight_2; v_wg_id_59283 = (v_wg_id_59283 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4087; \n      v_work_idx_4087 = 0; \n      int v_l_id_59284 = atomic_inc(&(v_work_idx_4087)); \n      while((v_l_id_59284 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_59285 = 0; v_i_59285 < 64; v_i_59285 = (1 + v_i_59285)) {\n          int v_tmp_59366 = 0; \n          v__59299 = v_tmp_59366; \n          int v_index_59367 = v__59291[(v_l_id_59284 + (64 * v_MWidthC_1 * v_wg_id_59283) + (v_MWidthC_1 * v_i_59285))]; \n          if (v_index_59367 < 0) {\n            v__59301_0 = v__59299; \n          } else {\n            if (v_index_59367 >= v_VLength_3) {\n              v__59301_0 = v__59299; \n            } else {\n              v__59301_0 = v__59293[v_index_59367]; \n            }\n          }\n          v__59303[(63 + (64 * v_MWidthC_1 * v_wg_id_59283) + (-1 * v_i_59285) + (64 * v_l_id_59284))] = bool_and(v__59301_0, v__59292[(v_l_id_59284 + (64 * v_MWidthC_1 * v_wg_id_59283) + (v_MWidthC_1 * v_i_59285))]); \n        }\n        /* end map_seq */\n        int v_tmp_59368 = 0; \n        v__59304 = v_tmp_59368; \n        /* reduce_seq */\n        for (int v_i_59286 = 0; v_i_59286 < 64; v_i_59286 = (1 + v_i_59286)) {\n          v__59304 = bool_or(v__59304, v__59303[(v_i_59286 + (64 * v_MWidthC_1 * v_wg_id_59283) + (64 * v_l_id_59284))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59287 = 0; \n          v__59308[v_l_id_59284] = id(v__59304); \n        }\n        /* end map_seq */\n        v_l_id_59284 = atomic_inc(&(v_work_idx_4087)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4081; \n      v_work_idx_4081 = 0; \n      int v_l_id_59288 = atomic_inc(&(v_work_idx_4081)); \n      while((v_l_id_59288 < 1)){\n        int v_tmp_59371 = 0; \n        v__45239 = v_tmp_59371; \n        /* reduce_seq */\n        for (int v_i_59289 = 0; v_i_59289 < v_MWidthC_1; v_i_59289 = (1 + v_i_59289)) {\n          v__45239 = bool_or(v__45239, v__59308[(v_i_59289 + (v_MWidthC_1 * v_l_id_59288))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59290 = 0; \n          v__59313[v_wg_id_59283] = doubleAndOr(v__45239, v__59295, v__59294[v_wg_id_59283], v__59296); \n        }\n        /* end map_seq */\n        v_l_id_59288 = atomic_inc(&(v_work_idx_4081)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59291",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59292",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59293",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59294",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59295",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59296",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59303",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__59313",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59308",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}