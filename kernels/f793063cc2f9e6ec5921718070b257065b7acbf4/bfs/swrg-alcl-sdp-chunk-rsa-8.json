{
  "name" : "swrg-alcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__46073, const global int* restrict v__46074, const global int* restrict v__46075, const global int* restrict v__46076, int v__46077, int v__46078, global int* v__46092, global int* v__46091, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46080; \n  int v__46083; \n  /* Private Memory */\n  int v__46085_0;\n  \n  int v__46087_0;\n  \n  for (int v_wg_id_46068 = get_group_id(0); v_wg_id_46068 < ((v_MHeight_2)/(8)); v_wg_id_46068 = (v_wg_id_46068 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2884; \n      v_work_idx_2884 = 0; \n      int v_l_id_46069 = atomic_inc(&(v_work_idx_2884)); \n      while((v_l_id_46069 < 8)){\n        int v_tmp_46125 = 0; \n        v__46080 = v_tmp_46125; \n        /* reduce_seq */\n        int v_stop_46126 = min(v__46073[(1 + (v__46073[(v_l_id_46069 + (8 * v_wg_id_46068))] / 4))], v__46074[(1 + (v__46074[(v_l_id_46069 + (8 * v_wg_id_46068))] / 4))]); \n        for (int v_i_46070 = 0; v_i_46070 < v_stop_46126; v_i_46070 = (1 + v_i_46070)) {\n          int v_tmp_46131 = 0; \n          v__46083 = v_tmp_46131; \n          int v_index_46133 = v__46073[(2 + v_i_46070 + (v__46073[(v_l_id_46069 + (8 * v_wg_id_46068))] / 4))]; \n          if (v_index_46133 < 0) {\n            v__46085_0 = v__46083; \n          } else {\n            if (v_index_46133 >= v_MWidthC_1) {\n              v__46085_0 = v__46083; \n            } else {\n              v__46085_0 = v__46075[v_index_46133]; \n            }\n          }\n          v__46087_0 = bool_and(v__46074[(2 + v_i_46070 + (v__46074[(v_l_id_46069 + (8 * v_wg_id_46068))] / 4))], v__46085_0); \n          v__46080 = bool_or(v__46080, v__46087_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46071 = 0; \n          v__46091[(v_l_id_46069 + (8 * v_wg_id_46068))] = doubleAndOr(v__46080, v__46077, v__46076[(v_l_id_46069 + (8 * v_wg_id_46068))], v__46078); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46072 = 0; \n          v__46092[(v_l_id_46069 + (8 * v_wg_id_46068))] = id(v__46091[(v_l_id_46069 + (8 * v_wg_id_46068))]); \n        }\n        /* end map_seq */\n        v_l_id_46069 = atomic_inc(&(v_work_idx_2884)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46073",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__46074",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__46075",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__46076",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46077",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46078",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46091",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__46092",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}