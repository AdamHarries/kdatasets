{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73434, const global int* restrict v__73435, const global int* restrict v__73436, const global int* restrict v__73437, int v__73438, int v__73439, global int* v__73453, global int* v__73441, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__73443; \n  int v__73445; \n  /* Private Memory */\n  int v__73447_0;\n  \n  int v__73449_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5371 = v__73441; \n    local int v_w_id_73430; \n    if (get_local_id(0) == 0) {\n      v_w_id_73430 = atomic_inc(v_work_idx_5371); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73430 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5369; \n        v_work_idx_5369 = 0; \n        int v_l_id_73431 = atomic_inc(&(v_work_idx_5369)); \n        while((v_l_id_73431 < 512)){\n          int v_tmp_73490 = 0; \n          v__73443 = v_tmp_73490; \n          /* reduce_seq */\n          for (int v_i_73432 = 0; v_i_73432 < v_MWidthC_1; v_i_73432 = (1 + v_i_73432)) {\n            int v_tmp_73491 = 0; \n            v__73445 = v_tmp_73491; \n            int v_index_73492 = v__73434[(v_i_73432 + (512 * v_MWidthC_1 * v_w_id_73430) + (v_MWidthC_1 * v_l_id_73431))]; \n            if (v_index_73492 < 0) {\n              v__73447_0 = v__73445; \n            } else {\n              if (v_index_73492 >= v_VLength_3) {\n                v__73447_0 = v__73445; \n              } else {\n                v__73447_0 = v__73436[v_index_73492]; \n              }\n            }\n            v__73449_0 = bool_and(v__73447_0, v__73435[(v_i_73432 + (512 * v_MWidthC_1 * v_w_id_73430) + (v_MWidthC_1 * v_l_id_73431))]); \n            v__73443 = bool_or(v__73449_0, v__73443); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73433 = 0; \n            v__73453[(v_l_id_73431 + (512 * v_w_id_73430))] = doubleAndOr(v__73443, v__73438, v__73437[(v_l_id_73431 + (512 * v_w_id_73430))], v__73439); \n          }\n          /* end map_seq */\n          v_l_id_73431 = atomic_inc(&(v_work_idx_5369)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73430 = atomic_inc(v_work_idx_5371); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73434",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73435",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73436",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73437",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73438",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73439",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73441",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}