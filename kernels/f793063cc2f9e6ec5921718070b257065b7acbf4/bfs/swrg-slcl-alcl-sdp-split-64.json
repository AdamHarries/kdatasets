{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58242, const global int* restrict v__58243, const global int* restrict v__58244, const global int* restrict v__58245, int v__58246, int v__58247, global int* v__58264, global int* v__58254, local int* v__58259, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__58250; \n  int v__58255; \n  int v__45239; \n  /* Private Memory */\n  int v__58252_0;\n  \n  for (int v_wg_id_58234 = get_group_id(0); v_wg_id_58234 < v_MHeight_2; v_wg_id_58234 = (v_wg_id_58234 + get_num_groups(0))) {\n    for (int v_l_id_58235 = get_local_id(0); v_l_id_58235 < v_MWidthC_1; v_l_id_58235 = (v_l_id_58235 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_58236 = 0; v_i_58236 < 64; v_i_58236 = (1 + v_i_58236)) {\n        int v_tmp_58325 = 0; \n        v__58250 = v_tmp_58325; \n        int v_index_58326 = v__58242[(v_l_id_58235 + (64 * v_MWidthC_1 * v_wg_id_58234) + (v_MWidthC_1 * v_i_58236))]; \n        if (v_index_58326 < 0) {\n          v__58252_0 = v__58250; \n        } else {\n          if (v_index_58326 >= v_VLength_3) {\n            v__58252_0 = v__58250; \n          } else {\n            v__58252_0 = v__58244[v_index_58326]; \n          }\n        }\n        v__58254[(63 + (64 * v_MWidthC_1 * v_wg_id_58234) + (-1 * v_i_58236) + (64 * v_l_id_58235))] = bool_and(v__58252_0, v__58243[(v_l_id_58235 + (64 * v_MWidthC_1 * v_wg_id_58234) + (v_MWidthC_1 * v_i_58236))]); \n      }\n      /* end map_seq */\n      int v_tmp_58327 = 0; \n      v__58255 = v_tmp_58327; \n      /* reduce_seq */\n      for (int v_i_58237 = 0; v_i_58237 < 64; v_i_58237 = (1 + v_i_58237)) {\n        v__58255 = bool_or(v__58255, v__58254[(v_i_58237 + (64 * v_MWidthC_1 * v_wg_id_58234) + (64 * v_l_id_58235))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58238 = 0; \n        v__58259[v_l_id_58235] = id(v__58255); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3988; \n      v_work_idx_3988 = 0; \n      int v_l_id_58239 = atomic_inc(&(v_work_idx_3988)); \n      while((v_l_id_58239 < 1)){\n        int v_tmp_58330 = 0; \n        v__45239 = v_tmp_58330; \n        /* reduce_seq */\n        for (int v_i_58240 = 0; v_i_58240 < v_MWidthC_1; v_i_58240 = (1 + v_i_58240)) {\n          v__45239 = bool_or(v__45239, v__58259[(v_i_58240 + (v_MWidthC_1 * v_l_id_58239))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58241 = 0; \n          v__58264[v_wg_id_58234] = doubleAndOr(v__45239, v__58246, v__58245[v_wg_id_58234], v__58247); \n        }\n        /* end map_seq */\n        v_l_id_58239 = atomic_inc(&(v_work_idx_3988)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58242",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58243",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58244",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58245",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58246",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58247",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58254",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58264",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58259",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}