{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50087, const global int* restrict v__50088, const global int* restrict v__50089, const global int* restrict v__50090, int v__50091, int v__50092, global int* v__50105, global int* v__50099, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50095; \n  int v__50100; \n  /* Private Memory */\n  int v__50097_0;\n  \n  for (int v_wg_id_50082 = get_group_id(0); v_wg_id_50082 < ((v_MHeight_2)/(16)); v_wg_id_50082 = (v_wg_id_50082 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3250; \n      v_work_idx_3250 = 0; \n      int v_l_id_50083 = atomic_inc(&(v_work_idx_3250)); \n      while((v_l_id_50083 < 16)){\n        /* map_seq */\n        for (int v_i_50084 = 0; v_i_50084 < v_MWidthC_1; v_i_50084 = (1 + v_i_50084)) {\n          int v_tmp_50145 = 0; \n          v__50095 = v_tmp_50145; \n          int v_index_50146 = v__50087[(v_i_50084 + (16 * v_MWidthC_1 * v_wg_id_50082) + (v_MWidthC_1 * v_l_id_50083))]; \n          if (v_index_50146 < 0) {\n            v__50097_0 = v__50095; \n          } else {\n            if (v_index_50146 >= v_VLength_3) {\n              v__50097_0 = v__50095; \n            } else {\n              v__50097_0 = v__50089[v_index_50146]; \n            }\n          }\n          v__50099[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_50082) + (-1 * v_i_50084) + (v_MWidthC_1 * v_l_id_50083))] = bool_and(v__50097_0, v__50088[(v_i_50084 + (16 * v_MWidthC_1 * v_wg_id_50082) + (v_MWidthC_1 * v_l_id_50083))]); \n        }\n        /* end map_seq */\n        int v_tmp_50147 = 0; \n        v__50100 = v_tmp_50147; \n        /* reduce_seq */\n        for (int v_i_50085 = 0; v_i_50085 < v_MWidthC_1; v_i_50085 = (1 + v_i_50085)) {\n          v__50100 = bool_or(v__50100, v__50099[(v_i_50085 + (16 * v_MWidthC_1 * v_wg_id_50082) + (v_MWidthC_1 * v_l_id_50083))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50086 = 0; \n          v__50105[(v_l_id_50083 + (16 * v_wg_id_50082))] = doubleAndOr(v__50100, v__50091, v__50090[(v_l_id_50083 + (16 * v_wg_id_50082))], v__50092); \n        }\n        /* end map_seq */\n        v_l_id_50083 = atomic_inc(&(v_work_idx_3250)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__50087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50088",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50089",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50090",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50091",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50092",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__50099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__50105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}