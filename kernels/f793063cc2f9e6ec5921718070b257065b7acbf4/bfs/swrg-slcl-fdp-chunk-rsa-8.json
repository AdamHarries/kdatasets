{
  "name" : "swrg-slcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__45064, const global int* restrict v__45065, const global int* restrict v__45066, const global int* restrict v__45067, int v__45068, int v__45069, global int* v__45083, global int* v__45082, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45071; \n  int v__45074; \n  /* Private Memory */\n  int v__45076_0;\n  \n  int v__45078_0;\n  \n  for (int v_wg_id_45059 = get_group_id(0); v_wg_id_45059 < ((v_MHeight_2)/(8)); v_wg_id_45059 = (v_wg_id_45059 + get_num_groups(0))) {\n    for (int v_l_id_45060 = get_local_id(0); v_l_id_45060 < 8; v_l_id_45060 = (v_l_id_45060 + get_local_size(0))) {\n      int v_tmp_45120 = 0; \n      v__45071 = v_tmp_45120; \n      /* reduce_seq */\n      int v_stop_45121 = min(v__45064[(1 + (v__45064[(v_l_id_45060 + (8 * v_wg_id_45059))] / 4))], v__45065[(1 + (v__45065[(v_l_id_45060 + (8 * v_wg_id_45059))] / 4))]); \n      for (int v_i_45061 = 0; v_i_45061 < v_stop_45121; v_i_45061 = (1 + v_i_45061)) {\n        int v_tmp_45126 = 0; \n        v__45074 = v_tmp_45126; \n        int v_index_45128 = v__45064[(2 + v_i_45061 + (v__45064[(v_l_id_45060 + (8 * v_wg_id_45059))] / 4))]; \n        if (v_index_45128 < 0) {\n          v__45076_0 = v__45074; \n        } else {\n          if (v_index_45128 >= v_MWidthC_1) {\n            v__45076_0 = v__45074; \n          } else {\n            v__45076_0 = v__45066[v_index_45128]; \n          }\n        }\n        v__45078_0 = bool_and(v__45065[(2 + v_i_45061 + (v__45065[(v_l_id_45060 + (8 * v_wg_id_45059))] / 4))], v__45076_0); \n        v__45071 = bool_or(v__45071, v__45078_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45062 = 0; \n        v__45082[(v_l_id_45060 + (8 * v_wg_id_45059))] = doubleAndOr(v__45071, v__45068, v__45067[(v_l_id_45060 + (8 * v_wg_id_45059))], v__45069); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_45063 = 0; \n        v__45083[(v_l_id_45060 + (8 * v_wg_id_45059))] = id(v__45082[(v_l_id_45060 + (8 * v_wg_id_45059))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45064",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__45065",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__45066",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__45067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45068",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45069",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__45083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}