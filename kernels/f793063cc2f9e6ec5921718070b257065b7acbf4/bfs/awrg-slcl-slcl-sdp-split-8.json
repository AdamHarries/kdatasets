{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47344, const global int* restrict v__47345, const global int* restrict v__47346, const global int* restrict v__47347, int v__47348, int v__47349, global int* v__47367, global int* v__47357, global int* v__47351, local int* v__47362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47353; \n  int v__47358; \n  int v__45239; \n  /* Private Memory */\n  int v__47355_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3003 = v__47351; \n    local int v_w_id_47336; \n    if (get_local_id(0) == 0) {\n      v_w_id_47336 = atomic_inc(v_work_idx_3003); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47336 < v_MHeight_2)){\n      for (int v_l_id_47337 = get_local_id(0); v_l_id_47337 < v_MWidthC_1; v_l_id_47337 = (v_l_id_47337 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_47338 = 0; v_i_47338 < 8; v_i_47338 = (1 + v_i_47338)) {\n          int v_tmp_47430 = 0; \n          v__47353 = v_tmp_47430; \n          int v_index_47431 = v__47344[(v_l_id_47337 + (8 * v_MWidthC_1 * v_w_id_47336) + (v_MWidthC_1 * v_i_47338))]; \n          if (v_index_47431 < 0) {\n            v__47355_0 = v__47353; \n          } else {\n            if (v_index_47431 >= v_VLength_3) {\n              v__47355_0 = v__47353; \n            } else {\n              v__47355_0 = v__47346[v_index_47431]; \n            }\n          }\n          v__47357[(7 + (8 * v_MWidthC_1 * v_w_id_47336) + (-1 * v_i_47338) + (8 * v_l_id_47337))] = bool_and(v__47355_0, v__47345[(v_l_id_47337 + (8 * v_MWidthC_1 * v_w_id_47336) + (v_MWidthC_1 * v_i_47338))]); \n        }\n        /* end map_seq */\n        int v_tmp_47432 = 0; \n        v__47358 = v_tmp_47432; \n        /* reduce_seq */\n        for (int v_i_47339 = 0; v_i_47339 < 8; v_i_47339 = (1 + v_i_47339)) {\n          v__47358 = bool_or(v__47358, v__47357[(v_i_47339 + (8 * v_MWidthC_1 * v_w_id_47336) + (8 * v_l_id_47337))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47340 = 0; \n          v__47362[v_l_id_47337] = id(v__47358); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_47341 = get_local_id(0); \n        int v_tmp_47435 = 0; \n        v__45239 = v_tmp_47435; \n        /* reduce_seq */\n        for (int v_i_47342 = 0; v_i_47342 < v_MWidthC_1; v_i_47342 = (1 + v_i_47342)) {\n          v__45239 = bool_or(v__45239, v__47362[(v_i_47342 + (v_MWidthC_1 * v_l_id_47341))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47343 = 0; \n          v__47367[v_w_id_47336] = doubleAndOr(v__45239, v__47348, v__47347[v_w_id_47336], v__47349); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47336 = atomic_inc(v_work_idx_3003); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47344",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47345",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47346",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47347",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47348",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47349",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47357",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47351",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47362",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}