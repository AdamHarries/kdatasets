{
  "name" : "swrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45926, const global int* restrict v__45927, const global int* restrict v__45928, const global int* restrict v__45929, int v__45930, int v__45931, global int* v__45944, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45934; \n  int v__45936; \n  /* Private Memory */\n  int v__45938_0;\n  \n  int v__45940_0;\n  \n  for (int v_wg_id_45922 = get_group_id(0); v_wg_id_45922 < ((v_MHeight_2)/(8)); v_wg_id_45922 = (v_wg_id_45922 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2872; \n      v_work_idx_2872 = 0; \n      int v_l_id_45923 = atomic_inc(&(v_work_idx_2872)); \n      while((v_l_id_45923 < 8)){\n        int v_tmp_45982 = 0; \n        v__45934 = v_tmp_45982; \n        /* reduce_seq */\n        for (int v_i_45924 = 0; v_i_45924 < v_MWidthC_1; v_i_45924 = (1 + v_i_45924)) {\n          int v_tmp_45983 = 0; \n          v__45936 = v_tmp_45983; \n          int v_index_45984 = v__45926[(v_i_45924 + (8 * v_MWidthC_1 * v_wg_id_45922) + (v_MWidthC_1 * v_l_id_45923))]; \n          if (v_index_45984 < 0) {\n            v__45938_0 = v__45936; \n          } else {\n            if (v_index_45984 >= v_VLength_3) {\n              v__45938_0 = v__45936; \n            } else {\n              v__45938_0 = v__45928[v_index_45984]; \n            }\n          }\n          v__45940_0 = bool_and(v__45938_0, v__45927[(v_i_45924 + (8 * v_MWidthC_1 * v_wg_id_45922) + (v_MWidthC_1 * v_l_id_45923))]); \n          v__45934 = bool_or(v__45940_0, v__45934); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45925 = 0; \n          v__45944[(v_l_id_45923 + (8 * v_wg_id_45922))] = doubleAndOr(v__45934, v__45930, v__45929[(v_l_id_45923 + (8 * v_wg_id_45922))], v__45931); \n        }\n        /* end map_seq */\n        v_l_id_45923 = atomic_inc(&(v_work_idx_2872)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45927",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45928",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45930",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45931",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__45944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}