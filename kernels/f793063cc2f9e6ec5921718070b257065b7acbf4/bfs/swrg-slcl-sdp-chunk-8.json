{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44757, const global int* restrict v__44758, const global int* restrict v__44759, const global int* restrict v__44760, int v__44761, int v__44762, global int* v__44775, global int* v__44769, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44765; \n  int v__44770; \n  /* Private Memory */\n  int v__44767_0;\n  \n  for (int v_wg_id_44752 = get_group_id(0); v_wg_id_44752 < ((v_MHeight_2)/(8)); v_wg_id_44752 = (v_wg_id_44752 + get_num_groups(0))) {\n    for (int v_l_id_44753 = get_local_id(0); v_l_id_44753 < 8; v_l_id_44753 = (v_l_id_44753 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_44754 = 0; v_i_44754 < v_MWidthC_1; v_i_44754 = (1 + v_i_44754)) {\n        int v_tmp_44819 = 0; \n        v__44765 = v_tmp_44819; \n        int v_index_44820 = v__44757[(v_i_44754 + (8 * v_MWidthC_1 * v_wg_id_44752) + (v_MWidthC_1 * v_l_id_44753))]; \n        if (v_index_44820 < 0) {\n          v__44767_0 = v__44765; \n        } else {\n          if (v_index_44820 >= v_VLength_3) {\n            v__44767_0 = v__44765; \n          } else {\n            v__44767_0 = v__44759[v_index_44820]; \n          }\n        }\n        v__44769[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_44752) + (-1 * v_i_44754) + (v_MWidthC_1 * v_l_id_44753))] = bool_and(v__44767_0, v__44758[(v_i_44754 + (8 * v_MWidthC_1 * v_wg_id_44752) + (v_MWidthC_1 * v_l_id_44753))]); \n      }\n      /* end map_seq */\n      int v_tmp_44821 = 0; \n      v__44770 = v_tmp_44821; \n      /* reduce_seq */\n      for (int v_i_44755 = 0; v_i_44755 < v_MWidthC_1; v_i_44755 = (1 + v_i_44755)) {\n        v__44770 = bool_or(v__44770, v__44769[(v_i_44755 + (8 * v_MWidthC_1 * v_wg_id_44752) + (v_MWidthC_1 * v_l_id_44753))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_44756 = 0; \n        v__44775[(v_l_id_44753 + (8 * v_wg_id_44752))] = doubleAndOr(v__44770, v__44761, v__44760[(v_l_id_44753 + (8 * v_wg_id_44752))], v__44762); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__44757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44758",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44759",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44760",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44761",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44762",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__44775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}