{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71142, const global int* restrict v__71143, const global int* restrict v__71144, const global int* restrict v__71145, int v__71146, int v__71147, global int* v__71166, local int* v__71161, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__71150; \n  int v__71152; \n  int v__45239; \n  /* Private Memory */\n  int v__71154_0;\n  \n  int v__71156_0;\n  \n  int v__71160_0;\n  \n  for (int v_wg_id_71135 = get_group_id(0); v_wg_id_71135 < v_MHeight_2; v_wg_id_71135 = (v_wg_id_71135 + get_num_groups(0))) {\n    for (int v_l_id_71136 = get_local_id(0); v_l_id_71136 < v_MWidthC_1; v_l_id_71136 = (v_l_id_71136 + get_local_size(0))) {\n      int v_tmp_71230 = 0; \n      v__71150 = v_tmp_71230; \n      /* reduce_while_seq */\n      for (int v_i_71137 = 0; v_i_71137 < 512; v_i_71137 = (1 + v_i_71137)) {\n        v__71160_0 = check(v__71150, v__71142[(v_l_id_71136 + (512 * v_MWidthC_1 * v_wg_id_71135) + (v_MWidthC_1 * v_i_71137))]); \n        if (v__71160_0) {\n        } else {\n          break;\n        }\n        int v_tmp_71231 = 0; \n        v__71152 = v_tmp_71231; \n        int v_index_71232 = v__71142[(v_l_id_71136 + (512 * v_MWidthC_1 * v_wg_id_71135) + (v_MWidthC_1 * v_i_71137))]; \n        if (v_index_71232 < 0) {\n          v__71154_0 = v__71152; \n        } else {\n          if (v_index_71232 >= v_VLength_3) {\n            v__71154_0 = v__71152; \n          } else {\n            v__71154_0 = v__71144[v_index_71232]; \n          }\n        }\n        v__71156_0 = bool_and(v__71154_0, v__71143[(v_l_id_71136 + (512 * v_MWidthC_1 * v_wg_id_71135) + (v_MWidthC_1 * v_i_71137))]); \n        v__71150 = bool_or(v__71156_0, v__71150); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71138 = 0; \n        v__71161[v_l_id_71136] = id(v__71150); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5159; \n      v_work_idx_5159 = 0; \n      int v_l_id_71139 = atomic_inc(&(v_work_idx_5159)); \n      while((v_l_id_71139 < 1)){\n        int v_tmp_71235 = 0; \n        v__45239 = v_tmp_71235; \n        /* reduce_seq */\n        for (int v_i_71140 = 0; v_i_71140 < v_MWidthC_1; v_i_71140 = (1 + v_i_71140)) {\n          v__45239 = bool_or(v__45239, v__71161[(v_i_71140 + (v_MWidthC_1 * v_l_id_71139))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71141 = 0; \n          v__71166[v_wg_id_71135] = doubleAndOr(v__45239, v__71146, v__71145[v_wg_id_71135], v__71147); \n        }\n        /* end map_seq */\n        v_l_id_71139 = atomic_inc(&(v_work_idx_5159)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__71142",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71143",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71144",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71145",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71146",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71147",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71161",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}