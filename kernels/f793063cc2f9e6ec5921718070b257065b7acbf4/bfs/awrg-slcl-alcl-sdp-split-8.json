{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47665, const global int* restrict v__47666, const global int* restrict v__47667, const global int* restrict v__47668, int v__47669, int v__47670, global int* v__47688, global int* v__47678, global int* v__47672, local int* v__47683, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47674; \n  int v__47679; \n  int v__45239; \n  /* Private Memory */\n  int v__47676_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3032 = v__47672; \n    local int v_w_id_47657; \n    if (get_local_id(0) == 0) {\n      v_w_id_47657 = atomic_inc(v_work_idx_3032); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47657 < v_MHeight_2)){\n      for (int v_l_id_47658 = get_local_id(0); v_l_id_47658 < v_MWidthC_1; v_l_id_47658 = (v_l_id_47658 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_47659 = 0; v_i_47659 < 8; v_i_47659 = (1 + v_i_47659)) {\n          int v_tmp_47747 = 0; \n          v__47674 = v_tmp_47747; \n          int v_index_47748 = v__47665[(v_l_id_47658 + (8 * v_MWidthC_1 * v_w_id_47657) + (v_MWidthC_1 * v_i_47659))]; \n          if (v_index_47748 < 0) {\n            v__47676_0 = v__47674; \n          } else {\n            if (v_index_47748 >= v_VLength_3) {\n              v__47676_0 = v__47674; \n            } else {\n              v__47676_0 = v__47667[v_index_47748]; \n            }\n          }\n          v__47678[(7 + (8 * v_MWidthC_1 * v_w_id_47657) + (-1 * v_i_47659) + (8 * v_l_id_47658))] = bool_and(v__47676_0, v__47666[(v_l_id_47658 + (8 * v_MWidthC_1 * v_w_id_47657) + (v_MWidthC_1 * v_i_47659))]); \n        }\n        /* end map_seq */\n        int v_tmp_47749 = 0; \n        v__47679 = v_tmp_47749; \n        /* reduce_seq */\n        for (int v_i_47660 = 0; v_i_47660 < 8; v_i_47660 = (1 + v_i_47660)) {\n          v__47679 = bool_or(v__47679, v__47678[(v_i_47660 + (8 * v_MWidthC_1 * v_w_id_47657) + (8 * v_l_id_47658))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47661 = 0; \n          v__47683[v_l_id_47658] = id(v__47679); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3025; \n        v_work_idx_3025 = 0; \n        int v_l_id_47662 = atomic_inc(&(v_work_idx_3025)); \n        while((v_l_id_47662 < 1)){\n          int v_tmp_47752 = 0; \n          v__45239 = v_tmp_47752; \n          /* reduce_seq */\n          for (int v_i_47663 = 0; v_i_47663 < v_MWidthC_1; v_i_47663 = (1 + v_i_47663)) {\n            v__45239 = bool_or(v__45239, v__47683[(v_i_47663 + (v_MWidthC_1 * v_l_id_47662))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_47664 = 0; \n            v__47688[v_w_id_47657] = doubleAndOr(v__45239, v__47669, v__47668[v_w_id_47657], v__47670); \n          }\n          /* end map_seq */\n          v_l_id_47662 = atomic_inc(&(v_work_idx_3025)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47657 = atomic_inc(v_work_idx_3032); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47665",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47666",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47667",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47669",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47670",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47678",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47672",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47688",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47683",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}