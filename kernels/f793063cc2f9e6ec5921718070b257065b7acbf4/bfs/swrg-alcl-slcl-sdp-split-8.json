{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46295, const global int* restrict v__46296, const global int* restrict v__46297, const global int* restrict v__46298, int v__46299, int v__46300, global int* v__46317, global int* v__46307, local int* v__46312, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46303; \n  int v__46308; \n  int v__45239; \n  /* Private Memory */\n  int v__46305_0;\n  \n  for (int v_wg_id_46287 = get_group_id(0); v_wg_id_46287 < v_MHeight_2; v_wg_id_46287 = (v_wg_id_46287 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2906; \n      v_work_idx_2906 = 0; \n      int v_l_id_46288 = atomic_inc(&(v_work_idx_2906)); \n      while((v_l_id_46288 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_46289 = 0; v_i_46289 < 8; v_i_46289 = (1 + v_i_46289)) {\n          int v_tmp_46374 = 0; \n          v__46303 = v_tmp_46374; \n          int v_index_46375 = v__46295[(v_l_id_46288 + (8 * v_MWidthC_1 * v_wg_id_46287) + (v_MWidthC_1 * v_i_46289))]; \n          if (v_index_46375 < 0) {\n            v__46305_0 = v__46303; \n          } else {\n            if (v_index_46375 >= v_VLength_3) {\n              v__46305_0 = v__46303; \n            } else {\n              v__46305_0 = v__46297[v_index_46375]; \n            }\n          }\n          v__46307[(7 + (8 * v_MWidthC_1 * v_wg_id_46287) + (-1 * v_i_46289) + (8 * v_l_id_46288))] = bool_and(v__46305_0, v__46296[(v_l_id_46288 + (8 * v_MWidthC_1 * v_wg_id_46287) + (v_MWidthC_1 * v_i_46289))]); \n        }\n        /* end map_seq */\n        int v_tmp_46376 = 0; \n        v__46308 = v_tmp_46376; \n        /* reduce_seq */\n        for (int v_i_46290 = 0; v_i_46290 < 8; v_i_46290 = (1 + v_i_46290)) {\n          v__46308 = bool_or(v__46308, v__46307[(v_i_46290 + (8 * v_MWidthC_1 * v_wg_id_46287) + (8 * v_l_id_46288))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46291 = 0; \n          v__46312[v_l_id_46288] = id(v__46308); \n        }\n        /* end map_seq */\n        v_l_id_46288 = atomic_inc(&(v_work_idx_2906)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_46292 = get_local_id(0); \n      int v_tmp_46379 = 0; \n      v__45239 = v_tmp_46379; \n      /* reduce_seq */\n      for (int v_i_46293 = 0; v_i_46293 < v_MWidthC_1; v_i_46293 = (1 + v_i_46293)) {\n        v__45239 = bool_or(v__45239, v__46312[(v_i_46293 + (v_MWidthC_1 * v_l_id_46292))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_46294 = 0; \n        v__46317[v_wg_id_46287] = doubleAndOr(v__45239, v__46299, v__46298[v_wg_id_46287], v__46300); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46295",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46296",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46297",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46298",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46299",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46300",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46307",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__46317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46312",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}