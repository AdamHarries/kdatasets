{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71318, const global int* restrict v__71319, const global int* restrict v__71320, const global int* restrict v__71321, int v__71322, int v__71323, global int* v__71336, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__71326; \n  int v__71328; \n  /* Private Memory */\n  int v__71330_0;\n  \n  int v__71332_0;\n  \n  for (int v_wg_id_71314 = get_group_id(0); v_wg_id_71314 < ((v_MHeight_2)/(512)); v_wg_id_71314 = (v_wg_id_71314 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5176; \n      v_work_idx_5176 = 0; \n      int v_l_id_71315 = atomic_inc(&(v_work_idx_5176)); \n      while((v_l_id_71315 < 512)){\n        int v_tmp_71374 = 0; \n        v__71326 = v_tmp_71374; \n        /* reduce_seq */\n        for (int v_i_71316 = 0; v_i_71316 < v_MWidthC_1; v_i_71316 = (1 + v_i_71316)) {\n          int v_tmp_71375 = 0; \n          v__71328 = v_tmp_71375; \n          int v_index_71376 = v__71318[(v_i_71316 + (512 * v_MWidthC_1 * v_wg_id_71314) + (v_MWidthC_1 * v_l_id_71315))]; \n          if (v_index_71376 < 0) {\n            v__71330_0 = v__71328; \n          } else {\n            if (v_index_71376 >= v_VLength_3) {\n              v__71330_0 = v__71328; \n            } else {\n              v__71330_0 = v__71320[v_index_71376]; \n            }\n          }\n          v__71332_0 = bool_and(v__71330_0, v__71319[(v_i_71316 + (512 * v_MWidthC_1 * v_wg_id_71314) + (v_MWidthC_1 * v_l_id_71315))]); \n          v__71326 = bool_or(v__71332_0, v__71326); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71317 = 0; \n          v__71336[(v_l_id_71315 + (512 * v_wg_id_71314))] = doubleAndOr(v__71326, v__71322, v__71321[(v_l_id_71315 + (512 * v_wg_id_71314))], v__71323); \n        }\n        /* end map_seq */\n        v_l_id_71315 = atomic_inc(&(v_work_idx_5176)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__71318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71320",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71322",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71323",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}