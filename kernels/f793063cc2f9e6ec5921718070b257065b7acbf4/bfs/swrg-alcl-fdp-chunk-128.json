{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62854, const global int* restrict v__62855, const global int* restrict v__62856, const global int* restrict v__62857, int v__62858, int v__62859, global int* v__62872, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__62862; \n  int v__62864; \n  /* Private Memory */\n  int v__62866_0;\n  \n  int v__62868_0;\n  \n  for (int v_wg_id_62850 = get_group_id(0); v_wg_id_62850 < ((v_MHeight_2)/(128)); v_wg_id_62850 = (v_wg_id_62850 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4408; \n      v_work_idx_4408 = 0; \n      int v_l_id_62851 = atomic_inc(&(v_work_idx_4408)); \n      while((v_l_id_62851 < 128)){\n        int v_tmp_62910 = 0; \n        v__62862 = v_tmp_62910; \n        /* reduce_seq */\n        for (int v_i_62852 = 0; v_i_62852 < v_MWidthC_1; v_i_62852 = (1 + v_i_62852)) {\n          int v_tmp_62911 = 0; \n          v__62864 = v_tmp_62911; \n          int v_index_62912 = v__62854[(v_i_62852 + (128 * v_MWidthC_1 * v_wg_id_62850) + (v_MWidthC_1 * v_l_id_62851))]; \n          if (v_index_62912 < 0) {\n            v__62866_0 = v__62864; \n          } else {\n            if (v_index_62912 >= v_VLength_3) {\n              v__62866_0 = v__62864; \n            } else {\n              v__62866_0 = v__62856[v_index_62912]; \n            }\n          }\n          v__62868_0 = bool_and(v__62866_0, v__62855[(v_i_62852 + (128 * v_MWidthC_1 * v_wg_id_62850) + (v_MWidthC_1 * v_l_id_62851))]); \n          v__62862 = bool_or(v__62868_0, v__62862); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62853 = 0; \n          v__62872[(v_l_id_62851 + (128 * v_wg_id_62850))] = doubleAndOr(v__62862, v__62858, v__62857[(v_l_id_62851 + (128 * v_wg_id_62850))], v__62859); \n        }\n        /* end map_seq */\n        v_l_id_62851 = atomic_inc(&(v_work_idx_4408)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}