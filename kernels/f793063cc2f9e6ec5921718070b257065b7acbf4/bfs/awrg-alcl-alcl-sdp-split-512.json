{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74100, const global int* restrict v__74101, const global int* restrict v__74102, const global int* restrict v__74103, int v__74104, int v__74105, global int* v__74123, global int* v__74113, global int* v__74107, local int* v__74118, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__74109; \n  int v__74114; \n  int v__45239; \n  /* Private Memory */\n  int v__74111_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5442 = v__74107; \n    local int v_w_id_74092; \n    if (get_local_id(0) == 0) {\n      v_w_id_74092 = atomic_inc(v_work_idx_5442); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_74092 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5440; \n        v_work_idx_5440 = 0; \n        int v_l_id_74093 = atomic_inc(&(v_work_idx_5440)); \n        while((v_l_id_74093 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_74094 = 0; v_i_74094 < 512; v_i_74094 = (1 + v_i_74094)) {\n            int v_tmp_74174 = 0; \n            v__74109 = v_tmp_74174; \n            int v_index_74175 = v__74100[(v_l_id_74093 + (512 * v_MWidthC_1 * v_w_id_74092) + (v_MWidthC_1 * v_i_74094))]; \n            if (v_index_74175 < 0) {\n              v__74111_0 = v__74109; \n            } else {\n              if (v_index_74175 >= v_VLength_3) {\n                v__74111_0 = v__74109; \n              } else {\n                v__74111_0 = v__74102[v_index_74175]; \n              }\n            }\n            v__74113[(511 + (512 * v_MWidthC_1 * v_w_id_74092) + (-1 * v_i_74094) + (512 * v_l_id_74093))] = bool_and(v__74111_0, v__74101[(v_l_id_74093 + (512 * v_MWidthC_1 * v_w_id_74092) + (v_MWidthC_1 * v_i_74094))]); \n          }\n          /* end map_seq */\n          int v_tmp_74176 = 0; \n          v__74114 = v_tmp_74176; \n          /* reduce_seq */\n          for (int v_i_74095 = 0; v_i_74095 < 512; v_i_74095 = (1 + v_i_74095)) {\n            v__74114 = bool_or(v__74114, v__74113[(v_i_74095 + (512 * v_MWidthC_1 * v_w_id_74092) + (512 * v_l_id_74093))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_74096 = 0; \n            v__74118[v_l_id_74093] = id(v__74114); \n          }\n          /* end map_seq */\n          v_l_id_74093 = atomic_inc(&(v_work_idx_5440)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5434; \n        v_work_idx_5434 = 0; \n        int v_l_id_74097 = atomic_inc(&(v_work_idx_5434)); \n        while((v_l_id_74097 < 1)){\n          int v_tmp_74179 = 0; \n          v__45239 = v_tmp_74179; \n          /* reduce_seq */\n          for (int v_i_74098 = 0; v_i_74098 < v_MWidthC_1; v_i_74098 = (1 + v_i_74098)) {\n            v__45239 = bool_or(v__45239, v__74118[(v_i_74098 + (v_MWidthC_1 * v_l_id_74097))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_74099 = 0; \n            v__74123[v_w_id_74092] = doubleAndOr(v__45239, v__74104, v__74103[v_w_id_74092], v__74105); \n          }\n          /* end map_seq */\n          v_l_id_74097 = atomic_inc(&(v_work_idx_5434)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_74092 = atomic_inc(v_work_idx_5442); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74100",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74101",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74102",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74103",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74104",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74105",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74113",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74107",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__74123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74118",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}