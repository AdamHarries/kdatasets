{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68115, const global int* restrict v__68116, const global int* restrict v__68117, const global int* restrict v__68118, int v__68119, int v__68120, global int* v__68134, global int* v__68122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__68124; \n  int v__68126; \n  /* Private Memory */\n  int v__68128_0;\n  \n  int v__68130_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4889 = v__68122; \n    local int v_w_id_68111; \n    if (get_local_id(0) == 0) {\n      v_w_id_68111 = atomic_inc(v_work_idx_4889); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68111 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_68112 = get_local_id(0); v_l_id_68112 < 256; v_l_id_68112 = (v_l_id_68112 + get_local_size(0))) {\n        int v_tmp_68175 = 0; \n        v__68124 = v_tmp_68175; \n        /* reduce_seq */\n        for (int v_i_68113 = 0; v_i_68113 < v_MWidthC_1; v_i_68113 = (1 + v_i_68113)) {\n          int v_tmp_68176 = 0; \n          v__68126 = v_tmp_68176; \n          int v_index_68177 = v__68115[(v_i_68113 + (256 * v_MWidthC_1 * v_w_id_68111) + (v_MWidthC_1 * v_l_id_68112))]; \n          if (v_index_68177 < 0) {\n            v__68128_0 = v__68126; \n          } else {\n            if (v_index_68177 >= v_VLength_3) {\n              v__68128_0 = v__68126; \n            } else {\n              v__68128_0 = v__68117[v_index_68177]; \n            }\n          }\n          v__68130_0 = bool_and(v__68128_0, v__68116[(v_i_68113 + (256 * v_MWidthC_1 * v_w_id_68111) + (v_MWidthC_1 * v_l_id_68112))]); \n          v__68124 = bool_or(v__68130_0, v__68124); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68114 = 0; \n          v__68134[(v_l_id_68112 + (256 * v_w_id_68111))] = doubleAndOr(v__68124, v__68119, v__68118[(v_l_id_68112 + (256 * v_w_id_68111))], v__68120); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_68111 = atomic_inc(v_work_idx_4889); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68115",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68117",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68118",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68119",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68120",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68122",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}