{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64795, const global int* restrict v__64796, const global int* restrict v__64797, const global int* restrict v__64798, int v__64799, int v__64800, global int* v__64820, global int* v__64802, local int* v__64815, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__64804; \n  int v__64806; \n  int v__45239; \n  /* Private Memory */\n  int v__64808_0;\n  \n  int v__64810_0;\n  \n  int v__64814_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4588 = v__64802; \n    local int v_w_id_64788; \n    if (get_local_id(0) == 0) {\n      v_w_id_64788 = atomic_inc(v_work_idx_4588); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_64788 < v_MHeight_2)){\n      for (int v_l_id_64789 = get_local_id(0); v_l_id_64789 < v_MWidthC_1; v_l_id_64789 = (v_l_id_64789 + get_local_size(0))) {\n        int v_tmp_64882 = 0; \n        v__64804 = v_tmp_64882; \n        /* reduce_while_seq */\n        for (int v_i_64790 = 0; v_i_64790 < 128; v_i_64790 = (1 + v_i_64790)) {\n          v__64814_0 = check(v__64804, v__64795[(v_l_id_64789 + (128 * v_MWidthC_1 * v_w_id_64788) + (v_MWidthC_1 * v_i_64790))]); \n          if (v__64814_0) {\n          } else {\n            break;\n          }\n          int v_tmp_64883 = 0; \n          v__64806 = v_tmp_64883; \n          int v_index_64884 = v__64795[(v_l_id_64789 + (128 * v_MWidthC_1 * v_w_id_64788) + (v_MWidthC_1 * v_i_64790))]; \n          if (v_index_64884 < 0) {\n            v__64808_0 = v__64806; \n          } else {\n            if (v_index_64884 >= v_VLength_3) {\n              v__64808_0 = v__64806; \n            } else {\n              v__64808_0 = v__64797[v_index_64884]; \n            }\n          }\n          v__64810_0 = bool_and(v__64808_0, v__64796[(v_l_id_64789 + (128 * v_MWidthC_1 * v_w_id_64788) + (v_MWidthC_1 * v_i_64790))]); \n          v__64804 = bool_or(v__64810_0, v__64804); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64791 = 0; \n          v__64815[v_l_id_64789] = id(v__64804); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4582; \n        v_work_idx_4582 = 0; \n        int v_l_id_64792 = atomic_inc(&(v_work_idx_4582)); \n        while((v_l_id_64792 < 1)){\n          int v_tmp_64887 = 0; \n          v__45239 = v_tmp_64887; \n          /* reduce_seq */\n          for (int v_i_64793 = 0; v_i_64793 < v_MWidthC_1; v_i_64793 = (1 + v_i_64793)) {\n            v__45239 = bool_or(v__45239, v__64815[(v_i_64793 + (v_MWidthC_1 * v_l_id_64792))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_64794 = 0; \n            v__64820[v_w_id_64788] = doubleAndOr(v__45239, v__64799, v__64798[v_w_id_64788], v__64800); \n          }\n          /* end map_seq */\n          v_l_id_64792 = atomic_inc(&(v_work_idx_4582)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_64788 = atomic_inc(v_work_idx_4588); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__64795",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64796",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64797",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64798",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64799",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64800",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64802",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__64820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64815",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}