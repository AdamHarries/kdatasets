{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47766, const global int* restrict v__47767, const global int* restrict v__47768, const global int* restrict v__47769, int v__47770, int v__47771, global int* v__47789, global int* v__47773, local int* v__47784, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47775; \n  int v__47777; \n  int v__45239; \n  /* Private Memory */\n  int v__47779_0;\n  \n  int v__47781_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3042 = v__47773; \n    local int v_w_id_47759; \n    if (get_local_id(0) == 0) {\n      v_w_id_47759 = atomic_inc(v_work_idx_3042); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47759 < v_MHeight_2)){\n      for (int v_l_id_47760 = get_local_id(0); v_l_id_47760 < v_MWidthC_1; v_l_id_47760 = (v_l_id_47760 + get_local_size(0))) {\n        int v_tmp_47848 = 0; \n        v__47775 = v_tmp_47848; \n        /* reduce_seq */\n        for (int v_i_47761 = 0; v_i_47761 < 8; v_i_47761 = (1 + v_i_47761)) {\n          int v_tmp_47849 = 0; \n          v__47777 = v_tmp_47849; \n          int v_index_47850 = v__47766[(v_l_id_47760 + (8 * v_MWidthC_1 * v_w_id_47759) + (v_MWidthC_1 * v_i_47761))]; \n          if (v_index_47850 < 0) {\n            v__47779_0 = v__47777; \n          } else {\n            if (v_index_47850 >= v_VLength_3) {\n              v__47779_0 = v__47777; \n            } else {\n              v__47779_0 = v__47768[v_index_47850]; \n            }\n          }\n          v__47781_0 = bool_and(v__47779_0, v__47767[(v_l_id_47760 + (8 * v_MWidthC_1 * v_w_id_47759) + (v_MWidthC_1 * v_i_47761))]); \n          v__47775 = bool_or(v__47781_0, v__47775); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47762 = 0; \n          v__47784[v_l_id_47760] = id(v__47775); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3036; \n        v_work_idx_3036 = 0; \n        int v_l_id_47763 = atomic_inc(&(v_work_idx_3036)); \n        while((v_l_id_47763 < 1)){\n          int v_tmp_47853 = 0; \n          v__45239 = v_tmp_47853; \n          /* reduce_seq */\n          for (int v_i_47764 = 0; v_i_47764 < v_MWidthC_1; v_i_47764 = (1 + v_i_47764)) {\n            v__45239 = bool_or(v__45239, v__47784[(v_i_47764 + (v_MWidthC_1 * v_l_id_47763))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_47765 = 0; \n            v__47789[v_w_id_47759] = doubleAndOr(v__45239, v__47770, v__47769[v_w_id_47759], v__47771); \n          }\n          /* end map_seq */\n          v_l_id_47763 = atomic_inc(&(v_work_idx_3036)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_47759 = atomic_inc(v_work_idx_3042); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__47766",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47767",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47768",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47770",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47771",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47773",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47789",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47784",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}