{
  "name" : "awrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64694, const global int* restrict v__64695, const global int* restrict v__64696, const global int* restrict v__64697, int v__64698, int v__64699, global int* v__64717, global int* v__64701, local int* v__64712, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__64703; \n  int v__64705; \n  int v__45239; \n  /* Private Memory */\n  int v__64707_0;\n  \n  int v__64709_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4578 = v__64701; \n    local int v_w_id_64687; \n    if (get_local_id(0) == 0) {\n      v_w_id_64687 = atomic_inc(v_work_idx_4578); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_64687 < v_MHeight_2)){\n      for (int v_l_id_64688 = get_local_id(0); v_l_id_64688 < v_MWidthC_1; v_l_id_64688 = (v_l_id_64688 + get_local_size(0))) {\n        int v_tmp_64776 = 0; \n        v__64703 = v_tmp_64776; \n        /* reduce_seq */\n        for (int v_i_64689 = 0; v_i_64689 < 128; v_i_64689 = (1 + v_i_64689)) {\n          int v_tmp_64777 = 0; \n          v__64705 = v_tmp_64777; \n          int v_index_64778 = v__64694[(v_l_id_64688 + (128 * v_MWidthC_1 * v_w_id_64687) + (v_MWidthC_1 * v_i_64689))]; \n          if (v_index_64778 < 0) {\n            v__64707_0 = v__64705; \n          } else {\n            if (v_index_64778 >= v_VLength_3) {\n              v__64707_0 = v__64705; \n            } else {\n              v__64707_0 = v__64696[v_index_64778]; \n            }\n          }\n          v__64709_0 = bool_and(v__64707_0, v__64695[(v_l_id_64688 + (128 * v_MWidthC_1 * v_w_id_64687) + (v_MWidthC_1 * v_i_64689))]); \n          v__64703 = bool_or(v__64709_0, v__64703); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64690 = 0; \n          v__64712[v_l_id_64688] = id(v__64703); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4572; \n        v_work_idx_4572 = 0; \n        int v_l_id_64691 = atomic_inc(&(v_work_idx_4572)); \n        while((v_l_id_64691 < 1)){\n          int v_tmp_64781 = 0; \n          v__45239 = v_tmp_64781; \n          /* reduce_seq */\n          for (int v_i_64692 = 0; v_i_64692 < v_MWidthC_1; v_i_64692 = (1 + v_i_64692)) {\n            v__45239 = bool_or(v__45239, v__64712[(v_i_64692 + (v_MWidthC_1 * v_l_id_64691))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_64693 = 0; \n            v__64717[v_w_id_64687] = doubleAndOr(v__45239, v__64698, v__64697[v_w_id_64687], v__64699); \n          }\n          /* end map_seq */\n          v_l_id_64691 = atomic_inc(&(v_work_idx_4572)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_64687 = atomic_inc(v_work_idx_4578); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__64694",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64695",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64696",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64697",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64698",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64699",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64701",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__64717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64712",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}