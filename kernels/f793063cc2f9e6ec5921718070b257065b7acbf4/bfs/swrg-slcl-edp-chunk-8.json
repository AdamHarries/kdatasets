{
  "name" : "swrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44905, const global int* restrict v__44906, const global int* restrict v__44907, const global int* restrict v__44908, int v__44909, int v__44910, global int* v__44925, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44912; \n  int v__44915; \n  /* Private Memory */\n  int v__44917_0;\n  \n  int v__44919_0;\n  \n  int v__44923_0;\n  \n  for (int v_wg_id_44901 = get_group_id(0); v_wg_id_44901 < ((v_MHeight_2)/(8)); v_wg_id_44901 = (v_wg_id_44901 + get_num_groups(0))) {\n    for (int v_l_id_44902 = get_local_id(0); v_l_id_44902 < 8; v_l_id_44902 = (v_l_id_44902 + get_local_size(0))) {\n      int v_tmp_44973 = 0; \n      v__44912 = v_tmp_44973; \n      /* reduce_while_seq */\n      for (int v_i_44903 = 0; v_i_44903 < v_MWidthC_1; v_i_44903 = (1 + v_i_44903)) {\n        v__44923_0 = check(v__44912, v__44905[(v_i_44903 + (8 * v_MWidthC_1 * v_wg_id_44901) + (v_MWidthC_1 * v_l_id_44902))]); \n        if (v__44923_0) {\n        } else {\n          break;\n        }\n        int v_tmp_44974 = 0; \n        v__44915 = v_tmp_44974; \n        int v_index_44975 = v__44905[(v_i_44903 + (8 * v_MWidthC_1 * v_wg_id_44901) + (v_MWidthC_1 * v_l_id_44902))]; \n        if (v_index_44975 < 0) {\n          v__44917_0 = v__44915; \n        } else {\n          if (v_index_44975 >= v_VLength_3) {\n            v__44917_0 = v__44915; \n          } else {\n            v__44917_0 = v__44907[v_index_44975]; \n          }\n        }\n        v__44919_0 = bool_and(v__44917_0, v__44906[(v_i_44903 + (8 * v_MWidthC_1 * v_wg_id_44901) + (v_MWidthC_1 * v_l_id_44902))]); \n        v__44912 = bool_or(v__44919_0, v__44912); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_44904 = 0; \n        v__44925[(v_l_id_44902 + (8 * v_wg_id_44901))] = doubleAndOr(v__44912, v__44909, v__44908[(v_l_id_44902 + (8 * v_wg_id_44901))], v__44910); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__44905",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44907",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44908",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44909",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44910",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44925",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}