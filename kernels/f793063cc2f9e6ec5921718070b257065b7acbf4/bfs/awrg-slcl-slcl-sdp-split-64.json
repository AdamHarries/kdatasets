{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60040, const global int* restrict v__60041, const global int* restrict v__60042, const global int* restrict v__60043, int v__60044, int v__60045, global int* v__60063, global int* v__60053, global int* v__60047, local int* v__60058, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__60049; \n  int v__60054; \n  int v__45239; \n  /* Private Memory */\n  int v__60051_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4155 = v__60047; \n    local int v_w_id_60032; \n    if (get_local_id(0) == 0) {\n      v_w_id_60032 = atomic_inc(v_work_idx_4155); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60032 < v_MHeight_2)){\n      for (int v_l_id_60033 = get_local_id(0); v_l_id_60033 < v_MWidthC_1; v_l_id_60033 = (v_l_id_60033 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_60034 = 0; v_i_60034 < 64; v_i_60034 = (1 + v_i_60034)) {\n          int v_tmp_60126 = 0; \n          v__60049 = v_tmp_60126; \n          int v_index_60127 = v__60040[(v_l_id_60033 + (64 * v_MWidthC_1 * v_w_id_60032) + (v_MWidthC_1 * v_i_60034))]; \n          if (v_index_60127 < 0) {\n            v__60051_0 = v__60049; \n          } else {\n            if (v_index_60127 >= v_VLength_3) {\n              v__60051_0 = v__60049; \n            } else {\n              v__60051_0 = v__60042[v_index_60127]; \n            }\n          }\n          v__60053[(63 + (64 * v_MWidthC_1 * v_w_id_60032) + (-1 * v_i_60034) + (64 * v_l_id_60033))] = bool_and(v__60051_0, v__60041[(v_l_id_60033 + (64 * v_MWidthC_1 * v_w_id_60032) + (v_MWidthC_1 * v_i_60034))]); \n        }\n        /* end map_seq */\n        int v_tmp_60128 = 0; \n        v__60054 = v_tmp_60128; \n        /* reduce_seq */\n        for (int v_i_60035 = 0; v_i_60035 < 64; v_i_60035 = (1 + v_i_60035)) {\n          v__60054 = bool_or(v__60054, v__60053[(v_i_60035 + (64 * v_MWidthC_1 * v_w_id_60032) + (64 * v_l_id_60033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60036 = 0; \n          v__60058[v_l_id_60033] = id(v__60054); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_60037 = get_local_id(0); \n        int v_tmp_60131 = 0; \n        v__45239 = v_tmp_60131; \n        /* reduce_seq */\n        for (int v_i_60038 = 0; v_i_60038 < v_MWidthC_1; v_i_60038 = (1 + v_i_60038)) {\n          v__45239 = bool_or(v__45239, v__60058[(v_i_60038 + (v_MWidthC_1 * v_l_id_60037))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60039 = 0; \n          v__60063[v_w_id_60032] = doubleAndOr(v__45239, v__60044, v__60043[v_w_id_60032], v__60045); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60032 = atomic_inc(v_work_idx_4155); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__60040",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60041",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60042",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60044",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60045",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60053",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60047",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60058",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}