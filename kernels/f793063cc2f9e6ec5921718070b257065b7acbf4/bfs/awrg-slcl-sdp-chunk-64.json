{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59576, const global int* restrict v__59577, const global int* restrict v__59578, const global int* restrict v__59579, int v__59580, int v__59581, global int* v__59595, global int* v__59589, global int* v__59583, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__59585; \n  int v__59590; \n  /* Private Memory */\n  int v__59587_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4115 = v__59583; \n    local int v_w_id_59571; \n    if (get_local_id(0) == 0) {\n      v_w_id_59571 = atomic_inc(v_work_idx_4115); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59571 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_59572 = get_local_id(0); v_l_id_59572 < 64; v_l_id_59572 = (v_l_id_59572 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59573 = 0; v_i_59573 < v_MWidthC_1; v_i_59573 = (1 + v_i_59573)) {\n          int v_tmp_59638 = 0; \n          v__59585 = v_tmp_59638; \n          int v_index_59639 = v__59576[(v_i_59573 + (64 * v_MWidthC_1 * v_w_id_59571) + (v_MWidthC_1 * v_l_id_59572))]; \n          if (v_index_59639 < 0) {\n            v__59587_0 = v__59585; \n          } else {\n            if (v_index_59639 >= v_VLength_3) {\n              v__59587_0 = v__59585; \n            } else {\n              v__59587_0 = v__59578[v_index_59639]; \n            }\n          }\n          v__59589[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_59571) + (-1 * v_i_59573) + (v_MWidthC_1 * v_l_id_59572))] = bool_and(v__59587_0, v__59577[(v_i_59573 + (64 * v_MWidthC_1 * v_w_id_59571) + (v_MWidthC_1 * v_l_id_59572))]); \n        }\n        /* end map_seq */\n        int v_tmp_59640 = 0; \n        v__59590 = v_tmp_59640; \n        /* reduce_seq */\n        for (int v_i_59574 = 0; v_i_59574 < v_MWidthC_1; v_i_59574 = (1 + v_i_59574)) {\n          v__59590 = bool_or(v__59590, v__59589[(v_i_59574 + (64 * v_MWidthC_1 * v_w_id_59571) + (v_MWidthC_1 * v_l_id_59572))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59575 = 0; \n          v__59595[(v_l_id_59572 + (64 * v_w_id_59571))] = doubleAndOr(v__59590, v__59580, v__59579[(v_l_id_59572 + (64 * v_w_id_59571))], v__59581); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_59571 = atomic_inc(v_work_idx_4115); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59576",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59577",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59578",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59580",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59581",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59589",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59583",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59595",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}