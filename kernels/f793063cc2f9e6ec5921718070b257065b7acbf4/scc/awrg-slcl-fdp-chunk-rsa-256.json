{
  "name" : "awrg-slcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__159626, const global int* restrict v__159627, const global int* restrict v__159628, const global int* restrict v__159629, int v__159630, int v__159631, global int* v__159646, global int* v__159645, global int* v__159633, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__159634; \n  int v__159637; \n  /* Private Memory */\n  int v__159639_0;\n  \n  int v__159641_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13100 = v__159633; \n    local int v_w_id_159621; \n    if (get_local_id(0) == 0) {\n      v_w_id_159621 = atomic_inc(v_work_idx_13100); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_159621 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_159622 = get_local_id(0); v_l_id_159622 < 256; v_l_id_159622 = (v_l_id_159622 + get_local_size(0))) {\n        int v_tmp_159682 = -2147483648; \n        v__159634 = v_tmp_159682; \n        /* reduce_seq */\n        int v_stop_159683 = min(v__159626[(1 + (v__159626[(v_l_id_159622 + (256 * v_w_id_159621))] / 4))], v__159627[(1 + (v__159627[(v_l_id_159622 + (256 * v_w_id_159621))] / 4))]); \n        for (int v_i_159623 = 0; v_i_159623 < v_stop_159683; v_i_159623 = (1 + v_i_159623)) {\n          int v_tmp_159688 = -2147483648; \n          v__159637 = v_tmp_159688; \n          int v_index_159690 = v__159626[(2 + v_i_159623 + (v__159626[(v_l_id_159622 + (256 * v_w_id_159621))] / 4))]; \n          if (v_index_159690 < 0) {\n            v__159639_0 = v__159637; \n          } else {\n            if (v_index_159690 >= v_MWidthC_1) {\n              v__159639_0 = v__159637; \n            } else {\n              v__159639_0 = v__159628[v_index_159690]; \n            }\n          }\n          v__159641_0 = int_min(v__159627[(2 + v_i_159623 + (v__159627[(v_l_id_159622 + (256 * v_w_id_159621))] / 4))], v__159639_0); \n          v__159634 = int_max(v__159634, v__159641_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159624 = 0; \n          v__159645[(v_l_id_159622 + (256 * v_w_id_159621))] = doubleMinMax(v__159634, v__159630, v__159629[(v_l_id_159622 + (256 * v_w_id_159621))], v__159631); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159625 = 0; \n          v__159646[(v_l_id_159622 + (256 * v_w_id_159621))] = id(v__159645[(v_l_id_159622 + (256 * v_w_id_159621))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_159621 = atomic_inc(v_work_idx_13100); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__159626",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__159627",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__159628",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__159629",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159630",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__159631",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__159645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159633",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__159646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}