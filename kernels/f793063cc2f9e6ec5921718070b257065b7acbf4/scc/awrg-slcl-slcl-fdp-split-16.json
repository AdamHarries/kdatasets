{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__142960, const global int* restrict v__142961, const global int* restrict v__142962, const global int* restrict v__142963, int v__142964, int v__142965, global int* v__142983, global int* v__142967, local int* v__142978, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__142969; \n  int v__142971; \n  int v__136518; \n  /* Private Memory */\n  int v__142973_0;\n  \n  int v__142975_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11589 = v__142967; \n    local int v_w_id_142953; \n    if (get_local_id(0) == 0) {\n      v_w_id_142953 = atomic_inc(v_work_idx_11589); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_142953 < v_MHeight_2)){\n      for (int v_l_id_142954 = get_local_id(0); v_l_id_142954 < v_MWidthC_1; v_l_id_142954 = (v_l_id_142954 + get_local_size(0))) {\n        int v_tmp_143046 = -2147483648; \n        v__142969 = v_tmp_143046; \n        /* reduce_seq */\n        for (int v_i_142955 = 0; v_i_142955 < 16; v_i_142955 = (1 + v_i_142955)) {\n          int v_tmp_143047 = -2147483648; \n          v__142971 = v_tmp_143047; \n          int v_index_143048 = v__142960[(v_l_id_142954 + (16 * v_MWidthC_1 * v_w_id_142953) + (v_MWidthC_1 * v_i_142955))]; \n          if (v_index_143048 < 0) {\n            v__142973_0 = v__142971; \n          } else {\n            if (v_index_143048 >= v_VLength_3) {\n              v__142973_0 = v__142971; \n            } else {\n              v__142973_0 = v__142962[v_index_143048]; \n            }\n          }\n          v__142975_0 = int_min(v__142973_0, v__142961[(v_l_id_142954 + (16 * v_MWidthC_1 * v_w_id_142953) + (v_MWidthC_1 * v_i_142955))]); \n          v__142969 = int_max(v__142975_0, v__142969); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142956 = 0; \n          v__142978[v_l_id_142954] = id(v__142969); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_142957 = get_local_id(0); \n        int v_tmp_143051 = -2147483648; \n        v__136518 = v_tmp_143051; \n        /* reduce_seq */\n        for (int v_i_142958 = 0; v_i_142958 < v_MWidthC_1; v_i_142958 = (1 + v_i_142958)) {\n          v__136518 = int_max(v__136518, v__142978[(v_i_142958 + (v_MWidthC_1 * v_l_id_142957))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142959 = 0; \n          v__142983[v_w_id_142953] = doubleMinMax(v__136518, v__142964, v__142963[v_w_id_142953], v__142965); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_142953 = atomic_inc(v_work_idx_11589); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__142960",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__142961",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__142962",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__142963",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__142964",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__142965",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__142967",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__142983",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__142978",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}