{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__163551, const global int* restrict v__163552, const global int* restrict v__163553, const global int* restrict v__163554, int v__163555, int v__163556, global int* v__163570, global int* v__163564, global int* v__163558, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__163560; \n  int v__163565; \n  /* Private Memory */\n  int v__163562_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13460 = v__163558; \n    local int v_w_id_163546; \n    if (get_local_id(0) == 0) {\n      v_w_id_163546 = atomic_inc(v_work_idx_13460); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_163546 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_163547 = get_local_id(0); v_l_id_163547 < 512; v_l_id_163547 = (v_l_id_163547 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_163548 = 0; v_i_163548 < v_MWidthC_1; v_i_163548 = (1 + v_i_163548)) {\n          int v_tmp_163613 = -2147483648; \n          v__163560 = v_tmp_163613; \n          int v_index_163614 = v__163551[(v_i_163548 + (512 * v_MWidthC_1 * v_w_id_163546) + (v_MWidthC_1 * v_l_id_163547))]; \n          if (v_index_163614 < 0) {\n            v__163562_0 = v__163560; \n          } else {\n            if (v_index_163614 >= v_VLength_3) {\n              v__163562_0 = v__163560; \n            } else {\n              v__163562_0 = v__163553[v_index_163614]; \n            }\n          }\n          v__163564[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_163546) + (-1 * v_i_163548) + (v_MWidthC_1 * v_l_id_163547))] = int_min(v__163562_0, v__163552[(v_i_163548 + (512 * v_MWidthC_1 * v_w_id_163546) + (v_MWidthC_1 * v_l_id_163547))]); \n        }\n        /* end map_seq */\n        int v_tmp_163615 = -2147483648; \n        v__163565 = v_tmp_163615; \n        /* reduce_seq */\n        for (int v_i_163549 = 0; v_i_163549 < v_MWidthC_1; v_i_163549 = (1 + v_i_163549)) {\n          v__163565 = int_max(v__163565, v__163564[(v_i_163549 + (512 * v_MWidthC_1 * v_w_id_163546) + (v_MWidthC_1 * v_l_id_163547))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_163550 = 0; \n          v__163570[(v_l_id_163547 + (512 * v_w_id_163546))] = doubleMinMax(v__163565, v__163555, v__163554[(v_l_id_163547 + (512 * v_w_id_163546))], v__163556); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_163546 = atomic_inc(v_work_idx_13460); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__163551",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__163552",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__163553",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__163554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__163555",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__163556",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__163564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__163558",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__163570",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}