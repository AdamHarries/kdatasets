{
  "name" : "awrg-alcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__156469, const global int* restrict v__156470, const global int* restrict v__156471, const global int* restrict v__156472, int v__156473, int v__156474, global int* v__156489, global int* v__156488, global int* v__156476, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__156477; \n  int v__156480; \n  /* Private Memory */\n  int v__156482_0;\n  \n  int v__156484_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12817 = v__156476; \n    local int v_w_id_156464; \n    if (get_local_id(0) == 0) {\n      v_w_id_156464 = atomic_inc(v_work_idx_12817); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_156464 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12815; \n        v_work_idx_12815 = 0; \n        int v_l_id_156465 = atomic_inc(&(v_work_idx_12815)); \n        while((v_l_id_156465 < 128)){\n          int v_tmp_156521 = -2147483648; \n          v__156477 = v_tmp_156521; \n          /* reduce_seq */\n          int v_stop_156522 = min(v__156469[(1 + (v__156469[(v_l_id_156465 + (128 * v_w_id_156464))] / 4))], v__156470[(1 + (v__156470[(v_l_id_156465 + (128 * v_w_id_156464))] / 4))]); \n          for (int v_i_156466 = 0; v_i_156466 < v_stop_156522; v_i_156466 = (1 + v_i_156466)) {\n            int v_tmp_156527 = -2147483648; \n            v__156480 = v_tmp_156527; \n            int v_index_156529 = v__156469[(2 + v_i_156466 + (v__156469[(v_l_id_156465 + (128 * v_w_id_156464))] / 4))]; \n            if (v_index_156529 < 0) {\n              v__156482_0 = v__156480; \n            } else {\n              if (v_index_156529 >= v_MWidthC_1) {\n                v__156482_0 = v__156480; \n              } else {\n                v__156482_0 = v__156471[v_index_156529]; \n              }\n            }\n            v__156484_0 = int_min(v__156470[(2 + v_i_156466 + (v__156470[(v_l_id_156465 + (128 * v_w_id_156464))] / 4))], v__156482_0); \n            v__156477 = int_max(v__156477, v__156484_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_156467 = 0; \n            v__156488[(v_l_id_156465 + (128 * v_w_id_156464))] = doubleMinMax(v__156477, v__156473, v__156472[(v_l_id_156465 + (128 * v_w_id_156464))], v__156474); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_156468 = 0; \n            v__156489[(v_l_id_156465 + (128 * v_w_id_156464))] = id(v__156488[(v_l_id_156465 + (128 * v_w_id_156464))]); \n          }\n          /* end map_seq */\n          v_l_id_156465 = atomic_inc(&(v_work_idx_12815)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_156464 = atomic_inc(v_work_idx_12817); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__156469",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__156470",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__156471",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__156472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__156473",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__156474",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__156488",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__156476",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__156489",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}