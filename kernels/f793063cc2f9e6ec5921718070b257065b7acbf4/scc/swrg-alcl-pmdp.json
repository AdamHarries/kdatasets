{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__135846, const global int* restrict v__135847, const global int* restrict v__135848, const global int* restrict v__135849, int v__135850, int v__135851, global int* v__135864, global int* v__135858, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__135854; \n  int v__135859; \n  /* Private Memory */\n  int v__135856_0;\n  \n  for (int v_wg_id_135842 = get_group_id(0); v_wg_id_135842 < v_MHeight_2; v_wg_id_135842 = (v_wg_id_135842 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_10956; \n      v_l_id_10956 = 0; \n      int v_l_id_135843 = atomic_inc(&(v_l_id_10956)); \n      while((v_l_id_135843 < v_MWidthC_1)){\n        int v_tmp_135896 = -2147483648; \n        v__135854 = v_tmp_135896; \n        int v_index_135897 = v__135846[(v_l_id_135843 + (v_MWidthC_1 * v_wg_id_135842))]; \n        if (v_index_135897 < 0) {\n          v__135856_0 = v__135854; \n        } else {\n          if (v_index_135897 >= v_VLength_3) {\n            v__135856_0 = v__135854; \n          } else {\n            v__135856_0 = v__135848[v_index_135897]; \n          }\n        }\n        v__135858[(-1 + v_MWidthC_1 + (-1 * v_l_id_135843) + (v_MWidthC_1 * v_wg_id_135842))] = int_min(v__135856_0, v__135847[(v_l_id_135843 + (v_MWidthC_1 * v_wg_id_135842))]); \n        v_l_id_135843 = atomic_inc(&(v_l_id_10956)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    int v_tmp_135898 = -2147483648; \n    v__135859 = v_tmp_135898; \n    /* reduce_seq */\n    for (int v_i_135844 = 0; v_i_135844 < v_MWidthC_1; v_i_135844 = (1 + v_i_135844)) {\n      v__135859 = int_max(v__135859, v__135858[(v_i_135844 + (v_MWidthC_1 * v_wg_id_135842))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_135845 = 0; \n      v__135864[v_wg_id_135842] = doubleMinMax(v__135859, v__135850, v__135849[v_wg_id_135842], v__135851); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__135846",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135848",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__135849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__135850",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__135851",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__135858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__135864",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}