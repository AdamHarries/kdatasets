{
  "name" : "awrg-alcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__152310, const global int* restrict v__152311, const global int* restrict v__152312, const global int* restrict v__152313, int v__152314, int v__152315, global int* v__152330, global int* v__152329, global int* v__152317, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__152318; \n  int v__152321; \n  /* Private Memory */\n  int v__152323_0;\n  \n  int v__152325_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12440 = v__152317; \n    local int v_w_id_152305; \n    if (get_local_id(0) == 0) {\n      v_w_id_152305 = atomic_inc(v_work_idx_12440); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_152305 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12438; \n        v_work_idx_12438 = 0; \n        int v_l_id_152306 = atomic_inc(&(v_work_idx_12438)); \n        while((v_l_id_152306 < 64)){\n          int v_tmp_152362 = -2147483648; \n          v__152318 = v_tmp_152362; \n          /* reduce_seq */\n          int v_stop_152363 = min(v__152310[(1 + (v__152310[(v_l_id_152306 + (64 * v_w_id_152305))] / 4))], v__152311[(1 + (v__152311[(v_l_id_152306 + (64 * v_w_id_152305))] / 4))]); \n          for (int v_i_152307 = 0; v_i_152307 < v_stop_152363; v_i_152307 = (1 + v_i_152307)) {\n            int v_tmp_152368 = -2147483648; \n            v__152321 = v_tmp_152368; \n            int v_index_152370 = v__152310[(2 + v_i_152307 + (v__152310[(v_l_id_152306 + (64 * v_w_id_152305))] / 4))]; \n            if (v_index_152370 < 0) {\n              v__152323_0 = v__152321; \n            } else {\n              if (v_index_152370 >= v_MWidthC_1) {\n                v__152323_0 = v__152321; \n              } else {\n                v__152323_0 = v__152312[v_index_152370]; \n              }\n            }\n            v__152325_0 = int_min(v__152311[(2 + v_i_152307 + (v__152311[(v_l_id_152306 + (64 * v_w_id_152305))] / 4))], v__152323_0); \n            v__152318 = int_max(v__152318, v__152325_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_152308 = 0; \n            v__152329[(v_l_id_152306 + (64 * v_w_id_152305))] = doubleMinMax(v__152318, v__152314, v__152313[(v_l_id_152306 + (64 * v_w_id_152305))], v__152315); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_152309 = 0; \n            v__152330[(v_l_id_152306 + (64 * v_w_id_152305))] = id(v__152329[(v_l_id_152306 + (64 * v_w_id_152305))]); \n          }\n          /* end map_seq */\n          v_l_id_152306 = atomic_inc(&(v_work_idx_12438)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_152305 = atomic_inc(v_work_idx_12440); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__152310",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__152311",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__152312",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__152313",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__152314",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__152315",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__152329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__152317",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__152330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}