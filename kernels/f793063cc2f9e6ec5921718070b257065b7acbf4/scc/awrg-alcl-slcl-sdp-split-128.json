{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__156618, const global int* restrict v__156619, const global int* restrict v__156620, const global int* restrict v__156621, int v__156622, int v__156623, global int* v__156641, global int* v__156631, global int* v__156625, local int* v__156636, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__156627; \n  int v__156632; \n  int v__136518; \n  /* Private Memory */\n  int v__156629_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12835 = v__156625; \n    local int v_w_id_156610; \n    if (get_local_id(0) == 0) {\n      v_w_id_156610 = atomic_inc(v_work_idx_12835); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_156610 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12833; \n        v_work_idx_12833 = 0; \n        int v_l_id_156611 = atomic_inc(&(v_work_idx_12833)); \n        while((v_l_id_156611 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_156612 = 0; v_i_156612 < 128; v_i_156612 = (1 + v_i_156612)) {\n            int v_tmp_156696 = -2147483648; \n            v__156627 = v_tmp_156696; \n            int v_index_156697 = v__156618[(v_l_id_156611 + (128 * v_MWidthC_1 * v_w_id_156610) + (v_MWidthC_1 * v_i_156612))]; \n            if (v_index_156697 < 0) {\n              v__156629_0 = v__156627; \n            } else {\n              if (v_index_156697 >= v_VLength_3) {\n                v__156629_0 = v__156627; \n              } else {\n                v__156629_0 = v__156620[v_index_156697]; \n              }\n            }\n            v__156631[(127 + (128 * v_MWidthC_1 * v_w_id_156610) + (-1 * v_i_156612) + (128 * v_l_id_156611))] = int_min(v__156629_0, v__156619[(v_l_id_156611 + (128 * v_MWidthC_1 * v_w_id_156610) + (v_MWidthC_1 * v_i_156612))]); \n          }\n          /* end map_seq */\n          int v_tmp_156698 = -2147483648; \n          v__156632 = v_tmp_156698; \n          /* reduce_seq */\n          for (int v_i_156613 = 0; v_i_156613 < 128; v_i_156613 = (1 + v_i_156613)) {\n            v__156632 = int_max(v__156632, v__156631[(v_i_156613 + (128 * v_MWidthC_1 * v_w_id_156610) + (128 * v_l_id_156611))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_156614 = 0; \n            v__156636[v_l_id_156611] = id(v__156632); \n          }\n          /* end map_seq */\n          v_l_id_156611 = atomic_inc(&(v_work_idx_12833)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_156615 = get_local_id(0); \n        int v_tmp_156701 = -2147483648; \n        v__136518 = v_tmp_156701; \n        /* reduce_seq */\n        for (int v_i_156616 = 0; v_i_156616 < v_MWidthC_1; v_i_156616 = (1 + v_i_156616)) {\n          v__136518 = int_max(v__136518, v__156636[(v_i_156616 + (v_MWidthC_1 * v_l_id_156615))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_156617 = 0; \n          v__156641[v_w_id_156610] = doubleMinMax(v__136518, v__156622, v__156621[v_w_id_156610], v__156623); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_156610 = atomic_inc(v_work_idx_12835); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__156618",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__156619",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__156620",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__156621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__156622",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__156623",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__156631",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__156625",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__156641",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__156636",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}