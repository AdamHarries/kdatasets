{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__151741, const global int* restrict v__151742, const global int* restrict v__151743, const global int* restrict v__151744, int v__151745, int v__151746, global int* v__151764, global int* v__151748, local int* v__151759, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__151750; \n  int v__151752; \n  int v__136518; \n  /* Private Memory */\n  int v__151754_0;\n  \n  int v__151756_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12387 = v__151748; \n    local int v_w_id_151734; \n    if (get_local_id(0) == 0) {\n      v_w_id_151734 = atomic_inc(v_work_idx_12387); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_151734 < v_MHeight_2)){\n      for (int v_l_id_151735 = get_local_id(0); v_l_id_151735 < v_MWidthC_1; v_l_id_151735 = (v_l_id_151735 + get_local_size(0))) {\n        int v_tmp_151823 = -2147483648; \n        v__151750 = v_tmp_151823; \n        /* reduce_seq */\n        for (int v_i_151736 = 0; v_i_151736 < 64; v_i_151736 = (1 + v_i_151736)) {\n          int v_tmp_151824 = -2147483648; \n          v__151752 = v_tmp_151824; \n          int v_index_151825 = v__151741[(v_l_id_151735 + (64 * v_MWidthC_1 * v_w_id_151734) + (v_MWidthC_1 * v_i_151736))]; \n          if (v_index_151825 < 0) {\n            v__151754_0 = v__151752; \n          } else {\n            if (v_index_151825 >= v_VLength_3) {\n              v__151754_0 = v__151752; \n            } else {\n              v__151754_0 = v__151743[v_index_151825]; \n            }\n          }\n          v__151756_0 = int_min(v__151754_0, v__151742[(v_l_id_151735 + (64 * v_MWidthC_1 * v_w_id_151734) + (v_MWidthC_1 * v_i_151736))]); \n          v__151750 = int_max(v__151756_0, v__151750); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151737 = 0; \n          v__151759[v_l_id_151735] = id(v__151750); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_12381; \n        v_work_idx_12381 = 0; \n        int v_l_id_151738 = atomic_inc(&(v_work_idx_12381)); \n        while((v_l_id_151738 < 1)){\n          int v_tmp_151828 = -2147483648; \n          v__136518 = v_tmp_151828; \n          /* reduce_seq */\n          for (int v_i_151739 = 0; v_i_151739 < v_MWidthC_1; v_i_151739 = (1 + v_i_151739)) {\n            v__136518 = int_max(v__136518, v__151759[(v_i_151739 + (v_MWidthC_1 * v_l_id_151738))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_151740 = 0; \n            v__151764[v_w_id_151734] = doubleMinMax(v__136518, v__151745, v__151744[v_w_id_151734], v__151746); \n          }\n          /* end map_seq */\n          v_l_id_151738 = atomic_inc(&(v_work_idx_12381)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_151734 = atomic_inc(v_work_idx_12387); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__151741",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151742",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151743",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__151744",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__151745",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__151746",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__151748",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__151764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__151759",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}