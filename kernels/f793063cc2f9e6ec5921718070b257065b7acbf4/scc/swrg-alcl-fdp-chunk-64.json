{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__149901, const global int* restrict v__149902, const global int* restrict v__149903, const global int* restrict v__149904, int v__149905, int v__149906, global int* v__149919, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__149909; \n  int v__149911; \n  /* Private Memory */\n  int v__149913_0;\n  \n  int v__149915_0;\n  \n  for (int v_wg_id_149897 = get_group_id(0); v_wg_id_149897 < ((v_MHeight_2)/(64)); v_wg_id_149897 = (v_wg_id_149897 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_12217; \n      v_work_idx_12217 = 0; \n      int v_l_id_149898 = atomic_inc(&(v_work_idx_12217)); \n      while((v_l_id_149898 < 64)){\n        int v_tmp_149957 = -2147483648; \n        v__149909 = v_tmp_149957; \n        /* reduce_seq */\n        for (int v_i_149899 = 0; v_i_149899 < v_MWidthC_1; v_i_149899 = (1 + v_i_149899)) {\n          int v_tmp_149958 = -2147483648; \n          v__149911 = v_tmp_149958; \n          int v_index_149959 = v__149901[(v_i_149899 + (64 * v_MWidthC_1 * v_wg_id_149897) + (v_MWidthC_1 * v_l_id_149898))]; \n          if (v_index_149959 < 0) {\n            v__149913_0 = v__149911; \n          } else {\n            if (v_index_149959 >= v_VLength_3) {\n              v__149913_0 = v__149911; \n            } else {\n              v__149913_0 = v__149903[v_index_149959]; \n            }\n          }\n          v__149915_0 = int_min(v__149913_0, v__149902[(v_i_149899 + (64 * v_MWidthC_1 * v_wg_id_149897) + (v_MWidthC_1 * v_l_id_149898))]); \n          v__149909 = int_max(v__149915_0, v__149909); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_149900 = 0; \n          v__149919[(v_l_id_149898 + (64 * v_wg_id_149897))] = doubleMinMax(v__149909, v__149905, v__149904[(v_l_id_149898 + (64 * v_wg_id_149897))], v__149906); \n        }\n        /* end map_seq */\n        v_l_id_149898 = atomic_inc(&(v_work_idx_12217)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__149901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149902",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149903",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__149904",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__149905",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__149906",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__149919",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}