{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__155235, const global int* restrict v__155236, const global int* restrict v__155237, const global int* restrict v__155238, int v__155239, int v__155240, global int* v__155256, global int* v__155242, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__155243; \n  int v__155246; \n  /* Private Memory */\n  int v__155248_0;\n  \n  int v__155250_0;\n  \n  int v__155254_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12704 = v__155242; \n    local int v_w_id_155231; \n    if (get_local_id(0) == 0) {\n      v_w_id_155231 = atomic_inc(v_work_idx_12704); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_155231 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_155232 = get_local_id(0); v_l_id_155232 < 128; v_l_id_155232 = (v_l_id_155232 + get_local_size(0))) {\n        int v_tmp_155303 = -2147483648; \n        v__155243 = v_tmp_155303; \n        /* reduce_while_seq */\n        for (int v_i_155233 = 0; v_i_155233 < v_MWidthC_1; v_i_155233 = (1 + v_i_155233)) {\n          v__155254_0 = check(v__155243, v__155235[(v_i_155233 + (128 * v_MWidthC_1 * v_w_id_155231) + (v_MWidthC_1 * v_l_id_155232))]); \n          if (v__155254_0) {\n          } else {\n            break;\n          }\n          int v_tmp_155304 = -2147483648; \n          v__155246 = v_tmp_155304; \n          int v_index_155305 = v__155235[(v_i_155233 + (128 * v_MWidthC_1 * v_w_id_155231) + (v_MWidthC_1 * v_l_id_155232))]; \n          if (v_index_155305 < 0) {\n            v__155248_0 = v__155246; \n          } else {\n            if (v_index_155305 >= v_VLength_3) {\n              v__155248_0 = v__155246; \n            } else {\n              v__155248_0 = v__155237[v_index_155305]; \n            }\n          }\n          v__155250_0 = int_min(v__155248_0, v__155236[(v_i_155233 + (128 * v_MWidthC_1 * v_w_id_155231) + (v_MWidthC_1 * v_l_id_155232))]); \n          v__155243 = int_max(v__155250_0, v__155243); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_155234 = 0; \n          v__155256[(v_l_id_155232 + (128 * v_w_id_155231))] = doubleMinMax(v__155243, v__155239, v__155238[(v_l_id_155232 + (128 * v_w_id_155231))], v__155240); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_155231 = atomic_inc(v_work_idx_12704); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__155235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__155236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__155237",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__155238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__155239",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__155240",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__155242",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__155256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}