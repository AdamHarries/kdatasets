{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__143065, const global int* restrict v__143066, const global int* restrict v__143067, const global int* restrict v__143068, int v__143069, int v__143070, global int* v__143090, global int* v__143072, local int* v__143085, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__143074; \n  int v__143076; \n  int v__136518; \n  /* Private Memory */\n  int v__143078_0;\n  \n  int v__143080_0;\n  \n  int v__143084_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11598 = v__143072; \n    local int v_w_id_143058; \n    if (get_local_id(0) == 0) {\n      v_w_id_143058 = atomic_inc(v_work_idx_11598); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_143058 < v_MHeight_2)){\n      for (int v_l_id_143059 = get_local_id(0); v_l_id_143059 < v_MWidthC_1; v_l_id_143059 = (v_l_id_143059 + get_local_size(0))) {\n        int v_tmp_143156 = -2147483648; \n        v__143074 = v_tmp_143156; \n        /* reduce_while_seq */\n        for (int v_i_143060 = 0; v_i_143060 < 16; v_i_143060 = (1 + v_i_143060)) {\n          v__143084_0 = check(v__143074, v__143065[(v_l_id_143059 + (16 * v_MWidthC_1 * v_w_id_143058) + (v_MWidthC_1 * v_i_143060))]); \n          if (v__143084_0) {\n          } else {\n            break;\n          }\n          int v_tmp_143157 = -2147483648; \n          v__143076 = v_tmp_143157; \n          int v_index_143158 = v__143065[(v_l_id_143059 + (16 * v_MWidthC_1 * v_w_id_143058) + (v_MWidthC_1 * v_i_143060))]; \n          if (v_index_143158 < 0) {\n            v__143078_0 = v__143076; \n          } else {\n            if (v_index_143158 >= v_VLength_3) {\n              v__143078_0 = v__143076; \n            } else {\n              v__143078_0 = v__143067[v_index_143158]; \n            }\n          }\n          v__143080_0 = int_min(v__143078_0, v__143066[(v_l_id_143059 + (16 * v_MWidthC_1 * v_w_id_143058) + (v_MWidthC_1 * v_i_143060))]); \n          v__143074 = int_max(v__143080_0, v__143074); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_143061 = 0; \n          v__143085[v_l_id_143059] = id(v__143074); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_143062 = get_local_id(0); \n        int v_tmp_143161 = -2147483648; \n        v__136518 = v_tmp_143161; \n        /* reduce_seq */\n        for (int v_i_143063 = 0; v_i_143063 < v_MWidthC_1; v_i_143063 = (1 + v_i_143063)) {\n          v__136518 = int_max(v__136518, v__143085[(v_i_143063 + (v_MWidthC_1 * v_l_id_143062))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_143064 = 0; \n          v__143090[v_w_id_143058] = doubleMinMax(v__136518, v__143069, v__143068[v_w_id_143058], v__143070); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_143058 = atomic_inc(v_work_idx_11598); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__143065",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143066",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143067",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__143068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__143069",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__143070",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__143072",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__143090",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__143085",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}