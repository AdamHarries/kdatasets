{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__151319, const global int* restrict v__151320, const global int* restrict v__151321, const global int* restrict v__151322, int v__151323, int v__151324, global int* v__151342, global int* v__151332, global int* v__151326, local int* v__151337, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__151328; \n  int v__151333; \n  int v__136518; \n  /* Private Memory */\n  int v__151330_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12348 = v__151326; \n    local int v_w_id_151311; \n    if (get_local_id(0) == 0) {\n      v_w_id_151311 = atomic_inc(v_work_idx_12348); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_151311 < v_MHeight_2)){\n      for (int v_l_id_151312 = get_local_id(0); v_l_id_151312 < v_MWidthC_1; v_l_id_151312 = (v_l_id_151312 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_151313 = 0; v_i_151313 < 64; v_i_151313 = (1 + v_i_151313)) {\n          int v_tmp_151405 = -2147483648; \n          v__151328 = v_tmp_151405; \n          int v_index_151406 = v__151319[(v_l_id_151312 + (64 * v_MWidthC_1 * v_w_id_151311) + (v_MWidthC_1 * v_i_151313))]; \n          if (v_index_151406 < 0) {\n            v__151330_0 = v__151328; \n          } else {\n            if (v_index_151406 >= v_VLength_3) {\n              v__151330_0 = v__151328; \n            } else {\n              v__151330_0 = v__151321[v_index_151406]; \n            }\n          }\n          v__151332[(63 + (64 * v_MWidthC_1 * v_w_id_151311) + (-1 * v_i_151313) + (64 * v_l_id_151312))] = int_min(v__151330_0, v__151320[(v_l_id_151312 + (64 * v_MWidthC_1 * v_w_id_151311) + (v_MWidthC_1 * v_i_151313))]); \n        }\n        /* end map_seq */\n        int v_tmp_151407 = -2147483648; \n        v__151333 = v_tmp_151407; \n        /* reduce_seq */\n        for (int v_i_151314 = 0; v_i_151314 < 64; v_i_151314 = (1 + v_i_151314)) {\n          v__151333 = int_max(v__151333, v__151332[(v_i_151314 + (64 * v_MWidthC_1 * v_w_id_151311) + (64 * v_l_id_151312))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151315 = 0; \n          v__151337[v_l_id_151312] = id(v__151333); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_151316 = get_local_id(0); \n        int v_tmp_151410 = -2147483648; \n        v__136518 = v_tmp_151410; \n        /* reduce_seq */\n        for (int v_i_151317 = 0; v_i_151317 < v_MWidthC_1; v_i_151317 = (1 + v_i_151317)) {\n          v__136518 = int_max(v__136518, v__151337[(v_i_151317 + (v_MWidthC_1 * v_l_id_151316))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151318 = 0; \n          v__151342[v_w_id_151311] = doubleMinMax(v__136518, v__151323, v__151322[v_w_id_151311], v__151324); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_151311 = atomic_inc(v_work_idx_12348); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__151319",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151320",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151321",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__151322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__151323",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__151324",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__151332",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151326",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__151342",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__151337",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}