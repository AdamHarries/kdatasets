{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__147610, const global int* restrict v__147611, const global int* restrict v__147612, const global int* restrict v__147613, int v__147614, int v__147615, global int* v__147635, global int* v__147617, local int* v__147630, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__147619; \n  int v__147621; \n  int v__136518; \n  /* Private Memory */\n  int v__147623_0;\n  \n  int v__147625_0;\n  \n  int v__147629_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12013 = v__147617; \n    local int v_w_id_147603; \n    if (get_local_id(0) == 0) {\n      v_w_id_147603 = atomic_inc(v_work_idx_12013); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_147603 < v_MHeight_2)){\n      for (int v_l_id_147604 = get_local_id(0); v_l_id_147604 < v_MWidthC_1; v_l_id_147604 = (v_l_id_147604 + get_local_size(0))) {\n        int v_tmp_147697 = -2147483648; \n        v__147619 = v_tmp_147697; \n        /* reduce_while_seq */\n        for (int v_i_147605 = 0; v_i_147605 < 32; v_i_147605 = (1 + v_i_147605)) {\n          v__147629_0 = check(v__147619, v__147610[(v_l_id_147604 + (32 * v_MWidthC_1 * v_w_id_147603) + (v_MWidthC_1 * v_i_147605))]); \n          if (v__147629_0) {\n          } else {\n            break;\n          }\n          int v_tmp_147698 = -2147483648; \n          v__147621 = v_tmp_147698; \n          int v_index_147699 = v__147610[(v_l_id_147604 + (32 * v_MWidthC_1 * v_w_id_147603) + (v_MWidthC_1 * v_i_147605))]; \n          if (v_index_147699 < 0) {\n            v__147623_0 = v__147621; \n          } else {\n            if (v_index_147699 >= v_VLength_3) {\n              v__147623_0 = v__147621; \n            } else {\n              v__147623_0 = v__147612[v_index_147699]; \n            }\n          }\n          v__147625_0 = int_min(v__147623_0, v__147611[(v_l_id_147604 + (32 * v_MWidthC_1 * v_w_id_147603) + (v_MWidthC_1 * v_i_147605))]); \n          v__147619 = int_max(v__147625_0, v__147619); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_147606 = 0; \n          v__147630[v_l_id_147604] = id(v__147619); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_12007; \n        v_work_idx_12007 = 0; \n        int v_l_id_147607 = atomic_inc(&(v_work_idx_12007)); \n        while((v_l_id_147607 < 1)){\n          int v_tmp_147702 = -2147483648; \n          v__136518 = v_tmp_147702; \n          /* reduce_seq */\n          for (int v_i_147608 = 0; v_i_147608 < v_MWidthC_1; v_i_147608 = (1 + v_i_147608)) {\n            v__136518 = int_max(v__136518, v__147630[(v_i_147608 + (v_MWidthC_1 * v_l_id_147607))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_147609 = 0; \n            v__147635[v_w_id_147603] = doubleMinMax(v__136518, v__147614, v__147613[v_w_id_147603], v__147615); \n          }\n          /* end map_seq */\n          v_l_id_147607 = atomic_inc(&(v_work_idx_12007)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_147603 = atomic_inc(v_work_idx_12013); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__147610",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147611",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147612",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__147613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__147614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__147615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__147617",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__147635",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__147630",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}