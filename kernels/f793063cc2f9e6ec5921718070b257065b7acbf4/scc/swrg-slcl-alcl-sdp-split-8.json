{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__136825, const global int* restrict v__136826, const global int* restrict v__136827, const global int* restrict v__136828, int v__136829, int v__136830, global int* v__136847, global int* v__136837, local int* v__136842, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__136833; \n  int v__136838; \n  int v__136518; \n  /* Private Memory */\n  int v__136835_0;\n  \n  for (int v_wg_id_136817 = get_group_id(0); v_wg_id_136817 < v_MHeight_2; v_wg_id_136817 = (v_wg_id_136817 + get_num_groups(0))) {\n    for (int v_l_id_136818 = get_local_id(0); v_l_id_136818 < v_MWidthC_1; v_l_id_136818 = (v_l_id_136818 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_136819 = 0; v_i_136819 < 8; v_i_136819 = (1 + v_i_136819)) {\n        int v_tmp_136908 = -2147483648; \n        v__136833 = v_tmp_136908; \n        int v_index_136909 = v__136825[(v_l_id_136818 + (8 * v_MWidthC_1 * v_wg_id_136817) + (v_MWidthC_1 * v_i_136819))]; \n        if (v_index_136909 < 0) {\n          v__136835_0 = v__136833; \n        } else {\n          if (v_index_136909 >= v_VLength_3) {\n            v__136835_0 = v__136833; \n          } else {\n            v__136835_0 = v__136827[v_index_136909]; \n          }\n        }\n        v__136837[(7 + (8 * v_MWidthC_1 * v_wg_id_136817) + (-1 * v_i_136819) + (8 * v_l_id_136818))] = int_min(v__136835_0, v__136826[(v_l_id_136818 + (8 * v_MWidthC_1 * v_wg_id_136817) + (v_MWidthC_1 * v_i_136819))]); \n      }\n      /* end map_seq */\n      int v_tmp_136910 = -2147483648; \n      v__136838 = v_tmp_136910; \n      /* reduce_seq */\n      for (int v_i_136820 = 0; v_i_136820 < 8; v_i_136820 = (1 + v_i_136820)) {\n        v__136838 = int_max(v__136838, v__136837[(v_i_136820 + (8 * v_MWidthC_1 * v_wg_id_136817) + (8 * v_l_id_136818))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_136821 = 0; \n        v__136842[v_l_id_136818] = id(v__136838); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_11029; \n      v_work_idx_11029 = 0; \n      int v_l_id_136822 = atomic_inc(&(v_work_idx_11029)); \n      while((v_l_id_136822 < 1)){\n        int v_tmp_136913 = -2147483648; \n        v__136518 = v_tmp_136913; \n        /* reduce_seq */\n        for (int v_i_136823 = 0; v_i_136823 < v_MWidthC_1; v_i_136823 = (1 + v_i_136823)) {\n          v__136518 = int_max(v__136518, v__136842[(v_i_136823 + (v_MWidthC_1 * v_l_id_136822))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_136824 = 0; \n          v__136847[v_wg_id_136817] = doubleMinMax(v__136518, v__136829, v__136828[v_wg_id_136817], v__136830); \n        }\n        /* end map_seq */\n        v_l_id_136822 = atomic_inc(&(v_work_idx_11029)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__136825",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__136826",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__136827",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__136828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__136829",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__136830",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__136837",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__136847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__136842",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}