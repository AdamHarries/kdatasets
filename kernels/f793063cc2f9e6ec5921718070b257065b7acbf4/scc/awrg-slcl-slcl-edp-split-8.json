{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__138833, const global int* restrict v__138834, const global int* restrict v__138835, const global int* restrict v__138836, int v__138837, int v__138838, global int* v__138858, global int* v__138840, local int* v__138853, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__138842; \n  int v__138844; \n  int v__136518; \n  /* Private Memory */\n  int v__138846_0;\n  \n  int v__138848_0;\n  \n  int v__138852_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11214 = v__138840; \n    local int v_w_id_138826; \n    if (get_local_id(0) == 0) {\n      v_w_id_138826 = atomic_inc(v_work_idx_11214); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_138826 < v_MHeight_2)){\n      for (int v_l_id_138827 = get_local_id(0); v_l_id_138827 < v_MWidthC_1; v_l_id_138827 = (v_l_id_138827 + get_local_size(0))) {\n        int v_tmp_138924 = -2147483648; \n        v__138842 = v_tmp_138924; \n        /* reduce_while_seq */\n        for (int v_i_138828 = 0; v_i_138828 < 8; v_i_138828 = (1 + v_i_138828)) {\n          v__138852_0 = check(v__138842, v__138833[(v_l_id_138827 + (8 * v_MWidthC_1 * v_w_id_138826) + (v_MWidthC_1 * v_i_138828))]); \n          if (v__138852_0) {\n          } else {\n            break;\n          }\n          int v_tmp_138925 = -2147483648; \n          v__138844 = v_tmp_138925; \n          int v_index_138926 = v__138833[(v_l_id_138827 + (8 * v_MWidthC_1 * v_w_id_138826) + (v_MWidthC_1 * v_i_138828))]; \n          if (v_index_138926 < 0) {\n            v__138846_0 = v__138844; \n          } else {\n            if (v_index_138926 >= v_VLength_3) {\n              v__138846_0 = v__138844; \n            } else {\n              v__138846_0 = v__138835[v_index_138926]; \n            }\n          }\n          v__138848_0 = int_min(v__138846_0, v__138834[(v_l_id_138827 + (8 * v_MWidthC_1 * v_w_id_138826) + (v_MWidthC_1 * v_i_138828))]); \n          v__138842 = int_max(v__138848_0, v__138842); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_138829 = 0; \n          v__138853[v_l_id_138827] = id(v__138842); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_138830 = get_local_id(0); \n        int v_tmp_138929 = -2147483648; \n        v__136518 = v_tmp_138929; \n        /* reduce_seq */\n        for (int v_i_138831 = 0; v_i_138831 < v_MWidthC_1; v_i_138831 = (1 + v_i_138831)) {\n          v__136518 = int_max(v__136518, v__138853[(v_i_138831 + (v_MWidthC_1 * v_l_id_138830))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_138832 = 0; \n          v__138858[v_w_id_138826] = doubleMinMax(v__136518, v__138837, v__138836[v_w_id_138826], v__138838); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_138826 = atomic_inc(v_work_idx_11214); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__138833",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__138834",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__138835",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__138836",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__138837",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__138838",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__138840",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__138858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__138853",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}