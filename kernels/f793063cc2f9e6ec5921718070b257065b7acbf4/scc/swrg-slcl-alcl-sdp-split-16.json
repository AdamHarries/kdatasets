{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__141057, const global int* restrict v__141058, const global int* restrict v__141059, const global int* restrict v__141060, int v__141061, int v__141062, global int* v__141079, global int* v__141069, local int* v__141074, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__141065; \n  int v__141070; \n  int v__136518; \n  /* Private Memory */\n  int v__141067_0;\n  \n  for (int v_wg_id_141049 = get_group_id(0); v_wg_id_141049 < v_MHeight_2; v_wg_id_141049 = (v_wg_id_141049 + get_num_groups(0))) {\n    for (int v_l_id_141050 = get_local_id(0); v_l_id_141050 < v_MWidthC_1; v_l_id_141050 = (v_l_id_141050 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_141051 = 0; v_i_141051 < 16; v_i_141051 = (1 + v_i_141051)) {\n        int v_tmp_141140 = -2147483648; \n        v__141065 = v_tmp_141140; \n        int v_index_141141 = v__141057[(v_l_id_141050 + (16 * v_MWidthC_1 * v_wg_id_141049) + (v_MWidthC_1 * v_i_141051))]; \n        if (v_index_141141 < 0) {\n          v__141067_0 = v__141065; \n        } else {\n          if (v_index_141141 >= v_VLength_3) {\n            v__141067_0 = v__141065; \n          } else {\n            v__141067_0 = v__141059[v_index_141141]; \n          }\n        }\n        v__141069[(15 + (16 * v_MWidthC_1 * v_wg_id_141049) + (-1 * v_i_141051) + (16 * v_l_id_141050))] = int_min(v__141067_0, v__141058[(v_l_id_141050 + (16 * v_MWidthC_1 * v_wg_id_141049) + (v_MWidthC_1 * v_i_141051))]); \n      }\n      /* end map_seq */\n      int v_tmp_141142 = -2147483648; \n      v__141070 = v_tmp_141142; \n      /* reduce_seq */\n      for (int v_i_141052 = 0; v_i_141052 < 16; v_i_141052 = (1 + v_i_141052)) {\n        v__141070 = int_max(v__141070, v__141069[(v_i_141052 + (16 * v_MWidthC_1 * v_wg_id_141049) + (16 * v_l_id_141050))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_141053 = 0; \n        v__141074[v_l_id_141050] = id(v__141070); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_11413; \n      v_work_idx_11413 = 0; \n      int v_l_id_141054 = atomic_inc(&(v_work_idx_11413)); \n      while((v_l_id_141054 < 1)){\n        int v_tmp_141145 = -2147483648; \n        v__136518 = v_tmp_141145; \n        /* reduce_seq */\n        for (int v_i_141055 = 0; v_i_141055 < v_MWidthC_1; v_i_141055 = (1 + v_i_141055)) {\n          v__136518 = int_max(v__136518, v__141074[(v_i_141055 + (v_MWidthC_1 * v_l_id_141054))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141056 = 0; \n          v__141079[v_wg_id_141049] = doubleMinMax(v__136518, v__141061, v__141060[v_wg_id_141049], v__141062); \n        }\n        /* end map_seq */\n        v_l_id_141054 = atomic_inc(&(v_work_idx_11413)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__141057",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141058",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141059",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__141060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__141061",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__141062",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__141069",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__141079",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__141074",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}