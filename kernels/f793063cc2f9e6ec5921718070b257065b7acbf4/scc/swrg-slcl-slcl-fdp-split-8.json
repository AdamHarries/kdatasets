{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__136607, const global int* restrict v__136608, const global int* restrict v__136609, const global int* restrict v__136610, int v__136611, int v__136612, global int* v__136629, local int* v__136624, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__136615; \n  int v__136617; \n  int v__136518; \n  /* Private Memory */\n  int v__136619_0;\n  \n  int v__136621_0;\n  \n  for (int v_wg_id_136600 = get_group_id(0); v_wg_id_136600 < v_MHeight_2; v_wg_id_136600 = (v_wg_id_136600 + get_num_groups(0))) {\n    for (int v_l_id_136601 = get_local_id(0); v_l_id_136601 < v_MWidthC_1; v_l_id_136601 = (v_l_id_136601 + get_local_size(0))) {\n      int v_tmp_136694 = -2147483648; \n      v__136615 = v_tmp_136694; \n      /* reduce_seq */\n      for (int v_i_136602 = 0; v_i_136602 < 8; v_i_136602 = (1 + v_i_136602)) {\n        int v_tmp_136695 = -2147483648; \n        v__136617 = v_tmp_136695; \n        int v_index_136696 = v__136607[(v_l_id_136601 + (8 * v_MWidthC_1 * v_wg_id_136600) + (v_MWidthC_1 * v_i_136602))]; \n        if (v_index_136696 < 0) {\n          v__136619_0 = v__136617; \n        } else {\n          if (v_index_136696 >= v_VLength_3) {\n            v__136619_0 = v__136617; \n          } else {\n            v__136619_0 = v__136609[v_index_136696]; \n          }\n        }\n        v__136621_0 = int_min(v__136619_0, v__136608[(v_l_id_136601 + (8 * v_MWidthC_1 * v_wg_id_136600) + (v_MWidthC_1 * v_i_136602))]); \n        v__136615 = int_max(v__136621_0, v__136615); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_136603 = 0; \n        v__136624[v_l_id_136601] = id(v__136615); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_136604 = get_local_id(0); \n      int v_tmp_136699 = -2147483648; \n      v__136518 = v_tmp_136699; \n      /* reduce_seq */\n      for (int v_i_136605 = 0; v_i_136605 < v_MWidthC_1; v_i_136605 = (1 + v_i_136605)) {\n        v__136518 = int_max(v__136518, v__136624[(v_i_136605 + (v_MWidthC_1 * v_l_id_136604))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_136606 = 0; \n        v__136629[v_wg_id_136600] = doubleMinMax(v__136518, v__136611, v__136610[v_wg_id_136600], v__136612); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__136607",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__136608",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__136609",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__136610",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__136611",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__136612",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__136629",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__136624",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}