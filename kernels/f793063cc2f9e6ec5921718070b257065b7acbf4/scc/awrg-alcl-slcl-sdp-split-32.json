{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__148154, const global int* restrict v__148155, const global int* restrict v__148156, const global int* restrict v__148157, int v__148158, int v__148159, global int* v__148177, global int* v__148167, global int* v__148161, local int* v__148172, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__148163; \n  int v__148168; \n  int v__136518; \n  /* Private Memory */\n  int v__148165_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12067 = v__148161; \n    local int v_w_id_148146; \n    if (get_local_id(0) == 0) {\n      v_w_id_148146 = atomic_inc(v_work_idx_12067); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_148146 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12065; \n        v_work_idx_12065 = 0; \n        int v_l_id_148147 = atomic_inc(&(v_work_idx_12065)); \n        while((v_l_id_148147 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_148148 = 0; v_i_148148 < 32; v_i_148148 = (1 + v_i_148148)) {\n            int v_tmp_148232 = -2147483648; \n            v__148163 = v_tmp_148232; \n            int v_index_148233 = v__148154[(v_l_id_148147 + (32 * v_MWidthC_1 * v_w_id_148146) + (v_MWidthC_1 * v_i_148148))]; \n            if (v_index_148233 < 0) {\n              v__148165_0 = v__148163; \n            } else {\n              if (v_index_148233 >= v_VLength_3) {\n                v__148165_0 = v__148163; \n              } else {\n                v__148165_0 = v__148156[v_index_148233]; \n              }\n            }\n            v__148167[(31 + (32 * v_MWidthC_1 * v_w_id_148146) + (-1 * v_i_148148) + (32 * v_l_id_148147))] = int_min(v__148165_0, v__148155[(v_l_id_148147 + (32 * v_MWidthC_1 * v_w_id_148146) + (v_MWidthC_1 * v_i_148148))]); \n          }\n          /* end map_seq */\n          int v_tmp_148234 = -2147483648; \n          v__148168 = v_tmp_148234; \n          /* reduce_seq */\n          for (int v_i_148149 = 0; v_i_148149 < 32; v_i_148149 = (1 + v_i_148149)) {\n            v__148168 = int_max(v__148168, v__148167[(v_i_148149 + (32 * v_MWidthC_1 * v_w_id_148146) + (32 * v_l_id_148147))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_148150 = 0; \n            v__148172[v_l_id_148147] = id(v__148168); \n          }\n          /* end map_seq */\n          v_l_id_148147 = atomic_inc(&(v_work_idx_12065)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_148151 = get_local_id(0); \n        int v_tmp_148237 = -2147483648; \n        v__136518 = v_tmp_148237; \n        /* reduce_seq */\n        for (int v_i_148152 = 0; v_i_148152 < v_MWidthC_1; v_i_148152 = (1 + v_i_148152)) {\n          v__136518 = int_max(v__136518, v__148172[(v_i_148152 + (v_MWidthC_1 * v_l_id_148151))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_148153 = 0; \n          v__148177[v_w_id_148146] = doubleMinMax(v__136518, v__148158, v__148157[v_w_id_148146], v__148159); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_148146 = atomic_inc(v_work_idx_12067); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__148154",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__148155",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__148156",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__148157",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__148158",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__148159",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__148167",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__148161",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__148177",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__148172",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}