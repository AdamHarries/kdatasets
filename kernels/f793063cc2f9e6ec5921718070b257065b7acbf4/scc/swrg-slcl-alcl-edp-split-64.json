{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__149725, const global int* restrict v__149726, const global int* restrict v__149727, const global int* restrict v__149728, int v__149729, int v__149730, global int* v__149749, local int* v__149744, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__149733; \n  int v__149735; \n  int v__136518; \n  /* Private Memory */\n  int v__149737_0;\n  \n  int v__149739_0;\n  \n  int v__149743_0;\n  \n  for (int v_wg_id_149718 = get_group_id(0); v_wg_id_149718 < v_MHeight_2; v_wg_id_149718 = (v_wg_id_149718 + get_num_groups(0))) {\n    for (int v_l_id_149719 = get_local_id(0); v_l_id_149719 < v_MWidthC_1; v_l_id_149719 = (v_l_id_149719 + get_local_size(0))) {\n      int v_tmp_149813 = -2147483648; \n      v__149733 = v_tmp_149813; \n      /* reduce_while_seq */\n      for (int v_i_149720 = 0; v_i_149720 < 64; v_i_149720 = (1 + v_i_149720)) {\n        v__149743_0 = check(v__149733, v__149725[(v_l_id_149719 + (64 * v_MWidthC_1 * v_wg_id_149718) + (v_MWidthC_1 * v_i_149720))]); \n        if (v__149743_0) {\n        } else {\n          break;\n        }\n        int v_tmp_149814 = -2147483648; \n        v__149735 = v_tmp_149814; \n        int v_index_149815 = v__149725[(v_l_id_149719 + (64 * v_MWidthC_1 * v_wg_id_149718) + (v_MWidthC_1 * v_i_149720))]; \n        if (v_index_149815 < 0) {\n          v__149737_0 = v__149735; \n        } else {\n          if (v_index_149815 >= v_VLength_3) {\n            v__149737_0 = v__149735; \n          } else {\n            v__149737_0 = v__149727[v_index_149815]; \n          }\n        }\n        v__149739_0 = int_min(v__149737_0, v__149726[(v_l_id_149719 + (64 * v_MWidthC_1 * v_wg_id_149718) + (v_MWidthC_1 * v_i_149720))]); \n        v__149733 = int_max(v__149739_0, v__149733); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_149721 = 0; \n        v__149744[v_l_id_149719] = id(v__149733); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_12200; \n      v_work_idx_12200 = 0; \n      int v_l_id_149722 = atomic_inc(&(v_work_idx_12200)); \n      while((v_l_id_149722 < 1)){\n        int v_tmp_149818 = -2147483648; \n        v__136518 = v_tmp_149818; \n        /* reduce_seq */\n        for (int v_i_149723 = 0; v_i_149723 < v_MWidthC_1; v_i_149723 = (1 + v_i_149723)) {\n          v__136518 = int_max(v__136518, v__149744[(v_i_149723 + (v_MWidthC_1 * v_l_id_149722))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_149724 = 0; \n          v__149749[v_wg_id_149718] = doubleMinMax(v__136518, v__149729, v__149728[v_wg_id_149718], v__149730); \n        }\n        /* end map_seq */\n        v_l_id_149722 = atomic_inc(&(v_work_idx_12200)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__149725",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149726",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149727",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__149728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__149729",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__149730",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__149749",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__149744",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}