{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__159888, const global int* restrict v__159889, const global int* restrict v__159890, const global int* restrict v__159891, int v__159892, int v__159893, global int* v__159911, global int* v__159895, local int* v__159906, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__159897; \n  int v__159899; \n  int v__136518; \n  /* Private Memory */\n  int v__159901_0;\n  \n  int v__159903_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13125 = v__159895; \n    local int v_w_id_159881; \n    if (get_local_id(0) == 0) {\n      v_w_id_159881 = atomic_inc(v_work_idx_13125); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_159881 < v_MHeight_2)){\n      for (int v_l_id_159882 = get_local_id(0); v_l_id_159882 < v_MWidthC_1; v_l_id_159882 = (v_l_id_159882 + get_local_size(0))) {\n        int v_tmp_159974 = -2147483648; \n        v__159897 = v_tmp_159974; \n        /* reduce_seq */\n        for (int v_i_159883 = 0; v_i_159883 < 256; v_i_159883 = (1 + v_i_159883)) {\n          int v_tmp_159975 = -2147483648; \n          v__159899 = v_tmp_159975; \n          int v_index_159976 = v__159888[(v_l_id_159882 + (256 * v_MWidthC_1 * v_w_id_159881) + (v_MWidthC_1 * v_i_159883))]; \n          if (v_index_159976 < 0) {\n            v__159901_0 = v__159899; \n          } else {\n            if (v_index_159976 >= v_VLength_3) {\n              v__159901_0 = v__159899; \n            } else {\n              v__159901_0 = v__159890[v_index_159976]; \n            }\n          }\n          v__159903_0 = int_min(v__159901_0, v__159889[(v_l_id_159882 + (256 * v_MWidthC_1 * v_w_id_159881) + (v_MWidthC_1 * v_i_159883))]); \n          v__159897 = int_max(v__159903_0, v__159897); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159884 = 0; \n          v__159906[v_l_id_159882] = id(v__159897); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_159885 = get_local_id(0); \n        int v_tmp_159979 = -2147483648; \n        v__136518 = v_tmp_159979; \n        /* reduce_seq */\n        for (int v_i_159886 = 0; v_i_159886 < v_MWidthC_1; v_i_159886 = (1 + v_i_159886)) {\n          v__136518 = int_max(v__136518, v__159906[(v_i_159886 + (v_MWidthC_1 * v_l_id_159885))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159887 = 0; \n          v__159911[v_w_id_159881] = doubleMinMax(v__136518, v__159892, v__159891[v_w_id_159881], v__159893); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_159881 = atomic_inc(v_work_idx_13125); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__159888",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159889",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159890",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__159891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159892",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__159893",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__159895",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__159911",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__159906",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}