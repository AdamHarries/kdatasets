{
  "name" : "swrg-alcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__141730, const global int* restrict v__141731, const global int* restrict v__141732, const global int* restrict v__141733, int v__141734, int v__141735, global int* v__141749, global int* v__141748, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__141737; \n  int v__141740; \n  /* Private Memory */\n  int v__141742_0;\n  \n  int v__141744_0;\n  \n  for (int v_wg_id_141725 = get_group_id(0); v_wg_id_141725 < ((v_MHeight_2)/(16)); v_wg_id_141725 = (v_wg_id_141725 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11473; \n      v_work_idx_11473 = 0; \n      int v_l_id_141726 = atomic_inc(&(v_work_idx_11473)); \n      while((v_l_id_141726 < 16)){\n        int v_tmp_141782 = -2147483648; \n        v__141737 = v_tmp_141782; \n        /* reduce_seq */\n        int v_stop_141783 = min(v__141730[(1 + (v__141730[(v_l_id_141726 + (16 * v_wg_id_141725))] / 4))], v__141731[(1 + (v__141731[(v_l_id_141726 + (16 * v_wg_id_141725))] / 4))]); \n        for (int v_i_141727 = 0; v_i_141727 < v_stop_141783; v_i_141727 = (1 + v_i_141727)) {\n          int v_tmp_141788 = -2147483648; \n          v__141740 = v_tmp_141788; \n          int v_index_141790 = v__141730[(2 + v_i_141727 + (v__141730[(v_l_id_141726 + (16 * v_wg_id_141725))] / 4))]; \n          if (v_index_141790 < 0) {\n            v__141742_0 = v__141740; \n          } else {\n            if (v_index_141790 >= v_MWidthC_1) {\n              v__141742_0 = v__141740; \n            } else {\n              v__141742_0 = v__141732[v_index_141790]; \n            }\n          }\n          v__141744_0 = int_min(v__141731[(2 + v_i_141727 + (v__141731[(v_l_id_141726 + (16 * v_wg_id_141725))] / 4))], v__141742_0); \n          v__141737 = int_max(v__141737, v__141744_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141728 = 0; \n          v__141748[(v_l_id_141726 + (16 * v_wg_id_141725))] = doubleMinMax(v__141737, v__141734, v__141733[(v_l_id_141726 + (16 * v_wg_id_141725))], v__141735); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141729 = 0; \n          v__141749[(v_l_id_141726 + (16 * v_wg_id_141725))] = id(v__141748[(v_l_id_141726 + (16 * v_wg_id_141725))]); \n        }\n        /* end map_seq */\n        v_l_id_141726 = atomic_inc(&(v_work_idx_11473)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__141730",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__141731",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__141732",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__141733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__141734",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__141735",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__141748",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__141749",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}