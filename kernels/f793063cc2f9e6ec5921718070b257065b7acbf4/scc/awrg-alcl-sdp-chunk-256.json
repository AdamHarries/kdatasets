{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__160410, const global int* restrict v__160411, const global int* restrict v__160412, const global int* restrict v__160413, int v__160414, int v__160415, global int* v__160429, global int* v__160423, global int* v__160417, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__160419; \n  int v__160424; \n  /* Private Memory */\n  int v__160421_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13173 = v__160417; \n    local int v_w_id_160405; \n    if (get_local_id(0) == 0) {\n      v_w_id_160405 = atomic_inc(v_work_idx_13173); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_160405 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_13171; \n        v_work_idx_13171 = 0; \n        int v_l_id_160406 = atomic_inc(&(v_work_idx_13171)); \n        while((v_l_id_160406 < 256)){\n          /* map_seq */\n          for (int v_i_160407 = 0; v_i_160407 < v_MWidthC_1; v_i_160407 = (1 + v_i_160407)) {\n            int v_tmp_160468 = -2147483648; \n            v__160419 = v_tmp_160468; \n            int v_index_160469 = v__160410[(v_i_160407 + (256 * v_MWidthC_1 * v_w_id_160405) + (v_MWidthC_1 * v_l_id_160406))]; \n            if (v_index_160469 < 0) {\n              v__160421_0 = v__160419; \n            } else {\n              if (v_index_160469 >= v_VLength_3) {\n                v__160421_0 = v__160419; \n              } else {\n                v__160421_0 = v__160412[v_index_160469]; \n              }\n            }\n            v__160423[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_160405) + (-1 * v_i_160407) + (v_MWidthC_1 * v_l_id_160406))] = int_min(v__160421_0, v__160411[(v_i_160407 + (256 * v_MWidthC_1 * v_w_id_160405) + (v_MWidthC_1 * v_l_id_160406))]); \n          }\n          /* end map_seq */\n          int v_tmp_160470 = -2147483648; \n          v__160424 = v_tmp_160470; \n          /* reduce_seq */\n          for (int v_i_160408 = 0; v_i_160408 < v_MWidthC_1; v_i_160408 = (1 + v_i_160408)) {\n            v__160424 = int_max(v__160424, v__160423[(v_i_160408 + (256 * v_MWidthC_1 * v_w_id_160405) + (v_MWidthC_1 * v_l_id_160406))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_160409 = 0; \n            v__160429[(v_l_id_160406 + (256 * v_w_id_160405))] = doubleMinMax(v__160424, v__160414, v__160413[(v_l_id_160406 + (256 * v_w_id_160405))], v__160415); \n          }\n          /* end map_seq */\n          v_l_id_160406 = atomic_inc(&(v_work_idx_13171)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_160405 = atomic_inc(v_work_idx_13173); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__160410",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160411",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160412",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__160413",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__160414",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__160415",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__160423",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160417",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__160429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}