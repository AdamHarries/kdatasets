{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__162966, const global int* restrict v__162967, const global int* restrict v__162968, const global int* restrict v__162969, int v__162970, int v__162971, global int* v__162988, global int* v__162978, local int* v__162983, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__162974; \n  int v__162979; \n  int v__136518; \n  /* Private Memory */\n  int v__162976_0;\n  \n  for (int v_wg_id_162958 = get_group_id(0); v_wg_id_162958 < v_MHeight_2; v_wg_id_162958 = (v_wg_id_162958 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_13403; \n      v_work_idx_13403 = 0; \n      int v_l_id_162959 = atomic_inc(&(v_work_idx_13403)); \n      while((v_l_id_162959 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_162960 = 0; v_i_162960 < 512; v_i_162960 = (1 + v_i_162960)) {\n          int v_tmp_163045 = -2147483648; \n          v__162974 = v_tmp_163045; \n          int v_index_163046 = v__162966[(v_l_id_162959 + (512 * v_MWidthC_1 * v_wg_id_162958) + (v_MWidthC_1 * v_i_162960))]; \n          if (v_index_163046 < 0) {\n            v__162976_0 = v__162974; \n          } else {\n            if (v_index_163046 >= v_VLength_3) {\n              v__162976_0 = v__162974; \n            } else {\n              v__162976_0 = v__162968[v_index_163046]; \n            }\n          }\n          v__162978[(511 + (512 * v_MWidthC_1 * v_wg_id_162958) + (-1 * v_i_162960) + (512 * v_l_id_162959))] = int_min(v__162976_0, v__162967[(v_l_id_162959 + (512 * v_MWidthC_1 * v_wg_id_162958) + (v_MWidthC_1 * v_i_162960))]); \n        }\n        /* end map_seq */\n        int v_tmp_163047 = -2147483648; \n        v__162979 = v_tmp_163047; \n        /* reduce_seq */\n        for (int v_i_162961 = 0; v_i_162961 < 512; v_i_162961 = (1 + v_i_162961)) {\n          v__162979 = int_max(v__162979, v__162978[(v_i_162961 + (512 * v_MWidthC_1 * v_wg_id_162958) + (512 * v_l_id_162959))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_162962 = 0; \n          v__162983[v_l_id_162959] = id(v__162979); \n        }\n        /* end map_seq */\n        v_l_id_162959 = atomic_inc(&(v_work_idx_13403)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_162963 = get_local_id(0); \n      int v_tmp_163050 = -2147483648; \n      v__136518 = v_tmp_163050; \n      /* reduce_seq */\n      for (int v_i_162964 = 0; v_i_162964 < v_MWidthC_1; v_i_162964 = (1 + v_i_162964)) {\n        v__136518 = int_max(v__136518, v__162983[(v_i_162964 + (v_MWidthC_1 * v_l_id_162963))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_162965 = 0; \n        v__162988[v_wg_id_162958] = doubleMinMax(v__136518, v__162970, v__162969[v_wg_id_162958], v__162971); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__162966",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__162967",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__162968",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__162969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__162970",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__162971",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__162978",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__162988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__162983",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}