{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__147509, const global int* restrict v__147510, const global int* restrict v__147511, const global int* restrict v__147512, int v__147513, int v__147514, global int* v__147532, global int* v__147516, local int* v__147527, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__147518; \n  int v__147520; \n  int v__136518; \n  /* Private Memory */\n  int v__147522_0;\n  \n  int v__147524_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12003 = v__147516; \n    local int v_w_id_147502; \n    if (get_local_id(0) == 0) {\n      v_w_id_147502 = atomic_inc(v_work_idx_12003); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_147502 < v_MHeight_2)){\n      for (int v_l_id_147503 = get_local_id(0); v_l_id_147503 < v_MWidthC_1; v_l_id_147503 = (v_l_id_147503 + get_local_size(0))) {\n        int v_tmp_147591 = -2147483648; \n        v__147518 = v_tmp_147591; \n        /* reduce_seq */\n        for (int v_i_147504 = 0; v_i_147504 < 32; v_i_147504 = (1 + v_i_147504)) {\n          int v_tmp_147592 = -2147483648; \n          v__147520 = v_tmp_147592; \n          int v_index_147593 = v__147509[(v_l_id_147503 + (32 * v_MWidthC_1 * v_w_id_147502) + (v_MWidthC_1 * v_i_147504))]; \n          if (v_index_147593 < 0) {\n            v__147522_0 = v__147520; \n          } else {\n            if (v_index_147593 >= v_VLength_3) {\n              v__147522_0 = v__147520; \n            } else {\n              v__147522_0 = v__147511[v_index_147593]; \n            }\n          }\n          v__147524_0 = int_min(v__147522_0, v__147510[(v_l_id_147503 + (32 * v_MWidthC_1 * v_w_id_147502) + (v_MWidthC_1 * v_i_147504))]); \n          v__147518 = int_max(v__147524_0, v__147518); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_147505 = 0; \n          v__147527[v_l_id_147503] = id(v__147518); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_11997; \n        v_work_idx_11997 = 0; \n        int v_l_id_147506 = atomic_inc(&(v_work_idx_11997)); \n        while((v_l_id_147506 < 1)){\n          int v_tmp_147596 = -2147483648; \n          v__136518 = v_tmp_147596; \n          /* reduce_seq */\n          for (int v_i_147507 = 0; v_i_147507 < v_MWidthC_1; v_i_147507 = (1 + v_i_147507)) {\n            v__136518 = int_max(v__136518, v__147527[(v_i_147507 + (v_MWidthC_1 * v_l_id_147506))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_147508 = 0; \n            v__147532[v_w_id_147502] = doubleMinMax(v__136518, v__147513, v__147512[v_w_id_147502], v__147514); \n          }\n          /* end map_seq */\n          v_l_id_147506 = atomic_inc(&(v_work_idx_11997)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_147502 = atomic_inc(v_work_idx_12003); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__147509",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147510",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147511",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__147512",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__147513",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__147514",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__147516",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__147532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__147527",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}