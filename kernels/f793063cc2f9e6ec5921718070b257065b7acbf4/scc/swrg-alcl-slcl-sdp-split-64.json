{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__150270, const global int* restrict v__150271, const global int* restrict v__150272, const global int* restrict v__150273, int v__150274, int v__150275, global int* v__150292, global int* v__150282, local int* v__150287, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__150278; \n  int v__150283; \n  int v__136518; \n  /* Private Memory */\n  int v__150280_0;\n  \n  for (int v_wg_id_150262 = get_group_id(0); v_wg_id_150262 < v_MHeight_2; v_wg_id_150262 = (v_wg_id_150262 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_12251; \n      v_work_idx_12251 = 0; \n      int v_l_id_150263 = atomic_inc(&(v_work_idx_12251)); \n      while((v_l_id_150263 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_150264 = 0; v_i_150264 < 64; v_i_150264 = (1 + v_i_150264)) {\n          int v_tmp_150349 = -2147483648; \n          v__150278 = v_tmp_150349; \n          int v_index_150350 = v__150270[(v_l_id_150263 + (64 * v_MWidthC_1 * v_wg_id_150262) + (v_MWidthC_1 * v_i_150264))]; \n          if (v_index_150350 < 0) {\n            v__150280_0 = v__150278; \n          } else {\n            if (v_index_150350 >= v_VLength_3) {\n              v__150280_0 = v__150278; \n            } else {\n              v__150280_0 = v__150272[v_index_150350]; \n            }\n          }\n          v__150282[(63 + (64 * v_MWidthC_1 * v_wg_id_150262) + (-1 * v_i_150264) + (64 * v_l_id_150263))] = int_min(v__150280_0, v__150271[(v_l_id_150263 + (64 * v_MWidthC_1 * v_wg_id_150262) + (v_MWidthC_1 * v_i_150264))]); \n        }\n        /* end map_seq */\n        int v_tmp_150351 = -2147483648; \n        v__150283 = v_tmp_150351; \n        /* reduce_seq */\n        for (int v_i_150265 = 0; v_i_150265 < 64; v_i_150265 = (1 + v_i_150265)) {\n          v__150283 = int_max(v__150283, v__150282[(v_i_150265 + (64 * v_MWidthC_1 * v_wg_id_150262) + (64 * v_l_id_150263))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_150266 = 0; \n          v__150287[v_l_id_150263] = id(v__150283); \n        }\n        /* end map_seq */\n        v_l_id_150263 = atomic_inc(&(v_work_idx_12251)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_150267 = get_local_id(0); \n      int v_tmp_150354 = -2147483648; \n      v__136518 = v_tmp_150354; \n      /* reduce_seq */\n      for (int v_i_150268 = 0; v_i_150268 < v_MWidthC_1; v_i_150268 = (1 + v_i_150268)) {\n        v__136518 = int_max(v__136518, v__150287[(v_i_150268 + (v_MWidthC_1 * v_l_id_150267))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_150269 = 0; \n        v__150292[v_wg_id_150262] = doubleMinMax(v__136518, v__150274, v__150273[v_wg_id_150262], v__150275); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__150270",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__150271",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__150272",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__150273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__150274",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__150275",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__150282",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__150292",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__150287",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}