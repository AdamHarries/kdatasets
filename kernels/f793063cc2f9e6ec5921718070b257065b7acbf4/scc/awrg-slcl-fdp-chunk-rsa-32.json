{
  "name" : "awrg-slcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__146930, const global int* restrict v__146931, const global int* restrict v__146932, const global int* restrict v__146933, int v__146934, int v__146935, global int* v__146950, global int* v__146949, global int* v__146937, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__146938; \n  int v__146941; \n  /* Private Memory */\n  int v__146943_0;\n  \n  int v__146945_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11948 = v__146937; \n    local int v_w_id_146925; \n    if (get_local_id(0) == 0) {\n      v_w_id_146925 = atomic_inc(v_work_idx_11948); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_146925 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_146926 = get_local_id(0); v_l_id_146926 < 32; v_l_id_146926 = (v_l_id_146926 + get_local_size(0))) {\n        int v_tmp_146986 = -2147483648; \n        v__146938 = v_tmp_146986; \n        /* reduce_seq */\n        int v_stop_146987 = min(v__146930[(1 + (v__146930[(v_l_id_146926 + (32 * v_w_id_146925))] / 4))], v__146931[(1 + (v__146931[(v_l_id_146926 + (32 * v_w_id_146925))] / 4))]); \n        for (int v_i_146927 = 0; v_i_146927 < v_stop_146987; v_i_146927 = (1 + v_i_146927)) {\n          int v_tmp_146992 = -2147483648; \n          v__146941 = v_tmp_146992; \n          int v_index_146994 = v__146930[(2 + v_i_146927 + (v__146930[(v_l_id_146926 + (32 * v_w_id_146925))] / 4))]; \n          if (v_index_146994 < 0) {\n            v__146943_0 = v__146941; \n          } else {\n            if (v_index_146994 >= v_MWidthC_1) {\n              v__146943_0 = v__146941; \n            } else {\n              v__146943_0 = v__146932[v_index_146994]; \n            }\n          }\n          v__146945_0 = int_min(v__146931[(2 + v_i_146927 + (v__146931[(v_l_id_146926 + (32 * v_w_id_146925))] / 4))], v__146943_0); \n          v__146938 = int_max(v__146938, v__146945_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_146928 = 0; \n          v__146949[(v_l_id_146926 + (32 * v_w_id_146925))] = doubleMinMax(v__146938, v__146934, v__146933[(v_l_id_146926 + (32 * v_w_id_146925))], v__146935); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_146929 = 0; \n          v__146950[(v_l_id_146926 + (32 * v_w_id_146925))] = id(v__146949[(v_l_id_146926 + (32 * v_w_id_146925))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_146925 = atomic_inc(v_work_idx_11948); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__146930",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__146931",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__146932",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__146933",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__146934",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__146935",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__146949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__146937",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__146950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}