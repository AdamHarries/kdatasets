{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__164437, const global int* restrict v__164438, const global int* restrict v__164439, const global int* restrict v__164440, int v__164441, int v__164442, global int* v__164460, global int* v__164444, local int* v__164455, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__164446; \n  int v__164448; \n  int v__136518; \n  /* Private Memory */\n  int v__164450_0;\n  \n  int v__164452_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13539 = v__164444; \n    local int v_w_id_164430; \n    if (get_local_id(0) == 0) {\n      v_w_id_164430 = atomic_inc(v_work_idx_13539); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_164430 < v_MHeight_2)){\n      for (int v_l_id_164431 = get_local_id(0); v_l_id_164431 < v_MWidthC_1; v_l_id_164431 = (v_l_id_164431 + get_local_size(0))) {\n        int v_tmp_164519 = -2147483648; \n        v__164446 = v_tmp_164519; \n        /* reduce_seq */\n        for (int v_i_164432 = 0; v_i_164432 < 512; v_i_164432 = (1 + v_i_164432)) {\n          int v_tmp_164520 = -2147483648; \n          v__164448 = v_tmp_164520; \n          int v_index_164521 = v__164437[(v_l_id_164431 + (512 * v_MWidthC_1 * v_w_id_164430) + (v_MWidthC_1 * v_i_164432))]; \n          if (v_index_164521 < 0) {\n            v__164450_0 = v__164448; \n          } else {\n            if (v_index_164521 >= v_VLength_3) {\n              v__164450_0 = v__164448; \n            } else {\n              v__164450_0 = v__164439[v_index_164521]; \n            }\n          }\n          v__164452_0 = int_min(v__164450_0, v__164438[(v_l_id_164431 + (512 * v_MWidthC_1 * v_w_id_164430) + (v_MWidthC_1 * v_i_164432))]); \n          v__164446 = int_max(v__164452_0, v__164446); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164433 = 0; \n          v__164455[v_l_id_164431] = id(v__164446); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_13533; \n        v_work_idx_13533 = 0; \n        int v_l_id_164434 = atomic_inc(&(v_work_idx_13533)); \n        while((v_l_id_164434 < 1)){\n          int v_tmp_164524 = -2147483648; \n          v__136518 = v_tmp_164524; \n          /* reduce_seq */\n          for (int v_i_164435 = 0; v_i_164435 < v_MWidthC_1; v_i_164435 = (1 + v_i_164435)) {\n            v__136518 = int_max(v__136518, v__164455[(v_i_164435 + (v_MWidthC_1 * v_l_id_164434))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_164436 = 0; \n            v__164460[v_w_id_164430] = doubleMinMax(v__136518, v__164441, v__164440[v_w_id_164430], v__164442); \n          }\n          /* end map_seq */\n          v_l_id_164434 = atomic_inc(&(v_work_idx_13533)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_164430 = atomic_inc(v_work_idx_13539); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__164437",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164438",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164439",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__164440",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__164441",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__164442",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__164444",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__164460",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__164455",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}