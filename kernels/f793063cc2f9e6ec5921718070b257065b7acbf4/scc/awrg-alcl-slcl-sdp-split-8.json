{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__139690, const global int* restrict v__139691, const global int* restrict v__139692, const global int* restrict v__139693, int v__139694, int v__139695, global int* v__139713, global int* v__139703, global int* v__139697, local int* v__139708, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__139699; \n  int v__139704; \n  int v__136518; \n  /* Private Memory */\n  int v__139701_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11299 = v__139697; \n    local int v_w_id_139682; \n    if (get_local_id(0) == 0) {\n      v_w_id_139682 = atomic_inc(v_work_idx_11299); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_139682 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11297; \n        v_work_idx_11297 = 0; \n        int v_l_id_139683 = atomic_inc(&(v_work_idx_11297)); \n        while((v_l_id_139683 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_139684 = 0; v_i_139684 < 8; v_i_139684 = (1 + v_i_139684)) {\n            int v_tmp_139768 = -2147483648; \n            v__139699 = v_tmp_139768; \n            int v_index_139769 = v__139690[(v_l_id_139683 + (8 * v_MWidthC_1 * v_w_id_139682) + (v_MWidthC_1 * v_i_139684))]; \n            if (v_index_139769 < 0) {\n              v__139701_0 = v__139699; \n            } else {\n              if (v_index_139769 >= v_VLength_3) {\n                v__139701_0 = v__139699; \n              } else {\n                v__139701_0 = v__139692[v_index_139769]; \n              }\n            }\n            v__139703[(7 + (8 * v_MWidthC_1 * v_w_id_139682) + (-1 * v_i_139684) + (8 * v_l_id_139683))] = int_min(v__139701_0, v__139691[(v_l_id_139683 + (8 * v_MWidthC_1 * v_w_id_139682) + (v_MWidthC_1 * v_i_139684))]); \n          }\n          /* end map_seq */\n          int v_tmp_139770 = -2147483648; \n          v__139704 = v_tmp_139770; \n          /* reduce_seq */\n          for (int v_i_139685 = 0; v_i_139685 < 8; v_i_139685 = (1 + v_i_139685)) {\n            v__139704 = int_max(v__139704, v__139703[(v_i_139685 + (8 * v_MWidthC_1 * v_w_id_139682) + (8 * v_l_id_139683))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139686 = 0; \n            v__139708[v_l_id_139683] = id(v__139704); \n          }\n          /* end map_seq */\n          v_l_id_139683 = atomic_inc(&(v_work_idx_11297)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_139687 = get_local_id(0); \n        int v_tmp_139773 = -2147483648; \n        v__136518 = v_tmp_139773; \n        /* reduce_seq */\n        for (int v_i_139688 = 0; v_i_139688 < v_MWidthC_1; v_i_139688 = (1 + v_i_139688)) {\n          v__136518 = int_max(v__136518, v__139708[(v_i_139688 + (v_MWidthC_1 * v_l_id_139687))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_139689 = 0; \n          v__139713[v_w_id_139682] = doubleMinMax(v__136518, v__139694, v__139693[v_w_id_139682], v__139695); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_139682 = atomic_inc(v_work_idx_11299); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__139690",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__139691",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__139692",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__139693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139694",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__139695",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__139703",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__139697",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__139713",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__139708",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}