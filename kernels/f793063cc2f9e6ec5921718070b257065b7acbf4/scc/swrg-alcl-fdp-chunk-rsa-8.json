{
  "name" : "swrg-alcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__137425, const global int* restrict v__137426, const global int* restrict v__137427, const global int* restrict v__137428, int v__137429, int v__137430, global int* v__137444, global int* v__137443, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__137432; \n  int v__137435; \n  /* Private Memory */\n  int v__137437_0;\n  \n  int v__137439_0;\n  \n  for (int v_wg_id_137420 = get_group_id(0); v_wg_id_137420 < ((v_MHeight_2)/(8)); v_wg_id_137420 = (v_wg_id_137420 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11083; \n      v_work_idx_11083 = 0; \n      int v_l_id_137421 = atomic_inc(&(v_work_idx_11083)); \n      while((v_l_id_137421 < 8)){\n        int v_tmp_137477 = -2147483648; \n        v__137432 = v_tmp_137477; \n        /* reduce_seq */\n        int v_stop_137478 = min(v__137425[(1 + (v__137425[(v_l_id_137421 + (8 * v_wg_id_137420))] / 4))], v__137426[(1 + (v__137426[(v_l_id_137421 + (8 * v_wg_id_137420))] / 4))]); \n        for (int v_i_137422 = 0; v_i_137422 < v_stop_137478; v_i_137422 = (1 + v_i_137422)) {\n          int v_tmp_137483 = -2147483648; \n          v__137435 = v_tmp_137483; \n          int v_index_137485 = v__137425[(2 + v_i_137422 + (v__137425[(v_l_id_137421 + (8 * v_wg_id_137420))] / 4))]; \n          if (v_index_137485 < 0) {\n            v__137437_0 = v__137435; \n          } else {\n            if (v_index_137485 >= v_MWidthC_1) {\n              v__137437_0 = v__137435; \n            } else {\n              v__137437_0 = v__137427[v_index_137485]; \n            }\n          }\n          v__137439_0 = int_min(v__137426[(2 + v_i_137422 + (v__137426[(v_l_id_137421 + (8 * v_wg_id_137420))] / 4))], v__137437_0); \n          v__137432 = int_max(v__137432, v__137439_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_137423 = 0; \n          v__137443[(v_l_id_137421 + (8 * v_wg_id_137420))] = doubleMinMax(v__137432, v__137429, v__137428[(v_l_id_137421 + (8 * v_wg_id_137420))], v__137430); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_137424 = 0; \n          v__137444[(v_l_id_137421 + (8 * v_wg_id_137420))] = id(v__137443[(v_l_id_137421 + (8 * v_wg_id_137420))]); \n        }\n        /* end map_seq */\n        v_l_id_137421 = atomic_inc(&(v_work_idx_11083)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__137425",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__137426",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__137427",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__137428",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__137429",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__137430",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__137443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__137444",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}