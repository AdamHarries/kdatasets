{
  "name" : "swrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__149970, const global int* restrict v__149971, const global int* restrict v__149972, const global int* restrict v__149973, int v__149974, int v__149975, global int* v__149990, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__149977; \n  int v__149980; \n  /* Private Memory */\n  int v__149982_0;\n  \n  int v__149984_0;\n  \n  int v__149988_0;\n  \n  for (int v_wg_id_149966 = get_group_id(0); v_wg_id_149966 < ((v_MHeight_2)/(64)); v_wg_id_149966 = (v_wg_id_149966 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_12223; \n      v_work_idx_12223 = 0; \n      int v_l_id_149967 = atomic_inc(&(v_work_idx_12223)); \n      while((v_l_id_149967 < 64)){\n        int v_tmp_150034 = -2147483648; \n        v__149977 = v_tmp_150034; \n        /* reduce_while_seq */\n        for (int v_i_149968 = 0; v_i_149968 < v_MWidthC_1; v_i_149968 = (1 + v_i_149968)) {\n          v__149988_0 = check(v__149977, v__149970[(v_i_149968 + (64 * v_MWidthC_1 * v_wg_id_149966) + (v_MWidthC_1 * v_l_id_149967))]); \n          if (v__149988_0) {\n          } else {\n            break;\n          }\n          int v_tmp_150035 = -2147483648; \n          v__149980 = v_tmp_150035; \n          int v_index_150036 = v__149970[(v_i_149968 + (64 * v_MWidthC_1 * v_wg_id_149966) + (v_MWidthC_1 * v_l_id_149967))]; \n          if (v_index_150036 < 0) {\n            v__149982_0 = v__149980; \n          } else {\n            if (v_index_150036 >= v_VLength_3) {\n              v__149982_0 = v__149980; \n            } else {\n              v__149982_0 = v__149972[v_index_150036]; \n            }\n          }\n          v__149984_0 = int_min(v__149982_0, v__149971[(v_i_149968 + (64 * v_MWidthC_1 * v_wg_id_149966) + (v_MWidthC_1 * v_l_id_149967))]); \n          v__149977 = int_max(v__149984_0, v__149977); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_149969 = 0; \n          v__149990[(v_l_id_149967 + (64 * v_wg_id_149966))] = doubleMinMax(v__149977, v__149974, v__149973[(v_l_id_149967 + (64 * v_wg_id_149966))], v__149975); \n        }\n        /* end map_seq */\n        v_l_id_149967 = atomic_inc(&(v_work_idx_12223)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__149970",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149971",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__149972",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__149973",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__149974",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__149975",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__149990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}