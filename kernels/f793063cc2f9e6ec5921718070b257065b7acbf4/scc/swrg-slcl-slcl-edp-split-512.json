{
  "name" : "swrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__162105, const global int* restrict v__162106, const global int* restrict v__162107, const global int* restrict v__162108, int v__162109, int v__162110, global int* v__162129, local int* v__162124, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__162113; \n  int v__162115; \n  int v__136518; \n  /* Private Memory */\n  int v__162117_0;\n  \n  int v__162119_0;\n  \n  int v__162123_0;\n  \n  for (int v_wg_id_162098 = get_group_id(0); v_wg_id_162098 < v_MHeight_2; v_wg_id_162098 = (v_wg_id_162098 + get_num_groups(0))) {\n    for (int v_l_id_162099 = get_local_id(0); v_l_id_162099 < v_MWidthC_1; v_l_id_162099 = (v_l_id_162099 + get_local_size(0))) {\n      int v_tmp_162197 = -2147483648; \n      v__162113 = v_tmp_162197; \n      /* reduce_while_seq */\n      for (int v_i_162100 = 0; v_i_162100 < 512; v_i_162100 = (1 + v_i_162100)) {\n        v__162123_0 = check(v__162113, v__162105[(v_l_id_162099 + (512 * v_MWidthC_1 * v_wg_id_162098) + (v_MWidthC_1 * v_i_162100))]); \n        if (v__162123_0) {\n        } else {\n          break;\n        }\n        int v_tmp_162198 = -2147483648; \n        v__162115 = v_tmp_162198; \n        int v_index_162199 = v__162105[(v_l_id_162099 + (512 * v_MWidthC_1 * v_wg_id_162098) + (v_MWidthC_1 * v_i_162100))]; \n        if (v_index_162199 < 0) {\n          v__162117_0 = v__162115; \n        } else {\n          if (v_index_162199 >= v_VLength_3) {\n            v__162117_0 = v__162115; \n          } else {\n            v__162117_0 = v__162107[v_index_162199]; \n          }\n        }\n        v__162119_0 = int_min(v__162117_0, v__162106[(v_l_id_162099 + (512 * v_MWidthC_1 * v_wg_id_162098) + (v_MWidthC_1 * v_i_162100))]); \n        v__162113 = int_max(v__162119_0, v__162113); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_162101 = 0; \n        v__162124[v_l_id_162099] = id(v__162113); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_162102 = get_local_id(0); \n      int v_tmp_162202 = -2147483648; \n      v__136518 = v_tmp_162202; \n      /* reduce_seq */\n      for (int v_i_162103 = 0; v_i_162103 < v_MWidthC_1; v_i_162103 = (1 + v_i_162103)) {\n        v__136518 = int_max(v__136518, v__162124[(v_i_162103 + (v_MWidthC_1 * v_l_id_162102))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_162104 = 0; \n        v__162129[v_wg_id_162098] = doubleMinMax(v__136518, v__162109, v__162108[v_wg_id_162098], v__162110); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__162105",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__162106",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__162107",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__162108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__162109",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__162110",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__162129",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__162124",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}