{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__164225, const global int* restrict v__164226, const global int* restrict v__164227, const global int* restrict v__164228, int v__164229, int v__164230, global int* v__164250, global int* v__164232, local int* v__164245, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__164234; \n  int v__164236; \n  int v__136518; \n  /* Private Memory */\n  int v__164238_0;\n  \n  int v__164240_0;\n  \n  int v__164244_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13518 = v__164232; \n    local int v_w_id_164218; \n    if (get_local_id(0) == 0) {\n      v_w_id_164218 = atomic_inc(v_work_idx_13518); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_164218 < v_MHeight_2)){\n      for (int v_l_id_164219 = get_local_id(0); v_l_id_164219 < v_MWidthC_1; v_l_id_164219 = (v_l_id_164219 + get_local_size(0))) {\n        int v_tmp_164316 = -2147483648; \n        v__164234 = v_tmp_164316; \n        /* reduce_while_seq */\n        for (int v_i_164220 = 0; v_i_164220 < 512; v_i_164220 = (1 + v_i_164220)) {\n          v__164244_0 = check(v__164234, v__164225[(v_l_id_164219 + (512 * v_MWidthC_1 * v_w_id_164218) + (v_MWidthC_1 * v_i_164220))]); \n          if (v__164244_0) {\n          } else {\n            break;\n          }\n          int v_tmp_164317 = -2147483648; \n          v__164236 = v_tmp_164317; \n          int v_index_164318 = v__164225[(v_l_id_164219 + (512 * v_MWidthC_1 * v_w_id_164218) + (v_MWidthC_1 * v_i_164220))]; \n          if (v_index_164318 < 0) {\n            v__164238_0 = v__164236; \n          } else {\n            if (v_index_164318 >= v_VLength_3) {\n              v__164238_0 = v__164236; \n            } else {\n              v__164238_0 = v__164227[v_index_164318]; \n            }\n          }\n          v__164240_0 = int_min(v__164238_0, v__164226[(v_l_id_164219 + (512 * v_MWidthC_1 * v_w_id_164218) + (v_MWidthC_1 * v_i_164220))]); \n          v__164234 = int_max(v__164240_0, v__164234); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164221 = 0; \n          v__164245[v_l_id_164219] = id(v__164234); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_164222 = get_local_id(0); \n        int v_tmp_164321 = -2147483648; \n        v__136518 = v_tmp_164321; \n        /* reduce_seq */\n        for (int v_i_164223 = 0; v_i_164223 < v_MWidthC_1; v_i_164223 = (1 + v_i_164223)) {\n          v__136518 = int_max(v__136518, v__164245[(v_i_164223 + (v_MWidthC_1 * v_l_id_164222))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164224 = 0; \n          v__164250[v_w_id_164218] = doubleMinMax(v__136518, v__164229, v__164228[v_w_id_164218], v__164230); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_164218 = atomic_inc(v_work_idx_13518); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__164225",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164226",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164227",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__164228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__164229",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__164230",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__164232",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__164250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__164245",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}