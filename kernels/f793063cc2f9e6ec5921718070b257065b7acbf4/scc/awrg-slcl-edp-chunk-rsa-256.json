{
  "name" : "awrg-slcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__159703, const global int* restrict v__159704, const global int* restrict v__159705, const global int* restrict v__159706, int v__159707, int v__159708, global int* v__159723, global int* v__159722, global int* v__159710, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__159711; \n  int v__159714; \n  /* Private Memory */\n  int v__159716_0;\n  \n  int v__159718_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13106 = v__159710; \n    local int v_w_id_159698; \n    if (get_local_id(0) == 0) {\n      v_w_id_159698 = atomic_inc(v_work_idx_13106); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_159698 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_159699 = get_local_id(0); v_l_id_159699 < 256; v_l_id_159699 = (v_l_id_159699 + get_local_size(0))) {\n        int v_tmp_159759 = -2147483648; \n        v__159711 = v_tmp_159759; \n        /* reduce_seq */\n        int v_stop_159760 = min(v__159703[(1 + (v__159703[(v_l_id_159699 + (256 * v_w_id_159698))] / 4))], v__159704[(1 + (v__159704[(v_l_id_159699 + (256 * v_w_id_159698))] / 4))]); \n        for (int v_i_159700 = 0; v_i_159700 < v_stop_159760; v_i_159700 = (1 + v_i_159700)) {\n          int v_tmp_159765 = -2147483648; \n          v__159714 = v_tmp_159765; \n          int v_index_159767 = v__159703[(2 + v_i_159700 + (v__159703[(v_l_id_159699 + (256 * v_w_id_159698))] / 4))]; \n          if (v_index_159767 < 0) {\n            v__159716_0 = v__159714; \n          } else {\n            if (v_index_159767 >= v_MWidthC_1) {\n              v__159716_0 = v__159714; \n            } else {\n              v__159716_0 = v__159705[v_index_159767]; \n            }\n          }\n          v__159718_0 = int_min(v__159704[(2 + v_i_159700 + (v__159704[(v_l_id_159699 + (256 * v_w_id_159698))] / 4))], v__159716_0); \n          v__159711 = int_max(v__159711, v__159718_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159701 = 0; \n          v__159722[(v_l_id_159699 + (256 * v_w_id_159698))] = doubleMinMax(v__159711, v__159707, v__159706[(v_l_id_159699 + (256 * v_w_id_159698))], v__159708); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159702 = 0; \n          v__159723[(v_l_id_159699 + (256 * v_w_id_159698))] = id(v__159722[(v_l_id_159699 + (256 * v_w_id_159698))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_159698 = atomic_inc(v_work_idx_13106); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__159703",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__159704",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__159705",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__159706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159707",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__159708",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__159722",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159710",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__159723",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}