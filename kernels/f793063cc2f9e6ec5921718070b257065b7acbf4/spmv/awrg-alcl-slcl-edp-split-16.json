{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22394, const global float* restrict v__22395, const global float* restrict v__22396, const global float* restrict v__22397, float v__22398, float v__22399, global float* v__22419, global int* v__22401, local float* v__22414, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22403; \n  float v__22405; \n  float v__14691; \n  /* Private Memory */\n  float v__22407_0;\n  \n  float v__22409_0;\n  \n  int v__22413_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_779 = v__22401; \n    local int v_w_id_22387; \n    if (get_local_id(0) == 0) {\n      v_w_id_22387 = atomic_inc(v_work_idx_779); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22387 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_777; \n        v_work_idx_777 = 0; \n        int v_l_id_22388 = atomic_inc(&(v_work_idx_777)); \n        while((v_l_id_22388 < v_MWidthC_1)){\n          float v_tmp_22477 = 0.0f; \n          v__22403 = v_tmp_22477; \n          /* reduce_while_seq */\n          for (int v_i_22389 = 0; v_i_22389 < 16; v_i_22389 = (1 + v_i_22389)) {\n            v__22413_0 = check(v__22403, v__22394[(v_l_id_22388 + (16 * v_MWidthC_1 * v_w_id_22387) + (v_MWidthC_1 * v_i_22389))]); \n            if (v__22413_0) {\n            } else {\n              break;\n            }\n            float v_tmp_22478 = 0.0f; \n            v__22405 = v_tmp_22478; \n            int v_index_22479 = v__22394[(v_l_id_22388 + (16 * v_MWidthC_1 * v_w_id_22387) + (v_MWidthC_1 * v_i_22389))]; \n            if (v_index_22479 < 0) {\n              v__22407_0 = v__22405; \n            } else {\n              if (v_index_22479 >= v_VLength_3) {\n                v__22407_0 = v__22405; \n              } else {\n                v__22407_0 = v__22396[v_index_22479]; \n              }\n            }\n            v__22409_0 = mult(v__22407_0, v__22395[(v_l_id_22388 + (16 * v_MWidthC_1 * v_w_id_22387) + (v_MWidthC_1 * v_i_22389))]); \n            v__22403 = add(v__22409_0, v__22403); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22390 = 0; \n            v__22414[v_l_id_22388] = id(v__22403); \n          }\n          /* end map_seq */\n          v_l_id_22388 = atomic_inc(&(v_work_idx_777)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_22391 = get_local_id(0); \n        float v_tmp_22482 = 0.0f; \n        v__14691 = v_tmp_22482; \n        /* reduce_seq */\n        for (int v_i_22392 = 0; v_i_22392 < v_MWidthC_1; v_i_22392 = (1 + v_i_22392)) {\n          v__14691 = add(v__14691, v__22414[(v_i_22392 + (v_MWidthC_1 * v_l_id_22391))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_22393 = 0; \n          v__22419[v_w_id_22387] = doubleMultiplyAdd(v__14691, v__22398, v__22397[v_w_id_22387], v__22399); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22387 = atomic_inc(v_work_idx_779); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__22394",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22395",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22396",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22398",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22399",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22401",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22414",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}