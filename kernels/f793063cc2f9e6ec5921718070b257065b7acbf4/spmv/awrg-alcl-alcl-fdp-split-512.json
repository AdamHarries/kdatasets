{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44050, const global float* restrict v__44051, const global float* restrict v__44052, const global float* restrict v__44053, float v__44054, float v__44055, global float* v__44073, global int* v__44057, local float* v__44068, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__44059; \n  float v__44061; \n  float v__14691; \n  /* Private Memory */\n  float v__44063_0;\n  \n  float v__44065_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2722 = v__44057; \n    local int v_w_id_44043; \n    if (get_local_id(0) == 0) {\n      v_w_id_44043 = atomic_inc(v_work_idx_2722); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_44043 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2720; \n        v_work_idx_2720 = 0; \n        int v_l_id_44044 = atomic_inc(&(v_work_idx_2720)); \n        while((v_l_id_44044 < v_MWidthC_1)){\n          float v_tmp_44124 = 0.0f; \n          v__44059 = v_tmp_44124; \n          /* reduce_seq */\n          for (int v_i_44045 = 0; v_i_44045 < 512; v_i_44045 = (1 + v_i_44045)) {\n            float v_tmp_44125 = 0.0f; \n            v__44061 = v_tmp_44125; \n            int v_index_44126 = v__44050[(v_l_id_44044 + (512 * v_MWidthC_1 * v_w_id_44043) + (v_MWidthC_1 * v_i_44045))]; \n            if (v_index_44126 < 0) {\n              v__44063_0 = v__44061; \n            } else {\n              if (v_index_44126 >= v_VLength_3) {\n                v__44063_0 = v__44061; \n              } else {\n                v__44063_0 = v__44052[v_index_44126]; \n              }\n            }\n            v__44065_0 = mult(v__44063_0, v__44051[(v_l_id_44044 + (512 * v_MWidthC_1 * v_w_id_44043) + (v_MWidthC_1 * v_i_44045))]); \n            v__44059 = add(v__44065_0, v__44059); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_44046 = 0; \n            v__44068[v_l_id_44044] = id(v__44059); \n          }\n          /* end map_seq */\n          v_l_id_44044 = atomic_inc(&(v_work_idx_2720)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2715; \n        v_work_idx_2715 = 0; \n        int v_l_id_44047 = atomic_inc(&(v_work_idx_2715)); \n        while((v_l_id_44047 < 1)){\n          float v_tmp_44129 = 0.0f; \n          v__14691 = v_tmp_44129; \n          /* reduce_seq */\n          for (int v_i_44048 = 0; v_i_44048 < v_MWidthC_1; v_i_44048 = (1 + v_i_44048)) {\n            v__14691 = add(v__14691, v__44068[(v_i_44048 + (v_MWidthC_1 * v_l_id_44047))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_44049 = 0; \n            v__44073[v_w_id_44043] = doubleMultiplyAdd(v__14691, v__44054, v__44053[v_w_id_44043], v__44055); \n          }\n          /* end map_seq */\n          v_l_id_44047 = atomic_inc(&(v_work_idx_2715)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_44043 = atomic_inc(v_work_idx_2722); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__44050",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44051",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44052",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44053",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44054",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44055",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44057",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__44073",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44068",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}