{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28736, const global float* restrict v__28737, const global float* restrict v__28738, const global float* restrict v__28739, float v__28740, float v__28741, global float* v__28758, local float* v__28753, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28744; \n  float v__28746; \n  float v__14691; \n  /* Private Memory */\n  float v__28748_0;\n  \n  float v__28750_0;\n  \n  for (int v_wg_id_28729 = get_group_id(0); v_wg_id_28729 < v_MHeight_2; v_wg_id_28729 = (v_wg_id_28729 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1336; \n      v_work_idx_1336 = 0; \n      int v_l_id_28730 = atomic_inc(&(v_work_idx_1336)); \n      while((v_l_id_28730 < v_MWidthC_1)){\n        float v_tmp_28815 = 0.0f; \n        v__28744 = v_tmp_28815; \n        /* reduce_seq */\n        for (int v_i_28731 = 0; v_i_28731 < 64; v_i_28731 = (1 + v_i_28731)) {\n          float v_tmp_28816 = 0.0f; \n          v__28746 = v_tmp_28816; \n          int v_index_28817 = v__28736[(v_l_id_28730 + (64 * v_MWidthC_1 * v_wg_id_28729) + (v_MWidthC_1 * v_i_28731))]; \n          if (v_index_28817 < 0) {\n            v__28748_0 = v__28746; \n          } else {\n            if (v_index_28817 >= v_VLength_3) {\n              v__28748_0 = v__28746; \n            } else {\n              v__28748_0 = v__28738[v_index_28817]; \n            }\n          }\n          v__28750_0 = mult(v__28748_0, v__28737[(v_l_id_28730 + (64 * v_MWidthC_1 * v_wg_id_28729) + (v_MWidthC_1 * v_i_28731))]); \n          v__28744 = add(v__28750_0, v__28744); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28732 = 0; \n          v__28753[v_l_id_28730] = id(v__28744); \n        }\n        /* end map_seq */\n        v_l_id_28730 = atomic_inc(&(v_work_idx_1336)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_28733 = get_local_id(0); \n      float v_tmp_28820 = 0.0f; \n      v__14691 = v_tmp_28820; \n      /* reduce_seq */\n      for (int v_i_28734 = 0; v_i_28734 < v_MWidthC_1; v_i_28734 = (1 + v_i_28734)) {\n        v__14691 = add(v__14691, v__28753[(v_i_28734 + (v_MWidthC_1 * v_l_id_28733))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_28735 = 0; \n        v__28758[v_wg_id_28729] = doubleMultiplyAdd(v__14691, v__28740, v__28739[v_wg_id_28729], v__28741); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28736",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28737",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28738",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28740",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28741",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__28758",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28753",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}