{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20354, const global float* restrict v__20355, const global float* restrict v__20356, const global float* restrict v__20357, float v__20358, float v__20359, global float* v__20376, global float* v__20366, local float* v__20371, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20362; \n  float v__20367; \n  float v__14691; \n  /* Private Memory */\n  float v__20364_0;\n  \n  for (int v_wg_id_20346 = get_group_id(0); v_wg_id_20346 < v_MHeight_2; v_wg_id_20346 = (v_wg_id_20346 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_588; \n      v_work_idx_588 = 0; \n      int v_l_id_20347 = atomic_inc(&(v_work_idx_588)); \n      while((v_l_id_20347 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20348 = 0; v_i_20348 < 16; v_i_20348 = (1 + v_i_20348)) {\n          float v_tmp_20429 = 0.0f; \n          v__20362 = v_tmp_20429; \n          int v_index_20430 = v__20354[(v_l_id_20347 + (16 * v_MWidthC_1 * v_wg_id_20346) + (v_MWidthC_1 * v_i_20348))]; \n          if (v_index_20430 < 0) {\n            v__20364_0 = v__20362; \n          } else {\n            if (v_index_20430 >= v_VLength_3) {\n              v__20364_0 = v__20362; \n            } else {\n              v__20364_0 = v__20356[v_index_20430]; \n            }\n          }\n          v__20366[(15 + (16 * v_MWidthC_1 * v_wg_id_20346) + (-1 * v_i_20348) + (16 * v_l_id_20347))] = mult(v__20364_0, v__20355[(v_l_id_20347 + (16 * v_MWidthC_1 * v_wg_id_20346) + (v_MWidthC_1 * v_i_20348))]); \n        }\n        /* end map_seq */\n        float v_tmp_20431 = 0.0f; \n        v__20367 = v_tmp_20431; \n        /* reduce_seq */\n        for (int v_i_20349 = 0; v_i_20349 < 16; v_i_20349 = (1 + v_i_20349)) {\n          v__20367 = add(v__20367, v__20366[(v_i_20349 + (16 * v_MWidthC_1 * v_wg_id_20346) + (16 * v_l_id_20347))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20350 = 0; \n          v__20371[v_l_id_20347] = id(v__20367); \n        }\n        /* end map_seq */\n        v_l_id_20347 = atomic_inc(&(v_work_idx_588)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_582; \n      v_work_idx_582 = 0; \n      int v_l_id_20351 = atomic_inc(&(v_work_idx_582)); \n      while((v_l_id_20351 < 1)){\n        float v_tmp_20434 = 0.0f; \n        v__14691 = v_tmp_20434; \n        /* reduce_seq */\n        for (int v_i_20352 = 0; v_i_20352 < v_MWidthC_1; v_i_20352 = (1 + v_i_20352)) {\n          v__14691 = add(v__14691, v__20371[(v_i_20352 + (v_MWidthC_1 * v_l_id_20351))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20353 = 0; \n          v__20376[v_wg_id_20346] = doubleMultiplyAdd(v__14691, v__20358, v__20357[v_wg_id_20346], v__20359); \n        }\n        /* end map_seq */\n        v_l_id_20351 = atomic_inc(&(v_work_idx_582)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20354",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20355",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20356",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20357",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20358",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20359",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20366",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20376",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20371",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}