{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39368, const global float* restrict v__39369, const global float* restrict v__39370, const global float* restrict v__39371, float v__39372, float v__39373, global float* v__39391, global float* v__39381, global int* v__39375, local float* v__39386, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39377; \n  float v__39382; \n  float v__14691; \n  /* Private Memory */\n  float v__39379_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2295 = v__39375; \n    local int v_w_id_39360; \n    if (get_local_id(0) == 0) {\n      v_w_id_39360 = atomic_inc(v_work_idx_2295); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39360 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2293; \n        v_work_idx_2293 = 0; \n        int v_l_id_39361 = atomic_inc(&(v_work_idx_2293)); \n        while((v_l_id_39361 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_39362 = 0; v_i_39362 < 256; v_i_39362 = (1 + v_i_39362)) {\n            float v_tmp_39446 = 0.0f; \n            v__39377 = v_tmp_39446; \n            int v_index_39447 = v__39368[(v_l_id_39361 + (256 * v_MWidthC_1 * v_w_id_39360) + (v_MWidthC_1 * v_i_39362))]; \n            if (v_index_39447 < 0) {\n              v__39379_0 = v__39377; \n            } else {\n              if (v_index_39447 >= v_VLength_3) {\n                v__39379_0 = v__39377; \n              } else {\n                v__39379_0 = v__39370[v_index_39447]; \n              }\n            }\n            v__39381[(255 + (256 * v_MWidthC_1 * v_w_id_39360) + (-1 * v_i_39362) + (256 * v_l_id_39361))] = mult(v__39379_0, v__39369[(v_l_id_39361 + (256 * v_MWidthC_1 * v_w_id_39360) + (v_MWidthC_1 * v_i_39362))]); \n          }\n          /* end map_seq */\n          float v_tmp_39448 = 0.0f; \n          v__39382 = v_tmp_39448; \n          /* reduce_seq */\n          for (int v_i_39363 = 0; v_i_39363 < 256; v_i_39363 = (1 + v_i_39363)) {\n            v__39382 = add(v__39382, v__39381[(v_i_39363 + (256 * v_MWidthC_1 * v_w_id_39360) + (256 * v_l_id_39361))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39364 = 0; \n            v__39386[v_l_id_39361] = id(v__39382); \n          }\n          /* end map_seq */\n          v_l_id_39361 = atomic_inc(&(v_work_idx_2293)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_39365 = get_local_id(0); \n        float v_tmp_39451 = 0.0f; \n        v__14691 = v_tmp_39451; \n        /* reduce_seq */\n        for (int v_i_39366 = 0; v_i_39366 < v_MWidthC_1; v_i_39366 = (1 + v_i_39366)) {\n          v__14691 = add(v__14691, v__39386[(v_i_39366 + (v_MWidthC_1 * v_l_id_39365))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_39367 = 0; \n          v__39391[v_w_id_39360] = doubleMultiplyAdd(v__14691, v__39372, v__39371[v_w_id_39360], v__39373); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39360 = atomic_inc(v_work_idx_2295); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39368",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39369",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39370",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39371",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39372",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39373",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39381",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39375",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39386",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}