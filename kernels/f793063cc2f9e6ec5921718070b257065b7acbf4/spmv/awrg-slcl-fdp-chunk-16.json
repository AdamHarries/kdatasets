{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20714, const global float* restrict v__20715, const global float* restrict v__20716, const global float* restrict v__20717, float v__20718, float v__20719, global float* v__20733, global int* v__20721, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20723; \n  float v__20725; \n  /* Private Memory */\n  float v__20727_0;\n  \n  float v__20729_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_622 = v__20721; \n    local int v_w_id_20710; \n    if (get_local_id(0) == 0) {\n      v_w_id_20710 = atomic_inc(v_work_idx_622); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_20710 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_20711 = get_local_id(0); v_l_id_20711 < 16; v_l_id_20711 = (v_l_id_20711 + get_local_size(0))) {\n        float v_tmp_20774 = 0.0f; \n        v__20723 = v_tmp_20774; \n        /* reduce_seq */\n        for (int v_i_20712 = 0; v_i_20712 < v_MWidthC_1; v_i_20712 = (1 + v_i_20712)) {\n          float v_tmp_20775 = 0.0f; \n          v__20725 = v_tmp_20775; \n          int v_index_20776 = v__20714[(v_i_20712 + (16 * v_MWidthC_1 * v_w_id_20710) + (v_MWidthC_1 * v_l_id_20711))]; \n          if (v_index_20776 < 0) {\n            v__20727_0 = v__20725; \n          } else {\n            if (v_index_20776 >= v_VLength_3) {\n              v__20727_0 = v__20725; \n            } else {\n              v__20727_0 = v__20716[v_index_20776]; \n            }\n          }\n          v__20729_0 = mult(v__20727_0, v__20715[(v_i_20712 + (16 * v_MWidthC_1 * v_w_id_20710) + (v_MWidthC_1 * v_l_id_20711))]); \n          v__20723 = add(v__20729_0, v__20723); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20713 = 0; \n          v__20733[(v_l_id_20711 + (16 * v_w_id_20710))] = doubleMultiplyAdd(v__20723, v__20718, v__20717[(v_l_id_20711 + (16 * v_w_id_20710))], v__20719); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_20710 = atomic_inc(v_work_idx_622); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__20714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20715",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20716",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20718",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20719",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20721",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__20733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}