{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35466, const global float* restrict v__35467, const global float* restrict v__35468, const global float* restrict v__35469, float v__35470, float v__35471, global float* v__35489, global int* v__35473, local float* v__35484, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__35475; \n  float v__35477; \n  float v__14691; \n  /* Private Memory */\n  float v__35479_0;\n  \n  float v__35481_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1954 = v__35473; \n    local int v_w_id_35459; \n    if (get_local_id(0) == 0) {\n      v_w_id_35459 = atomic_inc(v_work_idx_1954); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35459 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1952; \n        v_work_idx_1952 = 0; \n        int v_l_id_35460 = atomic_inc(&(v_work_idx_1952)); \n        while((v_l_id_35460 < v_MWidthC_1)){\n          float v_tmp_35540 = 0.0f; \n          v__35475 = v_tmp_35540; \n          /* reduce_seq */\n          for (int v_i_35461 = 0; v_i_35461 < 128; v_i_35461 = (1 + v_i_35461)) {\n            float v_tmp_35541 = 0.0f; \n            v__35477 = v_tmp_35541; \n            int v_index_35542 = v__35466[(v_l_id_35460 + (128 * v_MWidthC_1 * v_w_id_35459) + (v_MWidthC_1 * v_i_35461))]; \n            if (v_index_35542 < 0) {\n              v__35479_0 = v__35477; \n            } else {\n              if (v_index_35542 >= v_VLength_3) {\n                v__35479_0 = v__35477; \n              } else {\n                v__35479_0 = v__35468[v_index_35542]; \n              }\n            }\n            v__35481_0 = mult(v__35479_0, v__35467[(v_l_id_35460 + (128 * v_MWidthC_1 * v_w_id_35459) + (v_MWidthC_1 * v_i_35461))]); \n            v__35475 = add(v__35481_0, v__35475); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35462 = 0; \n            v__35484[v_l_id_35460] = id(v__35475); \n          }\n          /* end map_seq */\n          v_l_id_35460 = atomic_inc(&(v_work_idx_1952)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1947; \n        v_work_idx_1947 = 0; \n        int v_l_id_35463 = atomic_inc(&(v_work_idx_1947)); \n        while((v_l_id_35463 < 1)){\n          float v_tmp_35545 = 0.0f; \n          v__14691 = v_tmp_35545; \n          /* reduce_seq */\n          for (int v_i_35464 = 0; v_i_35464 < v_MWidthC_1; v_i_35464 = (1 + v_i_35464)) {\n            v__14691 = add(v__14691, v__35484[(v_i_35464 + (v_MWidthC_1 * v_l_id_35463))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35465 = 0; \n            v__35489[v_w_id_35459] = doubleMultiplyAdd(v__14691, v__35470, v__35469[v_w_id_35459], v__35471); \n          }\n          /* end map_seq */\n          v_l_id_35463 = atomic_inc(&(v_work_idx_1947)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35459 = atomic_inc(v_work_idx_1954); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__35466",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35467",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35468",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35469",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35470",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35471",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35473",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35489",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35484",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}