{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22590, const global float* restrict v__22591, const global float* restrict v__22592, const global float* restrict v__22593, float v__22594, float v__22595, global float* v__22613, global int* v__22597, local float* v__22608, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22599; \n  float v__22601; \n  float v__14691; \n  /* Private Memory */\n  float v__22603_0;\n  \n  float v__22605_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_802 = v__22597; \n    local int v_w_id_22583; \n    if (get_local_id(0) == 0) {\n      v_w_id_22583 = atomic_inc(v_work_idx_802); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22583 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_800; \n        v_work_idx_800 = 0; \n        int v_l_id_22584 = atomic_inc(&(v_work_idx_800)); \n        while((v_l_id_22584 < v_MWidthC_1)){\n          float v_tmp_22664 = 0.0f; \n          v__22599 = v_tmp_22664; \n          /* reduce_seq */\n          for (int v_i_22585 = 0; v_i_22585 < 16; v_i_22585 = (1 + v_i_22585)) {\n            float v_tmp_22665 = 0.0f; \n            v__22601 = v_tmp_22665; \n            int v_index_22666 = v__22590[(v_l_id_22584 + (16 * v_MWidthC_1 * v_w_id_22583) + (v_MWidthC_1 * v_i_22585))]; \n            if (v_index_22666 < 0) {\n              v__22603_0 = v__22601; \n            } else {\n              if (v_index_22666 >= v_VLength_3) {\n                v__22603_0 = v__22601; \n              } else {\n                v__22603_0 = v__22592[v_index_22666]; \n              }\n            }\n            v__22605_0 = mult(v__22603_0, v__22591[(v_l_id_22584 + (16 * v_MWidthC_1 * v_w_id_22583) + (v_MWidthC_1 * v_i_22585))]); \n            v__22599 = add(v__22605_0, v__22599); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22586 = 0; \n            v__22608[v_l_id_22584] = id(v__22599); \n          }\n          /* end map_seq */\n          v_l_id_22584 = atomic_inc(&(v_work_idx_800)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_795; \n        v_work_idx_795 = 0; \n        int v_l_id_22587 = atomic_inc(&(v_work_idx_795)); \n        while((v_l_id_22587 < 1)){\n          float v_tmp_22669 = 0.0f; \n          v__14691 = v_tmp_22669; \n          /* reduce_seq */\n          for (int v_i_22588 = 0; v_i_22588 < v_MWidthC_1; v_i_22588 = (1 + v_i_22588)) {\n            v__14691 = add(v__14691, v__22608[(v_i_22588 + (v_MWidthC_1 * v_l_id_22587))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22589 = 0; \n            v__22613[v_w_id_22583] = doubleMultiplyAdd(v__14691, v__22594, v__22593[v_w_id_22583], v__22595); \n          }\n          /* end map_seq */\n          v_l_id_22587 = atomic_inc(&(v_work_idx_795)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22583 = atomic_inc(v_work_idx_802); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22590",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22591",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22592",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22594",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22595",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22597",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22608",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}