{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32546, const global float* restrict v__32547, const global float* restrict v__32548, const global float* restrict v__32549, float v__32550, float v__32551, global float* v__32564, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32554; \n  float v__32556; \n  /* Private Memory */\n  float v__32558_0;\n  \n  float v__32560_0;\n  \n  for (int v_wg_id_32542 = get_group_id(0); v_wg_id_32542 < ((v_MHeight_2)/(128)); v_wg_id_32542 = (v_wg_id_32542 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1677; \n      v_work_idx_1677 = 0; \n      int v_l_id_32543 = atomic_inc(&(v_work_idx_1677)); \n      while((v_l_id_32543 < 128)){\n        float v_tmp_32602 = 0.0f; \n        v__32554 = v_tmp_32602; \n        /* reduce_seq */\n        for (int v_i_32544 = 0; v_i_32544 < v_MWidthC_1; v_i_32544 = (1 + v_i_32544)) {\n          float v_tmp_32603 = 0.0f; \n          v__32556 = v_tmp_32603; \n          int v_index_32604 = v__32546[(v_i_32544 + (128 * v_MWidthC_1 * v_wg_id_32542) + (v_MWidthC_1 * v_l_id_32543))]; \n          if (v_index_32604 < 0) {\n            v__32558_0 = v__32556; \n          } else {\n            if (v_index_32604 >= v_VLength_3) {\n              v__32558_0 = v__32556; \n            } else {\n              v__32558_0 = v__32548[v_index_32604]; \n            }\n          }\n          v__32560_0 = mult(v__32558_0, v__32547[(v_i_32544 + (128 * v_MWidthC_1 * v_wg_id_32542) + (v_MWidthC_1 * v_l_id_32543))]); \n          v__32554 = add(v__32560_0, v__32554); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_32545 = 0; \n          v__32564[(v_l_id_32543 + (128 * v_wg_id_32542))] = doubleMultiplyAdd(v__32554, v__32550, v__32549[(v_l_id_32543 + (128 * v_wg_id_32542))], v__32551); \n        }\n        /* end map_seq */\n        v_l_id_32543 = atomic_inc(&(v_work_idx_1677)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__32546",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32547",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32548",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32549",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32550",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32551",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__32564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}