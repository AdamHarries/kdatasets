{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__40750, const global float* restrict v__40751, const global float* restrict v__40752, const global float* restrict v__40753, float v__40754, float v__40755, global float* v__40772, global float* v__40762, local float* v__40767, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__40758; \n  float v__40763; \n  float v__14691; \n  /* Private Memory */\n  float v__40760_0;\n  \n  for (int v_wg_id_40742 = get_group_id(0); v_wg_id_40742 < v_MHeight_2; v_wg_id_40742 = (v_wg_id_40742 + get_num_groups(0))) {\n    for (int v_l_id_40743 = get_local_id(0); v_l_id_40743 < v_MWidthC_1; v_l_id_40743 = (v_l_id_40743 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_40744 = 0; v_i_40744 < 512; v_i_40744 = (1 + v_i_40744)) {\n        float v_tmp_40833 = 0.0f; \n        v__40758 = v_tmp_40833; \n        int v_index_40834 = v__40750[(v_l_id_40743 + (512 * v_MWidthC_1 * v_wg_id_40742) + (v_MWidthC_1 * v_i_40744))]; \n        if (v_index_40834 < 0) {\n          v__40760_0 = v__40758; \n        } else {\n          if (v_index_40834 >= v_VLength_3) {\n            v__40760_0 = v__40758; \n          } else {\n            v__40760_0 = v__40752[v_index_40834]; \n          }\n        }\n        v__40762[(511 + (512 * v_MWidthC_1 * v_wg_id_40742) + (-1 * v_i_40744) + (512 * v_l_id_40743))] = mult(v__40760_0, v__40751[(v_l_id_40743 + (512 * v_MWidthC_1 * v_wg_id_40742) + (v_MWidthC_1 * v_i_40744))]); \n      }\n      /* end map_seq */\n      float v_tmp_40835 = 0.0f; \n      v__40763 = v_tmp_40835; \n      /* reduce_seq */\n      for (int v_i_40745 = 0; v_i_40745 < 512; v_i_40745 = (1 + v_i_40745)) {\n        v__40763 = add(v__40763, v__40762[(v_i_40745 + (512 * v_MWidthC_1 * v_wg_id_40742) + (512 * v_l_id_40743))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40746 = 0; \n        v__40767[v_l_id_40743] = id(v__40763); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2409; \n      v_work_idx_2409 = 0; \n      int v_l_id_40747 = atomic_inc(&(v_work_idx_2409)); \n      while((v_l_id_40747 < 1)){\n        float v_tmp_40838 = 0.0f; \n        v__14691 = v_tmp_40838; \n        /* reduce_seq */\n        for (int v_i_40748 = 0; v_i_40748 < v_MWidthC_1; v_i_40748 = (1 + v_i_40748)) {\n          v__14691 = add(v__14691, v__40767[(v_i_40748 + (v_MWidthC_1 * v_l_id_40747))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_40749 = 0; \n          v__40772[v_wg_id_40742] = doubleMultiplyAdd(v__14691, v__40754, v__40753[v_wg_id_40742], v__40755); \n        }\n        /* end map_seq */\n        v_l_id_40747 = atomic_inc(&(v_work_idx_2409)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__40750",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40751",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40752",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40754",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40755",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__40762",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__40772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__40767",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}