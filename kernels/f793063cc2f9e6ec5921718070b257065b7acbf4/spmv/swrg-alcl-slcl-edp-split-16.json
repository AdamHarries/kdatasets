{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20250, const global float* restrict v__20251, const global float* restrict v__20252, const global float* restrict v__20253, float v__20254, float v__20255, global float* v__20274, local float* v__20269, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20258; \n  float v__20260; \n  float v__14691; \n  /* Private Memory */\n  float v__20262_0;\n  \n  float v__20264_0;\n  \n  int v__20268_0;\n  \n  for (int v_wg_id_20243 = get_group_id(0); v_wg_id_20243 < v_MHeight_2; v_wg_id_20243 = (v_wg_id_20243 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_577; \n      v_work_idx_577 = 0; \n      int v_l_id_20244 = atomic_inc(&(v_work_idx_577)); \n      while((v_l_id_20244 < v_MWidthC_1)){\n        float v_tmp_20334 = 0.0f; \n        v__20258 = v_tmp_20334; \n        /* reduce_while_seq */\n        for (int v_i_20245 = 0; v_i_20245 < 16; v_i_20245 = (1 + v_i_20245)) {\n          v__20268_0 = check(v__20258, v__20250[(v_l_id_20244 + (16 * v_MWidthC_1 * v_wg_id_20243) + (v_MWidthC_1 * v_i_20245))]); \n          if (v__20268_0) {\n          } else {\n            break;\n          }\n          float v_tmp_20335 = 0.0f; \n          v__20260 = v_tmp_20335; \n          int v_index_20336 = v__20250[(v_l_id_20244 + (16 * v_MWidthC_1 * v_wg_id_20243) + (v_MWidthC_1 * v_i_20245))]; \n          if (v_index_20336 < 0) {\n            v__20262_0 = v__20260; \n          } else {\n            if (v_index_20336 >= v_VLength_3) {\n              v__20262_0 = v__20260; \n            } else {\n              v__20262_0 = v__20252[v_index_20336]; \n            }\n          }\n          v__20264_0 = mult(v__20262_0, v__20251[(v_l_id_20244 + (16 * v_MWidthC_1 * v_wg_id_20243) + (v_MWidthC_1 * v_i_20245))]); \n          v__20258 = add(v__20264_0, v__20258); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20246 = 0; \n          v__20269[v_l_id_20244] = id(v__20258); \n        }\n        /* end map_seq */\n        v_l_id_20244 = atomic_inc(&(v_work_idx_577)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_20247 = get_local_id(0); \n      float v_tmp_20339 = 0.0f; \n      v__14691 = v_tmp_20339; \n      /* reduce_seq */\n      for (int v_i_20248 = 0; v_i_20248 < v_MWidthC_1; v_i_20248 = (1 + v_i_20248)) {\n        v__14691 = add(v__14691, v__20269[(v_i_20248 + (v_MWidthC_1 * v_l_id_20247))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20249 = 0; \n        v__20274[v_wg_id_20243] = doubleMultiplyAdd(v__14691, v__20254, v__20253[v_wg_id_20243], v__20255); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__20250",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20251",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20252",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20253",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20254",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20255",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20269",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}