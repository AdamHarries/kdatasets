{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24740, const global float* restrict v__24741, const global float* restrict v__24742, const global float* restrict v__24743, float v__24744, float v__24745, global float* v__24762, local float* v__24757, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24748; \n  float v__24750; \n  float v__14691; \n  /* Private Memory */\n  float v__24752_0;\n  \n  float v__24754_0;\n  \n  for (int v_wg_id_24733 = get_group_id(0); v_wg_id_24733 < v_MHeight_2; v_wg_id_24733 = (v_wg_id_24733 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_982; \n      v_work_idx_982 = 0; \n      int v_l_id_24734 = atomic_inc(&(v_work_idx_982)); \n      while((v_l_id_24734 < v_MWidthC_1)){\n        float v_tmp_24815 = 0.0f; \n        v__24748 = v_tmp_24815; \n        /* reduce_seq */\n        for (int v_i_24735 = 0; v_i_24735 < 32; v_i_24735 = (1 + v_i_24735)) {\n          float v_tmp_24816 = 0.0f; \n          v__24750 = v_tmp_24816; \n          int v_index_24817 = v__24740[(v_l_id_24734 + (32 * v_MWidthC_1 * v_wg_id_24733) + (v_MWidthC_1 * v_i_24735))]; \n          if (v_index_24817 < 0) {\n            v__24752_0 = v__24750; \n          } else {\n            if (v_index_24817 >= v_VLength_3) {\n              v__24752_0 = v__24750; \n            } else {\n              v__24752_0 = v__24742[v_index_24817]; \n            }\n          }\n          v__24754_0 = mult(v__24752_0, v__24741[(v_l_id_24734 + (32 * v_MWidthC_1 * v_wg_id_24733) + (v_MWidthC_1 * v_i_24735))]); \n          v__24748 = add(v__24754_0, v__24748); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24736 = 0; \n          v__24757[v_l_id_24734] = id(v__24748); \n        }\n        /* end map_seq */\n        v_l_id_24734 = atomic_inc(&(v_work_idx_982)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_977; \n      v_work_idx_977 = 0; \n      int v_l_id_24737 = atomic_inc(&(v_work_idx_977)); \n      while((v_l_id_24737 < 1)){\n        float v_tmp_24820 = 0.0f; \n        v__14691 = v_tmp_24820; \n        /* reduce_seq */\n        for (int v_i_24738 = 0; v_i_24738 < v_MWidthC_1; v_i_24738 = (1 + v_i_24738)) {\n          v__14691 = add(v__14691, v__24757[(v_i_24738 + (v_MWidthC_1 * v_l_id_24737))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24739 = 0; \n          v__24762[v_wg_id_24733] = doubleMultiplyAdd(v__14691, v__24744, v__24743[v_wg_id_24733], v__24745); \n        }\n        /* end map_seq */\n        v_l_id_24737 = atomic_inc(&(v_work_idx_977)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24740",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24741",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24742",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24744",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24745",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__24762",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24757",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}