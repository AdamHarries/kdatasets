{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15307, const global float* restrict v__15308, const global float* restrict v__15309, const global float* restrict v__15310, float v__15311, float v__15312, global float* v__15325, global float* v__15319, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15315; \n  float v__15320; \n  /* Private Memory */\n  float v__15317_0;\n  \n  for (int v_wg_id_15302 = get_group_id(0); v_wg_id_15302 < ((v_MHeight_2)/(8)); v_wg_id_15302 = (v_wg_id_15302 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_135; \n      v_work_idx_135 = 0; \n      int v_l_id_15303 = atomic_inc(&(v_work_idx_135)); \n      while((v_l_id_15303 < 8)){\n        /* map_seq */\n        for (int v_i_15304 = 0; v_i_15304 < v_MWidthC_1; v_i_15304 = (1 + v_i_15304)) {\n          float v_tmp_15365 = 0.0f; \n          v__15315 = v_tmp_15365; \n          int v_index_15366 = v__15307[(v_i_15304 + (8 * v_MWidthC_1 * v_wg_id_15302) + (v_MWidthC_1 * v_l_id_15303))]; \n          if (v_index_15366 < 0) {\n            v__15317_0 = v__15315; \n          } else {\n            if (v_index_15366 >= v_VLength_3) {\n              v__15317_0 = v__15315; \n            } else {\n              v__15317_0 = v__15309[v_index_15366]; \n            }\n          }\n          v__15319[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_15302) + (-1 * v_i_15304) + (v_MWidthC_1 * v_l_id_15303))] = mult(v__15317_0, v__15308[(v_i_15304 + (8 * v_MWidthC_1 * v_wg_id_15302) + (v_MWidthC_1 * v_l_id_15303))]); \n        }\n        /* end map_seq */\n        float v_tmp_15367 = 0.0f; \n        v__15320 = v_tmp_15367; \n        /* reduce_seq */\n        for (int v_i_15305 = 0; v_i_15305 < v_MWidthC_1; v_i_15305 = (1 + v_i_15305)) {\n          v__15320 = add(v__15320, v__15319[(v_i_15305 + (8 * v_MWidthC_1 * v_wg_id_15302) + (v_MWidthC_1 * v_l_id_15303))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15306 = 0; \n          v__15325[(v_l_id_15303 + (8 * v_wg_id_15302))] = doubleMultiplyAdd(v__15320, v__15311, v__15310[(v_l_id_15303 + (8 * v_wg_id_15302))], v__15312); \n        }\n        /* end map_seq */\n        v_l_id_15303 = atomic_inc(&(v_work_idx_135)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15307",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15308",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15309",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15310",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15311",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15312",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__15325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}