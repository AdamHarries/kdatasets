{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42578, const global float* restrict v__42579, const global float* restrict v__42580, const global float* restrict v__42581, float v__42582, float v__42583, global float* v__42601, global float* v__42591, global int* v__42585, local float* v__42596, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42587; \n  float v__42592; \n  float v__14691; \n  /* Private Memory */\n  float v__42589_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2576 = v__42585; \n    local int v_w_id_42570; \n    if (get_local_id(0) == 0) {\n      v_w_id_42570 = atomic_inc(v_work_idx_2576); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42570 < v_MHeight_2)){\n      for (int v_l_id_42571 = get_local_id(0); v_l_id_42571 < v_MWidthC_1; v_l_id_42571 = (v_l_id_42571 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_42572 = 0; v_i_42572 < 512; v_i_42572 = (1 + v_i_42572)) {\n          float v_tmp_42664 = 0.0f; \n          v__42587 = v_tmp_42664; \n          int v_index_42665 = v__42578[(v_l_id_42571 + (512 * v_MWidthC_1 * v_w_id_42570) + (v_MWidthC_1 * v_i_42572))]; \n          if (v_index_42665 < 0) {\n            v__42589_0 = v__42587; \n          } else {\n            if (v_index_42665 >= v_VLength_3) {\n              v__42589_0 = v__42587; \n            } else {\n              v__42589_0 = v__42580[v_index_42665]; \n            }\n          }\n          v__42591[(511 + (512 * v_MWidthC_1 * v_w_id_42570) + (-1 * v_i_42572) + (512 * v_l_id_42571))] = mult(v__42589_0, v__42579[(v_l_id_42571 + (512 * v_MWidthC_1 * v_w_id_42570) + (v_MWidthC_1 * v_i_42572))]); \n        }\n        /* end map_seq */\n        float v_tmp_42666 = 0.0f; \n        v__42592 = v_tmp_42666; \n        /* reduce_seq */\n        for (int v_i_42573 = 0; v_i_42573 < 512; v_i_42573 = (1 + v_i_42573)) {\n          v__42592 = add(v__42592, v__42591[(v_i_42573 + (512 * v_MWidthC_1 * v_w_id_42570) + (512 * v_l_id_42571))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42574 = 0; \n          v__42596[v_l_id_42571] = id(v__42592); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_42575 = get_local_id(0); \n        float v_tmp_42669 = 0.0f; \n        v__14691 = v_tmp_42669; \n        /* reduce_seq */\n        for (int v_i_42576 = 0; v_i_42576 < v_MWidthC_1; v_i_42576 = (1 + v_i_42576)) {\n          v__14691 = add(v__14691, v__42596[(v_i_42576 + (v_MWidthC_1 * v_l_id_42575))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42577 = 0; \n          v__42601[v_w_id_42570] = doubleMultiplyAdd(v__14691, v__42582, v__42581[v_w_id_42570], v__42583); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42570 = atomic_inc(v_work_idx_2576); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__42578",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42579",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42580",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42582",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42583",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42591",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42585",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42596",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}