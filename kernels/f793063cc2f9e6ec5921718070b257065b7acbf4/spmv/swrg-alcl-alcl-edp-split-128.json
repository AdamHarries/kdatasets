{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33418, const global float* restrict v__33419, const global float* restrict v__33420, const global float* restrict v__33421, float v__33422, float v__33423, global float* v__33442, local float* v__33437, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__33426; \n  float v__33428; \n  float v__14691; \n  /* Private Memory */\n  float v__33430_0;\n  \n  float v__33432_0;\n  \n  int v__33436_0;\n  \n  for (int v_wg_id_33411 = get_group_id(0); v_wg_id_33411 < v_MHeight_2; v_wg_id_33411 = (v_wg_id_33411 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1760; \n      v_work_idx_1760 = 0; \n      int v_l_id_33412 = atomic_inc(&(v_work_idx_1760)); \n      while((v_l_id_33412 < v_MWidthC_1)){\n        float v_tmp_33498 = 0.0f; \n        v__33426 = v_tmp_33498; \n        /* reduce_while_seq */\n        for (int v_i_33413 = 0; v_i_33413 < 128; v_i_33413 = (1 + v_i_33413)) {\n          v__33436_0 = check(v__33426, v__33418[(v_l_id_33412 + (128 * v_MWidthC_1 * v_wg_id_33411) + (v_MWidthC_1 * v_i_33413))]); \n          if (v__33436_0) {\n          } else {\n            break;\n          }\n          float v_tmp_33499 = 0.0f; \n          v__33428 = v_tmp_33499; \n          int v_index_33500 = v__33418[(v_l_id_33412 + (128 * v_MWidthC_1 * v_wg_id_33411) + (v_MWidthC_1 * v_i_33413))]; \n          if (v_index_33500 < 0) {\n            v__33430_0 = v__33428; \n          } else {\n            if (v_index_33500 >= v_VLength_3) {\n              v__33430_0 = v__33428; \n            } else {\n              v__33430_0 = v__33420[v_index_33500]; \n            }\n          }\n          v__33432_0 = mult(v__33430_0, v__33419[(v_l_id_33412 + (128 * v_MWidthC_1 * v_wg_id_33411) + (v_MWidthC_1 * v_i_33413))]); \n          v__33426 = add(v__33432_0, v__33426); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33414 = 0; \n          v__33437[v_l_id_33412] = id(v__33426); \n        }\n        /* end map_seq */\n        v_l_id_33412 = atomic_inc(&(v_work_idx_1760)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1755; \n      v_work_idx_1755 = 0; \n      int v_l_id_33415 = atomic_inc(&(v_work_idx_1755)); \n      while((v_l_id_33415 < 1)){\n        float v_tmp_33503 = 0.0f; \n        v__14691 = v_tmp_33503; \n        /* reduce_seq */\n        for (int v_i_33416 = 0; v_i_33416 < v_MWidthC_1; v_i_33416 = (1 + v_i_33416)) {\n          v__14691 = add(v__14691, v__33437[(v_i_33416 + (v_MWidthC_1 * v_l_id_33415))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33417 = 0; \n          v__33442[v_wg_id_33411] = doubleMultiplyAdd(v__14691, v__33422, v__33421[v_wg_id_33411], v__33423); \n        }\n        /* end map_seq */\n        v_l_id_33415 = atomic_inc(&(v_work_idx_1755)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__33418",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33419",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33420",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33421",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33422",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33423",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33442",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33437",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}