{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27656, const global float* restrict v__27657, const global float* restrict v__27658, const global float* restrict v__27659, float v__27660, float v__27661, global float* v__27678, local float* v__27673, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27664; \n  float v__27666; \n  float v__14691; \n  /* Private Memory */\n  float v__27668_0;\n  \n  float v__27670_0;\n  \n  for (int v_wg_id_27649 = get_group_id(0); v_wg_id_27649 < v_MHeight_2; v_wg_id_27649 = (v_wg_id_27649 + get_num_groups(0))) {\n    for (int v_l_id_27650 = get_local_id(0); v_l_id_27650 < v_MWidthC_1; v_l_id_27650 = (v_l_id_27650 + get_local_size(0))) {\n      float v_tmp_27743 = 0.0f; \n      v__27664 = v_tmp_27743; \n      /* reduce_seq */\n      for (int v_i_27651 = 0; v_i_27651 < 64; v_i_27651 = (1 + v_i_27651)) {\n        float v_tmp_27744 = 0.0f; \n        v__27666 = v_tmp_27744; \n        int v_index_27745 = v__27656[(v_l_id_27650 + (64 * v_MWidthC_1 * v_wg_id_27649) + (v_MWidthC_1 * v_i_27651))]; \n        if (v_index_27745 < 0) {\n          v__27668_0 = v__27666; \n        } else {\n          if (v_index_27745 >= v_VLength_3) {\n            v__27668_0 = v__27666; \n          } else {\n            v__27668_0 = v__27658[v_index_27745]; \n          }\n        }\n        v__27670_0 = mult(v__27668_0, v__27657[(v_l_id_27650 + (64 * v_MWidthC_1 * v_wg_id_27649) + (v_MWidthC_1 * v_i_27651))]); \n        v__27664 = add(v__27670_0, v__27664); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_27652 = 0; \n        v__27673[v_l_id_27650] = id(v__27664); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_27653 = get_local_id(0); \n      float v_tmp_27748 = 0.0f; \n      v__14691 = v_tmp_27748; \n      /* reduce_seq */\n      for (int v_i_27654 = 0; v_i_27654 < v_MWidthC_1; v_i_27654 = (1 + v_i_27654)) {\n        v__14691 = add(v__14691, v__27673[(v_i_27654 + (v_MWidthC_1 * v_l_id_27653))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_27655 = 0; \n        v__27678[v_wg_id_27649] = doubleMultiplyAdd(v__14691, v__27660, v__27659[v_wg_id_27649], v__27661); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__27656",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27657",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27658",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27659",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27660",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27661",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__27678",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27673",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}