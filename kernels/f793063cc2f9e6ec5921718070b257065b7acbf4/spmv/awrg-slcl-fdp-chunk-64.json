{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29298, const global float* restrict v__29299, const global float* restrict v__29300, const global float* restrict v__29301, float v__29302, float v__29303, global float* v__29317, global int* v__29305, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29307; \n  float v__29309; \n  /* Private Memory */\n  float v__29311_0;\n  \n  float v__29313_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1390 = v__29305; \n    local int v_w_id_29294; \n    if (get_local_id(0) == 0) {\n      v_w_id_29294 = atomic_inc(v_work_idx_1390); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29294 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_29295 = get_local_id(0); v_l_id_29295 < 64; v_l_id_29295 = (v_l_id_29295 + get_local_size(0))) {\n        float v_tmp_29358 = 0.0f; \n        v__29307 = v_tmp_29358; \n        /* reduce_seq */\n        for (int v_i_29296 = 0; v_i_29296 < v_MWidthC_1; v_i_29296 = (1 + v_i_29296)) {\n          float v_tmp_29359 = 0.0f; \n          v__29309 = v_tmp_29359; \n          int v_index_29360 = v__29298[(v_i_29296 + (64 * v_MWidthC_1 * v_w_id_29294) + (v_MWidthC_1 * v_l_id_29295))]; \n          if (v_index_29360 < 0) {\n            v__29311_0 = v__29309; \n          } else {\n            if (v_index_29360 >= v_VLength_3) {\n              v__29311_0 = v__29309; \n            } else {\n              v__29311_0 = v__29300[v_index_29360]; \n            }\n          }\n          v__29313_0 = mult(v__29311_0, v__29299[(v_i_29296 + (64 * v_MWidthC_1 * v_w_id_29294) + (v_MWidthC_1 * v_l_id_29295))]); \n          v__29307 = add(v__29313_0, v__29307); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29297 = 0; \n          v__29317[(v_l_id_29295 + (64 * v_w_id_29294))] = doubleMultiplyAdd(v__29307, v__29302, v__29301[(v_l_id_29295 + (64 * v_w_id_29294))], v__29303); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_29294 = atomic_inc(v_work_idx_1390); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__29298",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29299",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29300",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29302",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29303",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29305",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}