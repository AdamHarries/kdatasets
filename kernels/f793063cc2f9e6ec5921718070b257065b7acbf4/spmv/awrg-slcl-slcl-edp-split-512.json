{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42788, const global float* restrict v__42789, const global float* restrict v__42790, const global float* restrict v__42791, float v__42792, float v__42793, global float* v__42813, global int* v__42795, local float* v__42808, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42797; \n  float v__42799; \n  float v__14691; \n  /* Private Memory */\n  float v__42801_0;\n  \n  float v__42803_0;\n  \n  int v__42807_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2594 = v__42795; \n    local int v_w_id_42781; \n    if (get_local_id(0) == 0) {\n      v_w_id_42781 = atomic_inc(v_work_idx_2594); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42781 < v_MHeight_2)){\n      for (int v_l_id_42782 = get_local_id(0); v_l_id_42782 < v_MWidthC_1; v_l_id_42782 = (v_l_id_42782 + get_local_size(0))) {\n        float v_tmp_42879 = 0.0f; \n        v__42797 = v_tmp_42879; \n        /* reduce_while_seq */\n        for (int v_i_42783 = 0; v_i_42783 < 512; v_i_42783 = (1 + v_i_42783)) {\n          v__42807_0 = check(v__42797, v__42788[(v_l_id_42782 + (512 * v_MWidthC_1 * v_w_id_42781) + (v_MWidthC_1 * v_i_42783))]); \n          if (v__42807_0) {\n          } else {\n            break;\n          }\n          float v_tmp_42880 = 0.0f; \n          v__42799 = v_tmp_42880; \n          int v_index_42881 = v__42788[(v_l_id_42782 + (512 * v_MWidthC_1 * v_w_id_42781) + (v_MWidthC_1 * v_i_42783))]; \n          if (v_index_42881 < 0) {\n            v__42801_0 = v__42799; \n          } else {\n            if (v_index_42881 >= v_VLength_3) {\n              v__42801_0 = v__42799; \n            } else {\n              v__42801_0 = v__42790[v_index_42881]; \n            }\n          }\n          v__42803_0 = mult(v__42801_0, v__42789[(v_l_id_42782 + (512 * v_MWidthC_1 * v_w_id_42781) + (v_MWidthC_1 * v_i_42783))]); \n          v__42797 = add(v__42803_0, v__42797); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42784 = 0; \n          v__42808[v_l_id_42782] = id(v__42797); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_42785 = get_local_id(0); \n        float v_tmp_42884 = 0.0f; \n        v__14691 = v_tmp_42884; \n        /* reduce_seq */\n        for (int v_i_42786 = 0; v_i_42786 < v_MWidthC_1; v_i_42786 = (1 + v_i_42786)) {\n          v__14691 = add(v__14691, v__42808[(v_i_42786 + (v_MWidthC_1 * v_l_id_42785))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42787 = 0; \n          v__42813[v_w_id_42781] = doubleMultiplyAdd(v__14691, v__42792, v__42791[v_w_id_42781], v__42793); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42781 = atomic_inc(v_work_idx_2594); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__42788",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42789",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42790",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42792",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42793",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42795",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42808",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}