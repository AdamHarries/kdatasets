{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43957, const global float* restrict v__43958, const global float* restrict v__43959, const global float* restrict v__43960, float v__43961, float v__43962, global float* v__43980, global float* v__43970, global int* v__43964, local float* v__43975, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43966; \n  float v__43971; \n  float v__14691; \n  /* Private Memory */\n  float v__43968_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2711 = v__43964; \n    local int v_w_id_43949; \n    if (get_local_id(0) == 0) {\n      v_w_id_43949 = atomic_inc(v_work_idx_2711); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43949 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2709; \n        v_work_idx_2709 = 0; \n        int v_l_id_43950 = atomic_inc(&(v_work_idx_2709)); \n        while((v_l_id_43950 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_43951 = 0; v_i_43951 < 512; v_i_43951 = (1 + v_i_43951)) {\n            float v_tmp_44031 = 0.0f; \n            v__43966 = v_tmp_44031; \n            int v_index_44032 = v__43957[(v_l_id_43950 + (512 * v_MWidthC_1 * v_w_id_43949) + (v_MWidthC_1 * v_i_43951))]; \n            if (v_index_44032 < 0) {\n              v__43968_0 = v__43966; \n            } else {\n              if (v_index_44032 >= v_VLength_3) {\n                v__43968_0 = v__43966; \n              } else {\n                v__43968_0 = v__43959[v_index_44032]; \n              }\n            }\n            v__43970[(511 + (512 * v_MWidthC_1 * v_w_id_43949) + (-1 * v_i_43951) + (512 * v_l_id_43950))] = mult(v__43968_0, v__43958[(v_l_id_43950 + (512 * v_MWidthC_1 * v_w_id_43949) + (v_MWidthC_1 * v_i_43951))]); \n          }\n          /* end map_seq */\n          float v_tmp_44033 = 0.0f; \n          v__43971 = v_tmp_44033; \n          /* reduce_seq */\n          for (int v_i_43952 = 0; v_i_43952 < 512; v_i_43952 = (1 + v_i_43952)) {\n            v__43971 = add(v__43971, v__43970[(v_i_43952 + (512 * v_MWidthC_1 * v_w_id_43949) + (512 * v_l_id_43950))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43953 = 0; \n            v__43975[v_l_id_43950] = id(v__43971); \n          }\n          /* end map_seq */\n          v_l_id_43950 = atomic_inc(&(v_work_idx_2709)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2703; \n        v_work_idx_2703 = 0; \n        int v_l_id_43954 = atomic_inc(&(v_work_idx_2703)); \n        while((v_l_id_43954 < 1)){\n          float v_tmp_44036 = 0.0f; \n          v__14691 = v_tmp_44036; \n          /* reduce_seq */\n          for (int v_i_43955 = 0; v_i_43955 < v_MWidthC_1; v_i_43955 = (1 + v_i_43955)) {\n            v__14691 = add(v__14691, v__43975[(v_i_43955 + (v_MWidthC_1 * v_l_id_43954))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43956 = 0; \n            v__43980[v_w_id_43949] = doubleMultiplyAdd(v__14691, v__43961, v__43960[v_w_id_43949], v__43962); \n          }\n          /* end map_seq */\n          v_l_id_43954 = atomic_inc(&(v_work_idx_2703)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43949 = atomic_inc(v_work_idx_2711); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__43957",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43958",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43959",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43960",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43961",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43962",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43970",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43964",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43980",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43975",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}