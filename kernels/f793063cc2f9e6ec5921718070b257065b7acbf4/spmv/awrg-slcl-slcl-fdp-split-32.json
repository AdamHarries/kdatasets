{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25515, const global float* restrict v__25516, const global float* restrict v__25517, const global float* restrict v__25518, float v__25519, float v__25520, global float* v__25538, global int* v__25522, local float* v__25533, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25524; \n  float v__25526; \n  float v__14691; \n  /* Private Memory */\n  float v__25528_0;\n  \n  float v__25530_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1049 = v__25522; \n    local int v_w_id_25508; \n    if (get_local_id(0) == 0) {\n      v_w_id_25508 = atomic_inc(v_work_idx_1049); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25508 < v_MHeight_2)){\n      for (int v_l_id_25509 = get_local_id(0); v_l_id_25509 < v_MWidthC_1; v_l_id_25509 = (v_l_id_25509 + get_local_size(0))) {\n        float v_tmp_25601 = 0.0f; \n        v__25524 = v_tmp_25601; \n        /* reduce_seq */\n        for (int v_i_25510 = 0; v_i_25510 < 32; v_i_25510 = (1 + v_i_25510)) {\n          float v_tmp_25602 = 0.0f; \n          v__25526 = v_tmp_25602; \n          int v_index_25603 = v__25515[(v_l_id_25509 + (32 * v_MWidthC_1 * v_w_id_25508) + (v_MWidthC_1 * v_i_25510))]; \n          if (v_index_25603 < 0) {\n            v__25528_0 = v__25526; \n          } else {\n            if (v_index_25603 >= v_VLength_3) {\n              v__25528_0 = v__25526; \n            } else {\n              v__25528_0 = v__25517[v_index_25603]; \n            }\n          }\n          v__25530_0 = mult(v__25528_0, v__25516[(v_l_id_25509 + (32 * v_MWidthC_1 * v_w_id_25508) + (v_MWidthC_1 * v_i_25510))]); \n          v__25524 = add(v__25530_0, v__25524); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25511 = 0; \n          v__25533[v_l_id_25509] = id(v__25524); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25512 = get_local_id(0); \n        float v_tmp_25606 = 0.0f; \n        v__14691 = v_tmp_25606; \n        /* reduce_seq */\n        for (int v_i_25513 = 0; v_i_25513 < v_MWidthC_1; v_i_25513 = (1 + v_i_25513)) {\n          v__14691 = add(v__14691, v__25533[(v_i_25513 + (v_MWidthC_1 * v_l_id_25512))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25514 = 0; \n          v__25538[v_w_id_25508] = doubleMultiplyAdd(v__14691, v__25519, v__25518[v_w_id_25508], v__25520); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25508 = atomic_inc(v_work_idx_1049); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25515",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25516",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25517",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25519",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25520",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25522",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25533",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}