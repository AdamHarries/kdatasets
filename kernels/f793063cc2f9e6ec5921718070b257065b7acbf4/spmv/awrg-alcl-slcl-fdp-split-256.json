{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39465, const global float* restrict v__39466, const global float* restrict v__39467, const global float* restrict v__39468, float v__39469, float v__39470, global float* v__39488, global int* v__39472, local float* v__39483, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39474; \n  float v__39476; \n  float v__14691; \n  /* Private Memory */\n  float v__39478_0;\n  \n  float v__39480_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2305 = v__39472; \n    local int v_w_id_39458; \n    if (get_local_id(0) == 0) {\n      v_w_id_39458 = atomic_inc(v_work_idx_2305); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39458 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2303; \n        v_work_idx_2303 = 0; \n        int v_l_id_39459 = atomic_inc(&(v_work_idx_2303)); \n        while((v_l_id_39459 < v_MWidthC_1)){\n          float v_tmp_39543 = 0.0f; \n          v__39474 = v_tmp_39543; \n          /* reduce_seq */\n          for (int v_i_39460 = 0; v_i_39460 < 256; v_i_39460 = (1 + v_i_39460)) {\n            float v_tmp_39544 = 0.0f; \n            v__39476 = v_tmp_39544; \n            int v_index_39545 = v__39465[(v_l_id_39459 + (256 * v_MWidthC_1 * v_w_id_39458) + (v_MWidthC_1 * v_i_39460))]; \n            if (v_index_39545 < 0) {\n              v__39478_0 = v__39476; \n            } else {\n              if (v_index_39545 >= v_VLength_3) {\n                v__39478_0 = v__39476; \n              } else {\n                v__39478_0 = v__39467[v_index_39545]; \n              }\n            }\n            v__39480_0 = mult(v__39478_0, v__39466[(v_l_id_39459 + (256 * v_MWidthC_1 * v_w_id_39458) + (v_MWidthC_1 * v_i_39460))]); \n            v__39474 = add(v__39480_0, v__39474); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39461 = 0; \n            v__39483[v_l_id_39459] = id(v__39474); \n          }\n          /* end map_seq */\n          v_l_id_39459 = atomic_inc(&(v_work_idx_2303)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_39462 = get_local_id(0); \n        float v_tmp_39548 = 0.0f; \n        v__14691 = v_tmp_39548; \n        /* reduce_seq */\n        for (int v_i_39463 = 0; v_i_39463 < v_MWidthC_1; v_i_39463 = (1 + v_i_39463)) {\n          v__14691 = add(v__14691, v__39483[(v_i_39463 + (v_MWidthC_1 * v_l_id_39462))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_39464 = 0; \n          v__39488[v_w_id_39458] = doubleMultiplyAdd(v__14691, v__39469, v__39468[v_w_id_39458], v__39470); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39458 = atomic_inc(v_work_idx_2305); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__39465",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39466",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39467",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39468",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39469",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39470",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39472",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39488",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39483",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}