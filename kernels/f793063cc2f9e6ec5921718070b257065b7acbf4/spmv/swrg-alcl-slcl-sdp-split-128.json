{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32930, const global float* restrict v__32931, const global float* restrict v__32932, const global float* restrict v__32933, float v__32934, float v__32935, global float* v__32952, global float* v__32942, local float* v__32947, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32938; \n  float v__32943; \n  float v__14691; \n  /* Private Memory */\n  float v__32940_0;\n  \n  for (int v_wg_id_32922 = get_group_id(0); v_wg_id_32922 < v_MHeight_2; v_wg_id_32922 = (v_wg_id_32922 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1711; \n      v_work_idx_1711 = 0; \n      int v_l_id_32923 = atomic_inc(&(v_work_idx_1711)); \n      while((v_l_id_32923 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_32924 = 0; v_i_32924 < 128; v_i_32924 = (1 + v_i_32924)) {\n          float v_tmp_33009 = 0.0f; \n          v__32938 = v_tmp_33009; \n          int v_index_33010 = v__32930[(v_l_id_32923 + (128 * v_MWidthC_1 * v_wg_id_32922) + (v_MWidthC_1 * v_i_32924))]; \n          if (v_index_33010 < 0) {\n            v__32940_0 = v__32938; \n          } else {\n            if (v_index_33010 >= v_VLength_3) {\n              v__32940_0 = v__32938; \n            } else {\n              v__32940_0 = v__32932[v_index_33010]; \n            }\n          }\n          v__32942[(127 + (128 * v_MWidthC_1 * v_wg_id_32922) + (-1 * v_i_32924) + (128 * v_l_id_32923))] = mult(v__32940_0, v__32931[(v_l_id_32923 + (128 * v_MWidthC_1 * v_wg_id_32922) + (v_MWidthC_1 * v_i_32924))]); \n        }\n        /* end map_seq */\n        float v_tmp_33011 = 0.0f; \n        v__32943 = v_tmp_33011; \n        /* reduce_seq */\n        for (int v_i_32925 = 0; v_i_32925 < 128; v_i_32925 = (1 + v_i_32925)) {\n          v__32943 = add(v__32943, v__32942[(v_i_32925 + (128 * v_MWidthC_1 * v_wg_id_32922) + (128 * v_l_id_32923))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_32926 = 0; \n          v__32947[v_l_id_32923] = id(v__32943); \n        }\n        /* end map_seq */\n        v_l_id_32923 = atomic_inc(&(v_work_idx_1711)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_32927 = get_local_id(0); \n      float v_tmp_33014 = 0.0f; \n      v__14691 = v_tmp_33014; \n      /* reduce_seq */\n      for (int v_i_32928 = 0; v_i_32928 < v_MWidthC_1; v_i_32928 = (1 + v_i_32928)) {\n        v__14691 = add(v__14691, v__32947[(v_i_32928 + (v_MWidthC_1 * v_l_id_32927))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_32929 = 0; \n        v__32952[v_wg_id_32922] = doubleMultiplyAdd(v__14691, v__32934, v__32933[v_wg_id_32922], v__32935); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__32930",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32931",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32932",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32933",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32934",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32935",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32942",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__32952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32947",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}