{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38913, const global float* restrict v__38914, const global float* restrict v__38915, const global float* restrict v__38916, float v__38917, float v__38918, global float* v__38932, global float* v__38926, global int* v__38920, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__38922; \n  float v__38927; \n  /* Private Memory */\n  float v__38924_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2249 = v__38920; \n    local int v_w_id_38908; \n    if (get_local_id(0) == 0) {\n      v_w_id_38908 = atomic_inc(v_work_idx_2249); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38908 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2247; \n        v_work_idx_2247 = 0; \n        int v_l_id_38909 = atomic_inc(&(v_work_idx_2247)); \n        while((v_l_id_38909 < 256)){\n          /* map_seq */\n          for (int v_i_38910 = 0; v_i_38910 < v_MWidthC_1; v_i_38910 = (1 + v_i_38910)) {\n            float v_tmp_38971 = 0.0f; \n            v__38922 = v_tmp_38971; \n            int v_index_38972 = v__38913[(v_i_38910 + (256 * v_MWidthC_1 * v_w_id_38908) + (v_MWidthC_1 * v_l_id_38909))]; \n            if (v_index_38972 < 0) {\n              v__38924_0 = v__38922; \n            } else {\n              if (v_index_38972 >= v_VLength_3) {\n                v__38924_0 = v__38922; \n              } else {\n                v__38924_0 = v__38915[v_index_38972]; \n              }\n            }\n            v__38926[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_38908) + (-1 * v_i_38910) + (v_MWidthC_1 * v_l_id_38909))] = mult(v__38924_0, v__38914[(v_i_38910 + (256 * v_MWidthC_1 * v_w_id_38908) + (v_MWidthC_1 * v_l_id_38909))]); \n          }\n          /* end map_seq */\n          float v_tmp_38973 = 0.0f; \n          v__38927 = v_tmp_38973; \n          /* reduce_seq */\n          for (int v_i_38911 = 0; v_i_38911 < v_MWidthC_1; v_i_38911 = (1 + v_i_38911)) {\n            v__38927 = add(v__38927, v__38926[(v_i_38911 + (256 * v_MWidthC_1 * v_w_id_38908) + (v_MWidthC_1 * v_l_id_38909))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38912 = 0; \n            v__38932[(v_l_id_38909 + (256 * v_w_id_38908))] = doubleMultiplyAdd(v__38927, v__38917, v__38916[(v_l_id_38909 + (256 * v_w_id_38908))], v__38918); \n          }\n          /* end map_seq */\n          v_l_id_38909 = atomic_inc(&(v_work_idx_2247)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38908 = atomic_inc(v_work_idx_2249); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__38913",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38914",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38915",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38916",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38917",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38918",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38920",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38932",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}