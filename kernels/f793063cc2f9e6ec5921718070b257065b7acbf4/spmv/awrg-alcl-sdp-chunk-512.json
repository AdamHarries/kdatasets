{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43205, const global float* restrict v__43206, const global float* restrict v__43207, const global float* restrict v__43208, float v__43209, float v__43210, global float* v__43224, global float* v__43218, global int* v__43212, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43214; \n  float v__43219; \n  /* Private Memory */\n  float v__43216_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2633 = v__43212; \n    local int v_w_id_43200; \n    if (get_local_id(0) == 0) {\n      v_w_id_43200 = atomic_inc(v_work_idx_2633); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43200 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2631; \n        v_work_idx_2631 = 0; \n        int v_l_id_43201 = atomic_inc(&(v_work_idx_2631)); \n        while((v_l_id_43201 < 512)){\n          /* map_seq */\n          for (int v_i_43202 = 0; v_i_43202 < v_MWidthC_1; v_i_43202 = (1 + v_i_43202)) {\n            float v_tmp_43263 = 0.0f; \n            v__43214 = v_tmp_43263; \n            int v_index_43264 = v__43205[(v_i_43202 + (512 * v_MWidthC_1 * v_w_id_43200) + (v_MWidthC_1 * v_l_id_43201))]; \n            if (v_index_43264 < 0) {\n              v__43216_0 = v__43214; \n            } else {\n              if (v_index_43264 >= v_VLength_3) {\n                v__43216_0 = v__43214; \n              } else {\n                v__43216_0 = v__43207[v_index_43264]; \n              }\n            }\n            v__43218[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_43200) + (-1 * v_i_43202) + (v_MWidthC_1 * v_l_id_43201))] = mult(v__43216_0, v__43206[(v_i_43202 + (512 * v_MWidthC_1 * v_w_id_43200) + (v_MWidthC_1 * v_l_id_43201))]); \n          }\n          /* end map_seq */\n          float v_tmp_43265 = 0.0f; \n          v__43219 = v_tmp_43265; \n          /* reduce_seq */\n          for (int v_i_43203 = 0; v_i_43203 < v_MWidthC_1; v_i_43203 = (1 + v_i_43203)) {\n            v__43219 = add(v__43219, v__43218[(v_i_43203 + (512 * v_MWidthC_1 * v_w_id_43200) + (v_MWidthC_1 * v_l_id_43201))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43204 = 0; \n            v__43224[(v_l_id_43201 + (512 * v_w_id_43200))] = doubleMultiplyAdd(v__43219, v__43209, v__43208[(v_l_id_43201 + (512 * v_w_id_43200))], v__43210); \n          }\n          /* end map_seq */\n          v_l_id_43201 = atomic_inc(&(v_work_idx_2631)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43200 = atomic_inc(v_work_idx_2633); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__43205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43218",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43212",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43224",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}