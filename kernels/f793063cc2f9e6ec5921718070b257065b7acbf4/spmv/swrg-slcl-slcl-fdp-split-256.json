{
  "name" : "swrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36240, const global float* restrict v__36241, const global float* restrict v__36242, const global float* restrict v__36243, float v__36244, float v__36245, global float* v__36262, local float* v__36257, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__36248; \n  float v__36250; \n  float v__14691; \n  /* Private Memory */\n  float v__36252_0;\n  \n  float v__36254_0;\n  \n  for (int v_wg_id_36233 = get_group_id(0); v_wg_id_36233 < v_MHeight_2; v_wg_id_36233 = (v_wg_id_36233 + get_num_groups(0))) {\n    for (int v_l_id_36234 = get_local_id(0); v_l_id_36234 < v_MWidthC_1; v_l_id_36234 = (v_l_id_36234 + get_local_size(0))) {\n      float v_tmp_36327 = 0.0f; \n      v__36248 = v_tmp_36327; \n      /* reduce_seq */\n      for (int v_i_36235 = 0; v_i_36235 < 256; v_i_36235 = (1 + v_i_36235)) {\n        float v_tmp_36328 = 0.0f; \n        v__36250 = v_tmp_36328; \n        int v_index_36329 = v__36240[(v_l_id_36234 + (256 * v_MWidthC_1 * v_wg_id_36233) + (v_MWidthC_1 * v_i_36235))]; \n        if (v_index_36329 < 0) {\n          v__36252_0 = v__36250; \n        } else {\n          if (v_index_36329 >= v_VLength_3) {\n            v__36252_0 = v__36250; \n          } else {\n            v__36252_0 = v__36242[v_index_36329]; \n          }\n        }\n        v__36254_0 = mult(v__36252_0, v__36241[(v_l_id_36234 + (256 * v_MWidthC_1 * v_wg_id_36233) + (v_MWidthC_1 * v_i_36235))]); \n        v__36248 = add(v__36254_0, v__36248); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36236 = 0; \n        v__36257[v_l_id_36234] = id(v__36248); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_36237 = get_local_id(0); \n      float v_tmp_36332 = 0.0f; \n      v__14691 = v_tmp_36332; \n      /* reduce_seq */\n      for (int v_i_36238 = 0; v_i_36238 < v_MWidthC_1; v_i_36238 = (1 + v_i_36238)) {\n        v__14691 = add(v__14691, v__36257[(v_i_36238 + (v_MWidthC_1 * v_l_id_36237))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36239 = 0; \n        v__36262[v_wg_id_36233] = doubleMultiplyAdd(v__14691, v__36244, v__36243[v_wg_id_36233], v__36245); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__36240",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36241",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36242",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36243",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36244",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36245",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__36262",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36257",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}