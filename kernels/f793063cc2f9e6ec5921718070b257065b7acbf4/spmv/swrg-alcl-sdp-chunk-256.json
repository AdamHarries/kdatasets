{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36767, const global float* restrict v__36768, const global float* restrict v__36769, const global float* restrict v__36770, float v__36771, float v__36772, global float* v__36785, global float* v__36779, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__36775; \n  float v__36780; \n  /* Private Memory */\n  float v__36777_0;\n  \n  for (int v_wg_id_36762 = get_group_id(0); v_wg_id_36762 < ((v_MHeight_2)/(256)); v_wg_id_36762 = (v_wg_id_36762 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2055; \n      v_work_idx_2055 = 0; \n      int v_l_id_36763 = atomic_inc(&(v_work_idx_2055)); \n      while((v_l_id_36763 < 256)){\n        /* map_seq */\n        for (int v_i_36764 = 0; v_i_36764 < v_MWidthC_1; v_i_36764 = (1 + v_i_36764)) {\n          float v_tmp_36825 = 0.0f; \n          v__36775 = v_tmp_36825; \n          int v_index_36826 = v__36767[(v_i_36764 + (256 * v_MWidthC_1 * v_wg_id_36762) + (v_MWidthC_1 * v_l_id_36763))]; \n          if (v_index_36826 < 0) {\n            v__36777_0 = v__36775; \n          } else {\n            if (v_index_36826 >= v_VLength_3) {\n              v__36777_0 = v__36775; \n            } else {\n              v__36777_0 = v__36769[v_index_36826]; \n            }\n          }\n          v__36779[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_36762) + (-1 * v_i_36764) + (v_MWidthC_1 * v_l_id_36763))] = mult(v__36777_0, v__36768[(v_i_36764 + (256 * v_MWidthC_1 * v_wg_id_36762) + (v_MWidthC_1 * v_l_id_36763))]); \n        }\n        /* end map_seq */\n        float v_tmp_36827 = 0.0f; \n        v__36780 = v_tmp_36827; \n        /* reduce_seq */\n        for (int v_i_36765 = 0; v_i_36765 < v_MWidthC_1; v_i_36765 = (1 + v_i_36765)) {\n          v__36780 = add(v__36780, v__36779[(v_i_36765 + (256 * v_MWidthC_1 * v_wg_id_36762) + (v_MWidthC_1 * v_l_id_36763))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_36766 = 0; \n          v__36785[(v_l_id_36763 + (256 * v_wg_id_36762))] = doubleMultiplyAdd(v__36780, v__36771, v__36770[(v_l_id_36763 + (256 * v_wg_id_36762))], v__36772); \n        }\n        /* end map_seq */\n        v_l_id_36763 = atomic_inc(&(v_work_idx_2055)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__36767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36768",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36769",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36770",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36771",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36772",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__36785",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}