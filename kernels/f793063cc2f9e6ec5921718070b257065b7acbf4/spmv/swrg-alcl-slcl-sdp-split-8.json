{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15762, const global float* restrict v__15763, const global float* restrict v__15764, const global float* restrict v__15765, float v__15766, float v__15767, global float* v__15784, global float* v__15774, local float* v__15779, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15770; \n  float v__15775; \n  float v__14691; \n  /* Private Memory */\n  float v__15772_0;\n  \n  for (int v_wg_id_15754 = get_group_id(0); v_wg_id_15754 < v_MHeight_2; v_wg_id_15754 = (v_wg_id_15754 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_175; \n      v_work_idx_175 = 0; \n      int v_l_id_15755 = atomic_inc(&(v_work_idx_175)); \n      while((v_l_id_15755 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_15756 = 0; v_i_15756 < 8; v_i_15756 = (1 + v_i_15756)) {\n          float v_tmp_15841 = 0.0f; \n          v__15770 = v_tmp_15841; \n          int v_index_15842 = v__15762[(v_l_id_15755 + (8 * v_MWidthC_1 * v_wg_id_15754) + (v_MWidthC_1 * v_i_15756))]; \n          if (v_index_15842 < 0) {\n            v__15772_0 = v__15770; \n          } else {\n            if (v_index_15842 >= v_VLength_3) {\n              v__15772_0 = v__15770; \n            } else {\n              v__15772_0 = v__15764[v_index_15842]; \n            }\n          }\n          v__15774[(7 + (8 * v_MWidthC_1 * v_wg_id_15754) + (-1 * v_i_15756) + (8 * v_l_id_15755))] = mult(v__15772_0, v__15763[(v_l_id_15755 + (8 * v_MWidthC_1 * v_wg_id_15754) + (v_MWidthC_1 * v_i_15756))]); \n        }\n        /* end map_seq */\n        float v_tmp_15843 = 0.0f; \n        v__15775 = v_tmp_15843; \n        /* reduce_seq */\n        for (int v_i_15757 = 0; v_i_15757 < 8; v_i_15757 = (1 + v_i_15757)) {\n          v__15775 = add(v__15775, v__15774[(v_i_15757 + (8 * v_MWidthC_1 * v_wg_id_15754) + (8 * v_l_id_15755))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15758 = 0; \n          v__15779[v_l_id_15755] = id(v__15775); \n        }\n        /* end map_seq */\n        v_l_id_15755 = atomic_inc(&(v_work_idx_175)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_15759 = get_local_id(0); \n      float v_tmp_15846 = 0.0f; \n      v__14691 = v_tmp_15846; \n      /* reduce_seq */\n      for (int v_i_15760 = 0; v_i_15760 < v_MWidthC_1; v_i_15760 = (1 + v_i_15760)) {\n        v__14691 = add(v__14691, v__15779[(v_i_15760 + (v_MWidthC_1 * v_l_id_15759))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_15761 = 0; \n        v__15784[v_wg_id_15754] = doubleMultiplyAdd(v__14691, v__15766, v__15765[v_wg_id_15754], v__15767); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15762",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15763",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15764",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15765",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15766",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15767",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15774",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__15784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15779",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}