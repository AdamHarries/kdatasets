{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17147, const global float* restrict v__17148, const global float* restrict v__17149, const global float* restrict v__17150, float v__17151, float v__17152, global float* v__17170, global float* v__17160, global int* v__17154, local float* v__17165, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17156; \n  float v__17161; \n  float v__14691; \n  /* Private Memory */\n  float v__17158_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_301 = v__17154; \n    local int v_w_id_17139; \n    if (get_local_id(0) == 0) {\n      v_w_id_17139 = atomic_inc(v_work_idx_301); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17139 < v_MHeight_2)){\n      for (int v_l_id_17140 = get_local_id(0); v_l_id_17140 < v_MWidthC_1; v_l_id_17140 = (v_l_id_17140 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_17141 = 0; v_i_17141 < 8; v_i_17141 = (1 + v_i_17141)) {\n          float v_tmp_17229 = 0.0f; \n          v__17156 = v_tmp_17229; \n          int v_index_17230 = v__17147[(v_l_id_17140 + (8 * v_MWidthC_1 * v_w_id_17139) + (v_MWidthC_1 * v_i_17141))]; \n          if (v_index_17230 < 0) {\n            v__17158_0 = v__17156; \n          } else {\n            if (v_index_17230 >= v_VLength_3) {\n              v__17158_0 = v__17156; \n            } else {\n              v__17158_0 = v__17149[v_index_17230]; \n            }\n          }\n          v__17160[(7 + (8 * v_MWidthC_1 * v_w_id_17139) + (-1 * v_i_17141) + (8 * v_l_id_17140))] = mult(v__17158_0, v__17148[(v_l_id_17140 + (8 * v_MWidthC_1 * v_w_id_17139) + (v_MWidthC_1 * v_i_17141))]); \n        }\n        /* end map_seq */\n        float v_tmp_17231 = 0.0f; \n        v__17161 = v_tmp_17231; \n        /* reduce_seq */\n        for (int v_i_17142 = 0; v_i_17142 < 8; v_i_17142 = (1 + v_i_17142)) {\n          v__17161 = add(v__17161, v__17160[(v_i_17142 + (8 * v_MWidthC_1 * v_w_id_17139) + (8 * v_l_id_17140))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17143 = 0; \n          v__17165[v_l_id_17140] = id(v__17161); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_294; \n        v_work_idx_294 = 0; \n        int v_l_id_17144 = atomic_inc(&(v_work_idx_294)); \n        while((v_l_id_17144 < 1)){\n          float v_tmp_17234 = 0.0f; \n          v__14691 = v_tmp_17234; \n          /* reduce_seq */\n          for (int v_i_17145 = 0; v_i_17145 < v_MWidthC_1; v_i_17145 = (1 + v_i_17145)) {\n            v__14691 = add(v__14691, v__17165[(v_i_17145 + (v_MWidthC_1 * v_l_id_17144))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_17146 = 0; \n            v__17170[v_w_id_17139] = doubleMultiplyAdd(v__14691, v__17151, v__17150[v_w_id_17139], v__17152); \n          }\n          /* end map_seq */\n          v_l_id_17144 = atomic_inc(&(v_work_idx_294)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17139 = atomic_inc(v_work_idx_301); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17147",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17148",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17149",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17151",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17152",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17160",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17154",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17165",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}