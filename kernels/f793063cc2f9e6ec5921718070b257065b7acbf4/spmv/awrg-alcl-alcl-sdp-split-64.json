{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31081, const global float* restrict v__31082, const global float* restrict v__31083, const global float* restrict v__31084, float v__31085, float v__31086, global float* v__31104, global float* v__31094, global int* v__31088, local float* v__31099, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31090; \n  float v__31095; \n  float v__14691; \n  /* Private Memory */\n  float v__31092_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1559 = v__31088; \n    local int v_w_id_31073; \n    if (get_local_id(0) == 0) {\n      v_w_id_31073 = atomic_inc(v_work_idx_1559); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31073 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1557; \n        v_work_idx_1557 = 0; \n        int v_l_id_31074 = atomic_inc(&(v_work_idx_1557)); \n        while((v_l_id_31074 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_31075 = 0; v_i_31075 < 64; v_i_31075 = (1 + v_i_31075)) {\n            float v_tmp_31155 = 0.0f; \n            v__31090 = v_tmp_31155; \n            int v_index_31156 = v__31081[(v_l_id_31074 + (64 * v_MWidthC_1 * v_w_id_31073) + (v_MWidthC_1 * v_i_31075))]; \n            if (v_index_31156 < 0) {\n              v__31092_0 = v__31090; \n            } else {\n              if (v_index_31156 >= v_VLength_3) {\n                v__31092_0 = v__31090; \n              } else {\n                v__31092_0 = v__31083[v_index_31156]; \n              }\n            }\n            v__31094[(63 + (64 * v_MWidthC_1 * v_w_id_31073) + (-1 * v_i_31075) + (64 * v_l_id_31074))] = mult(v__31092_0, v__31082[(v_l_id_31074 + (64 * v_MWidthC_1 * v_w_id_31073) + (v_MWidthC_1 * v_i_31075))]); \n          }\n          /* end map_seq */\n          float v_tmp_31157 = 0.0f; \n          v__31095 = v_tmp_31157; \n          /* reduce_seq */\n          for (int v_i_31076 = 0; v_i_31076 < 64; v_i_31076 = (1 + v_i_31076)) {\n            v__31095 = add(v__31095, v__31094[(v_i_31076 + (64 * v_MWidthC_1 * v_w_id_31073) + (64 * v_l_id_31074))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31077 = 0; \n            v__31099[v_l_id_31074] = id(v__31095); \n          }\n          /* end map_seq */\n          v_l_id_31074 = atomic_inc(&(v_work_idx_1557)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1551; \n        v_work_idx_1551 = 0; \n        int v_l_id_31078 = atomic_inc(&(v_work_idx_1551)); \n        while((v_l_id_31078 < 1)){\n          float v_tmp_31160 = 0.0f; \n          v__14691 = v_tmp_31160; \n          /* reduce_seq */\n          for (int v_i_31079 = 0; v_i_31079 < v_MWidthC_1; v_i_31079 = (1 + v_i_31079)) {\n            v__14691 = add(v__14691, v__31099[(v_i_31079 + (v_MWidthC_1 * v_l_id_31078))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31080 = 0; \n            v__31104[v_w_id_31073] = doubleMultiplyAdd(v__14691, v__31085, v__31084[v_w_id_31073], v__31086); \n          }\n          /* end map_seq */\n          v_l_id_31078 = atomic_inc(&(v_work_idx_1551)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31073 = atomic_inc(v_work_idx_1559); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__31081",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31082",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31083",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31084",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31085",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31086",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31094",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31088",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31104",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31099",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}