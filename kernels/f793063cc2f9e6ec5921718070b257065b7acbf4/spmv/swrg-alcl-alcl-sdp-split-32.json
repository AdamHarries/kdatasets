{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24646, const global float* restrict v__24647, const global float* restrict v__24648, const global float* restrict v__24649, float v__24650, float v__24651, global float* v__24668, global float* v__24658, local float* v__24663, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24654; \n  float v__24659; \n  float v__14691; \n  /* Private Memory */\n  float v__24656_0;\n  \n  for (int v_wg_id_24638 = get_group_id(0); v_wg_id_24638 < v_MHeight_2; v_wg_id_24638 = (v_wg_id_24638 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_972; \n      v_work_idx_972 = 0; \n      int v_l_id_24639 = atomic_inc(&(v_work_idx_972)); \n      while((v_l_id_24639 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_24640 = 0; v_i_24640 < 32; v_i_24640 = (1 + v_i_24640)) {\n          float v_tmp_24721 = 0.0f; \n          v__24654 = v_tmp_24721; \n          int v_index_24722 = v__24646[(v_l_id_24639 + (32 * v_MWidthC_1 * v_wg_id_24638) + (v_MWidthC_1 * v_i_24640))]; \n          if (v_index_24722 < 0) {\n            v__24656_0 = v__24654; \n          } else {\n            if (v_index_24722 >= v_VLength_3) {\n              v__24656_0 = v__24654; \n            } else {\n              v__24656_0 = v__24648[v_index_24722]; \n            }\n          }\n          v__24658[(31 + (32 * v_MWidthC_1 * v_wg_id_24638) + (-1 * v_i_24640) + (32 * v_l_id_24639))] = mult(v__24656_0, v__24647[(v_l_id_24639 + (32 * v_MWidthC_1 * v_wg_id_24638) + (v_MWidthC_1 * v_i_24640))]); \n        }\n        /* end map_seq */\n        float v_tmp_24723 = 0.0f; \n        v__24659 = v_tmp_24723; \n        /* reduce_seq */\n        for (int v_i_24641 = 0; v_i_24641 < 32; v_i_24641 = (1 + v_i_24641)) {\n          v__24659 = add(v__24659, v__24658[(v_i_24641 + (32 * v_MWidthC_1 * v_wg_id_24638) + (32 * v_l_id_24639))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24642 = 0; \n          v__24663[v_l_id_24639] = id(v__24659); \n        }\n        /* end map_seq */\n        v_l_id_24639 = atomic_inc(&(v_work_idx_972)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_966; \n      v_work_idx_966 = 0; \n      int v_l_id_24643 = atomic_inc(&(v_work_idx_966)); \n      while((v_l_id_24643 < 1)){\n        float v_tmp_24726 = 0.0f; \n        v__14691 = v_tmp_24726; \n        /* reduce_seq */\n        for (int v_i_24644 = 0; v_i_24644 < v_MWidthC_1; v_i_24644 = (1 + v_i_24644)) {\n          v__14691 = add(v__14691, v__24663[(v_i_24644 + (v_MWidthC_1 * v_l_id_24643))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24645 = 0; \n          v__24668[v_wg_id_24638] = doubleMultiplyAdd(v__14691, v__24650, v__24649[v_wg_id_24638], v__24651); \n        }\n        /* end map_seq */\n        v_l_id_24643 = atomic_inc(&(v_work_idx_966)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24646",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24647",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24648",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24649",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24650",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24651",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24658",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__24668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24663",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}