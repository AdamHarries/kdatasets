{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43101, const global float* restrict v__43102, const global float* restrict v__43103, const global float* restrict v__43104, float v__43105, float v__43106, global float* v__43126, global int* v__43108, local float* v__43121, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43110; \n  float v__43112; \n  float v__14691; \n  /* Private Memory */\n  float v__43114_0;\n  \n  float v__43116_0;\n  \n  int v__43120_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2625 = v__43108; \n    local int v_w_id_43094; \n    if (get_local_id(0) == 0) {\n      v_w_id_43094 = atomic_inc(v_work_idx_2625); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43094 < v_MHeight_2)){\n      for (int v_l_id_43095 = get_local_id(0); v_l_id_43095 < v_MWidthC_1; v_l_id_43095 = (v_l_id_43095 + get_local_size(0))) {\n        float v_tmp_43188 = 0.0f; \n        v__43110 = v_tmp_43188; \n        /* reduce_while_seq */\n        for (int v_i_43096 = 0; v_i_43096 < 512; v_i_43096 = (1 + v_i_43096)) {\n          v__43120_0 = check(v__43110, v__43101[(v_l_id_43095 + (512 * v_MWidthC_1 * v_w_id_43094) + (v_MWidthC_1 * v_i_43096))]); \n          if (v__43120_0) {\n          } else {\n            break;\n          }\n          float v_tmp_43189 = 0.0f; \n          v__43112 = v_tmp_43189; \n          int v_index_43190 = v__43101[(v_l_id_43095 + (512 * v_MWidthC_1 * v_w_id_43094) + (v_MWidthC_1 * v_i_43096))]; \n          if (v_index_43190 < 0) {\n            v__43114_0 = v__43112; \n          } else {\n            if (v_index_43190 >= v_VLength_3) {\n              v__43114_0 = v__43112; \n            } else {\n              v__43114_0 = v__43103[v_index_43190]; \n            }\n          }\n          v__43116_0 = mult(v__43114_0, v__43102[(v_l_id_43095 + (512 * v_MWidthC_1 * v_w_id_43094) + (v_MWidthC_1 * v_i_43096))]); \n          v__43110 = add(v__43116_0, v__43110); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_43097 = 0; \n          v__43121[v_l_id_43095] = id(v__43110); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2619; \n        v_work_idx_2619 = 0; \n        int v_l_id_43098 = atomic_inc(&(v_work_idx_2619)); \n        while((v_l_id_43098 < 1)){\n          float v_tmp_43193 = 0.0f; \n          v__14691 = v_tmp_43193; \n          /* reduce_seq */\n          for (int v_i_43099 = 0; v_i_43099 < v_MWidthC_1; v_i_43099 = (1 + v_i_43099)) {\n            v__14691 = add(v__14691, v__43121[(v_i_43099 + (v_MWidthC_1 * v_l_id_43098))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43100 = 0; \n            v__43126[v_w_id_43094] = doubleMultiplyAdd(v__14691, v__43105, v__43104[v_w_id_43094], v__43106); \n          }\n          /* end map_seq */\n          v_l_id_43098 = atomic_inc(&(v_work_idx_2619)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43094 = atomic_inc(v_work_idx_2625); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__43101",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43102",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43103",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43104",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43105",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43106",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43108",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43126",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43121",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}