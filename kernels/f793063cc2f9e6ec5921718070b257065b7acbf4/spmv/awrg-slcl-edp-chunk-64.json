{
  "name" : "awrg-slcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29371, const global float* restrict v__29372, const global float* restrict v__29373, const global float* restrict v__29374, float v__29375, float v__29376, global float* v__29392, global int* v__29378, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29379; \n  float v__29382; \n  /* Private Memory */\n  float v__29384_0;\n  \n  float v__29386_0;\n  \n  int v__29390_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1396 = v__29378; \n    local int v_w_id_29367; \n    if (get_local_id(0) == 0) {\n      v_w_id_29367 = atomic_inc(v_work_idx_1396); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29367 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_29368 = get_local_id(0); v_l_id_29368 < 64; v_l_id_29368 = (v_l_id_29368 + get_local_size(0))) {\n        float v_tmp_29439 = 0.0f; \n        v__29379 = v_tmp_29439; \n        /* reduce_while_seq */\n        for (int v_i_29369 = 0; v_i_29369 < v_MWidthC_1; v_i_29369 = (1 + v_i_29369)) {\n          v__29390_0 = check(v__29379, v__29371[(v_i_29369 + (64 * v_MWidthC_1 * v_w_id_29367) + (v_MWidthC_1 * v_l_id_29368))]); \n          if (v__29390_0) {\n          } else {\n            break;\n          }\n          float v_tmp_29440 = 0.0f; \n          v__29382 = v_tmp_29440; \n          int v_index_29441 = v__29371[(v_i_29369 + (64 * v_MWidthC_1 * v_w_id_29367) + (v_MWidthC_1 * v_l_id_29368))]; \n          if (v_index_29441 < 0) {\n            v__29384_0 = v__29382; \n          } else {\n            if (v_index_29441 >= v_VLength_3) {\n              v__29384_0 = v__29382; \n            } else {\n              v__29384_0 = v__29373[v_index_29441]; \n            }\n          }\n          v__29386_0 = mult(v__29384_0, v__29372[(v_i_29369 + (64 * v_MWidthC_1 * v_w_id_29367) + (v_MWidthC_1 * v_l_id_29368))]); \n          v__29379 = add(v__29386_0, v__29379); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29370 = 0; \n          v__29392[(v_l_id_29368 + (64 * v_w_id_29367))] = doubleMultiplyAdd(v__29379, v__29375, v__29374[(v_l_id_29368 + (64 * v_w_id_29367))], v__29376); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_29367 = atomic_inc(v_work_idx_1396); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__29371",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29372",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29373",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29375",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29376",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29378",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}