{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28938, const global float* restrict v__28939, const global float* restrict v__28940, const global float* restrict v__28941, float v__28942, float v__28943, global float* v__28960, global float* v__28950, local float* v__28955, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28946; \n  float v__28951; \n  float v__14691; \n  /* Private Memory */\n  float v__28948_0;\n  \n  for (int v_wg_id_28930 = get_group_id(0); v_wg_id_28930 < v_MHeight_2; v_wg_id_28930 = (v_wg_id_28930 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1356; \n      v_work_idx_1356 = 0; \n      int v_l_id_28931 = atomic_inc(&(v_work_idx_1356)); \n      while((v_l_id_28931 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_28932 = 0; v_i_28932 < 64; v_i_28932 = (1 + v_i_28932)) {\n          float v_tmp_29013 = 0.0f; \n          v__28946 = v_tmp_29013; \n          int v_index_29014 = v__28938[(v_l_id_28931 + (64 * v_MWidthC_1 * v_wg_id_28930) + (v_MWidthC_1 * v_i_28932))]; \n          if (v_index_29014 < 0) {\n            v__28948_0 = v__28946; \n          } else {\n            if (v_index_29014 >= v_VLength_3) {\n              v__28948_0 = v__28946; \n            } else {\n              v__28948_0 = v__28940[v_index_29014]; \n            }\n          }\n          v__28950[(63 + (64 * v_MWidthC_1 * v_wg_id_28930) + (-1 * v_i_28932) + (64 * v_l_id_28931))] = mult(v__28948_0, v__28939[(v_l_id_28931 + (64 * v_MWidthC_1 * v_wg_id_28930) + (v_MWidthC_1 * v_i_28932))]); \n        }\n        /* end map_seq */\n        float v_tmp_29015 = 0.0f; \n        v__28951 = v_tmp_29015; \n        /* reduce_seq */\n        for (int v_i_28933 = 0; v_i_28933 < 64; v_i_28933 = (1 + v_i_28933)) {\n          v__28951 = add(v__28951, v__28950[(v_i_28933 + (64 * v_MWidthC_1 * v_wg_id_28930) + (64 * v_l_id_28931))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28934 = 0; \n          v__28955[v_l_id_28931] = id(v__28951); \n        }\n        /* end map_seq */\n        v_l_id_28931 = atomic_inc(&(v_work_idx_1356)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1350; \n      v_work_idx_1350 = 0; \n      int v_l_id_28935 = atomic_inc(&(v_work_idx_1350)); \n      while((v_l_id_28935 < 1)){\n        float v_tmp_29018 = 0.0f; \n        v__14691 = v_tmp_29018; \n        /* reduce_seq */\n        for (int v_i_28936 = 0; v_i_28936 < v_MWidthC_1; v_i_28936 = (1 + v_i_28936)) {\n          v__14691 = add(v__14691, v__28955[(v_i_28936 + (v_MWidthC_1 * v_l_id_28935))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28937 = 0; \n          v__28960[v_wg_id_28930] = doubleMultiplyAdd(v__14691, v__28942, v__28941[v_wg_id_28930], v__28943); \n        }\n        /* end map_seq */\n        v_l_id_28935 = atomic_inc(&(v_work_idx_1350)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28938",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28939",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28940",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28941",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28942",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28943",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28950",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__28960",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28955",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}