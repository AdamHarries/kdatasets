{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35559, const global float* restrict v__35560, const global float* restrict v__35561, const global float* restrict v__35562, float v__35563, float v__35564, global float* v__35584, global int* v__35566, local float* v__35579, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__35568; \n  float v__35570; \n  float v__14691; \n  /* Private Memory */\n  float v__35572_0;\n  \n  float v__35574_0;\n  \n  int v__35578_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1965 = v__35566; \n    local int v_w_id_35552; \n    if (get_local_id(0) == 0) {\n      v_w_id_35552 = atomic_inc(v_work_idx_1965); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35552 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1963; \n        v_work_idx_1963 = 0; \n        int v_l_id_35553 = atomic_inc(&(v_work_idx_1963)); \n        while((v_l_id_35553 < v_MWidthC_1)){\n          float v_tmp_35638 = 0.0f; \n          v__35568 = v_tmp_35638; \n          /* reduce_while_seq */\n          for (int v_i_35554 = 0; v_i_35554 < 128; v_i_35554 = (1 + v_i_35554)) {\n            v__35578_0 = check(v__35568, v__35559[(v_l_id_35553 + (128 * v_MWidthC_1 * v_w_id_35552) + (v_MWidthC_1 * v_i_35554))]); \n            if (v__35578_0) {\n            } else {\n              break;\n            }\n            float v_tmp_35639 = 0.0f; \n            v__35570 = v_tmp_35639; \n            int v_index_35640 = v__35559[(v_l_id_35553 + (128 * v_MWidthC_1 * v_w_id_35552) + (v_MWidthC_1 * v_i_35554))]; \n            if (v_index_35640 < 0) {\n              v__35572_0 = v__35570; \n            } else {\n              if (v_index_35640 >= v_VLength_3) {\n                v__35572_0 = v__35570; \n              } else {\n                v__35572_0 = v__35561[v_index_35640]; \n              }\n            }\n            v__35574_0 = mult(v__35572_0, v__35560[(v_l_id_35553 + (128 * v_MWidthC_1 * v_w_id_35552) + (v_MWidthC_1 * v_i_35554))]); \n            v__35568 = add(v__35574_0, v__35568); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35555 = 0; \n            v__35579[v_l_id_35553] = id(v__35568); \n          }\n          /* end map_seq */\n          v_l_id_35553 = atomic_inc(&(v_work_idx_1963)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1958; \n        v_work_idx_1958 = 0; \n        int v_l_id_35556 = atomic_inc(&(v_work_idx_1958)); \n        while((v_l_id_35556 < 1)){\n          float v_tmp_35643 = 0.0f; \n          v__14691 = v_tmp_35643; \n          /* reduce_seq */\n          for (int v_i_35557 = 0; v_i_35557 < v_MWidthC_1; v_i_35557 = (1 + v_i_35557)) {\n            v__14691 = add(v__14691, v__35579[(v_i_35557 + (v_MWidthC_1 * v_l_id_35556))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35558 = 0; \n            v__35584[v_w_id_35552] = doubleMultiplyAdd(v__14691, v__35563, v__35562[v_w_id_35552], v__35564); \n          }\n          /* end map_seq */\n          v_l_id_35556 = atomic_inc(&(v_work_idx_1958)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35552 = atomic_inc(v_work_idx_1965); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__35559",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35560",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35561",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35563",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35564",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35566",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35579",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}