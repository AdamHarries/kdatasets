{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26882, const global float* restrict v__26883, const global float* restrict v__26884, const global float* restrict v__26885, float v__26886, float v__26887, global float* v__26905, global int* v__26889, local float* v__26900, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26891; \n  float v__26893; \n  float v__14691; \n  /* Private Memory */\n  float v__26895_0;\n  \n  float v__26897_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1186 = v__26889; \n    local int v_w_id_26875; \n    if (get_local_id(0) == 0) {\n      v_w_id_26875 = atomic_inc(v_work_idx_1186); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26875 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1184; \n        v_work_idx_1184 = 0; \n        int v_l_id_26876 = atomic_inc(&(v_work_idx_1184)); \n        while((v_l_id_26876 < v_MWidthC_1)){\n          float v_tmp_26956 = 0.0f; \n          v__26891 = v_tmp_26956; \n          /* reduce_seq */\n          for (int v_i_26877 = 0; v_i_26877 < 32; v_i_26877 = (1 + v_i_26877)) {\n            float v_tmp_26957 = 0.0f; \n            v__26893 = v_tmp_26957; \n            int v_index_26958 = v__26882[(v_l_id_26876 + (32 * v_MWidthC_1 * v_w_id_26875) + (v_MWidthC_1 * v_i_26877))]; \n            if (v_index_26958 < 0) {\n              v__26895_0 = v__26893; \n            } else {\n              if (v_index_26958 >= v_VLength_3) {\n                v__26895_0 = v__26893; \n              } else {\n                v__26895_0 = v__26884[v_index_26958]; \n              }\n            }\n            v__26897_0 = mult(v__26895_0, v__26883[(v_l_id_26876 + (32 * v_MWidthC_1 * v_w_id_26875) + (v_MWidthC_1 * v_i_26877))]); \n            v__26891 = add(v__26897_0, v__26891); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26878 = 0; \n            v__26900[v_l_id_26876] = id(v__26891); \n          }\n          /* end map_seq */\n          v_l_id_26876 = atomic_inc(&(v_work_idx_1184)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1179; \n        v_work_idx_1179 = 0; \n        int v_l_id_26879 = atomic_inc(&(v_work_idx_1179)); \n        while((v_l_id_26879 < 1)){\n          float v_tmp_26961 = 0.0f; \n          v__14691 = v_tmp_26961; \n          /* reduce_seq */\n          for (int v_i_26880 = 0; v_i_26880 < v_MWidthC_1; v_i_26880 = (1 + v_i_26880)) {\n            v__14691 = add(v__14691, v__26900[(v_i_26880 + (v_MWidthC_1 * v_l_id_26879))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26881 = 0; \n            v__26905[v_w_id_26875] = doubleMultiplyAdd(v__14691, v__26886, v__26885[v_w_id_26875], v__26887); \n          }\n          /* end map_seq */\n          v_l_id_26879 = atomic_inc(&(v_work_idx_1179)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26875 = atomic_inc(v_work_idx_1186); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__26882",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26883",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26884",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26885",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26886",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26887",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26889",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26905",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26900",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}