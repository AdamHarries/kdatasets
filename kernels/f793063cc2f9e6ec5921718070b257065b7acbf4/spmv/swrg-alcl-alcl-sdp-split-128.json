{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33230, const global float* restrict v__33231, const global float* restrict v__33232, const global float* restrict v__33233, float v__33234, float v__33235, global float* v__33252, global float* v__33242, local float* v__33247, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__33238; \n  float v__33243; \n  float v__14691; \n  /* Private Memory */\n  float v__33240_0;\n  \n  for (int v_wg_id_33222 = get_group_id(0); v_wg_id_33222 < v_MHeight_2; v_wg_id_33222 = (v_wg_id_33222 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1740; \n      v_work_idx_1740 = 0; \n      int v_l_id_33223 = atomic_inc(&(v_work_idx_1740)); \n      while((v_l_id_33223 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_33224 = 0; v_i_33224 < 128; v_i_33224 = (1 + v_i_33224)) {\n          float v_tmp_33305 = 0.0f; \n          v__33238 = v_tmp_33305; \n          int v_index_33306 = v__33230[(v_l_id_33223 + (128 * v_MWidthC_1 * v_wg_id_33222) + (v_MWidthC_1 * v_i_33224))]; \n          if (v_index_33306 < 0) {\n            v__33240_0 = v__33238; \n          } else {\n            if (v_index_33306 >= v_VLength_3) {\n              v__33240_0 = v__33238; \n            } else {\n              v__33240_0 = v__33232[v_index_33306]; \n            }\n          }\n          v__33242[(127 + (128 * v_MWidthC_1 * v_wg_id_33222) + (-1 * v_i_33224) + (128 * v_l_id_33223))] = mult(v__33240_0, v__33231[(v_l_id_33223 + (128 * v_MWidthC_1 * v_wg_id_33222) + (v_MWidthC_1 * v_i_33224))]); \n        }\n        /* end map_seq */\n        float v_tmp_33307 = 0.0f; \n        v__33243 = v_tmp_33307; \n        /* reduce_seq */\n        for (int v_i_33225 = 0; v_i_33225 < 128; v_i_33225 = (1 + v_i_33225)) {\n          v__33243 = add(v__33243, v__33242[(v_i_33225 + (128 * v_MWidthC_1 * v_wg_id_33222) + (128 * v_l_id_33223))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33226 = 0; \n          v__33247[v_l_id_33223] = id(v__33243); \n        }\n        /* end map_seq */\n        v_l_id_33223 = atomic_inc(&(v_work_idx_1740)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1734; \n      v_work_idx_1734 = 0; \n      int v_l_id_33227 = atomic_inc(&(v_work_idx_1734)); \n      while((v_l_id_33227 < 1)){\n        float v_tmp_33310 = 0.0f; \n        v__14691 = v_tmp_33310; \n        /* reduce_seq */\n        for (int v_i_33228 = 0; v_i_33228 < v_MWidthC_1; v_i_33228 = (1 + v_i_33228)) {\n          v__14691 = add(v__14691, v__33247[(v_i_33228 + (v_MWidthC_1 * v_l_id_33227))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33229 = 0; \n          v__33252[v_wg_id_33222] = doubleMultiplyAdd(v__14691, v__33234, v__33233[v_wg_id_33222], v__33235); \n        }\n        /* end map_seq */\n        v_l_id_33227 = atomic_inc(&(v_work_idx_1734)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__33230",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33231",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33232",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33234",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33235",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33242",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33252",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33247",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}