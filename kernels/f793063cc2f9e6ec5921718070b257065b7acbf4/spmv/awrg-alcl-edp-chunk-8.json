{
  "name" : "awrg-alcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17593, const global float* restrict v__17594, const global float* restrict v__17595, const global float* restrict v__17596, float v__17597, float v__17598, global float* v__17614, global int* v__17600, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17601; \n  float v__17604; \n  /* Private Memory */\n  float v__17606_0;\n  \n  float v__17608_0;\n  \n  int v__17612_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_343 = v__17600; \n    local int v_w_id_17589; \n    if (get_local_id(0) == 0) {\n      v_w_id_17589 = atomic_inc(v_work_idx_343); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17589 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_341; \n        v_work_idx_341 = 0; \n        int v_l_id_17590 = atomic_inc(&(v_work_idx_341)); \n        while((v_l_id_17590 < 8)){\n          float v_tmp_17657 = 0.0f; \n          v__17601 = v_tmp_17657; \n          /* reduce_while_seq */\n          for (int v_i_17591 = 0; v_i_17591 < v_MWidthC_1; v_i_17591 = (1 + v_i_17591)) {\n            v__17612_0 = check(v__17601, v__17593[(v_i_17591 + (8 * v_MWidthC_1 * v_w_id_17589) + (v_MWidthC_1 * v_l_id_17590))]); \n            if (v__17612_0) {\n            } else {\n              break;\n            }\n            float v_tmp_17658 = 0.0f; \n            v__17604 = v_tmp_17658; \n            int v_index_17659 = v__17593[(v_i_17591 + (8 * v_MWidthC_1 * v_w_id_17589) + (v_MWidthC_1 * v_l_id_17590))]; \n            if (v_index_17659 < 0) {\n              v__17606_0 = v__17604; \n            } else {\n              if (v_index_17659 >= v_VLength_3) {\n                v__17606_0 = v__17604; \n              } else {\n                v__17606_0 = v__17595[v_index_17659]; \n              }\n            }\n            v__17608_0 = mult(v__17606_0, v__17594[(v_i_17591 + (8 * v_MWidthC_1 * v_w_id_17589) + (v_MWidthC_1 * v_l_id_17590))]); \n            v__17601 = add(v__17608_0, v__17601); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_17592 = 0; \n            v__17614[(v_l_id_17590 + (8 * v_w_id_17589))] = doubleMultiplyAdd(v__17601, v__17597, v__17596[(v_l_id_17590 + (8 * v_w_id_17589))], v__17598); \n          }\n          /* end map_seq */\n          v_l_id_17590 = atomic_inc(&(v_work_idx_341)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17589 = atomic_inc(v_work_idx_343); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17595",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17597",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17598",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17600",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}