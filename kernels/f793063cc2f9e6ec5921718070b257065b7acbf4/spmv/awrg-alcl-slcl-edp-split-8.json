{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18102, const global float* restrict v__18103, const global float* restrict v__18104, const global float* restrict v__18105, float v__18106, float v__18107, global float* v__18127, global int* v__18109, local float* v__18122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18111; \n  float v__18113; \n  float v__14691; \n  /* Private Memory */\n  float v__18115_0;\n  \n  float v__18117_0;\n  \n  int v__18121_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_395 = v__18109; \n    local int v_w_id_18095; \n    if (get_local_id(0) == 0) {\n      v_w_id_18095 = atomic_inc(v_work_idx_395); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18095 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_393; \n        v_work_idx_393 = 0; \n        int v_l_id_18096 = atomic_inc(&(v_work_idx_393)); \n        while((v_l_id_18096 < v_MWidthC_1)){\n          float v_tmp_18185 = 0.0f; \n          v__18111 = v_tmp_18185; \n          /* reduce_while_seq */\n          for (int v_i_18097 = 0; v_i_18097 < 8; v_i_18097 = (1 + v_i_18097)) {\n            v__18121_0 = check(v__18111, v__18102[(v_l_id_18096 + (8 * v_MWidthC_1 * v_w_id_18095) + (v_MWidthC_1 * v_i_18097))]); \n            if (v__18121_0) {\n            } else {\n              break;\n            }\n            float v_tmp_18186 = 0.0f; \n            v__18113 = v_tmp_18186; \n            int v_index_18187 = v__18102[(v_l_id_18096 + (8 * v_MWidthC_1 * v_w_id_18095) + (v_MWidthC_1 * v_i_18097))]; \n            if (v_index_18187 < 0) {\n              v__18115_0 = v__18113; \n            } else {\n              if (v_index_18187 >= v_VLength_3) {\n                v__18115_0 = v__18113; \n              } else {\n                v__18115_0 = v__18104[v_index_18187]; \n              }\n            }\n            v__18117_0 = mult(v__18115_0, v__18103[(v_l_id_18096 + (8 * v_MWidthC_1 * v_w_id_18095) + (v_MWidthC_1 * v_i_18097))]); \n            v__18111 = add(v__18117_0, v__18111); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18098 = 0; \n            v__18122[v_l_id_18096] = id(v__18111); \n          }\n          /* end map_seq */\n          v_l_id_18096 = atomic_inc(&(v_work_idx_393)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18099 = get_local_id(0); \n        float v_tmp_18190 = 0.0f; \n        v__14691 = v_tmp_18190; \n        /* reduce_seq */\n        for (int v_i_18100 = 0; v_i_18100 < v_MWidthC_1; v_i_18100 = (1 + v_i_18100)) {\n          v__14691 = add(v__14691, v__18122[(v_i_18100 + (v_MWidthC_1 * v_l_id_18099))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18101 = 0; \n          v__18127[v_w_id_18095] = doubleMultiplyAdd(v__14691, v__18106, v__18105[v_w_id_18095], v__18107); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18095 = atomic_inc(v_work_idx_395); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__18102",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18103",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18104",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18106",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18107",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18109",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18122",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}