{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26492, const global float* restrict v__26493, const global float* restrict v__26494, const global float* restrict v__26495, float v__26496, float v__26497, global float* v__26515, global float* v__26505, global int* v__26499, local float* v__26510, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26501; \n  float v__26506; \n  float v__14691; \n  /* Private Memory */\n  float v__26503_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1143 = v__26499; \n    local int v_w_id_26484; \n    if (get_local_id(0) == 0) {\n      v_w_id_26484 = atomic_inc(v_work_idx_1143); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26484 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1141; \n        v_work_idx_1141 = 0; \n        int v_l_id_26485 = atomic_inc(&(v_work_idx_1141)); \n        while((v_l_id_26485 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_26486 = 0; v_i_26486 < 32; v_i_26486 = (1 + v_i_26486)) {\n            float v_tmp_26570 = 0.0f; \n            v__26501 = v_tmp_26570; \n            int v_index_26571 = v__26492[(v_l_id_26485 + (32 * v_MWidthC_1 * v_w_id_26484) + (v_MWidthC_1 * v_i_26486))]; \n            if (v_index_26571 < 0) {\n              v__26503_0 = v__26501; \n            } else {\n              if (v_index_26571 >= v_VLength_3) {\n                v__26503_0 = v__26501; \n              } else {\n                v__26503_0 = v__26494[v_index_26571]; \n              }\n            }\n            v__26505[(31 + (32 * v_MWidthC_1 * v_w_id_26484) + (-1 * v_i_26486) + (32 * v_l_id_26485))] = mult(v__26503_0, v__26493[(v_l_id_26485 + (32 * v_MWidthC_1 * v_w_id_26484) + (v_MWidthC_1 * v_i_26486))]); \n          }\n          /* end map_seq */\n          float v_tmp_26572 = 0.0f; \n          v__26506 = v_tmp_26572; \n          /* reduce_seq */\n          for (int v_i_26487 = 0; v_i_26487 < 32; v_i_26487 = (1 + v_i_26487)) {\n            v__26506 = add(v__26506, v__26505[(v_i_26487 + (32 * v_MWidthC_1 * v_w_id_26484) + (32 * v_l_id_26485))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26488 = 0; \n            v__26510[v_l_id_26485] = id(v__26506); \n          }\n          /* end map_seq */\n          v_l_id_26485 = atomic_inc(&(v_work_idx_1141)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_26489 = get_local_id(0); \n        float v_tmp_26575 = 0.0f; \n        v__14691 = v_tmp_26575; \n        /* reduce_seq */\n        for (int v_i_26490 = 0; v_i_26490 < v_MWidthC_1; v_i_26490 = (1 + v_i_26490)) {\n          v__14691 = add(v__14691, v__26510[(v_i_26490 + (v_MWidthC_1 * v_l_id_26489))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26491 = 0; \n          v__26515[v_w_id_26484] = doubleMultiplyAdd(v__14691, v__26496, v__26495[v_w_id_26484], v__26497); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26484 = atomic_inc(v_work_idx_1143); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26492",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26493",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26494",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26496",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26497",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26505",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26499",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26515",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26510",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}