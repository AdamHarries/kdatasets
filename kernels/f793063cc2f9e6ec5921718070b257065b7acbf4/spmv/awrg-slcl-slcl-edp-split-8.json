{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17036, const global float* restrict v__17037, const global float* restrict v__17038, const global float* restrict v__17039, float v__17040, float v__17041, global float* v__17061, global int* v__17043, local float* v__17056, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17045; \n  float v__17047; \n  float v__14691; \n  /* Private Memory */\n  float v__17049_0;\n  \n  float v__17051_0;\n  \n  int v__17055_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_290 = v__17043; \n    local int v_w_id_17029; \n    if (get_local_id(0) == 0) {\n      v_w_id_17029 = atomic_inc(v_work_idx_290); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17029 < v_MHeight_2)){\n      for (int v_l_id_17030 = get_local_id(0); v_l_id_17030 < v_MWidthC_1; v_l_id_17030 = (v_l_id_17030 + get_local_size(0))) {\n        float v_tmp_17127 = 0.0f; \n        v__17045 = v_tmp_17127; \n        /* reduce_while_seq */\n        for (int v_i_17031 = 0; v_i_17031 < 8; v_i_17031 = (1 + v_i_17031)) {\n          v__17055_0 = check(v__17045, v__17036[(v_l_id_17030 + (8 * v_MWidthC_1 * v_w_id_17029) + (v_MWidthC_1 * v_i_17031))]); \n          if (v__17055_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17128 = 0.0f; \n          v__17047 = v_tmp_17128; \n          int v_index_17129 = v__17036[(v_l_id_17030 + (8 * v_MWidthC_1 * v_w_id_17029) + (v_MWidthC_1 * v_i_17031))]; \n          if (v_index_17129 < 0) {\n            v__17049_0 = v__17047; \n          } else {\n            if (v_index_17129 >= v_VLength_3) {\n              v__17049_0 = v__17047; \n            } else {\n              v__17049_0 = v__17038[v_index_17129]; \n            }\n          }\n          v__17051_0 = mult(v__17049_0, v__17037[(v_l_id_17030 + (8 * v_MWidthC_1 * v_w_id_17029) + (v_MWidthC_1 * v_i_17031))]); \n          v__17045 = add(v__17051_0, v__17045); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17032 = 0; \n          v__17056[v_l_id_17030] = id(v__17045); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_17033 = get_local_id(0); \n        float v_tmp_17132 = 0.0f; \n        v__14691 = v_tmp_17132; \n        /* reduce_seq */\n        for (int v_i_17034 = 0; v_i_17034 < v_MWidthC_1; v_i_17034 = (1 + v_i_17034)) {\n          v__14691 = add(v__14691, v__17056[(v_i_17034 + (v_MWidthC_1 * v_l_id_17033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17035 = 0; \n          v__17061[v_w_id_17029] = doubleMultiplyAdd(v__14691, v__17040, v__17039[v_w_id_17029], v__17041); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17029 = atomic_inc(v_work_idx_290); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17036",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17037",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17038",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17040",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17041",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17043",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17056",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}