{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15100, const global float* restrict v__15101, const global float* restrict v__15102, const global float* restrict v__15103, float v__15104, float v__15105, global float* v__15122, local float* v__15117, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15108; \n  float v__15110; \n  float v__14691; \n  /* Private Memory */\n  float v__15112_0;\n  \n  float v__15114_0;\n  \n  for (int v_wg_id_15093 = get_group_id(0); v_wg_id_15093 < v_MHeight_2; v_wg_id_15093 = (v_wg_id_15093 + get_num_groups(0))) {\n    for (int v_l_id_15094 = get_local_id(0); v_l_id_15094 < v_MWidthC_1; v_l_id_15094 = (v_l_id_15094 + get_local_size(0))) {\n      float v_tmp_15183 = 0.0f; \n      v__15108 = v_tmp_15183; \n      /* reduce_seq */\n      for (int v_i_15095 = 0; v_i_15095 < 8; v_i_15095 = (1 + v_i_15095)) {\n        float v_tmp_15184 = 0.0f; \n        v__15110 = v_tmp_15184; \n        int v_index_15185 = v__15100[(v_l_id_15094 + (8 * v_MWidthC_1 * v_wg_id_15093) + (v_MWidthC_1 * v_i_15095))]; \n        if (v_index_15185 < 0) {\n          v__15112_0 = v__15110; \n        } else {\n          if (v_index_15185 >= v_VLength_3) {\n            v__15112_0 = v__15110; \n          } else {\n            v__15112_0 = v__15102[v_index_15185]; \n          }\n        }\n        v__15114_0 = mult(v__15112_0, v__15101[(v_l_id_15094 + (8 * v_MWidthC_1 * v_wg_id_15093) + (v_MWidthC_1 * v_i_15095))]); \n        v__15108 = add(v__15114_0, v__15108); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_15096 = 0; \n        v__15117[v_l_id_15094] = id(v__15108); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_115; \n      v_work_idx_115 = 0; \n      int v_l_id_15097 = atomic_inc(&(v_work_idx_115)); \n      while((v_l_id_15097 < 1)){\n        float v_tmp_15188 = 0.0f; \n        v__14691 = v_tmp_15188; \n        /* reduce_seq */\n        for (int v_i_15098 = 0; v_i_15098 < v_MWidthC_1; v_i_15098 = (1 + v_i_15098)) {\n          v__14691 = add(v__14691, v__15117[(v_i_15098 + (v_MWidthC_1 * v_l_id_15097))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15099 = 0; \n          v__15122[v_wg_id_15093] = doubleMultiplyAdd(v__14691, v__15104, v__15103[v_wg_id_15093], v__15105); \n        }\n        /* end map_seq */\n        v_l_id_15097 = atomic_inc(&(v_work_idx_115)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15100",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15101",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15102",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15103",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15104",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15105",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__15122",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15117",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}