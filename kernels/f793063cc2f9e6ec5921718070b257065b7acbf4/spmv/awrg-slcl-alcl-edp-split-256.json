{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38809, const global float* restrict v__38810, const global float* restrict v__38811, const global float* restrict v__38812, float v__38813, float v__38814, global float* v__38834, global int* v__38816, local float* v__38829, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__38818; \n  float v__38820; \n  float v__14691; \n  /* Private Memory */\n  float v__38822_0;\n  \n  float v__38824_0;\n  \n  int v__38828_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2241 = v__38816; \n    local int v_w_id_38802; \n    if (get_local_id(0) == 0) {\n      v_w_id_38802 = atomic_inc(v_work_idx_2241); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38802 < v_MHeight_2)){\n      for (int v_l_id_38803 = get_local_id(0); v_l_id_38803 < v_MWidthC_1; v_l_id_38803 = (v_l_id_38803 + get_local_size(0))) {\n        float v_tmp_38896 = 0.0f; \n        v__38818 = v_tmp_38896; \n        /* reduce_while_seq */\n        for (int v_i_38804 = 0; v_i_38804 < 256; v_i_38804 = (1 + v_i_38804)) {\n          v__38828_0 = check(v__38818, v__38809[(v_l_id_38803 + (256 * v_MWidthC_1 * v_w_id_38802) + (v_MWidthC_1 * v_i_38804))]); \n          if (v__38828_0) {\n          } else {\n            break;\n          }\n          float v_tmp_38897 = 0.0f; \n          v__38820 = v_tmp_38897; \n          int v_index_38898 = v__38809[(v_l_id_38803 + (256 * v_MWidthC_1 * v_w_id_38802) + (v_MWidthC_1 * v_i_38804))]; \n          if (v_index_38898 < 0) {\n            v__38822_0 = v__38820; \n          } else {\n            if (v_index_38898 >= v_VLength_3) {\n              v__38822_0 = v__38820; \n            } else {\n              v__38822_0 = v__38811[v_index_38898]; \n            }\n          }\n          v__38824_0 = mult(v__38822_0, v__38810[(v_l_id_38803 + (256 * v_MWidthC_1 * v_w_id_38802) + (v_MWidthC_1 * v_i_38804))]); \n          v__38818 = add(v__38824_0, v__38818); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38805 = 0; \n          v__38829[v_l_id_38803] = id(v__38818); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2235; \n        v_work_idx_2235 = 0; \n        int v_l_id_38806 = atomic_inc(&(v_work_idx_2235)); \n        while((v_l_id_38806 < 1)){\n          float v_tmp_38901 = 0.0f; \n          v__14691 = v_tmp_38901; \n          /* reduce_seq */\n          for (int v_i_38807 = 0; v_i_38807 < v_MWidthC_1; v_i_38807 = (1 + v_i_38807)) {\n            v__14691 = add(v__14691, v__38829[(v_i_38807 + (v_MWidthC_1 * v_l_id_38806))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38808 = 0; \n            v__38834[v_w_id_38802] = doubleMultiplyAdd(v__14691, v__38813, v__38812[v_w_id_38802], v__38814); \n          }\n          /* end map_seq */\n          v_l_id_38806 = atomic_inc(&(v_work_idx_2235)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38802 = atomic_inc(v_work_idx_2241); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__38809",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38810",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38811",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38812",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38813",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38814",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38816",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38834",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38829",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}