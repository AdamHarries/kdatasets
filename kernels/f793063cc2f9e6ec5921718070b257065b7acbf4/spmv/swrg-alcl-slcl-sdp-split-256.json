{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37222, const global float* restrict v__37223, const global float* restrict v__37224, const global float* restrict v__37225, float v__37226, float v__37227, global float* v__37244, global float* v__37234, local float* v__37239, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37230; \n  float v__37235; \n  float v__14691; \n  /* Private Memory */\n  float v__37232_0;\n  \n  for (int v_wg_id_37214 = get_group_id(0); v_wg_id_37214 < v_MHeight_2; v_wg_id_37214 = (v_wg_id_37214 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2095; \n      v_work_idx_2095 = 0; \n      int v_l_id_37215 = atomic_inc(&(v_work_idx_2095)); \n      while((v_l_id_37215 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_37216 = 0; v_i_37216 < 256; v_i_37216 = (1 + v_i_37216)) {\n          float v_tmp_37301 = 0.0f; \n          v__37230 = v_tmp_37301; \n          int v_index_37302 = v__37222[(v_l_id_37215 + (256 * v_MWidthC_1 * v_wg_id_37214) + (v_MWidthC_1 * v_i_37216))]; \n          if (v_index_37302 < 0) {\n            v__37232_0 = v__37230; \n          } else {\n            if (v_index_37302 >= v_VLength_3) {\n              v__37232_0 = v__37230; \n            } else {\n              v__37232_0 = v__37224[v_index_37302]; \n            }\n          }\n          v__37234[(255 + (256 * v_MWidthC_1 * v_wg_id_37214) + (-1 * v_i_37216) + (256 * v_l_id_37215))] = mult(v__37232_0, v__37223[(v_l_id_37215 + (256 * v_MWidthC_1 * v_wg_id_37214) + (v_MWidthC_1 * v_i_37216))]); \n        }\n        /* end map_seq */\n        float v_tmp_37303 = 0.0f; \n        v__37235 = v_tmp_37303; \n        /* reduce_seq */\n        for (int v_i_37217 = 0; v_i_37217 < 256; v_i_37217 = (1 + v_i_37217)) {\n          v__37235 = add(v__37235, v__37234[(v_i_37217 + (256 * v_MWidthC_1 * v_wg_id_37214) + (256 * v_l_id_37215))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37218 = 0; \n          v__37239[v_l_id_37215] = id(v__37235); \n        }\n        /* end map_seq */\n        v_l_id_37215 = atomic_inc(&(v_work_idx_2095)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_37219 = get_local_id(0); \n      float v_tmp_37306 = 0.0f; \n      v__14691 = v_tmp_37306; \n      /* reduce_seq */\n      for (int v_i_37220 = 0; v_i_37220 < v_MWidthC_1; v_i_37220 = (1 + v_i_37220)) {\n        v__14691 = add(v__14691, v__37239[(v_i_37220 + (v_MWidthC_1 * v_l_id_37219))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37221 = 0; \n        v__37244[v_wg_id_37214] = doubleMultiplyAdd(v__14691, v__37226, v__37225[v_wg_id_37214], v__37227); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37222",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37223",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37224",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37225",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37226",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37227",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37234",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37244",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37239",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}