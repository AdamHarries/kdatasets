{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41814, const global float* restrict v__41815, const global float* restrict v__41816, const global float* restrict v__41817, float v__41818, float v__41819, global float* v__41836, global float* v__41826, local float* v__41831, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__41822; \n  float v__41827; \n  float v__14691; \n  /* Private Memory */\n  float v__41824_0;\n  \n  for (int v_wg_id_41806 = get_group_id(0); v_wg_id_41806 < v_MHeight_2; v_wg_id_41806 = (v_wg_id_41806 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2508; \n      v_work_idx_2508 = 0; \n      int v_l_id_41807 = atomic_inc(&(v_work_idx_2508)); \n      while((v_l_id_41807 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_41808 = 0; v_i_41808 < 512; v_i_41808 = (1 + v_i_41808)) {\n          float v_tmp_41889 = 0.0f; \n          v__41822 = v_tmp_41889; \n          int v_index_41890 = v__41814[(v_l_id_41807 + (512 * v_MWidthC_1 * v_wg_id_41806) + (v_MWidthC_1 * v_i_41808))]; \n          if (v_index_41890 < 0) {\n            v__41824_0 = v__41822; \n          } else {\n            if (v_index_41890 >= v_VLength_3) {\n              v__41824_0 = v__41822; \n            } else {\n              v__41824_0 = v__41816[v_index_41890]; \n            }\n          }\n          v__41826[(511 + (512 * v_MWidthC_1 * v_wg_id_41806) + (-1 * v_i_41808) + (512 * v_l_id_41807))] = mult(v__41824_0, v__41815[(v_l_id_41807 + (512 * v_MWidthC_1 * v_wg_id_41806) + (v_MWidthC_1 * v_i_41808))]); \n        }\n        /* end map_seq */\n        float v_tmp_41891 = 0.0f; \n        v__41827 = v_tmp_41891; \n        /* reduce_seq */\n        for (int v_i_41809 = 0; v_i_41809 < 512; v_i_41809 = (1 + v_i_41809)) {\n          v__41827 = add(v__41827, v__41826[(v_i_41809 + (512 * v_MWidthC_1 * v_wg_id_41806) + (512 * v_l_id_41807))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41810 = 0; \n          v__41831[v_l_id_41807] = id(v__41827); \n        }\n        /* end map_seq */\n        v_l_id_41807 = atomic_inc(&(v_work_idx_2508)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2502; \n      v_work_idx_2502 = 0; \n      int v_l_id_41811 = atomic_inc(&(v_work_idx_2502)); \n      while((v_l_id_41811 < 1)){\n        float v_tmp_41894 = 0.0f; \n        v__14691 = v_tmp_41894; \n        /* reduce_seq */\n        for (int v_i_41812 = 0; v_i_41812 < v_MWidthC_1; v_i_41812 = (1 + v_i_41812)) {\n          v__14691 = add(v__14691, v__41831[(v_i_41812 + (v_MWidthC_1 * v_l_id_41811))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41813 = 0; \n          v__41836[v_wg_id_41806] = doubleMultiplyAdd(v__14691, v__41818, v__41817[v_wg_id_41806], v__41819); \n        }\n        /* end map_seq */\n        v_l_id_41811 = atomic_inc(&(v_work_idx_2502)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41814",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41815",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41816",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41817",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41818",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41819",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41826",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41836",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41831",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}