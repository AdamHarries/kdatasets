{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39851, const global float* restrict v__39852, const global float* restrict v__39853, const global float* restrict v__39854, float v__39855, float v__39856, global float* v__39876, global int* v__39858, local float* v__39871, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39860; \n  float v__39862; \n  float v__14691; \n  /* Private Memory */\n  float v__39864_0;\n  \n  float v__39866_0;\n  \n  int v__39870_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2349 = v__39858; \n    local int v_w_id_39844; \n    if (get_local_id(0) == 0) {\n      v_w_id_39844 = atomic_inc(v_work_idx_2349); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39844 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2347; \n        v_work_idx_2347 = 0; \n        int v_l_id_39845 = atomic_inc(&(v_work_idx_2347)); \n        while((v_l_id_39845 < v_MWidthC_1)){\n          float v_tmp_39930 = 0.0f; \n          v__39860 = v_tmp_39930; \n          /* reduce_while_seq */\n          for (int v_i_39846 = 0; v_i_39846 < 256; v_i_39846 = (1 + v_i_39846)) {\n            v__39870_0 = check(v__39860, v__39851[(v_l_id_39845 + (256 * v_MWidthC_1 * v_w_id_39844) + (v_MWidthC_1 * v_i_39846))]); \n            if (v__39870_0) {\n            } else {\n              break;\n            }\n            float v_tmp_39931 = 0.0f; \n            v__39862 = v_tmp_39931; \n            int v_index_39932 = v__39851[(v_l_id_39845 + (256 * v_MWidthC_1 * v_w_id_39844) + (v_MWidthC_1 * v_i_39846))]; \n            if (v_index_39932 < 0) {\n              v__39864_0 = v__39862; \n            } else {\n              if (v_index_39932 >= v_VLength_3) {\n                v__39864_0 = v__39862; \n              } else {\n                v__39864_0 = v__39853[v_index_39932]; \n              }\n            }\n            v__39866_0 = mult(v__39864_0, v__39852[(v_l_id_39845 + (256 * v_MWidthC_1 * v_w_id_39844) + (v_MWidthC_1 * v_i_39846))]); \n            v__39860 = add(v__39866_0, v__39860); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39847 = 0; \n            v__39871[v_l_id_39845] = id(v__39860); \n          }\n          /* end map_seq */\n          v_l_id_39845 = atomic_inc(&(v_work_idx_2347)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2342; \n        v_work_idx_2342 = 0; \n        int v_l_id_39848 = atomic_inc(&(v_work_idx_2342)); \n        while((v_l_id_39848 < 1)){\n          float v_tmp_39935 = 0.0f; \n          v__14691 = v_tmp_39935; \n          /* reduce_seq */\n          for (int v_i_39849 = 0; v_i_39849 < v_MWidthC_1; v_i_39849 = (1 + v_i_39849)) {\n            v__14691 = add(v__14691, v__39871[(v_i_39849 + (v_MWidthC_1 * v_l_id_39848))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39850 = 0; \n            v__39876[v_w_id_39844] = doubleMultiplyAdd(v__14691, v__39855, v__39854[v_w_id_39844], v__39856); \n          }\n          /* end map_seq */\n          v_l_id_39848 = atomic_inc(&(v_work_idx_2342)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39844 = atomic_inc(v_work_idx_2349); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__39851",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39852",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39853",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39855",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39856",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39858",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39876",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39871",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}