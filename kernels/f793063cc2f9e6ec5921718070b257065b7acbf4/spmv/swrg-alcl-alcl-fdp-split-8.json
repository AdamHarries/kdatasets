{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16156, const global float* restrict v__16157, const global float* restrict v__16158, const global float* restrict v__16159, float v__16160, float v__16161, global float* v__16178, local float* v__16173, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16164; \n  float v__16166; \n  float v__14691; \n  /* Private Memory */\n  float v__16168_0;\n  \n  float v__16170_0;\n  \n  for (int v_wg_id_16149 = get_group_id(0); v_wg_id_16149 < v_MHeight_2; v_wg_id_16149 = (v_wg_id_16149 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_214; \n      v_work_idx_214 = 0; \n      int v_l_id_16150 = atomic_inc(&(v_work_idx_214)); \n      while((v_l_id_16150 < v_MWidthC_1)){\n        float v_tmp_16231 = 0.0f; \n        v__16164 = v_tmp_16231; \n        /* reduce_seq */\n        for (int v_i_16151 = 0; v_i_16151 < 8; v_i_16151 = (1 + v_i_16151)) {\n          float v_tmp_16232 = 0.0f; \n          v__16166 = v_tmp_16232; \n          int v_index_16233 = v__16156[(v_l_id_16150 + (8 * v_MWidthC_1 * v_wg_id_16149) + (v_MWidthC_1 * v_i_16151))]; \n          if (v_index_16233 < 0) {\n            v__16168_0 = v__16166; \n          } else {\n            if (v_index_16233 >= v_VLength_3) {\n              v__16168_0 = v__16166; \n            } else {\n              v__16168_0 = v__16158[v_index_16233]; \n            }\n          }\n          v__16170_0 = mult(v__16168_0, v__16157[(v_l_id_16150 + (8 * v_MWidthC_1 * v_wg_id_16149) + (v_MWidthC_1 * v_i_16151))]); \n          v__16164 = add(v__16170_0, v__16164); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16152 = 0; \n          v__16173[v_l_id_16150] = id(v__16164); \n        }\n        /* end map_seq */\n        v_l_id_16150 = atomic_inc(&(v_work_idx_214)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_209; \n      v_work_idx_209 = 0; \n      int v_l_id_16153 = atomic_inc(&(v_work_idx_209)); \n      while((v_l_id_16153 < 1)){\n        float v_tmp_16236 = 0.0f; \n        v__14691 = v_tmp_16236; \n        /* reduce_seq */\n        for (int v_i_16154 = 0; v_i_16154 < v_MWidthC_1; v_i_16154 = (1 + v_i_16154)) {\n          v__14691 = add(v__14691, v__16173[(v_i_16154 + (v_MWidthC_1 * v_l_id_16153))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16155 = 0; \n          v__16178[v_wg_id_16149] = doubleMultiplyAdd(v__14691, v__16160, v__16159[v_wg_id_16149], v__16161); \n        }\n        /* end map_seq */\n        v_l_id_16153 = atomic_inc(&(v_work_idx_209)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__16156",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16157",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16158",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16159",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16160",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16161",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16173",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}