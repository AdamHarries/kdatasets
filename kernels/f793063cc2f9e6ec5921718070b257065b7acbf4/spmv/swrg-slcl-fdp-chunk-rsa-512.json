{
  "name" : "swrg-slcl-fdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__40259, const global float* restrict v__40260, const global float* restrict v__40261, const global float* restrict v__40262, float v__40263, float v__40264, global float* v__40278, global float* v__40277, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__40266; \n  float v__40269; \n  /* Private Memory */\n  float v__40271_0;\n  \n  float v__40273_0;\n  \n  for (int v_wg_id_40254 = get_group_id(0); v_wg_id_40254 < ((v_MHeight_2)/(512)); v_wg_id_40254 = (v_wg_id_40254 + get_num_groups(0))) {\n    for (int v_l_id_40255 = get_local_id(0); v_l_id_40255 < 512; v_l_id_40255 = (v_l_id_40255 + get_local_size(0))) {\n      float v_tmp_40315 = 0.0f; \n      v__40266 = v_tmp_40315; \n      /* reduce_seq */\n      int v_stop_40316 = min(v__40259[(1 + (v__40259[(v_l_id_40255 + (512 * v_wg_id_40254))] / 4))], ((global int*)(v__40260 + (((global int*)(v__40260))[(v_l_id_40255 + (512 * v_wg_id_40254))] / 4)))[1]); \n      for (int v_i_40256 = 0; v_i_40256 < v_stop_40316; v_i_40256 = (1 + v_i_40256)) {\n        float v_tmp_40324 = 0.0f; \n        v__40269 = v_tmp_40324; \n        int v_index_40326 = v__40259[(2 + v_i_40256 + (v__40259[(v_l_id_40255 + (512 * v_wg_id_40254))] / 4))]; \n        if (v_index_40326 < 0) {\n          v__40271_0 = v__40269; \n        } else {\n          if (v_index_40326 >= v_MWidthC_1) {\n            v__40271_0 = v__40269; \n          } else {\n            v__40271_0 = v__40261[v_index_40326]; \n          }\n        }\n        v__40273_0 = mult(v__40260[(2 + v_i_40256 + (((global int*)(v__40260))[(v_l_id_40255 + (512 * v_wg_id_40254))] / 4))], v__40271_0); \n        v__40266 = add(v__40266, v__40273_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40257 = 0; \n        v__40277[(v_l_id_40255 + (512 * v_wg_id_40254))] = doubleMultiplyAdd(v__40266, v__40263, v__40262[(v_l_id_40255 + (512 * v_wg_id_40254))], v__40264); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40258 = 0; \n        v__40278[(v_l_id_40255 + (512 * v_wg_id_40254))] = id(v__40277[(v_l_id_40255 + (512 * v_wg_id_40254))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__40259",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__40260",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__40261",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__40262",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40263",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40264",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__40277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__40278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}