{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17908, const global float* restrict v__17909, const global float* restrict v__17910, const global float* restrict v__17911, float v__17912, float v__17913, global float* v__17931, global float* v__17921, global int* v__17915, local float* v__17926, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17917; \n  float v__17922; \n  float v__14691; \n  /* Private Memory */\n  float v__17919_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_375 = v__17915; \n    local int v_w_id_17900; \n    if (get_local_id(0) == 0) {\n      v_w_id_17900 = atomic_inc(v_work_idx_375); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17900 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_373; \n        v_work_idx_373 = 0; \n        int v_l_id_17901 = atomic_inc(&(v_work_idx_373)); \n        while((v_l_id_17901 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_17902 = 0; v_i_17902 < 8; v_i_17902 = (1 + v_i_17902)) {\n            float v_tmp_17986 = 0.0f; \n            v__17917 = v_tmp_17986; \n            int v_index_17987 = v__17908[(v_l_id_17901 + (8 * v_MWidthC_1 * v_w_id_17900) + (v_MWidthC_1 * v_i_17902))]; \n            if (v_index_17987 < 0) {\n              v__17919_0 = v__17917; \n            } else {\n              if (v_index_17987 >= v_VLength_3) {\n                v__17919_0 = v__17917; \n              } else {\n                v__17919_0 = v__17910[v_index_17987]; \n              }\n            }\n            v__17921[(7 + (8 * v_MWidthC_1 * v_w_id_17900) + (-1 * v_i_17902) + (8 * v_l_id_17901))] = mult(v__17919_0, v__17909[(v_l_id_17901 + (8 * v_MWidthC_1 * v_w_id_17900) + (v_MWidthC_1 * v_i_17902))]); \n          }\n          /* end map_seq */\n          float v_tmp_17988 = 0.0f; \n          v__17922 = v_tmp_17988; \n          /* reduce_seq */\n          for (int v_i_17903 = 0; v_i_17903 < 8; v_i_17903 = (1 + v_i_17903)) {\n            v__17922 = add(v__17922, v__17921[(v_i_17903 + (8 * v_MWidthC_1 * v_w_id_17900) + (8 * v_l_id_17901))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_17904 = 0; \n            v__17926[v_l_id_17901] = id(v__17922); \n          }\n          /* end map_seq */\n          v_l_id_17901 = atomic_inc(&(v_work_idx_373)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_17905 = get_local_id(0); \n        float v_tmp_17991 = 0.0f; \n        v__14691 = v_tmp_17991; \n        /* reduce_seq */\n        for (int v_i_17906 = 0; v_i_17906 < v_MWidthC_1; v_i_17906 = (1 + v_i_17906)) {\n          v__14691 = add(v__14691, v__17926[(v_i_17906 + (v_MWidthC_1 * v_l_id_17905))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17907 = 0; \n          v__17931[v_w_id_17900] = doubleMultiplyAdd(v__14691, v__17912, v__17911[v_w_id_17900], v__17913); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17900 = atomic_inc(v_work_idx_375); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17908",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17909",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17910",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17911",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17912",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17913",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17921",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17915",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17931",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17926",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}