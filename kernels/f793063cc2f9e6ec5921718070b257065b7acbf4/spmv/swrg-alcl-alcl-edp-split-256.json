{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37710, const global float* restrict v__37711, const global float* restrict v__37712, const global float* restrict v__37713, float v__37714, float v__37715, global float* v__37734, local float* v__37729, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37718; \n  float v__37720; \n  float v__14691; \n  /* Private Memory */\n  float v__37722_0;\n  \n  float v__37724_0;\n  \n  int v__37728_0;\n  \n  for (int v_wg_id_37703 = get_group_id(0); v_wg_id_37703 < v_MHeight_2; v_wg_id_37703 = (v_wg_id_37703 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2144; \n      v_work_idx_2144 = 0; \n      int v_l_id_37704 = atomic_inc(&(v_work_idx_2144)); \n      while((v_l_id_37704 < v_MWidthC_1)){\n        float v_tmp_37790 = 0.0f; \n        v__37718 = v_tmp_37790; \n        /* reduce_while_seq */\n        for (int v_i_37705 = 0; v_i_37705 < 256; v_i_37705 = (1 + v_i_37705)) {\n          v__37728_0 = check(v__37718, v__37710[(v_l_id_37704 + (256 * v_MWidthC_1 * v_wg_id_37703) + (v_MWidthC_1 * v_i_37705))]); \n          if (v__37728_0) {\n          } else {\n            break;\n          }\n          float v_tmp_37791 = 0.0f; \n          v__37720 = v_tmp_37791; \n          int v_index_37792 = v__37710[(v_l_id_37704 + (256 * v_MWidthC_1 * v_wg_id_37703) + (v_MWidthC_1 * v_i_37705))]; \n          if (v_index_37792 < 0) {\n            v__37722_0 = v__37720; \n          } else {\n            if (v_index_37792 >= v_VLength_3) {\n              v__37722_0 = v__37720; \n            } else {\n              v__37722_0 = v__37712[v_index_37792]; \n            }\n          }\n          v__37724_0 = mult(v__37722_0, v__37711[(v_l_id_37704 + (256 * v_MWidthC_1 * v_wg_id_37703) + (v_MWidthC_1 * v_i_37705))]); \n          v__37718 = add(v__37724_0, v__37718); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37706 = 0; \n          v__37729[v_l_id_37704] = id(v__37718); \n        }\n        /* end map_seq */\n        v_l_id_37704 = atomic_inc(&(v_work_idx_2144)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2139; \n      v_work_idx_2139 = 0; \n      int v_l_id_37707 = atomic_inc(&(v_work_idx_2139)); \n      while((v_l_id_37707 < 1)){\n        float v_tmp_37795 = 0.0f; \n        v__14691 = v_tmp_37795; \n        /* reduce_seq */\n        for (int v_i_37708 = 0; v_i_37708 < v_MWidthC_1; v_i_37708 = (1 + v_i_37708)) {\n          v__14691 = add(v__14691, v__37729[(v_i_37708 + (v_MWidthC_1 * v_l_id_37707))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37709 = 0; \n          v__37734[v_wg_id_37703] = doubleMultiplyAdd(v__14691, v__37714, v__37713[v_wg_id_37703], v__37715); \n        }\n        /* end map_seq */\n        v_l_id_37707 = atomic_inc(&(v_work_idx_2139)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__37710",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37711",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37712",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37713",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37714",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37715",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__37734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37729",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}