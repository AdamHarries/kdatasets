{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29807, const global float* restrict v__29808, const global float* restrict v__29809, const global float* restrict v__29810, float v__29811, float v__29812, global float* v__29830, global int* v__29814, local float* v__29825, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29816; \n  float v__29818; \n  float v__14691; \n  /* Private Memory */\n  float v__29820_0;\n  \n  float v__29822_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1433 = v__29814; \n    local int v_w_id_29800; \n    if (get_local_id(0) == 0) {\n      v_w_id_29800 = atomic_inc(v_work_idx_1433); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29800 < v_MHeight_2)){\n      for (int v_l_id_29801 = get_local_id(0); v_l_id_29801 < v_MWidthC_1; v_l_id_29801 = (v_l_id_29801 + get_local_size(0))) {\n        float v_tmp_29893 = 0.0f; \n        v__29816 = v_tmp_29893; \n        /* reduce_seq */\n        for (int v_i_29802 = 0; v_i_29802 < 64; v_i_29802 = (1 + v_i_29802)) {\n          float v_tmp_29894 = 0.0f; \n          v__29818 = v_tmp_29894; \n          int v_index_29895 = v__29807[(v_l_id_29801 + (64 * v_MWidthC_1 * v_w_id_29800) + (v_MWidthC_1 * v_i_29802))]; \n          if (v_index_29895 < 0) {\n            v__29820_0 = v__29818; \n          } else {\n            if (v_index_29895 >= v_VLength_3) {\n              v__29820_0 = v__29818; \n            } else {\n              v__29820_0 = v__29809[v_index_29895]; \n            }\n          }\n          v__29822_0 = mult(v__29820_0, v__29808[(v_l_id_29801 + (64 * v_MWidthC_1 * v_w_id_29800) + (v_MWidthC_1 * v_i_29802))]); \n          v__29816 = add(v__29822_0, v__29816); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29803 = 0; \n          v__29825[v_l_id_29801] = id(v__29816); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_29804 = get_local_id(0); \n        float v_tmp_29898 = 0.0f; \n        v__14691 = v_tmp_29898; \n        /* reduce_seq */\n        for (int v_i_29805 = 0; v_i_29805 < v_MWidthC_1; v_i_29805 = (1 + v_i_29805)) {\n          v__14691 = add(v__14691, v__29825[(v_i_29805 + (v_MWidthC_1 * v_l_id_29804))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29806 = 0; \n          v__29830[v_w_id_29800] = doubleMultiplyAdd(v__14691, v__29811, v__29810[v_w_id_29800], v__29812); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_29800 = atomic_inc(v_work_idx_1433); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__29807",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29808",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29814",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29825",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}