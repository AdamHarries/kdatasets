{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21439, const global float* restrict v__21440, const global float* restrict v__21441, const global float* restrict v__21442, float v__21443, float v__21444, global float* v__21462, global float* v__21452, global int* v__21446, local float* v__21457, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21448; \n  float v__21453; \n  float v__14691; \n  /* Private Memory */\n  float v__21450_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_685 = v__21446; \n    local int v_w_id_21431; \n    if (get_local_id(0) == 0) {\n      v_w_id_21431 = atomic_inc(v_work_idx_685); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21431 < v_MHeight_2)){\n      for (int v_l_id_21432 = get_local_id(0); v_l_id_21432 < v_MWidthC_1; v_l_id_21432 = (v_l_id_21432 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_21433 = 0; v_i_21433 < 16; v_i_21433 = (1 + v_i_21433)) {\n          float v_tmp_21521 = 0.0f; \n          v__21448 = v_tmp_21521; \n          int v_index_21522 = v__21439[(v_l_id_21432 + (16 * v_MWidthC_1 * v_w_id_21431) + (v_MWidthC_1 * v_i_21433))]; \n          if (v_index_21522 < 0) {\n            v__21450_0 = v__21448; \n          } else {\n            if (v_index_21522 >= v_VLength_3) {\n              v__21450_0 = v__21448; \n            } else {\n              v__21450_0 = v__21441[v_index_21522]; \n            }\n          }\n          v__21452[(15 + (16 * v_MWidthC_1 * v_w_id_21431) + (-1 * v_i_21433) + (16 * v_l_id_21432))] = mult(v__21450_0, v__21440[(v_l_id_21432 + (16 * v_MWidthC_1 * v_w_id_21431) + (v_MWidthC_1 * v_i_21433))]); \n        }\n        /* end map_seq */\n        float v_tmp_21523 = 0.0f; \n        v__21453 = v_tmp_21523; \n        /* reduce_seq */\n        for (int v_i_21434 = 0; v_i_21434 < 16; v_i_21434 = (1 + v_i_21434)) {\n          v__21453 = add(v__21453, v__21452[(v_i_21434 + (16 * v_MWidthC_1 * v_w_id_21431) + (16 * v_l_id_21432))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21435 = 0; \n          v__21457[v_l_id_21432] = id(v__21453); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_678; \n        v_work_idx_678 = 0; \n        int v_l_id_21436 = atomic_inc(&(v_work_idx_678)); \n        while((v_l_id_21436 < 1)){\n          float v_tmp_21526 = 0.0f; \n          v__14691 = v_tmp_21526; \n          /* reduce_seq */\n          for (int v_i_21437 = 0; v_i_21437 < v_MWidthC_1; v_i_21437 = (1 + v_i_21437)) {\n            v__14691 = add(v__14691, v__21457[(v_i_21437 + (v_MWidthC_1 * v_l_id_21436))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21438 = 0; \n            v__21462[v_w_id_21431] = doubleMultiplyAdd(v__14691, v__21443, v__21442[v_w_id_21431], v__21444); \n          }\n          /* end map_seq */\n          v_l_id_21436 = atomic_inc(&(v_work_idx_678)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21431 = atomic_inc(v_work_idx_685); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__21439",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21440",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21441",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21442",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21443",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21444",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21452",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21446",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21462",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21457",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}