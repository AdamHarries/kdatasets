{
  "name" : "swrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36662, const global float* restrict v__36663, const global float* restrict v__36664, const global float* restrict v__36665, float v__36666, float v__36667, global float* v__36686, local float* v__36681, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__36670; \n  float v__36672; \n  float v__14691; \n  /* Private Memory */\n  float v__36674_0;\n  \n  float v__36676_0;\n  \n  int v__36680_0;\n  \n  for (int v_wg_id_36655 = get_group_id(0); v_wg_id_36655 < v_MHeight_2; v_wg_id_36655 = (v_wg_id_36655 + get_num_groups(0))) {\n    for (int v_l_id_36656 = get_local_id(0); v_l_id_36656 < v_MWidthC_1; v_l_id_36656 = (v_l_id_36656 + get_local_size(0))) {\n      float v_tmp_36750 = 0.0f; \n      v__36670 = v_tmp_36750; \n      /* reduce_while_seq */\n      for (int v_i_36657 = 0; v_i_36657 < 256; v_i_36657 = (1 + v_i_36657)) {\n        v__36680_0 = check(v__36670, v__36662[(v_l_id_36656 + (256 * v_MWidthC_1 * v_wg_id_36655) + (v_MWidthC_1 * v_i_36657))]); \n        if (v__36680_0) {\n        } else {\n          break;\n        }\n        float v_tmp_36751 = 0.0f; \n        v__36672 = v_tmp_36751; \n        int v_index_36752 = v__36662[(v_l_id_36656 + (256 * v_MWidthC_1 * v_wg_id_36655) + (v_MWidthC_1 * v_i_36657))]; \n        if (v_index_36752 < 0) {\n          v__36674_0 = v__36672; \n        } else {\n          if (v_index_36752 >= v_VLength_3) {\n            v__36674_0 = v__36672; \n          } else {\n            v__36674_0 = v__36664[v_index_36752]; \n          }\n        }\n        v__36676_0 = mult(v__36674_0, v__36663[(v_l_id_36656 + (256 * v_MWidthC_1 * v_wg_id_36655) + (v_MWidthC_1 * v_i_36657))]); \n        v__36670 = add(v__36676_0, v__36670); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36658 = 0; \n        v__36681[v_l_id_36656] = id(v__36670); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2044; \n      v_work_idx_2044 = 0; \n      int v_l_id_36659 = atomic_inc(&(v_work_idx_2044)); \n      while((v_l_id_36659 < 1)){\n        float v_tmp_36755 = 0.0f; \n        v__14691 = v_tmp_36755; \n        /* reduce_seq */\n        for (int v_i_36660 = 0; v_i_36660 < v_MWidthC_1; v_i_36660 = (1 + v_i_36660)) {\n          v__14691 = add(v__14691, v__36681[(v_i_36660 + (v_MWidthC_1 * v_l_id_36659))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_36661 = 0; \n          v__36686[v_wg_id_36655] = doubleMultiplyAdd(v__14691, v__36666, v__36665[v_wg_id_36655], v__36667); \n        }\n        /* end map_seq */\n        v_l_id_36659 = atomic_inc(&(v_work_idx_2044)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__36662",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36663",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36664",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36665",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36666",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36667",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__36686",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36681",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}