{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37882, const global float* restrict v__37883, const global float* restrict v__37884, const global float* restrict v__37885, float v__37886, float v__37887, global float* v__37901, global int* v__37889, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37891; \n  float v__37893; \n  /* Private Memory */\n  float v__37895_0;\n  \n  float v__37897_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2158 = v__37889; \n    local int v_w_id_37878; \n    if (get_local_id(0) == 0) {\n      v_w_id_37878 = atomic_inc(v_work_idx_2158); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_37878 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_37879 = get_local_id(0); v_l_id_37879 < 256; v_l_id_37879 = (v_l_id_37879 + get_local_size(0))) {\n        float v_tmp_37942 = 0.0f; \n        v__37891 = v_tmp_37942; \n        /* reduce_seq */\n        for (int v_i_37880 = 0; v_i_37880 < v_MWidthC_1; v_i_37880 = (1 + v_i_37880)) {\n          float v_tmp_37943 = 0.0f; \n          v__37893 = v_tmp_37943; \n          int v_index_37944 = v__37882[(v_i_37880 + (256 * v_MWidthC_1 * v_w_id_37878) + (v_MWidthC_1 * v_l_id_37879))]; \n          if (v_index_37944 < 0) {\n            v__37895_0 = v__37893; \n          } else {\n            if (v_index_37944 >= v_VLength_3) {\n              v__37895_0 = v__37893; \n            } else {\n              v__37895_0 = v__37884[v_index_37944]; \n            }\n          }\n          v__37897_0 = mult(v__37895_0, v__37883[(v_i_37880 + (256 * v_MWidthC_1 * v_w_id_37878) + (v_MWidthC_1 * v_l_id_37879))]); \n          v__37891 = add(v__37897_0, v__37891); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37881 = 0; \n          v__37901[(v_l_id_37879 + (256 * v_w_id_37878))] = doubleMultiplyAdd(v__37891, v__37886, v__37885[(v_l_id_37879 + (256 * v_w_id_37878))], v__37887); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_37878 = atomic_inc(v_work_idx_2158); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__37882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37884",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37885",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37886",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37887",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37889",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__37901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}