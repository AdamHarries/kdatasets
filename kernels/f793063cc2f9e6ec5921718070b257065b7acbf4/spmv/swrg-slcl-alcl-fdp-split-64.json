{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27976, const global float* restrict v__27977, const global float* restrict v__27978, const global float* restrict v__27979, float v__27980, float v__27981, global float* v__27998, local float* v__27993, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27984; \n  float v__27986; \n  float v__14691; \n  /* Private Memory */\n  float v__27988_0;\n  \n  float v__27990_0;\n  \n  for (int v_wg_id_27969 = get_group_id(0); v_wg_id_27969 < v_MHeight_2; v_wg_id_27969 = (v_wg_id_27969 + get_num_groups(0))) {\n    for (int v_l_id_27970 = get_local_id(0); v_l_id_27970 < v_MWidthC_1; v_l_id_27970 = (v_l_id_27970 + get_local_size(0))) {\n      float v_tmp_28059 = 0.0f; \n      v__27984 = v_tmp_28059; \n      /* reduce_seq */\n      for (int v_i_27971 = 0; v_i_27971 < 64; v_i_27971 = (1 + v_i_27971)) {\n        float v_tmp_28060 = 0.0f; \n        v__27986 = v_tmp_28060; \n        int v_index_28061 = v__27976[(v_l_id_27970 + (64 * v_MWidthC_1 * v_wg_id_27969) + (v_MWidthC_1 * v_i_27971))]; \n        if (v_index_28061 < 0) {\n          v__27988_0 = v__27986; \n        } else {\n          if (v_index_28061 >= v_VLength_3) {\n            v__27988_0 = v__27986; \n          } else {\n            v__27988_0 = v__27978[v_index_28061]; \n          }\n        }\n        v__27990_0 = mult(v__27988_0, v__27977[(v_l_id_27970 + (64 * v_MWidthC_1 * v_wg_id_27969) + (v_MWidthC_1 * v_i_27971))]); \n        v__27984 = add(v__27990_0, v__27984); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_27972 = 0; \n        v__27993[v_l_id_27970] = id(v__27984); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1267; \n      v_work_idx_1267 = 0; \n      int v_l_id_27973 = atomic_inc(&(v_work_idx_1267)); \n      while((v_l_id_27973 < 1)){\n        float v_tmp_28064 = 0.0f; \n        v__14691 = v_tmp_28064; \n        /* reduce_seq */\n        for (int v_i_27974 = 0; v_i_27974 < v_MWidthC_1; v_i_27974 = (1 + v_i_27974)) {\n          v__14691 = add(v__14691, v__27993[(v_i_27974 + (v_MWidthC_1 * v_l_id_27973))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27975 = 0; \n          v__27998[v_wg_id_27969] = doubleMultiplyAdd(v__14691, v__27980, v__27979[v_wg_id_27969], v__27981); \n        }\n        /* end map_seq */\n        v_l_id_27973 = atomic_inc(&(v_work_idx_1267)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__27976",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27977",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27978",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27979",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27980",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27981",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__27998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27993",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}