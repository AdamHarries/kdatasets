{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37807, const global float* restrict v__37808, const global float* restrict v__37809, const global float* restrict v__37810, float v__37811, float v__37812, global float* v__37826, global float* v__37820, global int* v__37814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37816; \n  float v__37821; \n  /* Private Memory */\n  float v__37818_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2152 = v__37814; \n    local int v_w_id_37802; \n    if (get_local_id(0) == 0) {\n      v_w_id_37802 = atomic_inc(v_work_idx_2152); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_37802 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_37803 = get_local_id(0); v_l_id_37803 < 256; v_l_id_37803 = (v_l_id_37803 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_37804 = 0; v_i_37804 < v_MWidthC_1; v_i_37804 = (1 + v_i_37804)) {\n          float v_tmp_37869 = 0.0f; \n          v__37816 = v_tmp_37869; \n          int v_index_37870 = v__37807[(v_i_37804 + (256 * v_MWidthC_1 * v_w_id_37802) + (v_MWidthC_1 * v_l_id_37803))]; \n          if (v_index_37870 < 0) {\n            v__37818_0 = v__37816; \n          } else {\n            if (v_index_37870 >= v_VLength_3) {\n              v__37818_0 = v__37816; \n            } else {\n              v__37818_0 = v__37809[v_index_37870]; \n            }\n          }\n          v__37820[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_37802) + (-1 * v_i_37804) + (v_MWidthC_1 * v_l_id_37803))] = mult(v__37818_0, v__37808[(v_i_37804 + (256 * v_MWidthC_1 * v_w_id_37802) + (v_MWidthC_1 * v_l_id_37803))]); \n        }\n        /* end map_seq */\n        float v_tmp_37871 = 0.0f; \n        v__37821 = v_tmp_37871; \n        /* reduce_seq */\n        for (int v_i_37805 = 0; v_i_37805 < v_MWidthC_1; v_i_37805 = (1 + v_i_37805)) {\n          v__37821 = add(v__37821, v__37820[(v_i_37805 + (256 * v_MWidthC_1 * v_w_id_37802) + (v_MWidthC_1 * v_l_id_37803))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37806 = 0; \n          v__37826[(v_l_id_37803 + (256 * v_w_id_37802))] = doubleMultiplyAdd(v__37821, v__37811, v__37810[(v_l_id_37803 + (256 * v_w_id_37802))], v__37812); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_37802 = atomic_inc(v_work_idx_2152); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37808",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37814",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__37826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}