{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37522, const global float* restrict v__37523, const global float* restrict v__37524, const global float* restrict v__37525, float v__37526, float v__37527, global float* v__37544, global float* v__37534, local float* v__37539, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__37530; \n  float v__37535; \n  float v__14691; \n  /* Private Memory */\n  float v__37532_0;\n  \n  for (int v_wg_id_37514 = get_group_id(0); v_wg_id_37514 < v_MHeight_2; v_wg_id_37514 = (v_wg_id_37514 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2124; \n      v_work_idx_2124 = 0; \n      int v_l_id_37515 = atomic_inc(&(v_work_idx_2124)); \n      while((v_l_id_37515 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_37516 = 0; v_i_37516 < 256; v_i_37516 = (1 + v_i_37516)) {\n          float v_tmp_37597 = 0.0f; \n          v__37530 = v_tmp_37597; \n          int v_index_37598 = v__37522[(v_l_id_37515 + (256 * v_MWidthC_1 * v_wg_id_37514) + (v_MWidthC_1 * v_i_37516))]; \n          if (v_index_37598 < 0) {\n            v__37532_0 = v__37530; \n          } else {\n            if (v_index_37598 >= v_VLength_3) {\n              v__37532_0 = v__37530; \n            } else {\n              v__37532_0 = v__37524[v_index_37598]; \n            }\n          }\n          v__37534[(255 + (256 * v_MWidthC_1 * v_wg_id_37514) + (-1 * v_i_37516) + (256 * v_l_id_37515))] = mult(v__37532_0, v__37523[(v_l_id_37515 + (256 * v_MWidthC_1 * v_wg_id_37514) + (v_MWidthC_1 * v_i_37516))]); \n        }\n        /* end map_seq */\n        float v_tmp_37599 = 0.0f; \n        v__37535 = v_tmp_37599; \n        /* reduce_seq */\n        for (int v_i_37517 = 0; v_i_37517 < 256; v_i_37517 = (1 + v_i_37517)) {\n          v__37535 = add(v__37535, v__37534[(v_i_37517 + (256 * v_MWidthC_1 * v_wg_id_37514) + (256 * v_l_id_37515))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37518 = 0; \n          v__37539[v_l_id_37515] = id(v__37535); \n        }\n        /* end map_seq */\n        v_l_id_37515 = atomic_inc(&(v_work_idx_2124)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2118; \n      v_work_idx_2118 = 0; \n      int v_l_id_37519 = atomic_inc(&(v_work_idx_2118)); \n      while((v_l_id_37519 < 1)){\n        float v_tmp_37602 = 0.0f; \n        v__14691 = v_tmp_37602; \n        /* reduce_seq */\n        for (int v_i_37520 = 0; v_i_37520 < v_MWidthC_1; v_i_37520 = (1 + v_i_37520)) {\n          v__14691 = add(v__14691, v__37539[(v_i_37520 + (v_MWidthC_1 * v_l_id_37519))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37521 = 0; \n          v__37544[v_wg_id_37514] = doubleMultiplyAdd(v__14691, v__37526, v__37525[v_wg_id_37514], v__37527); \n        }\n        /* end map_seq */\n        v_l_id_37519 = atomic_inc(&(v_work_idx_2118)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37522",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37523",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37524",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37525",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37526",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37527",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37534",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37539",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}