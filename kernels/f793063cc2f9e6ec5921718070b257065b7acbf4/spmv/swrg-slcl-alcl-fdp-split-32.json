{
  "name" : "swrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23684, const global float* restrict v__23685, const global float* restrict v__23686, const global float* restrict v__23687, float v__23688, float v__23689, global float* v__23706, local float* v__23701, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23692; \n  float v__23694; \n  float v__14691; \n  /* Private Memory */\n  float v__23696_0;\n  \n  float v__23698_0;\n  \n  for (int v_wg_id_23677 = get_group_id(0); v_wg_id_23677 < v_MHeight_2; v_wg_id_23677 = (v_wg_id_23677 + get_num_groups(0))) {\n    for (int v_l_id_23678 = get_local_id(0); v_l_id_23678 < v_MWidthC_1; v_l_id_23678 = (v_l_id_23678 + get_local_size(0))) {\n      float v_tmp_23767 = 0.0f; \n      v__23692 = v_tmp_23767; \n      /* reduce_seq */\n      for (int v_i_23679 = 0; v_i_23679 < 32; v_i_23679 = (1 + v_i_23679)) {\n        float v_tmp_23768 = 0.0f; \n        v__23694 = v_tmp_23768; \n        int v_index_23769 = v__23684[(v_l_id_23678 + (32 * v_MWidthC_1 * v_wg_id_23677) + (v_MWidthC_1 * v_i_23679))]; \n        if (v_index_23769 < 0) {\n          v__23696_0 = v__23694; \n        } else {\n          if (v_index_23769 >= v_VLength_3) {\n            v__23696_0 = v__23694; \n          } else {\n            v__23696_0 = v__23686[v_index_23769]; \n          }\n        }\n        v__23698_0 = mult(v__23696_0, v__23685[(v_l_id_23678 + (32 * v_MWidthC_1 * v_wg_id_23677) + (v_MWidthC_1 * v_i_23679))]); \n        v__23692 = add(v__23698_0, v__23692); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23680 = 0; \n        v__23701[v_l_id_23678] = id(v__23692); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_883; \n      v_work_idx_883 = 0; \n      int v_l_id_23681 = atomic_inc(&(v_work_idx_883)); \n      while((v_l_id_23681 < 1)){\n        float v_tmp_23772 = 0.0f; \n        v__14691 = v_tmp_23772; \n        /* reduce_seq */\n        for (int v_i_23682 = 0; v_i_23682 < v_MWidthC_1; v_i_23682 = (1 + v_i_23682)) {\n          v__14691 = add(v__14691, v__23701[(v_i_23682 + (v_MWidthC_1 * v_l_id_23681))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23683 = 0; \n          v__23706[v_wg_id_23677] = doubleMultiplyAdd(v__14691, v__23688, v__23687[v_wg_id_23677], v__23689); \n        }\n        /* end map_seq */\n        v_l_id_23681 = atomic_inc(&(v_work_idx_883)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__23684",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23685",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23686",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23688",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23689",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23701",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}