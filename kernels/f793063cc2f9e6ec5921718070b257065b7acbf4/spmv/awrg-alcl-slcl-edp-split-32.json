{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26686, const global float* restrict v__26687, const global float* restrict v__26688, const global float* restrict v__26689, float v__26690, float v__26691, global float* v__26711, global int* v__26693, local float* v__26706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26695; \n  float v__26697; \n  float v__14691; \n  /* Private Memory */\n  float v__26699_0;\n  \n  float v__26701_0;\n  \n  int v__26705_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1163 = v__26693; \n    local int v_w_id_26679; \n    if (get_local_id(0) == 0) {\n      v_w_id_26679 = atomic_inc(v_work_idx_1163); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26679 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1161; \n        v_work_idx_1161 = 0; \n        int v_l_id_26680 = atomic_inc(&(v_work_idx_1161)); \n        while((v_l_id_26680 < v_MWidthC_1)){\n          float v_tmp_26769 = 0.0f; \n          v__26695 = v_tmp_26769; \n          /* reduce_while_seq */\n          for (int v_i_26681 = 0; v_i_26681 < 32; v_i_26681 = (1 + v_i_26681)) {\n            v__26705_0 = check(v__26695, v__26686[(v_l_id_26680 + (32 * v_MWidthC_1 * v_w_id_26679) + (v_MWidthC_1 * v_i_26681))]); \n            if (v__26705_0) {\n            } else {\n              break;\n            }\n            float v_tmp_26770 = 0.0f; \n            v__26697 = v_tmp_26770; \n            int v_index_26771 = v__26686[(v_l_id_26680 + (32 * v_MWidthC_1 * v_w_id_26679) + (v_MWidthC_1 * v_i_26681))]; \n            if (v_index_26771 < 0) {\n              v__26699_0 = v__26697; \n            } else {\n              if (v_index_26771 >= v_VLength_3) {\n                v__26699_0 = v__26697; \n              } else {\n                v__26699_0 = v__26688[v_index_26771]; \n              }\n            }\n            v__26701_0 = mult(v__26699_0, v__26687[(v_l_id_26680 + (32 * v_MWidthC_1 * v_w_id_26679) + (v_MWidthC_1 * v_i_26681))]); \n            v__26695 = add(v__26701_0, v__26695); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26682 = 0; \n            v__26706[v_l_id_26680] = id(v__26695); \n          }\n          /* end map_seq */\n          v_l_id_26680 = atomic_inc(&(v_work_idx_1161)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_26683 = get_local_id(0); \n        float v_tmp_26774 = 0.0f; \n        v__14691 = v_tmp_26774; \n        /* reduce_seq */\n        for (int v_i_26684 = 0; v_i_26684 < v_MWidthC_1; v_i_26684 = (1 + v_i_26684)) {\n          v__14691 = add(v__14691, v__26706[(v_i_26684 + (v_MWidthC_1 * v_l_id_26683))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26685 = 0; \n          v__26711[v_w_id_26679] = doubleMultiplyAdd(v__14691, v__26690, v__26689[v_w_id_26679], v__26691); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26679 = atomic_inc(v_work_idx_1163); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__26686",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26687",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26688",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26690",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26691",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26693",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}