{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35373, const global float* restrict v__35374, const global float* restrict v__35375, const global float* restrict v__35376, float v__35377, float v__35378, global float* v__35396, global float* v__35386, global int* v__35380, local float* v__35391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__35382; \n  float v__35387; \n  float v__14691; \n  /* Private Memory */\n  float v__35384_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1943 = v__35380; \n    local int v_w_id_35365; \n    if (get_local_id(0) == 0) {\n      v_w_id_35365 = atomic_inc(v_work_idx_1943); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35365 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1941; \n        v_work_idx_1941 = 0; \n        int v_l_id_35366 = atomic_inc(&(v_work_idx_1941)); \n        while((v_l_id_35366 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_35367 = 0; v_i_35367 < 128; v_i_35367 = (1 + v_i_35367)) {\n            float v_tmp_35447 = 0.0f; \n            v__35382 = v_tmp_35447; \n            int v_index_35448 = v__35373[(v_l_id_35366 + (128 * v_MWidthC_1 * v_w_id_35365) + (v_MWidthC_1 * v_i_35367))]; \n            if (v_index_35448 < 0) {\n              v__35384_0 = v__35382; \n            } else {\n              if (v_index_35448 >= v_VLength_3) {\n                v__35384_0 = v__35382; \n              } else {\n                v__35384_0 = v__35375[v_index_35448]; \n              }\n            }\n            v__35386[(127 + (128 * v_MWidthC_1 * v_w_id_35365) + (-1 * v_i_35367) + (128 * v_l_id_35366))] = mult(v__35384_0, v__35374[(v_l_id_35366 + (128 * v_MWidthC_1 * v_w_id_35365) + (v_MWidthC_1 * v_i_35367))]); \n          }\n          /* end map_seq */\n          float v_tmp_35449 = 0.0f; \n          v__35387 = v_tmp_35449; \n          /* reduce_seq */\n          for (int v_i_35368 = 0; v_i_35368 < 128; v_i_35368 = (1 + v_i_35368)) {\n            v__35387 = add(v__35387, v__35386[(v_i_35368 + (128 * v_MWidthC_1 * v_w_id_35365) + (128 * v_l_id_35366))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35369 = 0; \n            v__35391[v_l_id_35366] = id(v__35387); \n          }\n          /* end map_seq */\n          v_l_id_35366 = atomic_inc(&(v_work_idx_1941)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1935; \n        v_work_idx_1935 = 0; \n        int v_l_id_35370 = atomic_inc(&(v_work_idx_1935)); \n        while((v_l_id_35370 < 1)){\n          float v_tmp_35452 = 0.0f; \n          v__14691 = v_tmp_35452; \n          /* reduce_seq */\n          for (int v_i_35371 = 0; v_i_35371 < v_MWidthC_1; v_i_35371 = (1 + v_i_35371)) {\n            v__14691 = add(v__14691, v__35391[(v_i_35371 + (v_MWidthC_1 * v_l_id_35370))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35372 = 0; \n            v__35396[v_w_id_35365] = doubleMultiplyAdd(v__14691, v__35377, v__35376[v_w_id_35365], v__35378); \n          }\n          /* end map_seq */\n          v_l_id_35370 = atomic_inc(&(v_work_idx_1935)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35365 = atomic_inc(v_work_idx_1943); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__35373",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35374",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35375",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35376",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35377",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35378",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35386",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35380",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}