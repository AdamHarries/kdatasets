{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14886, const global float* restrict v__14887, const global float* restrict v__14888, const global float* restrict v__14889, float v__14890, float v__14891, global float* v__14910, local float* v__14905, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14894; \n  float v__14896; \n  float v__14691; \n  /* Private Memory */\n  float v__14898_0;\n  \n  float v__14900_0;\n  \n  int v__14904_0;\n  \n  for (int v_wg_id_14879 = get_group_id(0); v_wg_id_14879 < v_MHeight_2; v_wg_id_14879 = (v_wg_id_14879 + get_num_groups(0))) {\n    for (int v_l_id_14880 = get_local_id(0); v_l_id_14880 < v_MWidthC_1; v_l_id_14880 = (v_l_id_14880 + get_local_size(0))) {\n      float v_tmp_14978 = 0.0f; \n      v__14894 = v_tmp_14978; \n      /* reduce_while_seq */\n      for (int v_i_14881 = 0; v_i_14881 < 8; v_i_14881 = (1 + v_i_14881)) {\n        v__14904_0 = check(v__14894, v__14886[(v_l_id_14880 + (8 * v_MWidthC_1 * v_wg_id_14879) + (v_MWidthC_1 * v_i_14881))]); \n        if (v__14904_0) {\n        } else {\n          break;\n        }\n        float v_tmp_14979 = 0.0f; \n        v__14896 = v_tmp_14979; \n        int v_index_14980 = v__14886[(v_l_id_14880 + (8 * v_MWidthC_1 * v_wg_id_14879) + (v_MWidthC_1 * v_i_14881))]; \n        if (v_index_14980 < 0) {\n          v__14898_0 = v__14896; \n        } else {\n          if (v_index_14980 >= v_VLength_3) {\n            v__14898_0 = v__14896; \n          } else {\n            v__14898_0 = v__14888[v_index_14980]; \n          }\n        }\n        v__14900_0 = mult(v__14898_0, v__14887[(v_l_id_14880 + (8 * v_MWidthC_1 * v_wg_id_14879) + (v_MWidthC_1 * v_i_14881))]); \n        v__14894 = add(v__14900_0, v__14894); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_14882 = 0; \n        v__14905[v_l_id_14880] = id(v__14894); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_14883 = get_local_id(0); \n      float v_tmp_14983 = 0.0f; \n      v__14691 = v_tmp_14983; \n      /* reduce_seq */\n      for (int v_i_14884 = 0; v_i_14884 < v_MWidthC_1; v_i_14884 = (1 + v_i_14884)) {\n        v__14691 = add(v__14691, v__14905[(v_i_14884 + (v_MWidthC_1 * v_l_id_14883))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_14885 = 0; \n        v__14910[v_wg_id_14879] = doubleMultiplyAdd(v__14691, v__14890, v__14889[v_wg_id_14879], v__14891); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14886",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14887",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14888",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14890",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14891",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14905",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}