{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31267, const global float* restrict v__31268, const global float* restrict v__31269, const global float* restrict v__31270, float v__31271, float v__31272, global float* v__31292, global int* v__31274, local float* v__31287, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31276; \n  float v__31278; \n  float v__14691; \n  /* Private Memory */\n  float v__31280_0;\n  \n  float v__31282_0;\n  \n  int v__31286_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1581 = v__31274; \n    local int v_w_id_31260; \n    if (get_local_id(0) == 0) {\n      v_w_id_31260 = atomic_inc(v_work_idx_1581); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31260 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1579; \n        v_work_idx_1579 = 0; \n        int v_l_id_31261 = atomic_inc(&(v_work_idx_1579)); \n        while((v_l_id_31261 < v_MWidthC_1)){\n          float v_tmp_31346 = 0.0f; \n          v__31276 = v_tmp_31346; \n          /* reduce_while_seq */\n          for (int v_i_31262 = 0; v_i_31262 < 64; v_i_31262 = (1 + v_i_31262)) {\n            v__31286_0 = check(v__31276, v__31267[(v_l_id_31261 + (64 * v_MWidthC_1 * v_w_id_31260) + (v_MWidthC_1 * v_i_31262))]); \n            if (v__31286_0) {\n            } else {\n              break;\n            }\n            float v_tmp_31347 = 0.0f; \n            v__31278 = v_tmp_31347; \n            int v_index_31348 = v__31267[(v_l_id_31261 + (64 * v_MWidthC_1 * v_w_id_31260) + (v_MWidthC_1 * v_i_31262))]; \n            if (v_index_31348 < 0) {\n              v__31280_0 = v__31278; \n            } else {\n              if (v_index_31348 >= v_VLength_3) {\n                v__31280_0 = v__31278; \n              } else {\n                v__31280_0 = v__31269[v_index_31348]; \n              }\n            }\n            v__31282_0 = mult(v__31280_0, v__31268[(v_l_id_31261 + (64 * v_MWidthC_1 * v_w_id_31260) + (v_MWidthC_1 * v_i_31262))]); \n            v__31276 = add(v__31282_0, v__31276); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31263 = 0; \n            v__31287[v_l_id_31261] = id(v__31276); \n          }\n          /* end map_seq */\n          v_l_id_31261 = atomic_inc(&(v_work_idx_1579)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1574; \n        v_work_idx_1574 = 0; \n        int v_l_id_31264 = atomic_inc(&(v_work_idx_1574)); \n        while((v_l_id_31264 < 1)){\n          float v_tmp_31351 = 0.0f; \n          v__14691 = v_tmp_31351; \n          /* reduce_seq */\n          for (int v_i_31265 = 0; v_i_31265 < v_MWidthC_1; v_i_31265 = (1 + v_i_31265)) {\n            v__14691 = add(v__14691, v__31287[(v_i_31265 + (v_MWidthC_1 * v_l_id_31264))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31266 = 0; \n            v__31292[v_w_id_31260] = doubleMultiplyAdd(v__14691, v__31271, v__31270[v_w_id_31260], v__31272); \n          }\n          /* end map_seq */\n          v_l_id_31264 = atomic_inc(&(v_work_idx_1574)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31260 = atomic_inc(v_work_idx_1581); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__31267",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31268",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31269",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31270",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31271",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31272",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31274",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31292",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31287",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}