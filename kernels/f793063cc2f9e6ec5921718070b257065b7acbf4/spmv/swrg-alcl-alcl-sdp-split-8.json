{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16062, const global float* restrict v__16063, const global float* restrict v__16064, const global float* restrict v__16065, float v__16066, float v__16067, global float* v__16084, global float* v__16074, local float* v__16079, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16070; \n  float v__16075; \n  float v__14691; \n  /* Private Memory */\n  float v__16072_0;\n  \n  for (int v_wg_id_16054 = get_group_id(0); v_wg_id_16054 < v_MHeight_2; v_wg_id_16054 = (v_wg_id_16054 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_204; \n      v_work_idx_204 = 0; \n      int v_l_id_16055 = atomic_inc(&(v_work_idx_204)); \n      while((v_l_id_16055 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_16056 = 0; v_i_16056 < 8; v_i_16056 = (1 + v_i_16056)) {\n          float v_tmp_16137 = 0.0f; \n          v__16070 = v_tmp_16137; \n          int v_index_16138 = v__16062[(v_l_id_16055 + (8 * v_MWidthC_1 * v_wg_id_16054) + (v_MWidthC_1 * v_i_16056))]; \n          if (v_index_16138 < 0) {\n            v__16072_0 = v__16070; \n          } else {\n            if (v_index_16138 >= v_VLength_3) {\n              v__16072_0 = v__16070; \n            } else {\n              v__16072_0 = v__16064[v_index_16138]; \n            }\n          }\n          v__16074[(7 + (8 * v_MWidthC_1 * v_wg_id_16054) + (-1 * v_i_16056) + (8 * v_l_id_16055))] = mult(v__16072_0, v__16063[(v_l_id_16055 + (8 * v_MWidthC_1 * v_wg_id_16054) + (v_MWidthC_1 * v_i_16056))]); \n        }\n        /* end map_seq */\n        float v_tmp_16139 = 0.0f; \n        v__16075 = v_tmp_16139; \n        /* reduce_seq */\n        for (int v_i_16057 = 0; v_i_16057 < 8; v_i_16057 = (1 + v_i_16057)) {\n          v__16075 = add(v__16075, v__16074[(v_i_16057 + (8 * v_MWidthC_1 * v_wg_id_16054) + (8 * v_l_id_16055))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16058 = 0; \n          v__16079[v_l_id_16055] = id(v__16075); \n        }\n        /* end map_seq */\n        v_l_id_16055 = atomic_inc(&(v_work_idx_204)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_198; \n      v_work_idx_198 = 0; \n      int v_l_id_16059 = atomic_inc(&(v_work_idx_198)); \n      while((v_l_id_16059 < 1)){\n        float v_tmp_16142 = 0.0f; \n        v__14691 = v_tmp_16142; \n        /* reduce_seq */\n        for (int v_i_16060 = 0; v_i_16060 < v_MWidthC_1; v_i_16060 = (1 + v_i_16060)) {\n          v__14691 = add(v__14691, v__16079[(v_i_16060 + (v_MWidthC_1 * v_l_id_16059))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16061 = 0; \n          v__16084[v_wg_id_16054] = doubleMultiplyAdd(v__14691, v__16066, v__16065[v_wg_id_16054], v__16067); \n        }\n        /* end map_seq */\n        v_l_id_16059 = atomic_inc(&(v_work_idx_198)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16062",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16063",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16064",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16065",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16066",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16067",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16074",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16084",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16079",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}