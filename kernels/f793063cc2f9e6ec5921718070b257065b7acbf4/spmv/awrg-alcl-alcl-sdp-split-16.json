{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22497, const global float* restrict v__22498, const global float* restrict v__22499, const global float* restrict v__22500, float v__22501, float v__22502, global float* v__22520, global float* v__22510, global int* v__22504, local float* v__22515, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22506; \n  float v__22511; \n  float v__14691; \n  /* Private Memory */\n  float v__22508_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_791 = v__22504; \n    local int v_w_id_22489; \n    if (get_local_id(0) == 0) {\n      v_w_id_22489 = atomic_inc(v_work_idx_791); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22489 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_789; \n        v_work_idx_789 = 0; \n        int v_l_id_22490 = atomic_inc(&(v_work_idx_789)); \n        while((v_l_id_22490 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22491 = 0; v_i_22491 < 16; v_i_22491 = (1 + v_i_22491)) {\n            float v_tmp_22571 = 0.0f; \n            v__22506 = v_tmp_22571; \n            int v_index_22572 = v__22497[(v_l_id_22490 + (16 * v_MWidthC_1 * v_w_id_22489) + (v_MWidthC_1 * v_i_22491))]; \n            if (v_index_22572 < 0) {\n              v__22508_0 = v__22506; \n            } else {\n              if (v_index_22572 >= v_VLength_3) {\n                v__22508_0 = v__22506; \n              } else {\n                v__22508_0 = v__22499[v_index_22572]; \n              }\n            }\n            v__22510[(15 + (16 * v_MWidthC_1 * v_w_id_22489) + (-1 * v_i_22491) + (16 * v_l_id_22490))] = mult(v__22508_0, v__22498[(v_l_id_22490 + (16 * v_MWidthC_1 * v_w_id_22489) + (v_MWidthC_1 * v_i_22491))]); \n          }\n          /* end map_seq */\n          float v_tmp_22573 = 0.0f; \n          v__22511 = v_tmp_22573; \n          /* reduce_seq */\n          for (int v_i_22492 = 0; v_i_22492 < 16; v_i_22492 = (1 + v_i_22492)) {\n            v__22511 = add(v__22511, v__22510[(v_i_22492 + (16 * v_MWidthC_1 * v_w_id_22489) + (16 * v_l_id_22490))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22493 = 0; \n            v__22515[v_l_id_22490] = id(v__22511); \n          }\n          /* end map_seq */\n          v_l_id_22490 = atomic_inc(&(v_work_idx_789)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_783; \n        v_work_idx_783 = 0; \n        int v_l_id_22494 = atomic_inc(&(v_work_idx_783)); \n        while((v_l_id_22494 < 1)){\n          float v_tmp_22576 = 0.0f; \n          v__14691 = v_tmp_22576; \n          /* reduce_seq */\n          for (int v_i_22495 = 0; v_i_22495 < v_MWidthC_1; v_i_22495 = (1 + v_i_22495)) {\n            v__14691 = add(v__14691, v__22515[(v_i_22495 + (v_MWidthC_1 * v_l_id_22494))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22496 = 0; \n            v__22520[v_w_id_22489] = doubleMultiplyAdd(v__14691, v__22501, v__22500[v_w_id_22489], v__22502); \n          }\n          /* end map_seq */\n          v_l_id_22494 = atomic_inc(&(v_work_idx_783)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22489 = atomic_inc(v_work_idx_791); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22497",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22498",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22499",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22500",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22501",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22502",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22510",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22504",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22515",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}