{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16250, const global float* restrict v__16251, const global float* restrict v__16252, const global float* restrict v__16253, float v__16254, float v__16255, global float* v__16274, local float* v__16269, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16258; \n  float v__16260; \n  float v__14691; \n  /* Private Memory */\n  float v__16262_0;\n  \n  float v__16264_0;\n  \n  int v__16268_0;\n  \n  for (int v_wg_id_16243 = get_group_id(0); v_wg_id_16243 < v_MHeight_2; v_wg_id_16243 = (v_wg_id_16243 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_224; \n      v_work_idx_224 = 0; \n      int v_l_id_16244 = atomic_inc(&(v_work_idx_224)); \n      while((v_l_id_16244 < v_MWidthC_1)){\n        float v_tmp_16330 = 0.0f; \n        v__16258 = v_tmp_16330; \n        /* reduce_while_seq */\n        for (int v_i_16245 = 0; v_i_16245 < 8; v_i_16245 = (1 + v_i_16245)) {\n          v__16268_0 = check(v__16258, v__16250[(v_l_id_16244 + (8 * v_MWidthC_1 * v_wg_id_16243) + (v_MWidthC_1 * v_i_16245))]); \n          if (v__16268_0) {\n          } else {\n            break;\n          }\n          float v_tmp_16331 = 0.0f; \n          v__16260 = v_tmp_16331; \n          int v_index_16332 = v__16250[(v_l_id_16244 + (8 * v_MWidthC_1 * v_wg_id_16243) + (v_MWidthC_1 * v_i_16245))]; \n          if (v_index_16332 < 0) {\n            v__16262_0 = v__16260; \n          } else {\n            if (v_index_16332 >= v_VLength_3) {\n              v__16262_0 = v__16260; \n            } else {\n              v__16262_0 = v__16252[v_index_16332]; \n            }\n          }\n          v__16264_0 = mult(v__16262_0, v__16251[(v_l_id_16244 + (8 * v_MWidthC_1 * v_wg_id_16243) + (v_MWidthC_1 * v_i_16245))]); \n          v__16258 = add(v__16264_0, v__16258); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16246 = 0; \n          v__16269[v_l_id_16244] = id(v__16258); \n        }\n        /* end map_seq */\n        v_l_id_16244 = atomic_inc(&(v_work_idx_224)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_219; \n      v_work_idx_219 = 0; \n      int v_l_id_16247 = atomic_inc(&(v_work_idx_219)); \n      while((v_l_id_16247 < 1)){\n        float v_tmp_16335 = 0.0f; \n        v__14691 = v_tmp_16335; \n        /* reduce_seq */\n        for (int v_i_16248 = 0; v_i_16248 < v_MWidthC_1; v_i_16248 = (1 + v_i_16248)) {\n          v__14691 = add(v__14691, v__16269[(v_i_16248 + (v_MWidthC_1 * v_l_id_16247))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16249 = 0; \n          v__16274[v_wg_id_16243] = doubleMultiplyAdd(v__14691, v__16254, v__16253[v_wg_id_16243], v__16255); \n        }\n        /* end map_seq */\n        v_l_id_16247 = atomic_inc(&(v_work_idx_219)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__16250",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16251",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16252",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16253",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16254",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16255",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16269",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}