{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42099, const global float* restrict v__42100, const global float* restrict v__42101, const global float* restrict v__42102, float v__42103, float v__42104, global float* v__42118, global float* v__42112, global int* v__42106, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42108; \n  float v__42113; \n  /* Private Memory */\n  float v__42110_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2536 = v__42106; \n    local int v_w_id_42094; \n    if (get_local_id(0) == 0) {\n      v_w_id_42094 = atomic_inc(v_work_idx_2536); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42094 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_42095 = get_local_id(0); v_l_id_42095 < 512; v_l_id_42095 = (v_l_id_42095 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_42096 = 0; v_i_42096 < v_MWidthC_1; v_i_42096 = (1 + v_i_42096)) {\n          float v_tmp_42161 = 0.0f; \n          v__42108 = v_tmp_42161; \n          int v_index_42162 = v__42099[(v_i_42096 + (512 * v_MWidthC_1 * v_w_id_42094) + (v_MWidthC_1 * v_l_id_42095))]; \n          if (v_index_42162 < 0) {\n            v__42110_0 = v__42108; \n          } else {\n            if (v_index_42162 >= v_VLength_3) {\n              v__42110_0 = v__42108; \n            } else {\n              v__42110_0 = v__42101[v_index_42162]; \n            }\n          }\n          v__42112[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_42094) + (-1 * v_i_42096) + (v_MWidthC_1 * v_l_id_42095))] = mult(v__42110_0, v__42100[(v_i_42096 + (512 * v_MWidthC_1 * v_w_id_42094) + (v_MWidthC_1 * v_l_id_42095))]); \n        }\n        /* end map_seq */\n        float v_tmp_42163 = 0.0f; \n        v__42113 = v_tmp_42163; \n        /* reduce_seq */\n        for (int v_i_42097 = 0; v_i_42097 < v_MWidthC_1; v_i_42097 = (1 + v_i_42097)) {\n          v__42113 = add(v__42113, v__42112[(v_i_42097 + (512 * v_MWidthC_1 * v_w_id_42094) + (v_MWidthC_1 * v_l_id_42095))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42098 = 0; \n          v__42118[(v_l_id_42095 + (512 * v_w_id_42094))] = doubleMultiplyAdd(v__42113, v__42103, v__42102[(v_l_id_42095 + (512 * v_w_id_42094))], v__42104); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_42094 = atomic_inc(v_work_idx_2536); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__42099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42112",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42106",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42118",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}