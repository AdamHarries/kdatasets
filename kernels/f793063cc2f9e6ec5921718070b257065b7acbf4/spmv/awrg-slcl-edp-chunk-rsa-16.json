{
  "name" : "awrg-slcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__21033, const global float* restrict v__21034, const global float* restrict v__21035, const global float* restrict v__21036, float v__21037, float v__21038, global float* v__21053, global float* v__21052, global int* v__21040, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21041; \n  float v__21044; \n  /* Private Memory */\n  float v__21046_0;\n  \n  float v__21048_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_646 = v__21040; \n    local int v_w_id_21028; \n    if (get_local_id(0) == 0) {\n      v_w_id_21028 = atomic_inc(v_work_idx_646); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21028 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_21029 = get_local_id(0); v_l_id_21029 < 16; v_l_id_21029 = (v_l_id_21029 + get_local_size(0))) {\n        float v_tmp_21089 = 0.0f; \n        v__21041 = v_tmp_21089; \n        /* reduce_seq */\n        int v_stop_21090 = min(v__21033[(1 + (v__21033[(v_l_id_21029 + (16 * v_w_id_21028))] / 4))], ((global int*)(v__21034 + (((global int*)(v__21034))[(v_l_id_21029 + (16 * v_w_id_21028))] / 4)))[1]); \n        for (int v_i_21030 = 0; v_i_21030 < v_stop_21090; v_i_21030 = (1 + v_i_21030)) {\n          float v_tmp_21098 = 0.0f; \n          v__21044 = v_tmp_21098; \n          int v_index_21100 = v__21033[(2 + v_i_21030 + (v__21033[(v_l_id_21029 + (16 * v_w_id_21028))] / 4))]; \n          if (v_index_21100 < 0) {\n            v__21046_0 = v__21044; \n          } else {\n            if (v_index_21100 >= v_MWidthC_1) {\n              v__21046_0 = v__21044; \n            } else {\n              v__21046_0 = v__21035[v_index_21100]; \n            }\n          }\n          v__21048_0 = mult(v__21034[(2 + v_i_21030 + (((global int*)(v__21034))[(v_l_id_21029 + (16 * v_w_id_21028))] / 4))], v__21046_0); \n          v__21041 = add(v__21041, v__21048_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21031 = 0; \n          v__21052[(v_l_id_21029 + (16 * v_w_id_21028))] = doubleMultiplyAdd(v__21041, v__21037, v__21036[(v_l_id_21029 + (16 * v_w_id_21028))], v__21038); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21032 = 0; \n          v__21053[(v_l_id_21029 + (16 * v_w_id_21028))] = id(v__21052[(v_l_id_21029 + (16 * v_w_id_21028))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_21028 = atomic_inc(v_work_idx_646); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21033",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__21034",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__21035",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__21036",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21037",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21038",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21052",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21040",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21053",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}