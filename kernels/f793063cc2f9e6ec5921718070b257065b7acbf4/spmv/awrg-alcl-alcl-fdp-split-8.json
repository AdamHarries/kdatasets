{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18298, const global float* restrict v__18299, const global float* restrict v__18300, const global float* restrict v__18301, float v__18302, float v__18303, global float* v__18321, global int* v__18305, local float* v__18316, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18307; \n  float v__18309; \n  float v__14691; \n  /* Private Memory */\n  float v__18311_0;\n  \n  float v__18313_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_418 = v__18305; \n    local int v_w_id_18291; \n    if (get_local_id(0) == 0) {\n      v_w_id_18291 = atomic_inc(v_work_idx_418); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18291 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_416; \n        v_work_idx_416 = 0; \n        int v_l_id_18292 = atomic_inc(&(v_work_idx_416)); \n        while((v_l_id_18292 < v_MWidthC_1)){\n          float v_tmp_18372 = 0.0f; \n          v__18307 = v_tmp_18372; \n          /* reduce_seq */\n          for (int v_i_18293 = 0; v_i_18293 < 8; v_i_18293 = (1 + v_i_18293)) {\n            float v_tmp_18373 = 0.0f; \n            v__18309 = v_tmp_18373; \n            int v_index_18374 = v__18298[(v_l_id_18292 + (8 * v_MWidthC_1 * v_w_id_18291) + (v_MWidthC_1 * v_i_18293))]; \n            if (v_index_18374 < 0) {\n              v__18311_0 = v__18309; \n            } else {\n              if (v_index_18374 >= v_VLength_3) {\n                v__18311_0 = v__18309; \n              } else {\n                v__18311_0 = v__18300[v_index_18374]; \n              }\n            }\n            v__18313_0 = mult(v__18311_0, v__18299[(v_l_id_18292 + (8 * v_MWidthC_1 * v_w_id_18291) + (v_MWidthC_1 * v_i_18293))]); \n            v__18307 = add(v__18313_0, v__18307); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18294 = 0; \n            v__18316[v_l_id_18292] = id(v__18307); \n          }\n          /* end map_seq */\n          v_l_id_18292 = atomic_inc(&(v_work_idx_416)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_411; \n        v_work_idx_411 = 0; \n        int v_l_id_18295 = atomic_inc(&(v_work_idx_411)); \n        while((v_l_id_18295 < 1)){\n          float v_tmp_18377 = 0.0f; \n          v__14691 = v_tmp_18377; \n          /* reduce_seq */\n          for (int v_i_18296 = 0; v_i_18296 < v_MWidthC_1; v_i_18296 = (1 + v_i_18296)) {\n            v__14691 = add(v__14691, v__18316[(v_i_18296 + (v_MWidthC_1 * v_l_id_18295))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18297 = 0; \n            v__18321[v_w_id_18291] = doubleMultiplyAdd(v__14691, v__18302, v__18301[v_w_id_18291], v__18303); \n          }\n          /* end map_seq */\n          v_l_id_18295 = atomic_inc(&(v_work_idx_411)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18291 = atomic_inc(v_work_idx_418); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__18298",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18299",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18300",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18302",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18303",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18305",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18316",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}