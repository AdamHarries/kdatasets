{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38391, const global float* restrict v__38392, const global float* restrict v__38393, const global float* restrict v__38394, float v__38395, float v__38396, global float* v__38414, global int* v__38398, local float* v__38409, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__38400; \n  float v__38402; \n  float v__14691; \n  /* Private Memory */\n  float v__38404_0;\n  \n  float v__38406_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2201 = v__38398; \n    local int v_w_id_38384; \n    if (get_local_id(0) == 0) {\n      v_w_id_38384 = atomic_inc(v_work_idx_2201); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38384 < v_MHeight_2)){\n      for (int v_l_id_38385 = get_local_id(0); v_l_id_38385 < v_MWidthC_1; v_l_id_38385 = (v_l_id_38385 + get_local_size(0))) {\n        float v_tmp_38477 = 0.0f; \n        v__38400 = v_tmp_38477; \n        /* reduce_seq */\n        for (int v_i_38386 = 0; v_i_38386 < 256; v_i_38386 = (1 + v_i_38386)) {\n          float v_tmp_38478 = 0.0f; \n          v__38402 = v_tmp_38478; \n          int v_index_38479 = v__38391[(v_l_id_38385 + (256 * v_MWidthC_1 * v_w_id_38384) + (v_MWidthC_1 * v_i_38386))]; \n          if (v_index_38479 < 0) {\n            v__38404_0 = v__38402; \n          } else {\n            if (v_index_38479 >= v_VLength_3) {\n              v__38404_0 = v__38402; \n            } else {\n              v__38404_0 = v__38393[v_index_38479]; \n            }\n          }\n          v__38406_0 = mult(v__38404_0, v__38392[(v_l_id_38385 + (256 * v_MWidthC_1 * v_w_id_38384) + (v_MWidthC_1 * v_i_38386))]); \n          v__38400 = add(v__38406_0, v__38400); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38387 = 0; \n          v__38409[v_l_id_38385] = id(v__38400); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_38388 = get_local_id(0); \n        float v_tmp_38482 = 0.0f; \n        v__14691 = v_tmp_38482; \n        /* reduce_seq */\n        for (int v_i_38389 = 0; v_i_38389 < v_MWidthC_1; v_i_38389 = (1 + v_i_38389)) {\n          v__14691 = add(v__14691, v__38409[(v_i_38389 + (v_MWidthC_1 * v_l_id_38388))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38390 = 0; \n          v__38414[v_w_id_38384] = doubleMultiplyAdd(v__14691, v__38395, v__38394[v_w_id_38384], v__38396); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38384 = atomic_inc(v_work_idx_2201); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38391",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38392",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38393",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38395",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38396",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38398",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38414",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38409",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}