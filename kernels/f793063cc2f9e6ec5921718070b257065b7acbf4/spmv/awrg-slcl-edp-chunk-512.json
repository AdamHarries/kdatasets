{
  "name" : "awrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42247, const global float* restrict v__42248, const global float* restrict v__42249, const global float* restrict v__42250, float v__42251, float v__42252, global float* v__42268, global int* v__42254, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42255; \n  float v__42258; \n  /* Private Memory */\n  float v__42260_0;\n  \n  float v__42262_0;\n  \n  int v__42266_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2548 = v__42254; \n    local int v_w_id_42243; \n    if (get_local_id(0) == 0) {\n      v_w_id_42243 = atomic_inc(v_work_idx_2548); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42243 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_42244 = get_local_id(0); v_l_id_42244 < 512; v_l_id_42244 = (v_l_id_42244 + get_local_size(0))) {\n        float v_tmp_42315 = 0.0f; \n        v__42255 = v_tmp_42315; \n        /* reduce_while_seq */\n        for (int v_i_42245 = 0; v_i_42245 < v_MWidthC_1; v_i_42245 = (1 + v_i_42245)) {\n          v__42266_0 = check(v__42255, v__42247[(v_i_42245 + (512 * v_MWidthC_1 * v_w_id_42243) + (v_MWidthC_1 * v_l_id_42244))]); \n          if (v__42266_0) {\n          } else {\n            break;\n          }\n          float v_tmp_42316 = 0.0f; \n          v__42258 = v_tmp_42316; \n          int v_index_42317 = v__42247[(v_i_42245 + (512 * v_MWidthC_1 * v_w_id_42243) + (v_MWidthC_1 * v_l_id_42244))]; \n          if (v_index_42317 < 0) {\n            v__42260_0 = v__42258; \n          } else {\n            if (v_index_42317 >= v_VLength_3) {\n              v__42260_0 = v__42258; \n            } else {\n              v__42260_0 = v__42249[v_index_42317]; \n            }\n          }\n          v__42262_0 = mult(v__42260_0, v__42248[(v_i_42245 + (512 * v_MWidthC_1 * v_w_id_42243) + (v_MWidthC_1 * v_l_id_42244))]); \n          v__42255 = add(v__42262_0, v__42255); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42246 = 0; \n          v__42268[(v_l_id_42244 + (512 * v_w_id_42243))] = doubleMultiplyAdd(v__42255, v__42251, v__42250[(v_l_id_42244 + (512 * v_w_id_42243))], v__42252); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_42243 = atomic_inc(v_work_idx_2548); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__42247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42249",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42251",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42252",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42254",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42268",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}