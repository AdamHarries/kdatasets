{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__40852, const global float* restrict v__40853, const global float* restrict v__40854, const global float* restrict v__40855, float v__40856, float v__40857, global float* v__40874, local float* v__40869, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__40860; \n  float v__40862; \n  float v__14691; \n  /* Private Memory */\n  float v__40864_0;\n  \n  float v__40866_0;\n  \n  for (int v_wg_id_40845 = get_group_id(0); v_wg_id_40845 < v_MHeight_2; v_wg_id_40845 = (v_wg_id_40845 + get_num_groups(0))) {\n    for (int v_l_id_40846 = get_local_id(0); v_l_id_40846 < v_MWidthC_1; v_l_id_40846 = (v_l_id_40846 + get_local_size(0))) {\n      float v_tmp_40935 = 0.0f; \n      v__40860 = v_tmp_40935; \n      /* reduce_seq */\n      for (int v_i_40847 = 0; v_i_40847 < 512; v_i_40847 = (1 + v_i_40847)) {\n        float v_tmp_40936 = 0.0f; \n        v__40862 = v_tmp_40936; \n        int v_index_40937 = v__40852[(v_l_id_40846 + (512 * v_MWidthC_1 * v_wg_id_40845) + (v_MWidthC_1 * v_i_40847))]; \n        if (v_index_40937 < 0) {\n          v__40864_0 = v__40862; \n        } else {\n          if (v_index_40937 >= v_VLength_3) {\n            v__40864_0 = v__40862; \n          } else {\n            v__40864_0 = v__40854[v_index_40937]; \n          }\n        }\n        v__40866_0 = mult(v__40864_0, v__40853[(v_l_id_40846 + (512 * v_MWidthC_1 * v_wg_id_40845) + (v_MWidthC_1 * v_i_40847))]); \n        v__40860 = add(v__40866_0, v__40860); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40848 = 0; \n        v__40869[v_l_id_40846] = id(v__40860); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2419; \n      v_work_idx_2419 = 0; \n      int v_l_id_40849 = atomic_inc(&(v_work_idx_2419)); \n      while((v_l_id_40849 < 1)){\n        float v_tmp_40940 = 0.0f; \n        v__14691 = v_tmp_40940; \n        /* reduce_seq */\n        for (int v_i_40850 = 0; v_i_40850 < v_MWidthC_1; v_i_40850 = (1 + v_i_40850)) {\n          v__14691 = add(v__14691, v__40869[(v_i_40850 + (v_MWidthC_1 * v_l_id_40849))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_40851 = 0; \n          v__40874[v_wg_id_40845] = doubleMultiplyAdd(v__14691, v__40856, v__40855[v_wg_id_40845], v__40857); \n        }\n        /* end map_seq */\n        v_l_id_40849 = atomic_inc(&(v_work_idx_2419)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__40852",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40853",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40854",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40856",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40857",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__40874",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__40869",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}