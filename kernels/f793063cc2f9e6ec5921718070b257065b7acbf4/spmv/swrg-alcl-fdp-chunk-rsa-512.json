{
  "name" : "swrg-alcl-fdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__41355, const global float* restrict v__41356, const global float* restrict v__41357, const global float* restrict v__41358, float v__41359, float v__41360, global float* v__41374, global float* v__41373, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__41362; \n  float v__41365; \n  /* Private Memory */\n  float v__41367_0;\n  \n  float v__41369_0;\n  \n  for (int v_wg_id_41350 = get_group_id(0); v_wg_id_41350 < ((v_MHeight_2)/(512)); v_wg_id_41350 = (v_wg_id_41350 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2463; \n      v_work_idx_2463 = 0; \n      int v_l_id_41351 = atomic_inc(&(v_work_idx_2463)); \n      while((v_l_id_41351 < 512)){\n        float v_tmp_41407 = 0.0f; \n        v__41362 = v_tmp_41407; \n        /* reduce_seq */\n        int v_stop_41408 = min(v__41355[(1 + (v__41355[(v_l_id_41351 + (512 * v_wg_id_41350))] / 4))], ((global int*)(v__41356 + (((global int*)(v__41356))[(v_l_id_41351 + (512 * v_wg_id_41350))] / 4)))[1]); \n        for (int v_i_41352 = 0; v_i_41352 < v_stop_41408; v_i_41352 = (1 + v_i_41352)) {\n          float v_tmp_41416 = 0.0f; \n          v__41365 = v_tmp_41416; \n          int v_index_41418 = v__41355[(2 + v_i_41352 + (v__41355[(v_l_id_41351 + (512 * v_wg_id_41350))] / 4))]; \n          if (v_index_41418 < 0) {\n            v__41367_0 = v__41365; \n          } else {\n            if (v_index_41418 >= v_MWidthC_1) {\n              v__41367_0 = v__41365; \n            } else {\n              v__41367_0 = v__41357[v_index_41418]; \n            }\n          }\n          v__41369_0 = mult(v__41356[(2 + v_i_41352 + (((global int*)(v__41356))[(v_l_id_41351 + (512 * v_wg_id_41350))] / 4))], v__41367_0); \n          v__41362 = add(v__41362, v__41369_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41353 = 0; \n          v__41373[(v_l_id_41351 + (512 * v_wg_id_41350))] = doubleMultiplyAdd(v__41362, v__41359, v__41358[(v_l_id_41351 + (512 * v_wg_id_41350))], v__41360); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41354 = 0; \n          v__41374[(v_l_id_41351 + (512 * v_wg_id_41350))] = id(v__41373[(v_l_id_41351 + (512 * v_wg_id_41350))]); \n        }\n        /* end map_seq */\n        v_l_id_41351 = atomic_inc(&(v_work_idx_2463)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__41355",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__41356",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__41357",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__41358",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41359",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41360",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41373",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__41374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}