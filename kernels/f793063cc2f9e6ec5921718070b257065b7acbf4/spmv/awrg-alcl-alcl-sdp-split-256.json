{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39665, const global float* restrict v__39666, const global float* restrict v__39667, const global float* restrict v__39668, float v__39669, float v__39670, global float* v__39688, global float* v__39678, global int* v__39672, local float* v__39683, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39674; \n  float v__39679; \n  float v__14691; \n  /* Private Memory */\n  float v__39676_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2327 = v__39672; \n    local int v_w_id_39657; \n    if (get_local_id(0) == 0) {\n      v_w_id_39657 = atomic_inc(v_work_idx_2327); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39657 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2325; \n        v_work_idx_2325 = 0; \n        int v_l_id_39658 = atomic_inc(&(v_work_idx_2325)); \n        while((v_l_id_39658 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_39659 = 0; v_i_39659 < 256; v_i_39659 = (1 + v_i_39659)) {\n            float v_tmp_39739 = 0.0f; \n            v__39674 = v_tmp_39739; \n            int v_index_39740 = v__39665[(v_l_id_39658 + (256 * v_MWidthC_1 * v_w_id_39657) + (v_MWidthC_1 * v_i_39659))]; \n            if (v_index_39740 < 0) {\n              v__39676_0 = v__39674; \n            } else {\n              if (v_index_39740 >= v_VLength_3) {\n                v__39676_0 = v__39674; \n              } else {\n                v__39676_0 = v__39667[v_index_39740]; \n              }\n            }\n            v__39678[(255 + (256 * v_MWidthC_1 * v_w_id_39657) + (-1 * v_i_39659) + (256 * v_l_id_39658))] = mult(v__39676_0, v__39666[(v_l_id_39658 + (256 * v_MWidthC_1 * v_w_id_39657) + (v_MWidthC_1 * v_i_39659))]); \n          }\n          /* end map_seq */\n          float v_tmp_39741 = 0.0f; \n          v__39679 = v_tmp_39741; \n          /* reduce_seq */\n          for (int v_i_39660 = 0; v_i_39660 < 256; v_i_39660 = (1 + v_i_39660)) {\n            v__39679 = add(v__39679, v__39678[(v_i_39660 + (256 * v_MWidthC_1 * v_w_id_39657) + (256 * v_l_id_39658))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39661 = 0; \n            v__39683[v_l_id_39658] = id(v__39679); \n          }\n          /* end map_seq */\n          v_l_id_39658 = atomic_inc(&(v_work_idx_2325)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2319; \n        v_work_idx_2319 = 0; \n        int v_l_id_39662 = atomic_inc(&(v_work_idx_2319)); \n        while((v_l_id_39662 < 1)){\n          float v_tmp_39744 = 0.0f; \n          v__14691 = v_tmp_39744; \n          /* reduce_seq */\n          for (int v_i_39663 = 0; v_i_39663 < v_MWidthC_1; v_i_39663 = (1 + v_i_39663)) {\n            v__14691 = add(v__14691, v__39683[(v_i_39663 + (v_MWidthC_1 * v_l_id_39662))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39664 = 0; \n            v__39688[v_w_id_39657] = doubleMultiplyAdd(v__14691, v__39669, v__39668[v_w_id_39657], v__39670); \n          }\n          /* end map_seq */\n          v_l_id_39662 = atomic_inc(&(v_work_idx_2319)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39657 = atomic_inc(v_work_idx_2327); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39665",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39666",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39667",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39669",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39670",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39678",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39672",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39688",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39683",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}