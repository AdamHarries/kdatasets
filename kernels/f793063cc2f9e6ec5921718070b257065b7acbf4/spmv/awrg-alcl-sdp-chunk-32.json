{
  "name" : "awrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26037, const global float* restrict v__26038, const global float* restrict v__26039, const global float* restrict v__26040, float v__26041, float v__26042, global float* v__26056, global float* v__26050, global int* v__26044, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26046; \n  float v__26051; \n  /* Private Memory */\n  float v__26048_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1097 = v__26044; \n    local int v_w_id_26032; \n    if (get_local_id(0) == 0) {\n      v_w_id_26032 = atomic_inc(v_work_idx_1097); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26032 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1095; \n        v_work_idx_1095 = 0; \n        int v_l_id_26033 = atomic_inc(&(v_work_idx_1095)); \n        while((v_l_id_26033 < 32)){\n          /* map_seq */\n          for (int v_i_26034 = 0; v_i_26034 < v_MWidthC_1; v_i_26034 = (1 + v_i_26034)) {\n            float v_tmp_26095 = 0.0f; \n            v__26046 = v_tmp_26095; \n            int v_index_26096 = v__26037[(v_i_26034 + (32 * v_MWidthC_1 * v_w_id_26032) + (v_MWidthC_1 * v_l_id_26033))]; \n            if (v_index_26096 < 0) {\n              v__26048_0 = v__26046; \n            } else {\n              if (v_index_26096 >= v_VLength_3) {\n                v__26048_0 = v__26046; \n              } else {\n                v__26048_0 = v__26039[v_index_26096]; \n              }\n            }\n            v__26050[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_26032) + (-1 * v_i_26034) + (v_MWidthC_1 * v_l_id_26033))] = mult(v__26048_0, v__26038[(v_i_26034 + (32 * v_MWidthC_1 * v_w_id_26032) + (v_MWidthC_1 * v_l_id_26033))]); \n          }\n          /* end map_seq */\n          float v_tmp_26097 = 0.0f; \n          v__26051 = v_tmp_26097; \n          /* reduce_seq */\n          for (int v_i_26035 = 0; v_i_26035 < v_MWidthC_1; v_i_26035 = (1 + v_i_26035)) {\n            v__26051 = add(v__26051, v__26050[(v_i_26035 + (32 * v_MWidthC_1 * v_w_id_26032) + (v_MWidthC_1 * v_l_id_26033))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26036 = 0; \n            v__26056[(v_l_id_26033 + (32 * v_w_id_26032))] = doubleMultiplyAdd(v__26051, v__26041, v__26040[(v_l_id_26033 + (32 * v_w_id_26032))], v__26042); \n          }\n          /* end map_seq */\n          v_l_id_26033 = atomic_inc(&(v_work_idx_1095)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26032 = atomic_inc(v_work_idx_1097); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26038",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26039",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26040",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26041",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26042",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26050",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26044",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}