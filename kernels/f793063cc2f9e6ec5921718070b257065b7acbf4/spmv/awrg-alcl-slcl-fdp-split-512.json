{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43757, const global float* restrict v__43758, const global float* restrict v__43759, const global float* restrict v__43760, float v__43761, float v__43762, global float* v__43780, global int* v__43764, local float* v__43775, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43766; \n  float v__43768; \n  float v__14691; \n  /* Private Memory */\n  float v__43770_0;\n  \n  float v__43772_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2689 = v__43764; \n    local int v_w_id_43750; \n    if (get_local_id(0) == 0) {\n      v_w_id_43750 = atomic_inc(v_work_idx_2689); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43750 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2687; \n        v_work_idx_2687 = 0; \n        int v_l_id_43751 = atomic_inc(&(v_work_idx_2687)); \n        while((v_l_id_43751 < v_MWidthC_1)){\n          float v_tmp_43835 = 0.0f; \n          v__43766 = v_tmp_43835; \n          /* reduce_seq */\n          for (int v_i_43752 = 0; v_i_43752 < 512; v_i_43752 = (1 + v_i_43752)) {\n            float v_tmp_43836 = 0.0f; \n            v__43768 = v_tmp_43836; \n            int v_index_43837 = v__43757[(v_l_id_43751 + (512 * v_MWidthC_1 * v_w_id_43750) + (v_MWidthC_1 * v_i_43752))]; \n            if (v_index_43837 < 0) {\n              v__43770_0 = v__43768; \n            } else {\n              if (v_index_43837 >= v_VLength_3) {\n                v__43770_0 = v__43768; \n              } else {\n                v__43770_0 = v__43759[v_index_43837]; \n              }\n            }\n            v__43772_0 = mult(v__43770_0, v__43758[(v_l_id_43751 + (512 * v_MWidthC_1 * v_w_id_43750) + (v_MWidthC_1 * v_i_43752))]); \n            v__43766 = add(v__43772_0, v__43766); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43753 = 0; \n            v__43775[v_l_id_43751] = id(v__43766); \n          }\n          /* end map_seq */\n          v_l_id_43751 = atomic_inc(&(v_work_idx_2687)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_43754 = get_local_id(0); \n        float v_tmp_43840 = 0.0f; \n        v__14691 = v_tmp_43840; \n        /* reduce_seq */\n        for (int v_i_43755 = 0; v_i_43755 < v_MWidthC_1; v_i_43755 = (1 + v_i_43755)) {\n          v__14691 = add(v__14691, v__43775[(v_i_43755 + (v_MWidthC_1 * v_l_id_43754))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_43756 = 0; \n          v__43780[v_w_id_43750] = doubleMultiplyAdd(v__14691, v__43761, v__43760[v_w_id_43750], v__43762); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43750 = atomic_inc(v_work_idx_2689); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__43757",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43758",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43759",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43760",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43761",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43762",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43764",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43780",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43775",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}