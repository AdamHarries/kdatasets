{
  "name" : "swrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23258, const global float* restrict v__23259, const global float* restrict v__23260, const global float* restrict v__23261, float v__23262, float v__23263, global float* v__23280, global float* v__23270, local float* v__23275, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23266; \n  float v__23271; \n  float v__14691; \n  /* Private Memory */\n  float v__23268_0;\n  \n  for (int v_wg_id_23250 = get_group_id(0); v_wg_id_23250 < v_MHeight_2; v_wg_id_23250 = (v_wg_id_23250 + get_num_groups(0))) {\n    for (int v_l_id_23251 = get_local_id(0); v_l_id_23251 < v_MWidthC_1; v_l_id_23251 = (v_l_id_23251 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_23252 = 0; v_i_23252 < 32; v_i_23252 = (1 + v_i_23252)) {\n        float v_tmp_23345 = 0.0f; \n        v__23266 = v_tmp_23345; \n        int v_index_23346 = v__23258[(v_l_id_23251 + (32 * v_MWidthC_1 * v_wg_id_23250) + (v_MWidthC_1 * v_i_23252))]; \n        if (v_index_23346 < 0) {\n          v__23268_0 = v__23266; \n        } else {\n          if (v_index_23346 >= v_VLength_3) {\n            v__23268_0 = v__23266; \n          } else {\n            v__23268_0 = v__23260[v_index_23346]; \n          }\n        }\n        v__23270[(31 + (32 * v_MWidthC_1 * v_wg_id_23250) + (-1 * v_i_23252) + (32 * v_l_id_23251))] = mult(v__23268_0, v__23259[(v_l_id_23251 + (32 * v_MWidthC_1 * v_wg_id_23250) + (v_MWidthC_1 * v_i_23252))]); \n      }\n      /* end map_seq */\n      float v_tmp_23347 = 0.0f; \n      v__23271 = v_tmp_23347; \n      /* reduce_seq */\n      for (int v_i_23253 = 0; v_i_23253 < 32; v_i_23253 = (1 + v_i_23253)) {\n        v__23271 = add(v__23271, v__23270[(v_i_23253 + (32 * v_MWidthC_1 * v_wg_id_23250) + (32 * v_l_id_23251))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23254 = 0; \n        v__23275[v_l_id_23251] = id(v__23271); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23255 = get_local_id(0); \n      float v_tmp_23350 = 0.0f; \n      v__14691 = v_tmp_23350; \n      /* reduce_seq */\n      for (int v_i_23256 = 0; v_i_23256 < v_MWidthC_1; v_i_23256 = (1 + v_i_23256)) {\n        v__14691 = add(v__14691, v__23275[(v_i_23256 + (v_MWidthC_1 * v_l_id_23255))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23257 = 0; \n        v__23280[v_wg_id_23250] = doubleMultiplyAdd(v__14691, v__23262, v__23261[v_wg_id_23250], v__23263); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23258",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23259",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23260",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23261",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23262",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23263",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23270",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23275",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}