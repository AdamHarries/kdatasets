{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42683, const global float* restrict v__42684, const global float* restrict v__42685, const global float* restrict v__42686, float v__42687, float v__42688, global float* v__42706, global int* v__42690, local float* v__42701, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42692; \n  float v__42694; \n  float v__14691; \n  /* Private Memory */\n  float v__42696_0;\n  \n  float v__42698_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2585 = v__42690; \n    local int v_w_id_42676; \n    if (get_local_id(0) == 0) {\n      v_w_id_42676 = atomic_inc(v_work_idx_2585); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42676 < v_MHeight_2)){\n      for (int v_l_id_42677 = get_local_id(0); v_l_id_42677 < v_MWidthC_1; v_l_id_42677 = (v_l_id_42677 + get_local_size(0))) {\n        float v_tmp_42769 = 0.0f; \n        v__42692 = v_tmp_42769; \n        /* reduce_seq */\n        for (int v_i_42678 = 0; v_i_42678 < 512; v_i_42678 = (1 + v_i_42678)) {\n          float v_tmp_42770 = 0.0f; \n          v__42694 = v_tmp_42770; \n          int v_index_42771 = v__42683[(v_l_id_42677 + (512 * v_MWidthC_1 * v_w_id_42676) + (v_MWidthC_1 * v_i_42678))]; \n          if (v_index_42771 < 0) {\n            v__42696_0 = v__42694; \n          } else {\n            if (v_index_42771 >= v_VLength_3) {\n              v__42696_0 = v__42694; \n            } else {\n              v__42696_0 = v__42685[v_index_42771]; \n            }\n          }\n          v__42698_0 = mult(v__42696_0, v__42684[(v_l_id_42677 + (512 * v_MWidthC_1 * v_w_id_42676) + (v_MWidthC_1 * v_i_42678))]); \n          v__42692 = add(v__42698_0, v__42692); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42679 = 0; \n          v__42701[v_l_id_42677] = id(v__42692); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_42680 = get_local_id(0); \n        float v_tmp_42774 = 0.0f; \n        v__14691 = v_tmp_42774; \n        /* reduce_seq */\n        for (int v_i_42681 = 0; v_i_42681 < v_MWidthC_1; v_i_42681 = (1 + v_i_42681)) {\n          v__14691 = add(v__14691, v__42701[(v_i_42681 + (v_MWidthC_1 * v_l_id_42680))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42682 = 0; \n          v__42706[v_w_id_42676] = doubleMultiplyAdd(v__14691, v__42687, v__42686[v_w_id_42676], v__42688); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42676 = atomic_inc(v_work_idx_2585); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__42683",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42684",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42685",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42686",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42687",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42688",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42690",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42701",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}