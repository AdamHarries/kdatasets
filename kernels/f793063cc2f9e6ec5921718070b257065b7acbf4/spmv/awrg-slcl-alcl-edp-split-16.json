{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21641, const global float* restrict v__21642, const global float* restrict v__21643, const global float* restrict v__21644, float v__21645, float v__21646, global float* v__21666, global int* v__21648, local float* v__21661, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21650; \n  float v__21652; \n  float v__14691; \n  /* Private Memory */\n  float v__21654_0;\n  \n  float v__21656_0;\n  \n  int v__21660_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_705 = v__21648; \n    local int v_w_id_21634; \n    if (get_local_id(0) == 0) {\n      v_w_id_21634 = atomic_inc(v_work_idx_705); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21634 < v_MHeight_2)){\n      for (int v_l_id_21635 = get_local_id(0); v_l_id_21635 < v_MWidthC_1; v_l_id_21635 = (v_l_id_21635 + get_local_size(0))) {\n        float v_tmp_21728 = 0.0f; \n        v__21650 = v_tmp_21728; \n        /* reduce_while_seq */\n        for (int v_i_21636 = 0; v_i_21636 < 16; v_i_21636 = (1 + v_i_21636)) {\n          v__21660_0 = check(v__21650, v__21641[(v_l_id_21635 + (16 * v_MWidthC_1 * v_w_id_21634) + (v_MWidthC_1 * v_i_21636))]); \n          if (v__21660_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21729 = 0.0f; \n          v__21652 = v_tmp_21729; \n          int v_index_21730 = v__21641[(v_l_id_21635 + (16 * v_MWidthC_1 * v_w_id_21634) + (v_MWidthC_1 * v_i_21636))]; \n          if (v_index_21730 < 0) {\n            v__21654_0 = v__21652; \n          } else {\n            if (v_index_21730 >= v_VLength_3) {\n              v__21654_0 = v__21652; \n            } else {\n              v__21654_0 = v__21643[v_index_21730]; \n            }\n          }\n          v__21656_0 = mult(v__21654_0, v__21642[(v_l_id_21635 + (16 * v_MWidthC_1 * v_w_id_21634) + (v_MWidthC_1 * v_i_21636))]); \n          v__21650 = add(v__21656_0, v__21650); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21637 = 0; \n          v__21661[v_l_id_21635] = id(v__21650); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_699; \n        v_work_idx_699 = 0; \n        int v_l_id_21638 = atomic_inc(&(v_work_idx_699)); \n        while((v_l_id_21638 < 1)){\n          float v_tmp_21733 = 0.0f; \n          v__14691 = v_tmp_21733; \n          /* reduce_seq */\n          for (int v_i_21639 = 0; v_i_21639 < v_MWidthC_1; v_i_21639 = (1 + v_i_21639)) {\n            v__14691 = add(v__14691, v__21661[(v_i_21639 + (v_MWidthC_1 * v_l_id_21638))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21640 = 0; \n            v__21666[v_w_id_21634] = doubleMultiplyAdd(v__14691, v__21645, v__21644[v_w_id_21634], v__21646); \n          }\n          /* end map_seq */\n          v_l_id_21638 = atomic_inc(&(v_work_idx_699)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21634 = atomic_inc(v_work_idx_705); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21641",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21642",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21643",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21644",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21645",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21646",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21648",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21666",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21661",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}