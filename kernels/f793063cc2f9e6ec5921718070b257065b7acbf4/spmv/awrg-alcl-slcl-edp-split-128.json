{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35270, const global float* restrict v__35271, const global float* restrict v__35272, const global float* restrict v__35273, float v__35274, float v__35275, global float* v__35295, global int* v__35277, local float* v__35290, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__35279; \n  float v__35281; \n  float v__14691; \n  /* Private Memory */\n  float v__35283_0;\n  \n  float v__35285_0;\n  \n  int v__35289_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1931 = v__35277; \n    local int v_w_id_35263; \n    if (get_local_id(0) == 0) {\n      v_w_id_35263 = atomic_inc(v_work_idx_1931); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35263 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1929; \n        v_work_idx_1929 = 0; \n        int v_l_id_35264 = atomic_inc(&(v_work_idx_1929)); \n        while((v_l_id_35264 < v_MWidthC_1)){\n          float v_tmp_35353 = 0.0f; \n          v__35279 = v_tmp_35353; \n          /* reduce_while_seq */\n          for (int v_i_35265 = 0; v_i_35265 < 128; v_i_35265 = (1 + v_i_35265)) {\n            v__35289_0 = check(v__35279, v__35270[(v_l_id_35264 + (128 * v_MWidthC_1 * v_w_id_35263) + (v_MWidthC_1 * v_i_35265))]); \n            if (v__35289_0) {\n            } else {\n              break;\n            }\n            float v_tmp_35354 = 0.0f; \n            v__35281 = v_tmp_35354; \n            int v_index_35355 = v__35270[(v_l_id_35264 + (128 * v_MWidthC_1 * v_w_id_35263) + (v_MWidthC_1 * v_i_35265))]; \n            if (v_index_35355 < 0) {\n              v__35283_0 = v__35281; \n            } else {\n              if (v_index_35355 >= v_VLength_3) {\n                v__35283_0 = v__35281; \n              } else {\n                v__35283_0 = v__35272[v_index_35355]; \n              }\n            }\n            v__35285_0 = mult(v__35283_0, v__35271[(v_l_id_35264 + (128 * v_MWidthC_1 * v_w_id_35263) + (v_MWidthC_1 * v_i_35265))]); \n            v__35279 = add(v__35285_0, v__35279); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35266 = 0; \n            v__35290[v_l_id_35264] = id(v__35279); \n          }\n          /* end map_seq */\n          v_l_id_35264 = atomic_inc(&(v_work_idx_1929)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_35267 = get_local_id(0); \n        float v_tmp_35358 = 0.0f; \n        v__14691 = v_tmp_35358; \n        /* reduce_seq */\n        for (int v_i_35268 = 0; v_i_35268 < v_MWidthC_1; v_i_35268 = (1 + v_i_35268)) {\n          v__14691 = add(v__14691, v__35290[(v_i_35268 + (v_MWidthC_1 * v_l_id_35267))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35269 = 0; \n          v__35295[v_w_id_35263] = doubleMultiplyAdd(v__14691, v__35274, v__35273[v_w_id_35263], v__35275); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35263 = atomic_inc(v_work_idx_1931); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__35270",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35271",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35272",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35274",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35275",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35277",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35295",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35290",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}