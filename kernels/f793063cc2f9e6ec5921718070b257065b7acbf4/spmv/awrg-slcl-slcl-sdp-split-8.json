{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16826, const global float* restrict v__16827, const global float* restrict v__16828, const global float* restrict v__16829, float v__16830, float v__16831, global float* v__16849, global float* v__16839, global int* v__16833, local float* v__16844, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16835; \n  float v__16840; \n  float v__14691; \n  /* Private Memory */\n  float v__16837_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_272 = v__16833; \n    local int v_w_id_16818; \n    if (get_local_id(0) == 0) {\n      v_w_id_16818 = atomic_inc(v_work_idx_272); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_16818 < v_MHeight_2)){\n      for (int v_l_id_16819 = get_local_id(0); v_l_id_16819 < v_MWidthC_1; v_l_id_16819 = (v_l_id_16819 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_16820 = 0; v_i_16820 < 8; v_i_16820 = (1 + v_i_16820)) {\n          float v_tmp_16912 = 0.0f; \n          v__16835 = v_tmp_16912; \n          int v_index_16913 = v__16826[(v_l_id_16819 + (8 * v_MWidthC_1 * v_w_id_16818) + (v_MWidthC_1 * v_i_16820))]; \n          if (v_index_16913 < 0) {\n            v__16837_0 = v__16835; \n          } else {\n            if (v_index_16913 >= v_VLength_3) {\n              v__16837_0 = v__16835; \n            } else {\n              v__16837_0 = v__16828[v_index_16913]; \n            }\n          }\n          v__16839[(7 + (8 * v_MWidthC_1 * v_w_id_16818) + (-1 * v_i_16820) + (8 * v_l_id_16819))] = mult(v__16837_0, v__16827[(v_l_id_16819 + (8 * v_MWidthC_1 * v_w_id_16818) + (v_MWidthC_1 * v_i_16820))]); \n        }\n        /* end map_seq */\n        float v_tmp_16914 = 0.0f; \n        v__16840 = v_tmp_16914; \n        /* reduce_seq */\n        for (int v_i_16821 = 0; v_i_16821 < 8; v_i_16821 = (1 + v_i_16821)) {\n          v__16840 = add(v__16840, v__16839[(v_i_16821 + (8 * v_MWidthC_1 * v_w_id_16818) + (8 * v_l_id_16819))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16822 = 0; \n          v__16844[v_l_id_16819] = id(v__16840); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_16823 = get_local_id(0); \n        float v_tmp_16917 = 0.0f; \n        v__14691 = v_tmp_16917; \n        /* reduce_seq */\n        for (int v_i_16824 = 0; v_i_16824 < v_MWidthC_1; v_i_16824 = (1 + v_i_16824)) {\n          v__14691 = add(v__14691, v__16844[(v_i_16824 + (v_MWidthC_1 * v_l_id_16823))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16825 = 0; \n          v__16849[v_w_id_16818] = doubleMultiplyAdd(v__14691, v__16830, v__16829[v_w_id_16818], v__16831); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_16818 = atomic_inc(v_work_idx_272); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16826",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16827",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16828",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16829",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16830",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16831",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16839",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16833",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__16849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16844",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}