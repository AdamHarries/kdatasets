{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21223, const global float* restrict v__21224, const global float* restrict v__21225, const global float* restrict v__21226, float v__21227, float v__21228, global float* v__21246, global int* v__21230, local float* v__21241, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21232; \n  float v__21234; \n  float v__14691; \n  /* Private Memory */\n  float v__21236_0;\n  \n  float v__21238_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_665 = v__21230; \n    local int v_w_id_21216; \n    if (get_local_id(0) == 0) {\n      v_w_id_21216 = atomic_inc(v_work_idx_665); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21216 < v_MHeight_2)){\n      for (int v_l_id_21217 = get_local_id(0); v_l_id_21217 < v_MWidthC_1; v_l_id_21217 = (v_l_id_21217 + get_local_size(0))) {\n        float v_tmp_21309 = 0.0f; \n        v__21232 = v_tmp_21309; \n        /* reduce_seq */\n        for (int v_i_21218 = 0; v_i_21218 < 16; v_i_21218 = (1 + v_i_21218)) {\n          float v_tmp_21310 = 0.0f; \n          v__21234 = v_tmp_21310; \n          int v_index_21311 = v__21223[(v_l_id_21217 + (16 * v_MWidthC_1 * v_w_id_21216) + (v_MWidthC_1 * v_i_21218))]; \n          if (v_index_21311 < 0) {\n            v__21236_0 = v__21234; \n          } else {\n            if (v_index_21311 >= v_VLength_3) {\n              v__21236_0 = v__21234; \n            } else {\n              v__21236_0 = v__21225[v_index_21311]; \n            }\n          }\n          v__21238_0 = mult(v__21236_0, v__21224[(v_l_id_21217 + (16 * v_MWidthC_1 * v_w_id_21216) + (v_MWidthC_1 * v_i_21218))]); \n          v__21232 = add(v__21238_0, v__21232); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21219 = 0; \n          v__21241[v_l_id_21217] = id(v__21232); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_21220 = get_local_id(0); \n        float v_tmp_21314 = 0.0f; \n        v__14691 = v_tmp_21314; \n        /* reduce_seq */\n        for (int v_i_21221 = 0; v_i_21221 < v_MWidthC_1; v_i_21221 = (1 + v_i_21221)) {\n          v__14691 = add(v__14691, v__21241[(v_i_21221 + (v_MWidthC_1 * v_l_id_21220))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21222 = 0; \n          v__21246[v_w_id_21216] = doubleMultiplyAdd(v__14691, v__21227, v__21226[v_w_id_21216], v__21228); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21216 = atomic_inc(v_work_idx_665); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21223",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21224",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21225",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21227",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21228",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21230",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21246",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21241",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}