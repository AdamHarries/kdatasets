{
  "name" : "swrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19178, const global float* restrict v__19179, const global float* restrict v__19180, const global float* restrict v__19181, float v__19182, float v__19183, global float* v__19202, local float* v__19197, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19186; \n  float v__19188; \n  float v__14691; \n  /* Private Memory */\n  float v__19190_0;\n  \n  float v__19192_0;\n  \n  int v__19196_0;\n  \n  for (int v_wg_id_19171 = get_group_id(0); v_wg_id_19171 < v_MHeight_2; v_wg_id_19171 = (v_wg_id_19171 + get_num_groups(0))) {\n    for (int v_l_id_19172 = get_local_id(0); v_l_id_19172 < v_MWidthC_1; v_l_id_19172 = (v_l_id_19172 + get_local_size(0))) {\n      float v_tmp_19270 = 0.0f; \n      v__19186 = v_tmp_19270; \n      /* reduce_while_seq */\n      for (int v_i_19173 = 0; v_i_19173 < 16; v_i_19173 = (1 + v_i_19173)) {\n        v__19196_0 = check(v__19186, v__19178[(v_l_id_19172 + (16 * v_MWidthC_1 * v_wg_id_19171) + (v_MWidthC_1 * v_i_19173))]); \n        if (v__19196_0) {\n        } else {\n          break;\n        }\n        float v_tmp_19271 = 0.0f; \n        v__19188 = v_tmp_19271; \n        int v_index_19272 = v__19178[(v_l_id_19172 + (16 * v_MWidthC_1 * v_wg_id_19171) + (v_MWidthC_1 * v_i_19173))]; \n        if (v_index_19272 < 0) {\n          v__19190_0 = v__19188; \n        } else {\n          if (v_index_19272 >= v_VLength_3) {\n            v__19190_0 = v__19188; \n          } else {\n            v__19190_0 = v__19180[v_index_19272]; \n          }\n        }\n        v__19192_0 = mult(v__19190_0, v__19179[(v_l_id_19172 + (16 * v_MWidthC_1 * v_wg_id_19171) + (v_MWidthC_1 * v_i_19173))]); \n        v__19186 = add(v__19192_0, v__19186); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19174 = 0; \n        v__19197[v_l_id_19172] = id(v__19186); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19175 = get_local_id(0); \n      float v_tmp_19275 = 0.0f; \n      v__14691 = v_tmp_19275; \n      /* reduce_seq */\n      for (int v_i_19176 = 0; v_i_19176 < v_MWidthC_1; v_i_19176 = (1 + v_i_19176)) {\n        v__14691 = add(v__14691, v__19197[(v_i_19176 + (v_MWidthC_1 * v_l_id_19175))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19177 = 0; \n        v__19202[v_wg_id_19171] = doubleMultiplyAdd(v__14691, v__19182, v__19181[v_wg_id_19171], v__19183); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19178",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19179",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19180",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19181",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19182",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19183",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19202",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19197",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}