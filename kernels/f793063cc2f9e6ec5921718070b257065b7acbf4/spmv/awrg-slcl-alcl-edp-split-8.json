{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17349, const global float* restrict v__17350, const global float* restrict v__17351, const global float* restrict v__17352, float v__17353, float v__17354, global float* v__17374, global int* v__17356, local float* v__17369, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17358; \n  float v__17360; \n  float v__14691; \n  /* Private Memory */\n  float v__17362_0;\n  \n  float v__17364_0;\n  \n  int v__17368_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_321 = v__17356; \n    local int v_w_id_17342; \n    if (get_local_id(0) == 0) {\n      v_w_id_17342 = atomic_inc(v_work_idx_321); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17342 < v_MHeight_2)){\n      for (int v_l_id_17343 = get_local_id(0); v_l_id_17343 < v_MWidthC_1; v_l_id_17343 = (v_l_id_17343 + get_local_size(0))) {\n        float v_tmp_17436 = 0.0f; \n        v__17358 = v_tmp_17436; \n        /* reduce_while_seq */\n        for (int v_i_17344 = 0; v_i_17344 < 8; v_i_17344 = (1 + v_i_17344)) {\n          v__17368_0 = check(v__17358, v__17349[(v_l_id_17343 + (8 * v_MWidthC_1 * v_w_id_17342) + (v_MWidthC_1 * v_i_17344))]); \n          if (v__17368_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17437 = 0.0f; \n          v__17360 = v_tmp_17437; \n          int v_index_17438 = v__17349[(v_l_id_17343 + (8 * v_MWidthC_1 * v_w_id_17342) + (v_MWidthC_1 * v_i_17344))]; \n          if (v_index_17438 < 0) {\n            v__17362_0 = v__17360; \n          } else {\n            if (v_index_17438 >= v_VLength_3) {\n              v__17362_0 = v__17360; \n            } else {\n              v__17362_0 = v__17351[v_index_17438]; \n            }\n          }\n          v__17364_0 = mult(v__17362_0, v__17350[(v_l_id_17343 + (8 * v_MWidthC_1 * v_w_id_17342) + (v_MWidthC_1 * v_i_17344))]); \n          v__17358 = add(v__17364_0, v__17358); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17345 = 0; \n          v__17369[v_l_id_17343] = id(v__17358); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_315; \n        v_work_idx_315 = 0; \n        int v_l_id_17346 = atomic_inc(&(v_work_idx_315)); \n        while((v_l_id_17346 < 1)){\n          float v_tmp_17441 = 0.0f; \n          v__14691 = v_tmp_17441; \n          /* reduce_seq */\n          for (int v_i_17347 = 0; v_i_17347 < v_MWidthC_1; v_i_17347 = (1 + v_i_17347)) {\n            v__14691 = add(v__14691, v__17369[(v_i_17347 + (v_MWidthC_1 * v_l_id_17346))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_17348 = 0; \n            v__17374[v_w_id_17342] = doubleMultiplyAdd(v__14691, v__17353, v__17352[v_w_id_17342], v__17354); \n          }\n          /* end map_seq */\n          v_l_id_17346 = atomic_inc(&(v_work_idx_315)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17342 = atomic_inc(v_work_idx_321); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17349",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17350",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17351",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17352",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17353",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17354",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17356",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17369",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}