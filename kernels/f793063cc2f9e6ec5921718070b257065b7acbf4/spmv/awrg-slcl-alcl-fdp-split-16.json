{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21540, const global float* restrict v__21541, const global float* restrict v__21542, const global float* restrict v__21543, float v__21544, float v__21545, global float* v__21563, global int* v__21547, local float* v__21558, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21549; \n  float v__21551; \n  float v__14691; \n  /* Private Memory */\n  float v__21553_0;\n  \n  float v__21555_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_695 = v__21547; \n    local int v_w_id_21533; \n    if (get_local_id(0) == 0) {\n      v_w_id_21533 = atomic_inc(v_work_idx_695); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21533 < v_MHeight_2)){\n      for (int v_l_id_21534 = get_local_id(0); v_l_id_21534 < v_MWidthC_1; v_l_id_21534 = (v_l_id_21534 + get_local_size(0))) {\n        float v_tmp_21622 = 0.0f; \n        v__21549 = v_tmp_21622; \n        /* reduce_seq */\n        for (int v_i_21535 = 0; v_i_21535 < 16; v_i_21535 = (1 + v_i_21535)) {\n          float v_tmp_21623 = 0.0f; \n          v__21551 = v_tmp_21623; \n          int v_index_21624 = v__21540[(v_l_id_21534 + (16 * v_MWidthC_1 * v_w_id_21533) + (v_MWidthC_1 * v_i_21535))]; \n          if (v_index_21624 < 0) {\n            v__21553_0 = v__21551; \n          } else {\n            if (v_index_21624 >= v_VLength_3) {\n              v__21553_0 = v__21551; \n            } else {\n              v__21553_0 = v__21542[v_index_21624]; \n            }\n          }\n          v__21555_0 = mult(v__21553_0, v__21541[(v_l_id_21534 + (16 * v_MWidthC_1 * v_w_id_21533) + (v_MWidthC_1 * v_i_21535))]); \n          v__21549 = add(v__21555_0, v__21549); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21536 = 0; \n          v__21558[v_l_id_21534] = id(v__21549); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_689; \n        v_work_idx_689 = 0; \n        int v_l_id_21537 = atomic_inc(&(v_work_idx_689)); \n        while((v_l_id_21537 < 1)){\n          float v_tmp_21627 = 0.0f; \n          v__14691 = v_tmp_21627; \n          /* reduce_seq */\n          for (int v_i_21538 = 0; v_i_21538 < v_MWidthC_1; v_i_21538 = (1 + v_i_21538)) {\n            v__14691 = add(v__14691, v__21558[(v_i_21538 + (v_MWidthC_1 * v_l_id_21537))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21539 = 0; \n            v__21563[v_w_id_21533] = doubleMultiplyAdd(v__14691, v__21544, v__21543[v_w_id_21533], v__21545); \n          }\n          /* end map_seq */\n          v_l_id_21537 = atomic_inc(&(v_work_idx_689)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21533 = atomic_inc(v_work_idx_695); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21540",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21541",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21542",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21543",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21544",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21545",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21547",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21558",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}