{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13929, const global float* restrict v__13930, const global float* restrict v__13931, const global float* restrict v__13932, float v__13933, float v__13934, global float* v__13948, global float* v__13942, global int* v__13936, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13938; \n  float v__13943; \n  /* Private Memory */\n  float v__13940_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_26 = v__13936; \n    local int v_w_id_13925; \n    if (get_local_id(0) == 0) {\n      v_w_id_13925 = atomic_inc(v_work_idx_26); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_13925 < v_MHeight_2)){\n      for (int v_l_id_13926 = get_local_id(0); v_l_id_13926 < v_MWidthC_1; v_l_id_13926 = (v_l_id_13926 + get_local_size(0))) {\n        float v_tmp_13986 = 0.0f; \n        v__13938 = v_tmp_13986; \n        int v_index_13987 = v__13929[(v_l_id_13926 + (v_MWidthC_1 * v_w_id_13925))]; \n        if (v_index_13987 < 0) {\n          v__13940_0 = v__13938; \n        } else {\n          if (v_index_13987 >= v_VLength_3) {\n            v__13940_0 = v__13938; \n          } else {\n            v__13940_0 = v__13931[v_index_13987]; \n          }\n        }\n        v__13942[(-1 + v_MWidthC_1 + (-1 * v_l_id_13926) + (v_MWidthC_1 * v_w_id_13925))] = mult(v__13940_0, v__13930[(v_l_id_13926 + (v_MWidthC_1 * v_w_id_13925))]); \n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_13988 = 0.0f; \n      v__13943 = v_tmp_13988; \n      /* reduce_seq */\n      for (int v_i_13927 = 0; v_i_13927 < v_MWidthC_1; v_i_13927 = (1 + v_i_13927)) {\n        v__13943 = add(v__13943, v__13942[(v_i_13927 + (v_MWidthC_1 * v_w_id_13925))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13928 = 0; \n        v__13948[v_w_id_13925] = doubleMultiplyAdd(v__13943, v__13933, v__13932[v_w_id_13925], v__13934); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_13925 = atomic_inc(v_work_idx_26); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__13929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13930",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13931",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13932",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13933",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13934",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13936",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__13948",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}