{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34099, const global float* restrict v__34100, const global float* restrict v__34101, const global float* restrict v__34102, float v__34103, float v__34104, global float* v__34122, global int* v__34106, local float* v__34117, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__34108; \n  float v__34110; \n  float v__14691; \n  /* Private Memory */\n  float v__34112_0;\n  \n  float v__34114_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1817 = v__34106; \n    local int v_w_id_34092; \n    if (get_local_id(0) == 0) {\n      v_w_id_34092 = atomic_inc(v_work_idx_1817); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_34092 < v_MHeight_2)){\n      for (int v_l_id_34093 = get_local_id(0); v_l_id_34093 < v_MWidthC_1; v_l_id_34093 = (v_l_id_34093 + get_local_size(0))) {\n        float v_tmp_34185 = 0.0f; \n        v__34108 = v_tmp_34185; \n        /* reduce_seq */\n        for (int v_i_34094 = 0; v_i_34094 < 128; v_i_34094 = (1 + v_i_34094)) {\n          float v_tmp_34186 = 0.0f; \n          v__34110 = v_tmp_34186; \n          int v_index_34187 = v__34099[(v_l_id_34093 + (128 * v_MWidthC_1 * v_w_id_34092) + (v_MWidthC_1 * v_i_34094))]; \n          if (v_index_34187 < 0) {\n            v__34112_0 = v__34110; \n          } else {\n            if (v_index_34187 >= v_VLength_3) {\n              v__34112_0 = v__34110; \n            } else {\n              v__34112_0 = v__34101[v_index_34187]; \n            }\n          }\n          v__34114_0 = mult(v__34112_0, v__34100[(v_l_id_34093 + (128 * v_MWidthC_1 * v_w_id_34092) + (v_MWidthC_1 * v_i_34094))]); \n          v__34108 = add(v__34114_0, v__34108); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34095 = 0; \n          v__34117[v_l_id_34093] = id(v__34108); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_34096 = get_local_id(0); \n        float v_tmp_34190 = 0.0f; \n        v__14691 = v_tmp_34190; \n        /* reduce_seq */\n        for (int v_i_34097 = 0; v_i_34097 < v_MWidthC_1; v_i_34097 = (1 + v_i_34097)) {\n          v__14691 = add(v__14691, v__34117[(v_i_34097 + (v_MWidthC_1 * v_l_id_34096))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34098 = 0; \n          v__34122[v_w_id_34092] = doubleMultiplyAdd(v__14691, v__34103, v__34102[v_w_id_34092], v__34104); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_34092 = atomic_inc(v_work_idx_1817); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__34099",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34100",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34106",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__34122",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34117",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}