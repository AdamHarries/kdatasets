{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29126, const global float* restrict v__29127, const global float* restrict v__29128, const global float* restrict v__29129, float v__29130, float v__29131, global float* v__29150, local float* v__29145, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29134; \n  float v__29136; \n  float v__14691; \n  /* Private Memory */\n  float v__29138_0;\n  \n  float v__29140_0;\n  \n  int v__29144_0;\n  \n  for (int v_wg_id_29119 = get_group_id(0); v_wg_id_29119 < v_MHeight_2; v_wg_id_29119 = (v_wg_id_29119 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1376; \n      v_work_idx_1376 = 0; \n      int v_l_id_29120 = atomic_inc(&(v_work_idx_1376)); \n      while((v_l_id_29120 < v_MWidthC_1)){\n        float v_tmp_29206 = 0.0f; \n        v__29134 = v_tmp_29206; \n        /* reduce_while_seq */\n        for (int v_i_29121 = 0; v_i_29121 < 64; v_i_29121 = (1 + v_i_29121)) {\n          v__29144_0 = check(v__29134, v__29126[(v_l_id_29120 + (64 * v_MWidthC_1 * v_wg_id_29119) + (v_MWidthC_1 * v_i_29121))]); \n          if (v__29144_0) {\n          } else {\n            break;\n          }\n          float v_tmp_29207 = 0.0f; \n          v__29136 = v_tmp_29207; \n          int v_index_29208 = v__29126[(v_l_id_29120 + (64 * v_MWidthC_1 * v_wg_id_29119) + (v_MWidthC_1 * v_i_29121))]; \n          if (v_index_29208 < 0) {\n            v__29138_0 = v__29136; \n          } else {\n            if (v_index_29208 >= v_VLength_3) {\n              v__29138_0 = v__29136; \n            } else {\n              v__29138_0 = v__29128[v_index_29208]; \n            }\n          }\n          v__29140_0 = mult(v__29138_0, v__29127[(v_l_id_29120 + (64 * v_MWidthC_1 * v_wg_id_29119) + (v_MWidthC_1 * v_i_29121))]); \n          v__29134 = add(v__29140_0, v__29134); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29122 = 0; \n          v__29145[v_l_id_29120] = id(v__29134); \n        }\n        /* end map_seq */\n        v_l_id_29120 = atomic_inc(&(v_work_idx_1376)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1371; \n      v_work_idx_1371 = 0; \n      int v_l_id_29123 = atomic_inc(&(v_work_idx_1371)); \n      while((v_l_id_29123 < 1)){\n        float v_tmp_29211 = 0.0f; \n        v__14691 = v_tmp_29211; \n        /* reduce_seq */\n        for (int v_i_29124 = 0; v_i_29124 < v_MWidthC_1; v_i_29124 = (1 + v_i_29124)) {\n          v__14691 = add(v__14691, v__29145[(v_i_29124 + (v_MWidthC_1 * v_l_id_29123))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29125 = 0; \n          v__29150[v_wg_id_29119] = doubleMultiplyAdd(v__14691, v__29130, v__29129[v_wg_id_29119], v__29131); \n        }\n        /* end map_seq */\n        v_l_id_29123 = atomic_inc(&(v_work_idx_1371)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__29126",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29127",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29128",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29129",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29130",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29131",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__29150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29145",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}