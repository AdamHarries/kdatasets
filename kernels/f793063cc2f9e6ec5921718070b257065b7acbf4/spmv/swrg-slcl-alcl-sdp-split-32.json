{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23582, const global float* restrict v__23583, const global float* restrict v__23584, const global float* restrict v__23585, float v__23586, float v__23587, global float* v__23604, global float* v__23594, local float* v__23599, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23590; \n  float v__23595; \n  float v__14691; \n  /* Private Memory */\n  float v__23592_0;\n  \n  for (int v_wg_id_23574 = get_group_id(0); v_wg_id_23574 < v_MHeight_2; v_wg_id_23574 = (v_wg_id_23574 + get_num_groups(0))) {\n    for (int v_l_id_23575 = get_local_id(0); v_l_id_23575 < v_MWidthC_1; v_l_id_23575 = (v_l_id_23575 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_23576 = 0; v_i_23576 < 32; v_i_23576 = (1 + v_i_23576)) {\n        float v_tmp_23665 = 0.0f; \n        v__23590 = v_tmp_23665; \n        int v_index_23666 = v__23582[(v_l_id_23575 + (32 * v_MWidthC_1 * v_wg_id_23574) + (v_MWidthC_1 * v_i_23576))]; \n        if (v_index_23666 < 0) {\n          v__23592_0 = v__23590; \n        } else {\n          if (v_index_23666 >= v_VLength_3) {\n            v__23592_0 = v__23590; \n          } else {\n            v__23592_0 = v__23584[v_index_23666]; \n          }\n        }\n        v__23594[(31 + (32 * v_MWidthC_1 * v_wg_id_23574) + (-1 * v_i_23576) + (32 * v_l_id_23575))] = mult(v__23592_0, v__23583[(v_l_id_23575 + (32 * v_MWidthC_1 * v_wg_id_23574) + (v_MWidthC_1 * v_i_23576))]); \n      }\n      /* end map_seq */\n      float v_tmp_23667 = 0.0f; \n      v__23595 = v_tmp_23667; \n      /* reduce_seq */\n      for (int v_i_23577 = 0; v_i_23577 < 32; v_i_23577 = (1 + v_i_23577)) {\n        v__23595 = add(v__23595, v__23594[(v_i_23577 + (32 * v_MWidthC_1 * v_wg_id_23574) + (32 * v_l_id_23575))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23578 = 0; \n        v__23599[v_l_id_23575] = id(v__23595); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_873; \n      v_work_idx_873 = 0; \n      int v_l_id_23579 = atomic_inc(&(v_work_idx_873)); \n      while((v_l_id_23579 < 1)){\n        float v_tmp_23670 = 0.0f; \n        v__14691 = v_tmp_23670; \n        /* reduce_seq */\n        for (int v_i_23580 = 0; v_i_23580 < v_MWidthC_1; v_i_23580 = (1 + v_i_23580)) {\n          v__14691 = add(v__14691, v__23599[(v_i_23580 + (v_MWidthC_1 * v_l_id_23579))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23581 = 0; \n          v__23604[v_wg_id_23574] = doubleMultiplyAdd(v__14691, v__23586, v__23585[v_wg_id_23574], v__23587); \n        }\n        /* end map_seq */\n        v_l_id_23579 = atomic_inc(&(v_work_idx_873)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23582",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23583",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23584",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23585",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23586",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23587",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23594",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23604",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23599",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}