{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43854, const global float* restrict v__43855, const global float* restrict v__43856, const global float* restrict v__43857, float v__43858, float v__43859, global float* v__43879, global int* v__43861, local float* v__43874, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__43863; \n  float v__43865; \n  float v__14691; \n  /* Private Memory */\n  float v__43867_0;\n  \n  float v__43869_0;\n  \n  int v__43873_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2699 = v__43861; \n    local int v_w_id_43847; \n    if (get_local_id(0) == 0) {\n      v_w_id_43847 = atomic_inc(v_work_idx_2699); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43847 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2697; \n        v_work_idx_2697 = 0; \n        int v_l_id_43848 = atomic_inc(&(v_work_idx_2697)); \n        while((v_l_id_43848 < v_MWidthC_1)){\n          float v_tmp_43937 = 0.0f; \n          v__43863 = v_tmp_43937; \n          /* reduce_while_seq */\n          for (int v_i_43849 = 0; v_i_43849 < 512; v_i_43849 = (1 + v_i_43849)) {\n            v__43873_0 = check(v__43863, v__43854[(v_l_id_43848 + (512 * v_MWidthC_1 * v_w_id_43847) + (v_MWidthC_1 * v_i_43849))]); \n            if (v__43873_0) {\n            } else {\n              break;\n            }\n            float v_tmp_43938 = 0.0f; \n            v__43865 = v_tmp_43938; \n            int v_index_43939 = v__43854[(v_l_id_43848 + (512 * v_MWidthC_1 * v_w_id_43847) + (v_MWidthC_1 * v_i_43849))]; \n            if (v_index_43939 < 0) {\n              v__43867_0 = v__43865; \n            } else {\n              if (v_index_43939 >= v_VLength_3) {\n                v__43867_0 = v__43865; \n              } else {\n                v__43867_0 = v__43856[v_index_43939]; \n              }\n            }\n            v__43869_0 = mult(v__43867_0, v__43855[(v_l_id_43848 + (512 * v_MWidthC_1 * v_w_id_43847) + (v_MWidthC_1 * v_i_43849))]); \n            v__43863 = add(v__43869_0, v__43863); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43850 = 0; \n            v__43874[v_l_id_43848] = id(v__43863); \n          }\n          /* end map_seq */\n          v_l_id_43848 = atomic_inc(&(v_work_idx_2697)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_43851 = get_local_id(0); \n        float v_tmp_43942 = 0.0f; \n        v__14691 = v_tmp_43942; \n        /* reduce_seq */\n        for (int v_i_43852 = 0; v_i_43852 < v_MWidthC_1; v_i_43852 = (1 + v_i_43852)) {\n          v__14691 = add(v__14691, v__43874[(v_i_43852 + (v_MWidthC_1 * v_l_id_43851))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_43853 = 0; \n          v__43879[v_w_id_43847] = doubleMultiplyAdd(v__14691, v__43858, v__43857[v_w_id_43847], v__43859); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43847 = atomic_inc(v_work_idx_2699); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__43854",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43855",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43861",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43874",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}