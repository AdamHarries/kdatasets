{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19290, const global float* restrict v__19291, const global float* restrict v__19292, const global float* restrict v__19293, float v__19294, float v__19295, global float* v__19312, global float* v__19302, local float* v__19307, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19298; \n  float v__19303; \n  float v__14691; \n  /* Private Memory */\n  float v__19300_0;\n  \n  for (int v_wg_id_19282 = get_group_id(0); v_wg_id_19282 < v_MHeight_2; v_wg_id_19282 = (v_wg_id_19282 + get_num_groups(0))) {\n    for (int v_l_id_19283 = get_local_id(0); v_l_id_19283 < v_MWidthC_1; v_l_id_19283 = (v_l_id_19283 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19284 = 0; v_i_19284 < 16; v_i_19284 = (1 + v_i_19284)) {\n        float v_tmp_19373 = 0.0f; \n        v__19298 = v_tmp_19373; \n        int v_index_19374 = v__19290[(v_l_id_19283 + (16 * v_MWidthC_1 * v_wg_id_19282) + (v_MWidthC_1 * v_i_19284))]; \n        if (v_index_19374 < 0) {\n          v__19300_0 = v__19298; \n        } else {\n          if (v_index_19374 >= v_VLength_3) {\n            v__19300_0 = v__19298; \n          } else {\n            v__19300_0 = v__19292[v_index_19374]; \n          }\n        }\n        v__19302[(15 + (16 * v_MWidthC_1 * v_wg_id_19282) + (-1 * v_i_19284) + (16 * v_l_id_19283))] = mult(v__19300_0, v__19291[(v_l_id_19283 + (16 * v_MWidthC_1 * v_wg_id_19282) + (v_MWidthC_1 * v_i_19284))]); \n      }\n      /* end map_seq */\n      float v_tmp_19375 = 0.0f; \n      v__19303 = v_tmp_19375; \n      /* reduce_seq */\n      for (int v_i_19285 = 0; v_i_19285 < 16; v_i_19285 = (1 + v_i_19285)) {\n        v__19303 = add(v__19303, v__19302[(v_i_19285 + (16 * v_MWidthC_1 * v_wg_id_19282) + (16 * v_l_id_19283))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19286 = 0; \n        v__19307[v_l_id_19283] = id(v__19303); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_489; \n      v_work_idx_489 = 0; \n      int v_l_id_19287 = atomic_inc(&(v_work_idx_489)); \n      while((v_l_id_19287 < 1)){\n        float v_tmp_19378 = 0.0f; \n        v__14691 = v_tmp_19378; \n        /* reduce_seq */\n        for (int v_i_19288 = 0; v_i_19288 < v_MWidthC_1; v_i_19288 = (1 + v_i_19288)) {\n          v__14691 = add(v__14691, v__19307[(v_i_19288 + (v_MWidthC_1 * v_l_id_19287))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_19289 = 0; \n          v__19312[v_wg_id_19282] = doubleMultiplyAdd(v__14691, v__19294, v__19293[v_wg_id_19282], v__19295); \n        }\n        /* end map_seq */\n        v_l_id_19287 = atomic_inc(&(v_work_idx_489)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19290",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19291",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19292",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19293",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19294",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19295",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19302",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__19312",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19307",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}