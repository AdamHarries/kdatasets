{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36458, const global float* restrict v__36459, const global float* restrict v__36460, const global float* restrict v__36461, float v__36462, float v__36463, global float* v__36480, global float* v__36470, local float* v__36475, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__36466; \n  float v__36471; \n  float v__14691; \n  /* Private Memory */\n  float v__36468_0;\n  \n  for (int v_wg_id_36450 = get_group_id(0); v_wg_id_36450 < v_MHeight_2; v_wg_id_36450 = (v_wg_id_36450 + get_num_groups(0))) {\n    for (int v_l_id_36451 = get_local_id(0); v_l_id_36451 < v_MWidthC_1; v_l_id_36451 = (v_l_id_36451 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_36452 = 0; v_i_36452 < 256; v_i_36452 = (1 + v_i_36452)) {\n        float v_tmp_36541 = 0.0f; \n        v__36466 = v_tmp_36541; \n        int v_index_36542 = v__36458[(v_l_id_36451 + (256 * v_MWidthC_1 * v_wg_id_36450) + (v_MWidthC_1 * v_i_36452))]; \n        if (v_index_36542 < 0) {\n          v__36468_0 = v__36466; \n        } else {\n          if (v_index_36542 >= v_VLength_3) {\n            v__36468_0 = v__36466; \n          } else {\n            v__36468_0 = v__36460[v_index_36542]; \n          }\n        }\n        v__36470[(255 + (256 * v_MWidthC_1 * v_wg_id_36450) + (-1 * v_i_36452) + (256 * v_l_id_36451))] = mult(v__36468_0, v__36459[(v_l_id_36451 + (256 * v_MWidthC_1 * v_wg_id_36450) + (v_MWidthC_1 * v_i_36452))]); \n      }\n      /* end map_seq */\n      float v_tmp_36543 = 0.0f; \n      v__36471 = v_tmp_36543; \n      /* reduce_seq */\n      for (int v_i_36453 = 0; v_i_36453 < 256; v_i_36453 = (1 + v_i_36453)) {\n        v__36471 = add(v__36471, v__36470[(v_i_36453 + (256 * v_MWidthC_1 * v_wg_id_36450) + (256 * v_l_id_36451))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36454 = 0; \n        v__36475[v_l_id_36451] = id(v__36471); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2025; \n      v_work_idx_2025 = 0; \n      int v_l_id_36455 = atomic_inc(&(v_work_idx_2025)); \n      while((v_l_id_36455 < 1)){\n        float v_tmp_36546 = 0.0f; \n        v__14691 = v_tmp_36546; \n        /* reduce_seq */\n        for (int v_i_36456 = 0; v_i_36456 < v_MWidthC_1; v_i_36456 = (1 + v_i_36456)) {\n          v__14691 = add(v__14691, v__36475[(v_i_36456 + (v_MWidthC_1 * v_l_id_36455))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_36457 = 0; \n          v__36480[v_wg_id_36450] = doubleMultiplyAdd(v__14691, v__36462, v__36461[v_wg_id_36450], v__36463); \n        }\n        /* end map_seq */\n        v_l_id_36455 = atomic_inc(&(v_work_idx_2025)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__36458",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36459",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36460",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36461",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36462",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36463",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36470",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__36480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36475",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}