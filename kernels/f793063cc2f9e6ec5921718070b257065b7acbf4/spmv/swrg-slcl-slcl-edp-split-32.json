{
  "name" : "swrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23470, const global float* restrict v__23471, const global float* restrict v__23472, const global float* restrict v__23473, float v__23474, float v__23475, global float* v__23494, local float* v__23489, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23478; \n  float v__23480; \n  float v__14691; \n  /* Private Memory */\n  float v__23482_0;\n  \n  float v__23484_0;\n  \n  int v__23488_0;\n  \n  for (int v_wg_id_23463 = get_group_id(0); v_wg_id_23463 < v_MHeight_2; v_wg_id_23463 = (v_wg_id_23463 + get_num_groups(0))) {\n    for (int v_l_id_23464 = get_local_id(0); v_l_id_23464 < v_MWidthC_1; v_l_id_23464 = (v_l_id_23464 + get_local_size(0))) {\n      float v_tmp_23562 = 0.0f; \n      v__23478 = v_tmp_23562; \n      /* reduce_while_seq */\n      for (int v_i_23465 = 0; v_i_23465 < 32; v_i_23465 = (1 + v_i_23465)) {\n        v__23488_0 = check(v__23478, v__23470[(v_l_id_23464 + (32 * v_MWidthC_1 * v_wg_id_23463) + (v_MWidthC_1 * v_i_23465))]); \n        if (v__23488_0) {\n        } else {\n          break;\n        }\n        float v_tmp_23563 = 0.0f; \n        v__23480 = v_tmp_23563; \n        int v_index_23564 = v__23470[(v_l_id_23464 + (32 * v_MWidthC_1 * v_wg_id_23463) + (v_MWidthC_1 * v_i_23465))]; \n        if (v_index_23564 < 0) {\n          v__23482_0 = v__23480; \n        } else {\n          if (v_index_23564 >= v_VLength_3) {\n            v__23482_0 = v__23480; \n          } else {\n            v__23482_0 = v__23472[v_index_23564]; \n          }\n        }\n        v__23484_0 = mult(v__23482_0, v__23471[(v_l_id_23464 + (32 * v_MWidthC_1 * v_wg_id_23463) + (v_MWidthC_1 * v_i_23465))]); \n        v__23478 = add(v__23484_0, v__23478); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23466 = 0; \n        v__23489[v_l_id_23464] = id(v__23478); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23467 = get_local_id(0); \n      float v_tmp_23567 = 0.0f; \n      v__14691 = v_tmp_23567; \n      /* reduce_seq */\n      for (int v_i_23468 = 0; v_i_23468 < v_MWidthC_1; v_i_23468 = (1 + v_i_23468)) {\n        v__14691 = add(v__14691, v__23489[(v_i_23468 + (v_MWidthC_1 * v_l_id_23467))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23469 = 0; \n        v__23494[v_wg_id_23463] = doubleMultiplyAdd(v__14691, v__23474, v__23473[v_wg_id_23463], v__23475); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__23470",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23471",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23472",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23474",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23475",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23494",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23489",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}