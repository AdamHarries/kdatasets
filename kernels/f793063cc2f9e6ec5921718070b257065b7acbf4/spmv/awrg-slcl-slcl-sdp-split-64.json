{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29702, const global float* restrict v__29703, const global float* restrict v__29704, const global float* restrict v__29705, float v__29706, float v__29707, global float* v__29725, global float* v__29715, global int* v__29709, local float* v__29720, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29711; \n  float v__29716; \n  float v__14691; \n  /* Private Memory */\n  float v__29713_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1424 = v__29709; \n    local int v_w_id_29694; \n    if (get_local_id(0) == 0) {\n      v_w_id_29694 = atomic_inc(v_work_idx_1424); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29694 < v_MHeight_2)){\n      for (int v_l_id_29695 = get_local_id(0); v_l_id_29695 < v_MWidthC_1; v_l_id_29695 = (v_l_id_29695 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_29696 = 0; v_i_29696 < 64; v_i_29696 = (1 + v_i_29696)) {\n          float v_tmp_29788 = 0.0f; \n          v__29711 = v_tmp_29788; \n          int v_index_29789 = v__29702[(v_l_id_29695 + (64 * v_MWidthC_1 * v_w_id_29694) + (v_MWidthC_1 * v_i_29696))]; \n          if (v_index_29789 < 0) {\n            v__29713_0 = v__29711; \n          } else {\n            if (v_index_29789 >= v_VLength_3) {\n              v__29713_0 = v__29711; \n            } else {\n              v__29713_0 = v__29704[v_index_29789]; \n            }\n          }\n          v__29715[(63 + (64 * v_MWidthC_1 * v_w_id_29694) + (-1 * v_i_29696) + (64 * v_l_id_29695))] = mult(v__29713_0, v__29703[(v_l_id_29695 + (64 * v_MWidthC_1 * v_w_id_29694) + (v_MWidthC_1 * v_i_29696))]); \n        }\n        /* end map_seq */\n        float v_tmp_29790 = 0.0f; \n        v__29716 = v_tmp_29790; \n        /* reduce_seq */\n        for (int v_i_29697 = 0; v_i_29697 < 64; v_i_29697 = (1 + v_i_29697)) {\n          v__29716 = add(v__29716, v__29715[(v_i_29697 + (64 * v_MWidthC_1 * v_w_id_29694) + (64 * v_l_id_29695))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29698 = 0; \n          v__29720[v_l_id_29695] = id(v__29716); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_29699 = get_local_id(0); \n        float v_tmp_29793 = 0.0f; \n        v__14691 = v_tmp_29793; \n        /* reduce_seq */\n        for (int v_i_29700 = 0; v_i_29700 < v_MWidthC_1; v_i_29700 = (1 + v_i_29700)) {\n          v__14691 = add(v__14691, v__29720[(v_i_29700 + (v_MWidthC_1 * v_l_id_29699))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29701 = 0; \n          v__29725[v_w_id_29694] = doubleMultiplyAdd(v__14691, v__29706, v__29705[v_w_id_29694], v__29707); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_29694 = atomic_inc(v_work_idx_1424); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__29702",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29703",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29704",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29715",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29709",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29720",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}