{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25410, const global float* restrict v__25411, const global float* restrict v__25412, const global float* restrict v__25413, float v__25414, float v__25415, global float* v__25433, global float* v__25423, global int* v__25417, local float* v__25428, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25419; \n  float v__25424; \n  float v__14691; \n  /* Private Memory */\n  float v__25421_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1040 = v__25417; \n    local int v_w_id_25402; \n    if (get_local_id(0) == 0) {\n      v_w_id_25402 = atomic_inc(v_work_idx_1040); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25402 < v_MHeight_2)){\n      for (int v_l_id_25403 = get_local_id(0); v_l_id_25403 < v_MWidthC_1; v_l_id_25403 = (v_l_id_25403 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_25404 = 0; v_i_25404 < 32; v_i_25404 = (1 + v_i_25404)) {\n          float v_tmp_25496 = 0.0f; \n          v__25419 = v_tmp_25496; \n          int v_index_25497 = v__25410[(v_l_id_25403 + (32 * v_MWidthC_1 * v_w_id_25402) + (v_MWidthC_1 * v_i_25404))]; \n          if (v_index_25497 < 0) {\n            v__25421_0 = v__25419; \n          } else {\n            if (v_index_25497 >= v_VLength_3) {\n              v__25421_0 = v__25419; \n            } else {\n              v__25421_0 = v__25412[v_index_25497]; \n            }\n          }\n          v__25423[(31 + (32 * v_MWidthC_1 * v_w_id_25402) + (-1 * v_i_25404) + (32 * v_l_id_25403))] = mult(v__25421_0, v__25411[(v_l_id_25403 + (32 * v_MWidthC_1 * v_w_id_25402) + (v_MWidthC_1 * v_i_25404))]); \n        }\n        /* end map_seq */\n        float v_tmp_25498 = 0.0f; \n        v__25424 = v_tmp_25498; \n        /* reduce_seq */\n        for (int v_i_25405 = 0; v_i_25405 < 32; v_i_25405 = (1 + v_i_25405)) {\n          v__25424 = add(v__25424, v__25423[(v_i_25405 + (32 * v_MWidthC_1 * v_w_id_25402) + (32 * v_l_id_25403))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25406 = 0; \n          v__25428[v_l_id_25403] = id(v__25424); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25407 = get_local_id(0); \n        float v_tmp_25501 = 0.0f; \n        v__14691 = v_tmp_25501; \n        /* reduce_seq */\n        for (int v_i_25408 = 0; v_i_25408 < v_MWidthC_1; v_i_25408 = (1 + v_i_25408)) {\n          v__14691 = add(v__14691, v__25428[(v_i_25408 + (v_MWidthC_1 * v_l_id_25407))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25409 = 0; \n          v__25433[v_w_id_25402] = doubleMultiplyAdd(v__14691, v__25414, v__25413[v_w_id_25402], v__25415); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25402 = atomic_inc(v_work_idx_1040); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25410",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25411",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25412",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25413",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25414",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25415",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25423",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25417",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25428",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}