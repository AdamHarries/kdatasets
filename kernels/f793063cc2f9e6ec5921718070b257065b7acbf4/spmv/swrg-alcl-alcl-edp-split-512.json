{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42002, const global float* restrict v__42003, const global float* restrict v__42004, const global float* restrict v__42005, float v__42006, float v__42007, global float* v__42026, local float* v__42021, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42010; \n  float v__42012; \n  float v__14691; \n  /* Private Memory */\n  float v__42014_0;\n  \n  float v__42016_0;\n  \n  int v__42020_0;\n  \n  for (int v_wg_id_41995 = get_group_id(0); v_wg_id_41995 < v_MHeight_2; v_wg_id_41995 = (v_wg_id_41995 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2528; \n      v_work_idx_2528 = 0; \n      int v_l_id_41996 = atomic_inc(&(v_work_idx_2528)); \n      while((v_l_id_41996 < v_MWidthC_1)){\n        float v_tmp_42082 = 0.0f; \n        v__42010 = v_tmp_42082; \n        /* reduce_while_seq */\n        for (int v_i_41997 = 0; v_i_41997 < 512; v_i_41997 = (1 + v_i_41997)) {\n          v__42020_0 = check(v__42010, v__42002[(v_l_id_41996 + (512 * v_MWidthC_1 * v_wg_id_41995) + (v_MWidthC_1 * v_i_41997))]); \n          if (v__42020_0) {\n          } else {\n            break;\n          }\n          float v_tmp_42083 = 0.0f; \n          v__42012 = v_tmp_42083; \n          int v_index_42084 = v__42002[(v_l_id_41996 + (512 * v_MWidthC_1 * v_wg_id_41995) + (v_MWidthC_1 * v_i_41997))]; \n          if (v_index_42084 < 0) {\n            v__42014_0 = v__42012; \n          } else {\n            if (v_index_42084 >= v_VLength_3) {\n              v__42014_0 = v__42012; \n            } else {\n              v__42014_0 = v__42004[v_index_42084]; \n            }\n          }\n          v__42016_0 = mult(v__42014_0, v__42003[(v_l_id_41996 + (512 * v_MWidthC_1 * v_wg_id_41995) + (v_MWidthC_1 * v_i_41997))]); \n          v__42010 = add(v__42016_0, v__42010); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41998 = 0; \n          v__42021[v_l_id_41996] = id(v__42010); \n        }\n        /* end map_seq */\n        v_l_id_41996 = atomic_inc(&(v_work_idx_2528)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2523; \n      v_work_idx_2523 = 0; \n      int v_l_id_41999 = atomic_inc(&(v_work_idx_2523)); \n      while((v_l_id_41999 < 1)){\n        float v_tmp_42087 = 0.0f; \n        v__14691 = v_tmp_42087; \n        /* reduce_seq */\n        for (int v_i_42000 = 0; v_i_42000 < v_MWidthC_1; v_i_42000 = (1 + v_i_42000)) {\n          v__14691 = add(v__14691, v__42021[(v_i_42000 + (v_MWidthC_1 * v_l_id_41999))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42001 = 0; \n          v__42026[v_wg_id_41995] = doubleMultiplyAdd(v__14691, v__42006, v__42005[v_wg_id_41995], v__42007); \n        }\n        /* end map_seq */\n        v_l_id_41999 = atomic_inc(&(v_work_idx_2523)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__42002",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42003",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42004",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42005",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42006",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42007",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__42026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42021",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}