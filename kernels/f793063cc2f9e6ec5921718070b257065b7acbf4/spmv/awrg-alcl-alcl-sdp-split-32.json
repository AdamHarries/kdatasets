{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26789, const global float* restrict v__26790, const global float* restrict v__26791, const global float* restrict v__26792, float v__26793, float v__26794, global float* v__26812, global float* v__26802, global int* v__26796, local float* v__26807, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26798; \n  float v__26803; \n  float v__14691; \n  /* Private Memory */\n  float v__26800_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1175 = v__26796; \n    local int v_w_id_26781; \n    if (get_local_id(0) == 0) {\n      v_w_id_26781 = atomic_inc(v_work_idx_1175); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26781 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1173; \n        v_work_idx_1173 = 0; \n        int v_l_id_26782 = atomic_inc(&(v_work_idx_1173)); \n        while((v_l_id_26782 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_26783 = 0; v_i_26783 < 32; v_i_26783 = (1 + v_i_26783)) {\n            float v_tmp_26863 = 0.0f; \n            v__26798 = v_tmp_26863; \n            int v_index_26864 = v__26789[(v_l_id_26782 + (32 * v_MWidthC_1 * v_w_id_26781) + (v_MWidthC_1 * v_i_26783))]; \n            if (v_index_26864 < 0) {\n              v__26800_0 = v__26798; \n            } else {\n              if (v_index_26864 >= v_VLength_3) {\n                v__26800_0 = v__26798; \n              } else {\n                v__26800_0 = v__26791[v_index_26864]; \n              }\n            }\n            v__26802[(31 + (32 * v_MWidthC_1 * v_w_id_26781) + (-1 * v_i_26783) + (32 * v_l_id_26782))] = mult(v__26800_0, v__26790[(v_l_id_26782 + (32 * v_MWidthC_1 * v_w_id_26781) + (v_MWidthC_1 * v_i_26783))]); \n          }\n          /* end map_seq */\n          float v_tmp_26865 = 0.0f; \n          v__26803 = v_tmp_26865; \n          /* reduce_seq */\n          for (int v_i_26784 = 0; v_i_26784 < 32; v_i_26784 = (1 + v_i_26784)) {\n            v__26803 = add(v__26803, v__26802[(v_i_26784 + (32 * v_MWidthC_1 * v_w_id_26781) + (32 * v_l_id_26782))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26785 = 0; \n            v__26807[v_l_id_26782] = id(v__26803); \n          }\n          /* end map_seq */\n          v_l_id_26782 = atomic_inc(&(v_work_idx_1173)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1167; \n        v_work_idx_1167 = 0; \n        int v_l_id_26786 = atomic_inc(&(v_work_idx_1167)); \n        while((v_l_id_26786 < 1)){\n          float v_tmp_26868 = 0.0f; \n          v__14691 = v_tmp_26868; \n          /* reduce_seq */\n          for (int v_i_26787 = 0; v_i_26787 < v_MWidthC_1; v_i_26787 = (1 + v_i_26787)) {\n            v__14691 = add(v__14691, v__26807[(v_i_26787 + (v_MWidthC_1 * v_l_id_26786))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26788 = 0; \n            v__26812[v_w_id_26781] = doubleMultiplyAdd(v__14691, v__26793, v__26792[v_w_id_26781], v__26794); \n          }\n          /* end map_seq */\n          v_l_id_26786 = atomic_inc(&(v_work_idx_1167)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26781 = atomic_inc(v_work_idx_1175); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26789",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26790",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26791",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26792",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26793",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26794",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26802",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26796",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26812",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26807",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}