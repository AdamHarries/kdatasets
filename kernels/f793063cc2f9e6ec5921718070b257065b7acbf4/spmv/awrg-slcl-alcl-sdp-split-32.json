{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25731, const global float* restrict v__25732, const global float* restrict v__25733, const global float* restrict v__25734, float v__25735, float v__25736, global float* v__25754, global float* v__25744, global int* v__25738, local float* v__25749, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25740; \n  float v__25745; \n  float v__14691; \n  /* Private Memory */\n  float v__25742_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1069 = v__25738; \n    local int v_w_id_25723; \n    if (get_local_id(0) == 0) {\n      v_w_id_25723 = atomic_inc(v_work_idx_1069); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25723 < v_MHeight_2)){\n      for (int v_l_id_25724 = get_local_id(0); v_l_id_25724 < v_MWidthC_1; v_l_id_25724 = (v_l_id_25724 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_25725 = 0; v_i_25725 < 32; v_i_25725 = (1 + v_i_25725)) {\n          float v_tmp_25813 = 0.0f; \n          v__25740 = v_tmp_25813; \n          int v_index_25814 = v__25731[(v_l_id_25724 + (32 * v_MWidthC_1 * v_w_id_25723) + (v_MWidthC_1 * v_i_25725))]; \n          if (v_index_25814 < 0) {\n            v__25742_0 = v__25740; \n          } else {\n            if (v_index_25814 >= v_VLength_3) {\n              v__25742_0 = v__25740; \n            } else {\n              v__25742_0 = v__25733[v_index_25814]; \n            }\n          }\n          v__25744[(31 + (32 * v_MWidthC_1 * v_w_id_25723) + (-1 * v_i_25725) + (32 * v_l_id_25724))] = mult(v__25742_0, v__25732[(v_l_id_25724 + (32 * v_MWidthC_1 * v_w_id_25723) + (v_MWidthC_1 * v_i_25725))]); \n        }\n        /* end map_seq */\n        float v_tmp_25815 = 0.0f; \n        v__25745 = v_tmp_25815; \n        /* reduce_seq */\n        for (int v_i_25726 = 0; v_i_25726 < 32; v_i_25726 = (1 + v_i_25726)) {\n          v__25745 = add(v__25745, v__25744[(v_i_25726 + (32 * v_MWidthC_1 * v_w_id_25723) + (32 * v_l_id_25724))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25727 = 0; \n          v__25749[v_l_id_25724] = id(v__25745); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1062; \n        v_work_idx_1062 = 0; \n        int v_l_id_25728 = atomic_inc(&(v_work_idx_1062)); \n        while((v_l_id_25728 < 1)){\n          float v_tmp_25818 = 0.0f; \n          v__14691 = v_tmp_25818; \n          /* reduce_seq */\n          for (int v_i_25729 = 0; v_i_25729 < v_MWidthC_1; v_i_25729 = (1 + v_i_25729)) {\n            v__14691 = add(v__14691, v__25749[(v_i_25729 + (v_MWidthC_1 * v_l_id_25728))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25730 = 0; \n            v__25754[v_w_id_25723] = doubleMultiplyAdd(v__14691, v__25735, v__25734[v_w_id_25723], v__25736); \n          }\n          /* end map_seq */\n          v_l_id_25728 = atomic_inc(&(v_work_idx_1062)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25723 = atomic_inc(v_work_idx_1069); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25731",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25732",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25733",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25735",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25736",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25744",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25738",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25754",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25749",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}