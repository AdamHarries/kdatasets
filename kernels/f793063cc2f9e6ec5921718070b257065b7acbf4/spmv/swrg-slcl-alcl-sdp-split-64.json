{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27874, const global float* restrict v__27875, const global float* restrict v__27876, const global float* restrict v__27877, float v__27878, float v__27879, global float* v__27896, global float* v__27886, local float* v__27891, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27882; \n  float v__27887; \n  float v__14691; \n  /* Private Memory */\n  float v__27884_0;\n  \n  for (int v_wg_id_27866 = get_group_id(0); v_wg_id_27866 < v_MHeight_2; v_wg_id_27866 = (v_wg_id_27866 + get_num_groups(0))) {\n    for (int v_l_id_27867 = get_local_id(0); v_l_id_27867 < v_MWidthC_1; v_l_id_27867 = (v_l_id_27867 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_27868 = 0; v_i_27868 < 64; v_i_27868 = (1 + v_i_27868)) {\n        float v_tmp_27957 = 0.0f; \n        v__27882 = v_tmp_27957; \n        int v_index_27958 = v__27874[(v_l_id_27867 + (64 * v_MWidthC_1 * v_wg_id_27866) + (v_MWidthC_1 * v_i_27868))]; \n        if (v_index_27958 < 0) {\n          v__27884_0 = v__27882; \n        } else {\n          if (v_index_27958 >= v_VLength_3) {\n            v__27884_0 = v__27882; \n          } else {\n            v__27884_0 = v__27876[v_index_27958]; \n          }\n        }\n        v__27886[(63 + (64 * v_MWidthC_1 * v_wg_id_27866) + (-1 * v_i_27868) + (64 * v_l_id_27867))] = mult(v__27884_0, v__27875[(v_l_id_27867 + (64 * v_MWidthC_1 * v_wg_id_27866) + (v_MWidthC_1 * v_i_27868))]); \n      }\n      /* end map_seq */\n      float v_tmp_27959 = 0.0f; \n      v__27887 = v_tmp_27959; \n      /* reduce_seq */\n      for (int v_i_27869 = 0; v_i_27869 < 64; v_i_27869 = (1 + v_i_27869)) {\n        v__27887 = add(v__27887, v__27886[(v_i_27869 + (64 * v_MWidthC_1 * v_wg_id_27866) + (64 * v_l_id_27867))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_27870 = 0; \n        v__27891[v_l_id_27867] = id(v__27887); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1257; \n      v_work_idx_1257 = 0; \n      int v_l_id_27871 = atomic_inc(&(v_work_idx_1257)); \n      while((v_l_id_27871 < 1)){\n        float v_tmp_27962 = 0.0f; \n        v__14691 = v_tmp_27962; \n        /* reduce_seq */\n        for (int v_i_27872 = 0; v_i_27872 < v_MWidthC_1; v_i_27872 = (1 + v_i_27872)) {\n          v__14691 = add(v__14691, v__27891[(v_i_27872 + (v_MWidthC_1 * v_l_id_27871))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27873 = 0; \n          v__27896[v_wg_id_27866] = doubleMultiplyAdd(v__14691, v__27878, v__27877[v_wg_id_27866], v__27879); \n        }\n        /* end map_seq */\n        v_l_id_27871 = atomic_inc(&(v_work_idx_1257)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__27874",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27875",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27876",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27877",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27878",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27879",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__27886",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__27896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27891",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}