{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17248, const global float* restrict v__17249, const global float* restrict v__17250, const global float* restrict v__17251, float v__17252, float v__17253, global float* v__17271, global int* v__17255, local float* v__17266, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17257; \n  float v__17259; \n  float v__14691; \n  /* Private Memory */\n  float v__17261_0;\n  \n  float v__17263_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_311 = v__17255; \n    local int v_w_id_17241; \n    if (get_local_id(0) == 0) {\n      v_w_id_17241 = atomic_inc(v_work_idx_311); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17241 < v_MHeight_2)){\n      for (int v_l_id_17242 = get_local_id(0); v_l_id_17242 < v_MWidthC_1; v_l_id_17242 = (v_l_id_17242 + get_local_size(0))) {\n        float v_tmp_17330 = 0.0f; \n        v__17257 = v_tmp_17330; \n        /* reduce_seq */\n        for (int v_i_17243 = 0; v_i_17243 < 8; v_i_17243 = (1 + v_i_17243)) {\n          float v_tmp_17331 = 0.0f; \n          v__17259 = v_tmp_17331; \n          int v_index_17332 = v__17248[(v_l_id_17242 + (8 * v_MWidthC_1 * v_w_id_17241) + (v_MWidthC_1 * v_i_17243))]; \n          if (v_index_17332 < 0) {\n            v__17261_0 = v__17259; \n          } else {\n            if (v_index_17332 >= v_VLength_3) {\n              v__17261_0 = v__17259; \n            } else {\n              v__17261_0 = v__17250[v_index_17332]; \n            }\n          }\n          v__17263_0 = mult(v__17261_0, v__17249[(v_l_id_17242 + (8 * v_MWidthC_1 * v_w_id_17241) + (v_MWidthC_1 * v_i_17243))]); \n          v__17257 = add(v__17263_0, v__17257); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17244 = 0; \n          v__17266[v_l_id_17242] = id(v__17257); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_305; \n        v_work_idx_305 = 0; \n        int v_l_id_17245 = atomic_inc(&(v_work_idx_305)); \n        while((v_l_id_17245 < 1)){\n          float v_tmp_17335 = 0.0f; \n          v__14691 = v_tmp_17335; \n          /* reduce_seq */\n          for (int v_i_17246 = 0; v_i_17246 < v_MWidthC_1; v_i_17246 = (1 + v_i_17246)) {\n            v__14691 = add(v__14691, v__17266[(v_i_17246 + (v_MWidthC_1 * v_l_id_17245))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_17247 = 0; \n            v__17271[v_w_id_17241] = doubleMultiplyAdd(v__14691, v__17252, v__17251[v_w_id_17241], v__17253); \n          }\n          /* end map_seq */\n          v_l_id_17245 = atomic_inc(&(v_work_idx_305)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17241 = atomic_inc(v_work_idx_311); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17248",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17249",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17250",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17251",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17252",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17253",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17255",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17271",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17266",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}