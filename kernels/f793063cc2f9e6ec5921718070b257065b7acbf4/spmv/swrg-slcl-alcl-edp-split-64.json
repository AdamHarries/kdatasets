{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28078, const global float* restrict v__28079, const global float* restrict v__28080, const global float* restrict v__28081, float v__28082, float v__28083, global float* v__28102, local float* v__28097, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28086; \n  float v__28088; \n  float v__14691; \n  /* Private Memory */\n  float v__28090_0;\n  \n  float v__28092_0;\n  \n  int v__28096_0;\n  \n  for (int v_wg_id_28071 = get_group_id(0); v_wg_id_28071 < v_MHeight_2; v_wg_id_28071 = (v_wg_id_28071 + get_num_groups(0))) {\n    for (int v_l_id_28072 = get_local_id(0); v_l_id_28072 < v_MWidthC_1; v_l_id_28072 = (v_l_id_28072 + get_local_size(0))) {\n      float v_tmp_28166 = 0.0f; \n      v__28086 = v_tmp_28166; \n      /* reduce_while_seq */\n      for (int v_i_28073 = 0; v_i_28073 < 64; v_i_28073 = (1 + v_i_28073)) {\n        v__28096_0 = check(v__28086, v__28078[(v_l_id_28072 + (64 * v_MWidthC_1 * v_wg_id_28071) + (v_MWidthC_1 * v_i_28073))]); \n        if (v__28096_0) {\n        } else {\n          break;\n        }\n        float v_tmp_28167 = 0.0f; \n        v__28088 = v_tmp_28167; \n        int v_index_28168 = v__28078[(v_l_id_28072 + (64 * v_MWidthC_1 * v_wg_id_28071) + (v_MWidthC_1 * v_i_28073))]; \n        if (v_index_28168 < 0) {\n          v__28090_0 = v__28088; \n        } else {\n          if (v_index_28168 >= v_VLength_3) {\n            v__28090_0 = v__28088; \n          } else {\n            v__28090_0 = v__28080[v_index_28168]; \n          }\n        }\n        v__28092_0 = mult(v__28090_0, v__28079[(v_l_id_28072 + (64 * v_MWidthC_1 * v_wg_id_28071) + (v_MWidthC_1 * v_i_28073))]); \n        v__28086 = add(v__28092_0, v__28086); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_28074 = 0; \n        v__28097[v_l_id_28072] = id(v__28086); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1276; \n      v_work_idx_1276 = 0; \n      int v_l_id_28075 = atomic_inc(&(v_work_idx_1276)); \n      while((v_l_id_28075 < 1)){\n        float v_tmp_28171 = 0.0f; \n        v__14691 = v_tmp_28171; \n        /* reduce_seq */\n        for (int v_i_28076 = 0; v_i_28076 < v_MWidthC_1; v_i_28076 = (1 + v_i_28076)) {\n          v__14691 = add(v__14691, v__28097[(v_i_28076 + (v_MWidthC_1 * v_l_id_28075))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28077 = 0; \n          v__28102[v_wg_id_28071] = doubleMultiplyAdd(v__14691, v__28082, v__28081[v_wg_id_28071], v__28083); \n        }\n        /* end map_seq */\n        v_l_id_28075 = atomic_inc(&(v_work_idx_1276)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__28078",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28079",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28080",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28082",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28083",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__28102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28097",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}