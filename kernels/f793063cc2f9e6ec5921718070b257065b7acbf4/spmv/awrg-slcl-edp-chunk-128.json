{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33663, const global float* restrict v__33664, const global float* restrict v__33665, const global float* restrict v__33666, float v__33667, float v__33668, global float* v__33684, global int* v__33670, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__33671; \n  float v__33674; \n  /* Private Memory */\n  float v__33676_0;\n  \n  float v__33678_0;\n  \n  int v__33682_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1780 = v__33670; \n    local int v_w_id_33659; \n    if (get_local_id(0) == 0) {\n      v_w_id_33659 = atomic_inc(v_work_idx_1780); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_33659 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_33660 = get_local_id(0); v_l_id_33660 < 128; v_l_id_33660 = (v_l_id_33660 + get_local_size(0))) {\n        float v_tmp_33731 = 0.0f; \n        v__33671 = v_tmp_33731; \n        /* reduce_while_seq */\n        for (int v_i_33661 = 0; v_i_33661 < v_MWidthC_1; v_i_33661 = (1 + v_i_33661)) {\n          v__33682_0 = check(v__33671, v__33663[(v_i_33661 + (128 * v_MWidthC_1 * v_w_id_33659) + (v_MWidthC_1 * v_l_id_33660))]); \n          if (v__33682_0) {\n          } else {\n            break;\n          }\n          float v_tmp_33732 = 0.0f; \n          v__33674 = v_tmp_33732; \n          int v_index_33733 = v__33663[(v_i_33661 + (128 * v_MWidthC_1 * v_w_id_33659) + (v_MWidthC_1 * v_l_id_33660))]; \n          if (v_index_33733 < 0) {\n            v__33676_0 = v__33674; \n          } else {\n            if (v_index_33733 >= v_VLength_3) {\n              v__33676_0 = v__33674; \n            } else {\n              v__33676_0 = v__33665[v_index_33733]; \n            }\n          }\n          v__33678_0 = mult(v__33676_0, v__33664[(v_i_33661 + (128 * v_MWidthC_1 * v_w_id_33659) + (v_MWidthC_1 * v_l_id_33660))]); \n          v__33671 = add(v__33678_0, v__33671); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33662 = 0; \n          v__33684[(v_l_id_33660 + (128 * v_w_id_33659))] = doubleMultiplyAdd(v__33671, v__33667, v__33666[(v_l_id_33660 + (128 * v_w_id_33659))], v__33668); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_33659 = atomic_inc(v_work_idx_1780); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__33663",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33664",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33665",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33666",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33667",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33668",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33670",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__33684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}