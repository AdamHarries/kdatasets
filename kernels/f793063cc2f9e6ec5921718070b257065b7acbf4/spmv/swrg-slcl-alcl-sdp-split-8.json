{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14998, const global float* restrict v__14999, const global float* restrict v__15000, const global float* restrict v__15001, float v__15002, float v__15003, global float* v__15020, global float* v__15010, local float* v__15015, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15006; \n  float v__15011; \n  float v__14691; \n  /* Private Memory */\n  float v__15008_0;\n  \n  for (int v_wg_id_14990 = get_group_id(0); v_wg_id_14990 < v_MHeight_2; v_wg_id_14990 = (v_wg_id_14990 + get_num_groups(0))) {\n    for (int v_l_id_14991 = get_local_id(0); v_l_id_14991 < v_MWidthC_1; v_l_id_14991 = (v_l_id_14991 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_14992 = 0; v_i_14992 < 8; v_i_14992 = (1 + v_i_14992)) {\n        float v_tmp_15081 = 0.0f; \n        v__15006 = v_tmp_15081; \n        int v_index_15082 = v__14998[(v_l_id_14991 + (8 * v_MWidthC_1 * v_wg_id_14990) + (v_MWidthC_1 * v_i_14992))]; \n        if (v_index_15082 < 0) {\n          v__15008_0 = v__15006; \n        } else {\n          if (v_index_15082 >= v_VLength_3) {\n            v__15008_0 = v__15006; \n          } else {\n            v__15008_0 = v__15000[v_index_15082]; \n          }\n        }\n        v__15010[(7 + (8 * v_MWidthC_1 * v_wg_id_14990) + (-1 * v_i_14992) + (8 * v_l_id_14991))] = mult(v__15008_0, v__14999[(v_l_id_14991 + (8 * v_MWidthC_1 * v_wg_id_14990) + (v_MWidthC_1 * v_i_14992))]); \n      }\n      /* end map_seq */\n      float v_tmp_15083 = 0.0f; \n      v__15011 = v_tmp_15083; \n      /* reduce_seq */\n      for (int v_i_14993 = 0; v_i_14993 < 8; v_i_14993 = (1 + v_i_14993)) {\n        v__15011 = add(v__15011, v__15010[(v_i_14993 + (8 * v_MWidthC_1 * v_wg_id_14990) + (8 * v_l_id_14991))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_14994 = 0; \n        v__15015[v_l_id_14991] = id(v__15011); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_105; \n      v_work_idx_105 = 0; \n      int v_l_id_14995 = atomic_inc(&(v_work_idx_105)); \n      while((v_l_id_14995 < 1)){\n        float v_tmp_15086 = 0.0f; \n        v__14691 = v_tmp_15086; \n        /* reduce_seq */\n        for (int v_i_14996 = 0; v_i_14996 < v_MWidthC_1; v_i_14996 = (1 + v_i_14996)) {\n          v__14691 = add(v__14691, v__15015[(v_i_14996 + (v_MWidthC_1 * v_l_id_14995))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14997 = 0; \n          v__15020[v_wg_id_14990] = doubleMultiplyAdd(v__14691, v__15002, v__15001[v_wg_id_14990], v__15003); \n        }\n        /* end map_seq */\n        v_l_id_14995 = atomic_inc(&(v_work_idx_105)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14998",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14999",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15000",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15002",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15003",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15010",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__15020",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15015",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}