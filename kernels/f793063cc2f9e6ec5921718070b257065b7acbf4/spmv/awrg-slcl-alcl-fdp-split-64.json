{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30124, const global float* restrict v__30125, const global float* restrict v__30126, const global float* restrict v__30127, float v__30128, float v__30129, global float* v__30147, global int* v__30131, local float* v__30142, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30133; \n  float v__30135; \n  float v__14691; \n  /* Private Memory */\n  float v__30137_0;\n  \n  float v__30139_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1463 = v__30131; \n    local int v_w_id_30117; \n    if (get_local_id(0) == 0) {\n      v_w_id_30117 = atomic_inc(v_work_idx_1463); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_30117 < v_MHeight_2)){\n      for (int v_l_id_30118 = get_local_id(0); v_l_id_30118 < v_MWidthC_1; v_l_id_30118 = (v_l_id_30118 + get_local_size(0))) {\n        float v_tmp_30206 = 0.0f; \n        v__30133 = v_tmp_30206; \n        /* reduce_seq */\n        for (int v_i_30119 = 0; v_i_30119 < 64; v_i_30119 = (1 + v_i_30119)) {\n          float v_tmp_30207 = 0.0f; \n          v__30135 = v_tmp_30207; \n          int v_index_30208 = v__30124[(v_l_id_30118 + (64 * v_MWidthC_1 * v_w_id_30117) + (v_MWidthC_1 * v_i_30119))]; \n          if (v_index_30208 < 0) {\n            v__30137_0 = v__30135; \n          } else {\n            if (v_index_30208 >= v_VLength_3) {\n              v__30137_0 = v__30135; \n            } else {\n              v__30137_0 = v__30126[v_index_30208]; \n            }\n          }\n          v__30139_0 = mult(v__30137_0, v__30125[(v_l_id_30118 + (64 * v_MWidthC_1 * v_w_id_30117) + (v_MWidthC_1 * v_i_30119))]); \n          v__30133 = add(v__30139_0, v__30133); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30120 = 0; \n          v__30142[v_l_id_30118] = id(v__30133); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1457; \n        v_work_idx_1457 = 0; \n        int v_l_id_30121 = atomic_inc(&(v_work_idx_1457)); \n        while((v_l_id_30121 < 1)){\n          float v_tmp_30211 = 0.0f; \n          v__14691 = v_tmp_30211; \n          /* reduce_seq */\n          for (int v_i_30122 = 0; v_i_30122 < v_MWidthC_1; v_i_30122 = (1 + v_i_30122)) {\n            v__14691 = add(v__14691, v__30142[(v_i_30122 + (v_MWidthC_1 * v_l_id_30121))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30123 = 0; \n            v__30147[v_w_id_30117] = doubleMultiplyAdd(v__14691, v__30128, v__30127[v_w_id_30117], v__30129); \n          }\n          /* end map_seq */\n          v_l_id_30121 = atomic_inc(&(v_work_idx_1457)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_30117 = atomic_inc(v_work_idx_1463); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__30124",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30125",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30126",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30128",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30129",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30131",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__30147",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30142",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}