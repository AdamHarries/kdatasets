{
  "name" : "swrg-alcl-sdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__41277, const global float* restrict v__41278, const global float* restrict v__41279, const global float* restrict v__41280, float v__41281, float v__41282, global float* v__41296, global float* v__41295, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__41284; \n  float v__41287; \n  /* Private Memory */\n  float v__41289_0;\n  \n  float v__41291_0;\n  \n  for (int v_wg_id_41272 = get_group_id(0); v_wg_id_41272 < ((v_MHeight_2)/(512)); v_wg_id_41272 = (v_wg_id_41272 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2457; \n      v_work_idx_2457 = 0; \n      int v_l_id_41273 = atomic_inc(&(v_work_idx_2457)); \n      while((v_l_id_41273 < 512)){\n        float v_tmp_41329 = 0.0f; \n        v__41284 = v_tmp_41329; \n        /* reduce_seq */\n        int v_stop_41330 = min(v__41277[(1 + (v__41277[(v_l_id_41273 + (512 * v_wg_id_41272))] / 4))], ((global int*)(v__41278 + (((global int*)(v__41278))[(v_l_id_41273 + (512 * v_wg_id_41272))] / 4)))[1]); \n        for (int v_i_41274 = 0; v_i_41274 < v_stop_41330; v_i_41274 = (1 + v_i_41274)) {\n          float v_tmp_41338 = 0.0f; \n          v__41287 = v_tmp_41338; \n          int v_index_41340 = v__41277[(2 + v_i_41274 + (v__41277[(v_l_id_41273 + (512 * v_wg_id_41272))] / 4))]; \n          if (v_index_41340 < 0) {\n            v__41289_0 = v__41287; \n          } else {\n            if (v_index_41340 >= v_MWidthC_1) {\n              v__41289_0 = v__41287; \n            } else {\n              v__41289_0 = v__41279[v_index_41340]; \n            }\n          }\n          v__41291_0 = mult(v__41278[(2 + v_i_41274 + (((global int*)(v__41278))[(v_l_id_41273 + (512 * v_wg_id_41272))] / 4))], v__41289_0); \n          v__41284 = add(v__41284, v__41291_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41275 = 0; \n          v__41295[(v_l_id_41273 + (512 * v_wg_id_41272))] = doubleMultiplyAdd(v__41284, v__41281, v__41280[(v_l_id_41273 + (512 * v_wg_id_41272))], v__41282); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41276 = 0; \n          v__41296[(v_l_id_41273 + (512 * v_wg_id_41272))] = id(v__41295[(v_l_id_41273 + (512 * v_wg_id_41272))]); \n        }\n        /* end map_seq */\n        v_l_id_41273 = atomic_inc(&(v_work_idx_2457)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41277",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__41278",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__41279",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__41280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41281",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41282",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41295",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__41296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}