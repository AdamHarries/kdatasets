{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30400, const global float* restrict v__30401, const global float* restrict v__30402, const global float* restrict v__30403, float v__30404, float v__30405, global float* v__30419, global int* v__30407, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30409; \n  float v__30411; \n  /* Private Memory */\n  float v__30413_0;\n  \n  float v__30415_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1488 = v__30407; \n    local int v_w_id_30396; \n    if (get_local_id(0) == 0) {\n      v_w_id_30396 = atomic_inc(v_work_idx_1488); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_30396 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1486; \n        v_work_idx_1486 = 0; \n        int v_l_id_30397 = atomic_inc(&(v_work_idx_1486)); \n        while((v_l_id_30397 < 64)){\n          float v_tmp_30456 = 0.0f; \n          v__30409 = v_tmp_30456; \n          /* reduce_seq */\n          for (int v_i_30398 = 0; v_i_30398 < v_MWidthC_1; v_i_30398 = (1 + v_i_30398)) {\n            float v_tmp_30457 = 0.0f; \n            v__30411 = v_tmp_30457; \n            int v_index_30458 = v__30400[(v_i_30398 + (64 * v_MWidthC_1 * v_w_id_30396) + (v_MWidthC_1 * v_l_id_30397))]; \n            if (v_index_30458 < 0) {\n              v__30413_0 = v__30411; \n            } else {\n              if (v_index_30458 >= v_VLength_3) {\n                v__30413_0 = v__30411; \n              } else {\n                v__30413_0 = v__30402[v_index_30458]; \n              }\n            }\n            v__30415_0 = mult(v__30413_0, v__30401[(v_i_30398 + (64 * v_MWidthC_1 * v_w_id_30396) + (v_MWidthC_1 * v_l_id_30397))]); \n            v__30409 = add(v__30415_0, v__30409); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30399 = 0; \n            v__30419[(v_l_id_30397 + (64 * v_w_id_30396))] = doubleMultiplyAdd(v__30409, v__30404, v__30403[(v_l_id_30397 + (64 * v_w_id_30396))], v__30405); \n          }\n          /* end map_seq */\n          v_l_id_30397 = atomic_inc(&(v_work_idx_1486)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_30396 = atomic_inc(v_work_idx_1488); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__30400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30402",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30403",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30404",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30405",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30407",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__30419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}