{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33324, const global float* restrict v__33325, const global float* restrict v__33326, const global float* restrict v__33327, float v__33328, float v__33329, global float* v__33346, local float* v__33341, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__33332; \n  float v__33334; \n  float v__14691; \n  /* Private Memory */\n  float v__33336_0;\n  \n  float v__33338_0;\n  \n  for (int v_wg_id_33317 = get_group_id(0); v_wg_id_33317 < v_MHeight_2; v_wg_id_33317 = (v_wg_id_33317 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1750; \n      v_work_idx_1750 = 0; \n      int v_l_id_33318 = atomic_inc(&(v_work_idx_1750)); \n      while((v_l_id_33318 < v_MWidthC_1)){\n        float v_tmp_33399 = 0.0f; \n        v__33332 = v_tmp_33399; \n        /* reduce_seq */\n        for (int v_i_33319 = 0; v_i_33319 < 128; v_i_33319 = (1 + v_i_33319)) {\n          float v_tmp_33400 = 0.0f; \n          v__33334 = v_tmp_33400; \n          int v_index_33401 = v__33324[(v_l_id_33318 + (128 * v_MWidthC_1 * v_wg_id_33317) + (v_MWidthC_1 * v_i_33319))]; \n          if (v_index_33401 < 0) {\n            v__33336_0 = v__33334; \n          } else {\n            if (v_index_33401 >= v_VLength_3) {\n              v__33336_0 = v__33334; \n            } else {\n              v__33336_0 = v__33326[v_index_33401]; \n            }\n          }\n          v__33338_0 = mult(v__33336_0, v__33325[(v_l_id_33318 + (128 * v_MWidthC_1 * v_wg_id_33317) + (v_MWidthC_1 * v_i_33319))]); \n          v__33332 = add(v__33338_0, v__33332); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33320 = 0; \n          v__33341[v_l_id_33318] = id(v__33332); \n        }\n        /* end map_seq */\n        v_l_id_33318 = atomic_inc(&(v_work_idx_1750)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1745; \n      v_work_idx_1745 = 0; \n      int v_l_id_33321 = atomic_inc(&(v_work_idx_1745)); \n      while((v_l_id_33321 < 1)){\n        float v_tmp_33404 = 0.0f; \n        v__14691 = v_tmp_33404; \n        /* reduce_seq */\n        for (int v_i_33322 = 0; v_i_33322 < v_MWidthC_1; v_i_33322 = (1 + v_i_33322)) {\n          v__14691 = add(v__14691, v__33341[(v_i_33322 + (v_MWidthC_1 * v_l_id_33321))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33323 = 0; \n          v__33346[v_wg_id_33317] = doubleMultiplyAdd(v__14691, v__33328, v__33327[v_wg_id_33317], v__33329); \n        }\n        /* end map_seq */\n        v_l_id_33321 = atomic_inc(&(v_work_idx_1745)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__33324",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33325",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33326",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33327",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33328",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33329",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33341",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}