{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16495, const global float* restrict v__16496, const global float* restrict v__16497, const global float* restrict v__16498, float v__16499, float v__16500, global float* v__16516, global int* v__16502, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16503; \n  float v__16506; \n  /* Private Memory */\n  float v__16508_0;\n  \n  float v__16510_0;\n  \n  int v__16514_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_244 = v__16502; \n    local int v_w_id_16491; \n    if (get_local_id(0) == 0) {\n      v_w_id_16491 = atomic_inc(v_work_idx_244); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_16491 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_16492 = get_local_id(0); v_l_id_16492 < 8; v_l_id_16492 = (v_l_id_16492 + get_local_size(0))) {\n        float v_tmp_16563 = 0.0f; \n        v__16503 = v_tmp_16563; \n        /* reduce_while_seq */\n        for (int v_i_16493 = 0; v_i_16493 < v_MWidthC_1; v_i_16493 = (1 + v_i_16493)) {\n          v__16514_0 = check(v__16503, v__16495[(v_i_16493 + (8 * v_MWidthC_1 * v_w_id_16491) + (v_MWidthC_1 * v_l_id_16492))]); \n          if (v__16514_0) {\n          } else {\n            break;\n          }\n          float v_tmp_16564 = 0.0f; \n          v__16506 = v_tmp_16564; \n          int v_index_16565 = v__16495[(v_i_16493 + (8 * v_MWidthC_1 * v_w_id_16491) + (v_MWidthC_1 * v_l_id_16492))]; \n          if (v_index_16565 < 0) {\n            v__16508_0 = v__16506; \n          } else {\n            if (v_index_16565 >= v_VLength_3) {\n              v__16508_0 = v__16506; \n            } else {\n              v__16508_0 = v__16497[v_index_16565]; \n            }\n          }\n          v__16510_0 = mult(v__16508_0, v__16496[(v_i_16493 + (8 * v_MWidthC_1 * v_w_id_16491) + (v_MWidthC_1 * v_l_id_16492))]); \n          v__16503 = add(v__16510_0, v__16503); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16494 = 0; \n          v__16516[(v_l_id_16492 + (8 * v_w_id_16491))] = doubleMultiplyAdd(v__16503, v__16499, v__16498[(v_l_id_16492 + (8 * v_w_id_16491))], v__16500); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_16491 = atomic_inc(v_work_idx_244); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__16495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16496",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16497",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16499",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16500",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16502",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__16516",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}