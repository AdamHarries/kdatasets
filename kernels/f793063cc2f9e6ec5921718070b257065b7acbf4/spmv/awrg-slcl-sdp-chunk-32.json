{
  "name" : "awrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24931, const global float* restrict v__24932, const global float* restrict v__24933, const global float* restrict v__24934, float v__24935, float v__24936, global float* v__24950, global float* v__24944, global int* v__24938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24940; \n  float v__24945; \n  /* Private Memory */\n  float v__24942_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1000 = v__24938; \n    local int v_w_id_24926; \n    if (get_local_id(0) == 0) {\n      v_w_id_24926 = atomic_inc(v_work_idx_1000); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24926 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_24927 = get_local_id(0); v_l_id_24927 < 32; v_l_id_24927 = (v_l_id_24927 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24928 = 0; v_i_24928 < v_MWidthC_1; v_i_24928 = (1 + v_i_24928)) {\n          float v_tmp_24993 = 0.0f; \n          v__24940 = v_tmp_24993; \n          int v_index_24994 = v__24931[(v_i_24928 + (32 * v_MWidthC_1 * v_w_id_24926) + (v_MWidthC_1 * v_l_id_24927))]; \n          if (v_index_24994 < 0) {\n            v__24942_0 = v__24940; \n          } else {\n            if (v_index_24994 >= v_VLength_3) {\n              v__24942_0 = v__24940; \n            } else {\n              v__24942_0 = v__24933[v_index_24994]; \n            }\n          }\n          v__24944[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_24926) + (-1 * v_i_24928) + (v_MWidthC_1 * v_l_id_24927))] = mult(v__24942_0, v__24932[(v_i_24928 + (32 * v_MWidthC_1 * v_w_id_24926) + (v_MWidthC_1 * v_l_id_24927))]); \n        }\n        /* end map_seq */\n        float v_tmp_24995 = 0.0f; \n        v__24945 = v_tmp_24995; \n        /* reduce_seq */\n        for (int v_i_24929 = 0; v_i_24929 < v_MWidthC_1; v_i_24929 = (1 + v_i_24929)) {\n          v__24945 = add(v__24945, v__24944[(v_i_24929 + (32 * v_MWidthC_1 * v_w_id_24926) + (v_MWidthC_1 * v_l_id_24927))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24930 = 0; \n          v__24950[(v_l_id_24927 + (32 * v_w_id_24926))] = doubleMultiplyAdd(v__24945, v__24935, v__24934[(v_l_id_24927 + (32 * v_w_id_24926))], v__24936); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_24926 = atomic_inc(v_work_idx_1000); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24931",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24932",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24933",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24934",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24935",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24936",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24938",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}