{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42899, const global float* restrict v__42900, const global float* restrict v__42901, const global float* restrict v__42902, float v__42903, float v__42904, global float* v__42922, global float* v__42912, global int* v__42906, local float* v__42917, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__42908; \n  float v__42913; \n  float v__14691; \n  /* Private Memory */\n  float v__42910_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2605 = v__42906; \n    local int v_w_id_42891; \n    if (get_local_id(0) == 0) {\n      v_w_id_42891 = atomic_inc(v_work_idx_2605); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42891 < v_MHeight_2)){\n      for (int v_l_id_42892 = get_local_id(0); v_l_id_42892 < v_MWidthC_1; v_l_id_42892 = (v_l_id_42892 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_42893 = 0; v_i_42893 < 512; v_i_42893 = (1 + v_i_42893)) {\n          float v_tmp_42981 = 0.0f; \n          v__42908 = v_tmp_42981; \n          int v_index_42982 = v__42899[(v_l_id_42892 + (512 * v_MWidthC_1 * v_w_id_42891) + (v_MWidthC_1 * v_i_42893))]; \n          if (v_index_42982 < 0) {\n            v__42910_0 = v__42908; \n          } else {\n            if (v_index_42982 >= v_VLength_3) {\n              v__42910_0 = v__42908; \n            } else {\n              v__42910_0 = v__42901[v_index_42982]; \n            }\n          }\n          v__42912[(511 + (512 * v_MWidthC_1 * v_w_id_42891) + (-1 * v_i_42893) + (512 * v_l_id_42892))] = mult(v__42910_0, v__42900[(v_l_id_42892 + (512 * v_MWidthC_1 * v_w_id_42891) + (v_MWidthC_1 * v_i_42893))]); \n        }\n        /* end map_seq */\n        float v_tmp_42983 = 0.0f; \n        v__42913 = v_tmp_42983; \n        /* reduce_seq */\n        for (int v_i_42894 = 0; v_i_42894 < 512; v_i_42894 = (1 + v_i_42894)) {\n          v__42913 = add(v__42913, v__42912[(v_i_42894 + (512 * v_MWidthC_1 * v_w_id_42891) + (512 * v_l_id_42892))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42895 = 0; \n          v__42917[v_l_id_42892] = id(v__42913); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2598; \n        v_work_idx_2598 = 0; \n        int v_l_id_42896 = atomic_inc(&(v_work_idx_2598)); \n        while((v_l_id_42896 < 1)){\n          float v_tmp_42986 = 0.0f; \n          v__14691 = v_tmp_42986; \n          /* reduce_seq */\n          for (int v_i_42897 = 0; v_i_42897 < v_MWidthC_1; v_i_42897 = (1 + v_i_42897)) {\n            v__14691 = add(v__14691, v__42917[(v_i_42897 + (v_MWidthC_1 * v_l_id_42896))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42898 = 0; \n            v__42922[v_w_id_42891] = doubleMultiplyAdd(v__14691, v__42903, v__42902[v_w_id_42891], v__42904); \n          }\n          /* end map_seq */\n          v_l_id_42896 = atomic_inc(&(v_work_idx_2598)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42891 = atomic_inc(v_work_idx_2605); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__42899",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42900",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42901",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42902",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42903",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42904",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42912",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42906",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42922",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42917",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}