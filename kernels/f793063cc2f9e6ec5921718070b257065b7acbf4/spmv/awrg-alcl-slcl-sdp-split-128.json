{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35076, const global float* restrict v__35077, const global float* restrict v__35078, const global float* restrict v__35079, float v__35080, float v__35081, global float* v__35099, global float* v__35089, global int* v__35083, local float* v__35094, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__35085; \n  float v__35090; \n  float v__14691; \n  /* Private Memory */\n  float v__35087_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1911 = v__35083; \n    local int v_w_id_35068; \n    if (get_local_id(0) == 0) {\n      v_w_id_35068 = atomic_inc(v_work_idx_1911); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35068 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1909; \n        v_work_idx_1909 = 0; \n        int v_l_id_35069 = atomic_inc(&(v_work_idx_1909)); \n        while((v_l_id_35069 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_35070 = 0; v_i_35070 < 128; v_i_35070 = (1 + v_i_35070)) {\n            float v_tmp_35154 = 0.0f; \n            v__35085 = v_tmp_35154; \n            int v_index_35155 = v__35076[(v_l_id_35069 + (128 * v_MWidthC_1 * v_w_id_35068) + (v_MWidthC_1 * v_i_35070))]; \n            if (v_index_35155 < 0) {\n              v__35087_0 = v__35085; \n            } else {\n              if (v_index_35155 >= v_VLength_3) {\n                v__35087_0 = v__35085; \n              } else {\n                v__35087_0 = v__35078[v_index_35155]; \n              }\n            }\n            v__35089[(127 + (128 * v_MWidthC_1 * v_w_id_35068) + (-1 * v_i_35070) + (128 * v_l_id_35069))] = mult(v__35087_0, v__35077[(v_l_id_35069 + (128 * v_MWidthC_1 * v_w_id_35068) + (v_MWidthC_1 * v_i_35070))]); \n          }\n          /* end map_seq */\n          float v_tmp_35156 = 0.0f; \n          v__35090 = v_tmp_35156; \n          /* reduce_seq */\n          for (int v_i_35071 = 0; v_i_35071 < 128; v_i_35071 = (1 + v_i_35071)) {\n            v__35090 = add(v__35090, v__35089[(v_i_35071 + (128 * v_MWidthC_1 * v_w_id_35068) + (128 * v_l_id_35069))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35072 = 0; \n            v__35094[v_l_id_35069] = id(v__35090); \n          }\n          /* end map_seq */\n          v_l_id_35069 = atomic_inc(&(v_work_idx_1909)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_35073 = get_local_id(0); \n        float v_tmp_35159 = 0.0f; \n        v__14691 = v_tmp_35159; \n        /* reduce_seq */\n        for (int v_i_35074 = 0; v_i_35074 < v_MWidthC_1; v_i_35074 = (1 + v_i_35074)) {\n          v__14691 = add(v__14691, v__35094[(v_i_35074 + (v_MWidthC_1 * v_l_id_35073))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35075 = 0; \n          v__35099[v_w_id_35068] = doubleMultiplyAdd(v__14691, v__35080, v__35079[v_w_id_35068], v__35081); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35068 = atomic_inc(v_work_idx_1911); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__35076",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35077",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35078",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35079",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35080",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35081",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35089",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35083",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35094",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}