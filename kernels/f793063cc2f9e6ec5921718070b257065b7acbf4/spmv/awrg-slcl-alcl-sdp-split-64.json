{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30023, const global float* restrict v__30024, const global float* restrict v__30025, const global float* restrict v__30026, float v__30027, float v__30028, global float* v__30046, global float* v__30036, global int* v__30030, local float* v__30041, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30032; \n  float v__30037; \n  float v__14691; \n  /* Private Memory */\n  float v__30034_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1453 = v__30030; \n    local int v_w_id_30015; \n    if (get_local_id(0) == 0) {\n      v_w_id_30015 = atomic_inc(v_work_idx_1453); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_30015 < v_MHeight_2)){\n      for (int v_l_id_30016 = get_local_id(0); v_l_id_30016 < v_MWidthC_1; v_l_id_30016 = (v_l_id_30016 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_30017 = 0; v_i_30017 < 64; v_i_30017 = (1 + v_i_30017)) {\n          float v_tmp_30105 = 0.0f; \n          v__30032 = v_tmp_30105; \n          int v_index_30106 = v__30023[(v_l_id_30016 + (64 * v_MWidthC_1 * v_w_id_30015) + (v_MWidthC_1 * v_i_30017))]; \n          if (v_index_30106 < 0) {\n            v__30034_0 = v__30032; \n          } else {\n            if (v_index_30106 >= v_VLength_3) {\n              v__30034_0 = v__30032; \n            } else {\n              v__30034_0 = v__30025[v_index_30106]; \n            }\n          }\n          v__30036[(63 + (64 * v_MWidthC_1 * v_w_id_30015) + (-1 * v_i_30017) + (64 * v_l_id_30016))] = mult(v__30034_0, v__30024[(v_l_id_30016 + (64 * v_MWidthC_1 * v_w_id_30015) + (v_MWidthC_1 * v_i_30017))]); \n        }\n        /* end map_seq */\n        float v_tmp_30107 = 0.0f; \n        v__30037 = v_tmp_30107; \n        /* reduce_seq */\n        for (int v_i_30018 = 0; v_i_30018 < 64; v_i_30018 = (1 + v_i_30018)) {\n          v__30037 = add(v__30037, v__30036[(v_i_30018 + (64 * v_MWidthC_1 * v_w_id_30015) + (64 * v_l_id_30016))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30019 = 0; \n          v__30041[v_l_id_30016] = id(v__30037); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1446; \n        v_work_idx_1446 = 0; \n        int v_l_id_30020 = atomic_inc(&(v_work_idx_1446)); \n        while((v_l_id_30020 < 1)){\n          float v_tmp_30110 = 0.0f; \n          v__14691 = v_tmp_30110; \n          /* reduce_seq */\n          for (int v_i_30021 = 0; v_i_30021 < v_MWidthC_1; v_i_30021 = (1 + v_i_30021)) {\n            v__14691 = add(v__14691, v__30041[(v_i_30021 + (v_MWidthC_1 * v_l_id_30020))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30022 = 0; \n            v__30046[v_w_id_30015] = doubleMultiplyAdd(v__14691, v__30027, v__30026[v_w_id_30015], v__30028); \n          }\n          /* end map_seq */\n          v_l_id_30020 = atomic_inc(&(v_work_idx_1446)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_30015 = atomic_inc(v_work_idx_1453); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__30023",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30024",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30025",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30027",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30028",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30036",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30030",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__30046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30041",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}