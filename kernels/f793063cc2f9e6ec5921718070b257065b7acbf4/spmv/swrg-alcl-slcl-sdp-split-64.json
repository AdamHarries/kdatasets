{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28638, const global float* restrict v__28639, const global float* restrict v__28640, const global float* restrict v__28641, float v__28642, float v__28643, global float* v__28660, global float* v__28650, local float* v__28655, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28646; \n  float v__28651; \n  float v__14691; \n  /* Private Memory */\n  float v__28648_0;\n  \n  for (int v_wg_id_28630 = get_group_id(0); v_wg_id_28630 < v_MHeight_2; v_wg_id_28630 = (v_wg_id_28630 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1327; \n      v_work_idx_1327 = 0; \n      int v_l_id_28631 = atomic_inc(&(v_work_idx_1327)); \n      while((v_l_id_28631 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_28632 = 0; v_i_28632 < 64; v_i_28632 = (1 + v_i_28632)) {\n          float v_tmp_28717 = 0.0f; \n          v__28646 = v_tmp_28717; \n          int v_index_28718 = v__28638[(v_l_id_28631 + (64 * v_MWidthC_1 * v_wg_id_28630) + (v_MWidthC_1 * v_i_28632))]; \n          if (v_index_28718 < 0) {\n            v__28648_0 = v__28646; \n          } else {\n            if (v_index_28718 >= v_VLength_3) {\n              v__28648_0 = v__28646; \n            } else {\n              v__28648_0 = v__28640[v_index_28718]; \n            }\n          }\n          v__28650[(63 + (64 * v_MWidthC_1 * v_wg_id_28630) + (-1 * v_i_28632) + (64 * v_l_id_28631))] = mult(v__28648_0, v__28639[(v_l_id_28631 + (64 * v_MWidthC_1 * v_wg_id_28630) + (v_MWidthC_1 * v_i_28632))]); \n        }\n        /* end map_seq */\n        float v_tmp_28719 = 0.0f; \n        v__28651 = v_tmp_28719; \n        /* reduce_seq */\n        for (int v_i_28633 = 0; v_i_28633 < 64; v_i_28633 = (1 + v_i_28633)) {\n          v__28651 = add(v__28651, v__28650[(v_i_28633 + (64 * v_MWidthC_1 * v_wg_id_28630) + (64 * v_l_id_28631))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28634 = 0; \n          v__28655[v_l_id_28631] = id(v__28651); \n        }\n        /* end map_seq */\n        v_l_id_28631 = atomic_inc(&(v_work_idx_1327)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_28635 = get_local_id(0); \n      float v_tmp_28722 = 0.0f; \n      v__14691 = v_tmp_28722; \n      /* reduce_seq */\n      for (int v_i_28636 = 0; v_i_28636 < v_MWidthC_1; v_i_28636 = (1 + v_i_28636)) {\n        v__14691 = add(v__14691, v__28655[(v_i_28636 + (v_MWidthC_1 * v_l_id_28635))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_28637 = 0; \n        v__28660[v_wg_id_28630] = doubleMultiplyAdd(v__14691, v__28642, v__28641[v_wg_id_28630], v__28643); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28638",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28639",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28640",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28641",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28642",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28643",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28650",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__28660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28655",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}