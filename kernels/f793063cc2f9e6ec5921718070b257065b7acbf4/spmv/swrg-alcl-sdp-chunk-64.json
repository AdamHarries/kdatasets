{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28183, const global float* restrict v__28184, const global float* restrict v__28185, const global float* restrict v__28186, float v__28187, float v__28188, global float* v__28201, global float* v__28195, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28191; \n  float v__28196; \n  /* Private Memory */\n  float v__28193_0;\n  \n  for (int v_wg_id_28178 = get_group_id(0); v_wg_id_28178 < ((v_MHeight_2)/(64)); v_wg_id_28178 = (v_wg_id_28178 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1287; \n      v_work_idx_1287 = 0; \n      int v_l_id_28179 = atomic_inc(&(v_work_idx_1287)); \n      while((v_l_id_28179 < 64)){\n        /* map_seq */\n        for (int v_i_28180 = 0; v_i_28180 < v_MWidthC_1; v_i_28180 = (1 + v_i_28180)) {\n          float v_tmp_28241 = 0.0f; \n          v__28191 = v_tmp_28241; \n          int v_index_28242 = v__28183[(v_i_28180 + (64 * v_MWidthC_1 * v_wg_id_28178) + (v_MWidthC_1 * v_l_id_28179))]; \n          if (v_index_28242 < 0) {\n            v__28193_0 = v__28191; \n          } else {\n            if (v_index_28242 >= v_VLength_3) {\n              v__28193_0 = v__28191; \n            } else {\n              v__28193_0 = v__28185[v_index_28242]; \n            }\n          }\n          v__28195[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_28178) + (-1 * v_i_28180) + (v_MWidthC_1 * v_l_id_28179))] = mult(v__28193_0, v__28184[(v_i_28180 + (64 * v_MWidthC_1 * v_wg_id_28178) + (v_MWidthC_1 * v_l_id_28179))]); \n        }\n        /* end map_seq */\n        float v_tmp_28243 = 0.0f; \n        v__28196 = v_tmp_28243; \n        /* reduce_seq */\n        for (int v_i_28181 = 0; v_i_28181 < v_MWidthC_1; v_i_28181 = (1 + v_i_28181)) {\n          v__28196 = add(v__28196, v__28195[(v_i_28181 + (64 * v_MWidthC_1 * v_wg_id_28178) + (v_MWidthC_1 * v_l_id_28179))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28182 = 0; \n          v__28201[(v_l_id_28179 + (64 * v_wg_id_28178))] = doubleMultiplyAdd(v__28196, v__28187, v__28186[(v_l_id_28179 + (64 * v_wg_id_28178))], v__28188); \n        }\n        /* end map_seq */\n        v_l_id_28179 = atomic_inc(&(v_work_idx_1287)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28185",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28187",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28188",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__28201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}