{
  "name" : "swrg-alcl-sdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__19817, const global float* restrict v__19818, const global float* restrict v__19819, const global float* restrict v__19820, float v__19821, float v__19822, global float* v__19836, global float* v__19835, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19824; \n  float v__19827; \n  /* Private Memory */\n  float v__19829_0;\n  \n  float v__19831_0;\n  \n  for (int v_wg_id_19812 = get_group_id(0); v_wg_id_19812 < ((v_MHeight_2)/(16)); v_wg_id_19812 = (v_wg_id_19812 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_537; \n      v_work_idx_537 = 0; \n      int v_l_id_19813 = atomic_inc(&(v_work_idx_537)); \n      while((v_l_id_19813 < 16)){\n        float v_tmp_19869 = 0.0f; \n        v__19824 = v_tmp_19869; \n        /* reduce_seq */\n        int v_stop_19870 = min(v__19817[(1 + (v__19817[(v_l_id_19813 + (16 * v_wg_id_19812))] / 4))], ((global int*)(v__19818 + (((global int*)(v__19818))[(v_l_id_19813 + (16 * v_wg_id_19812))] / 4)))[1]); \n        for (int v_i_19814 = 0; v_i_19814 < v_stop_19870; v_i_19814 = (1 + v_i_19814)) {\n          float v_tmp_19878 = 0.0f; \n          v__19827 = v_tmp_19878; \n          int v_index_19880 = v__19817[(2 + v_i_19814 + (v__19817[(v_l_id_19813 + (16 * v_wg_id_19812))] / 4))]; \n          if (v_index_19880 < 0) {\n            v__19829_0 = v__19827; \n          } else {\n            if (v_index_19880 >= v_MWidthC_1) {\n              v__19829_0 = v__19827; \n            } else {\n              v__19829_0 = v__19819[v_index_19880]; \n            }\n          }\n          v__19831_0 = mult(v__19818[(2 + v_i_19814 + (((global int*)(v__19818))[(v_l_id_19813 + (16 * v_wg_id_19812))] / 4))], v__19829_0); \n          v__19824 = add(v__19824, v__19831_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_19815 = 0; \n          v__19835[(v_l_id_19813 + (16 * v_wg_id_19812))] = doubleMultiplyAdd(v__19824, v__19821, v__19820[(v_l_id_19813 + (16 * v_wg_id_19812))], v__19822); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_19816 = 0; \n          v__19836[(v_l_id_19813 + (16 * v_wg_id_19812))] = id(v__19835[(v_l_id_19813 + (16 * v_wg_id_19812))]); \n        }\n        /* end map_seq */\n        v_l_id_19813 = atomic_inc(&(v_work_idx_537)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19817",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__19818",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__19819",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__19820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19821",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19822",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19835",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__19836",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}