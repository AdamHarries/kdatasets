{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18205, const global float* restrict v__18206, const global float* restrict v__18207, const global float* restrict v__18208, float v__18209, float v__18210, global float* v__18228, global float* v__18218, global int* v__18212, local float* v__18223, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18214; \n  float v__18219; \n  float v__14691; \n  /* Private Memory */\n  float v__18216_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_407 = v__18212; \n    local int v_w_id_18197; \n    if (get_local_id(0) == 0) {\n      v_w_id_18197 = atomic_inc(v_work_idx_407); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18197 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_405; \n        v_work_idx_405 = 0; \n        int v_l_id_18198 = atomic_inc(&(v_work_idx_405)); \n        while((v_l_id_18198 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_18199 = 0; v_i_18199 < 8; v_i_18199 = (1 + v_i_18199)) {\n            float v_tmp_18279 = 0.0f; \n            v__18214 = v_tmp_18279; \n            int v_index_18280 = v__18205[(v_l_id_18198 + (8 * v_MWidthC_1 * v_w_id_18197) + (v_MWidthC_1 * v_i_18199))]; \n            if (v_index_18280 < 0) {\n              v__18216_0 = v__18214; \n            } else {\n              if (v_index_18280 >= v_VLength_3) {\n                v__18216_0 = v__18214; \n              } else {\n                v__18216_0 = v__18207[v_index_18280]; \n              }\n            }\n            v__18218[(7 + (8 * v_MWidthC_1 * v_w_id_18197) + (-1 * v_i_18199) + (8 * v_l_id_18198))] = mult(v__18216_0, v__18206[(v_l_id_18198 + (8 * v_MWidthC_1 * v_w_id_18197) + (v_MWidthC_1 * v_i_18199))]); \n          }\n          /* end map_seq */\n          float v_tmp_18281 = 0.0f; \n          v__18219 = v_tmp_18281; \n          /* reduce_seq */\n          for (int v_i_18200 = 0; v_i_18200 < 8; v_i_18200 = (1 + v_i_18200)) {\n            v__18219 = add(v__18219, v__18218[(v_i_18200 + (8 * v_MWidthC_1 * v_w_id_18197) + (8 * v_l_id_18198))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18201 = 0; \n            v__18223[v_l_id_18198] = id(v__18219); \n          }\n          /* end map_seq */\n          v_l_id_18198 = atomic_inc(&(v_work_idx_405)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_399; \n        v_work_idx_399 = 0; \n        int v_l_id_18202 = atomic_inc(&(v_work_idx_399)); \n        while((v_l_id_18202 < 1)){\n          float v_tmp_18284 = 0.0f; \n          v__14691 = v_tmp_18284; \n          /* reduce_seq */\n          for (int v_i_18203 = 0; v_i_18203 < v_MWidthC_1; v_i_18203 = (1 + v_i_18203)) {\n            v__14691 = add(v__14691, v__18223[(v_i_18203 + (v_MWidthC_1 * v_l_id_18202))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18204 = 0; \n            v__18228[v_w_id_18197] = doubleMultiplyAdd(v__14691, v__18209, v__18208[v_w_id_18197], v__18210); \n          }\n          /* end map_seq */\n          v_l_id_18202 = atomic_inc(&(v_work_idx_399)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18197 = atomic_inc(v_work_idx_407); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__18205",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18206",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18218",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18212",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18223",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}