{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30881, const global float* restrict v__30882, const global float* restrict v__30883, const global float* restrict v__30884, float v__30885, float v__30886, global float* v__30904, global int* v__30888, local float* v__30899, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30890; \n  float v__30892; \n  float v__14691; \n  /* Private Memory */\n  float v__30894_0;\n  \n  float v__30896_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1537 = v__30888; \n    local int v_w_id_30874; \n    if (get_local_id(0) == 0) {\n      v_w_id_30874 = atomic_inc(v_work_idx_1537); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_30874 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1535; \n        v_work_idx_1535 = 0; \n        int v_l_id_30875 = atomic_inc(&(v_work_idx_1535)); \n        while((v_l_id_30875 < v_MWidthC_1)){\n          float v_tmp_30959 = 0.0f; \n          v__30890 = v_tmp_30959; \n          /* reduce_seq */\n          for (int v_i_30876 = 0; v_i_30876 < 64; v_i_30876 = (1 + v_i_30876)) {\n            float v_tmp_30960 = 0.0f; \n            v__30892 = v_tmp_30960; \n            int v_index_30961 = v__30881[(v_l_id_30875 + (64 * v_MWidthC_1 * v_w_id_30874) + (v_MWidthC_1 * v_i_30876))]; \n            if (v_index_30961 < 0) {\n              v__30894_0 = v__30892; \n            } else {\n              if (v_index_30961 >= v_VLength_3) {\n                v__30894_0 = v__30892; \n              } else {\n                v__30894_0 = v__30883[v_index_30961]; \n              }\n            }\n            v__30896_0 = mult(v__30894_0, v__30882[(v_l_id_30875 + (64 * v_MWidthC_1 * v_w_id_30874) + (v_MWidthC_1 * v_i_30876))]); \n            v__30890 = add(v__30896_0, v__30890); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30877 = 0; \n            v__30899[v_l_id_30875] = id(v__30890); \n          }\n          /* end map_seq */\n          v_l_id_30875 = atomic_inc(&(v_work_idx_1535)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_30878 = get_local_id(0); \n        float v_tmp_30964 = 0.0f; \n        v__14691 = v_tmp_30964; \n        /* reduce_seq */\n        for (int v_i_30879 = 0; v_i_30879 < v_MWidthC_1; v_i_30879 = (1 + v_i_30879)) {\n          v__14691 = add(v__14691, v__30899[(v_i_30879 + (v_MWidthC_1 * v_l_id_30878))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30880 = 0; \n          v__30904[v_w_id_30874] = doubleMultiplyAdd(v__14691, v__30885, v__30884[v_w_id_30874], v__30886); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_30874 = atomic_inc(v_work_idx_1537); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__30881",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30882",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30883",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30884",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30885",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30886",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30888",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__30904",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30899",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}