{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38708, const global float* restrict v__38709, const global float* restrict v__38710, const global float* restrict v__38711, float v__38712, float v__38713, global float* v__38731, global int* v__38715, local float* v__38726, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__38717; \n  float v__38719; \n  float v__14691; \n  /* Private Memory */\n  float v__38721_0;\n  \n  float v__38723_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2231 = v__38715; \n    local int v_w_id_38701; \n    if (get_local_id(0) == 0) {\n      v_w_id_38701 = atomic_inc(v_work_idx_2231); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38701 < v_MHeight_2)){\n      for (int v_l_id_38702 = get_local_id(0); v_l_id_38702 < v_MWidthC_1; v_l_id_38702 = (v_l_id_38702 + get_local_size(0))) {\n        float v_tmp_38790 = 0.0f; \n        v__38717 = v_tmp_38790; \n        /* reduce_seq */\n        for (int v_i_38703 = 0; v_i_38703 < 256; v_i_38703 = (1 + v_i_38703)) {\n          float v_tmp_38791 = 0.0f; \n          v__38719 = v_tmp_38791; \n          int v_index_38792 = v__38708[(v_l_id_38702 + (256 * v_MWidthC_1 * v_w_id_38701) + (v_MWidthC_1 * v_i_38703))]; \n          if (v_index_38792 < 0) {\n            v__38721_0 = v__38719; \n          } else {\n            if (v_index_38792 >= v_VLength_3) {\n              v__38721_0 = v__38719; \n            } else {\n              v__38721_0 = v__38710[v_index_38792]; \n            }\n          }\n          v__38723_0 = mult(v__38721_0, v__38709[(v_l_id_38702 + (256 * v_MWidthC_1 * v_w_id_38701) + (v_MWidthC_1 * v_i_38703))]); \n          v__38717 = add(v__38723_0, v__38717); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38704 = 0; \n          v__38726[v_l_id_38702] = id(v__38717); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2225; \n        v_work_idx_2225 = 0; \n        int v_l_id_38705 = atomic_inc(&(v_work_idx_2225)); \n        while((v_l_id_38705 < 1)){\n          float v_tmp_38795 = 0.0f; \n          v__14691 = v_tmp_38795; \n          /* reduce_seq */\n          for (int v_i_38706 = 0; v_i_38706 < v_MWidthC_1; v_i_38706 = (1 + v_i_38706)) {\n            v__14691 = add(v__14691, v__38726[(v_i_38706 + (v_MWidthC_1 * v_l_id_38705))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38707 = 0; \n            v__38731[v_w_id_38701] = doubleMultiplyAdd(v__14691, v__38712, v__38711[v_w_id_38701], v__38713); \n          }\n          /* end map_seq */\n          v_l_id_38705 = atomic_inc(&(v_work_idx_2225)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38701 = atomic_inc(v_work_idx_2231); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38708",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38709",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38710",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38712",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38713",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38715",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38731",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38726",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}