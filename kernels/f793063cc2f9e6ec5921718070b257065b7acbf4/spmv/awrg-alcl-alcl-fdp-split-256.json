{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39758, const global float* restrict v__39759, const global float* restrict v__39760, const global float* restrict v__39761, float v__39762, float v__39763, global float* v__39781, global int* v__39765, local float* v__39776, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39767; \n  float v__39769; \n  float v__14691; \n  /* Private Memory */\n  float v__39771_0;\n  \n  float v__39773_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2338 = v__39765; \n    local int v_w_id_39751; \n    if (get_local_id(0) == 0) {\n      v_w_id_39751 = atomic_inc(v_work_idx_2338); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39751 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2336; \n        v_work_idx_2336 = 0; \n        int v_l_id_39752 = atomic_inc(&(v_work_idx_2336)); \n        while((v_l_id_39752 < v_MWidthC_1)){\n          float v_tmp_39832 = 0.0f; \n          v__39767 = v_tmp_39832; \n          /* reduce_seq */\n          for (int v_i_39753 = 0; v_i_39753 < 256; v_i_39753 = (1 + v_i_39753)) {\n            float v_tmp_39833 = 0.0f; \n            v__39769 = v_tmp_39833; \n            int v_index_39834 = v__39758[(v_l_id_39752 + (256 * v_MWidthC_1 * v_w_id_39751) + (v_MWidthC_1 * v_i_39753))]; \n            if (v_index_39834 < 0) {\n              v__39771_0 = v__39769; \n            } else {\n              if (v_index_39834 >= v_VLength_3) {\n                v__39771_0 = v__39769; \n              } else {\n                v__39771_0 = v__39760[v_index_39834]; \n              }\n            }\n            v__39773_0 = mult(v__39771_0, v__39759[(v_l_id_39752 + (256 * v_MWidthC_1 * v_w_id_39751) + (v_MWidthC_1 * v_i_39753))]); \n            v__39767 = add(v__39773_0, v__39767); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39754 = 0; \n            v__39776[v_l_id_39752] = id(v__39767); \n          }\n          /* end map_seq */\n          v_l_id_39752 = atomic_inc(&(v_work_idx_2336)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2331; \n        v_work_idx_2331 = 0; \n        int v_l_id_39755 = atomic_inc(&(v_work_idx_2331)); \n        while((v_l_id_39755 < 1)){\n          float v_tmp_39837 = 0.0f; \n          v__14691 = v_tmp_39837; \n          /* reduce_seq */\n          for (int v_i_39756 = 0; v_i_39756 < v_MWidthC_1; v_i_39756 = (1 + v_i_39756)) {\n            v__14691 = add(v__14691, v__39776[(v_i_39756 + (v_MWidthC_1 * v_l_id_39755))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39757 = 0; \n            v__39781[v_w_id_39751] = doubleMultiplyAdd(v__14691, v__39762, v__39761[v_w_id_39751], v__39763); \n          }\n          /* end map_seq */\n          v_l_id_39755 = atomic_inc(&(v_work_idx_2331)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39751 = atomic_inc(v_work_idx_2338); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__39758",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39759",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39760",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39761",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39762",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39763",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39765",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39781",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39776",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}