{
  "name" : "awrg-slcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__33827, const global float* restrict v__33828, const global float* restrict v__33829, const global float* restrict v__33830, float v__33831, float v__33832, global float* v__33847, global float* v__33846, global int* v__33834, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__33835; \n  float v__33838; \n  /* Private Memory */\n  float v__33840_0;\n  \n  float v__33842_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1792 = v__33834; \n    local int v_w_id_33822; \n    if (get_local_id(0) == 0) {\n      v_w_id_33822 = atomic_inc(v_work_idx_1792); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_33822 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_33823 = get_local_id(0); v_l_id_33823 < 128; v_l_id_33823 = (v_l_id_33823 + get_local_size(0))) {\n        float v_tmp_33883 = 0.0f; \n        v__33835 = v_tmp_33883; \n        /* reduce_seq */\n        int v_stop_33884 = min(v__33827[(1 + (v__33827[(v_l_id_33823 + (128 * v_w_id_33822))] / 4))], ((global int*)(v__33828 + (((global int*)(v__33828))[(v_l_id_33823 + (128 * v_w_id_33822))] / 4)))[1]); \n        for (int v_i_33824 = 0; v_i_33824 < v_stop_33884; v_i_33824 = (1 + v_i_33824)) {\n          float v_tmp_33892 = 0.0f; \n          v__33838 = v_tmp_33892; \n          int v_index_33894 = v__33827[(2 + v_i_33824 + (v__33827[(v_l_id_33823 + (128 * v_w_id_33822))] / 4))]; \n          if (v_index_33894 < 0) {\n            v__33840_0 = v__33838; \n          } else {\n            if (v_index_33894 >= v_MWidthC_1) {\n              v__33840_0 = v__33838; \n            } else {\n              v__33840_0 = v__33829[v_index_33894]; \n            }\n          }\n          v__33842_0 = mult(v__33828[(2 + v_i_33824 + (((global int*)(v__33828))[(v_l_id_33823 + (128 * v_w_id_33822))] / 4))], v__33840_0); \n          v__33835 = add(v__33835, v__33842_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33825 = 0; \n          v__33846[(v_l_id_33823 + (128 * v_w_id_33822))] = doubleMultiplyAdd(v__33835, v__33831, v__33830[(v_l_id_33823 + (128 * v_w_id_33822))], v__33832); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33826 = 0; \n          v__33847[(v_l_id_33823 + (128 * v_w_id_33822))] = id(v__33846[(v_l_id_33823 + (128 * v_w_id_33822))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_33822 = atomic_inc(v_work_idx_1792); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__33827",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__33828",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__33829",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__33830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33831",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33832",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33846",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33834",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__33847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}