{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105208, const global float* restrict v__105209, const global float* restrict v__105210, const global float* restrict v__105211, float v__105212, float v__105213, global float* v__105227, global float* v__105221, global int* v__105215, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105217; \n  float v__105222; \n  /* Private Memory */\n  float v__105219_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8219 = v__105215; \n    local int v_w_id_105204; \n    if (get_local_id(0) == 0) {\n      v_w_id_105204 = atomic_inc(v_work_idx_8219); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_105204 < v_MHeight_2)){\n      for (int v_l_id_105205 = get_local_id(0); v_l_id_105205 < v_MWidthC_1; v_l_id_105205 = (v_l_id_105205 + get_local_size(0))) {\n        float v_tmp_105265 = 0.0f; \n        v__105217 = v_tmp_105265; \n        int v_index_105266 = v__105208[(v_l_id_105205 + (v_MWidthC_1 * v_w_id_105204))]; \n        if (v_index_105266 < 0) {\n          v__105219_0 = v__105217; \n        } else {\n          if (v_index_105266 >= v_VLength_3) {\n            v__105219_0 = v__105217; \n          } else {\n            v__105219_0 = v__105210[v_index_105266]; \n          }\n        }\n        v__105221[(-1 + v_MWidthC_1 + (-1 * v_l_id_105205) + (v_MWidthC_1 * v_w_id_105204))] = mult(v__105219_0, v__105209[(v_l_id_105205 + (v_MWidthC_1 * v_w_id_105204))]); \n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_105267 = 0.0f; \n      v__105222 = v_tmp_105267; \n      /* reduce_seq */\n      for (int v_i_105206 = 0; v_i_105206 < v_MWidthC_1; v_i_105206 = (1 + v_i_105206)) {\n        v__105222 = add(v__105222, v__105221[(v_i_105206 + (v_MWidthC_1 * v_w_id_105204))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105207 = 0; \n        v__105227[v_w_id_105204] = doubleMultiplyAdd(v__105222, v__105212, v__105211[v_w_id_105204], v__105213); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_105204 = atomic_inc(v_work_idx_8219); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__105208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105210",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105212",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105213",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105221",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105215",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__105227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}