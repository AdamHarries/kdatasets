{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__112718, const global float* restrict v__112719, const global float* restrict v__112720, const global float* restrict v__112721, float v__112722, float v__112723, global float* v__112741, global float* v__112731, global int* v__112725, local float* v__112736, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112727; \n  float v__112732; \n  float v__105970; \n  /* Private Memory */\n  float v__112729_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8878 = v__112725; \n    local int v_w_id_112710; \n    if (get_local_id(0) == 0) {\n      v_w_id_112710 = atomic_inc(v_work_idx_8878); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112710 < v_MHeight_2)){\n      for (int v_l_id_112711 = get_local_id(0); v_l_id_112711 < v_MWidthC_1; v_l_id_112711 = (v_l_id_112711 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_112712 = 0; v_i_112712 < 16; v_i_112712 = (1 + v_i_112712)) {\n          float v_tmp_112800 = 0.0f; \n          v__112727 = v_tmp_112800; \n          int v_index_112801 = v__112718[(v_l_id_112711 + (16 * v_MWidthC_1 * v_w_id_112710) + (v_MWidthC_1 * v_i_112712))]; \n          if (v_index_112801 < 0) {\n            v__112729_0 = v__112727; \n          } else {\n            if (v_index_112801 >= v_VLength_3) {\n              v__112729_0 = v__112727; \n            } else {\n              v__112729_0 = v__112720[v_index_112801]; \n            }\n          }\n          v__112731[(15 + (16 * v_MWidthC_1 * v_w_id_112710) + (-1 * v_i_112712) + (16 * v_l_id_112711))] = mult(v__112729_0, v__112719[(v_l_id_112711 + (16 * v_MWidthC_1 * v_w_id_112710) + (v_MWidthC_1 * v_i_112712))]); \n        }\n        /* end map_seq */\n        float v_tmp_112802 = 0.0f; \n        v__112732 = v_tmp_112802; \n        /* reduce_seq */\n        for (int v_i_112713 = 0; v_i_112713 < 16; v_i_112713 = (1 + v_i_112713)) {\n          v__112732 = add(v__112732, v__112731[(v_i_112713 + (16 * v_MWidthC_1 * v_w_id_112710) + (16 * v_l_id_112711))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112714 = 0; \n          v__112736[v_l_id_112711] = id(v__112732); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8871; \n        v_work_idx_8871 = 0; \n        int v_l_id_112715 = atomic_inc(&(v_work_idx_8871)); \n        while((v_l_id_112715 < 1)){\n          float v_tmp_112805 = 0.0f; \n          v__105970 = v_tmp_112805; \n          /* reduce_seq */\n          for (int v_i_112716 = 0; v_i_112716 < v_MWidthC_1; v_i_112716 = (1 + v_i_112716)) {\n            v__105970 = add(v__105970, v__112736[(v_i_112716 + (v_MWidthC_1 * v_l_id_112715))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_112717 = 0; \n            v__112741[v_w_id_112710] = doubleMultiplyAdd(v__105970, v__112722, v__112721[v_w_id_112710], v__112723); \n          }\n          /* end map_seq */\n          v_l_id_112715 = atomic_inc(&(v_work_idx_8871)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_112710 = atomic_inc(v_work_idx_8878); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__112718",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112719",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112720",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__112721",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112722",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112723",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112731",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112725",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112741",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__112736",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}