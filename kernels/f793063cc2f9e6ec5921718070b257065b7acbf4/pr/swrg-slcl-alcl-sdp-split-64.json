{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__119153, const global float* restrict v__119154, const global float* restrict v__119155, const global float* restrict v__119156, float v__119157, float v__119158, global float* v__119175, global float* v__119165, local float* v__119170, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__119161; \n  float v__119166; \n  float v__105970; \n  /* Private Memory */\n  float v__119163_0;\n  \n  for (int v_wg_id_119145 = get_group_id(0); v_wg_id_119145 < v_MHeight_2; v_wg_id_119145 = (v_wg_id_119145 + get_num_groups(0))) {\n    for (int v_l_id_119146 = get_local_id(0); v_l_id_119146 < v_MWidthC_1; v_l_id_119146 = (v_l_id_119146 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_119147 = 0; v_i_119147 < 64; v_i_119147 = (1 + v_i_119147)) {\n        float v_tmp_119236 = 0.0f; \n        v__119161 = v_tmp_119236; \n        int v_index_119237 = v__119153[(v_l_id_119146 + (64 * v_MWidthC_1 * v_wg_id_119145) + (v_MWidthC_1 * v_i_119147))]; \n        if (v_index_119237 < 0) {\n          v__119163_0 = v__119161; \n        } else {\n          if (v_index_119237 >= v_VLength_3) {\n            v__119163_0 = v__119161; \n          } else {\n            v__119163_0 = v__119155[v_index_119237]; \n          }\n        }\n        v__119165[(63 + (64 * v_MWidthC_1 * v_wg_id_119145) + (-1 * v_i_119147) + (64 * v_l_id_119146))] = mult(v__119163_0, v__119154[(v_l_id_119146 + (64 * v_MWidthC_1 * v_wg_id_119145) + (v_MWidthC_1 * v_i_119147))]); \n      }\n      /* end map_seq */\n      float v_tmp_119238 = 0.0f; \n      v__119166 = v_tmp_119238; \n      /* reduce_seq */\n      for (int v_i_119148 = 0; v_i_119148 < 64; v_i_119148 = (1 + v_i_119148)) {\n        v__119166 = add(v__119166, v__119165[(v_i_119148 + (64 * v_MWidthC_1 * v_wg_id_119145) + (64 * v_l_id_119146))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_119149 = 0; \n        v__119170[v_l_id_119146] = id(v__119166); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9450; \n      v_work_idx_9450 = 0; \n      int v_l_id_119150 = atomic_inc(&(v_work_idx_9450)); \n      while((v_l_id_119150 < 1)){\n        float v_tmp_119241 = 0.0f; \n        v__105970 = v_tmp_119241; \n        /* reduce_seq */\n        for (int v_i_119151 = 0; v_i_119151 < v_MWidthC_1; v_i_119151 = (1 + v_i_119151)) {\n          v__105970 = add(v__105970, v__119170[(v_i_119151 + (v_MWidthC_1 * v_l_id_119150))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_119152 = 0; \n          v__119175[v_wg_id_119145] = doubleMultiplyAdd(v__105970, v__119157, v__119156[v_wg_id_119145], v__119158); \n        }\n        /* end map_seq */\n        v_l_id_119150 = atomic_inc(&(v_work_idx_9450)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__119153",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119154",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__119156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__119157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__119158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__119165",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__119175",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__119170",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}