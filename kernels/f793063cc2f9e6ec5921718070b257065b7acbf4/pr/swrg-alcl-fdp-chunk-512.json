{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132409, const global float* restrict v__132410, const global float* restrict v__132411, const global float* restrict v__132412, float v__132413, float v__132414, global float* v__132427, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132417; \n  float v__132419; \n  /* Private Memory */\n  float v__132421_0;\n  \n  float v__132423_0;\n  \n  for (int v_wg_id_132405 = get_group_id(0); v_wg_id_132405 < ((v_MHeight_2)/(512)); v_wg_id_132405 = (v_wg_id_132405 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10638; \n      v_work_idx_10638 = 0; \n      int v_l_id_132406 = atomic_inc(&(v_work_idx_10638)); \n      while((v_l_id_132406 < 512)){\n        float v_tmp_132465 = 0.0f; \n        v__132417 = v_tmp_132465; \n        /* reduce_seq */\n        for (int v_i_132407 = 0; v_i_132407 < v_MWidthC_1; v_i_132407 = (1 + v_i_132407)) {\n          float v_tmp_132466 = 0.0f; \n          v__132419 = v_tmp_132466; \n          int v_index_132467 = v__132409[(v_i_132407 + (512 * v_MWidthC_1 * v_wg_id_132405) + (v_MWidthC_1 * v_l_id_132406))]; \n          if (v_index_132467 < 0) {\n            v__132421_0 = v__132419; \n          } else {\n            if (v_index_132467 >= v_VLength_3) {\n              v__132421_0 = v__132419; \n            } else {\n              v__132421_0 = v__132411[v_index_132467]; \n            }\n          }\n          v__132423_0 = mult(v__132421_0, v__132410[(v_i_132407 + (512 * v_MWidthC_1 * v_wg_id_132405) + (v_MWidthC_1 * v_l_id_132406))]); \n          v__132417 = add(v__132423_0, v__132417); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132408 = 0; \n          v__132427[(v_l_id_132406 + (512 * v_wg_id_132405))] = doubleMultiplyAdd(v__132417, v__132413, v__132412[(v_l_id_132406 + (512 * v_wg_id_132405))], v__132414); \n        }\n        /* end map_seq */\n        v_l_id_132406 = atomic_inc(&(v_work_idx_10638)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__132409",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132410",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132411",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132412",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132413",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132414",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__132427",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}