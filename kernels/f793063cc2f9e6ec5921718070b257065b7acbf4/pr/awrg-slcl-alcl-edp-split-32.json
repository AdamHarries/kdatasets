{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117212, const global float* restrict v__117213, const global float* restrict v__117214, const global float* restrict v__117215, float v__117216, float v__117217, global float* v__117237, global int* v__117219, local float* v__117232, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117221; \n  float v__117223; \n  float v__105970; \n  /* Private Memory */\n  float v__117225_0;\n  \n  float v__117227_0;\n  \n  int v__117231_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9282 = v__117219; \n    local int v_w_id_117205; \n    if (get_local_id(0) == 0) {\n      v_w_id_117205 = atomic_inc(v_work_idx_9282); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117205 < v_MHeight_2)){\n      for (int v_l_id_117206 = get_local_id(0); v_l_id_117206 < v_MWidthC_1; v_l_id_117206 = (v_l_id_117206 + get_local_size(0))) {\n        float v_tmp_117299 = 0.0f; \n        v__117221 = v_tmp_117299; \n        /* reduce_while_seq */\n        for (int v_i_117207 = 0; v_i_117207 < 32; v_i_117207 = (1 + v_i_117207)) {\n          v__117231_0 = check(v__117221, v__117212[(v_l_id_117206 + (32 * v_MWidthC_1 * v_w_id_117205) + (v_MWidthC_1 * v_i_117207))]); \n          if (v__117231_0) {\n          } else {\n            break;\n          }\n          float v_tmp_117300 = 0.0f; \n          v__117223 = v_tmp_117300; \n          int v_index_117301 = v__117212[(v_l_id_117206 + (32 * v_MWidthC_1 * v_w_id_117205) + (v_MWidthC_1 * v_i_117207))]; \n          if (v_index_117301 < 0) {\n            v__117225_0 = v__117223; \n          } else {\n            if (v_index_117301 >= v_VLength_3) {\n              v__117225_0 = v__117223; \n            } else {\n              v__117225_0 = v__117214[v_index_117301]; \n            }\n          }\n          v__117227_0 = mult(v__117225_0, v__117213[(v_l_id_117206 + (32 * v_MWidthC_1 * v_w_id_117205) + (v_MWidthC_1 * v_i_117207))]); \n          v__117221 = add(v__117227_0, v__117221); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_117208 = 0; \n          v__117232[v_l_id_117206] = id(v__117221); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9276; \n        v_work_idx_9276 = 0; \n        int v_l_id_117209 = atomic_inc(&(v_work_idx_9276)); \n        while((v_l_id_117209 < 1)){\n          float v_tmp_117304 = 0.0f; \n          v__105970 = v_tmp_117304; \n          /* reduce_seq */\n          for (int v_i_117210 = 0; v_i_117210 < v_MWidthC_1; v_i_117210 = (1 + v_i_117210)) {\n            v__105970 = add(v__105970, v__117232[(v_i_117210 + (v_MWidthC_1 * v_l_id_117209))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117211 = 0; \n            v__117237[v_w_id_117205] = doubleMultiplyAdd(v__105970, v__117216, v__117215[v_w_id_117205], v__117217); \n          }\n          /* end map_seq */\n          v_l_id_117209 = atomic_inc(&(v_work_idx_9276)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117205 = atomic_inc(v_work_idx_9282); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__117212",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117213",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117219",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117237",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__117232",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}