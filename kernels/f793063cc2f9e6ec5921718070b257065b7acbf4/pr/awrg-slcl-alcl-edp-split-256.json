{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130088, const global float* restrict v__130089, const global float* restrict v__130090, const global float* restrict v__130091, float v__130092, float v__130093, global float* v__130113, global int* v__130095, local float* v__130108, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130097; \n  float v__130099; \n  float v__105970; \n  /* Private Memory */\n  float v__130101_0;\n  \n  float v__130103_0;\n  \n  int v__130107_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10434 = v__130095; \n    local int v_w_id_130081; \n    if (get_local_id(0) == 0) {\n      v_w_id_130081 = atomic_inc(v_work_idx_10434); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130081 < v_MHeight_2)){\n      for (int v_l_id_130082 = get_local_id(0); v_l_id_130082 < v_MWidthC_1; v_l_id_130082 = (v_l_id_130082 + get_local_size(0))) {\n        float v_tmp_130175 = 0.0f; \n        v__130097 = v_tmp_130175; \n        /* reduce_while_seq */\n        for (int v_i_130083 = 0; v_i_130083 < 256; v_i_130083 = (1 + v_i_130083)) {\n          v__130107_0 = check(v__130097, v__130088[(v_l_id_130082 + (256 * v_MWidthC_1 * v_w_id_130081) + (v_MWidthC_1 * v_i_130083))]); \n          if (v__130107_0) {\n          } else {\n            break;\n          }\n          float v_tmp_130176 = 0.0f; \n          v__130099 = v_tmp_130176; \n          int v_index_130177 = v__130088[(v_l_id_130082 + (256 * v_MWidthC_1 * v_w_id_130081) + (v_MWidthC_1 * v_i_130083))]; \n          if (v_index_130177 < 0) {\n            v__130101_0 = v__130099; \n          } else {\n            if (v_index_130177 >= v_VLength_3) {\n              v__130101_0 = v__130099; \n            } else {\n              v__130101_0 = v__130090[v_index_130177]; \n            }\n          }\n          v__130103_0 = mult(v__130101_0, v__130089[(v_l_id_130082 + (256 * v_MWidthC_1 * v_w_id_130081) + (v_MWidthC_1 * v_i_130083))]); \n          v__130097 = add(v__130103_0, v__130097); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_130084 = 0; \n          v__130108[v_l_id_130082] = id(v__130097); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10428; \n        v_work_idx_10428 = 0; \n        int v_l_id_130085 = atomic_inc(&(v_work_idx_10428)); \n        while((v_l_id_130085 < 1)){\n          float v_tmp_130180 = 0.0f; \n          v__105970 = v_tmp_130180; \n          /* reduce_seq */\n          for (int v_i_130086 = 0; v_i_130086 < v_MWidthC_1; v_i_130086 = (1 + v_i_130086)) {\n            v__105970 = add(v__105970, v__130108[(v_i_130086 + (v_MWidthC_1 * v_l_id_130085))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130087 = 0; \n            v__130113[v_w_id_130081] = doubleMultiplyAdd(v__105970, v__130092, v__130091[v_w_id_130081], v__130093); \n          }\n          /* end map_seq */\n          v_l_id_130085 = atomic_inc(&(v_work_idx_10428)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130081 = atomic_inc(v_work_idx_10434); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__130088",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130089",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130090",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130091",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130092",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130093",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130095",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130108",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}