{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121302, const global float* restrict v__121303, const global float* restrict v__121304, const global float* restrict v__121305, float v__121306, float v__121307, global float* v__121325, global float* v__121315, global int* v__121309, local float* v__121320, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121311; \n  float v__121316; \n  float v__105970; \n  /* Private Memory */\n  float v__121313_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9646 = v__121309; \n    local int v_w_id_121294; \n    if (get_local_id(0) == 0) {\n      v_w_id_121294 = atomic_inc(v_work_idx_9646); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121294 < v_MHeight_2)){\n      for (int v_l_id_121295 = get_local_id(0); v_l_id_121295 < v_MWidthC_1; v_l_id_121295 = (v_l_id_121295 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_121296 = 0; v_i_121296 < 64; v_i_121296 = (1 + v_i_121296)) {\n          float v_tmp_121384 = 0.0f; \n          v__121311 = v_tmp_121384; \n          int v_index_121385 = v__121302[(v_l_id_121295 + (64 * v_MWidthC_1 * v_w_id_121294) + (v_MWidthC_1 * v_i_121296))]; \n          if (v_index_121385 < 0) {\n            v__121313_0 = v__121311; \n          } else {\n            if (v_index_121385 >= v_VLength_3) {\n              v__121313_0 = v__121311; \n            } else {\n              v__121313_0 = v__121304[v_index_121385]; \n            }\n          }\n          v__121315[(63 + (64 * v_MWidthC_1 * v_w_id_121294) + (-1 * v_i_121296) + (64 * v_l_id_121295))] = mult(v__121313_0, v__121303[(v_l_id_121295 + (64 * v_MWidthC_1 * v_w_id_121294) + (v_MWidthC_1 * v_i_121296))]); \n        }\n        /* end map_seq */\n        float v_tmp_121386 = 0.0f; \n        v__121316 = v_tmp_121386; \n        /* reduce_seq */\n        for (int v_i_121297 = 0; v_i_121297 < 64; v_i_121297 = (1 + v_i_121297)) {\n          v__121316 = add(v__121316, v__121315[(v_i_121297 + (64 * v_MWidthC_1 * v_w_id_121294) + (64 * v_l_id_121295))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_121298 = 0; \n          v__121320[v_l_id_121295] = id(v__121316); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9639; \n        v_work_idx_9639 = 0; \n        int v_l_id_121299 = atomic_inc(&(v_work_idx_9639)); \n        while((v_l_id_121299 < 1)){\n          float v_tmp_121389 = 0.0f; \n          v__105970 = v_tmp_121389; \n          /* reduce_seq */\n          for (int v_i_121300 = 0; v_i_121300 < v_MWidthC_1; v_i_121300 = (1 + v_i_121300)) {\n            v__105970 = add(v__105970, v__121320[(v_i_121300 + (v_MWidthC_1 * v_l_id_121299))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121301 = 0; \n            v__121325[v_w_id_121294] = doubleMultiplyAdd(v__105970, v__121306, v__121305[v_w_id_121294], v__121307); \n          }\n          /* end map_seq */\n          v_l_id_121299 = atomic_inc(&(v_work_idx_9639)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121294 = atomic_inc(v_work_idx_9646); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__121302",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121303",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121304",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121305",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121306",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121307",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121315",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121309",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__121320",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}