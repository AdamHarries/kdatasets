{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__119255, const global float* restrict v__119256, const global float* restrict v__119257, const global float* restrict v__119258, float v__119259, float v__119260, global float* v__119277, local float* v__119272, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__119263; \n  float v__119265; \n  float v__105970; \n  /* Private Memory */\n  float v__119267_0;\n  \n  float v__119269_0;\n  \n  for (int v_wg_id_119248 = get_group_id(0); v_wg_id_119248 < v_MHeight_2; v_wg_id_119248 = (v_wg_id_119248 + get_num_groups(0))) {\n    for (int v_l_id_119249 = get_local_id(0); v_l_id_119249 < v_MWidthC_1; v_l_id_119249 = (v_l_id_119249 + get_local_size(0))) {\n      float v_tmp_119338 = 0.0f; \n      v__119263 = v_tmp_119338; \n      /* reduce_seq */\n      for (int v_i_119250 = 0; v_i_119250 < 64; v_i_119250 = (1 + v_i_119250)) {\n        float v_tmp_119339 = 0.0f; \n        v__119265 = v_tmp_119339; \n        int v_index_119340 = v__119255[(v_l_id_119249 + (64 * v_MWidthC_1 * v_wg_id_119248) + (v_MWidthC_1 * v_i_119250))]; \n        if (v_index_119340 < 0) {\n          v__119267_0 = v__119265; \n        } else {\n          if (v_index_119340 >= v_VLength_3) {\n            v__119267_0 = v__119265; \n          } else {\n            v__119267_0 = v__119257[v_index_119340]; \n          }\n        }\n        v__119269_0 = mult(v__119267_0, v__119256[(v_l_id_119249 + (64 * v_MWidthC_1 * v_wg_id_119248) + (v_MWidthC_1 * v_i_119250))]); \n        v__119263 = add(v__119269_0, v__119263); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_119251 = 0; \n        v__119272[v_l_id_119249] = id(v__119263); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9460; \n      v_work_idx_9460 = 0; \n      int v_l_id_119252 = atomic_inc(&(v_work_idx_9460)); \n      while((v_l_id_119252 < 1)){\n        float v_tmp_119343 = 0.0f; \n        v__105970 = v_tmp_119343; \n        /* reduce_seq */\n        for (int v_i_119253 = 0; v_i_119253 < v_MWidthC_1; v_i_119253 = (1 + v_i_119253)) {\n          v__105970 = add(v__105970, v__119272[(v_i_119253 + (v_MWidthC_1 * v_l_id_119252))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_119254 = 0; \n          v__119277[v_wg_id_119248] = doubleMultiplyAdd(v__105970, v__119259, v__119258[v_wg_id_119248], v__119260); \n        }\n        /* end map_seq */\n        v_l_id_119252 = atomic_inc(&(v_work_idx_9460)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__119255",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119256",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119257",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__119258",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__119259",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__119260",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__119277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__119272",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}