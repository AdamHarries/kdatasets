{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115170, const global float* restrict v__115171, const global float* restrict v__115172, const global float* restrict v__115173, float v__115174, float v__115175, global float* v__115188, global float* v__115182, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115178; \n  float v__115183; \n  /* Private Memory */\n  float v__115180_0;\n  \n  for (int v_wg_id_115165 = get_group_id(0); v_wg_id_115165 < ((v_MHeight_2)/(32)); v_wg_id_115165 = (v_wg_id_115165 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9096; \n      v_work_idx_9096 = 0; \n      int v_l_id_115166 = atomic_inc(&(v_work_idx_9096)); \n      while((v_l_id_115166 < 32)){\n        /* map_seq */\n        for (int v_i_115167 = 0; v_i_115167 < v_MWidthC_1; v_i_115167 = (1 + v_i_115167)) {\n          float v_tmp_115228 = 0.0f; \n          v__115178 = v_tmp_115228; \n          int v_index_115229 = v__115170[(v_i_115167 + (32 * v_MWidthC_1 * v_wg_id_115165) + (v_MWidthC_1 * v_l_id_115166))]; \n          if (v_index_115229 < 0) {\n            v__115180_0 = v__115178; \n          } else {\n            if (v_index_115229 >= v_VLength_3) {\n              v__115180_0 = v__115178; \n            } else {\n              v__115180_0 = v__115172[v_index_115229]; \n            }\n          }\n          v__115182[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_115165) + (-1 * v_i_115167) + (v_MWidthC_1 * v_l_id_115166))] = mult(v__115180_0, v__115171[(v_i_115167 + (32 * v_MWidthC_1 * v_wg_id_115165) + (v_MWidthC_1 * v_l_id_115166))]); \n        }\n        /* end map_seq */\n        float v_tmp_115230 = 0.0f; \n        v__115183 = v_tmp_115230; \n        /* reduce_seq */\n        for (int v_i_115168 = 0; v_i_115168 < v_MWidthC_1; v_i_115168 = (1 + v_i_115168)) {\n          v__115183 = add(v__115183, v__115182[(v_i_115168 + (32 * v_MWidthC_1 * v_wg_id_115165) + (v_MWidthC_1 * v_l_id_115166))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115169 = 0; \n          v__115188[(v_l_id_115166 + (32 * v_wg_id_115165))] = doubleMultiplyAdd(v__115183, v__115174, v__115173[(v_l_id_115166 + (32 * v_wg_id_115165))], v__115175); \n        }\n        /* end map_seq */\n        v_l_id_115166 = atomic_inc(&(v_work_idx_9096)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__115170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115171",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115172",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115173",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115174",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115175",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115182",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__115188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}