{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134279, const global float* restrict v__134280, const global float* restrict v__134281, const global float* restrict v__134282, float v__134283, float v__134284, global float* v__134302, global int* v__134286, local float* v__134297, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134288; \n  float v__134290; \n  float v__105970; \n  /* Private Memory */\n  float v__134292_0;\n  \n  float v__134294_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10808 = v__134286; \n    local int v_w_id_134272; \n    if (get_local_id(0) == 0) {\n      v_w_id_134272 = atomic_inc(v_work_idx_10808); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134272 < v_MHeight_2)){\n      for (int v_l_id_134273 = get_local_id(0); v_l_id_134273 < v_MWidthC_1; v_l_id_134273 = (v_l_id_134273 + get_local_size(0))) {\n        float v_tmp_134361 = 0.0f; \n        v__134288 = v_tmp_134361; \n        /* reduce_seq */\n        for (int v_i_134274 = 0; v_i_134274 < 512; v_i_134274 = (1 + v_i_134274)) {\n          float v_tmp_134362 = 0.0f; \n          v__134290 = v_tmp_134362; \n          int v_index_134363 = v__134279[(v_l_id_134273 + (512 * v_MWidthC_1 * v_w_id_134272) + (v_MWidthC_1 * v_i_134274))]; \n          if (v_index_134363 < 0) {\n            v__134292_0 = v__134290; \n          } else {\n            if (v_index_134363 >= v_VLength_3) {\n              v__134292_0 = v__134290; \n            } else {\n              v__134292_0 = v__134281[v_index_134363]; \n            }\n          }\n          v__134294_0 = mult(v__134292_0, v__134280[(v_l_id_134273 + (512 * v_MWidthC_1 * v_w_id_134272) + (v_MWidthC_1 * v_i_134274))]); \n          v__134288 = add(v__134294_0, v__134288); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134275 = 0; \n          v__134297[v_l_id_134273] = id(v__134288); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10802; \n        v_work_idx_10802 = 0; \n        int v_l_id_134276 = atomic_inc(&(v_work_idx_10802)); \n        while((v_l_id_134276 < 1)){\n          float v_tmp_134366 = 0.0f; \n          v__105970 = v_tmp_134366; \n          /* reduce_seq */\n          for (int v_i_134277 = 0; v_i_134277 < v_MWidthC_1; v_i_134277 = (1 + v_i_134277)) {\n            v__105970 = add(v__105970, v__134297[(v_i_134277 + (v_MWidthC_1 * v_l_id_134276))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134278 = 0; \n            v__134302[v_w_id_134272] = doubleMultiplyAdd(v__105970, v__134283, v__134282[v_w_id_134272], v__134284); \n          }\n          /* end map_seq */\n          v_l_id_134276 = atomic_inc(&(v_work_idx_10802)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134272 = atomic_inc(v_work_idx_10808); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__134279",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134280",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134281",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134282",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134283",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134284",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134286",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134302",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__134297",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}