{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__122360, const global float* restrict v__122361, const global float* restrict v__122362, const global float* restrict v__122363, float v__122364, float v__122365, global float* v__122383, global float* v__122373, global int* v__122367, local float* v__122378, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__122369; \n  float v__122374; \n  float v__105970; \n  /* Private Memory */\n  float v__122371_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9752 = v__122367; \n    local int v_w_id_122352; \n    if (get_local_id(0) == 0) {\n      v_w_id_122352 = atomic_inc(v_work_idx_9752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_122352 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9750; \n        v_work_idx_9750 = 0; \n        int v_l_id_122353 = atomic_inc(&(v_work_idx_9750)); \n        while((v_l_id_122353 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_122354 = 0; v_i_122354 < 64; v_i_122354 = (1 + v_i_122354)) {\n            float v_tmp_122434 = 0.0f; \n            v__122369 = v_tmp_122434; \n            int v_index_122435 = v__122360[(v_l_id_122353 + (64 * v_MWidthC_1 * v_w_id_122352) + (v_MWidthC_1 * v_i_122354))]; \n            if (v_index_122435 < 0) {\n              v__122371_0 = v__122369; \n            } else {\n              if (v_index_122435 >= v_VLength_3) {\n                v__122371_0 = v__122369; \n              } else {\n                v__122371_0 = v__122362[v_index_122435]; \n              }\n            }\n            v__122373[(63 + (64 * v_MWidthC_1 * v_w_id_122352) + (-1 * v_i_122354) + (64 * v_l_id_122353))] = mult(v__122371_0, v__122361[(v_l_id_122353 + (64 * v_MWidthC_1 * v_w_id_122352) + (v_MWidthC_1 * v_i_122354))]); \n          }\n          /* end map_seq */\n          float v_tmp_122436 = 0.0f; \n          v__122374 = v_tmp_122436; \n          /* reduce_seq */\n          for (int v_i_122355 = 0; v_i_122355 < 64; v_i_122355 = (1 + v_i_122355)) {\n            v__122374 = add(v__122374, v__122373[(v_i_122355 + (64 * v_MWidthC_1 * v_w_id_122352) + (64 * v_l_id_122353))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122356 = 0; \n            v__122378[v_l_id_122353] = id(v__122374); \n          }\n          /* end map_seq */\n          v_l_id_122353 = atomic_inc(&(v_work_idx_9750)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9744; \n        v_work_idx_9744 = 0; \n        int v_l_id_122357 = atomic_inc(&(v_work_idx_9744)); \n        while((v_l_id_122357 < 1)){\n          float v_tmp_122439 = 0.0f; \n          v__105970 = v_tmp_122439; \n          /* reduce_seq */\n          for (int v_i_122358 = 0; v_i_122358 < v_MWidthC_1; v_i_122358 = (1 + v_i_122358)) {\n            v__105970 = add(v__105970, v__122378[(v_i_122358 + (v_MWidthC_1 * v_l_id_122357))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122359 = 0; \n            v__122383[v_w_id_122352] = doubleMultiplyAdd(v__105970, v__122364, v__122363[v_w_id_122352], v__122365); \n          }\n          /* end map_seq */\n          v_l_id_122357 = atomic_inc(&(v_work_idx_9744)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_122352 = atomic_inc(v_work_idx_9752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__122360",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122361",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122362",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__122363",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__122364",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__122365",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122373",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122367",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122383",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__122378",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}