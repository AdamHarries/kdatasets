{
  "name" : "awrg-slcl-fdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__112230, const global float* restrict v__112231, const global float* restrict v__112232, const global float* restrict v__112233, float v__112234, float v__112235, global float* v__112250, global float* v__112249, global int* v__112237, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112238; \n  float v__112241; \n  /* Private Memory */\n  float v__112243_0;\n  \n  float v__112245_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8833 = v__112237; \n    local int v_w_id_112225; \n    if (get_local_id(0) == 0) {\n      v_w_id_112225 = atomic_inc(v_work_idx_8833); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112225 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_112226 = get_local_id(0); v_l_id_112226 < 16; v_l_id_112226 = (v_l_id_112226 + get_local_size(0))) {\n        float v_tmp_112286 = 0.0f; \n        v__112238 = v_tmp_112286; \n        /* reduce_seq */\n        int v_stop_112287 = min(v__112230[(1 + (v__112230[(v_l_id_112226 + (16 * v_w_id_112225))] / 4))], ((global int*)(v__112231 + (((global int*)(v__112231))[(v_l_id_112226 + (16 * v_w_id_112225))] / 4)))[1]); \n        for (int v_i_112227 = 0; v_i_112227 < v_stop_112287; v_i_112227 = (1 + v_i_112227)) {\n          float v_tmp_112295 = 0.0f; \n          v__112241 = v_tmp_112295; \n          int v_index_112297 = v__112230[(2 + v_i_112227 + (v__112230[(v_l_id_112226 + (16 * v_w_id_112225))] / 4))]; \n          if (v_index_112297 < 0) {\n            v__112243_0 = v__112241; \n          } else {\n            if (v_index_112297 >= v_MWidthC_1) {\n              v__112243_0 = v__112241; \n            } else {\n              v__112243_0 = v__112232[v_index_112297]; \n            }\n          }\n          v__112245_0 = mult(v__112231[(2 + v_i_112227 + (((global int*)(v__112231))[(v_l_id_112226 + (16 * v_w_id_112225))] / 4))], v__112243_0); \n          v__112238 = add(v__112238, v__112245_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112228 = 0; \n          v__112249[(v_l_id_112226 + (16 * v_w_id_112225))] = doubleMultiplyAdd(v__112238, v__112234, v__112233[(v_l_id_112226 + (16 * v_w_id_112225))], v__112235); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112229 = 0; \n          v__112250[(v_l_id_112226 + (16 * v_w_id_112225))] = id(v__112249[(v_l_id_112226 + (16 * v_w_id_112225))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_112225 = atomic_inc(v_work_idx_8833); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__112230",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__112231",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__112232",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__112233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112234",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112235",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112249",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112237",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}