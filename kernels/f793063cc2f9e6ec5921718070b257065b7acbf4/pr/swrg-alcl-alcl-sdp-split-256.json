{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128801, const global float* restrict v__128802, const global float* restrict v__128803, const global float* restrict v__128804, float v__128805, float v__128806, global float* v__128823, global float* v__128813, local float* v__128818, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128809; \n  float v__128814; \n  float v__105970; \n  /* Private Memory */\n  float v__128811_0;\n  \n  for (int v_wg_id_128793 = get_group_id(0); v_wg_id_128793 < v_MHeight_2; v_wg_id_128793 = (v_wg_id_128793 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10317; \n      v_work_idx_10317 = 0; \n      int v_l_id_128794 = atomic_inc(&(v_work_idx_10317)); \n      while((v_l_id_128794 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_128795 = 0; v_i_128795 < 256; v_i_128795 = (1 + v_i_128795)) {\n          float v_tmp_128876 = 0.0f; \n          v__128809 = v_tmp_128876; \n          int v_index_128877 = v__128801[(v_l_id_128794 + (256 * v_MWidthC_1 * v_wg_id_128793) + (v_MWidthC_1 * v_i_128795))]; \n          if (v_index_128877 < 0) {\n            v__128811_0 = v__128809; \n          } else {\n            if (v_index_128877 >= v_VLength_3) {\n              v__128811_0 = v__128809; \n            } else {\n              v__128811_0 = v__128803[v_index_128877]; \n            }\n          }\n          v__128813[(255 + (256 * v_MWidthC_1 * v_wg_id_128793) + (-1 * v_i_128795) + (256 * v_l_id_128794))] = mult(v__128811_0, v__128802[(v_l_id_128794 + (256 * v_MWidthC_1 * v_wg_id_128793) + (v_MWidthC_1 * v_i_128795))]); \n        }\n        /* end map_seq */\n        float v_tmp_128878 = 0.0f; \n        v__128814 = v_tmp_128878; \n        /* reduce_seq */\n        for (int v_i_128796 = 0; v_i_128796 < 256; v_i_128796 = (1 + v_i_128796)) {\n          v__128814 = add(v__128814, v__128813[(v_i_128796 + (256 * v_MWidthC_1 * v_wg_id_128793) + (256 * v_l_id_128794))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128797 = 0; \n          v__128818[v_l_id_128794] = id(v__128814); \n        }\n        /* end map_seq */\n        v_l_id_128794 = atomic_inc(&(v_work_idx_10317)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10311; \n      v_work_idx_10311 = 0; \n      int v_l_id_128798 = atomic_inc(&(v_work_idx_10311)); \n      while((v_l_id_128798 < 1)){\n        float v_tmp_128881 = 0.0f; \n        v__105970 = v_tmp_128881; \n        /* reduce_seq */\n        for (int v_i_128799 = 0; v_i_128799 < v_MWidthC_1; v_i_128799 = (1 + v_i_128799)) {\n          v__105970 = add(v__105970, v__128818[(v_i_128799 + (v_MWidthC_1 * v_l_id_128798))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128800 = 0; \n          v__128823[v_wg_id_128793] = doubleMultiplyAdd(v__105970, v__128805, v__128804[v_wg_id_128793], v__128806); \n        }\n        /* end map_seq */\n        v_l_id_128798 = atomic_inc(&(v_work_idx_10311)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__128801",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128802",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128803",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128805",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128806",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__128813",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__128823",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__128818",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}