{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120981, const global float* restrict v__120982, const global float* restrict v__120983, const global float* restrict v__120984, float v__120985, float v__120986, global float* v__121004, global float* v__120994, global int* v__120988, local float* v__120999, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120990; \n  float v__120995; \n  float v__105970; \n  /* Private Memory */\n  float v__120992_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9617 = v__120988; \n    local int v_w_id_120973; \n    if (get_local_id(0) == 0) {\n      v_w_id_120973 = atomic_inc(v_work_idx_9617); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_120973 < v_MHeight_2)){\n      for (int v_l_id_120974 = get_local_id(0); v_l_id_120974 < v_MWidthC_1; v_l_id_120974 = (v_l_id_120974 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_120975 = 0; v_i_120975 < 64; v_i_120975 = (1 + v_i_120975)) {\n          float v_tmp_121067 = 0.0f; \n          v__120990 = v_tmp_121067; \n          int v_index_121068 = v__120981[(v_l_id_120974 + (64 * v_MWidthC_1 * v_w_id_120973) + (v_MWidthC_1 * v_i_120975))]; \n          if (v_index_121068 < 0) {\n            v__120992_0 = v__120990; \n          } else {\n            if (v_index_121068 >= v_VLength_3) {\n              v__120992_0 = v__120990; \n            } else {\n              v__120992_0 = v__120983[v_index_121068]; \n            }\n          }\n          v__120994[(63 + (64 * v_MWidthC_1 * v_w_id_120973) + (-1 * v_i_120975) + (64 * v_l_id_120974))] = mult(v__120992_0, v__120982[(v_l_id_120974 + (64 * v_MWidthC_1 * v_w_id_120973) + (v_MWidthC_1 * v_i_120975))]); \n        }\n        /* end map_seq */\n        float v_tmp_121069 = 0.0f; \n        v__120995 = v_tmp_121069; \n        /* reduce_seq */\n        for (int v_i_120976 = 0; v_i_120976 < 64; v_i_120976 = (1 + v_i_120976)) {\n          v__120995 = add(v__120995, v__120994[(v_i_120976 + (64 * v_MWidthC_1 * v_w_id_120973) + (64 * v_l_id_120974))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120977 = 0; \n          v__120999[v_l_id_120974] = id(v__120995); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_120978 = get_local_id(0); \n        float v_tmp_121072 = 0.0f; \n        v__105970 = v_tmp_121072; \n        /* reduce_seq */\n        for (int v_i_120979 = 0; v_i_120979 < v_MWidthC_1; v_i_120979 = (1 + v_i_120979)) {\n          v__105970 = add(v__105970, v__120999[(v_i_120979 + (v_MWidthC_1 * v_l_id_120978))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120980 = 0; \n          v__121004[v_w_id_120973] = doubleMultiplyAdd(v__105970, v__120985, v__120984[v_w_id_120973], v__120986); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_120973 = atomic_inc(v_work_idx_9617); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__120981",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120982",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120983",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120985",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120986",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__120994",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120988",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__120999",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}