{
  "name" : "swrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131374, const global float* restrict v__131375, const global float* restrict v__131376, const global float* restrict v__131377, float v__131378, float v__131379, global float* v__131394, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131381; \n  float v__131384; \n  /* Private Memory */\n  float v__131386_0;\n  \n  float v__131388_0;\n  \n  int v__131392_0;\n  \n  for (int v_wg_id_131370 = get_group_id(0); v_wg_id_131370 < ((v_MHeight_2)/(512)); v_wg_id_131370 = (v_wg_id_131370 + get_num_groups(0))) {\n    for (int v_l_id_131371 = get_local_id(0); v_l_id_131371 < 512; v_l_id_131371 = (v_l_id_131371 + get_local_size(0))) {\n      float v_tmp_131442 = 0.0f; \n      v__131381 = v_tmp_131442; \n      /* reduce_while_seq */\n      for (int v_i_131372 = 0; v_i_131372 < v_MWidthC_1; v_i_131372 = (1 + v_i_131372)) {\n        v__131392_0 = check(v__131381, v__131374[(v_i_131372 + (512 * v_MWidthC_1 * v_wg_id_131370) + (v_MWidthC_1 * v_l_id_131371))]); \n        if (v__131392_0) {\n        } else {\n          break;\n        }\n        float v_tmp_131443 = 0.0f; \n        v__131384 = v_tmp_131443; \n        int v_index_131444 = v__131374[(v_i_131372 + (512 * v_MWidthC_1 * v_wg_id_131370) + (v_MWidthC_1 * v_l_id_131371))]; \n        if (v_index_131444 < 0) {\n          v__131386_0 = v__131384; \n        } else {\n          if (v_index_131444 >= v_VLength_3) {\n            v__131386_0 = v__131384; \n          } else {\n            v__131386_0 = v__131376[v_index_131444]; \n          }\n        }\n        v__131388_0 = mult(v__131386_0, v__131375[(v_i_131372 + (512 * v_MWidthC_1 * v_wg_id_131370) + (v_MWidthC_1 * v_l_id_131371))]); \n        v__131381 = add(v__131388_0, v__131381); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131373 = 0; \n        v__131394[(v_l_id_131371 + (512 * v_wg_id_131370))] = doubleMultiplyAdd(v__131381, v__131378, v__131377[(v_l_id_131371 + (512 * v_wg_id_131370))], v__131379); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__131374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131376",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131377",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131378",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131379",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__131394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}