{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113164, const global float* restrict v__113165, const global float* restrict v__113166, const global float* restrict v__113167, float v__113168, float v__113169, global float* v__113185, global int* v__113171, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113172; \n  float v__113175; \n  /* Private Memory */\n  float v__113177_0;\n  \n  float v__113179_0;\n  \n  int v__113183_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8920 = v__113171; \n    local int v_w_id_113160; \n    if (get_local_id(0) == 0) {\n      v_w_id_113160 = atomic_inc(v_work_idx_8920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113160 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8918; \n        v_work_idx_8918 = 0; \n        int v_l_id_113161 = atomic_inc(&(v_work_idx_8918)); \n        while((v_l_id_113161 < 16)){\n          float v_tmp_113228 = 0.0f; \n          v__113172 = v_tmp_113228; \n          /* reduce_while_seq */\n          for (int v_i_113162 = 0; v_i_113162 < v_MWidthC_1; v_i_113162 = (1 + v_i_113162)) {\n            v__113183_0 = check(v__113172, v__113164[(v_i_113162 + (16 * v_MWidthC_1 * v_w_id_113160) + (v_MWidthC_1 * v_l_id_113161))]); \n            if (v__113183_0) {\n            } else {\n              break;\n            }\n            float v_tmp_113229 = 0.0f; \n            v__113175 = v_tmp_113229; \n            int v_index_113230 = v__113164[(v_i_113162 + (16 * v_MWidthC_1 * v_w_id_113160) + (v_MWidthC_1 * v_l_id_113161))]; \n            if (v_index_113230 < 0) {\n              v__113177_0 = v__113175; \n            } else {\n              if (v_index_113230 >= v_VLength_3) {\n                v__113177_0 = v__113175; \n              } else {\n                v__113177_0 = v__113166[v_index_113230]; \n              }\n            }\n            v__113179_0 = mult(v__113177_0, v__113165[(v_i_113162 + (16 * v_MWidthC_1 * v_w_id_113160) + (v_MWidthC_1 * v_l_id_113161))]); \n            v__113172 = add(v__113179_0, v__113172); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113163 = 0; \n            v__113185[(v_l_id_113161 + (16 * v_w_id_113160))] = doubleMultiplyAdd(v__113172, v__113168, v__113167[(v_l_id_113161 + (16 * v_w_id_113160))], v__113169); \n          }\n          /* end map_seq */\n          v_l_id_113161 = atomic_inc(&(v_work_idx_8918)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113160 = atomic_inc(v_work_idx_8920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__113164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113165",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113166",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113167",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113168",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113169",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113171",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}