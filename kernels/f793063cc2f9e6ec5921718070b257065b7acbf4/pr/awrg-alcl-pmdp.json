{
  "name" : "awrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105341, const global float* restrict v__105342, const global float* restrict v__105343, const global float* restrict v__105344, float v__105345, float v__105346, global float* v__105360, global float* v__105354, global int* v__105348, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105350; \n  float v__105355; \n  /* Private Memory */\n  float v__105352_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8234 = v__105348; \n    local int v_w_id_105337; \n    if (get_local_id(0) == 0) {\n      v_w_id_105337 = atomic_inc(v_work_idx_8234); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_105337 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_l_id_8232; \n        v_l_id_8232 = 0; \n        int v_l_id_105338 = atomic_inc(&(v_l_id_8232)); \n        while((v_l_id_105338 < v_MWidthC_1)){\n          float v_tmp_105390 = 0.0f; \n          v__105350 = v_tmp_105390; \n          int v_index_105391 = v__105341[(v_l_id_105338 + (v_MWidthC_1 * v_w_id_105337))]; \n          if (v_index_105391 < 0) {\n            v__105352_0 = v__105350; \n          } else {\n            if (v_index_105391 >= v_VLength_3) {\n              v__105352_0 = v__105350; \n            } else {\n              v__105352_0 = v__105343[v_index_105391]; \n            }\n          }\n          v__105354[(-1 + v_MWidthC_1 + (-1 * v_l_id_105338) + (v_MWidthC_1 * v_w_id_105337))] = mult(v__105352_0, v__105342[(v_l_id_105338 + (v_MWidthC_1 * v_w_id_105337))]); \n          v_l_id_105338 = atomic_inc(&(v_l_id_8232)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_105392 = 0.0f; \n      v__105355 = v_tmp_105392; \n      /* reduce_seq */\n      for (int v_i_105339 = 0; v_i_105339 < v_MWidthC_1; v_i_105339 = (1 + v_i_105339)) {\n        v__105355 = add(v__105355, v__105354[(v_i_105339 + (v_MWidthC_1 * v_w_id_105337))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105340 = 0; \n        v__105360[v_w_id_105337] = doubleMultiplyAdd(v__105355, v__105345, v__105344[v_w_id_105337], v__105346); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_105337 = atomic_inc(v_work_idx_8234); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__105341",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105342",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105343",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105345",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105346",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105354",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105348",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__105360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}