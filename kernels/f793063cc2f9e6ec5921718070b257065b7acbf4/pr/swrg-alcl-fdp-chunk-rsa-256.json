{
  "name" : "swrg-alcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__128342, const global float* restrict v__128343, const global float* restrict v__128344, const global float* restrict v__128345, float v__128346, float v__128347, global float* v__128361, global float* v__128360, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128349; \n  float v__128352; \n  /* Private Memory */\n  float v__128354_0;\n  \n  float v__128356_0;\n  \n  for (int v_wg_id_128337 = get_group_id(0); v_wg_id_128337 < ((v_MHeight_2)/(256)); v_wg_id_128337 = (v_wg_id_128337 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10272; \n      v_work_idx_10272 = 0; \n      int v_l_id_128338 = atomic_inc(&(v_work_idx_10272)); \n      while((v_l_id_128338 < 256)){\n        float v_tmp_128394 = 0.0f; \n        v__128349 = v_tmp_128394; \n        /* reduce_seq */\n        int v_stop_128395 = min(v__128342[(1 + (v__128342[(v_l_id_128338 + (256 * v_wg_id_128337))] / 4))], ((global int*)(v__128343 + (((global int*)(v__128343))[(v_l_id_128338 + (256 * v_wg_id_128337))] / 4)))[1]); \n        for (int v_i_128339 = 0; v_i_128339 < v_stop_128395; v_i_128339 = (1 + v_i_128339)) {\n          float v_tmp_128403 = 0.0f; \n          v__128352 = v_tmp_128403; \n          int v_index_128405 = v__128342[(2 + v_i_128339 + (v__128342[(v_l_id_128338 + (256 * v_wg_id_128337))] / 4))]; \n          if (v_index_128405 < 0) {\n            v__128354_0 = v__128352; \n          } else {\n            if (v_index_128405 >= v_MWidthC_1) {\n              v__128354_0 = v__128352; \n            } else {\n              v__128354_0 = v__128344[v_index_128405]; \n            }\n          }\n          v__128356_0 = mult(v__128343[(2 + v_i_128339 + (((global int*)(v__128343))[(v_l_id_128338 + (256 * v_wg_id_128337))] / 4))], v__128354_0); \n          v__128349 = add(v__128349, v__128356_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128340 = 0; \n          v__128360[(v_l_id_128338 + (256 * v_wg_id_128337))] = doubleMultiplyAdd(v__128349, v__128346, v__128345[(v_l_id_128338 + (256 * v_wg_id_128337))], v__128347); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128341 = 0; \n          v__128361[(v_l_id_128338 + (256 * v_wg_id_128337))] = id(v__128360[(v_l_id_128338 + (256 * v_wg_id_128337))]); \n        }\n        /* end map_seq */\n        v_l_id_128338 = atomic_inc(&(v_work_idx_10272)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__128342",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__128343",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__128344",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__128345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128346",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128347",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__128360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__128361",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}