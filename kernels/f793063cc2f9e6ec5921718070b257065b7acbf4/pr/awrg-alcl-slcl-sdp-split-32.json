{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117771, const global float* restrict v__117772, const global float* restrict v__117773, const global float* restrict v__117774, float v__117775, float v__117776, global float* v__117794, global float* v__117784, global int* v__117778, local float* v__117789, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117780; \n  float v__117785; \n  float v__105970; \n  /* Private Memory */\n  float v__117782_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9336 = v__117778; \n    local int v_w_id_117763; \n    if (get_local_id(0) == 0) {\n      v_w_id_117763 = atomic_inc(v_work_idx_9336); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117763 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9334; \n        v_work_idx_9334 = 0; \n        int v_l_id_117764 = atomic_inc(&(v_work_idx_9334)); \n        while((v_l_id_117764 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_117765 = 0; v_i_117765 < 32; v_i_117765 = (1 + v_i_117765)) {\n            float v_tmp_117849 = 0.0f; \n            v__117780 = v_tmp_117849; \n            int v_index_117850 = v__117771[(v_l_id_117764 + (32 * v_MWidthC_1 * v_w_id_117763) + (v_MWidthC_1 * v_i_117765))]; \n            if (v_index_117850 < 0) {\n              v__117782_0 = v__117780; \n            } else {\n              if (v_index_117850 >= v_VLength_3) {\n                v__117782_0 = v__117780; \n              } else {\n                v__117782_0 = v__117773[v_index_117850]; \n              }\n            }\n            v__117784[(31 + (32 * v_MWidthC_1 * v_w_id_117763) + (-1 * v_i_117765) + (32 * v_l_id_117764))] = mult(v__117782_0, v__117772[(v_l_id_117764 + (32 * v_MWidthC_1 * v_w_id_117763) + (v_MWidthC_1 * v_i_117765))]); \n          }\n          /* end map_seq */\n          float v_tmp_117851 = 0.0f; \n          v__117785 = v_tmp_117851; \n          /* reduce_seq */\n          for (int v_i_117766 = 0; v_i_117766 < 32; v_i_117766 = (1 + v_i_117766)) {\n            v__117785 = add(v__117785, v__117784[(v_i_117766 + (32 * v_MWidthC_1 * v_w_id_117763) + (32 * v_l_id_117764))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117767 = 0; \n            v__117789[v_l_id_117764] = id(v__117785); \n          }\n          /* end map_seq */\n          v_l_id_117764 = atomic_inc(&(v_work_idx_9334)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_117768 = get_local_id(0); \n        float v_tmp_117854 = 0.0f; \n        v__105970 = v_tmp_117854; \n        /* reduce_seq */\n        for (int v_i_117769 = 0; v_i_117769 < v_MWidthC_1; v_i_117769 = (1 + v_i_117769)) {\n          v__105970 = add(v__105970, v__117789[(v_i_117769 + (v_MWidthC_1 * v_l_id_117768))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_117770 = 0; \n          v__117794[v_w_id_117763] = doubleMultiplyAdd(v__105970, v__117775, v__117774[v_w_id_117763], v__117776); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117763 = atomic_inc(v_work_idx_9336); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__117771",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117772",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117773",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117774",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117775",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117776",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117784",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117778",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__117789",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}