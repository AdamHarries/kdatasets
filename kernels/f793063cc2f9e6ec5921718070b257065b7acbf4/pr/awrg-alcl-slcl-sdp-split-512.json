{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134939, const global float* restrict v__134940, const global float* restrict v__134941, const global float* restrict v__134942, float v__134943, float v__134944, global float* v__134962, global float* v__134952, global int* v__134946, local float* v__134957, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134948; \n  float v__134953; \n  float v__105970; \n  /* Private Memory */\n  float v__134950_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10872 = v__134946; \n    local int v_w_id_134931; \n    if (get_local_id(0) == 0) {\n      v_w_id_134931 = atomic_inc(v_work_idx_10872); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134931 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10870; \n        v_work_idx_10870 = 0; \n        int v_l_id_134932 = atomic_inc(&(v_work_idx_10870)); \n        while((v_l_id_134932 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_134933 = 0; v_i_134933 < 512; v_i_134933 = (1 + v_i_134933)) {\n            float v_tmp_135017 = 0.0f; \n            v__134948 = v_tmp_135017; \n            int v_index_135018 = v__134939[(v_l_id_134932 + (512 * v_MWidthC_1 * v_w_id_134931) + (v_MWidthC_1 * v_i_134933))]; \n            if (v_index_135018 < 0) {\n              v__134950_0 = v__134948; \n            } else {\n              if (v_index_135018 >= v_VLength_3) {\n                v__134950_0 = v__134948; \n              } else {\n                v__134950_0 = v__134941[v_index_135018]; \n              }\n            }\n            v__134952[(511 + (512 * v_MWidthC_1 * v_w_id_134931) + (-1 * v_i_134933) + (512 * v_l_id_134932))] = mult(v__134950_0, v__134940[(v_l_id_134932 + (512 * v_MWidthC_1 * v_w_id_134931) + (v_MWidthC_1 * v_i_134933))]); \n          }\n          /* end map_seq */\n          float v_tmp_135019 = 0.0f; \n          v__134953 = v_tmp_135019; \n          /* reduce_seq */\n          for (int v_i_134934 = 0; v_i_134934 < 512; v_i_134934 = (1 + v_i_134934)) {\n            v__134953 = add(v__134953, v__134952[(v_i_134934 + (512 * v_MWidthC_1 * v_w_id_134931) + (512 * v_l_id_134932))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134935 = 0; \n            v__134957[v_l_id_134932] = id(v__134953); \n          }\n          /* end map_seq */\n          v_l_id_134932 = atomic_inc(&(v_work_idx_10870)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_134936 = get_local_id(0); \n        float v_tmp_135022 = 0.0f; \n        v__105970 = v_tmp_135022; \n        /* reduce_seq */\n        for (int v_i_134937 = 0; v_i_134937 < v_MWidthC_1; v_i_134937 = (1 + v_i_134937)) {\n          v__105970 = add(v__105970, v__134957[(v_i_134937 + (v_MWidthC_1 * v_l_id_134936))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134938 = 0; \n          v__134962[v_w_id_134931] = doubleMultiplyAdd(v__105970, v__134943, v__134942[v_w_id_134931], v__134944); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134931 = atomic_inc(v_work_idx_10872); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__134939",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134940",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134941",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134943",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134944",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134952",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134946",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134962",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__134957",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}