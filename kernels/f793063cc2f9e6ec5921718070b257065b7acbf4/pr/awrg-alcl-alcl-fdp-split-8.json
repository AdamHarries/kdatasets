{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__109577, const global float* restrict v__109578, const global float* restrict v__109579, const global float* restrict v__109580, float v__109581, float v__109582, global float* v__109600, global int* v__109584, local float* v__109595, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__109586; \n  float v__109588; \n  float v__105970; \n  /* Private Memory */\n  float v__109590_0;\n  \n  float v__109592_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8611 = v__109584; \n    local int v_w_id_109570; \n    if (get_local_id(0) == 0) {\n      v_w_id_109570 = atomic_inc(v_work_idx_8611); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_109570 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8609; \n        v_work_idx_8609 = 0; \n        int v_l_id_109571 = atomic_inc(&(v_work_idx_8609)); \n        while((v_l_id_109571 < v_MWidthC_1)){\n          float v_tmp_109651 = 0.0f; \n          v__109586 = v_tmp_109651; \n          /* reduce_seq */\n          for (int v_i_109572 = 0; v_i_109572 < 8; v_i_109572 = (1 + v_i_109572)) {\n            float v_tmp_109652 = 0.0f; \n            v__109588 = v_tmp_109652; \n            int v_index_109653 = v__109577[(v_l_id_109571 + (8 * v_MWidthC_1 * v_w_id_109570) + (v_MWidthC_1 * v_i_109572))]; \n            if (v_index_109653 < 0) {\n              v__109590_0 = v__109588; \n            } else {\n              if (v_index_109653 >= v_VLength_3) {\n                v__109590_0 = v__109588; \n              } else {\n                v__109590_0 = v__109579[v_index_109653]; \n              }\n            }\n            v__109592_0 = mult(v__109590_0, v__109578[(v_l_id_109571 + (8 * v_MWidthC_1 * v_w_id_109570) + (v_MWidthC_1 * v_i_109572))]); \n            v__109586 = add(v__109592_0, v__109586); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_109573 = 0; \n            v__109595[v_l_id_109571] = id(v__109586); \n          }\n          /* end map_seq */\n          v_l_id_109571 = atomic_inc(&(v_work_idx_8609)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8604; \n        v_work_idx_8604 = 0; \n        int v_l_id_109574 = atomic_inc(&(v_work_idx_8604)); \n        while((v_l_id_109574 < 1)){\n          float v_tmp_109656 = 0.0f; \n          v__105970 = v_tmp_109656; \n          /* reduce_seq */\n          for (int v_i_109575 = 0; v_i_109575 < v_MWidthC_1; v_i_109575 = (1 + v_i_109575)) {\n            v__105970 = add(v__105970, v__109595[(v_i_109575 + (v_MWidthC_1 * v_l_id_109574))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_109576 = 0; \n            v__109600[v_w_id_109570] = doubleMultiplyAdd(v__105970, v__109581, v__109580[v_w_id_109570], v__109582); \n          }\n          /* end map_seq */\n          v_l_id_109574 = atomic_inc(&(v_work_idx_8604)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_109570 = atomic_inc(v_work_idx_8611); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__109577",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109578",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109579",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__109580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__109581",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__109582",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__109584",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__109600",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__109595",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}