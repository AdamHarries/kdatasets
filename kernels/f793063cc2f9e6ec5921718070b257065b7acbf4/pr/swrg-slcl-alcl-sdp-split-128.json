{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__123445, const global float* restrict v__123446, const global float* restrict v__123447, const global float* restrict v__123448, float v__123449, float v__123450, global float* v__123467, global float* v__123457, local float* v__123462, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123453; \n  float v__123458; \n  float v__105970; \n  /* Private Memory */\n  float v__123455_0;\n  \n  for (int v_wg_id_123437 = get_group_id(0); v_wg_id_123437 < v_MHeight_2; v_wg_id_123437 = (v_wg_id_123437 + get_num_groups(0))) {\n    for (int v_l_id_123438 = get_local_id(0); v_l_id_123438 < v_MWidthC_1; v_l_id_123438 = (v_l_id_123438 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_123439 = 0; v_i_123439 < 128; v_i_123439 = (1 + v_i_123439)) {\n        float v_tmp_123528 = 0.0f; \n        v__123453 = v_tmp_123528; \n        int v_index_123529 = v__123445[(v_l_id_123438 + (128 * v_MWidthC_1 * v_wg_id_123437) + (v_MWidthC_1 * v_i_123439))]; \n        if (v_index_123529 < 0) {\n          v__123455_0 = v__123453; \n        } else {\n          if (v_index_123529 >= v_VLength_3) {\n            v__123455_0 = v__123453; \n          } else {\n            v__123455_0 = v__123447[v_index_123529]; \n          }\n        }\n        v__123457[(127 + (128 * v_MWidthC_1 * v_wg_id_123437) + (-1 * v_i_123439) + (128 * v_l_id_123438))] = mult(v__123455_0, v__123446[(v_l_id_123438 + (128 * v_MWidthC_1 * v_wg_id_123437) + (v_MWidthC_1 * v_i_123439))]); \n      }\n      /* end map_seq */\n      float v_tmp_123530 = 0.0f; \n      v__123458 = v_tmp_123530; \n      /* reduce_seq */\n      for (int v_i_123440 = 0; v_i_123440 < 128; v_i_123440 = (1 + v_i_123440)) {\n        v__123458 = add(v__123458, v__123457[(v_i_123440 + (128 * v_MWidthC_1 * v_wg_id_123437) + (128 * v_l_id_123438))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123441 = 0; \n        v__123462[v_l_id_123438] = id(v__123458); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9834; \n      v_work_idx_9834 = 0; \n      int v_l_id_123442 = atomic_inc(&(v_work_idx_9834)); \n      while((v_l_id_123442 < 1)){\n        float v_tmp_123533 = 0.0f; \n        v__105970 = v_tmp_123533; \n        /* reduce_seq */\n        for (int v_i_123443 = 0; v_i_123443 < v_MWidthC_1; v_i_123443 = (1 + v_i_123443)) {\n          v__105970 = add(v__105970, v__123462[(v_i_123443 + (v_MWidthC_1 * v_l_id_123442))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_123444 = 0; \n          v__123467[v_wg_id_123437] = doubleMultiplyAdd(v__105970, v__123449, v__123448[v_wg_id_123437], v__123450); \n        }\n        /* end map_seq */\n        v_l_id_123442 = atomic_inc(&(v_work_idx_9834)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__123445",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123446",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123447",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__123448",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123449",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123450",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__123457",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__123467",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__123462",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}