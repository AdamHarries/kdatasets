{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__106165, const global float* restrict v__106166, const global float* restrict v__106167, const global float* restrict v__106168, float v__106169, float v__106170, global float* v__106189, local float* v__106184, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106173; \n  float v__106175; \n  float v__105970; \n  /* Private Memory */\n  float v__106177_0;\n  \n  float v__106179_0;\n  \n  int v__106183_0;\n  \n  for (int v_wg_id_106158 = get_group_id(0); v_wg_id_106158 < v_MHeight_2; v_wg_id_106158 = (v_wg_id_106158 + get_num_groups(0))) {\n    for (int v_l_id_106159 = get_local_id(0); v_l_id_106159 < v_MWidthC_1; v_l_id_106159 = (v_l_id_106159 + get_local_size(0))) {\n      float v_tmp_106257 = 0.0f; \n      v__106173 = v_tmp_106257; \n      /* reduce_while_seq */\n      for (int v_i_106160 = 0; v_i_106160 < 8; v_i_106160 = (1 + v_i_106160)) {\n        v__106183_0 = check(v__106173, v__106165[(v_l_id_106159 + (8 * v_MWidthC_1 * v_wg_id_106158) + (v_MWidthC_1 * v_i_106160))]); \n        if (v__106183_0) {\n        } else {\n          break;\n        }\n        float v_tmp_106258 = 0.0f; \n        v__106175 = v_tmp_106258; \n        int v_index_106259 = v__106165[(v_l_id_106159 + (8 * v_MWidthC_1 * v_wg_id_106158) + (v_MWidthC_1 * v_i_106160))]; \n        if (v_index_106259 < 0) {\n          v__106177_0 = v__106175; \n        } else {\n          if (v_index_106259 >= v_VLength_3) {\n            v__106177_0 = v__106175; \n          } else {\n            v__106177_0 = v__106167[v_index_106259]; \n          }\n        }\n        v__106179_0 = mult(v__106177_0, v__106166[(v_l_id_106159 + (8 * v_MWidthC_1 * v_wg_id_106158) + (v_MWidthC_1 * v_i_106160))]); \n        v__106173 = add(v__106179_0, v__106173); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106161 = 0; \n        v__106184[v_l_id_106159] = id(v__106173); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_106162 = get_local_id(0); \n      float v_tmp_106262 = 0.0f; \n      v__105970 = v_tmp_106262; \n      /* reduce_seq */\n      for (int v_i_106163 = 0; v_i_106163 < v_MWidthC_1; v_i_106163 = (1 + v_i_106163)) {\n        v__105970 = add(v__105970, v__106184[(v_i_106163 + (v_MWidthC_1 * v_l_id_106162))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106164 = 0; \n        v__106189[v_wg_id_106158] = doubleMultiplyAdd(v__105970, v__106169, v__106168[v_wg_id_106158], v__106170); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__106165",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106166",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106167",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106169",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106170",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__106189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__106184",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}