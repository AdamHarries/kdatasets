{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__111993, const global float* restrict v__111994, const global float* restrict v__111995, const global float* restrict v__111996, float v__111997, float v__111998, global float* v__112012, global int* v__112000, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112002; \n  float v__112004; \n  /* Private Memory */\n  float v__112006_0;\n  \n  float v__112008_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8815 = v__112000; \n    local int v_w_id_111989; \n    if (get_local_id(0) == 0) {\n      v_w_id_111989 = atomic_inc(v_work_idx_8815); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_111989 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_111990 = get_local_id(0); v_l_id_111990 < 16; v_l_id_111990 = (v_l_id_111990 + get_local_size(0))) {\n        float v_tmp_112053 = 0.0f; \n        v__112002 = v_tmp_112053; \n        /* reduce_seq */\n        for (int v_i_111991 = 0; v_i_111991 < v_MWidthC_1; v_i_111991 = (1 + v_i_111991)) {\n          float v_tmp_112054 = 0.0f; \n          v__112004 = v_tmp_112054; \n          int v_index_112055 = v__111993[(v_i_111991 + (16 * v_MWidthC_1 * v_w_id_111989) + (v_MWidthC_1 * v_l_id_111990))]; \n          if (v_index_112055 < 0) {\n            v__112006_0 = v__112004; \n          } else {\n            if (v_index_112055 >= v_VLength_3) {\n              v__112006_0 = v__112004; \n            } else {\n              v__112006_0 = v__111995[v_index_112055]; \n            }\n          }\n          v__112008_0 = mult(v__112006_0, v__111994[(v_i_111991 + (16 * v_MWidthC_1 * v_w_id_111989) + (v_MWidthC_1 * v_l_id_111990))]); \n          v__112002 = add(v__112008_0, v__112002); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111992 = 0; \n          v__112012[(v_l_id_111990 + (16 * v_w_id_111989))] = doubleMultiplyAdd(v__112002, v__111997, v__111996[(v_l_id_111990 + (16 * v_w_id_111989))], v__111998); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_111989 = atomic_inc(v_work_idx_8815); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__111993",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111994",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111995",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__111996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__111997",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__111998",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112000",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}