{
  "name" : "swrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110457, const global float* restrict v__110458, const global float* restrict v__110459, const global float* restrict v__110460, float v__110461, float v__110462, global float* v__110481, local float* v__110476, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110465; \n  float v__110467; \n  float v__105970; \n  /* Private Memory */\n  float v__110469_0;\n  \n  float v__110471_0;\n  \n  int v__110475_0;\n  \n  for (int v_wg_id_110450 = get_group_id(0); v_wg_id_110450 < v_MHeight_2; v_wg_id_110450 = (v_wg_id_110450 + get_num_groups(0))) {\n    for (int v_l_id_110451 = get_local_id(0); v_l_id_110451 < v_MWidthC_1; v_l_id_110451 = (v_l_id_110451 + get_local_size(0))) {\n      float v_tmp_110549 = 0.0f; \n      v__110465 = v_tmp_110549; \n      /* reduce_while_seq */\n      for (int v_i_110452 = 0; v_i_110452 < 16; v_i_110452 = (1 + v_i_110452)) {\n        v__110475_0 = check(v__110465, v__110457[(v_l_id_110451 + (16 * v_MWidthC_1 * v_wg_id_110450) + (v_MWidthC_1 * v_i_110452))]); \n        if (v__110475_0) {\n        } else {\n          break;\n        }\n        float v_tmp_110550 = 0.0f; \n        v__110467 = v_tmp_110550; \n        int v_index_110551 = v__110457[(v_l_id_110451 + (16 * v_MWidthC_1 * v_wg_id_110450) + (v_MWidthC_1 * v_i_110452))]; \n        if (v_index_110551 < 0) {\n          v__110469_0 = v__110467; \n        } else {\n          if (v_index_110551 >= v_VLength_3) {\n            v__110469_0 = v__110467; \n          } else {\n            v__110469_0 = v__110459[v_index_110551]; \n          }\n        }\n        v__110471_0 = mult(v__110469_0, v__110458[(v_l_id_110451 + (16 * v_MWidthC_1 * v_wg_id_110450) + (v_MWidthC_1 * v_i_110452))]); \n        v__110465 = add(v__110471_0, v__110465); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110453 = 0; \n        v__110476[v_l_id_110451] = id(v__110465); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_110454 = get_local_id(0); \n      float v_tmp_110554 = 0.0f; \n      v__105970 = v_tmp_110554; \n      /* reduce_seq */\n      for (int v_i_110455 = 0; v_i_110455 < v_MWidthC_1; v_i_110455 = (1 + v_i_110455)) {\n        v__105970 = add(v__105970, v__110476[(v_i_110455 + (v_MWidthC_1 * v_l_id_110454))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110456 = 0; \n        v__110481[v_wg_id_110450] = doubleMultiplyAdd(v__105970, v__110461, v__110460[v_wg_id_110450], v__110462); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__110457",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110458",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110459",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110460",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110461",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110462",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__110481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__110476",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}