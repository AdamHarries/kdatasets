{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__106379, const global float* restrict v__106380, const global float* restrict v__106381, const global float* restrict v__106382, float v__106383, float v__106384, global float* v__106401, local float* v__106396, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106387; \n  float v__106389; \n  float v__105970; \n  /* Private Memory */\n  float v__106391_0;\n  \n  float v__106393_0;\n  \n  for (int v_wg_id_106372 = get_group_id(0); v_wg_id_106372 < v_MHeight_2; v_wg_id_106372 = (v_wg_id_106372 + get_num_groups(0))) {\n    for (int v_l_id_106373 = get_local_id(0); v_l_id_106373 < v_MWidthC_1; v_l_id_106373 = (v_l_id_106373 + get_local_size(0))) {\n      float v_tmp_106462 = 0.0f; \n      v__106387 = v_tmp_106462; \n      /* reduce_seq */\n      for (int v_i_106374 = 0; v_i_106374 < 8; v_i_106374 = (1 + v_i_106374)) {\n        float v_tmp_106463 = 0.0f; \n        v__106389 = v_tmp_106463; \n        int v_index_106464 = v__106379[(v_l_id_106373 + (8 * v_MWidthC_1 * v_wg_id_106372) + (v_MWidthC_1 * v_i_106374))]; \n        if (v_index_106464 < 0) {\n          v__106391_0 = v__106389; \n        } else {\n          if (v_index_106464 >= v_VLength_3) {\n            v__106391_0 = v__106389; \n          } else {\n            v__106391_0 = v__106381[v_index_106464]; \n          }\n        }\n        v__106393_0 = mult(v__106391_0, v__106380[(v_l_id_106373 + (8 * v_MWidthC_1 * v_wg_id_106372) + (v_MWidthC_1 * v_i_106374))]); \n        v__106387 = add(v__106393_0, v__106387); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106375 = 0; \n        v__106396[v_l_id_106373] = id(v__106387); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8308; \n      v_work_idx_8308 = 0; \n      int v_l_id_106376 = atomic_inc(&(v_work_idx_8308)); \n      while((v_l_id_106376 < 1)){\n        float v_tmp_106467 = 0.0f; \n        v__105970 = v_tmp_106467; \n        /* reduce_seq */\n        for (int v_i_106377 = 0; v_i_106377 < v_MWidthC_1; v_i_106377 = (1 + v_i_106377)) {\n          v__105970 = add(v__105970, v__106396[(v_i_106377 + (v_MWidthC_1 * v_l_id_106376))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_106378 = 0; \n          v__106401[v_wg_id_106372] = doubleMultiplyAdd(v__105970, v__106383, v__106382[v_wg_id_106372], v__106384); \n        }\n        /* end map_seq */\n        v_l_id_106376 = atomic_inc(&(v_work_idx_8308)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__106379",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106380",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106381",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106383",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106384",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__106401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__106396",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}