{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107774, const global float* restrict v__107775, const global float* restrict v__107776, const global float* restrict v__107777, float v__107778, float v__107779, global float* v__107795, global int* v__107781, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107782; \n  float v__107785; \n  /* Private Memory */\n  float v__107787_0;\n  \n  float v__107789_0;\n  \n  int v__107793_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8437 = v__107781; \n    local int v_w_id_107770; \n    if (get_local_id(0) == 0) {\n      v_w_id_107770 = atomic_inc(v_work_idx_8437); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_107770 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_107771 = get_local_id(0); v_l_id_107771 < 8; v_l_id_107771 = (v_l_id_107771 + get_local_size(0))) {\n        float v_tmp_107842 = 0.0f; \n        v__107782 = v_tmp_107842; \n        /* reduce_while_seq */\n        for (int v_i_107772 = 0; v_i_107772 < v_MWidthC_1; v_i_107772 = (1 + v_i_107772)) {\n          v__107793_0 = check(v__107782, v__107774[(v_i_107772 + (8 * v_MWidthC_1 * v_w_id_107770) + (v_MWidthC_1 * v_l_id_107771))]); \n          if (v__107793_0) {\n          } else {\n            break;\n          }\n          float v_tmp_107843 = 0.0f; \n          v__107785 = v_tmp_107843; \n          int v_index_107844 = v__107774[(v_i_107772 + (8 * v_MWidthC_1 * v_w_id_107770) + (v_MWidthC_1 * v_l_id_107771))]; \n          if (v_index_107844 < 0) {\n            v__107787_0 = v__107785; \n          } else {\n            if (v_index_107844 >= v_VLength_3) {\n              v__107787_0 = v__107785; \n            } else {\n              v__107787_0 = v__107776[v_index_107844]; \n            }\n          }\n          v__107789_0 = mult(v__107787_0, v__107775[(v_i_107772 + (8 * v_MWidthC_1 * v_w_id_107770) + (v_MWidthC_1 * v_l_id_107771))]); \n          v__107782 = add(v__107789_0, v__107782); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107773 = 0; \n          v__107795[(v_l_id_107771 + (8 * v_w_id_107770))] = doubleMultiplyAdd(v__107782, v__107778, v__107777[(v_l_id_107771 + (8 * v_w_id_107770))], v__107779); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_107770 = atomic_inc(v_work_idx_8437); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__107774",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107776",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107777",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107778",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107779",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107781",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__107795",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}