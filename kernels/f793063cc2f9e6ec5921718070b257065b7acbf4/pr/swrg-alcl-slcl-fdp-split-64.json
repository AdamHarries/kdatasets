{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120015, const global float* restrict v__120016, const global float* restrict v__120017, const global float* restrict v__120018, float v__120019, float v__120020, global float* v__120037, local float* v__120032, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120023; \n  float v__120025; \n  float v__105970; \n  /* Private Memory */\n  float v__120027_0;\n  \n  float v__120029_0;\n  \n  for (int v_wg_id_120008 = get_group_id(0); v_wg_id_120008 < v_MHeight_2; v_wg_id_120008 = (v_wg_id_120008 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9529; \n      v_work_idx_9529 = 0; \n      int v_l_id_120009 = atomic_inc(&(v_work_idx_9529)); \n      while((v_l_id_120009 < v_MWidthC_1)){\n        float v_tmp_120094 = 0.0f; \n        v__120023 = v_tmp_120094; \n        /* reduce_seq */\n        for (int v_i_120010 = 0; v_i_120010 < 64; v_i_120010 = (1 + v_i_120010)) {\n          float v_tmp_120095 = 0.0f; \n          v__120025 = v_tmp_120095; \n          int v_index_120096 = v__120015[(v_l_id_120009 + (64 * v_MWidthC_1 * v_wg_id_120008) + (v_MWidthC_1 * v_i_120010))]; \n          if (v_index_120096 < 0) {\n            v__120027_0 = v__120025; \n          } else {\n            if (v_index_120096 >= v_VLength_3) {\n              v__120027_0 = v__120025; \n            } else {\n              v__120027_0 = v__120017[v_index_120096]; \n            }\n          }\n          v__120029_0 = mult(v__120027_0, v__120016[(v_l_id_120009 + (64 * v_MWidthC_1 * v_wg_id_120008) + (v_MWidthC_1 * v_i_120010))]); \n          v__120023 = add(v__120029_0, v__120023); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120011 = 0; \n          v__120032[v_l_id_120009] = id(v__120023); \n        }\n        /* end map_seq */\n        v_l_id_120009 = atomic_inc(&(v_work_idx_9529)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_120012 = get_local_id(0); \n      float v_tmp_120099 = 0.0f; \n      v__105970 = v_tmp_120099; \n      /* reduce_seq */\n      for (int v_i_120013 = 0; v_i_120013 < v_MWidthC_1; v_i_120013 = (1 + v_i_120013)) {\n        v__105970 = add(v__105970, v__120032[(v_i_120013 + (v_MWidthC_1 * v_l_id_120012))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_120014 = 0; \n        v__120037[v_wg_id_120008] = doubleMultiplyAdd(v__105970, v__120019, v__120018[v_wg_id_120008], v__120020); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__120015",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120016",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120017",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120019",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120020",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__120037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__120032",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}