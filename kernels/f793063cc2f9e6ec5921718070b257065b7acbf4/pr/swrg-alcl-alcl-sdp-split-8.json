{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107341, const global float* restrict v__107342, const global float* restrict v__107343, const global float* restrict v__107344, float v__107345, float v__107346, global float* v__107363, global float* v__107353, local float* v__107358, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107349; \n  float v__107354; \n  float v__105970; \n  /* Private Memory */\n  float v__107351_0;\n  \n  for (int v_wg_id_107333 = get_group_id(0); v_wg_id_107333 < v_MHeight_2; v_wg_id_107333 = (v_wg_id_107333 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8397; \n      v_work_idx_8397 = 0; \n      int v_l_id_107334 = atomic_inc(&(v_work_idx_8397)); \n      while((v_l_id_107334 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_107335 = 0; v_i_107335 < 8; v_i_107335 = (1 + v_i_107335)) {\n          float v_tmp_107416 = 0.0f; \n          v__107349 = v_tmp_107416; \n          int v_index_107417 = v__107341[(v_l_id_107334 + (8 * v_MWidthC_1 * v_wg_id_107333) + (v_MWidthC_1 * v_i_107335))]; \n          if (v_index_107417 < 0) {\n            v__107351_0 = v__107349; \n          } else {\n            if (v_index_107417 >= v_VLength_3) {\n              v__107351_0 = v__107349; \n            } else {\n              v__107351_0 = v__107343[v_index_107417]; \n            }\n          }\n          v__107353[(7 + (8 * v_MWidthC_1 * v_wg_id_107333) + (-1 * v_i_107335) + (8 * v_l_id_107334))] = mult(v__107351_0, v__107342[(v_l_id_107334 + (8 * v_MWidthC_1 * v_wg_id_107333) + (v_MWidthC_1 * v_i_107335))]); \n        }\n        /* end map_seq */\n        float v_tmp_107418 = 0.0f; \n        v__107354 = v_tmp_107418; \n        /* reduce_seq */\n        for (int v_i_107336 = 0; v_i_107336 < 8; v_i_107336 = (1 + v_i_107336)) {\n          v__107354 = add(v__107354, v__107353[(v_i_107336 + (8 * v_MWidthC_1 * v_wg_id_107333) + (8 * v_l_id_107334))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107337 = 0; \n          v__107358[v_l_id_107334] = id(v__107354); \n        }\n        /* end map_seq */\n        v_l_id_107334 = atomic_inc(&(v_work_idx_8397)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8391; \n      v_work_idx_8391 = 0; \n      int v_l_id_107338 = atomic_inc(&(v_work_idx_8391)); \n      while((v_l_id_107338 < 1)){\n        float v_tmp_107421 = 0.0f; \n        v__105970 = v_tmp_107421; \n        /* reduce_seq */\n        for (int v_i_107339 = 0; v_i_107339 < v_MWidthC_1; v_i_107339 = (1 + v_i_107339)) {\n          v__105970 = add(v__105970, v__107358[(v_i_107339 + (v_MWidthC_1 * v_l_id_107338))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107340 = 0; \n          v__107363[v_wg_id_107333] = doubleMultiplyAdd(v__105970, v__107345, v__107344[v_wg_id_107333], v__107346); \n        }\n        /* end map_seq */\n        v_l_id_107338 = atomic_inc(&(v_work_idx_8391)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__107341",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107342",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107343",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107345",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107346",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107353",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__107363",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107358",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}