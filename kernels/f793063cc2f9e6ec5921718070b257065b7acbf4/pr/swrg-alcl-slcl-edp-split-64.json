{
  "name" : "swrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120113, const global float* restrict v__120114, const global float* restrict v__120115, const global float* restrict v__120116, float v__120117, float v__120118, global float* v__120137, local float* v__120132, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120121; \n  float v__120123; \n  float v__105970; \n  /* Private Memory */\n  float v__120125_0;\n  \n  float v__120127_0;\n  \n  int v__120131_0;\n  \n  for (int v_wg_id_120106 = get_group_id(0); v_wg_id_120106 < v_MHeight_2; v_wg_id_120106 = (v_wg_id_120106 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9538; \n      v_work_idx_9538 = 0; \n      int v_l_id_120107 = atomic_inc(&(v_work_idx_9538)); \n      while((v_l_id_120107 < v_MWidthC_1)){\n        float v_tmp_120197 = 0.0f; \n        v__120121 = v_tmp_120197; \n        /* reduce_while_seq */\n        for (int v_i_120108 = 0; v_i_120108 < 64; v_i_120108 = (1 + v_i_120108)) {\n          v__120131_0 = check(v__120121, v__120113[(v_l_id_120107 + (64 * v_MWidthC_1 * v_wg_id_120106) + (v_MWidthC_1 * v_i_120108))]); \n          if (v__120131_0) {\n          } else {\n            break;\n          }\n          float v_tmp_120198 = 0.0f; \n          v__120123 = v_tmp_120198; \n          int v_index_120199 = v__120113[(v_l_id_120107 + (64 * v_MWidthC_1 * v_wg_id_120106) + (v_MWidthC_1 * v_i_120108))]; \n          if (v_index_120199 < 0) {\n            v__120125_0 = v__120123; \n          } else {\n            if (v_index_120199 >= v_VLength_3) {\n              v__120125_0 = v__120123; \n            } else {\n              v__120125_0 = v__120115[v_index_120199]; \n            }\n          }\n          v__120127_0 = mult(v__120125_0, v__120114[(v_l_id_120107 + (64 * v_MWidthC_1 * v_wg_id_120106) + (v_MWidthC_1 * v_i_120108))]); \n          v__120121 = add(v__120127_0, v__120121); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120109 = 0; \n          v__120132[v_l_id_120107] = id(v__120121); \n        }\n        /* end map_seq */\n        v_l_id_120107 = atomic_inc(&(v_work_idx_9538)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_120110 = get_local_id(0); \n      float v_tmp_120202 = 0.0f; \n      v__105970 = v_tmp_120202; \n      /* reduce_seq */\n      for (int v_i_120111 = 0; v_i_120111 < v_MWidthC_1; v_i_120111 = (1 + v_i_120111)) {\n        v__105970 = add(v__105970, v__120132[(v_i_120111 + (v_MWidthC_1 * v_l_id_120110))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_120112 = 0; \n        v__120137[v_wg_id_120106] = doubleMultiplyAdd(v__105970, v__120117, v__120116[v_wg_id_120106], v__120118); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__120113",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120114",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120115",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120117",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120118",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__120137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__120132",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}