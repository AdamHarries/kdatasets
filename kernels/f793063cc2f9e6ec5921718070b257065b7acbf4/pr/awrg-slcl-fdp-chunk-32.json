{
  "name" : "awrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116285, const global float* restrict v__116286, const global float* restrict v__116287, const global float* restrict v__116288, float v__116289, float v__116290, global float* v__116304, global int* v__116292, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116294; \n  float v__116296; \n  /* Private Memory */\n  float v__116298_0;\n  \n  float v__116300_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9199 = v__116292; \n    local int v_w_id_116281; \n    if (get_local_id(0) == 0) {\n      v_w_id_116281 = atomic_inc(v_work_idx_9199); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_116281 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_116282 = get_local_id(0); v_l_id_116282 < 32; v_l_id_116282 = (v_l_id_116282 + get_local_size(0))) {\n        float v_tmp_116345 = 0.0f; \n        v__116294 = v_tmp_116345; \n        /* reduce_seq */\n        for (int v_i_116283 = 0; v_i_116283 < v_MWidthC_1; v_i_116283 = (1 + v_i_116283)) {\n          float v_tmp_116346 = 0.0f; \n          v__116296 = v_tmp_116346; \n          int v_index_116347 = v__116285[(v_i_116283 + (32 * v_MWidthC_1 * v_w_id_116281) + (v_MWidthC_1 * v_l_id_116282))]; \n          if (v_index_116347 < 0) {\n            v__116298_0 = v__116296; \n          } else {\n            if (v_index_116347 >= v_VLength_3) {\n              v__116298_0 = v__116296; \n            } else {\n              v__116298_0 = v__116287[v_index_116347]; \n            }\n          }\n          v__116300_0 = mult(v__116298_0, v__116286[(v_i_116283 + (32 * v_MWidthC_1 * v_w_id_116281) + (v_MWidthC_1 * v_l_id_116282))]); \n          v__116294 = add(v__116300_0, v__116294); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116284 = 0; \n          v__116304[(v_l_id_116282 + (32 * v_w_id_116281))] = doubleMultiplyAdd(v__116294, v__116289, v__116288[(v_l_id_116282 + (32 * v_w_id_116281))], v__116290); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_116281 = atomic_inc(v_work_idx_9199); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__116285",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116286",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116287",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116288",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116289",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116290",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__116292",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__116304",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}