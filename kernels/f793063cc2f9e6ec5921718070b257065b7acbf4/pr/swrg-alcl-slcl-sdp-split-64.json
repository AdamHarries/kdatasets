{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__119917, const global float* restrict v__119918, const global float* restrict v__119919, const global float* restrict v__119920, float v__119921, float v__119922, global float* v__119939, global float* v__119929, local float* v__119934, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__119925; \n  float v__119930; \n  float v__105970; \n  /* Private Memory */\n  float v__119927_0;\n  \n  for (int v_wg_id_119909 = get_group_id(0); v_wg_id_119909 < v_MHeight_2; v_wg_id_119909 = (v_wg_id_119909 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9520; \n      v_work_idx_9520 = 0; \n      int v_l_id_119910 = atomic_inc(&(v_work_idx_9520)); \n      while((v_l_id_119910 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_119911 = 0; v_i_119911 < 64; v_i_119911 = (1 + v_i_119911)) {\n          float v_tmp_119996 = 0.0f; \n          v__119925 = v_tmp_119996; \n          int v_index_119997 = v__119917[(v_l_id_119910 + (64 * v_MWidthC_1 * v_wg_id_119909) + (v_MWidthC_1 * v_i_119911))]; \n          if (v_index_119997 < 0) {\n            v__119927_0 = v__119925; \n          } else {\n            if (v_index_119997 >= v_VLength_3) {\n              v__119927_0 = v__119925; \n            } else {\n              v__119927_0 = v__119919[v_index_119997]; \n            }\n          }\n          v__119929[(63 + (64 * v_MWidthC_1 * v_wg_id_119909) + (-1 * v_i_119911) + (64 * v_l_id_119910))] = mult(v__119927_0, v__119918[(v_l_id_119910 + (64 * v_MWidthC_1 * v_wg_id_119909) + (v_MWidthC_1 * v_i_119911))]); \n        }\n        /* end map_seq */\n        float v_tmp_119998 = 0.0f; \n        v__119930 = v_tmp_119998; \n        /* reduce_seq */\n        for (int v_i_119912 = 0; v_i_119912 < 64; v_i_119912 = (1 + v_i_119912)) {\n          v__119930 = add(v__119930, v__119929[(v_i_119912 + (64 * v_MWidthC_1 * v_wg_id_119909) + (64 * v_l_id_119910))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_119913 = 0; \n          v__119934[v_l_id_119910] = id(v__119930); \n        }\n        /* end map_seq */\n        v_l_id_119910 = atomic_inc(&(v_work_idx_9520)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_119914 = get_local_id(0); \n      float v_tmp_120001 = 0.0f; \n      v__105970 = v_tmp_120001; \n      /* reduce_seq */\n      for (int v_i_119915 = 0; v_i_119915 < v_MWidthC_1; v_i_119915 = (1 + v_i_119915)) {\n        v__105970 = add(v__105970, v__119934[(v_i_119915 + (v_MWidthC_1 * v_l_id_119914))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_119916 = 0; \n        v__119939[v_wg_id_119909] = doubleMultiplyAdd(v__105970, v__119921, v__119920[v_wg_id_119909], v__119922); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__119917",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119918",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119919",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__119920",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__119921",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__119922",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__119929",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__119939",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__119934",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}