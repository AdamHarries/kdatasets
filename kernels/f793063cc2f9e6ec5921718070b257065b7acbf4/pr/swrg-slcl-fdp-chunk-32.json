{
  "name" : "swrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__114133, const global float* restrict v__114134, const global float* restrict v__114135, const global float* restrict v__114136, float v__114137, float v__114138, global float* v__114151, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__114141; \n  float v__114143; \n  /* Private Memory */\n  float v__114145_0;\n  \n  float v__114147_0;\n  \n  for (int v_wg_id_114129 = get_group_id(0); v_wg_id_114129 < ((v_MHeight_2)/(32)); v_wg_id_114129 = (v_wg_id_114129 + get_num_groups(0))) {\n    for (int v_l_id_114130 = get_local_id(0); v_l_id_114130 < 32; v_l_id_114130 = (v_l_id_114130 + get_local_size(0))) {\n      float v_tmp_114193 = 0.0f; \n      v__114141 = v_tmp_114193; \n      /* reduce_seq */\n      for (int v_i_114131 = 0; v_i_114131 < v_MWidthC_1; v_i_114131 = (1 + v_i_114131)) {\n        float v_tmp_114194 = 0.0f; \n        v__114143 = v_tmp_114194; \n        int v_index_114195 = v__114133[(v_i_114131 + (32 * v_MWidthC_1 * v_wg_id_114129) + (v_MWidthC_1 * v_l_id_114130))]; \n        if (v_index_114195 < 0) {\n          v__114145_0 = v__114143; \n        } else {\n          if (v_index_114195 >= v_VLength_3) {\n            v__114145_0 = v__114143; \n          } else {\n            v__114145_0 = v__114135[v_index_114195]; \n          }\n        }\n        v__114147_0 = mult(v__114145_0, v__114134[(v_i_114131 + (32 * v_MWidthC_1 * v_wg_id_114129) + (v_MWidthC_1 * v_l_id_114130))]); \n        v__114141 = add(v__114147_0, v__114141); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114132 = 0; \n        v__114151[(v_l_id_114130 + (32 * v_wg_id_114129))] = doubleMultiplyAdd(v__114141, v__114137, v__114136[(v_l_id_114130 + (32 * v_wg_id_114129))], v__114138); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__114133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114135",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__114136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__114137",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__114138",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__114151",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}