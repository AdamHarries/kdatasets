{
  "name" : "swrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__127941, const global float* restrict v__127942, const global float* restrict v__127943, const global float* restrict v__127944, float v__127945, float v__127946, global float* v__127965, local float* v__127960, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__127949; \n  float v__127951; \n  float v__105970; \n  /* Private Memory */\n  float v__127953_0;\n  \n  float v__127955_0;\n  \n  int v__127959_0;\n  \n  for (int v_wg_id_127934 = get_group_id(0); v_wg_id_127934 < v_MHeight_2; v_wg_id_127934 = (v_wg_id_127934 + get_num_groups(0))) {\n    for (int v_l_id_127935 = get_local_id(0); v_l_id_127935 < v_MWidthC_1; v_l_id_127935 = (v_l_id_127935 + get_local_size(0))) {\n      float v_tmp_128029 = 0.0f; \n      v__127949 = v_tmp_128029; \n      /* reduce_while_seq */\n      for (int v_i_127936 = 0; v_i_127936 < 256; v_i_127936 = (1 + v_i_127936)) {\n        v__127959_0 = check(v__127949, v__127941[(v_l_id_127935 + (256 * v_MWidthC_1 * v_wg_id_127934) + (v_MWidthC_1 * v_i_127936))]); \n        if (v__127959_0) {\n        } else {\n          break;\n        }\n        float v_tmp_128030 = 0.0f; \n        v__127951 = v_tmp_128030; \n        int v_index_128031 = v__127941[(v_l_id_127935 + (256 * v_MWidthC_1 * v_wg_id_127934) + (v_MWidthC_1 * v_i_127936))]; \n        if (v_index_128031 < 0) {\n          v__127953_0 = v__127951; \n        } else {\n          if (v_index_128031 >= v_VLength_3) {\n            v__127953_0 = v__127951; \n          } else {\n            v__127953_0 = v__127943[v_index_128031]; \n          }\n        }\n        v__127955_0 = mult(v__127953_0, v__127942[(v_l_id_127935 + (256 * v_MWidthC_1 * v_wg_id_127934) + (v_MWidthC_1 * v_i_127936))]); \n        v__127949 = add(v__127955_0, v__127949); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_127937 = 0; \n        v__127960[v_l_id_127935] = id(v__127949); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10237; \n      v_work_idx_10237 = 0; \n      int v_l_id_127938 = atomic_inc(&(v_work_idx_10237)); \n      while((v_l_id_127938 < 1)){\n        float v_tmp_128034 = 0.0f; \n        v__105970 = v_tmp_128034; \n        /* reduce_seq */\n        for (int v_i_127939 = 0; v_i_127939 < v_MWidthC_1; v_i_127939 = (1 + v_i_127939)) {\n          v__105970 = add(v__105970, v__127960[(v_i_127939 + (v_MWidthC_1 * v_l_id_127938))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_127940 = 0; \n          v__127965[v_wg_id_127934] = doubleMultiplyAdd(v__105970, v__127945, v__127944[v_wg_id_127934], v__127946); \n        }\n        /* end map_seq */\n        v_l_id_127938 = atomic_inc(&(v_work_idx_10237)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__127941",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127942",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127943",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__127944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__127945",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__127946",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__127965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__127960",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}