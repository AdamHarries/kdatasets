{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__119462, const global float* restrict v__119463, const global float* restrict v__119464, const global float* restrict v__119465, float v__119466, float v__119467, global float* v__119480, global float* v__119474, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__119470; \n  float v__119475; \n  /* Private Memory */\n  float v__119472_0;\n  \n  for (int v_wg_id_119457 = get_group_id(0); v_wg_id_119457 < ((v_MHeight_2)/(64)); v_wg_id_119457 = (v_wg_id_119457 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9480; \n      v_work_idx_9480 = 0; \n      int v_l_id_119458 = atomic_inc(&(v_work_idx_9480)); \n      while((v_l_id_119458 < 64)){\n        /* map_seq */\n        for (int v_i_119459 = 0; v_i_119459 < v_MWidthC_1; v_i_119459 = (1 + v_i_119459)) {\n          float v_tmp_119520 = 0.0f; \n          v__119470 = v_tmp_119520; \n          int v_index_119521 = v__119462[(v_i_119459 + (64 * v_MWidthC_1 * v_wg_id_119457) + (v_MWidthC_1 * v_l_id_119458))]; \n          if (v_index_119521 < 0) {\n            v__119472_0 = v__119470; \n          } else {\n            if (v_index_119521 >= v_VLength_3) {\n              v__119472_0 = v__119470; \n            } else {\n              v__119472_0 = v__119464[v_index_119521]; \n            }\n          }\n          v__119474[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_119457) + (-1 * v_i_119459) + (v_MWidthC_1 * v_l_id_119458))] = mult(v__119472_0, v__119463[(v_i_119459 + (64 * v_MWidthC_1 * v_wg_id_119457) + (v_MWidthC_1 * v_l_id_119458))]); \n        }\n        /* end map_seq */\n        float v_tmp_119522 = 0.0f; \n        v__119475 = v_tmp_119522; \n        /* reduce_seq */\n        for (int v_i_119460 = 0; v_i_119460 < v_MWidthC_1; v_i_119460 = (1 + v_i_119460)) {\n          v__119475 = add(v__119475, v__119474[(v_i_119460 + (64 * v_MWidthC_1 * v_wg_id_119457) + (v_MWidthC_1 * v_l_id_119458))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_119461 = 0; \n          v__119480[(v_l_id_119458 + (64 * v_wg_id_119457))] = doubleMultiplyAdd(v__119475, v__119466, v__119465[(v_l_id_119458 + (64 * v_wg_id_119457))], v__119467); \n        }\n        /* end map_seq */\n        v_l_id_119458 = atomic_inc(&(v_work_idx_9480)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__119462",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119464",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__119465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__119466",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__119467",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__119474",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__119480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}