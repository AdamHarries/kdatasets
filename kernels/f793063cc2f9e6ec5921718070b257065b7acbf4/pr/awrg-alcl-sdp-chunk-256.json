{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130192, const global float* restrict v__130193, const global float* restrict v__130194, const global float* restrict v__130195, float v__130196, float v__130197, global float* v__130211, global float* v__130205, global int* v__130199, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130201; \n  float v__130206; \n  /* Private Memory */\n  float v__130203_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10442 = v__130199; \n    local int v_w_id_130187; \n    if (get_local_id(0) == 0) {\n      v_w_id_130187 = atomic_inc(v_work_idx_10442); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130187 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10440; \n        v_work_idx_10440 = 0; \n        int v_l_id_130188 = atomic_inc(&(v_work_idx_10440)); \n        while((v_l_id_130188 < 256)){\n          /* map_seq */\n          for (int v_i_130189 = 0; v_i_130189 < v_MWidthC_1; v_i_130189 = (1 + v_i_130189)) {\n            float v_tmp_130250 = 0.0f; \n            v__130201 = v_tmp_130250; \n            int v_index_130251 = v__130192[(v_i_130189 + (256 * v_MWidthC_1 * v_w_id_130187) + (v_MWidthC_1 * v_l_id_130188))]; \n            if (v_index_130251 < 0) {\n              v__130203_0 = v__130201; \n            } else {\n              if (v_index_130251 >= v_VLength_3) {\n                v__130203_0 = v__130201; \n              } else {\n                v__130203_0 = v__130194[v_index_130251]; \n              }\n            }\n            v__130205[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_130187) + (-1 * v_i_130189) + (v_MWidthC_1 * v_l_id_130188))] = mult(v__130203_0, v__130193[(v_i_130189 + (256 * v_MWidthC_1 * v_w_id_130187) + (v_MWidthC_1 * v_l_id_130188))]); \n          }\n          /* end map_seq */\n          float v_tmp_130252 = 0.0f; \n          v__130206 = v_tmp_130252; \n          /* reduce_seq */\n          for (int v_i_130190 = 0; v_i_130190 < v_MWidthC_1; v_i_130190 = (1 + v_i_130190)) {\n            v__130206 = add(v__130206, v__130205[(v_i_130190 + (256 * v_MWidthC_1 * v_w_id_130187) + (v_MWidthC_1 * v_l_id_130188))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130191 = 0; \n            v__130211[(v_l_id_130188 + (256 * v_w_id_130187))] = doubleMultiplyAdd(v__130206, v__130196, v__130195[(v_l_id_130188 + (256 * v_w_id_130187))], v__130197); \n          }\n          /* end map_seq */\n          v_l_id_130188 = atomic_inc(&(v_work_idx_10440)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130187 = atomic_inc(v_work_idx_10442); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__130192",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130194",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130196",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130197",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130199",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}