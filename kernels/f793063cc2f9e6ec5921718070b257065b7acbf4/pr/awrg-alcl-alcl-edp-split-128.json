{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126838, const global float* restrict v__126839, const global float* restrict v__126840, const global float* restrict v__126841, float v__126842, float v__126843, global float* v__126863, global int* v__126845, local float* v__126858, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126847; \n  float v__126849; \n  float v__105970; \n  /* Private Memory */\n  float v__126851_0;\n  \n  float v__126853_0;\n  \n  int v__126857_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10158 = v__126845; \n    local int v_w_id_126831; \n    if (get_local_id(0) == 0) {\n      v_w_id_126831 = atomic_inc(v_work_idx_10158); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126831 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10156; \n        v_work_idx_10156 = 0; \n        int v_l_id_126832 = atomic_inc(&(v_work_idx_10156)); \n        while((v_l_id_126832 < v_MWidthC_1)){\n          float v_tmp_126917 = 0.0f; \n          v__126847 = v_tmp_126917; \n          /* reduce_while_seq */\n          for (int v_i_126833 = 0; v_i_126833 < 128; v_i_126833 = (1 + v_i_126833)) {\n            v__126857_0 = check(v__126847, v__126838[(v_l_id_126832 + (128 * v_MWidthC_1 * v_w_id_126831) + (v_MWidthC_1 * v_i_126833))]); \n            if (v__126857_0) {\n            } else {\n              break;\n            }\n            float v_tmp_126918 = 0.0f; \n            v__126849 = v_tmp_126918; \n            int v_index_126919 = v__126838[(v_l_id_126832 + (128 * v_MWidthC_1 * v_w_id_126831) + (v_MWidthC_1 * v_i_126833))]; \n            if (v_index_126919 < 0) {\n              v__126851_0 = v__126849; \n            } else {\n              if (v_index_126919 >= v_VLength_3) {\n                v__126851_0 = v__126849; \n              } else {\n                v__126851_0 = v__126840[v_index_126919]; \n              }\n            }\n            v__126853_0 = mult(v__126851_0, v__126839[(v_l_id_126832 + (128 * v_MWidthC_1 * v_w_id_126831) + (v_MWidthC_1 * v_i_126833))]); \n            v__126847 = add(v__126853_0, v__126847); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126834 = 0; \n            v__126858[v_l_id_126832] = id(v__126847); \n          }\n          /* end map_seq */\n          v_l_id_126832 = atomic_inc(&(v_work_idx_10156)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10151; \n        v_work_idx_10151 = 0; \n        int v_l_id_126835 = atomic_inc(&(v_work_idx_10151)); \n        while((v_l_id_126835 < 1)){\n          float v_tmp_126922 = 0.0f; \n          v__105970 = v_tmp_126922; \n          /* reduce_seq */\n          for (int v_i_126836 = 0; v_i_126836 < v_MWidthC_1; v_i_126836 = (1 + v_i_126836)) {\n            v__105970 = add(v__105970, v__126858[(v_i_126836 + (v_MWidthC_1 * v_l_id_126835))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126837 = 0; \n            v__126863[v_w_id_126831] = doubleMultiplyAdd(v__105970, v__126842, v__126841[v_w_id_126831], v__126843); \n          }\n          /* end map_seq */\n          v_l_id_126835 = atomic_inc(&(v_work_idx_10151)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126831 = atomic_inc(v_work_idx_10158); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__126838",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126839",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126840",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126841",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126842",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126843",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126845",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126863",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__126858",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}