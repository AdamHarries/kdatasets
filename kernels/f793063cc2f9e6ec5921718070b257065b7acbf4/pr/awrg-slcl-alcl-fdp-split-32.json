{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117111, const global float* restrict v__117112, const global float* restrict v__117113, const global float* restrict v__117114, float v__117115, float v__117116, global float* v__117134, global int* v__117118, local float* v__117129, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117120; \n  float v__117122; \n  float v__105970; \n  /* Private Memory */\n  float v__117124_0;\n  \n  float v__117126_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9272 = v__117118; \n    local int v_w_id_117104; \n    if (get_local_id(0) == 0) {\n      v_w_id_117104 = atomic_inc(v_work_idx_9272); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117104 < v_MHeight_2)){\n      for (int v_l_id_117105 = get_local_id(0); v_l_id_117105 < v_MWidthC_1; v_l_id_117105 = (v_l_id_117105 + get_local_size(0))) {\n        float v_tmp_117193 = 0.0f; \n        v__117120 = v_tmp_117193; \n        /* reduce_seq */\n        for (int v_i_117106 = 0; v_i_117106 < 32; v_i_117106 = (1 + v_i_117106)) {\n          float v_tmp_117194 = 0.0f; \n          v__117122 = v_tmp_117194; \n          int v_index_117195 = v__117111[(v_l_id_117105 + (32 * v_MWidthC_1 * v_w_id_117104) + (v_MWidthC_1 * v_i_117106))]; \n          if (v_index_117195 < 0) {\n            v__117124_0 = v__117122; \n          } else {\n            if (v_index_117195 >= v_VLength_3) {\n              v__117124_0 = v__117122; \n            } else {\n              v__117124_0 = v__117113[v_index_117195]; \n            }\n          }\n          v__117126_0 = mult(v__117124_0, v__117112[(v_l_id_117105 + (32 * v_MWidthC_1 * v_w_id_117104) + (v_MWidthC_1 * v_i_117106))]); \n          v__117120 = add(v__117126_0, v__117120); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_117107 = 0; \n          v__117129[v_l_id_117105] = id(v__117120); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9266; \n        v_work_idx_9266 = 0; \n        int v_l_id_117108 = atomic_inc(&(v_work_idx_9266)); \n        while((v_l_id_117108 < 1)){\n          float v_tmp_117198 = 0.0f; \n          v__105970 = v_tmp_117198; \n          /* reduce_seq */\n          for (int v_i_117109 = 0; v_i_117109 < v_MWidthC_1; v_i_117109 = (1 + v_i_117109)) {\n            v__105970 = add(v__105970, v__117129[(v_i_117109 + (v_MWidthC_1 * v_l_id_117108))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117110 = 0; \n            v__117134[v_w_id_117104] = doubleMultiplyAdd(v__105970, v__117115, v__117114[v_w_id_117104], v__117116); \n          }\n          /* end map_seq */\n          v_l_id_117108 = atomic_inc(&(v_work_idx_9266)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117104 = atomic_inc(v_work_idx_9272); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__117111",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117112",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117113",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117114",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117115",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117116",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117118",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__117129",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}