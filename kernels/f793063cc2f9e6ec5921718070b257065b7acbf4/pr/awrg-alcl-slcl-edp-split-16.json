{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113673, const global float* restrict v__113674, const global float* restrict v__113675, const global float* restrict v__113676, float v__113677, float v__113678, global float* v__113698, global int* v__113680, local float* v__113693, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113682; \n  float v__113684; \n  float v__105970; \n  /* Private Memory */\n  float v__113686_0;\n  \n  float v__113688_0;\n  \n  int v__113692_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8972 = v__113680; \n    local int v_w_id_113666; \n    if (get_local_id(0) == 0) {\n      v_w_id_113666 = atomic_inc(v_work_idx_8972); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113666 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8970; \n        v_work_idx_8970 = 0; \n        int v_l_id_113667 = atomic_inc(&(v_work_idx_8970)); \n        while((v_l_id_113667 < v_MWidthC_1)){\n          float v_tmp_113756 = 0.0f; \n          v__113682 = v_tmp_113756; \n          /* reduce_while_seq */\n          for (int v_i_113668 = 0; v_i_113668 < 16; v_i_113668 = (1 + v_i_113668)) {\n            v__113692_0 = check(v__113682, v__113673[(v_l_id_113667 + (16 * v_MWidthC_1 * v_w_id_113666) + (v_MWidthC_1 * v_i_113668))]); \n            if (v__113692_0) {\n            } else {\n              break;\n            }\n            float v_tmp_113757 = 0.0f; \n            v__113684 = v_tmp_113757; \n            int v_index_113758 = v__113673[(v_l_id_113667 + (16 * v_MWidthC_1 * v_w_id_113666) + (v_MWidthC_1 * v_i_113668))]; \n            if (v_index_113758 < 0) {\n              v__113686_0 = v__113684; \n            } else {\n              if (v_index_113758 >= v_VLength_3) {\n                v__113686_0 = v__113684; \n              } else {\n                v__113686_0 = v__113675[v_index_113758]; \n              }\n            }\n            v__113688_0 = mult(v__113686_0, v__113674[(v_l_id_113667 + (16 * v_MWidthC_1 * v_w_id_113666) + (v_MWidthC_1 * v_i_113668))]); \n            v__113682 = add(v__113688_0, v__113682); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113669 = 0; \n            v__113693[v_l_id_113667] = id(v__113682); \n          }\n          /* end map_seq */\n          v_l_id_113667 = atomic_inc(&(v_work_idx_8970)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_113670 = get_local_id(0); \n        float v_tmp_113761 = 0.0f; \n        v__105970 = v_tmp_113761; \n        /* reduce_seq */\n        for (int v_i_113671 = 0; v_i_113671 < v_MWidthC_1; v_i_113671 = (1 + v_i_113671)) {\n          v__105970 = add(v__105970, v__113693[(v_i_113671 + (v_MWidthC_1 * v_l_id_113670))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_113672 = 0; \n          v__113698[v_w_id_113666] = doubleMultiplyAdd(v__105970, v__113677, v__113676[v_w_id_113666], v__113678); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113666 = atomic_inc(v_work_idx_8972); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__113673",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113674",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113675",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113677",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113678",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113680",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113698",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__113693",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}