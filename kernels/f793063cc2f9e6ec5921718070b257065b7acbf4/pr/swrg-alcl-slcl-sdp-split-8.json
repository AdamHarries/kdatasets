{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107041, const global float* restrict v__107042, const global float* restrict v__107043, const global float* restrict v__107044, float v__107045, float v__107046, global float* v__107063, global float* v__107053, local float* v__107058, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107049; \n  float v__107054; \n  float v__105970; \n  /* Private Memory */\n  float v__107051_0;\n  \n  for (int v_wg_id_107033 = get_group_id(0); v_wg_id_107033 < v_MHeight_2; v_wg_id_107033 = (v_wg_id_107033 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8368; \n      v_work_idx_8368 = 0; \n      int v_l_id_107034 = atomic_inc(&(v_work_idx_8368)); \n      while((v_l_id_107034 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_107035 = 0; v_i_107035 < 8; v_i_107035 = (1 + v_i_107035)) {\n          float v_tmp_107120 = 0.0f; \n          v__107049 = v_tmp_107120; \n          int v_index_107121 = v__107041[(v_l_id_107034 + (8 * v_MWidthC_1 * v_wg_id_107033) + (v_MWidthC_1 * v_i_107035))]; \n          if (v_index_107121 < 0) {\n            v__107051_0 = v__107049; \n          } else {\n            if (v_index_107121 >= v_VLength_3) {\n              v__107051_0 = v__107049; \n            } else {\n              v__107051_0 = v__107043[v_index_107121]; \n            }\n          }\n          v__107053[(7 + (8 * v_MWidthC_1 * v_wg_id_107033) + (-1 * v_i_107035) + (8 * v_l_id_107034))] = mult(v__107051_0, v__107042[(v_l_id_107034 + (8 * v_MWidthC_1 * v_wg_id_107033) + (v_MWidthC_1 * v_i_107035))]); \n        }\n        /* end map_seq */\n        float v_tmp_107122 = 0.0f; \n        v__107054 = v_tmp_107122; \n        /* reduce_seq */\n        for (int v_i_107036 = 0; v_i_107036 < 8; v_i_107036 = (1 + v_i_107036)) {\n          v__107054 = add(v__107054, v__107053[(v_i_107036 + (8 * v_MWidthC_1 * v_wg_id_107033) + (8 * v_l_id_107034))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107037 = 0; \n          v__107058[v_l_id_107034] = id(v__107054); \n        }\n        /* end map_seq */\n        v_l_id_107034 = atomic_inc(&(v_work_idx_8368)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_107038 = get_local_id(0); \n      float v_tmp_107125 = 0.0f; \n      v__105970 = v_tmp_107125; \n      /* reduce_seq */\n      for (int v_i_107039 = 0; v_i_107039 < v_MWidthC_1; v_i_107039 = (1 + v_i_107039)) {\n        v__105970 = add(v__105970, v__107058[(v_i_107039 + (v_MWidthC_1 * v_l_id_107038))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_107040 = 0; \n        v__107063[v_wg_id_107033] = doubleMultiplyAdd(v__105970, v__107045, v__107044[v_wg_id_107033], v__107046); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__107041",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107042",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107043",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107044",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107045",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107046",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107053",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__107063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107058",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}