{
  "name" : "swrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__123227, const global float* restrict v__123228, const global float* restrict v__123229, const global float* restrict v__123230, float v__123231, float v__123232, global float* v__123249, local float* v__123244, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123235; \n  float v__123237; \n  float v__105970; \n  /* Private Memory */\n  float v__123239_0;\n  \n  float v__123241_0;\n  \n  for (int v_wg_id_123220 = get_group_id(0); v_wg_id_123220 < v_MHeight_2; v_wg_id_123220 = (v_wg_id_123220 + get_num_groups(0))) {\n    for (int v_l_id_123221 = get_local_id(0); v_l_id_123221 < v_MWidthC_1; v_l_id_123221 = (v_l_id_123221 + get_local_size(0))) {\n      float v_tmp_123314 = 0.0f; \n      v__123235 = v_tmp_123314; \n      /* reduce_seq */\n      for (int v_i_123222 = 0; v_i_123222 < 128; v_i_123222 = (1 + v_i_123222)) {\n        float v_tmp_123315 = 0.0f; \n        v__123237 = v_tmp_123315; \n        int v_index_123316 = v__123227[(v_l_id_123221 + (128 * v_MWidthC_1 * v_wg_id_123220) + (v_MWidthC_1 * v_i_123222))]; \n        if (v_index_123316 < 0) {\n          v__123239_0 = v__123237; \n        } else {\n          if (v_index_123316 >= v_VLength_3) {\n            v__123239_0 = v__123237; \n          } else {\n            v__123239_0 = v__123229[v_index_123316]; \n          }\n        }\n        v__123241_0 = mult(v__123239_0, v__123228[(v_l_id_123221 + (128 * v_MWidthC_1 * v_wg_id_123220) + (v_MWidthC_1 * v_i_123222))]); \n        v__123235 = add(v__123241_0, v__123235); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123223 = 0; \n        v__123244[v_l_id_123221] = id(v__123235); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_123224 = get_local_id(0); \n      float v_tmp_123319 = 0.0f; \n      v__105970 = v_tmp_123319; \n      /* reduce_seq */\n      for (int v_i_123225 = 0; v_i_123225 < v_MWidthC_1; v_i_123225 = (1 + v_i_123225)) {\n        v__105970 = add(v__105970, v__123244[(v_i_123225 + (v_MWidthC_1 * v_l_id_123224))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123226 = 0; \n        v__123249[v_wg_id_123220] = doubleMultiplyAdd(v__105970, v__123231, v__123230[v_wg_id_123220], v__123232); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__123227",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123228",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123229",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__123230",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123231",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123232",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__123249",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__123244",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}