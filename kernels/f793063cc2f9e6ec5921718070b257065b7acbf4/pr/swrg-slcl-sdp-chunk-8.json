{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105473, const global float* restrict v__105474, const global float* restrict v__105475, const global float* restrict v__105476, float v__105477, float v__105478, global float* v__105491, global float* v__105485, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105481; \n  float v__105486; \n  /* Private Memory */\n  float v__105483_0;\n  \n  for (int v_wg_id_105468 = get_group_id(0); v_wg_id_105468 < ((v_MHeight_2)/(8)); v_wg_id_105468 = (v_wg_id_105468 + get_num_groups(0))) {\n    for (int v_l_id_105469 = get_local_id(0); v_l_id_105469 < 8; v_l_id_105469 = (v_l_id_105469 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_105470 = 0; v_i_105470 < v_MWidthC_1; v_i_105470 = (1 + v_i_105470)) {\n        float v_tmp_105535 = 0.0f; \n        v__105481 = v_tmp_105535; \n        int v_index_105536 = v__105473[(v_i_105470 + (8 * v_MWidthC_1 * v_wg_id_105468) + (v_MWidthC_1 * v_l_id_105469))]; \n        if (v_index_105536 < 0) {\n          v__105483_0 = v__105481; \n        } else {\n          if (v_index_105536 >= v_VLength_3) {\n            v__105483_0 = v__105481; \n          } else {\n            v__105483_0 = v__105475[v_index_105536]; \n          }\n        }\n        v__105485[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_105468) + (-1 * v_i_105470) + (v_MWidthC_1 * v_l_id_105469))] = mult(v__105483_0, v__105474[(v_i_105470 + (8 * v_MWidthC_1 * v_wg_id_105468) + (v_MWidthC_1 * v_l_id_105469))]); \n      }\n      /* end map_seq */\n      float v_tmp_105537 = 0.0f; \n      v__105486 = v_tmp_105537; \n      /* reduce_seq */\n      for (int v_i_105471 = 0; v_i_105471 < v_MWidthC_1; v_i_105471 = (1 + v_i_105471)) {\n        v__105486 = add(v__105486, v__105485[(v_i_105471 + (8 * v_MWidthC_1 * v_wg_id_105468) + (v_MWidthC_1 * v_l_id_105469))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105472 = 0; \n        v__105491[(v_l_id_105469 + (8 * v_wg_id_105468))] = doubleMultiplyAdd(v__105486, v__105477, v__105476[(v_l_id_105469 + (8 * v_wg_id_105468))], v__105478); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__105473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105474",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105475",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105476",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105477",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105478",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__105491",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}