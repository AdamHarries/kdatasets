{
  "name" : "awrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117316, const global float* restrict v__117317, const global float* restrict v__117318, const global float* restrict v__117319, float v__117320, float v__117321, global float* v__117335, global float* v__117329, global int* v__117323, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117325; \n  float v__117330; \n  /* Private Memory */\n  float v__117327_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9290 = v__117323; \n    local int v_w_id_117311; \n    if (get_local_id(0) == 0) {\n      v_w_id_117311 = atomic_inc(v_work_idx_9290); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117311 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9288; \n        v_work_idx_9288 = 0; \n        int v_l_id_117312 = atomic_inc(&(v_work_idx_9288)); \n        while((v_l_id_117312 < 32)){\n          /* map_seq */\n          for (int v_i_117313 = 0; v_i_117313 < v_MWidthC_1; v_i_117313 = (1 + v_i_117313)) {\n            float v_tmp_117374 = 0.0f; \n            v__117325 = v_tmp_117374; \n            int v_index_117375 = v__117316[(v_i_117313 + (32 * v_MWidthC_1 * v_w_id_117311) + (v_MWidthC_1 * v_l_id_117312))]; \n            if (v_index_117375 < 0) {\n              v__117327_0 = v__117325; \n            } else {\n              if (v_index_117375 >= v_VLength_3) {\n                v__117327_0 = v__117325; \n              } else {\n                v__117327_0 = v__117318[v_index_117375]; \n              }\n            }\n            v__117329[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_117311) + (-1 * v_i_117313) + (v_MWidthC_1 * v_l_id_117312))] = mult(v__117327_0, v__117317[(v_i_117313 + (32 * v_MWidthC_1 * v_w_id_117311) + (v_MWidthC_1 * v_l_id_117312))]); \n          }\n          /* end map_seq */\n          float v_tmp_117376 = 0.0f; \n          v__117330 = v_tmp_117376; \n          /* reduce_seq */\n          for (int v_i_117314 = 0; v_i_117314 < v_MWidthC_1; v_i_117314 = (1 + v_i_117314)) {\n            v__117330 = add(v__117330, v__117329[(v_i_117314 + (32 * v_MWidthC_1 * v_w_id_117311) + (v_MWidthC_1 * v_l_id_117312))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117315 = 0; \n            v__117335[(v_l_id_117312 + (32 * v_w_id_117311))] = doubleMultiplyAdd(v__117330, v__117320, v__117319[(v_l_id_117312 + (32 * v_w_id_117311))], v__117321); \n          }\n          /* end map_seq */\n          v_l_id_117312 = atomic_inc(&(v_work_idx_9288)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117311 = atomic_inc(v_work_idx_9290); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__117316",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117318",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117320",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117321",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117323",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117335",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}