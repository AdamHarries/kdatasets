{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125594, const global float* restrict v__125595, const global float* restrict v__125596, const global float* restrict v__125597, float v__125598, float v__125599, global float* v__125617, global float* v__125607, global int* v__125601, local float* v__125612, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125603; \n  float v__125608; \n  float v__105970; \n  /* Private Memory */\n  float v__125605_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10030 = v__125601; \n    local int v_w_id_125586; \n    if (get_local_id(0) == 0) {\n      v_w_id_125586 = atomic_inc(v_work_idx_10030); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125586 < v_MHeight_2)){\n      for (int v_l_id_125587 = get_local_id(0); v_l_id_125587 < v_MWidthC_1; v_l_id_125587 = (v_l_id_125587 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_125588 = 0; v_i_125588 < 128; v_i_125588 = (1 + v_i_125588)) {\n          float v_tmp_125676 = 0.0f; \n          v__125603 = v_tmp_125676; \n          int v_index_125677 = v__125594[(v_l_id_125587 + (128 * v_MWidthC_1 * v_w_id_125586) + (v_MWidthC_1 * v_i_125588))]; \n          if (v_index_125677 < 0) {\n            v__125605_0 = v__125603; \n          } else {\n            if (v_index_125677 >= v_VLength_3) {\n              v__125605_0 = v__125603; \n            } else {\n              v__125605_0 = v__125596[v_index_125677]; \n            }\n          }\n          v__125607[(127 + (128 * v_MWidthC_1 * v_w_id_125586) + (-1 * v_i_125588) + (128 * v_l_id_125587))] = mult(v__125605_0, v__125595[(v_l_id_125587 + (128 * v_MWidthC_1 * v_w_id_125586) + (v_MWidthC_1 * v_i_125588))]); \n        }\n        /* end map_seq */\n        float v_tmp_125678 = 0.0f; \n        v__125608 = v_tmp_125678; \n        /* reduce_seq */\n        for (int v_i_125589 = 0; v_i_125589 < 128; v_i_125589 = (1 + v_i_125589)) {\n          v__125608 = add(v__125608, v__125607[(v_i_125589 + (128 * v_MWidthC_1 * v_w_id_125586) + (128 * v_l_id_125587))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125590 = 0; \n          v__125612[v_l_id_125587] = id(v__125608); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10023; \n        v_work_idx_10023 = 0; \n        int v_l_id_125591 = atomic_inc(&(v_work_idx_10023)); \n        while((v_l_id_125591 < 1)){\n          float v_tmp_125681 = 0.0f; \n          v__105970 = v_tmp_125681; \n          /* reduce_seq */\n          for (int v_i_125592 = 0; v_i_125592 < v_MWidthC_1; v_i_125592 = (1 + v_i_125592)) {\n            v__105970 = add(v__105970, v__125612[(v_i_125592 + (v_MWidthC_1 * v_l_id_125591))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_125593 = 0; \n            v__125617[v_w_id_125586] = doubleMultiplyAdd(v__105970, v__125598, v__125597[v_w_id_125586], v__125599); \n          }\n          /* end map_seq */\n          v_l_id_125591 = atomic_inc(&(v_work_idx_10023)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125586 = atomic_inc(v_work_idx_10030); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__125594",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125595",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125596",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125597",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125598",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125599",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125607",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125601",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__125612",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}