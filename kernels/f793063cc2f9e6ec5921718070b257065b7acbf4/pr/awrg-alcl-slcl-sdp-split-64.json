{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__122063, const global float* restrict v__122064, const global float* restrict v__122065, const global float* restrict v__122066, float v__122067, float v__122068, global float* v__122086, global float* v__122076, global int* v__122070, local float* v__122081, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__122072; \n  float v__122077; \n  float v__105970; \n  /* Private Memory */\n  float v__122074_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9720 = v__122070; \n    local int v_w_id_122055; \n    if (get_local_id(0) == 0) {\n      v_w_id_122055 = atomic_inc(v_work_idx_9720); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_122055 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9718; \n        v_work_idx_9718 = 0; \n        int v_l_id_122056 = atomic_inc(&(v_work_idx_9718)); \n        while((v_l_id_122056 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_122057 = 0; v_i_122057 < 64; v_i_122057 = (1 + v_i_122057)) {\n            float v_tmp_122141 = 0.0f; \n            v__122072 = v_tmp_122141; \n            int v_index_122142 = v__122063[(v_l_id_122056 + (64 * v_MWidthC_1 * v_w_id_122055) + (v_MWidthC_1 * v_i_122057))]; \n            if (v_index_122142 < 0) {\n              v__122074_0 = v__122072; \n            } else {\n              if (v_index_122142 >= v_VLength_3) {\n                v__122074_0 = v__122072; \n              } else {\n                v__122074_0 = v__122065[v_index_122142]; \n              }\n            }\n            v__122076[(63 + (64 * v_MWidthC_1 * v_w_id_122055) + (-1 * v_i_122057) + (64 * v_l_id_122056))] = mult(v__122074_0, v__122064[(v_l_id_122056 + (64 * v_MWidthC_1 * v_w_id_122055) + (v_MWidthC_1 * v_i_122057))]); \n          }\n          /* end map_seq */\n          float v_tmp_122143 = 0.0f; \n          v__122077 = v_tmp_122143; \n          /* reduce_seq */\n          for (int v_i_122058 = 0; v_i_122058 < 64; v_i_122058 = (1 + v_i_122058)) {\n            v__122077 = add(v__122077, v__122076[(v_i_122058 + (64 * v_MWidthC_1 * v_w_id_122055) + (64 * v_l_id_122056))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122059 = 0; \n            v__122081[v_l_id_122056] = id(v__122077); \n          }\n          /* end map_seq */\n          v_l_id_122056 = atomic_inc(&(v_work_idx_9718)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_122060 = get_local_id(0); \n        float v_tmp_122146 = 0.0f; \n        v__105970 = v_tmp_122146; \n        /* reduce_seq */\n        for (int v_i_122061 = 0; v_i_122061 < v_MWidthC_1; v_i_122061 = (1 + v_i_122061)) {\n          v__105970 = add(v__105970, v__122081[(v_i_122061 + (v_MWidthC_1 * v_l_id_122060))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_122062 = 0; \n          v__122086[v_w_id_122055] = doubleMultiplyAdd(v__105970, v__122067, v__122066[v_w_id_122055], v__122068); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_122055 = atomic_inc(v_work_idx_9720); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__122063",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122064",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122065",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__122066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__122067",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__122068",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122076",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122070",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__122081",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}