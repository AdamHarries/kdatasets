{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__129086, const global float* restrict v__129087, const global float* restrict v__129088, const global float* restrict v__129089, float v__129090, float v__129091, global float* v__129105, global float* v__129099, global int* v__129093, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__129095; \n  float v__129100; \n  /* Private Memory */\n  float v__129097_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10345 = v__129093; \n    local int v_w_id_129081; \n    if (get_local_id(0) == 0) {\n      v_w_id_129081 = atomic_inc(v_work_idx_10345); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_129081 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_129082 = get_local_id(0); v_l_id_129082 < 256; v_l_id_129082 = (v_l_id_129082 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_129083 = 0; v_i_129083 < v_MWidthC_1; v_i_129083 = (1 + v_i_129083)) {\n          float v_tmp_129148 = 0.0f; \n          v__129095 = v_tmp_129148; \n          int v_index_129149 = v__129086[(v_i_129083 + (256 * v_MWidthC_1 * v_w_id_129081) + (v_MWidthC_1 * v_l_id_129082))]; \n          if (v_index_129149 < 0) {\n            v__129097_0 = v__129095; \n          } else {\n            if (v_index_129149 >= v_VLength_3) {\n              v__129097_0 = v__129095; \n            } else {\n              v__129097_0 = v__129088[v_index_129149]; \n            }\n          }\n          v__129099[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_129081) + (-1 * v_i_129083) + (v_MWidthC_1 * v_l_id_129082))] = mult(v__129097_0, v__129087[(v_i_129083 + (256 * v_MWidthC_1 * v_w_id_129081) + (v_MWidthC_1 * v_l_id_129082))]); \n        }\n        /* end map_seq */\n        float v_tmp_129150 = 0.0f; \n        v__129100 = v_tmp_129150; \n        /* reduce_seq */\n        for (int v_i_129084 = 0; v_i_129084 < v_MWidthC_1; v_i_129084 = (1 + v_i_129084)) {\n          v__129100 = add(v__129100, v__129099[(v_i_129084 + (256 * v_MWidthC_1 * v_w_id_129081) + (v_MWidthC_1 * v_l_id_129082))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129085 = 0; \n          v__129105[(v_l_id_129082 + (256 * v_w_id_129081))] = doubleMultiplyAdd(v__129100, v__129090, v__129089[(v_l_id_129082 + (256 * v_w_id_129081))], v__129091); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_129081 = atomic_inc(v_work_idx_10345); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__129086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129088",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__129089",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__129090",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__129091",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__129099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129093",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__129105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}