{
  "name" : "awrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__112066, const global float* restrict v__112067, const global float* restrict v__112068, const global float* restrict v__112069, float v__112070, float v__112071, global float* v__112087, global int* v__112073, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112074; \n  float v__112077; \n  /* Private Memory */\n  float v__112079_0;\n  \n  float v__112081_0;\n  \n  int v__112085_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8821 = v__112073; \n    local int v_w_id_112062; \n    if (get_local_id(0) == 0) {\n      v_w_id_112062 = atomic_inc(v_work_idx_8821); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112062 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_112063 = get_local_id(0); v_l_id_112063 < 16; v_l_id_112063 = (v_l_id_112063 + get_local_size(0))) {\n        float v_tmp_112134 = 0.0f; \n        v__112074 = v_tmp_112134; \n        /* reduce_while_seq */\n        for (int v_i_112064 = 0; v_i_112064 < v_MWidthC_1; v_i_112064 = (1 + v_i_112064)) {\n          v__112085_0 = check(v__112074, v__112066[(v_i_112064 + (16 * v_MWidthC_1 * v_w_id_112062) + (v_MWidthC_1 * v_l_id_112063))]); \n          if (v__112085_0) {\n          } else {\n            break;\n          }\n          float v_tmp_112135 = 0.0f; \n          v__112077 = v_tmp_112135; \n          int v_index_112136 = v__112066[(v_i_112064 + (16 * v_MWidthC_1 * v_w_id_112062) + (v_MWidthC_1 * v_l_id_112063))]; \n          if (v_index_112136 < 0) {\n            v__112079_0 = v__112077; \n          } else {\n            if (v_index_112136 >= v_VLength_3) {\n              v__112079_0 = v__112077; \n            } else {\n              v__112079_0 = v__112068[v_index_112136]; \n            }\n          }\n          v__112081_0 = mult(v__112079_0, v__112067[(v_i_112064 + (16 * v_MWidthC_1 * v_w_id_112062) + (v_MWidthC_1 * v_l_id_112063))]); \n          v__112074 = add(v__112081_0, v__112074); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112065 = 0; \n          v__112087[(v_l_id_112063 + (16 * v_w_id_112062))] = doubleMultiplyAdd(v__112074, v__112070, v__112069[(v_l_id_112063 + (16 * v_w_id_112062))], v__112071); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_112062 = atomic_inc(v_work_idx_8821); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__112066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112068",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__112069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112070",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112071",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112073",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}