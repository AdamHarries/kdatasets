{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115821, const global float* restrict v__115822, const global float* restrict v__115823, const global float* restrict v__115824, float v__115825, float v__115826, global float* v__115845, local float* v__115840, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115829; \n  float v__115831; \n  float v__105970; \n  /* Private Memory */\n  float v__115833_0;\n  \n  float v__115835_0;\n  \n  int v__115839_0;\n  \n  for (int v_wg_id_115814 = get_group_id(0); v_wg_id_115814 < v_MHeight_2; v_wg_id_115814 = (v_wg_id_115814 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9154; \n      v_work_idx_9154 = 0; \n      int v_l_id_115815 = atomic_inc(&(v_work_idx_9154)); \n      while((v_l_id_115815 < v_MWidthC_1)){\n        float v_tmp_115905 = 0.0f; \n        v__115829 = v_tmp_115905; \n        /* reduce_while_seq */\n        for (int v_i_115816 = 0; v_i_115816 < 32; v_i_115816 = (1 + v_i_115816)) {\n          v__115839_0 = check(v__115829, v__115821[(v_l_id_115815 + (32 * v_MWidthC_1 * v_wg_id_115814) + (v_MWidthC_1 * v_i_115816))]); \n          if (v__115839_0) {\n          } else {\n            break;\n          }\n          float v_tmp_115906 = 0.0f; \n          v__115831 = v_tmp_115906; \n          int v_index_115907 = v__115821[(v_l_id_115815 + (32 * v_MWidthC_1 * v_wg_id_115814) + (v_MWidthC_1 * v_i_115816))]; \n          if (v_index_115907 < 0) {\n            v__115833_0 = v__115831; \n          } else {\n            if (v_index_115907 >= v_VLength_3) {\n              v__115833_0 = v__115831; \n            } else {\n              v__115833_0 = v__115823[v_index_115907]; \n            }\n          }\n          v__115835_0 = mult(v__115833_0, v__115822[(v_l_id_115815 + (32 * v_MWidthC_1 * v_wg_id_115814) + (v_MWidthC_1 * v_i_115816))]); \n          v__115829 = add(v__115835_0, v__115829); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115817 = 0; \n          v__115840[v_l_id_115815] = id(v__115829); \n        }\n        /* end map_seq */\n        v_l_id_115815 = atomic_inc(&(v_work_idx_9154)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_115818 = get_local_id(0); \n      float v_tmp_115910 = 0.0f; \n      v__105970 = v_tmp_115910; \n      /* reduce_seq */\n      for (int v_i_115819 = 0; v_i_115819 < v_MWidthC_1; v_i_115819 = (1 + v_i_115819)) {\n        v__105970 = add(v__105970, v__115840[(v_i_115819 + (v_MWidthC_1 * v_l_id_115818))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_115820 = 0; \n        v__115845[v_wg_id_115814] = doubleMultiplyAdd(v__105970, v__115825, v__115824[v_wg_id_115814], v__115826); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__115821",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115822",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115823",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115825",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115826",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__115845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__115840",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}