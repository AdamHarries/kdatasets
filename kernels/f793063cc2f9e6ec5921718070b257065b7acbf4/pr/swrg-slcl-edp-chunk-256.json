{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__127082, const global float* restrict v__127083, const global float* restrict v__127084, const global float* restrict v__127085, float v__127086, float v__127087, global float* v__127102, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__127089; \n  float v__127092; \n  /* Private Memory */\n  float v__127094_0;\n  \n  float v__127096_0;\n  \n  int v__127100_0;\n  \n  for (int v_wg_id_127078 = get_group_id(0); v_wg_id_127078 < ((v_MHeight_2)/(256)); v_wg_id_127078 = (v_wg_id_127078 + get_num_groups(0))) {\n    for (int v_l_id_127079 = get_local_id(0); v_l_id_127079 < 256; v_l_id_127079 = (v_l_id_127079 + get_local_size(0))) {\n      float v_tmp_127150 = 0.0f; \n      v__127089 = v_tmp_127150; \n      /* reduce_while_seq */\n      for (int v_i_127080 = 0; v_i_127080 < v_MWidthC_1; v_i_127080 = (1 + v_i_127080)) {\n        v__127100_0 = check(v__127089, v__127082[(v_i_127080 + (256 * v_MWidthC_1 * v_wg_id_127078) + (v_MWidthC_1 * v_l_id_127079))]); \n        if (v__127100_0) {\n        } else {\n          break;\n        }\n        float v_tmp_127151 = 0.0f; \n        v__127092 = v_tmp_127151; \n        int v_index_127152 = v__127082[(v_i_127080 + (256 * v_MWidthC_1 * v_wg_id_127078) + (v_MWidthC_1 * v_l_id_127079))]; \n        if (v_index_127152 < 0) {\n          v__127094_0 = v__127092; \n        } else {\n          if (v_index_127152 >= v_VLength_3) {\n            v__127094_0 = v__127092; \n          } else {\n            v__127094_0 = v__127084[v_index_127152]; \n          }\n        }\n        v__127096_0 = mult(v__127094_0, v__127083[(v_i_127080 + (256 * v_MWidthC_1 * v_wg_id_127078) + (v_MWidthC_1 * v_l_id_127079))]); \n        v__127089 = add(v__127096_0, v__127089); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_127081 = 0; \n        v__127102[(v_l_id_127079 + (256 * v_wg_id_127078))] = doubleMultiplyAdd(v__127089, v__127086, v__127085[(v_l_id_127079 + (256 * v_wg_id_127078))], v__127087); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__127082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127084",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__127085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__127086",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__127087",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__127102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}