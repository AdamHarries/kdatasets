{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132131, const global float* restrict v__132132, const global float* restrict v__132133, const global float* restrict v__132134, float v__132135, float v__132136, global float* v__132153, local float* v__132148, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132139; \n  float v__132141; \n  float v__105970; \n  /* Private Memory */\n  float v__132143_0;\n  \n  float v__132145_0;\n  \n  for (int v_wg_id_132124 = get_group_id(0); v_wg_id_132124 < v_MHeight_2; v_wg_id_132124 = (v_wg_id_132124 + get_num_groups(0))) {\n    for (int v_l_id_132125 = get_local_id(0); v_l_id_132125 < v_MWidthC_1; v_l_id_132125 = (v_l_id_132125 + get_local_size(0))) {\n      float v_tmp_132214 = 0.0f; \n      v__132139 = v_tmp_132214; \n      /* reduce_seq */\n      for (int v_i_132126 = 0; v_i_132126 < 512; v_i_132126 = (1 + v_i_132126)) {\n        float v_tmp_132215 = 0.0f; \n        v__132141 = v_tmp_132215; \n        int v_index_132216 = v__132131[(v_l_id_132125 + (512 * v_MWidthC_1 * v_wg_id_132124) + (v_MWidthC_1 * v_i_132126))]; \n        if (v_index_132216 < 0) {\n          v__132143_0 = v__132141; \n        } else {\n          if (v_index_132216 >= v_VLength_3) {\n            v__132143_0 = v__132141; \n          } else {\n            v__132143_0 = v__132133[v_index_132216]; \n          }\n        }\n        v__132145_0 = mult(v__132143_0, v__132132[(v_l_id_132125 + (512 * v_MWidthC_1 * v_wg_id_132124) + (v_MWidthC_1 * v_i_132126))]); \n        v__132139 = add(v__132145_0, v__132139); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_132127 = 0; \n        v__132148[v_l_id_132125] = id(v__132139); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10612; \n      v_work_idx_10612 = 0; \n      int v_l_id_132128 = atomic_inc(&(v_work_idx_10612)); \n      while((v_l_id_132128 < 1)){\n        float v_tmp_132219 = 0.0f; \n        v__105970 = v_tmp_132219; \n        /* reduce_seq */\n        for (int v_i_132129 = 0; v_i_132129 < v_MWidthC_1; v_i_132129 = (1 + v_i_132129)) {\n          v__105970 = add(v__105970, v__132148[(v_i_132129 + (v_MWidthC_1 * v_l_id_132128))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132130 = 0; \n          v__132153[v_wg_id_132124] = doubleMultiplyAdd(v__105970, v__132135, v__132134[v_wg_id_132124], v__132136); \n        }\n        /* end map_seq */\n        v_l_id_132128 = atomic_inc(&(v_work_idx_10612)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__132131",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132132",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132133",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132135",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132136",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__132153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__132148",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}