{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133281, const global float* restrict v__133282, const global float* restrict v__133283, const global float* restrict v__133284, float v__133285, float v__133286, global float* v__133305, local float* v__133300, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133289; \n  float v__133291; \n  float v__105970; \n  /* Private Memory */\n  float v__133293_0;\n  \n  float v__133295_0;\n  \n  int v__133299_0;\n  \n  for (int v_wg_id_133274 = get_group_id(0); v_wg_id_133274 < v_MHeight_2; v_wg_id_133274 = (v_wg_id_133274 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10721; \n      v_work_idx_10721 = 0; \n      int v_l_id_133275 = atomic_inc(&(v_work_idx_10721)); \n      while((v_l_id_133275 < v_MWidthC_1)){\n        float v_tmp_133361 = 0.0f; \n        v__133289 = v_tmp_133361; \n        /* reduce_while_seq */\n        for (int v_i_133276 = 0; v_i_133276 < 512; v_i_133276 = (1 + v_i_133276)) {\n          v__133299_0 = check(v__133289, v__133281[(v_l_id_133275 + (512 * v_MWidthC_1 * v_wg_id_133274) + (v_MWidthC_1 * v_i_133276))]); \n          if (v__133299_0) {\n          } else {\n            break;\n          }\n          float v_tmp_133362 = 0.0f; \n          v__133291 = v_tmp_133362; \n          int v_index_133363 = v__133281[(v_l_id_133275 + (512 * v_MWidthC_1 * v_wg_id_133274) + (v_MWidthC_1 * v_i_133276))]; \n          if (v_index_133363 < 0) {\n            v__133293_0 = v__133291; \n          } else {\n            if (v_index_133363 >= v_VLength_3) {\n              v__133293_0 = v__133291; \n            } else {\n              v__133293_0 = v__133283[v_index_133363]; \n            }\n          }\n          v__133295_0 = mult(v__133293_0, v__133282[(v_l_id_133275 + (512 * v_MWidthC_1 * v_wg_id_133274) + (v_MWidthC_1 * v_i_133276))]); \n          v__133289 = add(v__133295_0, v__133289); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133277 = 0; \n          v__133300[v_l_id_133275] = id(v__133289); \n        }\n        /* end map_seq */\n        v_l_id_133275 = atomic_inc(&(v_work_idx_10721)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10716; \n      v_work_idx_10716 = 0; \n      int v_l_id_133278 = atomic_inc(&(v_work_idx_10716)); \n      while((v_l_id_133278 < 1)){\n        float v_tmp_133366 = 0.0f; \n        v__105970 = v_tmp_133366; \n        /* reduce_seq */\n        for (int v_i_133279 = 0; v_i_133279 < v_MWidthC_1; v_i_133279 = (1 + v_i_133279)) {\n          v__105970 = add(v__105970, v__133300[(v_i_133279 + (v_MWidthC_1 * v_l_id_133278))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133280 = 0; \n          v__133305[v_wg_id_133274] = doubleMultiplyAdd(v__105970, v__133285, v__133284[v_wg_id_133274], v__133286); \n        }\n        /* end map_seq */\n        v_l_id_133278 = atomic_inc(&(v_work_idx_10716)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__133281",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133282",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133283",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133284",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133285",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133286",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__133305",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133300",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}