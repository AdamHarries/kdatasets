{
  "name" : "swrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__114058, const global float* restrict v__114059, const global float* restrict v__114060, const global float* restrict v__114061, float v__114062, float v__114063, global float* v__114076, global float* v__114070, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__114066; \n  float v__114071; \n  /* Private Memory */\n  float v__114068_0;\n  \n  for (int v_wg_id_114053 = get_group_id(0); v_wg_id_114053 < ((v_MHeight_2)/(32)); v_wg_id_114053 = (v_wg_id_114053 + get_num_groups(0))) {\n    for (int v_l_id_114054 = get_local_id(0); v_l_id_114054 < 32; v_l_id_114054 = (v_l_id_114054 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_114055 = 0; v_i_114055 < v_MWidthC_1; v_i_114055 = (1 + v_i_114055)) {\n        float v_tmp_114120 = 0.0f; \n        v__114066 = v_tmp_114120; \n        int v_index_114121 = v__114058[(v_i_114055 + (32 * v_MWidthC_1 * v_wg_id_114053) + (v_MWidthC_1 * v_l_id_114054))]; \n        if (v_index_114121 < 0) {\n          v__114068_0 = v__114066; \n        } else {\n          if (v_index_114121 >= v_VLength_3) {\n            v__114068_0 = v__114066; \n          } else {\n            v__114068_0 = v__114060[v_index_114121]; \n          }\n        }\n        v__114070[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_114053) + (-1 * v_i_114055) + (v_MWidthC_1 * v_l_id_114054))] = mult(v__114068_0, v__114059[(v_i_114055 + (32 * v_MWidthC_1 * v_wg_id_114053) + (v_MWidthC_1 * v_l_id_114054))]); \n      }\n      /* end map_seq */\n      float v_tmp_114122 = 0.0f; \n      v__114071 = v_tmp_114122; \n      /* reduce_seq */\n      for (int v_i_114056 = 0; v_i_114056 < v_MWidthC_1; v_i_114056 = (1 + v_i_114056)) {\n        v__114071 = add(v__114071, v__114070[(v_i_114056 + (32 * v_MWidthC_1 * v_wg_id_114053) + (v_MWidthC_1 * v_l_id_114054))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114057 = 0; \n        v__114076[(v_l_id_114054 + (32 * v_wg_id_114053))] = doubleMultiplyAdd(v__114071, v__114062, v__114061[(v_l_id_114054 + (32 * v_wg_id_114053))], v__114063); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__114058",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114060",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__114061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__114062",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__114063",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__114070",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__114076",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}