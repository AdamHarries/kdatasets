{
  "name" : "swrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110773, const global float* restrict v__110774, const global float* restrict v__110775, const global float* restrict v__110776, float v__110777, float v__110778, global float* v__110797, local float* v__110792, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110781; \n  float v__110783; \n  float v__105970; \n  /* Private Memory */\n  float v__110785_0;\n  \n  float v__110787_0;\n  \n  int v__110791_0;\n  \n  for (int v_wg_id_110766 = get_group_id(0); v_wg_id_110766 < v_MHeight_2; v_wg_id_110766 = (v_wg_id_110766 + get_num_groups(0))) {\n    for (int v_l_id_110767 = get_local_id(0); v_l_id_110767 < v_MWidthC_1; v_l_id_110767 = (v_l_id_110767 + get_local_size(0))) {\n      float v_tmp_110861 = 0.0f; \n      v__110781 = v_tmp_110861; \n      /* reduce_while_seq */\n      for (int v_i_110768 = 0; v_i_110768 < 16; v_i_110768 = (1 + v_i_110768)) {\n        v__110791_0 = check(v__110781, v__110773[(v_l_id_110767 + (16 * v_MWidthC_1 * v_wg_id_110766) + (v_MWidthC_1 * v_i_110768))]); \n        if (v__110791_0) {\n        } else {\n          break;\n        }\n        float v_tmp_110862 = 0.0f; \n        v__110783 = v_tmp_110862; \n        int v_index_110863 = v__110773[(v_l_id_110767 + (16 * v_MWidthC_1 * v_wg_id_110766) + (v_MWidthC_1 * v_i_110768))]; \n        if (v_index_110863 < 0) {\n          v__110785_0 = v__110783; \n        } else {\n          if (v_index_110863 >= v_VLength_3) {\n            v__110785_0 = v__110783; \n          } else {\n            v__110785_0 = v__110775[v_index_110863]; \n          }\n        }\n        v__110787_0 = mult(v__110785_0, v__110774[(v_l_id_110767 + (16 * v_MWidthC_1 * v_wg_id_110766) + (v_MWidthC_1 * v_i_110768))]); \n        v__110781 = add(v__110787_0, v__110781); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110769 = 0; \n        v__110792[v_l_id_110767] = id(v__110781); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8701; \n      v_work_idx_8701 = 0; \n      int v_l_id_110770 = atomic_inc(&(v_work_idx_8701)); \n      while((v_l_id_110770 < 1)){\n        float v_tmp_110866 = 0.0f; \n        v__105970 = v_tmp_110866; \n        /* reduce_seq */\n        for (int v_i_110771 = 0; v_i_110771 < v_MWidthC_1; v_i_110771 = (1 + v_i_110771)) {\n          v__105970 = add(v__105970, v__110792[(v_i_110771 + (v_MWidthC_1 * v_l_id_110770))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_110772 = 0; \n          v__110797[v_wg_id_110766] = doubleMultiplyAdd(v__105970, v__110777, v__110776[v_wg_id_110766], v__110778); \n        }\n        /* end map_seq */\n        v_l_id_110770 = atomic_inc(&(v_work_idx_8701)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__110773",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110774",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110775",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110776",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110777",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110778",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__110797",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__110792",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}