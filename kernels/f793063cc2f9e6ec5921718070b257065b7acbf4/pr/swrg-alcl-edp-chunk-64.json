{
  "name" : "swrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__119602, const global float* restrict v__119603, const global float* restrict v__119604, const global float* restrict v__119605, float v__119606, float v__119607, global float* v__119622, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__119609; \n  float v__119612; \n  /* Private Memory */\n  float v__119614_0;\n  \n  float v__119616_0;\n  \n  int v__119620_0;\n  \n  for (int v_wg_id_119598 = get_group_id(0); v_wg_id_119598 < ((v_MHeight_2)/(64)); v_wg_id_119598 = (v_wg_id_119598 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9492; \n      v_work_idx_9492 = 0; \n      int v_l_id_119599 = atomic_inc(&(v_work_idx_9492)); \n      while((v_l_id_119599 < 64)){\n        float v_tmp_119666 = 0.0f; \n        v__119609 = v_tmp_119666; \n        /* reduce_while_seq */\n        for (int v_i_119600 = 0; v_i_119600 < v_MWidthC_1; v_i_119600 = (1 + v_i_119600)) {\n          v__119620_0 = check(v__119609, v__119602[(v_i_119600 + (64 * v_MWidthC_1 * v_wg_id_119598) + (v_MWidthC_1 * v_l_id_119599))]); \n          if (v__119620_0) {\n          } else {\n            break;\n          }\n          float v_tmp_119667 = 0.0f; \n          v__119612 = v_tmp_119667; \n          int v_index_119668 = v__119602[(v_i_119600 + (64 * v_MWidthC_1 * v_wg_id_119598) + (v_MWidthC_1 * v_l_id_119599))]; \n          if (v_index_119668 < 0) {\n            v__119614_0 = v__119612; \n          } else {\n            if (v_index_119668 >= v_VLength_3) {\n              v__119614_0 = v__119612; \n            } else {\n              v__119614_0 = v__119604[v_index_119668]; \n            }\n          }\n          v__119616_0 = mult(v__119614_0, v__119603[(v_i_119600 + (64 * v_MWidthC_1 * v_wg_id_119598) + (v_MWidthC_1 * v_l_id_119599))]); \n          v__119609 = add(v__119616_0, v__119609); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_119601 = 0; \n          v__119622[(v_l_id_119599 + (64 * v_wg_id_119598))] = doubleMultiplyAdd(v__119609, v__119606, v__119605[(v_l_id_119599 + (64 * v_wg_id_119598))], v__119607); \n        }\n        /* end map_seq */\n        v_l_id_119599 = atomic_inc(&(v_work_idx_9492)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__119602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119603",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__119604",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__119605",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__119606",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__119607",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__119622",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}