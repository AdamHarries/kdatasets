{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__118161, const global float* restrict v__118162, const global float* restrict v__118163, const global float* restrict v__118164, float v__118165, float v__118166, global float* v__118184, global int* v__118168, local float* v__118179, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118170; \n  float v__118172; \n  float v__105970; \n  /* Private Memory */\n  float v__118174_0;\n  \n  float v__118176_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9379 = v__118168; \n    local int v_w_id_118154; \n    if (get_local_id(0) == 0) {\n      v_w_id_118154 = atomic_inc(v_work_idx_9379); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_118154 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9377; \n        v_work_idx_9377 = 0; \n        int v_l_id_118155 = atomic_inc(&(v_work_idx_9377)); \n        while((v_l_id_118155 < v_MWidthC_1)){\n          float v_tmp_118235 = 0.0f; \n          v__118170 = v_tmp_118235; \n          /* reduce_seq */\n          for (int v_i_118156 = 0; v_i_118156 < 32; v_i_118156 = (1 + v_i_118156)) {\n            float v_tmp_118236 = 0.0f; \n            v__118172 = v_tmp_118236; \n            int v_index_118237 = v__118161[(v_l_id_118155 + (32 * v_MWidthC_1 * v_w_id_118154) + (v_MWidthC_1 * v_i_118156))]; \n            if (v_index_118237 < 0) {\n              v__118174_0 = v__118172; \n            } else {\n              if (v_index_118237 >= v_VLength_3) {\n                v__118174_0 = v__118172; \n              } else {\n                v__118174_0 = v__118163[v_index_118237]; \n              }\n            }\n            v__118176_0 = mult(v__118174_0, v__118162[(v_l_id_118155 + (32 * v_MWidthC_1 * v_w_id_118154) + (v_MWidthC_1 * v_i_118156))]); \n            v__118170 = add(v__118176_0, v__118170); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118157 = 0; \n            v__118179[v_l_id_118155] = id(v__118170); \n          }\n          /* end map_seq */\n          v_l_id_118155 = atomic_inc(&(v_work_idx_9377)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9372; \n        v_work_idx_9372 = 0; \n        int v_l_id_118158 = atomic_inc(&(v_work_idx_9372)); \n        while((v_l_id_118158 < 1)){\n          float v_tmp_118240 = 0.0f; \n          v__105970 = v_tmp_118240; \n          /* reduce_seq */\n          for (int v_i_118159 = 0; v_i_118159 < v_MWidthC_1; v_i_118159 = (1 + v_i_118159)) {\n            v__105970 = add(v__105970, v__118179[(v_i_118159 + (v_MWidthC_1 * v_l_id_118158))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118160 = 0; \n            v__118184[v_w_id_118154] = doubleMultiplyAdd(v__105970, v__118165, v__118164[v_w_id_118154], v__118166); \n          }\n          /* end map_seq */\n          v_l_id_118158 = atomic_inc(&(v_work_idx_9372)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_118154 = atomic_inc(v_work_idx_9379); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__118161",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118162",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118163",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__118164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118165",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118166",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__118168",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__118184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__118179",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}