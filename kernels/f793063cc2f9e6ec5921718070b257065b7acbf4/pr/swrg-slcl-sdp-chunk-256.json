{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126934, const global float* restrict v__126935, const global float* restrict v__126936, const global float* restrict v__126937, float v__126938, float v__126939, global float* v__126952, global float* v__126946, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126942; \n  float v__126947; \n  /* Private Memory */\n  float v__126944_0;\n  \n  for (int v_wg_id_126929 = get_group_id(0); v_wg_id_126929 < ((v_MHeight_2)/(256)); v_wg_id_126929 = (v_wg_id_126929 + get_num_groups(0))) {\n    for (int v_l_id_126930 = get_local_id(0); v_l_id_126930 < 256; v_l_id_126930 = (v_l_id_126930 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_126931 = 0; v_i_126931 < v_MWidthC_1; v_i_126931 = (1 + v_i_126931)) {\n        float v_tmp_126996 = 0.0f; \n        v__126942 = v_tmp_126996; \n        int v_index_126997 = v__126934[(v_i_126931 + (256 * v_MWidthC_1 * v_wg_id_126929) + (v_MWidthC_1 * v_l_id_126930))]; \n        if (v_index_126997 < 0) {\n          v__126944_0 = v__126942; \n        } else {\n          if (v_index_126997 >= v_VLength_3) {\n            v__126944_0 = v__126942; \n          } else {\n            v__126944_0 = v__126936[v_index_126997]; \n          }\n        }\n        v__126946[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_126929) + (-1 * v_i_126931) + (v_MWidthC_1 * v_l_id_126930))] = mult(v__126944_0, v__126935[(v_i_126931 + (256 * v_MWidthC_1 * v_wg_id_126929) + (v_MWidthC_1 * v_l_id_126930))]); \n      }\n      /* end map_seq */\n      float v_tmp_126998 = 0.0f; \n      v__126947 = v_tmp_126998; \n      /* reduce_seq */\n      for (int v_i_126932 = 0; v_i_126932 < v_MWidthC_1; v_i_126932 = (1 + v_i_126932)) {\n        v__126947 = add(v__126947, v__126946[(v_i_126932 + (256 * v_MWidthC_1 * v_wg_id_126929) + (v_MWidthC_1 * v_l_id_126930))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_126933 = 0; \n        v__126952[(v_l_id_126930 + (256 * v_wg_id_126929))] = doubleMultiplyAdd(v__126947, v__126938, v__126937[(v_l_id_126930 + (256 * v_wg_id_126929))], v__126939); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__126934",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126935",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126936",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126938",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126939",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126946",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__126952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}