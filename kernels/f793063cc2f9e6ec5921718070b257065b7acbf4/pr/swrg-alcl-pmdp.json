{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105278, const global float* restrict v__105279, const global float* restrict v__105280, const global float* restrict v__105281, float v__105282, float v__105283, global float* v__105296, global float* v__105290, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105286; \n  float v__105291; \n  /* Private Memory */\n  float v__105288_0;\n  \n  for (int v_wg_id_105274 = get_group_id(0); v_wg_id_105274 < v_MHeight_2; v_wg_id_105274 = (v_wg_id_105274 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_8225; \n      v_l_id_8225 = 0; \n      int v_l_id_105275 = atomic_inc(&(v_l_id_8225)); \n      while((v_l_id_105275 < v_MWidthC_1)){\n        float v_tmp_105328 = 0.0f; \n        v__105286 = v_tmp_105328; \n        int v_index_105329 = v__105278[(v_l_id_105275 + (v_MWidthC_1 * v_wg_id_105274))]; \n        if (v_index_105329 < 0) {\n          v__105288_0 = v__105286; \n        } else {\n          if (v_index_105329 >= v_VLength_3) {\n            v__105288_0 = v__105286; \n          } else {\n            v__105288_0 = v__105280[v_index_105329]; \n          }\n        }\n        v__105290[(-1 + v_MWidthC_1 + (-1 * v_l_id_105275) + (v_MWidthC_1 * v_wg_id_105274))] = mult(v__105288_0, v__105279[(v_l_id_105275 + (v_MWidthC_1 * v_wg_id_105274))]); \n        v_l_id_105275 = atomic_inc(&(v_l_id_8225)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_105330 = 0.0f; \n    v__105291 = v_tmp_105330; \n    /* reduce_seq */\n    for (int v_i_105276 = 0; v_i_105276 < v_MWidthC_1; v_i_105276 = (1 + v_i_105276)) {\n      v__105291 = add(v__105291, v__105290[(v_i_105276 + (v_MWidthC_1 * v_wg_id_105274))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_105277 = 0; \n      v__105296[v_wg_id_105274] = doubleMultiplyAdd(v__105291, v__105282, v__105281[v_wg_id_105274], v__105283); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__105278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105279",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105280",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105281",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105282",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105283",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105290",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__105296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}