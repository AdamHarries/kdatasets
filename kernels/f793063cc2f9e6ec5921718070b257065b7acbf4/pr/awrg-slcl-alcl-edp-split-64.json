{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121504, const global float* restrict v__121505, const global float* restrict v__121506, const global float* restrict v__121507, float v__121508, float v__121509, global float* v__121529, global int* v__121511, local float* v__121524, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121513; \n  float v__121515; \n  float v__105970; \n  /* Private Memory */\n  float v__121517_0;\n  \n  float v__121519_0;\n  \n  int v__121523_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9666 = v__121511; \n    local int v_w_id_121497; \n    if (get_local_id(0) == 0) {\n      v_w_id_121497 = atomic_inc(v_work_idx_9666); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121497 < v_MHeight_2)){\n      for (int v_l_id_121498 = get_local_id(0); v_l_id_121498 < v_MWidthC_1; v_l_id_121498 = (v_l_id_121498 + get_local_size(0))) {\n        float v_tmp_121591 = 0.0f; \n        v__121513 = v_tmp_121591; \n        /* reduce_while_seq */\n        for (int v_i_121499 = 0; v_i_121499 < 64; v_i_121499 = (1 + v_i_121499)) {\n          v__121523_0 = check(v__121513, v__121504[(v_l_id_121498 + (64 * v_MWidthC_1 * v_w_id_121497) + (v_MWidthC_1 * v_i_121499))]); \n          if (v__121523_0) {\n          } else {\n            break;\n          }\n          float v_tmp_121592 = 0.0f; \n          v__121515 = v_tmp_121592; \n          int v_index_121593 = v__121504[(v_l_id_121498 + (64 * v_MWidthC_1 * v_w_id_121497) + (v_MWidthC_1 * v_i_121499))]; \n          if (v_index_121593 < 0) {\n            v__121517_0 = v__121515; \n          } else {\n            if (v_index_121593 >= v_VLength_3) {\n              v__121517_0 = v__121515; \n            } else {\n              v__121517_0 = v__121506[v_index_121593]; \n            }\n          }\n          v__121519_0 = mult(v__121517_0, v__121505[(v_l_id_121498 + (64 * v_MWidthC_1 * v_w_id_121497) + (v_MWidthC_1 * v_i_121499))]); \n          v__121513 = add(v__121519_0, v__121513); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_121500 = 0; \n          v__121524[v_l_id_121498] = id(v__121513); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9660; \n        v_work_idx_9660 = 0; \n        int v_l_id_121501 = atomic_inc(&(v_work_idx_9660)); \n        while((v_l_id_121501 < 1)){\n          float v_tmp_121596 = 0.0f; \n          v__105970 = v_tmp_121596; \n          /* reduce_seq */\n          for (int v_i_121502 = 0; v_i_121502 < v_MWidthC_1; v_i_121502 = (1 + v_i_121502)) {\n            v__105970 = add(v__105970, v__121524[(v_i_121502 + (v_MWidthC_1 * v_l_id_121501))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121503 = 0; \n            v__121529[v_w_id_121497] = doubleMultiplyAdd(v__105970, v__121508, v__121507[v_w_id_121497], v__121509); \n          }\n          /* end map_seq */\n          v_l_id_121501 = atomic_inc(&(v_work_idx_9660)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121497 = atomic_inc(v_work_idx_9666); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__121504",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121505",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121506",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121507",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121508",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121509",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121511",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121529",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__121524",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}