{
  "name" : "swrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131917, const global float* restrict v__131918, const global float* restrict v__131919, const global float* restrict v__131920, float v__131921, float v__131922, global float* v__131941, local float* v__131936, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131925; \n  float v__131927; \n  float v__105970; \n  /* Private Memory */\n  float v__131929_0;\n  \n  float v__131931_0;\n  \n  int v__131935_0;\n  \n  for (int v_wg_id_131910 = get_group_id(0); v_wg_id_131910 < v_MHeight_2; v_wg_id_131910 = (v_wg_id_131910 + get_num_groups(0))) {\n    for (int v_l_id_131911 = get_local_id(0); v_l_id_131911 < v_MWidthC_1; v_l_id_131911 = (v_l_id_131911 + get_local_size(0))) {\n      float v_tmp_132009 = 0.0f; \n      v__131925 = v_tmp_132009; \n      /* reduce_while_seq */\n      for (int v_i_131912 = 0; v_i_131912 < 512; v_i_131912 = (1 + v_i_131912)) {\n        v__131935_0 = check(v__131925, v__131917[(v_l_id_131911 + (512 * v_MWidthC_1 * v_wg_id_131910) + (v_MWidthC_1 * v_i_131912))]); \n        if (v__131935_0) {\n        } else {\n          break;\n        }\n        float v_tmp_132010 = 0.0f; \n        v__131927 = v_tmp_132010; \n        int v_index_132011 = v__131917[(v_l_id_131911 + (512 * v_MWidthC_1 * v_wg_id_131910) + (v_MWidthC_1 * v_i_131912))]; \n        if (v_index_132011 < 0) {\n          v__131929_0 = v__131927; \n        } else {\n          if (v_index_132011 >= v_VLength_3) {\n            v__131929_0 = v__131927; \n          } else {\n            v__131929_0 = v__131919[v_index_132011]; \n          }\n        }\n        v__131931_0 = mult(v__131929_0, v__131918[(v_l_id_131911 + (512 * v_MWidthC_1 * v_wg_id_131910) + (v_MWidthC_1 * v_i_131912))]); \n        v__131925 = add(v__131931_0, v__131925); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131913 = 0; \n        v__131936[v_l_id_131911] = id(v__131925); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_131914 = get_local_id(0); \n      float v_tmp_132014 = 0.0f; \n      v__105970 = v_tmp_132014; \n      /* reduce_seq */\n      for (int v_i_131915 = 0; v_i_131915 < v_MWidthC_1; v_i_131915 = (1 + v_i_131915)) {\n        v__105970 = add(v__105970, v__131936[(v_i_131915 + (v_MWidthC_1 * v_l_id_131914))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131916 = 0; \n        v__131941[v_wg_id_131910] = doubleMultiplyAdd(v__105970, v__131921, v__131920[v_wg_id_131910], v__131922); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__131917",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131918",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131919",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131920",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131921",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131922",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__131941",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__131936",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}