{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110671, const global float* restrict v__110672, const global float* restrict v__110673, const global float* restrict v__110674, float v__110675, float v__110676, global float* v__110693, local float* v__110688, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110679; \n  float v__110681; \n  float v__105970; \n  /* Private Memory */\n  float v__110683_0;\n  \n  float v__110685_0;\n  \n  for (int v_wg_id_110664 = get_group_id(0); v_wg_id_110664 < v_MHeight_2; v_wg_id_110664 = (v_wg_id_110664 + get_num_groups(0))) {\n    for (int v_l_id_110665 = get_local_id(0); v_l_id_110665 < v_MWidthC_1; v_l_id_110665 = (v_l_id_110665 + get_local_size(0))) {\n      float v_tmp_110754 = 0.0f; \n      v__110679 = v_tmp_110754; \n      /* reduce_seq */\n      for (int v_i_110666 = 0; v_i_110666 < 16; v_i_110666 = (1 + v_i_110666)) {\n        float v_tmp_110755 = 0.0f; \n        v__110681 = v_tmp_110755; \n        int v_index_110756 = v__110671[(v_l_id_110665 + (16 * v_MWidthC_1 * v_wg_id_110664) + (v_MWidthC_1 * v_i_110666))]; \n        if (v_index_110756 < 0) {\n          v__110683_0 = v__110681; \n        } else {\n          if (v_index_110756 >= v_VLength_3) {\n            v__110683_0 = v__110681; \n          } else {\n            v__110683_0 = v__110673[v_index_110756]; \n          }\n        }\n        v__110685_0 = mult(v__110683_0, v__110672[(v_l_id_110665 + (16 * v_MWidthC_1 * v_wg_id_110664) + (v_MWidthC_1 * v_i_110666))]); \n        v__110679 = add(v__110685_0, v__110679); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110667 = 0; \n        v__110688[v_l_id_110665] = id(v__110679); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8692; \n      v_work_idx_8692 = 0; \n      int v_l_id_110668 = atomic_inc(&(v_work_idx_8692)); \n      while((v_l_id_110668 < 1)){\n        float v_tmp_110759 = 0.0f; \n        v__105970 = v_tmp_110759; \n        /* reduce_seq */\n        for (int v_i_110669 = 0; v_i_110669 < v_MWidthC_1; v_i_110669 = (1 + v_i_110669)) {\n          v__105970 = add(v__105970, v__110688[(v_i_110669 + (v_MWidthC_1 * v_l_id_110668))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_110670 = 0; \n          v__110693[v_wg_id_110664] = doubleMultiplyAdd(v__105970, v__110675, v__110674[v_wg_id_110664], v__110676); \n        }\n        /* end map_seq */\n        v_l_id_110668 = atomic_inc(&(v_work_idx_8692)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__110671",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110672",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110673",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110674",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110675",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110676",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__110693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__110688",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}