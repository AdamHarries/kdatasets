{
  "name" : "swrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128697, const global float* restrict v__128698, const global float* restrict v__128699, const global float* restrict v__128700, float v__128701, float v__128702, global float* v__128721, local float* v__128716, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128705; \n  float v__128707; \n  float v__105970; \n  /* Private Memory */\n  float v__128709_0;\n  \n  float v__128711_0;\n  \n  int v__128715_0;\n  \n  for (int v_wg_id_128690 = get_group_id(0); v_wg_id_128690 < v_MHeight_2; v_wg_id_128690 = (v_wg_id_128690 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10306; \n      v_work_idx_10306 = 0; \n      int v_l_id_128691 = atomic_inc(&(v_work_idx_10306)); \n      while((v_l_id_128691 < v_MWidthC_1)){\n        float v_tmp_128781 = 0.0f; \n        v__128705 = v_tmp_128781; \n        /* reduce_while_seq */\n        for (int v_i_128692 = 0; v_i_128692 < 256; v_i_128692 = (1 + v_i_128692)) {\n          v__128715_0 = check(v__128705, v__128697[(v_l_id_128691 + (256 * v_MWidthC_1 * v_wg_id_128690) + (v_MWidthC_1 * v_i_128692))]); \n          if (v__128715_0) {\n          } else {\n            break;\n          }\n          float v_tmp_128782 = 0.0f; \n          v__128707 = v_tmp_128782; \n          int v_index_128783 = v__128697[(v_l_id_128691 + (256 * v_MWidthC_1 * v_wg_id_128690) + (v_MWidthC_1 * v_i_128692))]; \n          if (v_index_128783 < 0) {\n            v__128709_0 = v__128707; \n          } else {\n            if (v_index_128783 >= v_VLength_3) {\n              v__128709_0 = v__128707; \n            } else {\n              v__128709_0 = v__128699[v_index_128783]; \n            }\n          }\n          v__128711_0 = mult(v__128709_0, v__128698[(v_l_id_128691 + (256 * v_MWidthC_1 * v_wg_id_128690) + (v_MWidthC_1 * v_i_128692))]); \n          v__128705 = add(v__128711_0, v__128705); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128693 = 0; \n          v__128716[v_l_id_128691] = id(v__128705); \n        }\n        /* end map_seq */\n        v_l_id_128691 = atomic_inc(&(v_work_idx_10306)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_128694 = get_local_id(0); \n      float v_tmp_128786 = 0.0f; \n      v__105970 = v_tmp_128786; \n      /* reduce_seq */\n      for (int v_i_128695 = 0; v_i_128695 < v_MWidthC_1; v_i_128695 = (1 + v_i_128695)) {\n        v__105970 = add(v__105970, v__128716[(v_i_128695 + (v_MWidthC_1 * v_l_id_128694))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_128696 = 0; \n        v__128721[v_wg_id_128690] = doubleMultiplyAdd(v__105970, v__128701, v__128700[v_wg_id_128690], v__128702); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__128697",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128698",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128699",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128701",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128702",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__128721",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__128716",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}