{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117010, const global float* restrict v__117011, const global float* restrict v__117012, const global float* restrict v__117013, float v__117014, float v__117015, global float* v__117033, global float* v__117023, global int* v__117017, local float* v__117028, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117019; \n  float v__117024; \n  float v__105970; \n  /* Private Memory */\n  float v__117021_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9262 = v__117017; \n    local int v_w_id_117002; \n    if (get_local_id(0) == 0) {\n      v_w_id_117002 = atomic_inc(v_work_idx_9262); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117002 < v_MHeight_2)){\n      for (int v_l_id_117003 = get_local_id(0); v_l_id_117003 < v_MWidthC_1; v_l_id_117003 = (v_l_id_117003 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_117004 = 0; v_i_117004 < 32; v_i_117004 = (1 + v_i_117004)) {\n          float v_tmp_117092 = 0.0f; \n          v__117019 = v_tmp_117092; \n          int v_index_117093 = v__117010[(v_l_id_117003 + (32 * v_MWidthC_1 * v_w_id_117002) + (v_MWidthC_1 * v_i_117004))]; \n          if (v_index_117093 < 0) {\n            v__117021_0 = v__117019; \n          } else {\n            if (v_index_117093 >= v_VLength_3) {\n              v__117021_0 = v__117019; \n            } else {\n              v__117021_0 = v__117012[v_index_117093]; \n            }\n          }\n          v__117023[(31 + (32 * v_MWidthC_1 * v_w_id_117002) + (-1 * v_i_117004) + (32 * v_l_id_117003))] = mult(v__117021_0, v__117011[(v_l_id_117003 + (32 * v_MWidthC_1 * v_w_id_117002) + (v_MWidthC_1 * v_i_117004))]); \n        }\n        /* end map_seq */\n        float v_tmp_117094 = 0.0f; \n        v__117024 = v_tmp_117094; \n        /* reduce_seq */\n        for (int v_i_117005 = 0; v_i_117005 < 32; v_i_117005 = (1 + v_i_117005)) {\n          v__117024 = add(v__117024, v__117023[(v_i_117005 + (32 * v_MWidthC_1 * v_w_id_117002) + (32 * v_l_id_117003))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_117006 = 0; \n          v__117028[v_l_id_117003] = id(v__117024); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9255; \n        v_work_idx_9255 = 0; \n        int v_l_id_117007 = atomic_inc(&(v_work_idx_9255)); \n        while((v_l_id_117007 < 1)){\n          float v_tmp_117097 = 0.0f; \n          v__105970 = v_tmp_117097; \n          /* reduce_seq */\n          for (int v_i_117008 = 0; v_i_117008 < v_MWidthC_1; v_i_117008 = (1 + v_i_117008)) {\n            v__105970 = add(v__105970, v__117028[(v_i_117008 + (v_MWidthC_1 * v_l_id_117007))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117009 = 0; \n            v__117033[v_w_id_117002] = doubleMultiplyAdd(v__105970, v__117014, v__117013[v_w_id_117002], v__117015); \n          }\n          /* end map_seq */\n          v_l_id_117007 = atomic_inc(&(v_work_idx_9255)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117002 = atomic_inc(v_work_idx_9262); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__117010",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117011",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117012",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117013",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117014",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117015",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117023",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117017",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117033",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__117028",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}