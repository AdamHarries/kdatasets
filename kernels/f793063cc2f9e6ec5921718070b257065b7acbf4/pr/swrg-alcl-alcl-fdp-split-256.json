{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128895, const global float* restrict v__128896, const global float* restrict v__128897, const global float* restrict v__128898, float v__128899, float v__128900, global float* v__128917, local float* v__128912, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128903; \n  float v__128905; \n  float v__105970; \n  /* Private Memory */\n  float v__128907_0;\n  \n  float v__128909_0;\n  \n  for (int v_wg_id_128888 = get_group_id(0); v_wg_id_128888 < v_MHeight_2; v_wg_id_128888 = (v_wg_id_128888 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10327; \n      v_work_idx_10327 = 0; \n      int v_l_id_128889 = atomic_inc(&(v_work_idx_10327)); \n      while((v_l_id_128889 < v_MWidthC_1)){\n        float v_tmp_128970 = 0.0f; \n        v__128903 = v_tmp_128970; \n        /* reduce_seq */\n        for (int v_i_128890 = 0; v_i_128890 < 256; v_i_128890 = (1 + v_i_128890)) {\n          float v_tmp_128971 = 0.0f; \n          v__128905 = v_tmp_128971; \n          int v_index_128972 = v__128895[(v_l_id_128889 + (256 * v_MWidthC_1 * v_wg_id_128888) + (v_MWidthC_1 * v_i_128890))]; \n          if (v_index_128972 < 0) {\n            v__128907_0 = v__128905; \n          } else {\n            if (v_index_128972 >= v_VLength_3) {\n              v__128907_0 = v__128905; \n            } else {\n              v__128907_0 = v__128897[v_index_128972]; \n            }\n          }\n          v__128909_0 = mult(v__128907_0, v__128896[(v_l_id_128889 + (256 * v_MWidthC_1 * v_wg_id_128888) + (v_MWidthC_1 * v_i_128890))]); \n          v__128903 = add(v__128909_0, v__128903); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128891 = 0; \n          v__128912[v_l_id_128889] = id(v__128903); \n        }\n        /* end map_seq */\n        v_l_id_128889 = atomic_inc(&(v_work_idx_10327)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10322; \n      v_work_idx_10322 = 0; \n      int v_l_id_128892 = atomic_inc(&(v_work_idx_10322)); \n      while((v_l_id_128892 < 1)){\n        float v_tmp_128975 = 0.0f; \n        v__105970 = v_tmp_128975; \n        /* reduce_seq */\n        for (int v_i_128893 = 0; v_i_128893 < v_MWidthC_1; v_i_128893 = (1 + v_i_128893)) {\n          v__105970 = add(v__105970, v__128912[(v_i_128893 + (v_MWidthC_1 * v_l_id_128892))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128894 = 0; \n          v__128917[v_wg_id_128888] = doubleMultiplyAdd(v__105970, v__128899, v__128898[v_wg_id_128888], v__128900); \n        }\n        /* end map_seq */\n        v_l_id_128892 = atomic_inc(&(v_work_idx_10322)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__128895",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128896",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128897",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128898",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128899",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128900",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__128917",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__128912",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}