{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__122257, const global float* restrict v__122258, const global float* restrict v__122259, const global float* restrict v__122260, float v__122261, float v__122262, global float* v__122282, global int* v__122264, local float* v__122277, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__122266; \n  float v__122268; \n  float v__105970; \n  /* Private Memory */\n  float v__122270_0;\n  \n  float v__122272_0;\n  \n  int v__122276_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9740 = v__122264; \n    local int v_w_id_122250; \n    if (get_local_id(0) == 0) {\n      v_w_id_122250 = atomic_inc(v_work_idx_9740); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_122250 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9738; \n        v_work_idx_9738 = 0; \n        int v_l_id_122251 = atomic_inc(&(v_work_idx_9738)); \n        while((v_l_id_122251 < v_MWidthC_1)){\n          float v_tmp_122340 = 0.0f; \n          v__122266 = v_tmp_122340; \n          /* reduce_while_seq */\n          for (int v_i_122252 = 0; v_i_122252 < 64; v_i_122252 = (1 + v_i_122252)) {\n            v__122276_0 = check(v__122266, v__122257[(v_l_id_122251 + (64 * v_MWidthC_1 * v_w_id_122250) + (v_MWidthC_1 * v_i_122252))]); \n            if (v__122276_0) {\n            } else {\n              break;\n            }\n            float v_tmp_122341 = 0.0f; \n            v__122268 = v_tmp_122341; \n            int v_index_122342 = v__122257[(v_l_id_122251 + (64 * v_MWidthC_1 * v_w_id_122250) + (v_MWidthC_1 * v_i_122252))]; \n            if (v_index_122342 < 0) {\n              v__122270_0 = v__122268; \n            } else {\n              if (v_index_122342 >= v_VLength_3) {\n                v__122270_0 = v__122268; \n              } else {\n                v__122270_0 = v__122259[v_index_122342]; \n              }\n            }\n            v__122272_0 = mult(v__122270_0, v__122258[(v_l_id_122251 + (64 * v_MWidthC_1 * v_w_id_122250) + (v_MWidthC_1 * v_i_122252))]); \n            v__122266 = add(v__122272_0, v__122266); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122253 = 0; \n            v__122277[v_l_id_122251] = id(v__122266); \n          }\n          /* end map_seq */\n          v_l_id_122251 = atomic_inc(&(v_work_idx_9738)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_122254 = get_local_id(0); \n        float v_tmp_122345 = 0.0f; \n        v__105970 = v_tmp_122345; \n        /* reduce_seq */\n        for (int v_i_122255 = 0; v_i_122255 < v_MWidthC_1; v_i_122255 = (1 + v_i_122255)) {\n          v__105970 = add(v__105970, v__122277[(v_i_122255 + (v_MWidthC_1 * v_l_id_122254))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_122256 = 0; \n          v__122282[v_w_id_122250] = doubleMultiplyAdd(v__105970, v__122261, v__122260[v_w_id_122250], v__122262); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_122250 = atomic_inc(v_work_idx_9740); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__122257",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122258",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122259",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__122260",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__122261",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__122262",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122264",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122282",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__122277",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}