{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__124794, const global float* restrict v__124795, const global float* restrict v__124796, const global float* restrict v__124797, float v__124798, float v__124799, global float* v__124813, global float* v__124807, global int* v__124801, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__124803; \n  float v__124808; \n  /* Private Memory */\n  float v__124805_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9961 = v__124801; \n    local int v_w_id_124789; \n    if (get_local_id(0) == 0) {\n      v_w_id_124789 = atomic_inc(v_work_idx_9961); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_124789 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_124790 = get_local_id(0); v_l_id_124790 < 128; v_l_id_124790 = (v_l_id_124790 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_124791 = 0; v_i_124791 < v_MWidthC_1; v_i_124791 = (1 + v_i_124791)) {\n          float v_tmp_124856 = 0.0f; \n          v__124803 = v_tmp_124856; \n          int v_index_124857 = v__124794[(v_i_124791 + (128 * v_MWidthC_1 * v_w_id_124789) + (v_MWidthC_1 * v_l_id_124790))]; \n          if (v_index_124857 < 0) {\n            v__124805_0 = v__124803; \n          } else {\n            if (v_index_124857 >= v_VLength_3) {\n              v__124805_0 = v__124803; \n            } else {\n              v__124805_0 = v__124796[v_index_124857]; \n            }\n          }\n          v__124807[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_124789) + (-1 * v_i_124791) + (v_MWidthC_1 * v_l_id_124790))] = mult(v__124805_0, v__124795[(v_i_124791 + (128 * v_MWidthC_1 * v_w_id_124789) + (v_MWidthC_1 * v_l_id_124790))]); \n        }\n        /* end map_seq */\n        float v_tmp_124858 = 0.0f; \n        v__124808 = v_tmp_124858; \n        /* reduce_seq */\n        for (int v_i_124792 = 0; v_i_124792 < v_MWidthC_1; v_i_124792 = (1 + v_i_124792)) {\n          v__124808 = add(v__124808, v__124807[(v_i_124792 + (128 * v_MWidthC_1 * v_w_id_124789) + (v_MWidthC_1 * v_l_id_124790))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124793 = 0; \n          v__124813[(v_l_id_124790 + (128 * v_w_id_124789))] = doubleMultiplyAdd(v__124808, v__124798, v__124797[(v_l_id_124790 + (128 * v_w_id_124789))], v__124799); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_124789 = atomic_inc(v_work_idx_9961); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__124794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124795",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124796",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__124797",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__124798",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__124799",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__124807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124801",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__124813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}