{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110878, const global float* restrict v__110879, const global float* restrict v__110880, const global float* restrict v__110881, float v__110882, float v__110883, global float* v__110896, global float* v__110890, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110886; \n  float v__110891; \n  /* Private Memory */\n  float v__110888_0;\n  \n  for (int v_wg_id_110873 = get_group_id(0); v_wg_id_110873 < ((v_MHeight_2)/(16)); v_wg_id_110873 = (v_wg_id_110873 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8712; \n      v_work_idx_8712 = 0; \n      int v_l_id_110874 = atomic_inc(&(v_work_idx_8712)); \n      while((v_l_id_110874 < 16)){\n        /* map_seq */\n        for (int v_i_110875 = 0; v_i_110875 < v_MWidthC_1; v_i_110875 = (1 + v_i_110875)) {\n          float v_tmp_110936 = 0.0f; \n          v__110886 = v_tmp_110936; \n          int v_index_110937 = v__110878[(v_i_110875 + (16 * v_MWidthC_1 * v_wg_id_110873) + (v_MWidthC_1 * v_l_id_110874))]; \n          if (v_index_110937 < 0) {\n            v__110888_0 = v__110886; \n          } else {\n            if (v_index_110937 >= v_VLength_3) {\n              v__110888_0 = v__110886; \n            } else {\n              v__110888_0 = v__110880[v_index_110937]; \n            }\n          }\n          v__110890[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_110873) + (-1 * v_i_110875) + (v_MWidthC_1 * v_l_id_110874))] = mult(v__110888_0, v__110879[(v_i_110875 + (16 * v_MWidthC_1 * v_wg_id_110873) + (v_MWidthC_1 * v_l_id_110874))]); \n        }\n        /* end map_seq */\n        float v_tmp_110938 = 0.0f; \n        v__110891 = v_tmp_110938; \n        /* reduce_seq */\n        for (int v_i_110876 = 0; v_i_110876 < v_MWidthC_1; v_i_110876 = (1 + v_i_110876)) {\n          v__110891 = add(v__110891, v__110890[(v_i_110876 + (16 * v_MWidthC_1 * v_wg_id_110873) + (v_MWidthC_1 * v_l_id_110874))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_110877 = 0; \n          v__110896[(v_l_id_110874 + (16 * v_wg_id_110873))] = doubleMultiplyAdd(v__110891, v__110882, v__110881[(v_l_id_110874 + (16 * v_wg_id_110873))], v__110883); \n        }\n        /* end map_seq */\n        v_l_id_110874 = atomic_inc(&(v_work_idx_8712)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__110878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110880",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110881",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110882",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110883",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__110890",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__110896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}