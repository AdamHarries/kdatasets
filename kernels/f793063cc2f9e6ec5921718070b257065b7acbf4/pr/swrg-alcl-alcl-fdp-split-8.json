{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107435, const global float* restrict v__107436, const global float* restrict v__107437, const global float* restrict v__107438, float v__107439, float v__107440, global float* v__107457, local float* v__107452, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107443; \n  float v__107445; \n  float v__105970; \n  /* Private Memory */\n  float v__107447_0;\n  \n  float v__107449_0;\n  \n  for (int v_wg_id_107428 = get_group_id(0); v_wg_id_107428 < v_MHeight_2; v_wg_id_107428 = (v_wg_id_107428 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8407; \n      v_work_idx_8407 = 0; \n      int v_l_id_107429 = atomic_inc(&(v_work_idx_8407)); \n      while((v_l_id_107429 < v_MWidthC_1)){\n        float v_tmp_107510 = 0.0f; \n        v__107443 = v_tmp_107510; \n        /* reduce_seq */\n        for (int v_i_107430 = 0; v_i_107430 < 8; v_i_107430 = (1 + v_i_107430)) {\n          float v_tmp_107511 = 0.0f; \n          v__107445 = v_tmp_107511; \n          int v_index_107512 = v__107435[(v_l_id_107429 + (8 * v_MWidthC_1 * v_wg_id_107428) + (v_MWidthC_1 * v_i_107430))]; \n          if (v_index_107512 < 0) {\n            v__107447_0 = v__107445; \n          } else {\n            if (v_index_107512 >= v_VLength_3) {\n              v__107447_0 = v__107445; \n            } else {\n              v__107447_0 = v__107437[v_index_107512]; \n            }\n          }\n          v__107449_0 = mult(v__107447_0, v__107436[(v_l_id_107429 + (8 * v_MWidthC_1 * v_wg_id_107428) + (v_MWidthC_1 * v_i_107430))]); \n          v__107443 = add(v__107449_0, v__107443); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107431 = 0; \n          v__107452[v_l_id_107429] = id(v__107443); \n        }\n        /* end map_seq */\n        v_l_id_107429 = atomic_inc(&(v_work_idx_8407)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8402; \n      v_work_idx_8402 = 0; \n      int v_l_id_107432 = atomic_inc(&(v_work_idx_8402)); \n      while((v_l_id_107432 < 1)){\n        float v_tmp_107515 = 0.0f; \n        v__105970 = v_tmp_107515; \n        /* reduce_seq */\n        for (int v_i_107433 = 0; v_i_107433 < v_MWidthC_1; v_i_107433 = (1 + v_i_107433)) {\n          v__105970 = add(v__105970, v__107452[(v_i_107433 + (v_MWidthC_1 * v_l_id_107432))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107434 = 0; \n          v__107457[v_wg_id_107428] = doubleMultiplyAdd(v__105970, v__107439, v__107438[v_wg_id_107428], v__107440); \n        }\n        /* end map_seq */\n        v_l_id_107432 = atomic_inc(&(v_work_idx_8402)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__107435",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107436",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107437",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107438",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107439",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107440",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__107457",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107452",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}