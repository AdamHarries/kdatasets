{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__109187, const global float* restrict v__109188, const global float* restrict v__109189, const global float* restrict v__109190, float v__109191, float v__109192, global float* v__109210, global float* v__109200, global int* v__109194, local float* v__109205, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__109196; \n  float v__109201; \n  float v__105970; \n  /* Private Memory */\n  float v__109198_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8568 = v__109194; \n    local int v_w_id_109179; \n    if (get_local_id(0) == 0) {\n      v_w_id_109179 = atomic_inc(v_work_idx_8568); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_109179 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8566; \n        v_work_idx_8566 = 0; \n        int v_l_id_109180 = atomic_inc(&(v_work_idx_8566)); \n        while((v_l_id_109180 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_109181 = 0; v_i_109181 < 8; v_i_109181 = (1 + v_i_109181)) {\n            float v_tmp_109265 = 0.0f; \n            v__109196 = v_tmp_109265; \n            int v_index_109266 = v__109187[(v_l_id_109180 + (8 * v_MWidthC_1 * v_w_id_109179) + (v_MWidthC_1 * v_i_109181))]; \n            if (v_index_109266 < 0) {\n              v__109198_0 = v__109196; \n            } else {\n              if (v_index_109266 >= v_VLength_3) {\n                v__109198_0 = v__109196; \n              } else {\n                v__109198_0 = v__109189[v_index_109266]; \n              }\n            }\n            v__109200[(7 + (8 * v_MWidthC_1 * v_w_id_109179) + (-1 * v_i_109181) + (8 * v_l_id_109180))] = mult(v__109198_0, v__109188[(v_l_id_109180 + (8 * v_MWidthC_1 * v_w_id_109179) + (v_MWidthC_1 * v_i_109181))]); \n          }\n          /* end map_seq */\n          float v_tmp_109267 = 0.0f; \n          v__109201 = v_tmp_109267; \n          /* reduce_seq */\n          for (int v_i_109182 = 0; v_i_109182 < 8; v_i_109182 = (1 + v_i_109182)) {\n            v__109201 = add(v__109201, v__109200[(v_i_109182 + (8 * v_MWidthC_1 * v_w_id_109179) + (8 * v_l_id_109180))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_109183 = 0; \n            v__109205[v_l_id_109180] = id(v__109201); \n          }\n          /* end map_seq */\n          v_l_id_109180 = atomic_inc(&(v_work_idx_8566)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_109184 = get_local_id(0); \n        float v_tmp_109270 = 0.0f; \n        v__105970 = v_tmp_109270; \n        /* reduce_seq */\n        for (int v_i_109185 = 0; v_i_109185 < v_MWidthC_1; v_i_109185 = (1 + v_i_109185)) {\n          v__105970 = add(v__105970, v__109205[(v_i_109185 + (v_MWidthC_1 * v_l_id_109184))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_109186 = 0; \n          v__109210[v_w_id_109179] = doubleMultiplyAdd(v__105970, v__109191, v__109190[v_w_id_109179], v__109192); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_109179 = atomic_inc(v_work_idx_8568); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__109187",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109188",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109189",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__109190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__109191",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__109192",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__109200",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109194",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__109210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__109205",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}