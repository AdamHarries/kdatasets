{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121086, const global float* restrict v__121087, const global float* restrict v__121088, const global float* restrict v__121089, float v__121090, float v__121091, global float* v__121109, global int* v__121093, local float* v__121104, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121095; \n  float v__121097; \n  float v__105970; \n  /* Private Memory */\n  float v__121099_0;\n  \n  float v__121101_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9626 = v__121093; \n    local int v_w_id_121079; \n    if (get_local_id(0) == 0) {\n      v_w_id_121079 = atomic_inc(v_work_idx_9626); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121079 < v_MHeight_2)){\n      for (int v_l_id_121080 = get_local_id(0); v_l_id_121080 < v_MWidthC_1; v_l_id_121080 = (v_l_id_121080 + get_local_size(0))) {\n        float v_tmp_121172 = 0.0f; \n        v__121095 = v_tmp_121172; \n        /* reduce_seq */\n        for (int v_i_121081 = 0; v_i_121081 < 64; v_i_121081 = (1 + v_i_121081)) {\n          float v_tmp_121173 = 0.0f; \n          v__121097 = v_tmp_121173; \n          int v_index_121174 = v__121086[(v_l_id_121080 + (64 * v_MWidthC_1 * v_w_id_121079) + (v_MWidthC_1 * v_i_121081))]; \n          if (v_index_121174 < 0) {\n            v__121099_0 = v__121097; \n          } else {\n            if (v_index_121174 >= v_VLength_3) {\n              v__121099_0 = v__121097; \n            } else {\n              v__121099_0 = v__121088[v_index_121174]; \n            }\n          }\n          v__121101_0 = mult(v__121099_0, v__121087[(v_l_id_121080 + (64 * v_MWidthC_1 * v_w_id_121079) + (v_MWidthC_1 * v_i_121081))]); \n          v__121095 = add(v__121101_0, v__121095); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_121082 = 0; \n          v__121104[v_l_id_121080] = id(v__121095); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_121083 = get_local_id(0); \n        float v_tmp_121177 = 0.0f; \n        v__105970 = v_tmp_121177; \n        /* reduce_seq */\n        for (int v_i_121084 = 0; v_i_121084 < v_MWidthC_1; v_i_121084 = (1 + v_i_121084)) {\n          v__105970 = add(v__105970, v__121104[(v_i_121084 + (v_MWidthC_1 * v_l_id_121083))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_121085 = 0; \n          v__121109[v_w_id_121079] = doubleMultiplyAdd(v__105970, v__121090, v__121089[v_w_id_121079], v__121091); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121079 = atomic_inc(v_work_idx_9626); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__121086",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121087",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121088",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121089",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121090",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121091",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121093",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121109",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__121104",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}