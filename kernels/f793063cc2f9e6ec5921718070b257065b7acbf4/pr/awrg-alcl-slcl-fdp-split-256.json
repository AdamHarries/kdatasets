{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130744, const global float* restrict v__130745, const global float* restrict v__130746, const global float* restrict v__130747, float v__130748, float v__130749, global float* v__130767, global int* v__130751, local float* v__130762, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130753; \n  float v__130755; \n  float v__105970; \n  /* Private Memory */\n  float v__130757_0;\n  \n  float v__130759_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10498 = v__130751; \n    local int v_w_id_130737; \n    if (get_local_id(0) == 0) {\n      v_w_id_130737 = atomic_inc(v_work_idx_10498); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130737 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10496; \n        v_work_idx_10496 = 0; \n        int v_l_id_130738 = atomic_inc(&(v_work_idx_10496)); \n        while((v_l_id_130738 < v_MWidthC_1)){\n          float v_tmp_130822 = 0.0f; \n          v__130753 = v_tmp_130822; \n          /* reduce_seq */\n          for (int v_i_130739 = 0; v_i_130739 < 256; v_i_130739 = (1 + v_i_130739)) {\n            float v_tmp_130823 = 0.0f; \n            v__130755 = v_tmp_130823; \n            int v_index_130824 = v__130744[(v_l_id_130738 + (256 * v_MWidthC_1 * v_w_id_130737) + (v_MWidthC_1 * v_i_130739))]; \n            if (v_index_130824 < 0) {\n              v__130757_0 = v__130755; \n            } else {\n              if (v_index_130824 >= v_VLength_3) {\n                v__130757_0 = v__130755; \n              } else {\n                v__130757_0 = v__130746[v_index_130824]; \n              }\n            }\n            v__130759_0 = mult(v__130757_0, v__130745[(v_l_id_130738 + (256 * v_MWidthC_1 * v_w_id_130737) + (v_MWidthC_1 * v_i_130739))]); \n            v__130753 = add(v__130759_0, v__130753); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130740 = 0; \n            v__130762[v_l_id_130738] = id(v__130753); \n          }\n          /* end map_seq */\n          v_l_id_130738 = atomic_inc(&(v_work_idx_10496)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_130741 = get_local_id(0); \n        float v_tmp_130827 = 0.0f; \n        v__105970 = v_tmp_130827; \n        /* reduce_seq */\n        for (int v_i_130742 = 0; v_i_130742 < v_MWidthC_1; v_i_130742 = (1 + v_i_130742)) {\n          v__105970 = add(v__105970, v__130762[(v_i_130742 + (v_MWidthC_1 * v_l_id_130741))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_130743 = 0; \n          v__130767[v_w_id_130737] = doubleMultiplyAdd(v__105970, v__130748, v__130747[v_w_id_130737], v__130749); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130737 = atomic_inc(v_work_idx_10498); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__130744",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130745",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130746",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130748",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130749",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130751",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130762",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}