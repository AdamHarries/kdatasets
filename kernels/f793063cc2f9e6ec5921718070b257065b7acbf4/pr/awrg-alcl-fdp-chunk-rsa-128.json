{
  "name" : "awrg-alcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__126196, const global float* restrict v__126197, const global float* restrict v__126198, const global float* restrict v__126199, float v__126200, float v__126201, global float* v__126216, global float* v__126215, global int* v__126203, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126204; \n  float v__126207; \n  /* Private Memory */\n  float v__126209_0;\n  \n  float v__126211_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10086 = v__126203; \n    local int v_w_id_126191; \n    if (get_local_id(0) == 0) {\n      v_w_id_126191 = atomic_inc(v_work_idx_10086); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126191 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10084; \n        v_work_idx_10084 = 0; \n        int v_l_id_126192 = atomic_inc(&(v_work_idx_10084)); \n        while((v_l_id_126192 < 128)){\n          float v_tmp_126248 = 0.0f; \n          v__126204 = v_tmp_126248; \n          /* reduce_seq */\n          int v_stop_126249 = min(v__126196[(1 + (v__126196[(v_l_id_126192 + (128 * v_w_id_126191))] / 4))], ((global int*)(v__126197 + (((global int*)(v__126197))[(v_l_id_126192 + (128 * v_w_id_126191))] / 4)))[1]); \n          for (int v_i_126193 = 0; v_i_126193 < v_stop_126249; v_i_126193 = (1 + v_i_126193)) {\n            float v_tmp_126257 = 0.0f; \n            v__126207 = v_tmp_126257; \n            int v_index_126259 = v__126196[(2 + v_i_126193 + (v__126196[(v_l_id_126192 + (128 * v_w_id_126191))] / 4))]; \n            if (v_index_126259 < 0) {\n              v__126209_0 = v__126207; \n            } else {\n              if (v_index_126259 >= v_MWidthC_1) {\n                v__126209_0 = v__126207; \n              } else {\n                v__126209_0 = v__126198[v_index_126259]; \n              }\n            }\n            v__126211_0 = mult(v__126197[(2 + v_i_126193 + (((global int*)(v__126197))[(v_l_id_126192 + (128 * v_w_id_126191))] / 4))], v__126209_0); \n            v__126204 = add(v__126204, v__126211_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126194 = 0; \n            v__126215[(v_l_id_126192 + (128 * v_w_id_126191))] = doubleMultiplyAdd(v__126204, v__126200, v__126199[(v_l_id_126192 + (128 * v_w_id_126191))], v__126201); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126195 = 0; \n            v__126216[(v_l_id_126192 + (128 * v_w_id_126191))] = id(v__126215[(v_l_id_126192 + (128 * v_w_id_126191))]); \n          }\n          /* end map_seq */\n          v_l_id_126192 = atomic_inc(&(v_work_idx_10084)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126191 = atomic_inc(v_work_idx_10086); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__126196",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126197",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126198",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__126199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126200",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126201",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126203",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126216",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}