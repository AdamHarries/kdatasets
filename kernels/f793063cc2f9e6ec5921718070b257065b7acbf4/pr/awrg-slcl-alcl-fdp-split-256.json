{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__129987, const global float* restrict v__129988, const global float* restrict v__129989, const global float* restrict v__129990, float v__129991, float v__129992, global float* v__130010, global int* v__129994, local float* v__130005, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__129996; \n  float v__129998; \n  float v__105970; \n  /* Private Memory */\n  float v__130000_0;\n  \n  float v__130002_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10424 = v__129994; \n    local int v_w_id_129980; \n    if (get_local_id(0) == 0) {\n      v_w_id_129980 = atomic_inc(v_work_idx_10424); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_129980 < v_MHeight_2)){\n      for (int v_l_id_129981 = get_local_id(0); v_l_id_129981 < v_MWidthC_1; v_l_id_129981 = (v_l_id_129981 + get_local_size(0))) {\n        float v_tmp_130069 = 0.0f; \n        v__129996 = v_tmp_130069; \n        /* reduce_seq */\n        for (int v_i_129982 = 0; v_i_129982 < 256; v_i_129982 = (1 + v_i_129982)) {\n          float v_tmp_130070 = 0.0f; \n          v__129998 = v_tmp_130070; \n          int v_index_130071 = v__129987[(v_l_id_129981 + (256 * v_MWidthC_1 * v_w_id_129980) + (v_MWidthC_1 * v_i_129982))]; \n          if (v_index_130071 < 0) {\n            v__130000_0 = v__129998; \n          } else {\n            if (v_index_130071 >= v_VLength_3) {\n              v__130000_0 = v__129998; \n            } else {\n              v__130000_0 = v__129989[v_index_130071]; \n            }\n          }\n          v__130002_0 = mult(v__130000_0, v__129988[(v_l_id_129981 + (256 * v_MWidthC_1 * v_w_id_129980) + (v_MWidthC_1 * v_i_129982))]); \n          v__129996 = add(v__130002_0, v__129996); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129983 = 0; \n          v__130005[v_l_id_129981] = id(v__129996); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10418; \n        v_work_idx_10418 = 0; \n        int v_l_id_129984 = atomic_inc(&(v_work_idx_10418)); \n        while((v_l_id_129984 < 1)){\n          float v_tmp_130074 = 0.0f; \n          v__105970 = v_tmp_130074; \n          /* reduce_seq */\n          for (int v_i_129985 = 0; v_i_129985 < v_MWidthC_1; v_i_129985 = (1 + v_i_129985)) {\n            v__105970 = add(v__105970, v__130005[(v_i_129985 + (v_MWidthC_1 * v_l_id_129984))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_129986 = 0; \n            v__130010[v_w_id_129980] = doubleMultiplyAdd(v__105970, v__129991, v__129990[v_w_id_129980], v__129992); \n          }\n          /* end map_seq */\n          v_l_id_129984 = atomic_inc(&(v_work_idx_10418)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_129980 = atomic_inc(v_work_idx_10424); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__129987",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129988",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129989",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__129990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__129991",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__129992",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__129994",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130005",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}