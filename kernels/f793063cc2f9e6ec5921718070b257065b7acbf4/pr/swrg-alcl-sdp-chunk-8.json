{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__106586, const global float* restrict v__106587, const global float* restrict v__106588, const global float* restrict v__106589, float v__106590, float v__106591, global float* v__106604, global float* v__106598, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106594; \n  float v__106599; \n  /* Private Memory */\n  float v__106596_0;\n  \n  for (int v_wg_id_106581 = get_group_id(0); v_wg_id_106581 < ((v_MHeight_2)/(8)); v_wg_id_106581 = (v_wg_id_106581 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8328; \n      v_work_idx_8328 = 0; \n      int v_l_id_106582 = atomic_inc(&(v_work_idx_8328)); \n      while((v_l_id_106582 < 8)){\n        /* map_seq */\n        for (int v_i_106583 = 0; v_i_106583 < v_MWidthC_1; v_i_106583 = (1 + v_i_106583)) {\n          float v_tmp_106644 = 0.0f; \n          v__106594 = v_tmp_106644; \n          int v_index_106645 = v__106586[(v_i_106583 + (8 * v_MWidthC_1 * v_wg_id_106581) + (v_MWidthC_1 * v_l_id_106582))]; \n          if (v_index_106645 < 0) {\n            v__106596_0 = v__106594; \n          } else {\n            if (v_index_106645 >= v_VLength_3) {\n              v__106596_0 = v__106594; \n            } else {\n              v__106596_0 = v__106588[v_index_106645]; \n            }\n          }\n          v__106598[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_106581) + (-1 * v_i_106583) + (v_MWidthC_1 * v_l_id_106582))] = mult(v__106596_0, v__106587[(v_i_106583 + (8 * v_MWidthC_1 * v_wg_id_106581) + (v_MWidthC_1 * v_l_id_106582))]); \n        }\n        /* end map_seq */\n        float v_tmp_106646 = 0.0f; \n        v__106599 = v_tmp_106646; \n        /* reduce_seq */\n        for (int v_i_106584 = 0; v_i_106584 < v_MWidthC_1; v_i_106584 = (1 + v_i_106584)) {\n          v__106599 = add(v__106599, v__106598[(v_i_106584 + (8 * v_MWidthC_1 * v_wg_id_106581) + (v_MWidthC_1 * v_l_id_106582))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_106585 = 0; \n          v__106604[(v_l_id_106582 + (8 * v_wg_id_106581))] = doubleMultiplyAdd(v__106599, v__106590, v__106589[(v_l_id_106582 + (8 * v_wg_id_106581))], v__106591); \n        }\n        /* end map_seq */\n        v_l_id_106582 = atomic_inc(&(v_work_idx_8328)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__106586",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106587",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106588",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106589",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106590",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106591",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__106598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__106604",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}