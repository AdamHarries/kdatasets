{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133378, const global float* restrict v__133379, const global float* restrict v__133380, const global float* restrict v__133381, float v__133382, float v__133383, global float* v__133397, global float* v__133391, global int* v__133385, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133387; \n  float v__133392; \n  /* Private Memory */\n  float v__133389_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10729 = v__133385; \n    local int v_w_id_133373; \n    if (get_local_id(0) == 0) {\n      v_w_id_133373 = atomic_inc(v_work_idx_10729); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_133373 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_133374 = get_local_id(0); v_l_id_133374 < 512; v_l_id_133374 = (v_l_id_133374 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_133375 = 0; v_i_133375 < v_MWidthC_1; v_i_133375 = (1 + v_i_133375)) {\n          float v_tmp_133440 = 0.0f; \n          v__133387 = v_tmp_133440; \n          int v_index_133441 = v__133378[(v_i_133375 + (512 * v_MWidthC_1 * v_w_id_133373) + (v_MWidthC_1 * v_l_id_133374))]; \n          if (v_index_133441 < 0) {\n            v__133389_0 = v__133387; \n          } else {\n            if (v_index_133441 >= v_VLength_3) {\n              v__133389_0 = v__133387; \n            } else {\n              v__133389_0 = v__133380[v_index_133441]; \n            }\n          }\n          v__133391[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_133373) + (-1 * v_i_133375) + (v_MWidthC_1 * v_l_id_133374))] = mult(v__133389_0, v__133379[(v_i_133375 + (512 * v_MWidthC_1 * v_w_id_133373) + (v_MWidthC_1 * v_l_id_133374))]); \n        }\n        /* end map_seq */\n        float v_tmp_133442 = 0.0f; \n        v__133392 = v_tmp_133442; \n        /* reduce_seq */\n        for (int v_i_133376 = 0; v_i_133376 < v_MWidthC_1; v_i_133376 = (1 + v_i_133376)) {\n          v__133392 = add(v__133392, v__133391[(v_i_133376 + (512 * v_MWidthC_1 * v_w_id_133373) + (v_MWidthC_1 * v_l_id_133374))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133377 = 0; \n          v__133397[(v_l_id_133374 + (512 * v_w_id_133373))] = doubleMultiplyAdd(v__133392, v__133382, v__133381[(v_l_id_133374 + (512 * v_w_id_133373))], v__133383); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_133373 = atomic_inc(v_work_idx_10729); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__133378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133380",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133381",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133382",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133383",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133385",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__133397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}