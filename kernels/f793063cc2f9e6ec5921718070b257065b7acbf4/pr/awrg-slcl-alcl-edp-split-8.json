{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108628, const global float* restrict v__108629, const global float* restrict v__108630, const global float* restrict v__108631, float v__108632, float v__108633, global float* v__108653, global int* v__108635, local float* v__108648, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108637; \n  float v__108639; \n  float v__105970; \n  /* Private Memory */\n  float v__108641_0;\n  \n  float v__108643_0;\n  \n  int v__108647_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8514 = v__108635; \n    local int v_w_id_108621; \n    if (get_local_id(0) == 0) {\n      v_w_id_108621 = atomic_inc(v_work_idx_8514); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108621 < v_MHeight_2)){\n      for (int v_l_id_108622 = get_local_id(0); v_l_id_108622 < v_MWidthC_1; v_l_id_108622 = (v_l_id_108622 + get_local_size(0))) {\n        float v_tmp_108715 = 0.0f; \n        v__108637 = v_tmp_108715; \n        /* reduce_while_seq */\n        for (int v_i_108623 = 0; v_i_108623 < 8; v_i_108623 = (1 + v_i_108623)) {\n          v__108647_0 = check(v__108637, v__108628[(v_l_id_108622 + (8 * v_MWidthC_1 * v_w_id_108621) + (v_MWidthC_1 * v_i_108623))]); \n          if (v__108647_0) {\n          } else {\n            break;\n          }\n          float v_tmp_108716 = 0.0f; \n          v__108639 = v_tmp_108716; \n          int v_index_108717 = v__108628[(v_l_id_108622 + (8 * v_MWidthC_1 * v_w_id_108621) + (v_MWidthC_1 * v_i_108623))]; \n          if (v_index_108717 < 0) {\n            v__108641_0 = v__108639; \n          } else {\n            if (v_index_108717 >= v_VLength_3) {\n              v__108641_0 = v__108639; \n            } else {\n              v__108641_0 = v__108630[v_index_108717]; \n            }\n          }\n          v__108643_0 = mult(v__108641_0, v__108629[(v_l_id_108622 + (8 * v_MWidthC_1 * v_w_id_108621) + (v_MWidthC_1 * v_i_108623))]); \n          v__108637 = add(v__108643_0, v__108637); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108624 = 0; \n          v__108648[v_l_id_108622] = id(v__108637); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8508; \n        v_work_idx_8508 = 0; \n        int v_l_id_108625 = atomic_inc(&(v_work_idx_8508)); \n        while((v_l_id_108625 < 1)){\n          float v_tmp_108720 = 0.0f; \n          v__105970 = v_tmp_108720; \n          /* reduce_seq */\n          for (int v_i_108626 = 0; v_i_108626 < v_MWidthC_1; v_i_108626 = (1 + v_i_108626)) {\n            v__105970 = add(v__105970, v__108648[(v_i_108626 + (v_MWidthC_1 * v_l_id_108625))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_108627 = 0; \n            v__108653[v_w_id_108621] = doubleMultiplyAdd(v__105970, v__108632, v__108631[v_w_id_108621], v__108633); \n          }\n          /* end map_seq */\n          v_l_id_108625 = atomic_inc(&(v_work_idx_8508)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108621 = atomic_inc(v_work_idx_8514); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__108628",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108629",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108630",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108632",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108633",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108635",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__108648",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}