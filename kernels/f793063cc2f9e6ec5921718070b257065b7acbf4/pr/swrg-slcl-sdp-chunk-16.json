{
  "name" : "swrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__109766, const global float* restrict v__109767, const global float* restrict v__109768, const global float* restrict v__109769, float v__109770, float v__109771, global float* v__109784, global float* v__109778, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__109774; \n  float v__109779; \n  /* Private Memory */\n  float v__109776_0;\n  \n  for (int v_wg_id_109761 = get_group_id(0); v_wg_id_109761 < ((v_MHeight_2)/(16)); v_wg_id_109761 = (v_wg_id_109761 + get_num_groups(0))) {\n    for (int v_l_id_109762 = get_local_id(0); v_l_id_109762 < 16; v_l_id_109762 = (v_l_id_109762 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_109763 = 0; v_i_109763 < v_MWidthC_1; v_i_109763 = (1 + v_i_109763)) {\n        float v_tmp_109828 = 0.0f; \n        v__109774 = v_tmp_109828; \n        int v_index_109829 = v__109766[(v_i_109763 + (16 * v_MWidthC_1 * v_wg_id_109761) + (v_MWidthC_1 * v_l_id_109762))]; \n        if (v_index_109829 < 0) {\n          v__109776_0 = v__109774; \n        } else {\n          if (v_index_109829 >= v_VLength_3) {\n            v__109776_0 = v__109774; \n          } else {\n            v__109776_0 = v__109768[v_index_109829]; \n          }\n        }\n        v__109778[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_109761) + (-1 * v_i_109763) + (v_MWidthC_1 * v_l_id_109762))] = mult(v__109776_0, v__109767[(v_i_109763 + (16 * v_MWidthC_1 * v_wg_id_109761) + (v_MWidthC_1 * v_l_id_109762))]); \n      }\n      /* end map_seq */\n      float v_tmp_109830 = 0.0f; \n      v__109779 = v_tmp_109830; \n      /* reduce_seq */\n      for (int v_i_109764 = 0; v_i_109764 < v_MWidthC_1; v_i_109764 = (1 + v_i_109764)) {\n        v__109779 = add(v__109779, v__109778[(v_i_109764 + (16 * v_MWidthC_1 * v_wg_id_109761) + (v_MWidthC_1 * v_l_id_109762))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_109765 = 0; \n        v__109784[(v_l_id_109762 + (16 * v_wg_id_109761))] = doubleMultiplyAdd(v__109779, v__109770, v__109769[(v_l_id_109762 + (16 * v_wg_id_109761))], v__109771); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__109766",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109768",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__109769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__109770",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__109771",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__109778",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__109784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}