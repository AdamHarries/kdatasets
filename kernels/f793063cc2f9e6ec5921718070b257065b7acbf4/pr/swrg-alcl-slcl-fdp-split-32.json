{
  "name" : "swrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115723, const global float* restrict v__115724, const global float* restrict v__115725, const global float* restrict v__115726, float v__115727, float v__115728, global float* v__115745, local float* v__115740, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115731; \n  float v__115733; \n  float v__105970; \n  /* Private Memory */\n  float v__115735_0;\n  \n  float v__115737_0;\n  \n  for (int v_wg_id_115716 = get_group_id(0); v_wg_id_115716 < v_MHeight_2; v_wg_id_115716 = (v_wg_id_115716 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9145; \n      v_work_idx_9145 = 0; \n      int v_l_id_115717 = atomic_inc(&(v_work_idx_9145)); \n      while((v_l_id_115717 < v_MWidthC_1)){\n        float v_tmp_115802 = 0.0f; \n        v__115731 = v_tmp_115802; \n        /* reduce_seq */\n        for (int v_i_115718 = 0; v_i_115718 < 32; v_i_115718 = (1 + v_i_115718)) {\n          float v_tmp_115803 = 0.0f; \n          v__115733 = v_tmp_115803; \n          int v_index_115804 = v__115723[(v_l_id_115717 + (32 * v_MWidthC_1 * v_wg_id_115716) + (v_MWidthC_1 * v_i_115718))]; \n          if (v_index_115804 < 0) {\n            v__115735_0 = v__115733; \n          } else {\n            if (v_index_115804 >= v_VLength_3) {\n              v__115735_0 = v__115733; \n            } else {\n              v__115735_0 = v__115725[v_index_115804]; \n            }\n          }\n          v__115737_0 = mult(v__115735_0, v__115724[(v_l_id_115717 + (32 * v_MWidthC_1 * v_wg_id_115716) + (v_MWidthC_1 * v_i_115718))]); \n          v__115731 = add(v__115737_0, v__115731); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115719 = 0; \n          v__115740[v_l_id_115717] = id(v__115731); \n        }\n        /* end map_seq */\n        v_l_id_115717 = atomic_inc(&(v_work_idx_9145)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_115720 = get_local_id(0); \n      float v_tmp_115807 = 0.0f; \n      v__105970 = v_tmp_115807; \n      /* reduce_seq */\n      for (int v_i_115721 = 0; v_i_115721 < v_MWidthC_1; v_i_115721 = (1 + v_i_115721)) {\n        v__105970 = add(v__105970, v__115740[(v_i_115721 + (v_MWidthC_1 * v_l_id_115720))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_115722 = 0; \n        v__115745[v_wg_id_115716] = doubleMultiplyAdd(v__105970, v__115727, v__115726[v_wg_id_115716], v__115728); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__115723",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115724",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115725",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115727",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115728",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__115745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__115740",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}