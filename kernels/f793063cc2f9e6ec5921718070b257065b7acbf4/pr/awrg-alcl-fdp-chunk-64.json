{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121679, const global float* restrict v__121680, const global float* restrict v__121681, const global float* restrict v__121682, float v__121683, float v__121684, global float* v__121698, global int* v__121686, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121688; \n  float v__121690; \n  /* Private Memory */\n  float v__121692_0;\n  \n  float v__121694_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9681 = v__121686; \n    local int v_w_id_121675; \n    if (get_local_id(0) == 0) {\n      v_w_id_121675 = atomic_inc(v_work_idx_9681); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121675 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9679; \n        v_work_idx_9679 = 0; \n        int v_l_id_121676 = atomic_inc(&(v_work_idx_9679)); \n        while((v_l_id_121676 < 64)){\n          float v_tmp_121735 = 0.0f; \n          v__121688 = v_tmp_121735; \n          /* reduce_seq */\n          for (int v_i_121677 = 0; v_i_121677 < v_MWidthC_1; v_i_121677 = (1 + v_i_121677)) {\n            float v_tmp_121736 = 0.0f; \n            v__121690 = v_tmp_121736; \n            int v_index_121737 = v__121679[(v_i_121677 + (64 * v_MWidthC_1 * v_w_id_121675) + (v_MWidthC_1 * v_l_id_121676))]; \n            if (v_index_121737 < 0) {\n              v__121692_0 = v__121690; \n            } else {\n              if (v_index_121737 >= v_VLength_3) {\n                v__121692_0 = v__121690; \n              } else {\n                v__121692_0 = v__121681[v_index_121737]; \n              }\n            }\n            v__121694_0 = mult(v__121692_0, v__121680[(v_i_121677 + (64 * v_MWidthC_1 * v_w_id_121675) + (v_MWidthC_1 * v_l_id_121676))]); \n            v__121688 = add(v__121694_0, v__121688); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121678 = 0; \n            v__121698[(v_l_id_121676 + (64 * v_w_id_121675))] = doubleMultiplyAdd(v__121688, v__121683, v__121682[(v_l_id_121676 + (64 * v_w_id_121675))], v__121684); \n          }\n          /* end map_seq */\n          v_l_id_121676 = atomic_inc(&(v_work_idx_9679)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121675 = atomic_inc(v_work_idx_9681); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__121679",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121680",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121681",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121682",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121683",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121684",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121686",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121698",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}