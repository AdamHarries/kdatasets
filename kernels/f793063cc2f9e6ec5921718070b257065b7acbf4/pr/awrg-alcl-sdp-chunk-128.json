{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125900, const global float* restrict v__125901, const global float* restrict v__125902, const global float* restrict v__125903, float v__125904, float v__125905, global float* v__125919, global float* v__125913, global int* v__125907, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125909; \n  float v__125914; \n  /* Private Memory */\n  float v__125911_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10058 = v__125907; \n    local int v_w_id_125895; \n    if (get_local_id(0) == 0) {\n      v_w_id_125895 = atomic_inc(v_work_idx_10058); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125895 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10056; \n        v_work_idx_10056 = 0; \n        int v_l_id_125896 = atomic_inc(&(v_work_idx_10056)); \n        while((v_l_id_125896 < 128)){\n          /* map_seq */\n          for (int v_i_125897 = 0; v_i_125897 < v_MWidthC_1; v_i_125897 = (1 + v_i_125897)) {\n            float v_tmp_125958 = 0.0f; \n            v__125909 = v_tmp_125958; \n            int v_index_125959 = v__125900[(v_i_125897 + (128 * v_MWidthC_1 * v_w_id_125895) + (v_MWidthC_1 * v_l_id_125896))]; \n            if (v_index_125959 < 0) {\n              v__125911_0 = v__125909; \n            } else {\n              if (v_index_125959 >= v_VLength_3) {\n                v__125911_0 = v__125909; \n              } else {\n                v__125911_0 = v__125902[v_index_125959]; \n              }\n            }\n            v__125913[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_125895) + (-1 * v_i_125897) + (v_MWidthC_1 * v_l_id_125896))] = mult(v__125911_0, v__125901[(v_i_125897 + (128 * v_MWidthC_1 * v_w_id_125895) + (v_MWidthC_1 * v_l_id_125896))]); \n          }\n          /* end map_seq */\n          float v_tmp_125960 = 0.0f; \n          v__125914 = v_tmp_125960; \n          /* reduce_seq */\n          for (int v_i_125898 = 0; v_i_125898 < v_MWidthC_1; v_i_125898 = (1 + v_i_125898)) {\n            v__125914 = add(v__125914, v__125913[(v_i_125898 + (128 * v_MWidthC_1 * v_w_id_125895) + (v_MWidthC_1 * v_l_id_125896))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_125899 = 0; \n            v__125919[(v_l_id_125896 + (128 * v_w_id_125895))] = doubleMultiplyAdd(v__125914, v__125904, v__125903[(v_l_id_125896 + (128 * v_w_id_125895))], v__125905); \n          }\n          /* end map_seq */\n          v_l_id_125896 = atomic_inc(&(v_work_idx_10056)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125895 = atomic_inc(v_work_idx_10058); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__125900",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125902",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125903",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125904",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125905",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125913",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125907",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125919",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}