{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126549, const global float* restrict v__126550, const global float* restrict v__126551, const global float* restrict v__126552, float v__126553, float v__126554, global float* v__126574, global int* v__126556, local float* v__126569, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126558; \n  float v__126560; \n  float v__105970; \n  /* Private Memory */\n  float v__126562_0;\n  \n  float v__126564_0;\n  \n  int v__126568_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10124 = v__126556; \n    local int v_w_id_126542; \n    if (get_local_id(0) == 0) {\n      v_w_id_126542 = atomic_inc(v_work_idx_10124); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126542 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10122; \n        v_work_idx_10122 = 0; \n        int v_l_id_126543 = atomic_inc(&(v_work_idx_10122)); \n        while((v_l_id_126543 < v_MWidthC_1)){\n          float v_tmp_126632 = 0.0f; \n          v__126558 = v_tmp_126632; \n          /* reduce_while_seq */\n          for (int v_i_126544 = 0; v_i_126544 < 128; v_i_126544 = (1 + v_i_126544)) {\n            v__126568_0 = check(v__126558, v__126549[(v_l_id_126543 + (128 * v_MWidthC_1 * v_w_id_126542) + (v_MWidthC_1 * v_i_126544))]); \n            if (v__126568_0) {\n            } else {\n              break;\n            }\n            float v_tmp_126633 = 0.0f; \n            v__126560 = v_tmp_126633; \n            int v_index_126634 = v__126549[(v_l_id_126543 + (128 * v_MWidthC_1 * v_w_id_126542) + (v_MWidthC_1 * v_i_126544))]; \n            if (v_index_126634 < 0) {\n              v__126562_0 = v__126560; \n            } else {\n              if (v_index_126634 >= v_VLength_3) {\n                v__126562_0 = v__126560; \n              } else {\n                v__126562_0 = v__126551[v_index_126634]; \n              }\n            }\n            v__126564_0 = mult(v__126562_0, v__126550[(v_l_id_126543 + (128 * v_MWidthC_1 * v_w_id_126542) + (v_MWidthC_1 * v_i_126544))]); \n            v__126558 = add(v__126564_0, v__126558); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126545 = 0; \n            v__126569[v_l_id_126543] = id(v__126558); \n          }\n          /* end map_seq */\n          v_l_id_126543 = atomic_inc(&(v_work_idx_10122)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_126546 = get_local_id(0); \n        float v_tmp_126637 = 0.0f; \n        v__105970 = v_tmp_126637; \n        /* reduce_seq */\n        for (int v_i_126547 = 0; v_i_126547 < v_MWidthC_1; v_i_126547 = (1 + v_i_126547)) {\n          v__105970 = add(v__105970, v__126569[(v_i_126547 + (v_MWidthC_1 * v_l_id_126546))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_126548 = 0; \n          v__126574[v_w_id_126542] = doubleMultiplyAdd(v__105970, v__126553, v__126552[v_w_id_126542], v__126554); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126542 = atomic_inc(v_work_idx_10124); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__126549",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126550",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126551",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126552",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126553",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126554",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126556",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__126569",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}