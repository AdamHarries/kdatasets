{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117965, const global float* restrict v__117966, const global float* restrict v__117967, const global float* restrict v__117968, float v__117969, float v__117970, global float* v__117990, global int* v__117972, local float* v__117985, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117974; \n  float v__117976; \n  float v__105970; \n  /* Private Memory */\n  float v__117978_0;\n  \n  float v__117980_0;\n  \n  int v__117984_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9356 = v__117972; \n    local int v_w_id_117958; \n    if (get_local_id(0) == 0) {\n      v_w_id_117958 = atomic_inc(v_work_idx_9356); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117958 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9354; \n        v_work_idx_9354 = 0; \n        int v_l_id_117959 = atomic_inc(&(v_work_idx_9354)); \n        while((v_l_id_117959 < v_MWidthC_1)){\n          float v_tmp_118048 = 0.0f; \n          v__117974 = v_tmp_118048; \n          /* reduce_while_seq */\n          for (int v_i_117960 = 0; v_i_117960 < 32; v_i_117960 = (1 + v_i_117960)) {\n            v__117984_0 = check(v__117974, v__117965[(v_l_id_117959 + (32 * v_MWidthC_1 * v_w_id_117958) + (v_MWidthC_1 * v_i_117960))]); \n            if (v__117984_0) {\n            } else {\n              break;\n            }\n            float v_tmp_118049 = 0.0f; \n            v__117976 = v_tmp_118049; \n            int v_index_118050 = v__117965[(v_l_id_117959 + (32 * v_MWidthC_1 * v_w_id_117958) + (v_MWidthC_1 * v_i_117960))]; \n            if (v_index_118050 < 0) {\n              v__117978_0 = v__117976; \n            } else {\n              if (v_index_118050 >= v_VLength_3) {\n                v__117978_0 = v__117976; \n              } else {\n                v__117978_0 = v__117967[v_index_118050]; \n              }\n            }\n            v__117980_0 = mult(v__117978_0, v__117966[(v_l_id_117959 + (32 * v_MWidthC_1 * v_w_id_117958) + (v_MWidthC_1 * v_i_117960))]); \n            v__117974 = add(v__117980_0, v__117974); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117961 = 0; \n            v__117985[v_l_id_117959] = id(v__117974); \n          }\n          /* end map_seq */\n          v_l_id_117959 = atomic_inc(&(v_work_idx_9354)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_117962 = get_local_id(0); \n        float v_tmp_118053 = 0.0f; \n        v__105970 = v_tmp_118053; \n        /* reduce_seq */\n        for (int v_i_117963 = 0; v_i_117963 < v_MWidthC_1; v_i_117963 = (1 + v_i_117963)) {\n          v__105970 = add(v__105970, v__117985[(v_i_117963 + (v_MWidthC_1 * v_l_id_117962))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_117964 = 0; \n          v__117990[v_w_id_117958] = doubleMultiplyAdd(v__105970, v__117969, v__117968[v_w_id_117958], v__117970); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117958 = atomic_inc(v_work_idx_9356); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__117965",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117966",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117967",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117969",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117970",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117972",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__117985",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}