{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121403, const global float* restrict v__121404, const global float* restrict v__121405, const global float* restrict v__121406, float v__121407, float v__121408, global float* v__121426, global int* v__121410, local float* v__121421, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121412; \n  float v__121414; \n  float v__105970; \n  /* Private Memory */\n  float v__121416_0;\n  \n  float v__121418_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9656 = v__121410; \n    local int v_w_id_121396; \n    if (get_local_id(0) == 0) {\n      v_w_id_121396 = atomic_inc(v_work_idx_9656); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121396 < v_MHeight_2)){\n      for (int v_l_id_121397 = get_local_id(0); v_l_id_121397 < v_MWidthC_1; v_l_id_121397 = (v_l_id_121397 + get_local_size(0))) {\n        float v_tmp_121485 = 0.0f; \n        v__121412 = v_tmp_121485; \n        /* reduce_seq */\n        for (int v_i_121398 = 0; v_i_121398 < 64; v_i_121398 = (1 + v_i_121398)) {\n          float v_tmp_121486 = 0.0f; \n          v__121414 = v_tmp_121486; \n          int v_index_121487 = v__121403[(v_l_id_121397 + (64 * v_MWidthC_1 * v_w_id_121396) + (v_MWidthC_1 * v_i_121398))]; \n          if (v_index_121487 < 0) {\n            v__121416_0 = v__121414; \n          } else {\n            if (v_index_121487 >= v_VLength_3) {\n              v__121416_0 = v__121414; \n            } else {\n              v__121416_0 = v__121405[v_index_121487]; \n            }\n          }\n          v__121418_0 = mult(v__121416_0, v__121404[(v_l_id_121397 + (64 * v_MWidthC_1 * v_w_id_121396) + (v_MWidthC_1 * v_i_121398))]); \n          v__121412 = add(v__121418_0, v__121412); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_121399 = 0; \n          v__121421[v_l_id_121397] = id(v__121412); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9650; \n        v_work_idx_9650 = 0; \n        int v_l_id_121400 = atomic_inc(&(v_work_idx_9650)); \n        while((v_l_id_121400 < 1)){\n          float v_tmp_121490 = 0.0f; \n          v__105970 = v_tmp_121490; \n          /* reduce_seq */\n          for (int v_i_121401 = 0; v_i_121401 < v_MWidthC_1; v_i_121401 = (1 + v_i_121401)) {\n            v__105970 = add(v__105970, v__121421[(v_i_121401 + (v_MWidthC_1 * v_l_id_121400))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121402 = 0; \n            v__121426[v_w_id_121396] = doubleMultiplyAdd(v__105970, v__121407, v__121406[v_w_id_121396], v__121408); \n          }\n          /* end map_seq */\n          v_l_id_121400 = atomic_inc(&(v_work_idx_9650)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121396 = atomic_inc(v_work_idx_9656); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__121403",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121404",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121405",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121407",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121408",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121410",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121426",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__121421",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}