{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132793, const global float* restrict v__132794, const global float* restrict v__132795, const global float* restrict v__132796, float v__132797, float v__132798, global float* v__132815, global float* v__132805, local float* v__132810, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132801; \n  float v__132806; \n  float v__105970; \n  /* Private Memory */\n  float v__132803_0;\n  \n  for (int v_wg_id_132785 = get_group_id(0); v_wg_id_132785 < v_MHeight_2; v_wg_id_132785 = (v_wg_id_132785 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10672; \n      v_work_idx_10672 = 0; \n      int v_l_id_132786 = atomic_inc(&(v_work_idx_10672)); \n      while((v_l_id_132786 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_132787 = 0; v_i_132787 < 512; v_i_132787 = (1 + v_i_132787)) {\n          float v_tmp_132872 = 0.0f; \n          v__132801 = v_tmp_132872; \n          int v_index_132873 = v__132793[(v_l_id_132786 + (512 * v_MWidthC_1 * v_wg_id_132785) + (v_MWidthC_1 * v_i_132787))]; \n          if (v_index_132873 < 0) {\n            v__132803_0 = v__132801; \n          } else {\n            if (v_index_132873 >= v_VLength_3) {\n              v__132803_0 = v__132801; \n            } else {\n              v__132803_0 = v__132795[v_index_132873]; \n            }\n          }\n          v__132805[(511 + (512 * v_MWidthC_1 * v_wg_id_132785) + (-1 * v_i_132787) + (512 * v_l_id_132786))] = mult(v__132803_0, v__132794[(v_l_id_132786 + (512 * v_MWidthC_1 * v_wg_id_132785) + (v_MWidthC_1 * v_i_132787))]); \n        }\n        /* end map_seq */\n        float v_tmp_132874 = 0.0f; \n        v__132806 = v_tmp_132874; \n        /* reduce_seq */\n        for (int v_i_132788 = 0; v_i_132788 < 512; v_i_132788 = (1 + v_i_132788)) {\n          v__132806 = add(v__132806, v__132805[(v_i_132788 + (512 * v_MWidthC_1 * v_wg_id_132785) + (512 * v_l_id_132786))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132789 = 0; \n          v__132810[v_l_id_132786] = id(v__132806); \n        }\n        /* end map_seq */\n        v_l_id_132786 = atomic_inc(&(v_work_idx_10672)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_132790 = get_local_id(0); \n      float v_tmp_132877 = 0.0f; \n      v__105970 = v_tmp_132877; \n      /* reduce_seq */\n      for (int v_i_132791 = 0; v_i_132791 < v_MWidthC_1; v_i_132791 = (1 + v_i_132791)) {\n        v__105970 = add(v__105970, v__132810[(v_i_132791 + (v_MWidthC_1 * v_l_id_132790))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_132792 = 0; \n        v__132815[v_wg_id_132785] = doubleMultiplyAdd(v__105970, v__132797, v__132796[v_wg_id_132785], v__132798); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__132793",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132794",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132795",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132796",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132797",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132798",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__132805",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__132815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__132810",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}