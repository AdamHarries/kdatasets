{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120217, const global float* restrict v__120218, const global float* restrict v__120219, const global float* restrict v__120220, float v__120221, float v__120222, global float* v__120239, global float* v__120229, local float* v__120234, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120225; \n  float v__120230; \n  float v__105970; \n  /* Private Memory */\n  float v__120227_0;\n  \n  for (int v_wg_id_120209 = get_group_id(0); v_wg_id_120209 < v_MHeight_2; v_wg_id_120209 = (v_wg_id_120209 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9549; \n      v_work_idx_9549 = 0; \n      int v_l_id_120210 = atomic_inc(&(v_work_idx_9549)); \n      while((v_l_id_120210 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_120211 = 0; v_i_120211 < 64; v_i_120211 = (1 + v_i_120211)) {\n          float v_tmp_120292 = 0.0f; \n          v__120225 = v_tmp_120292; \n          int v_index_120293 = v__120217[(v_l_id_120210 + (64 * v_MWidthC_1 * v_wg_id_120209) + (v_MWidthC_1 * v_i_120211))]; \n          if (v_index_120293 < 0) {\n            v__120227_0 = v__120225; \n          } else {\n            if (v_index_120293 >= v_VLength_3) {\n              v__120227_0 = v__120225; \n            } else {\n              v__120227_0 = v__120219[v_index_120293]; \n            }\n          }\n          v__120229[(63 + (64 * v_MWidthC_1 * v_wg_id_120209) + (-1 * v_i_120211) + (64 * v_l_id_120210))] = mult(v__120227_0, v__120218[(v_l_id_120210 + (64 * v_MWidthC_1 * v_wg_id_120209) + (v_MWidthC_1 * v_i_120211))]); \n        }\n        /* end map_seq */\n        float v_tmp_120294 = 0.0f; \n        v__120230 = v_tmp_120294; \n        /* reduce_seq */\n        for (int v_i_120212 = 0; v_i_120212 < 64; v_i_120212 = (1 + v_i_120212)) {\n          v__120230 = add(v__120230, v__120229[(v_i_120212 + (64 * v_MWidthC_1 * v_wg_id_120209) + (64 * v_l_id_120210))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120213 = 0; \n          v__120234[v_l_id_120210] = id(v__120230); \n        }\n        /* end map_seq */\n        v_l_id_120210 = atomic_inc(&(v_work_idx_9549)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9543; \n      v_work_idx_9543 = 0; \n      int v_l_id_120214 = atomic_inc(&(v_work_idx_9543)); \n      while((v_l_id_120214 < 1)){\n        float v_tmp_120297 = 0.0f; \n        v__105970 = v_tmp_120297; \n        /* reduce_seq */\n        for (int v_i_120215 = 0; v_i_120215 < v_MWidthC_1; v_i_120215 = (1 + v_i_120215)) {\n          v__105970 = add(v__105970, v__120234[(v_i_120215 + (v_MWidthC_1 * v_l_id_120214))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120216 = 0; \n          v__120239[v_wg_id_120209] = doubleMultiplyAdd(v__105970, v__120221, v__120220[v_wg_id_120209], v__120222); \n        }\n        /* end map_seq */\n        v_l_id_120214 = atomic_inc(&(v_work_idx_9543)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__120217",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120218",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120219",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120220",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120221",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120222",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__120229",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__120239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__120234",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}