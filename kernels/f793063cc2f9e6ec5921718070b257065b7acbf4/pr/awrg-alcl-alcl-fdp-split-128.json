{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126745, const global float* restrict v__126746, const global float* restrict v__126747, const global float* restrict v__126748, float v__126749, float v__126750, global float* v__126768, global int* v__126752, local float* v__126763, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126754; \n  float v__126756; \n  float v__105970; \n  /* Private Memory */\n  float v__126758_0;\n  \n  float v__126760_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10147 = v__126752; \n    local int v_w_id_126738; \n    if (get_local_id(0) == 0) {\n      v_w_id_126738 = atomic_inc(v_work_idx_10147); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126738 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10145; \n        v_work_idx_10145 = 0; \n        int v_l_id_126739 = atomic_inc(&(v_work_idx_10145)); \n        while((v_l_id_126739 < v_MWidthC_1)){\n          float v_tmp_126819 = 0.0f; \n          v__126754 = v_tmp_126819; \n          /* reduce_seq */\n          for (int v_i_126740 = 0; v_i_126740 < 128; v_i_126740 = (1 + v_i_126740)) {\n            float v_tmp_126820 = 0.0f; \n            v__126756 = v_tmp_126820; \n            int v_index_126821 = v__126745[(v_l_id_126739 + (128 * v_MWidthC_1 * v_w_id_126738) + (v_MWidthC_1 * v_i_126740))]; \n            if (v_index_126821 < 0) {\n              v__126758_0 = v__126756; \n            } else {\n              if (v_index_126821 >= v_VLength_3) {\n                v__126758_0 = v__126756; \n              } else {\n                v__126758_0 = v__126747[v_index_126821]; \n              }\n            }\n            v__126760_0 = mult(v__126758_0, v__126746[(v_l_id_126739 + (128 * v_MWidthC_1 * v_w_id_126738) + (v_MWidthC_1 * v_i_126740))]); \n            v__126754 = add(v__126760_0, v__126754); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126741 = 0; \n            v__126763[v_l_id_126739] = id(v__126754); \n          }\n          /* end map_seq */\n          v_l_id_126739 = atomic_inc(&(v_work_idx_10145)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10140; \n        v_work_idx_10140 = 0; \n        int v_l_id_126742 = atomic_inc(&(v_work_idx_10140)); \n        while((v_l_id_126742 < 1)){\n          float v_tmp_126824 = 0.0f; \n          v__105970 = v_tmp_126824; \n          /* reduce_seq */\n          for (int v_i_126743 = 0; v_i_126743 < v_MWidthC_1; v_i_126743 = (1 + v_i_126743)) {\n            v__105970 = add(v__105970, v__126763[(v_i_126743 + (v_MWidthC_1 * v_l_id_126742))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126744 = 0; \n            v__126768[v_w_id_126738] = doubleMultiplyAdd(v__105970, v__126749, v__126748[v_w_id_126738], v__126750); \n          }\n          /* end map_seq */\n          v_l_id_126742 = atomic_inc(&(v_work_idx_10140)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126738 = atomic_inc(v_work_idx_10147); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__126745",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126746",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126747",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126748",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126749",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126750",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126752",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126768",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__126763",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}