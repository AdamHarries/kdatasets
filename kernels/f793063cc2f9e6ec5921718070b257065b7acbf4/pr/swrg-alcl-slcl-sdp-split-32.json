{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115625, const global float* restrict v__115626, const global float* restrict v__115627, const global float* restrict v__115628, float v__115629, float v__115630, global float* v__115647, global float* v__115637, local float* v__115642, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115633; \n  float v__115638; \n  float v__105970; \n  /* Private Memory */\n  float v__115635_0;\n  \n  for (int v_wg_id_115617 = get_group_id(0); v_wg_id_115617 < v_MHeight_2; v_wg_id_115617 = (v_wg_id_115617 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9136; \n      v_work_idx_9136 = 0; \n      int v_l_id_115618 = atomic_inc(&(v_work_idx_9136)); \n      while((v_l_id_115618 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_115619 = 0; v_i_115619 < 32; v_i_115619 = (1 + v_i_115619)) {\n          float v_tmp_115704 = 0.0f; \n          v__115633 = v_tmp_115704; \n          int v_index_115705 = v__115625[(v_l_id_115618 + (32 * v_MWidthC_1 * v_wg_id_115617) + (v_MWidthC_1 * v_i_115619))]; \n          if (v_index_115705 < 0) {\n            v__115635_0 = v__115633; \n          } else {\n            if (v_index_115705 >= v_VLength_3) {\n              v__115635_0 = v__115633; \n            } else {\n              v__115635_0 = v__115627[v_index_115705]; \n            }\n          }\n          v__115637[(31 + (32 * v_MWidthC_1 * v_wg_id_115617) + (-1 * v_i_115619) + (32 * v_l_id_115618))] = mult(v__115635_0, v__115626[(v_l_id_115618 + (32 * v_MWidthC_1 * v_wg_id_115617) + (v_MWidthC_1 * v_i_115619))]); \n        }\n        /* end map_seq */\n        float v_tmp_115706 = 0.0f; \n        v__115638 = v_tmp_115706; \n        /* reduce_seq */\n        for (int v_i_115620 = 0; v_i_115620 < 32; v_i_115620 = (1 + v_i_115620)) {\n          v__115638 = add(v__115638, v__115637[(v_i_115620 + (32 * v_MWidthC_1 * v_wg_id_115617) + (32 * v_l_id_115618))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115621 = 0; \n          v__115642[v_l_id_115618] = id(v__115638); \n        }\n        /* end map_seq */\n        v_l_id_115618 = atomic_inc(&(v_work_idx_9136)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_115622 = get_local_id(0); \n      float v_tmp_115709 = 0.0f; \n      v__105970 = v_tmp_115709; \n      /* reduce_seq */\n      for (int v_i_115623 = 0; v_i_115623 < v_MWidthC_1; v_i_115623 = (1 + v_i_115623)) {\n        v__105970 = add(v__105970, v__115642[(v_i_115623 + (v_MWidthC_1 * v_l_id_115622))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_115624 = 0; \n        v__115647[v_wg_id_115617] = doubleMultiplyAdd(v__105970, v__115629, v__115628[v_wg_id_115617], v__115630); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__115625",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115626",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115627",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115629",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115630",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115637",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__115647",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__115642",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}