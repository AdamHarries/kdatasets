{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133187, const global float* restrict v__133188, const global float* restrict v__133189, const global float* restrict v__133190, float v__133191, float v__133192, global float* v__133209, local float* v__133204, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133195; \n  float v__133197; \n  float v__105970; \n  /* Private Memory */\n  float v__133199_0;\n  \n  float v__133201_0;\n  \n  for (int v_wg_id_133180 = get_group_id(0); v_wg_id_133180 < v_MHeight_2; v_wg_id_133180 = (v_wg_id_133180 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10711; \n      v_work_idx_10711 = 0; \n      int v_l_id_133181 = atomic_inc(&(v_work_idx_10711)); \n      while((v_l_id_133181 < v_MWidthC_1)){\n        float v_tmp_133262 = 0.0f; \n        v__133195 = v_tmp_133262; \n        /* reduce_seq */\n        for (int v_i_133182 = 0; v_i_133182 < 512; v_i_133182 = (1 + v_i_133182)) {\n          float v_tmp_133263 = 0.0f; \n          v__133197 = v_tmp_133263; \n          int v_index_133264 = v__133187[(v_l_id_133181 + (512 * v_MWidthC_1 * v_wg_id_133180) + (v_MWidthC_1 * v_i_133182))]; \n          if (v_index_133264 < 0) {\n            v__133199_0 = v__133197; \n          } else {\n            if (v_index_133264 >= v_VLength_3) {\n              v__133199_0 = v__133197; \n            } else {\n              v__133199_0 = v__133189[v_index_133264]; \n            }\n          }\n          v__133201_0 = mult(v__133199_0, v__133188[(v_l_id_133181 + (512 * v_MWidthC_1 * v_wg_id_133180) + (v_MWidthC_1 * v_i_133182))]); \n          v__133195 = add(v__133201_0, v__133195); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133183 = 0; \n          v__133204[v_l_id_133181] = id(v__133195); \n        }\n        /* end map_seq */\n        v_l_id_133181 = atomic_inc(&(v_work_idx_10711)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10706; \n      v_work_idx_10706 = 0; \n      int v_l_id_133184 = atomic_inc(&(v_work_idx_10706)); \n      while((v_l_id_133184 < 1)){\n        float v_tmp_133267 = 0.0f; \n        v__105970 = v_tmp_133267; \n        /* reduce_seq */\n        for (int v_i_133185 = 0; v_i_133185 < v_MWidthC_1; v_i_133185 = (1 + v_i_133185)) {\n          v__105970 = add(v__105970, v__133204[(v_i_133185 + (v_MWidthC_1 * v_l_id_133184))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133186 = 0; \n          v__133209[v_wg_id_133180] = doubleMultiplyAdd(v__105970, v__133191, v__133190[v_wg_id_133180], v__133192); \n        }\n        /* end map_seq */\n        v_l_id_133184 = atomic_inc(&(v_work_idx_10706)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__133187",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133188",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133189",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133191",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133192",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__133209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133204",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}