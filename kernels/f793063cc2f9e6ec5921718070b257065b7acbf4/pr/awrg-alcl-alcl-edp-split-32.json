{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__118254, const global float* restrict v__118255, const global float* restrict v__118256, const global float* restrict v__118257, float v__118258, float v__118259, global float* v__118279, global int* v__118261, local float* v__118274, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118263; \n  float v__118265; \n  float v__105970; \n  /* Private Memory */\n  float v__118267_0;\n  \n  float v__118269_0;\n  \n  int v__118273_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9390 = v__118261; \n    local int v_w_id_118247; \n    if (get_local_id(0) == 0) {\n      v_w_id_118247 = atomic_inc(v_work_idx_9390); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_118247 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9388; \n        v_work_idx_9388 = 0; \n        int v_l_id_118248 = atomic_inc(&(v_work_idx_9388)); \n        while((v_l_id_118248 < v_MWidthC_1)){\n          float v_tmp_118333 = 0.0f; \n          v__118263 = v_tmp_118333; \n          /* reduce_while_seq */\n          for (int v_i_118249 = 0; v_i_118249 < 32; v_i_118249 = (1 + v_i_118249)) {\n            v__118273_0 = check(v__118263, v__118254[(v_l_id_118248 + (32 * v_MWidthC_1 * v_w_id_118247) + (v_MWidthC_1 * v_i_118249))]); \n            if (v__118273_0) {\n            } else {\n              break;\n            }\n            float v_tmp_118334 = 0.0f; \n            v__118265 = v_tmp_118334; \n            int v_index_118335 = v__118254[(v_l_id_118248 + (32 * v_MWidthC_1 * v_w_id_118247) + (v_MWidthC_1 * v_i_118249))]; \n            if (v_index_118335 < 0) {\n              v__118267_0 = v__118265; \n            } else {\n              if (v_index_118335 >= v_VLength_3) {\n                v__118267_0 = v__118265; \n              } else {\n                v__118267_0 = v__118256[v_index_118335]; \n              }\n            }\n            v__118269_0 = mult(v__118267_0, v__118255[(v_l_id_118248 + (32 * v_MWidthC_1 * v_w_id_118247) + (v_MWidthC_1 * v_i_118249))]); \n            v__118263 = add(v__118269_0, v__118263); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118250 = 0; \n            v__118274[v_l_id_118248] = id(v__118263); \n          }\n          /* end map_seq */\n          v_l_id_118248 = atomic_inc(&(v_work_idx_9388)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9383; \n        v_work_idx_9383 = 0; \n        int v_l_id_118251 = atomic_inc(&(v_work_idx_9383)); \n        while((v_l_id_118251 < 1)){\n          float v_tmp_118338 = 0.0f; \n          v__105970 = v_tmp_118338; \n          /* reduce_seq */\n          for (int v_i_118252 = 0; v_i_118252 < v_MWidthC_1; v_i_118252 = (1 + v_i_118252)) {\n            v__105970 = add(v__105970, v__118274[(v_i_118252 + (v_MWidthC_1 * v_l_id_118251))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118253 = 0; \n            v__118279[v_w_id_118247] = doubleMultiplyAdd(v__105970, v__118258, v__118257[v_w_id_118247], v__118259); \n          }\n          /* end map_seq */\n          v_l_id_118251 = atomic_inc(&(v_work_idx_9383)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_118247 = atomic_inc(v_work_idx_9390); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__118254",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118255",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118256",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__118257",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118258",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118259",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__118261",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__118279",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__118274",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}