{
  "name" : "awrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__129234, const global float* restrict v__129235, const global float* restrict v__129236, const global float* restrict v__129237, float v__129238, float v__129239, global float* v__129255, global int* v__129241, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__129242; \n  float v__129245; \n  /* Private Memory */\n  float v__129247_0;\n  \n  float v__129249_0;\n  \n  int v__129253_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10357 = v__129241; \n    local int v_w_id_129230; \n    if (get_local_id(0) == 0) {\n      v_w_id_129230 = atomic_inc(v_work_idx_10357); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_129230 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_129231 = get_local_id(0); v_l_id_129231 < 256; v_l_id_129231 = (v_l_id_129231 + get_local_size(0))) {\n        float v_tmp_129302 = 0.0f; \n        v__129242 = v_tmp_129302; \n        /* reduce_while_seq */\n        for (int v_i_129232 = 0; v_i_129232 < v_MWidthC_1; v_i_129232 = (1 + v_i_129232)) {\n          v__129253_0 = check(v__129242, v__129234[(v_i_129232 + (256 * v_MWidthC_1 * v_w_id_129230) + (v_MWidthC_1 * v_l_id_129231))]); \n          if (v__129253_0) {\n          } else {\n            break;\n          }\n          float v_tmp_129303 = 0.0f; \n          v__129245 = v_tmp_129303; \n          int v_index_129304 = v__129234[(v_i_129232 + (256 * v_MWidthC_1 * v_w_id_129230) + (v_MWidthC_1 * v_l_id_129231))]; \n          if (v_index_129304 < 0) {\n            v__129247_0 = v__129245; \n          } else {\n            if (v_index_129304 >= v_VLength_3) {\n              v__129247_0 = v__129245; \n            } else {\n              v__129247_0 = v__129236[v_index_129304]; \n            }\n          }\n          v__129249_0 = mult(v__129247_0, v__129235[(v_i_129232 + (256 * v_MWidthC_1 * v_w_id_129230) + (v_MWidthC_1 * v_l_id_129231))]); \n          v__129242 = add(v__129249_0, v__129242); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129233 = 0; \n          v__129255[(v_l_id_129231 + (256 * v_w_id_129230))] = doubleMultiplyAdd(v__129242, v__129238, v__129237[(v_l_id_129231 + (256 * v_w_id_129230))], v__129239); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_129230 = atomic_inc(v_work_idx_10357); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__129234",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129236",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__129237",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__129238",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__129239",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__129241",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__129255",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}