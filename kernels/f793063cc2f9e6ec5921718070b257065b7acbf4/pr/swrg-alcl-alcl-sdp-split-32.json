{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115925, const global float* restrict v__115926, const global float* restrict v__115927, const global float* restrict v__115928, float v__115929, float v__115930, global float* v__115947, global float* v__115937, local float* v__115942, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115933; \n  float v__115938; \n  float v__105970; \n  /* Private Memory */\n  float v__115935_0;\n  \n  for (int v_wg_id_115917 = get_group_id(0); v_wg_id_115917 < v_MHeight_2; v_wg_id_115917 = (v_wg_id_115917 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9165; \n      v_work_idx_9165 = 0; \n      int v_l_id_115918 = atomic_inc(&(v_work_idx_9165)); \n      while((v_l_id_115918 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_115919 = 0; v_i_115919 < 32; v_i_115919 = (1 + v_i_115919)) {\n          float v_tmp_116000 = 0.0f; \n          v__115933 = v_tmp_116000; \n          int v_index_116001 = v__115925[(v_l_id_115918 + (32 * v_MWidthC_1 * v_wg_id_115917) + (v_MWidthC_1 * v_i_115919))]; \n          if (v_index_116001 < 0) {\n            v__115935_0 = v__115933; \n          } else {\n            if (v_index_116001 >= v_VLength_3) {\n              v__115935_0 = v__115933; \n            } else {\n              v__115935_0 = v__115927[v_index_116001]; \n            }\n          }\n          v__115937[(31 + (32 * v_MWidthC_1 * v_wg_id_115917) + (-1 * v_i_115919) + (32 * v_l_id_115918))] = mult(v__115935_0, v__115926[(v_l_id_115918 + (32 * v_MWidthC_1 * v_wg_id_115917) + (v_MWidthC_1 * v_i_115919))]); \n        }\n        /* end map_seq */\n        float v_tmp_116002 = 0.0f; \n        v__115938 = v_tmp_116002; \n        /* reduce_seq */\n        for (int v_i_115920 = 0; v_i_115920 < 32; v_i_115920 = (1 + v_i_115920)) {\n          v__115938 = add(v__115938, v__115937[(v_i_115920 + (32 * v_MWidthC_1 * v_wg_id_115917) + (32 * v_l_id_115918))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115921 = 0; \n          v__115942[v_l_id_115918] = id(v__115938); \n        }\n        /* end map_seq */\n        v_l_id_115918 = atomic_inc(&(v_work_idx_9165)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9159; \n      v_work_idx_9159 = 0; \n      int v_l_id_115922 = atomic_inc(&(v_work_idx_9159)); \n      while((v_l_id_115922 < 1)){\n        float v_tmp_116005 = 0.0f; \n        v__105970 = v_tmp_116005; \n        /* reduce_seq */\n        for (int v_i_115923 = 0; v_i_115923 < v_MWidthC_1; v_i_115923 = (1 + v_i_115923)) {\n          v__105970 = add(v__105970, v__115942[(v_i_115923 + (v_MWidthC_1 * v_l_id_115922))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115924 = 0; \n          v__115947[v_wg_id_115917] = doubleMultiplyAdd(v__105970, v__115929, v__115928[v_wg_id_115917], v__115930); \n        }\n        /* end map_seq */\n        v_l_id_115922 = atomic_inc(&(v_work_idx_9159)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__115925",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115926",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115927",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115928",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115929",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115930",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115937",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__115947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__115942",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}