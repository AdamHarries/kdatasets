{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__111333, const global float* restrict v__111334, const global float* restrict v__111335, const global float* restrict v__111336, float v__111337, float v__111338, global float* v__111355, global float* v__111345, local float* v__111350, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__111341; \n  float v__111346; \n  float v__105970; \n  /* Private Memory */\n  float v__111343_0;\n  \n  for (int v_wg_id_111325 = get_group_id(0); v_wg_id_111325 < v_MHeight_2; v_wg_id_111325 = (v_wg_id_111325 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8752; \n      v_work_idx_8752 = 0; \n      int v_l_id_111326 = atomic_inc(&(v_work_idx_8752)); \n      while((v_l_id_111326 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_111327 = 0; v_i_111327 < 16; v_i_111327 = (1 + v_i_111327)) {\n          float v_tmp_111412 = 0.0f; \n          v__111341 = v_tmp_111412; \n          int v_index_111413 = v__111333[(v_l_id_111326 + (16 * v_MWidthC_1 * v_wg_id_111325) + (v_MWidthC_1 * v_i_111327))]; \n          if (v_index_111413 < 0) {\n            v__111343_0 = v__111341; \n          } else {\n            if (v_index_111413 >= v_VLength_3) {\n              v__111343_0 = v__111341; \n            } else {\n              v__111343_0 = v__111335[v_index_111413]; \n            }\n          }\n          v__111345[(15 + (16 * v_MWidthC_1 * v_wg_id_111325) + (-1 * v_i_111327) + (16 * v_l_id_111326))] = mult(v__111343_0, v__111334[(v_l_id_111326 + (16 * v_MWidthC_1 * v_wg_id_111325) + (v_MWidthC_1 * v_i_111327))]); \n        }\n        /* end map_seq */\n        float v_tmp_111414 = 0.0f; \n        v__111346 = v_tmp_111414; \n        /* reduce_seq */\n        for (int v_i_111328 = 0; v_i_111328 < 16; v_i_111328 = (1 + v_i_111328)) {\n          v__111346 = add(v__111346, v__111345[(v_i_111328 + (16 * v_MWidthC_1 * v_wg_id_111325) + (16 * v_l_id_111326))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111329 = 0; \n          v__111350[v_l_id_111326] = id(v__111346); \n        }\n        /* end map_seq */\n        v_l_id_111326 = atomic_inc(&(v_work_idx_8752)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_111330 = get_local_id(0); \n      float v_tmp_111417 = 0.0f; \n      v__105970 = v_tmp_111417; \n      /* reduce_seq */\n      for (int v_i_111331 = 0; v_i_111331 < v_MWidthC_1; v_i_111331 = (1 + v_i_111331)) {\n        v__105970 = add(v__105970, v__111350[(v_i_111331 + (v_MWidthC_1 * v_l_id_111330))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_111332 = 0; \n        v__111355[v_wg_id_111325] = doubleMultiplyAdd(v__105970, v__111337, v__111336[v_wg_id_111325], v__111338); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__111333",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111334",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111335",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__111336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__111337",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__111338",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__111345",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__111355",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__111350",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}