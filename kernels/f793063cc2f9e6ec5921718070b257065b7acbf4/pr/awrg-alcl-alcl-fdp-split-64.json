{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__122453, const global float* restrict v__122454, const global float* restrict v__122455, const global float* restrict v__122456, float v__122457, float v__122458, global float* v__122476, global int* v__122460, local float* v__122471, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__122462; \n  float v__122464; \n  float v__105970; \n  /* Private Memory */\n  float v__122466_0;\n  \n  float v__122468_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9763 = v__122460; \n    local int v_w_id_122446; \n    if (get_local_id(0) == 0) {\n      v_w_id_122446 = atomic_inc(v_work_idx_9763); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_122446 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9761; \n        v_work_idx_9761 = 0; \n        int v_l_id_122447 = atomic_inc(&(v_work_idx_9761)); \n        while((v_l_id_122447 < v_MWidthC_1)){\n          float v_tmp_122527 = 0.0f; \n          v__122462 = v_tmp_122527; \n          /* reduce_seq */\n          for (int v_i_122448 = 0; v_i_122448 < 64; v_i_122448 = (1 + v_i_122448)) {\n            float v_tmp_122528 = 0.0f; \n            v__122464 = v_tmp_122528; \n            int v_index_122529 = v__122453[(v_l_id_122447 + (64 * v_MWidthC_1 * v_w_id_122446) + (v_MWidthC_1 * v_i_122448))]; \n            if (v_index_122529 < 0) {\n              v__122466_0 = v__122464; \n            } else {\n              if (v_index_122529 >= v_VLength_3) {\n                v__122466_0 = v__122464; \n              } else {\n                v__122466_0 = v__122455[v_index_122529]; \n              }\n            }\n            v__122468_0 = mult(v__122466_0, v__122454[(v_l_id_122447 + (64 * v_MWidthC_1 * v_w_id_122446) + (v_MWidthC_1 * v_i_122448))]); \n            v__122462 = add(v__122468_0, v__122462); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122449 = 0; \n            v__122471[v_l_id_122447] = id(v__122462); \n          }\n          /* end map_seq */\n          v_l_id_122447 = atomic_inc(&(v_work_idx_9761)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9756; \n        v_work_idx_9756 = 0; \n        int v_l_id_122450 = atomic_inc(&(v_work_idx_9756)); \n        while((v_l_id_122450 < 1)){\n          float v_tmp_122532 = 0.0f; \n          v__105970 = v_tmp_122532; \n          /* reduce_seq */\n          for (int v_i_122451 = 0; v_i_122451 < v_MWidthC_1; v_i_122451 = (1 + v_i_122451)) {\n            v__105970 = add(v__105970, v__122471[(v_i_122451 + (v_MWidthC_1 * v_l_id_122450))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122452 = 0; \n            v__122476[v_w_id_122446] = doubleMultiplyAdd(v__105970, v__122457, v__122456[v_w_id_122446], v__122458); \n          }\n          /* end map_seq */\n          v_l_id_122450 = atomic_inc(&(v_work_idx_9756)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_122446 = atomic_inc(v_work_idx_9763); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__122453",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122454",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122455",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__122456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__122457",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__122458",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122460",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122476",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__122471",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}