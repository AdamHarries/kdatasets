{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__109484, const global float* restrict v__109485, const global float* restrict v__109486, const global float* restrict v__109487, float v__109488, float v__109489, global float* v__109507, global float* v__109497, global int* v__109491, local float* v__109502, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__109493; \n  float v__109498; \n  float v__105970; \n  /* Private Memory */\n  float v__109495_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8600 = v__109491; \n    local int v_w_id_109476; \n    if (get_local_id(0) == 0) {\n      v_w_id_109476 = atomic_inc(v_work_idx_8600); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_109476 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8598; \n        v_work_idx_8598 = 0; \n        int v_l_id_109477 = atomic_inc(&(v_work_idx_8598)); \n        while((v_l_id_109477 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_109478 = 0; v_i_109478 < 8; v_i_109478 = (1 + v_i_109478)) {\n            float v_tmp_109558 = 0.0f; \n            v__109493 = v_tmp_109558; \n            int v_index_109559 = v__109484[(v_l_id_109477 + (8 * v_MWidthC_1 * v_w_id_109476) + (v_MWidthC_1 * v_i_109478))]; \n            if (v_index_109559 < 0) {\n              v__109495_0 = v__109493; \n            } else {\n              if (v_index_109559 >= v_VLength_3) {\n                v__109495_0 = v__109493; \n              } else {\n                v__109495_0 = v__109486[v_index_109559]; \n              }\n            }\n            v__109497[(7 + (8 * v_MWidthC_1 * v_w_id_109476) + (-1 * v_i_109478) + (8 * v_l_id_109477))] = mult(v__109495_0, v__109485[(v_l_id_109477 + (8 * v_MWidthC_1 * v_w_id_109476) + (v_MWidthC_1 * v_i_109478))]); \n          }\n          /* end map_seq */\n          float v_tmp_109560 = 0.0f; \n          v__109498 = v_tmp_109560; \n          /* reduce_seq */\n          for (int v_i_109479 = 0; v_i_109479 < 8; v_i_109479 = (1 + v_i_109479)) {\n            v__109498 = add(v__109498, v__109497[(v_i_109479 + (8 * v_MWidthC_1 * v_w_id_109476) + (8 * v_l_id_109477))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_109480 = 0; \n            v__109502[v_l_id_109477] = id(v__109498); \n          }\n          /* end map_seq */\n          v_l_id_109477 = atomic_inc(&(v_work_idx_8598)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8592; \n        v_work_idx_8592 = 0; \n        int v_l_id_109481 = atomic_inc(&(v_work_idx_8592)); \n        while((v_l_id_109481 < 1)){\n          float v_tmp_109563 = 0.0f; \n          v__105970 = v_tmp_109563; \n          /* reduce_seq */\n          for (int v_i_109482 = 0; v_i_109482 < v_MWidthC_1; v_i_109482 = (1 + v_i_109482)) {\n            v__105970 = add(v__105970, v__109502[(v_i_109482 + (v_MWidthC_1 * v_l_id_109481))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_109483 = 0; \n            v__109507[v_w_id_109476] = doubleMultiplyAdd(v__105970, v__109488, v__109487[v_w_id_109476], v__109489); \n          }\n          /* end map_seq */\n          v_l_id_109481 = atomic_inc(&(v_work_idx_8592)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_109476 = atomic_inc(v_work_idx_8600); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__109484",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109485",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109486",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__109487",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__109488",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__109489",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__109497",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109491",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__109507",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__109502",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}