{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__135329, const global float* restrict v__135330, const global float* restrict v__135331, const global float* restrict v__135332, float v__135333, float v__135334, global float* v__135352, global int* v__135336, local float* v__135347, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__135338; \n  float v__135340; \n  float v__105970; \n  /* Private Memory */\n  float v__135342_0;\n  \n  float v__135344_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10915 = v__135336; \n    local int v_w_id_135322; \n    if (get_local_id(0) == 0) {\n      v_w_id_135322 = atomic_inc(v_work_idx_10915); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_135322 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10913; \n        v_work_idx_10913 = 0; \n        int v_l_id_135323 = atomic_inc(&(v_work_idx_10913)); \n        while((v_l_id_135323 < v_MWidthC_1)){\n          float v_tmp_135403 = 0.0f; \n          v__135338 = v_tmp_135403; \n          /* reduce_seq */\n          for (int v_i_135324 = 0; v_i_135324 < 512; v_i_135324 = (1 + v_i_135324)) {\n            float v_tmp_135404 = 0.0f; \n            v__135340 = v_tmp_135404; \n            int v_index_135405 = v__135329[(v_l_id_135323 + (512 * v_MWidthC_1 * v_w_id_135322) + (v_MWidthC_1 * v_i_135324))]; \n            if (v_index_135405 < 0) {\n              v__135342_0 = v__135340; \n            } else {\n              if (v_index_135405 >= v_VLength_3) {\n                v__135342_0 = v__135340; \n              } else {\n                v__135342_0 = v__135331[v_index_135405]; \n              }\n            }\n            v__135344_0 = mult(v__135342_0, v__135330[(v_l_id_135323 + (512 * v_MWidthC_1 * v_w_id_135322) + (v_MWidthC_1 * v_i_135324))]); \n            v__135338 = add(v__135344_0, v__135338); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135325 = 0; \n            v__135347[v_l_id_135323] = id(v__135338); \n          }\n          /* end map_seq */\n          v_l_id_135323 = atomic_inc(&(v_work_idx_10913)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10908; \n        v_work_idx_10908 = 0; \n        int v_l_id_135326 = atomic_inc(&(v_work_idx_10908)); \n        while((v_l_id_135326 < 1)){\n          float v_tmp_135408 = 0.0f; \n          v__105970 = v_tmp_135408; \n          /* reduce_seq */\n          for (int v_i_135327 = 0; v_i_135327 < v_MWidthC_1; v_i_135327 = (1 + v_i_135327)) {\n            v__105970 = add(v__105970, v__135347[(v_i_135327 + (v_MWidthC_1 * v_l_id_135326))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135328 = 0; \n            v__135352[v_w_id_135322] = doubleMultiplyAdd(v__105970, v__135333, v__135332[v_w_id_135322], v__135334); \n          }\n          /* end map_seq */\n          v_l_id_135326 = atomic_inc(&(v_work_idx_10908)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_135322 = atomic_inc(v_work_idx_10915); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__135329",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135330",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135331",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__135332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__135333",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__135334",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__135336",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__135352",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__135347",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}