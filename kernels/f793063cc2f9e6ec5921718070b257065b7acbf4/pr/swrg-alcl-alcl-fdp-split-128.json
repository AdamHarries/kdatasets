{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__124603, const global float* restrict v__124604, const global float* restrict v__124605, const global float* restrict v__124606, float v__124607, float v__124608, global float* v__124625, local float* v__124620, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__124611; \n  float v__124613; \n  float v__105970; \n  /* Private Memory */\n  float v__124615_0;\n  \n  float v__124617_0;\n  \n  for (int v_wg_id_124596 = get_group_id(0); v_wg_id_124596 < v_MHeight_2; v_wg_id_124596 = (v_wg_id_124596 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9943; \n      v_work_idx_9943 = 0; \n      int v_l_id_124597 = atomic_inc(&(v_work_idx_9943)); \n      while((v_l_id_124597 < v_MWidthC_1)){\n        float v_tmp_124678 = 0.0f; \n        v__124611 = v_tmp_124678; \n        /* reduce_seq */\n        for (int v_i_124598 = 0; v_i_124598 < 128; v_i_124598 = (1 + v_i_124598)) {\n          float v_tmp_124679 = 0.0f; \n          v__124613 = v_tmp_124679; \n          int v_index_124680 = v__124603[(v_l_id_124597 + (128 * v_MWidthC_1 * v_wg_id_124596) + (v_MWidthC_1 * v_i_124598))]; \n          if (v_index_124680 < 0) {\n            v__124615_0 = v__124613; \n          } else {\n            if (v_index_124680 >= v_VLength_3) {\n              v__124615_0 = v__124613; \n            } else {\n              v__124615_0 = v__124605[v_index_124680]; \n            }\n          }\n          v__124617_0 = mult(v__124615_0, v__124604[(v_l_id_124597 + (128 * v_MWidthC_1 * v_wg_id_124596) + (v_MWidthC_1 * v_i_124598))]); \n          v__124611 = add(v__124617_0, v__124611); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124599 = 0; \n          v__124620[v_l_id_124597] = id(v__124611); \n        }\n        /* end map_seq */\n        v_l_id_124597 = atomic_inc(&(v_work_idx_9943)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9938; \n      v_work_idx_9938 = 0; \n      int v_l_id_124600 = atomic_inc(&(v_work_idx_9938)); \n      while((v_l_id_124600 < 1)){\n        float v_tmp_124683 = 0.0f; \n        v__105970 = v_tmp_124683; \n        /* reduce_seq */\n        for (int v_i_124601 = 0; v_i_124601 < v_MWidthC_1; v_i_124601 = (1 + v_i_124601)) {\n          v__105970 = add(v__105970, v__124620[(v_i_124601 + (v_MWidthC_1 * v_l_id_124600))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124602 = 0; \n          v__124625[v_wg_id_124596] = doubleMultiplyAdd(v__105970, v__124607, v__124606[v_wg_id_124596], v__124608); \n        }\n        /* end map_seq */\n        v_l_id_124600 = atomic_inc(&(v_work_idx_9938)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__124603",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124604",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124605",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__124606",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__124607",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__124608",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__124625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__124620",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}