{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116689, const global float* restrict v__116690, const global float* restrict v__116691, const global float* restrict v__116692, float v__116693, float v__116694, global float* v__116712, global float* v__116702, global int* v__116696, local float* v__116707, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116698; \n  float v__116703; \n  float v__105970; \n  /* Private Memory */\n  float v__116700_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9233 = v__116696; \n    local int v_w_id_116681; \n    if (get_local_id(0) == 0) {\n      v_w_id_116681 = atomic_inc(v_work_idx_9233); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_116681 < v_MHeight_2)){\n      for (int v_l_id_116682 = get_local_id(0); v_l_id_116682 < v_MWidthC_1; v_l_id_116682 = (v_l_id_116682 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_116683 = 0; v_i_116683 < 32; v_i_116683 = (1 + v_i_116683)) {\n          float v_tmp_116775 = 0.0f; \n          v__116698 = v_tmp_116775; \n          int v_index_116776 = v__116689[(v_l_id_116682 + (32 * v_MWidthC_1 * v_w_id_116681) + (v_MWidthC_1 * v_i_116683))]; \n          if (v_index_116776 < 0) {\n            v__116700_0 = v__116698; \n          } else {\n            if (v_index_116776 >= v_VLength_3) {\n              v__116700_0 = v__116698; \n            } else {\n              v__116700_0 = v__116691[v_index_116776]; \n            }\n          }\n          v__116702[(31 + (32 * v_MWidthC_1 * v_w_id_116681) + (-1 * v_i_116683) + (32 * v_l_id_116682))] = mult(v__116700_0, v__116690[(v_l_id_116682 + (32 * v_MWidthC_1 * v_w_id_116681) + (v_MWidthC_1 * v_i_116683))]); \n        }\n        /* end map_seq */\n        float v_tmp_116777 = 0.0f; \n        v__116703 = v_tmp_116777; \n        /* reduce_seq */\n        for (int v_i_116684 = 0; v_i_116684 < 32; v_i_116684 = (1 + v_i_116684)) {\n          v__116703 = add(v__116703, v__116702[(v_i_116684 + (32 * v_MWidthC_1 * v_w_id_116681) + (32 * v_l_id_116682))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116685 = 0; \n          v__116707[v_l_id_116682] = id(v__116703); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_116686 = get_local_id(0); \n        float v_tmp_116780 = 0.0f; \n        v__105970 = v_tmp_116780; \n        /* reduce_seq */\n        for (int v_i_116687 = 0; v_i_116687 < v_MWidthC_1; v_i_116687 = (1 + v_i_116687)) {\n          v__105970 = add(v__105970, v__116707[(v_i_116687 + (v_MWidthC_1 * v_l_id_116686))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116688 = 0; \n          v__116712[v_w_id_116681] = doubleMultiplyAdd(v__105970, v__116693, v__116692[v_w_id_116681], v__116694); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_116681 = atomic_inc(v_work_idx_9233); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__116689",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116690",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116691",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116693",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116694",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__116702",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116696",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__116712",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__116707",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}