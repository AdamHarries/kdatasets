{
  "name" : "swrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__109841, const global float* restrict v__109842, const global float* restrict v__109843, const global float* restrict v__109844, float v__109845, float v__109846, global float* v__109859, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__109849; \n  float v__109851; \n  /* Private Memory */\n  float v__109853_0;\n  \n  float v__109855_0;\n  \n  for (int v_wg_id_109837 = get_group_id(0); v_wg_id_109837 < ((v_MHeight_2)/(16)); v_wg_id_109837 = (v_wg_id_109837 + get_num_groups(0))) {\n    for (int v_l_id_109838 = get_local_id(0); v_l_id_109838 < 16; v_l_id_109838 = (v_l_id_109838 + get_local_size(0))) {\n      float v_tmp_109901 = 0.0f; \n      v__109849 = v_tmp_109901; \n      /* reduce_seq */\n      for (int v_i_109839 = 0; v_i_109839 < v_MWidthC_1; v_i_109839 = (1 + v_i_109839)) {\n        float v_tmp_109902 = 0.0f; \n        v__109851 = v_tmp_109902; \n        int v_index_109903 = v__109841[(v_i_109839 + (16 * v_MWidthC_1 * v_wg_id_109837) + (v_MWidthC_1 * v_l_id_109838))]; \n        if (v_index_109903 < 0) {\n          v__109853_0 = v__109851; \n        } else {\n          if (v_index_109903 >= v_VLength_3) {\n            v__109853_0 = v__109851; \n          } else {\n            v__109853_0 = v__109843[v_index_109903]; \n          }\n        }\n        v__109855_0 = mult(v__109853_0, v__109842[(v_i_109839 + (16 * v_MWidthC_1 * v_wg_id_109837) + (v_MWidthC_1 * v_l_id_109838))]); \n        v__109849 = add(v__109855_0, v__109849); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_109840 = 0; \n        v__109859[(v_l_id_109838 + (16 * v_wg_id_109837))] = doubleMultiplyAdd(v__109849, v__109845, v__109844[(v_l_id_109838 + (16 * v_wg_id_109837))], v__109846); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__109841",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__109843",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__109844",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__109845",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__109846",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__109859",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}