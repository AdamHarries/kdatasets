{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__115310, const global float* restrict v__115311, const global float* restrict v__115312, const global float* restrict v__115313, float v__115314, float v__115315, global float* v__115330, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115317; \n  float v__115320; \n  /* Private Memory */\n  float v__115322_0;\n  \n  float v__115324_0;\n  \n  int v__115328_0;\n  \n  for (int v_wg_id_115306 = get_group_id(0); v_wg_id_115306 < ((v_MHeight_2)/(32)); v_wg_id_115306 = (v_wg_id_115306 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9108; \n      v_work_idx_9108 = 0; \n      int v_l_id_115307 = atomic_inc(&(v_work_idx_9108)); \n      while((v_l_id_115307 < 32)){\n        float v_tmp_115374 = 0.0f; \n        v__115317 = v_tmp_115374; \n        /* reduce_while_seq */\n        for (int v_i_115308 = 0; v_i_115308 < v_MWidthC_1; v_i_115308 = (1 + v_i_115308)) {\n          v__115328_0 = check(v__115317, v__115310[(v_i_115308 + (32 * v_MWidthC_1 * v_wg_id_115306) + (v_MWidthC_1 * v_l_id_115307))]); \n          if (v__115328_0) {\n          } else {\n            break;\n          }\n          float v_tmp_115375 = 0.0f; \n          v__115320 = v_tmp_115375; \n          int v_index_115376 = v__115310[(v_i_115308 + (32 * v_MWidthC_1 * v_wg_id_115306) + (v_MWidthC_1 * v_l_id_115307))]; \n          if (v_index_115376 < 0) {\n            v__115322_0 = v__115320; \n          } else {\n            if (v_index_115376 >= v_VLength_3) {\n              v__115322_0 = v__115320; \n            } else {\n              v__115322_0 = v__115312[v_index_115376]; \n            }\n          }\n          v__115324_0 = mult(v__115322_0, v__115311[(v_i_115308 + (32 * v_MWidthC_1 * v_wg_id_115306) + (v_MWidthC_1 * v_l_id_115307))]); \n          v__115317 = add(v__115324_0, v__115317); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115309 = 0; \n          v__115330[(v_l_id_115307 + (32 * v_wg_id_115306))] = doubleMultiplyAdd(v__115317, v__115314, v__115313[(v_l_id_115307 + (32 * v_wg_id_115306))], v__115315); \n        }\n        /* end map_seq */\n        v_l_id_115307 = atomic_inc(&(v_work_idx_9108)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__115310",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115311",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__115312",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__115313",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115314",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115315",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__115330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}