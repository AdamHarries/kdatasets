{
  "name" : "swrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__123121, const global float* restrict v__123122, const global float* restrict v__123123, const global float* restrict v__123124, float v__123125, float v__123126, global float* v__123143, global float* v__123133, local float* v__123138, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123129; \n  float v__123134; \n  float v__105970; \n  /* Private Memory */\n  float v__123131_0;\n  \n  for (int v_wg_id_123113 = get_group_id(0); v_wg_id_123113 < v_MHeight_2; v_wg_id_123113 = (v_wg_id_123113 + get_num_groups(0))) {\n    for (int v_l_id_123114 = get_local_id(0); v_l_id_123114 < v_MWidthC_1; v_l_id_123114 = (v_l_id_123114 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_123115 = 0; v_i_123115 < 128; v_i_123115 = (1 + v_i_123115)) {\n        float v_tmp_123208 = 0.0f; \n        v__123129 = v_tmp_123208; \n        int v_index_123209 = v__123121[(v_l_id_123114 + (128 * v_MWidthC_1 * v_wg_id_123113) + (v_MWidthC_1 * v_i_123115))]; \n        if (v_index_123209 < 0) {\n          v__123131_0 = v__123129; \n        } else {\n          if (v_index_123209 >= v_VLength_3) {\n            v__123131_0 = v__123129; \n          } else {\n            v__123131_0 = v__123123[v_index_123209]; \n          }\n        }\n        v__123133[(127 + (128 * v_MWidthC_1 * v_wg_id_123113) + (-1 * v_i_123115) + (128 * v_l_id_123114))] = mult(v__123131_0, v__123122[(v_l_id_123114 + (128 * v_MWidthC_1 * v_wg_id_123113) + (v_MWidthC_1 * v_i_123115))]); \n      }\n      /* end map_seq */\n      float v_tmp_123210 = 0.0f; \n      v__123134 = v_tmp_123210; \n      /* reduce_seq */\n      for (int v_i_123116 = 0; v_i_123116 < 128; v_i_123116 = (1 + v_i_123116)) {\n        v__123134 = add(v__123134, v__123133[(v_i_123116 + (128 * v_MWidthC_1 * v_wg_id_123113) + (128 * v_l_id_123114))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123117 = 0; \n        v__123138[v_l_id_123114] = id(v__123134); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_123118 = get_local_id(0); \n      float v_tmp_123213 = 0.0f; \n      v__105970 = v_tmp_123213; \n      /* reduce_seq */\n      for (int v_i_123119 = 0; v_i_123119 < v_MWidthC_1; v_i_123119 = (1 + v_i_123119)) {\n        v__105970 = add(v__105970, v__123138[(v_i_123119 + (v_MWidthC_1 * v_l_id_123118))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123120 = 0; \n        v__123143[v_wg_id_123113] = doubleMultiplyAdd(v__105970, v__123125, v__123124[v_wg_id_123113], v__123126); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__123121",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123122",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123123",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__123124",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123125",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123126",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__123133",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__123143",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__123138",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}