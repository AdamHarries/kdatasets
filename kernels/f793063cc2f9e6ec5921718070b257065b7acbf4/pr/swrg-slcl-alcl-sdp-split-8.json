{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__106277, const global float* restrict v__106278, const global float* restrict v__106279, const global float* restrict v__106280, float v__106281, float v__106282, global float* v__106299, global float* v__106289, local float* v__106294, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106285; \n  float v__106290; \n  float v__105970; \n  /* Private Memory */\n  float v__106287_0;\n  \n  for (int v_wg_id_106269 = get_group_id(0); v_wg_id_106269 < v_MHeight_2; v_wg_id_106269 = (v_wg_id_106269 + get_num_groups(0))) {\n    for (int v_l_id_106270 = get_local_id(0); v_l_id_106270 < v_MWidthC_1; v_l_id_106270 = (v_l_id_106270 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_106271 = 0; v_i_106271 < 8; v_i_106271 = (1 + v_i_106271)) {\n        float v_tmp_106360 = 0.0f; \n        v__106285 = v_tmp_106360; \n        int v_index_106361 = v__106277[(v_l_id_106270 + (8 * v_MWidthC_1 * v_wg_id_106269) + (v_MWidthC_1 * v_i_106271))]; \n        if (v_index_106361 < 0) {\n          v__106287_0 = v__106285; \n        } else {\n          if (v_index_106361 >= v_VLength_3) {\n            v__106287_0 = v__106285; \n          } else {\n            v__106287_0 = v__106279[v_index_106361]; \n          }\n        }\n        v__106289[(7 + (8 * v_MWidthC_1 * v_wg_id_106269) + (-1 * v_i_106271) + (8 * v_l_id_106270))] = mult(v__106287_0, v__106278[(v_l_id_106270 + (8 * v_MWidthC_1 * v_wg_id_106269) + (v_MWidthC_1 * v_i_106271))]); \n      }\n      /* end map_seq */\n      float v_tmp_106362 = 0.0f; \n      v__106290 = v_tmp_106362; \n      /* reduce_seq */\n      for (int v_i_106272 = 0; v_i_106272 < 8; v_i_106272 = (1 + v_i_106272)) {\n        v__106290 = add(v__106290, v__106289[(v_i_106272 + (8 * v_MWidthC_1 * v_wg_id_106269) + (8 * v_l_id_106270))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106273 = 0; \n        v__106294[v_l_id_106270] = id(v__106290); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8298; \n      v_work_idx_8298 = 0; \n      int v_l_id_106274 = atomic_inc(&(v_work_idx_8298)); \n      while((v_l_id_106274 < 1)){\n        float v_tmp_106365 = 0.0f; \n        v__105970 = v_tmp_106365; \n        /* reduce_seq */\n        for (int v_i_106275 = 0; v_i_106275 < v_MWidthC_1; v_i_106275 = (1 + v_i_106275)) {\n          v__105970 = add(v__105970, v__106294[(v_i_106275 + (v_MWidthC_1 * v_l_id_106274))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_106276 = 0; \n          v__106299[v_wg_id_106269] = doubleMultiplyAdd(v__105970, v__106281, v__106280[v_wg_id_106269], v__106282); \n        }\n        /* end map_seq */\n        v_l_id_106274 = atomic_inc(&(v_work_idx_8298)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__106277",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106278",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106279",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106281",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106282",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__106289",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__106299",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__106294",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}