{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__129565, const global float* restrict v__129566, const global float* restrict v__129567, const global float* restrict v__129568, float v__129569, float v__129570, global float* v__129588, global float* v__129578, global int* v__129572, local float* v__129583, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__129574; \n  float v__129579; \n  float v__105970; \n  /* Private Memory */\n  float v__129576_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10385 = v__129572; \n    local int v_w_id_129557; \n    if (get_local_id(0) == 0) {\n      v_w_id_129557 = atomic_inc(v_work_idx_10385); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_129557 < v_MHeight_2)){\n      for (int v_l_id_129558 = get_local_id(0); v_l_id_129558 < v_MWidthC_1; v_l_id_129558 = (v_l_id_129558 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_129559 = 0; v_i_129559 < 256; v_i_129559 = (1 + v_i_129559)) {\n          float v_tmp_129651 = 0.0f; \n          v__129574 = v_tmp_129651; \n          int v_index_129652 = v__129565[(v_l_id_129558 + (256 * v_MWidthC_1 * v_w_id_129557) + (v_MWidthC_1 * v_i_129559))]; \n          if (v_index_129652 < 0) {\n            v__129576_0 = v__129574; \n          } else {\n            if (v_index_129652 >= v_VLength_3) {\n              v__129576_0 = v__129574; \n            } else {\n              v__129576_0 = v__129567[v_index_129652]; \n            }\n          }\n          v__129578[(255 + (256 * v_MWidthC_1 * v_w_id_129557) + (-1 * v_i_129559) + (256 * v_l_id_129558))] = mult(v__129576_0, v__129566[(v_l_id_129558 + (256 * v_MWidthC_1 * v_w_id_129557) + (v_MWidthC_1 * v_i_129559))]); \n        }\n        /* end map_seq */\n        float v_tmp_129653 = 0.0f; \n        v__129579 = v_tmp_129653; \n        /* reduce_seq */\n        for (int v_i_129560 = 0; v_i_129560 < 256; v_i_129560 = (1 + v_i_129560)) {\n          v__129579 = add(v__129579, v__129578[(v_i_129560 + (256 * v_MWidthC_1 * v_w_id_129557) + (256 * v_l_id_129558))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129561 = 0; \n          v__129583[v_l_id_129558] = id(v__129579); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_129562 = get_local_id(0); \n        float v_tmp_129656 = 0.0f; \n        v__105970 = v_tmp_129656; \n        /* reduce_seq */\n        for (int v_i_129563 = 0; v_i_129563 < v_MWidthC_1; v_i_129563 = (1 + v_i_129563)) {\n          v__105970 = add(v__105970, v__129583[(v_i_129563 + (v_MWidthC_1 * v_l_id_129562))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129564 = 0; \n          v__129588[v_w_id_129557] = doubleMultiplyAdd(v__105970, v__129569, v__129568[v_w_id_129557], v__129570); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_129557 = atomic_inc(v_work_idx_10385); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__129565",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129566",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129567",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__129568",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__129569",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__129570",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__129578",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129572",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__129588",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__129583",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}