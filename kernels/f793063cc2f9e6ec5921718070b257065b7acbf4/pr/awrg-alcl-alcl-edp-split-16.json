{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113962, const global float* restrict v__113963, const global float* restrict v__113964, const global float* restrict v__113965, float v__113966, float v__113967, global float* v__113987, global int* v__113969, local float* v__113982, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113971; \n  float v__113973; \n  float v__105970; \n  /* Private Memory */\n  float v__113975_0;\n  \n  float v__113977_0;\n  \n  int v__113981_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9006 = v__113969; \n    local int v_w_id_113955; \n    if (get_local_id(0) == 0) {\n      v_w_id_113955 = atomic_inc(v_work_idx_9006); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113955 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9004; \n        v_work_idx_9004 = 0; \n        int v_l_id_113956 = atomic_inc(&(v_work_idx_9004)); \n        while((v_l_id_113956 < v_MWidthC_1)){\n          float v_tmp_114041 = 0.0f; \n          v__113971 = v_tmp_114041; \n          /* reduce_while_seq */\n          for (int v_i_113957 = 0; v_i_113957 < 16; v_i_113957 = (1 + v_i_113957)) {\n            v__113981_0 = check(v__113971, v__113962[(v_l_id_113956 + (16 * v_MWidthC_1 * v_w_id_113955) + (v_MWidthC_1 * v_i_113957))]); \n            if (v__113981_0) {\n            } else {\n              break;\n            }\n            float v_tmp_114042 = 0.0f; \n            v__113973 = v_tmp_114042; \n            int v_index_114043 = v__113962[(v_l_id_113956 + (16 * v_MWidthC_1 * v_w_id_113955) + (v_MWidthC_1 * v_i_113957))]; \n            if (v_index_114043 < 0) {\n              v__113975_0 = v__113973; \n            } else {\n              if (v_index_114043 >= v_VLength_3) {\n                v__113975_0 = v__113973; \n              } else {\n                v__113975_0 = v__113964[v_index_114043]; \n              }\n            }\n            v__113977_0 = mult(v__113975_0, v__113963[(v_l_id_113956 + (16 * v_MWidthC_1 * v_w_id_113955) + (v_MWidthC_1 * v_i_113957))]); \n            v__113971 = add(v__113977_0, v__113971); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113958 = 0; \n            v__113982[v_l_id_113956] = id(v__113971); \n          }\n          /* end map_seq */\n          v_l_id_113956 = atomic_inc(&(v_work_idx_9004)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8999; \n        v_work_idx_8999 = 0; \n        int v_l_id_113959 = atomic_inc(&(v_work_idx_8999)); \n        while((v_l_id_113959 < 1)){\n          float v_tmp_114046 = 0.0f; \n          v__105970 = v_tmp_114046; \n          /* reduce_seq */\n          for (int v_i_113960 = 0; v_i_113960 < v_MWidthC_1; v_i_113960 = (1 + v_i_113960)) {\n            v__105970 = add(v__105970, v__113982[(v_i_113960 + (v_MWidthC_1 * v_l_id_113959))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113961 = 0; \n            v__113987[v_w_id_113955] = doubleMultiplyAdd(v__105970, v__113966, v__113965[v_w_id_113955], v__113967); \n          }\n          /* end map_seq */\n          v_l_id_113959 = atomic_inc(&(v_work_idx_8999)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113955 = atomic_inc(v_work_idx_9006); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__113962",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113963",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113964",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113966",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113967",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113969",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__113982",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}