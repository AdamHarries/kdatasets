{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125273, const global float* restrict v__125274, const global float* restrict v__125275, const global float* restrict v__125276, float v__125277, float v__125278, global float* v__125296, global float* v__125286, global int* v__125280, local float* v__125291, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125282; \n  float v__125287; \n  float v__105970; \n  /* Private Memory */\n  float v__125284_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10001 = v__125280; \n    local int v_w_id_125265; \n    if (get_local_id(0) == 0) {\n      v_w_id_125265 = atomic_inc(v_work_idx_10001); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125265 < v_MHeight_2)){\n      for (int v_l_id_125266 = get_local_id(0); v_l_id_125266 < v_MWidthC_1; v_l_id_125266 = (v_l_id_125266 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_125267 = 0; v_i_125267 < 128; v_i_125267 = (1 + v_i_125267)) {\n          float v_tmp_125359 = 0.0f; \n          v__125282 = v_tmp_125359; \n          int v_index_125360 = v__125273[(v_l_id_125266 + (128 * v_MWidthC_1 * v_w_id_125265) + (v_MWidthC_1 * v_i_125267))]; \n          if (v_index_125360 < 0) {\n            v__125284_0 = v__125282; \n          } else {\n            if (v_index_125360 >= v_VLength_3) {\n              v__125284_0 = v__125282; \n            } else {\n              v__125284_0 = v__125275[v_index_125360]; \n            }\n          }\n          v__125286[(127 + (128 * v_MWidthC_1 * v_w_id_125265) + (-1 * v_i_125267) + (128 * v_l_id_125266))] = mult(v__125284_0, v__125274[(v_l_id_125266 + (128 * v_MWidthC_1 * v_w_id_125265) + (v_MWidthC_1 * v_i_125267))]); \n        }\n        /* end map_seq */\n        float v_tmp_125361 = 0.0f; \n        v__125287 = v_tmp_125361; \n        /* reduce_seq */\n        for (int v_i_125268 = 0; v_i_125268 < 128; v_i_125268 = (1 + v_i_125268)) {\n          v__125287 = add(v__125287, v__125286[(v_i_125268 + (128 * v_MWidthC_1 * v_w_id_125265) + (128 * v_l_id_125266))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125269 = 0; \n          v__125291[v_l_id_125266] = id(v__125287); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_125270 = get_local_id(0); \n        float v_tmp_125364 = 0.0f; \n        v__105970 = v_tmp_125364; \n        /* reduce_seq */\n        for (int v_i_125271 = 0; v_i_125271 < v_MWidthC_1; v_i_125271 = (1 + v_i_125271)) {\n          v__105970 = add(v__105970, v__125291[(v_i_125271 + (v_MWidthC_1 * v_l_id_125270))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125272 = 0; \n          v__125296[v_w_id_125265] = doubleMultiplyAdd(v__105970, v__125277, v__125276[v_w_id_125265], v__125278); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125265 = atomic_inc(v_work_idx_10001); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__125273",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125274",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125275",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125276",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125277",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125278",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125286",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125280",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__125291",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}