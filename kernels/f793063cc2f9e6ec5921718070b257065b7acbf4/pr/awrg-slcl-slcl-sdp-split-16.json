{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__112397, const global float* restrict v__112398, const global float* restrict v__112399, const global float* restrict v__112400, float v__112401, float v__112402, global float* v__112420, global float* v__112410, global int* v__112404, local float* v__112415, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112406; \n  float v__112411; \n  float v__105970; \n  /* Private Memory */\n  float v__112408_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8849 = v__112404; \n    local int v_w_id_112389; \n    if (get_local_id(0) == 0) {\n      v_w_id_112389 = atomic_inc(v_work_idx_8849); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112389 < v_MHeight_2)){\n      for (int v_l_id_112390 = get_local_id(0); v_l_id_112390 < v_MWidthC_1; v_l_id_112390 = (v_l_id_112390 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_112391 = 0; v_i_112391 < 16; v_i_112391 = (1 + v_i_112391)) {\n          float v_tmp_112483 = 0.0f; \n          v__112406 = v_tmp_112483; \n          int v_index_112484 = v__112397[(v_l_id_112390 + (16 * v_MWidthC_1 * v_w_id_112389) + (v_MWidthC_1 * v_i_112391))]; \n          if (v_index_112484 < 0) {\n            v__112408_0 = v__112406; \n          } else {\n            if (v_index_112484 >= v_VLength_3) {\n              v__112408_0 = v__112406; \n            } else {\n              v__112408_0 = v__112399[v_index_112484]; \n            }\n          }\n          v__112410[(15 + (16 * v_MWidthC_1 * v_w_id_112389) + (-1 * v_i_112391) + (16 * v_l_id_112390))] = mult(v__112408_0, v__112398[(v_l_id_112390 + (16 * v_MWidthC_1 * v_w_id_112389) + (v_MWidthC_1 * v_i_112391))]); \n        }\n        /* end map_seq */\n        float v_tmp_112485 = 0.0f; \n        v__112411 = v_tmp_112485; \n        /* reduce_seq */\n        for (int v_i_112392 = 0; v_i_112392 < 16; v_i_112392 = (1 + v_i_112392)) {\n          v__112411 = add(v__112411, v__112410[(v_i_112392 + (16 * v_MWidthC_1 * v_w_id_112389) + (16 * v_l_id_112390))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112393 = 0; \n          v__112415[v_l_id_112390] = id(v__112411); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_112394 = get_local_id(0); \n        float v_tmp_112488 = 0.0f; \n        v__105970 = v_tmp_112488; \n        /* reduce_seq */\n        for (int v_i_112395 = 0; v_i_112395 < v_MWidthC_1; v_i_112395 = (1 + v_i_112395)) {\n          v__105970 = add(v__105970, v__112415[(v_i_112395 + (v_MWidthC_1 * v_l_id_112394))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112396 = 0; \n          v__112420[v_w_id_112389] = doubleMultiplyAdd(v__105970, v__112401, v__112400[v_w_id_112389], v__112402); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_112389 = atomic_inc(v_work_idx_8849); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__112397",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112398",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112399",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__112400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112401",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112402",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112410",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112404",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__112415",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}