{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125796, const global float* restrict v__125797, const global float* restrict v__125798, const global float* restrict v__125799, float v__125800, float v__125801, global float* v__125821, global int* v__125803, local float* v__125816, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125805; \n  float v__125807; \n  float v__105970; \n  /* Private Memory */\n  float v__125809_0;\n  \n  float v__125811_0;\n  \n  int v__125815_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10050 = v__125803; \n    local int v_w_id_125789; \n    if (get_local_id(0) == 0) {\n      v_w_id_125789 = atomic_inc(v_work_idx_10050); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125789 < v_MHeight_2)){\n      for (int v_l_id_125790 = get_local_id(0); v_l_id_125790 < v_MWidthC_1; v_l_id_125790 = (v_l_id_125790 + get_local_size(0))) {\n        float v_tmp_125883 = 0.0f; \n        v__125805 = v_tmp_125883; \n        /* reduce_while_seq */\n        for (int v_i_125791 = 0; v_i_125791 < 128; v_i_125791 = (1 + v_i_125791)) {\n          v__125815_0 = check(v__125805, v__125796[(v_l_id_125790 + (128 * v_MWidthC_1 * v_w_id_125789) + (v_MWidthC_1 * v_i_125791))]); \n          if (v__125815_0) {\n          } else {\n            break;\n          }\n          float v_tmp_125884 = 0.0f; \n          v__125807 = v_tmp_125884; \n          int v_index_125885 = v__125796[(v_l_id_125790 + (128 * v_MWidthC_1 * v_w_id_125789) + (v_MWidthC_1 * v_i_125791))]; \n          if (v_index_125885 < 0) {\n            v__125809_0 = v__125807; \n          } else {\n            if (v_index_125885 >= v_VLength_3) {\n              v__125809_0 = v__125807; \n            } else {\n              v__125809_0 = v__125798[v_index_125885]; \n            }\n          }\n          v__125811_0 = mult(v__125809_0, v__125797[(v_l_id_125790 + (128 * v_MWidthC_1 * v_w_id_125789) + (v_MWidthC_1 * v_i_125791))]); \n          v__125805 = add(v__125811_0, v__125805); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125792 = 0; \n          v__125816[v_l_id_125790] = id(v__125805); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10044; \n        v_work_idx_10044 = 0; \n        int v_l_id_125793 = atomic_inc(&(v_work_idx_10044)); \n        while((v_l_id_125793 < 1)){\n          float v_tmp_125888 = 0.0f; \n          v__105970 = v_tmp_125888; \n          /* reduce_seq */\n          for (int v_i_125794 = 0; v_i_125794 < v_MWidthC_1; v_i_125794 = (1 + v_i_125794)) {\n            v__105970 = add(v__105970, v__125816[(v_i_125794 + (v_MWidthC_1 * v_l_id_125793))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_125795 = 0; \n            v__125821[v_w_id_125789] = doubleMultiplyAdd(v__105970, v__125800, v__125799[v_w_id_125789], v__125801); \n          }\n          /* end map_seq */\n          v_l_id_125793 = atomic_inc(&(v_work_idx_10044)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125789 = atomic_inc(v_work_idx_10050); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__125796",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125797",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125798",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125800",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125801",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125803",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125821",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__125816",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}