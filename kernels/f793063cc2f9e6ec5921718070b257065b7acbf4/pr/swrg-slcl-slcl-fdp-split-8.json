{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__106059, const global float* restrict v__106060, const global float* restrict v__106061, const global float* restrict v__106062, float v__106063, float v__106064, global float* v__106081, local float* v__106076, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106067; \n  float v__106069; \n  float v__105970; \n  /* Private Memory */\n  float v__106071_0;\n  \n  float v__106073_0;\n  \n  for (int v_wg_id_106052 = get_group_id(0); v_wg_id_106052 < v_MHeight_2; v_wg_id_106052 = (v_wg_id_106052 + get_num_groups(0))) {\n    for (int v_l_id_106053 = get_local_id(0); v_l_id_106053 < v_MWidthC_1; v_l_id_106053 = (v_l_id_106053 + get_local_size(0))) {\n      float v_tmp_106146 = 0.0f; \n      v__106067 = v_tmp_106146; \n      /* reduce_seq */\n      for (int v_i_106054 = 0; v_i_106054 < 8; v_i_106054 = (1 + v_i_106054)) {\n        float v_tmp_106147 = 0.0f; \n        v__106069 = v_tmp_106147; \n        int v_index_106148 = v__106059[(v_l_id_106053 + (8 * v_MWidthC_1 * v_wg_id_106052) + (v_MWidthC_1 * v_i_106054))]; \n        if (v_index_106148 < 0) {\n          v__106071_0 = v__106069; \n        } else {\n          if (v_index_106148 >= v_VLength_3) {\n            v__106071_0 = v__106069; \n          } else {\n            v__106071_0 = v__106061[v_index_106148]; \n          }\n        }\n        v__106073_0 = mult(v__106071_0, v__106060[(v_l_id_106053 + (8 * v_MWidthC_1 * v_wg_id_106052) + (v_MWidthC_1 * v_i_106054))]); \n        v__106067 = add(v__106073_0, v__106067); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106055 = 0; \n        v__106076[v_l_id_106053] = id(v__106067); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_106056 = get_local_id(0); \n      float v_tmp_106151 = 0.0f; \n      v__105970 = v_tmp_106151; \n      /* reduce_seq */\n      for (int v_i_106057 = 0; v_i_106057 < v_MWidthC_1; v_i_106057 = (1 + v_i_106057)) {\n        v__105970 = add(v__105970, v__106076[(v_i_106057 + (v_MWidthC_1 * v_l_id_106056))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_106058 = 0; \n        v__106081[v_wg_id_106052] = doubleMultiplyAdd(v__105970, v__106063, v__106062[v_wg_id_106052], v__106064); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__106059",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106060",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106061",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106062",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106063",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106064",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__106081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__106076",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}