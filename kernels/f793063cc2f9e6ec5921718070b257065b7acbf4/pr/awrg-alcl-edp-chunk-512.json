{
  "name" : "awrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134624, const global float* restrict v__134625, const global float* restrict v__134626, const global float* restrict v__134627, float v__134628, float v__134629, global float* v__134645, global int* v__134631, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134632; \n  float v__134635; \n  /* Private Memory */\n  float v__134637_0;\n  \n  float v__134639_0;\n  \n  int v__134643_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10840 = v__134631; \n    local int v_w_id_134620; \n    if (get_local_id(0) == 0) {\n      v_w_id_134620 = atomic_inc(v_work_idx_10840); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134620 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10838; \n        v_work_idx_10838 = 0; \n        int v_l_id_134621 = atomic_inc(&(v_work_idx_10838)); \n        while((v_l_id_134621 < 512)){\n          float v_tmp_134688 = 0.0f; \n          v__134632 = v_tmp_134688; \n          /* reduce_while_seq */\n          for (int v_i_134622 = 0; v_i_134622 < v_MWidthC_1; v_i_134622 = (1 + v_i_134622)) {\n            v__134643_0 = check(v__134632, v__134624[(v_i_134622 + (512 * v_MWidthC_1 * v_w_id_134620) + (v_MWidthC_1 * v_l_id_134621))]); \n            if (v__134643_0) {\n            } else {\n              break;\n            }\n            float v_tmp_134689 = 0.0f; \n            v__134635 = v_tmp_134689; \n            int v_index_134690 = v__134624[(v_i_134622 + (512 * v_MWidthC_1 * v_w_id_134620) + (v_MWidthC_1 * v_l_id_134621))]; \n            if (v_index_134690 < 0) {\n              v__134637_0 = v__134635; \n            } else {\n              if (v_index_134690 >= v_VLength_3) {\n                v__134637_0 = v__134635; \n              } else {\n                v__134637_0 = v__134626[v_index_134690]; \n              }\n            }\n            v__134639_0 = mult(v__134637_0, v__134625[(v_i_134622 + (512 * v_MWidthC_1 * v_w_id_134620) + (v_MWidthC_1 * v_l_id_134621))]); \n            v__134632 = add(v__134639_0, v__134632); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134623 = 0; \n            v__134645[(v_l_id_134621 + (512 * v_w_id_134620))] = doubleMultiplyAdd(v__134632, v__134628, v__134627[(v_l_id_134621 + (512 * v_w_id_134620))], v__134629); \n          }\n          /* end map_seq */\n          v_l_id_134621 = atomic_inc(&(v_work_idx_10838)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134620 = atomic_inc(v_work_idx_10840); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__134624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134626",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134628",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134629",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134631",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}