{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__124405, const global float* restrict v__124406, const global float* restrict v__124407, const global float* restrict v__124408, float v__124409, float v__124410, global float* v__124429, local float* v__124424, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__124413; \n  float v__124415; \n  float v__105970; \n  /* Private Memory */\n  float v__124417_0;\n  \n  float v__124419_0;\n  \n  int v__124423_0;\n  \n  for (int v_wg_id_124398 = get_group_id(0); v_wg_id_124398 < v_MHeight_2; v_wg_id_124398 = (v_wg_id_124398 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9922; \n      v_work_idx_9922 = 0; \n      int v_l_id_124399 = atomic_inc(&(v_work_idx_9922)); \n      while((v_l_id_124399 < v_MWidthC_1)){\n        float v_tmp_124489 = 0.0f; \n        v__124413 = v_tmp_124489; \n        /* reduce_while_seq */\n        for (int v_i_124400 = 0; v_i_124400 < 128; v_i_124400 = (1 + v_i_124400)) {\n          v__124423_0 = check(v__124413, v__124405[(v_l_id_124399 + (128 * v_MWidthC_1 * v_wg_id_124398) + (v_MWidthC_1 * v_i_124400))]); \n          if (v__124423_0) {\n          } else {\n            break;\n          }\n          float v_tmp_124490 = 0.0f; \n          v__124415 = v_tmp_124490; \n          int v_index_124491 = v__124405[(v_l_id_124399 + (128 * v_MWidthC_1 * v_wg_id_124398) + (v_MWidthC_1 * v_i_124400))]; \n          if (v_index_124491 < 0) {\n            v__124417_0 = v__124415; \n          } else {\n            if (v_index_124491 >= v_VLength_3) {\n              v__124417_0 = v__124415; \n            } else {\n              v__124417_0 = v__124407[v_index_124491]; \n            }\n          }\n          v__124419_0 = mult(v__124417_0, v__124406[(v_l_id_124399 + (128 * v_MWidthC_1 * v_wg_id_124398) + (v_MWidthC_1 * v_i_124400))]); \n          v__124413 = add(v__124419_0, v__124413); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124401 = 0; \n          v__124424[v_l_id_124399] = id(v__124413); \n        }\n        /* end map_seq */\n        v_l_id_124399 = atomic_inc(&(v_work_idx_9922)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_124402 = get_local_id(0); \n      float v_tmp_124494 = 0.0f; \n      v__105970 = v_tmp_124494; \n      /* reduce_seq */\n      for (int v_i_124403 = 0; v_i_124403 < v_MWidthC_1; v_i_124403 = (1 + v_i_124403)) {\n        v__105970 = add(v__105970, v__124424[(v_i_124403 + (v_MWidthC_1 * v_l_id_124402))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_124404 = 0; \n        v__124429[v_wg_id_124398] = doubleMultiplyAdd(v__105970, v__124409, v__124408[v_wg_id_124398], v__124410); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__124405",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124406",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124407",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__124408",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__124409",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__124410",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__124429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__124424",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}