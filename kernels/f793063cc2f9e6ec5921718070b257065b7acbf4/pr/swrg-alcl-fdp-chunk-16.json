{
  "name" : "swrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110949, const global float* restrict v__110950, const global float* restrict v__110951, const global float* restrict v__110952, float v__110953, float v__110954, global float* v__110967, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110957; \n  float v__110959; \n  /* Private Memory */\n  float v__110961_0;\n  \n  float v__110963_0;\n  \n  for (int v_wg_id_110945 = get_group_id(0); v_wg_id_110945 < ((v_MHeight_2)/(16)); v_wg_id_110945 = (v_wg_id_110945 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8718; \n      v_work_idx_8718 = 0; \n      int v_l_id_110946 = atomic_inc(&(v_work_idx_8718)); \n      while((v_l_id_110946 < 16)){\n        float v_tmp_111005 = 0.0f; \n        v__110957 = v_tmp_111005; \n        /* reduce_seq */\n        for (int v_i_110947 = 0; v_i_110947 < v_MWidthC_1; v_i_110947 = (1 + v_i_110947)) {\n          float v_tmp_111006 = 0.0f; \n          v__110959 = v_tmp_111006; \n          int v_index_111007 = v__110949[(v_i_110947 + (16 * v_MWidthC_1 * v_wg_id_110945) + (v_MWidthC_1 * v_l_id_110946))]; \n          if (v_index_111007 < 0) {\n            v__110961_0 = v__110959; \n          } else {\n            if (v_index_111007 >= v_VLength_3) {\n              v__110961_0 = v__110959; \n            } else {\n              v__110961_0 = v__110951[v_index_111007]; \n            }\n          }\n          v__110963_0 = mult(v__110961_0, v__110950[(v_i_110947 + (16 * v_MWidthC_1 * v_wg_id_110945) + (v_MWidthC_1 * v_l_id_110946))]); \n          v__110957 = add(v__110963_0, v__110957); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_110948 = 0; \n          v__110967[(v_l_id_110946 + (16 * v_wg_id_110945))] = doubleMultiplyAdd(v__110957, v__110953, v__110952[(v_l_id_110946 + (16 * v_wg_id_110945))], v__110954); \n        }\n        /* end map_seq */\n        v_l_id_110946 = atomic_inc(&(v_work_idx_8718)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__110949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110951",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110953",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110954",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__110967",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}