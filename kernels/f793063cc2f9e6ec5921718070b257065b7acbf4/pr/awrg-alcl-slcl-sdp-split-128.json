{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126355, const global float* restrict v__126356, const global float* restrict v__126357, const global float* restrict v__126358, float v__126359, float v__126360, global float* v__126378, global float* v__126368, global int* v__126362, local float* v__126373, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126364; \n  float v__126369; \n  float v__105970; \n  /* Private Memory */\n  float v__126366_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10104 = v__126362; \n    local int v_w_id_126347; \n    if (get_local_id(0) == 0) {\n      v_w_id_126347 = atomic_inc(v_work_idx_10104); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126347 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10102; \n        v_work_idx_10102 = 0; \n        int v_l_id_126348 = atomic_inc(&(v_work_idx_10102)); \n        while((v_l_id_126348 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_126349 = 0; v_i_126349 < 128; v_i_126349 = (1 + v_i_126349)) {\n            float v_tmp_126433 = 0.0f; \n            v__126364 = v_tmp_126433; \n            int v_index_126434 = v__126355[(v_l_id_126348 + (128 * v_MWidthC_1 * v_w_id_126347) + (v_MWidthC_1 * v_i_126349))]; \n            if (v_index_126434 < 0) {\n              v__126366_0 = v__126364; \n            } else {\n              if (v_index_126434 >= v_VLength_3) {\n                v__126366_0 = v__126364; \n              } else {\n                v__126366_0 = v__126357[v_index_126434]; \n              }\n            }\n            v__126368[(127 + (128 * v_MWidthC_1 * v_w_id_126347) + (-1 * v_i_126349) + (128 * v_l_id_126348))] = mult(v__126366_0, v__126356[(v_l_id_126348 + (128 * v_MWidthC_1 * v_w_id_126347) + (v_MWidthC_1 * v_i_126349))]); \n          }\n          /* end map_seq */\n          float v_tmp_126435 = 0.0f; \n          v__126369 = v_tmp_126435; \n          /* reduce_seq */\n          for (int v_i_126350 = 0; v_i_126350 < 128; v_i_126350 = (1 + v_i_126350)) {\n            v__126369 = add(v__126369, v__126368[(v_i_126350 + (128 * v_MWidthC_1 * v_w_id_126347) + (128 * v_l_id_126348))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126351 = 0; \n            v__126373[v_l_id_126348] = id(v__126369); \n          }\n          /* end map_seq */\n          v_l_id_126348 = atomic_inc(&(v_work_idx_10102)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_126352 = get_local_id(0); \n        float v_tmp_126438 = 0.0f; \n        v__105970 = v_tmp_126438; \n        /* reduce_seq */\n        for (int v_i_126353 = 0; v_i_126353 < v_MWidthC_1; v_i_126353 = (1 + v_i_126353)) {\n          v__105970 = add(v__105970, v__126373[(v_i_126353 + (v_MWidthC_1 * v_l_id_126352))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_126354 = 0; \n          v__126378[v_w_id_126347] = doubleMultiplyAdd(v__105970, v__126359, v__126358[v_w_id_126347], v__126360); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126347 = atomic_inc(v_work_idx_10104); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__126355",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126356",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126357",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126358",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126359",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126360",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126368",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126362",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__126373",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}