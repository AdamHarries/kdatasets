{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113479, const global float* restrict v__113480, const global float* restrict v__113481, const global float* restrict v__113482, float v__113483, float v__113484, global float* v__113502, global float* v__113492, global int* v__113486, local float* v__113497, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113488; \n  float v__113493; \n  float v__105970; \n  /* Private Memory */\n  float v__113490_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8952 = v__113486; \n    local int v_w_id_113471; \n    if (get_local_id(0) == 0) {\n      v_w_id_113471 = atomic_inc(v_work_idx_8952); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113471 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8950; \n        v_work_idx_8950 = 0; \n        int v_l_id_113472 = atomic_inc(&(v_work_idx_8950)); \n        while((v_l_id_113472 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_113473 = 0; v_i_113473 < 16; v_i_113473 = (1 + v_i_113473)) {\n            float v_tmp_113557 = 0.0f; \n            v__113488 = v_tmp_113557; \n            int v_index_113558 = v__113479[(v_l_id_113472 + (16 * v_MWidthC_1 * v_w_id_113471) + (v_MWidthC_1 * v_i_113473))]; \n            if (v_index_113558 < 0) {\n              v__113490_0 = v__113488; \n            } else {\n              if (v_index_113558 >= v_VLength_3) {\n                v__113490_0 = v__113488; \n              } else {\n                v__113490_0 = v__113481[v_index_113558]; \n              }\n            }\n            v__113492[(15 + (16 * v_MWidthC_1 * v_w_id_113471) + (-1 * v_i_113473) + (16 * v_l_id_113472))] = mult(v__113490_0, v__113480[(v_l_id_113472 + (16 * v_MWidthC_1 * v_w_id_113471) + (v_MWidthC_1 * v_i_113473))]); \n          }\n          /* end map_seq */\n          float v_tmp_113559 = 0.0f; \n          v__113493 = v_tmp_113559; \n          /* reduce_seq */\n          for (int v_i_113474 = 0; v_i_113474 < 16; v_i_113474 = (1 + v_i_113474)) {\n            v__113493 = add(v__113493, v__113492[(v_i_113474 + (16 * v_MWidthC_1 * v_w_id_113471) + (16 * v_l_id_113472))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113475 = 0; \n            v__113497[v_l_id_113472] = id(v__113493); \n          }\n          /* end map_seq */\n          v_l_id_113472 = atomic_inc(&(v_work_idx_8950)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_113476 = get_local_id(0); \n        float v_tmp_113562 = 0.0f; \n        v__105970 = v_tmp_113562; \n        /* reduce_seq */\n        for (int v_i_113477 = 0; v_i_113477 < v_MWidthC_1; v_i_113477 = (1 + v_i_113477)) {\n          v__105970 = add(v__105970, v__113497[(v_i_113477 + (v_MWidthC_1 * v_l_id_113476))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_113478 = 0; \n          v__113502[v_w_id_113471] = doubleMultiplyAdd(v__105970, v__113483, v__113482[v_w_id_113471], v__113484); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113471 = atomic_inc(v_work_idx_8952); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__113479",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113480",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113481",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113483",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113484",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113492",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113486",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__113497",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}