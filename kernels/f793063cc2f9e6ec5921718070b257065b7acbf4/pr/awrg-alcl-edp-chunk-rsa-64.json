{
  "name" : "awrg-alcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__121982, const global float* restrict v__121983, const global float* restrict v__121984, const global float* restrict v__121985, float v__121986, float v__121987, global float* v__122002, global float* v__122001, global int* v__121989, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121990; \n  float v__121993; \n  /* Private Memory */\n  float v__121995_0;\n  \n  float v__121997_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9709 = v__121989; \n    local int v_w_id_121977; \n    if (get_local_id(0) == 0) {\n      v_w_id_121977 = atomic_inc(v_work_idx_9709); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121977 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9707; \n        v_work_idx_9707 = 0; \n        int v_l_id_121978 = atomic_inc(&(v_work_idx_9707)); \n        while((v_l_id_121978 < 64)){\n          float v_tmp_122034 = 0.0f; \n          v__121990 = v_tmp_122034; \n          /* reduce_seq */\n          int v_stop_122035 = min(v__121982[(1 + (v__121982[(v_l_id_121978 + (64 * v_w_id_121977))] / 4))], ((global int*)(v__121983 + (((global int*)(v__121983))[(v_l_id_121978 + (64 * v_w_id_121977))] / 4)))[1]); \n          for (int v_i_121979 = 0; v_i_121979 < v_stop_122035; v_i_121979 = (1 + v_i_121979)) {\n            float v_tmp_122043 = 0.0f; \n            v__121993 = v_tmp_122043; \n            int v_index_122045 = v__121982[(2 + v_i_121979 + (v__121982[(v_l_id_121978 + (64 * v_w_id_121977))] / 4))]; \n            if (v_index_122045 < 0) {\n              v__121995_0 = v__121993; \n            } else {\n              if (v_index_122045 >= v_MWidthC_1) {\n                v__121995_0 = v__121993; \n              } else {\n                v__121995_0 = v__121984[v_index_122045]; \n              }\n            }\n            v__121997_0 = mult(v__121983[(2 + v_i_121979 + (((global int*)(v__121983))[(v_l_id_121978 + (64 * v_w_id_121977))] / 4))], v__121995_0); \n            v__121990 = add(v__121990, v__121997_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121980 = 0; \n            v__122001[(v_l_id_121978 + (64 * v_w_id_121977))] = doubleMultiplyAdd(v__121990, v__121986, v__121985[(v_l_id_121978 + (64 * v_w_id_121977))], v__121987); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121981 = 0; \n            v__122002[(v_l_id_121978 + (64 * v_w_id_121977))] = id(v__122001[(v_l_id_121978 + (64 * v_w_id_121977))]); \n          }\n          /* end map_seq */\n          v_l_id_121978 = atomic_inc(&(v_work_idx_9707)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121977 = atomic_inc(v_work_idx_9709); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__121982",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__121983",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__121984",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__121985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121986",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121987",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121989",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122002",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}