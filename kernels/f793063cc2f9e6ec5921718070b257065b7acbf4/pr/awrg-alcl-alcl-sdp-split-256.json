{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130944, const global float* restrict v__130945, const global float* restrict v__130946, const global float* restrict v__130947, float v__130948, float v__130949, global float* v__130967, global float* v__130957, global int* v__130951, local float* v__130962, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130953; \n  float v__130958; \n  float v__105970; \n  /* Private Memory */\n  float v__130955_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10520 = v__130951; \n    local int v_w_id_130936; \n    if (get_local_id(0) == 0) {\n      v_w_id_130936 = atomic_inc(v_work_idx_10520); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130936 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10518; \n        v_work_idx_10518 = 0; \n        int v_l_id_130937 = atomic_inc(&(v_work_idx_10518)); \n        while((v_l_id_130937 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_130938 = 0; v_i_130938 < 256; v_i_130938 = (1 + v_i_130938)) {\n            float v_tmp_131018 = 0.0f; \n            v__130953 = v_tmp_131018; \n            int v_index_131019 = v__130944[(v_l_id_130937 + (256 * v_MWidthC_1 * v_w_id_130936) + (v_MWidthC_1 * v_i_130938))]; \n            if (v_index_131019 < 0) {\n              v__130955_0 = v__130953; \n            } else {\n              if (v_index_131019 >= v_VLength_3) {\n                v__130955_0 = v__130953; \n              } else {\n                v__130955_0 = v__130946[v_index_131019]; \n              }\n            }\n            v__130957[(255 + (256 * v_MWidthC_1 * v_w_id_130936) + (-1 * v_i_130938) + (256 * v_l_id_130937))] = mult(v__130955_0, v__130945[(v_l_id_130937 + (256 * v_MWidthC_1 * v_w_id_130936) + (v_MWidthC_1 * v_i_130938))]); \n          }\n          /* end map_seq */\n          float v_tmp_131020 = 0.0f; \n          v__130958 = v_tmp_131020; \n          /* reduce_seq */\n          for (int v_i_130939 = 0; v_i_130939 < 256; v_i_130939 = (1 + v_i_130939)) {\n            v__130958 = add(v__130958, v__130957[(v_i_130939 + (256 * v_MWidthC_1 * v_w_id_130936) + (256 * v_l_id_130937))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130940 = 0; \n            v__130962[v_l_id_130937] = id(v__130958); \n          }\n          /* end map_seq */\n          v_l_id_130937 = atomic_inc(&(v_work_idx_10518)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10512; \n        v_work_idx_10512 = 0; \n        int v_l_id_130941 = atomic_inc(&(v_work_idx_10512)); \n        while((v_l_id_130941 < 1)){\n          float v_tmp_131023 = 0.0f; \n          v__105970 = v_tmp_131023; \n          /* reduce_seq */\n          for (int v_i_130942 = 0; v_i_130942 < v_MWidthC_1; v_i_130942 = (1 + v_i_130942)) {\n            v__105970 = add(v__105970, v__130962[(v_i_130942 + (v_MWidthC_1 * v_l_id_130941))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130943 = 0; \n            v__130967[v_w_id_130936] = doubleMultiplyAdd(v__105970, v__130948, v__130947[v_w_id_130936], v__130949); \n          }\n          /* end map_seq */\n          v_l_id_130941 = atomic_inc(&(v_work_idx_10512)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130936 = atomic_inc(v_work_idx_10520); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__130944",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130945",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130946",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130948",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130949",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130957",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130951",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130967",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130962",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}