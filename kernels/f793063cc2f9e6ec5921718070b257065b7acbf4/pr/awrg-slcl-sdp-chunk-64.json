{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120502, const global float* restrict v__120503, const global float* restrict v__120504, const global float* restrict v__120505, float v__120506, float v__120507, global float* v__120521, global float* v__120515, global int* v__120509, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120511; \n  float v__120516; \n  /* Private Memory */\n  float v__120513_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9577 = v__120509; \n    local int v_w_id_120497; \n    if (get_local_id(0) == 0) {\n      v_w_id_120497 = atomic_inc(v_work_idx_9577); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_120497 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_120498 = get_local_id(0); v_l_id_120498 < 64; v_l_id_120498 = (v_l_id_120498 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_120499 = 0; v_i_120499 < v_MWidthC_1; v_i_120499 = (1 + v_i_120499)) {\n          float v_tmp_120564 = 0.0f; \n          v__120511 = v_tmp_120564; \n          int v_index_120565 = v__120502[(v_i_120499 + (64 * v_MWidthC_1 * v_w_id_120497) + (v_MWidthC_1 * v_l_id_120498))]; \n          if (v_index_120565 < 0) {\n            v__120513_0 = v__120511; \n          } else {\n            if (v_index_120565 >= v_VLength_3) {\n              v__120513_0 = v__120511; \n            } else {\n              v__120513_0 = v__120504[v_index_120565]; \n            }\n          }\n          v__120515[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_120497) + (-1 * v_i_120499) + (v_MWidthC_1 * v_l_id_120498))] = mult(v__120513_0, v__120503[(v_i_120499 + (64 * v_MWidthC_1 * v_w_id_120497) + (v_MWidthC_1 * v_l_id_120498))]); \n        }\n        /* end map_seq */\n        float v_tmp_120566 = 0.0f; \n        v__120516 = v_tmp_120566; \n        /* reduce_seq */\n        for (int v_i_120500 = 0; v_i_120500 < v_MWidthC_1; v_i_120500 = (1 + v_i_120500)) {\n          v__120516 = add(v__120516, v__120515[(v_i_120500 + (64 * v_MWidthC_1 * v_w_id_120497) + (v_MWidthC_1 * v_l_id_120498))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120501 = 0; \n          v__120521[(v_l_id_120498 + (64 * v_w_id_120497))] = doubleMultiplyAdd(v__120516, v__120506, v__120505[(v_l_id_120498 + (64 * v_w_id_120497))], v__120507); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_120497 = atomic_inc(v_work_idx_9577); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__120502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120503",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120504",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120505",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120506",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120507",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__120515",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120509",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__120521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}