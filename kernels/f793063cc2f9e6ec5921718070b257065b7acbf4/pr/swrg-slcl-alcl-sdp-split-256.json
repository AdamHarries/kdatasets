{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__127737, const global float* restrict v__127738, const global float* restrict v__127739, const global float* restrict v__127740, float v__127741, float v__127742, global float* v__127759, global float* v__127749, local float* v__127754, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__127745; \n  float v__127750; \n  float v__105970; \n  /* Private Memory */\n  float v__127747_0;\n  \n  for (int v_wg_id_127729 = get_group_id(0); v_wg_id_127729 < v_MHeight_2; v_wg_id_127729 = (v_wg_id_127729 + get_num_groups(0))) {\n    for (int v_l_id_127730 = get_local_id(0); v_l_id_127730 < v_MWidthC_1; v_l_id_127730 = (v_l_id_127730 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_127731 = 0; v_i_127731 < 256; v_i_127731 = (1 + v_i_127731)) {\n        float v_tmp_127820 = 0.0f; \n        v__127745 = v_tmp_127820; \n        int v_index_127821 = v__127737[(v_l_id_127730 + (256 * v_MWidthC_1 * v_wg_id_127729) + (v_MWidthC_1 * v_i_127731))]; \n        if (v_index_127821 < 0) {\n          v__127747_0 = v__127745; \n        } else {\n          if (v_index_127821 >= v_VLength_3) {\n            v__127747_0 = v__127745; \n          } else {\n            v__127747_0 = v__127739[v_index_127821]; \n          }\n        }\n        v__127749[(255 + (256 * v_MWidthC_1 * v_wg_id_127729) + (-1 * v_i_127731) + (256 * v_l_id_127730))] = mult(v__127747_0, v__127738[(v_l_id_127730 + (256 * v_MWidthC_1 * v_wg_id_127729) + (v_MWidthC_1 * v_i_127731))]); \n      }\n      /* end map_seq */\n      float v_tmp_127822 = 0.0f; \n      v__127750 = v_tmp_127822; \n      /* reduce_seq */\n      for (int v_i_127732 = 0; v_i_127732 < 256; v_i_127732 = (1 + v_i_127732)) {\n        v__127750 = add(v__127750, v__127749[(v_i_127732 + (256 * v_MWidthC_1 * v_wg_id_127729) + (256 * v_l_id_127730))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_127733 = 0; \n        v__127754[v_l_id_127730] = id(v__127750); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10218; \n      v_work_idx_10218 = 0; \n      int v_l_id_127734 = atomic_inc(&(v_work_idx_10218)); \n      while((v_l_id_127734 < 1)){\n        float v_tmp_127825 = 0.0f; \n        v__105970 = v_tmp_127825; \n        /* reduce_seq */\n        for (int v_i_127735 = 0; v_i_127735 < v_MWidthC_1; v_i_127735 = (1 + v_i_127735)) {\n          v__105970 = add(v__105970, v__127754[(v_i_127735 + (v_MWidthC_1 * v_l_id_127734))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_127736 = 0; \n          v__127759[v_wg_id_127729] = doubleMultiplyAdd(v__105970, v__127741, v__127740[v_wg_id_127729], v__127742); \n        }\n        /* end map_seq */\n        v_l_id_127734 = atomic_inc(&(v_work_idx_10218)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__127737",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127738",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127739",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__127740",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__127741",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__127742",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__127749",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__127759",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__127754",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}