{
  "name" : "swrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__118350, const global float* restrict v__118351, const global float* restrict v__118352, const global float* restrict v__118353, float v__118354, float v__118355, global float* v__118368, global float* v__118362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118358; \n  float v__118363; \n  /* Private Memory */\n  float v__118360_0;\n  \n  for (int v_wg_id_118345 = get_group_id(0); v_wg_id_118345 < ((v_MHeight_2)/(64)); v_wg_id_118345 = (v_wg_id_118345 + get_num_groups(0))) {\n    for (int v_l_id_118346 = get_local_id(0); v_l_id_118346 < 64; v_l_id_118346 = (v_l_id_118346 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_118347 = 0; v_i_118347 < v_MWidthC_1; v_i_118347 = (1 + v_i_118347)) {\n        float v_tmp_118412 = 0.0f; \n        v__118358 = v_tmp_118412; \n        int v_index_118413 = v__118350[(v_i_118347 + (64 * v_MWidthC_1 * v_wg_id_118345) + (v_MWidthC_1 * v_l_id_118346))]; \n        if (v_index_118413 < 0) {\n          v__118360_0 = v__118358; \n        } else {\n          if (v_index_118413 >= v_VLength_3) {\n            v__118360_0 = v__118358; \n          } else {\n            v__118360_0 = v__118352[v_index_118413]; \n          }\n        }\n        v__118362[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_118345) + (-1 * v_i_118347) + (v_MWidthC_1 * v_l_id_118346))] = mult(v__118360_0, v__118351[(v_i_118347 + (64 * v_MWidthC_1 * v_wg_id_118345) + (v_MWidthC_1 * v_l_id_118346))]); \n      }\n      /* end map_seq */\n      float v_tmp_118414 = 0.0f; \n      v__118363 = v_tmp_118414; \n      /* reduce_seq */\n      for (int v_i_118348 = 0; v_i_118348 < v_MWidthC_1; v_i_118348 = (1 + v_i_118348)) {\n        v__118363 = add(v__118363, v__118362[(v_i_118348 + (64 * v_MWidthC_1 * v_wg_id_118345) + (v_MWidthC_1 * v_l_id_118346))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_118349 = 0; \n        v__118368[(v_l_id_118346 + (64 * v_wg_id_118345))] = doubleMultiplyAdd(v__118363, v__118354, v__118353[(v_l_id_118346 + (64 * v_wg_id_118345))], v__118355); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__118350",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118352",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__118353",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118354",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118355",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__118362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__118368",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}