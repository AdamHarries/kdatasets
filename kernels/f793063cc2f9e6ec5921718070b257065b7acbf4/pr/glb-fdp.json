{
  "name" : "glb-fdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105011, const global float* restrict v__105012, const global float* restrict v__105013, const global float* restrict v__105014, float v__105015, float v__105016, global float* v__105029, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105019; \n  float v__105021; \n  /* Private Memory */\n  float v__105023; \n  float v__105025; \n  for (int v_gl_id_105008 = get_global_id(0); v_gl_id_105008 < v_MHeight_2; v_gl_id_105008 = (v_gl_id_105008 + get_global_size(0))) {\n    float v_tmp_105059 = 0.0f; \n    v__105019 = v_tmp_105059; \n    /* reduce_seq */\n    for (int v_i_105009 = 0; v_i_105009 < v_MWidthC_1; v_i_105009 = (1 + v_i_105009)) {\n      float v_tmp_105060 = 0.0f; \n      v__105021 = v_tmp_105060; \n      int v_index_105061 = v__105011[(v_i_105009 + (v_MWidthC_1 * v_gl_id_105008))]; \n      if (v_index_105061 < 0) {\n        v__105023 = v__105021; \n      } else {\n        if (v_index_105061 >= v_VLength_3) {\n          v__105023 = v__105021; \n        } else {\n          v__105023 = v__105013[v_index_105061]; \n        }\n      }\n      v__105025 = mult(v__105023, v__105012[(v_i_105009 + (v_MWidthC_1 * v_gl_id_105008))]); \n      v__105019 = add(v__105025, v__105019); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_105010 = 0; \n      v__105029[v_gl_id_105008] = doubleMultiplyAdd(v__105019, v__105015, v__105014[v_gl_id_105008], v__105016); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__105011",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105013",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105014",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105015",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105016",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__105029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}