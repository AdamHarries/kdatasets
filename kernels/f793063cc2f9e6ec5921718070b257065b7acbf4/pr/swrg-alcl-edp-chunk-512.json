{
  "name" : "swrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132478, const global float* restrict v__132479, const global float* restrict v__132480, const global float* restrict v__132481, float v__132482, float v__132483, global float* v__132498, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132485; \n  float v__132488; \n  /* Private Memory */\n  float v__132490_0;\n  \n  float v__132492_0;\n  \n  int v__132496_0;\n  \n  for (int v_wg_id_132474 = get_group_id(0); v_wg_id_132474 < ((v_MHeight_2)/(512)); v_wg_id_132474 = (v_wg_id_132474 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10644; \n      v_work_idx_10644 = 0; \n      int v_l_id_132475 = atomic_inc(&(v_work_idx_10644)); \n      while((v_l_id_132475 < 512)){\n        float v_tmp_132542 = 0.0f; \n        v__132485 = v_tmp_132542; \n        /* reduce_while_seq */\n        for (int v_i_132476 = 0; v_i_132476 < v_MWidthC_1; v_i_132476 = (1 + v_i_132476)) {\n          v__132496_0 = check(v__132485, v__132478[(v_i_132476 + (512 * v_MWidthC_1 * v_wg_id_132474) + (v_MWidthC_1 * v_l_id_132475))]); \n          if (v__132496_0) {\n          } else {\n            break;\n          }\n          float v_tmp_132543 = 0.0f; \n          v__132488 = v_tmp_132543; \n          int v_index_132544 = v__132478[(v_i_132476 + (512 * v_MWidthC_1 * v_wg_id_132474) + (v_MWidthC_1 * v_l_id_132475))]; \n          if (v_index_132544 < 0) {\n            v__132490_0 = v__132488; \n          } else {\n            if (v_index_132544 >= v_VLength_3) {\n              v__132490_0 = v__132488; \n            } else {\n              v__132490_0 = v__132480[v_index_132544]; \n            }\n          }\n          v__132492_0 = mult(v__132490_0, v__132479[(v_i_132476 + (512 * v_MWidthC_1 * v_wg_id_132474) + (v_MWidthC_1 * v_l_id_132475))]); \n          v__132485 = add(v__132492_0, v__132485); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132477 = 0; \n          v__132498[(v_l_id_132475 + (512 * v_wg_id_132474))] = doubleMultiplyAdd(v__132485, v__132482, v__132481[(v_l_id_132475 + (512 * v_wg_id_132474))], v__132483); \n        }\n        /* end map_seq */\n        v_l_id_132475 = atomic_inc(&(v_work_idx_10644)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__132478",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132479",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132480",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132482",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132483",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__132498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}