{
  "name" : "awrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121748, const global float* restrict v__121749, const global float* restrict v__121750, const global float* restrict v__121751, float v__121752, float v__121753, global float* v__121769, global int* v__121755, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121756; \n  float v__121759; \n  /* Private Memory */\n  float v__121761_0;\n  \n  float v__121763_0;\n  \n  int v__121767_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9688 = v__121755; \n    local int v_w_id_121744; \n    if (get_local_id(0) == 0) {\n      v_w_id_121744 = atomic_inc(v_work_idx_9688); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121744 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9686; \n        v_work_idx_9686 = 0; \n        int v_l_id_121745 = atomic_inc(&(v_work_idx_9686)); \n        while((v_l_id_121745 < 64)){\n          float v_tmp_121812 = 0.0f; \n          v__121756 = v_tmp_121812; \n          /* reduce_while_seq */\n          for (int v_i_121746 = 0; v_i_121746 < v_MWidthC_1; v_i_121746 = (1 + v_i_121746)) {\n            v__121767_0 = check(v__121756, v__121748[(v_i_121746 + (64 * v_MWidthC_1 * v_w_id_121744) + (v_MWidthC_1 * v_l_id_121745))]); \n            if (v__121767_0) {\n            } else {\n              break;\n            }\n            float v_tmp_121813 = 0.0f; \n            v__121759 = v_tmp_121813; \n            int v_index_121814 = v__121748[(v_i_121746 + (64 * v_MWidthC_1 * v_w_id_121744) + (v_MWidthC_1 * v_l_id_121745))]; \n            if (v_index_121814 < 0) {\n              v__121761_0 = v__121759; \n            } else {\n              if (v_index_121814 >= v_VLength_3) {\n                v__121761_0 = v__121759; \n              } else {\n                v__121761_0 = v__121750[v_index_121814]; \n              }\n            }\n            v__121763_0 = mult(v__121761_0, v__121749[(v_i_121746 + (64 * v_MWidthC_1 * v_w_id_121744) + (v_MWidthC_1 * v_l_id_121745))]); \n            v__121756 = add(v__121763_0, v__121756); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121747 = 0; \n            v__121769[(v_l_id_121745 + (64 * v_w_id_121744))] = doubleMultiplyAdd(v__121756, v__121752, v__121751[(v_l_id_121745 + (64 * v_w_id_121744))], v__121753); \n          }\n          /* end map_seq */\n          v_l_id_121745 = atomic_inc(&(v_work_idx_9686)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121744 = atomic_inc(v_work_idx_9688); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__121748",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121749",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121750",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121751",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121752",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121753",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121755",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}