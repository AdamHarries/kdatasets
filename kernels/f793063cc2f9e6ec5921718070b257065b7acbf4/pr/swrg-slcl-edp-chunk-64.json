{
  "name" : "swrg-slcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__118498, const global float* restrict v__118499, const global float* restrict v__118500, const global float* restrict v__118501, float v__118502, float v__118503, global float* v__118518, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118505; \n  float v__118508; \n  /* Private Memory */\n  float v__118510_0;\n  \n  float v__118512_0;\n  \n  int v__118516_0;\n  \n  for (int v_wg_id_118494 = get_group_id(0); v_wg_id_118494 < ((v_MHeight_2)/(64)); v_wg_id_118494 = (v_wg_id_118494 + get_num_groups(0))) {\n    for (int v_l_id_118495 = get_local_id(0); v_l_id_118495 < 64; v_l_id_118495 = (v_l_id_118495 + get_local_size(0))) {\n      float v_tmp_118566 = 0.0f; \n      v__118505 = v_tmp_118566; \n      /* reduce_while_seq */\n      for (int v_i_118496 = 0; v_i_118496 < v_MWidthC_1; v_i_118496 = (1 + v_i_118496)) {\n        v__118516_0 = check(v__118505, v__118498[(v_i_118496 + (64 * v_MWidthC_1 * v_wg_id_118494) + (v_MWidthC_1 * v_l_id_118495))]); \n        if (v__118516_0) {\n        } else {\n          break;\n        }\n        float v_tmp_118567 = 0.0f; \n        v__118508 = v_tmp_118567; \n        int v_index_118568 = v__118498[(v_i_118496 + (64 * v_MWidthC_1 * v_wg_id_118494) + (v_MWidthC_1 * v_l_id_118495))]; \n        if (v_index_118568 < 0) {\n          v__118510_0 = v__118508; \n        } else {\n          if (v_index_118568 >= v_VLength_3) {\n            v__118510_0 = v__118508; \n          } else {\n            v__118510_0 = v__118500[v_index_118568]; \n          }\n        }\n        v__118512_0 = mult(v__118510_0, v__118499[(v_i_118496 + (64 * v_MWidthC_1 * v_wg_id_118494) + (v_MWidthC_1 * v_l_id_118495))]); \n        v__118505 = add(v__118512_0, v__118505); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_118497 = 0; \n        v__118518[(v_l_id_118495 + (64 * v_wg_id_118494))] = doubleMultiplyAdd(v__118505, v__118502, v__118501[(v_l_id_118495 + (64 * v_wg_id_118494))], v__118503); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__118498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118499",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118500",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__118501",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118502",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118503",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__118518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}