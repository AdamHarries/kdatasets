{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131037, const global float* restrict v__131038, const global float* restrict v__131039, const global float* restrict v__131040, float v__131041, float v__131042, global float* v__131060, global int* v__131044, local float* v__131055, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131046; \n  float v__131048; \n  float v__105970; \n  /* Private Memory */\n  float v__131050_0;\n  \n  float v__131052_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10531 = v__131044; \n    local int v_w_id_131030; \n    if (get_local_id(0) == 0) {\n      v_w_id_131030 = atomic_inc(v_work_idx_10531); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_131030 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10529; \n        v_work_idx_10529 = 0; \n        int v_l_id_131031 = atomic_inc(&(v_work_idx_10529)); \n        while((v_l_id_131031 < v_MWidthC_1)){\n          float v_tmp_131111 = 0.0f; \n          v__131046 = v_tmp_131111; \n          /* reduce_seq */\n          for (int v_i_131032 = 0; v_i_131032 < 256; v_i_131032 = (1 + v_i_131032)) {\n            float v_tmp_131112 = 0.0f; \n            v__131048 = v_tmp_131112; \n            int v_index_131113 = v__131037[(v_l_id_131031 + (256 * v_MWidthC_1 * v_w_id_131030) + (v_MWidthC_1 * v_i_131032))]; \n            if (v_index_131113 < 0) {\n              v__131050_0 = v__131048; \n            } else {\n              if (v_index_131113 >= v_VLength_3) {\n                v__131050_0 = v__131048; \n              } else {\n                v__131050_0 = v__131039[v_index_131113]; \n              }\n            }\n            v__131052_0 = mult(v__131050_0, v__131038[(v_l_id_131031 + (256 * v_MWidthC_1 * v_w_id_131030) + (v_MWidthC_1 * v_i_131032))]); \n            v__131046 = add(v__131052_0, v__131046); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_131033 = 0; \n            v__131055[v_l_id_131031] = id(v__131046); \n          }\n          /* end map_seq */\n          v_l_id_131031 = atomic_inc(&(v_work_idx_10529)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10524; \n        v_work_idx_10524 = 0; \n        int v_l_id_131034 = atomic_inc(&(v_work_idx_10524)); \n        while((v_l_id_131034 < 1)){\n          float v_tmp_131116 = 0.0f; \n          v__105970 = v_tmp_131116; \n          /* reduce_seq */\n          for (int v_i_131035 = 0; v_i_131035 < v_MWidthC_1; v_i_131035 = (1 + v_i_131035)) {\n            v__105970 = add(v__105970, v__131055[(v_i_131035 + (v_MWidthC_1 * v_l_id_131034))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_131036 = 0; \n            v__131060[v_w_id_131030] = doubleMultiplyAdd(v__105970, v__131041, v__131040[v_w_id_131030], v__131042); \n          }\n          /* end map_seq */\n          v_l_id_131034 = atomic_inc(&(v_work_idx_10524)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_131030 = atomic_inc(v_work_idx_10531); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__131037",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131038",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131039",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131040",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131041",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131042",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__131044",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__131060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__131055",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}