{
  "name" : "swrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__127625, const global float* restrict v__127626, const global float* restrict v__127627, const global float* restrict v__127628, float v__127629, float v__127630, global float* v__127649, local float* v__127644, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__127633; \n  float v__127635; \n  float v__105970; \n  /* Private Memory */\n  float v__127637_0;\n  \n  float v__127639_0;\n  \n  int v__127643_0;\n  \n  for (int v_wg_id_127618 = get_group_id(0); v_wg_id_127618 < v_MHeight_2; v_wg_id_127618 = (v_wg_id_127618 + get_num_groups(0))) {\n    for (int v_l_id_127619 = get_local_id(0); v_l_id_127619 < v_MWidthC_1; v_l_id_127619 = (v_l_id_127619 + get_local_size(0))) {\n      float v_tmp_127717 = 0.0f; \n      v__127633 = v_tmp_127717; \n      /* reduce_while_seq */\n      for (int v_i_127620 = 0; v_i_127620 < 256; v_i_127620 = (1 + v_i_127620)) {\n        v__127643_0 = check(v__127633, v__127625[(v_l_id_127619 + (256 * v_MWidthC_1 * v_wg_id_127618) + (v_MWidthC_1 * v_i_127620))]); \n        if (v__127643_0) {\n        } else {\n          break;\n        }\n        float v_tmp_127718 = 0.0f; \n        v__127635 = v_tmp_127718; \n        int v_index_127719 = v__127625[(v_l_id_127619 + (256 * v_MWidthC_1 * v_wg_id_127618) + (v_MWidthC_1 * v_i_127620))]; \n        if (v_index_127719 < 0) {\n          v__127637_0 = v__127635; \n        } else {\n          if (v_index_127719 >= v_VLength_3) {\n            v__127637_0 = v__127635; \n          } else {\n            v__127637_0 = v__127627[v_index_127719]; \n          }\n        }\n        v__127639_0 = mult(v__127637_0, v__127626[(v_l_id_127619 + (256 * v_MWidthC_1 * v_wg_id_127618) + (v_MWidthC_1 * v_i_127620))]); \n        v__127633 = add(v__127639_0, v__127633); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_127621 = 0; \n        v__127644[v_l_id_127619] = id(v__127633); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_127622 = get_local_id(0); \n      float v_tmp_127722 = 0.0f; \n      v__105970 = v_tmp_127722; \n      /* reduce_seq */\n      for (int v_i_127623 = 0; v_i_127623 < v_MWidthC_1; v_i_127623 = (1 + v_i_127623)) {\n        v__105970 = add(v__105970, v__127644[(v_i_127623 + (v_MWidthC_1 * v_l_id_127622))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_127624 = 0; \n        v__127649[v_wg_id_127618] = doubleMultiplyAdd(v__105970, v__127629, v__127628[v_wg_id_127618], v__127630); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__127625",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127626",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__127627",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__127628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__127629",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__127630",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__127649",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__127644",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}