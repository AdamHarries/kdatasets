{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132029, const global float* restrict v__132030, const global float* restrict v__132031, const global float* restrict v__132032, float v__132033, float v__132034, global float* v__132051, global float* v__132041, local float* v__132046, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132037; \n  float v__132042; \n  float v__105970; \n  /* Private Memory */\n  float v__132039_0;\n  \n  for (int v_wg_id_132021 = get_group_id(0); v_wg_id_132021 < v_MHeight_2; v_wg_id_132021 = (v_wg_id_132021 + get_num_groups(0))) {\n    for (int v_l_id_132022 = get_local_id(0); v_l_id_132022 < v_MWidthC_1; v_l_id_132022 = (v_l_id_132022 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_132023 = 0; v_i_132023 < 512; v_i_132023 = (1 + v_i_132023)) {\n        float v_tmp_132112 = 0.0f; \n        v__132037 = v_tmp_132112; \n        int v_index_132113 = v__132029[(v_l_id_132022 + (512 * v_MWidthC_1 * v_wg_id_132021) + (v_MWidthC_1 * v_i_132023))]; \n        if (v_index_132113 < 0) {\n          v__132039_0 = v__132037; \n        } else {\n          if (v_index_132113 >= v_VLength_3) {\n            v__132039_0 = v__132037; \n          } else {\n            v__132039_0 = v__132031[v_index_132113]; \n          }\n        }\n        v__132041[(511 + (512 * v_MWidthC_1 * v_wg_id_132021) + (-1 * v_i_132023) + (512 * v_l_id_132022))] = mult(v__132039_0, v__132030[(v_l_id_132022 + (512 * v_MWidthC_1 * v_wg_id_132021) + (v_MWidthC_1 * v_i_132023))]); \n      }\n      /* end map_seq */\n      float v_tmp_132114 = 0.0f; \n      v__132042 = v_tmp_132114; \n      /* reduce_seq */\n      for (int v_i_132024 = 0; v_i_132024 < 512; v_i_132024 = (1 + v_i_132024)) {\n        v__132042 = add(v__132042, v__132041[(v_i_132024 + (512 * v_MWidthC_1 * v_wg_id_132021) + (512 * v_l_id_132022))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_132025 = 0; \n        v__132046[v_l_id_132022] = id(v__132042); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10602; \n      v_work_idx_10602 = 0; \n      int v_l_id_132026 = atomic_inc(&(v_work_idx_10602)); \n      while((v_l_id_132026 < 1)){\n        float v_tmp_132117 = 0.0f; \n        v__105970 = v_tmp_132117; \n        /* reduce_seq */\n        for (int v_i_132027 = 0; v_i_132027 < v_MWidthC_1; v_i_132027 = (1 + v_i_132027)) {\n          v__105970 = add(v__105970, v__132046[(v_i_132027 + (v_MWidthC_1 * v_l_id_132026))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132028 = 0; \n          v__132051[v_wg_id_132021] = doubleMultiplyAdd(v__105970, v__132033, v__132032[v_wg_id_132021], v__132034); \n        }\n        /* end map_seq */\n        v_l_id_132026 = atomic_inc(&(v_work_idx_10602)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__132029",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132030",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132031",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132032",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132033",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132034",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__132041",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__132051",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__132046",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}