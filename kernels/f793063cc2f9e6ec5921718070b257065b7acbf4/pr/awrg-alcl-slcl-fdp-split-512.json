{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__135036, const global float* restrict v__135037, const global float* restrict v__135038, const global float* restrict v__135039, float v__135040, float v__135041, global float* v__135059, global int* v__135043, local float* v__135054, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__135045; \n  float v__135047; \n  float v__105970; \n  /* Private Memory */\n  float v__135049_0;\n  \n  float v__135051_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10882 = v__135043; \n    local int v_w_id_135029; \n    if (get_local_id(0) == 0) {\n      v_w_id_135029 = atomic_inc(v_work_idx_10882); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_135029 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10880; \n        v_work_idx_10880 = 0; \n        int v_l_id_135030 = atomic_inc(&(v_work_idx_10880)); \n        while((v_l_id_135030 < v_MWidthC_1)){\n          float v_tmp_135114 = 0.0f; \n          v__135045 = v_tmp_135114; \n          /* reduce_seq */\n          for (int v_i_135031 = 0; v_i_135031 < 512; v_i_135031 = (1 + v_i_135031)) {\n            float v_tmp_135115 = 0.0f; \n            v__135047 = v_tmp_135115; \n            int v_index_135116 = v__135036[(v_l_id_135030 + (512 * v_MWidthC_1 * v_w_id_135029) + (v_MWidthC_1 * v_i_135031))]; \n            if (v_index_135116 < 0) {\n              v__135049_0 = v__135047; \n            } else {\n              if (v_index_135116 >= v_VLength_3) {\n                v__135049_0 = v__135047; \n              } else {\n                v__135049_0 = v__135038[v_index_135116]; \n              }\n            }\n            v__135051_0 = mult(v__135049_0, v__135037[(v_l_id_135030 + (512 * v_MWidthC_1 * v_w_id_135029) + (v_MWidthC_1 * v_i_135031))]); \n            v__135045 = add(v__135051_0, v__135045); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135032 = 0; \n            v__135054[v_l_id_135030] = id(v__135045); \n          }\n          /* end map_seq */\n          v_l_id_135030 = atomic_inc(&(v_work_idx_10880)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_135033 = get_local_id(0); \n        float v_tmp_135119 = 0.0f; \n        v__105970 = v_tmp_135119; \n        /* reduce_seq */\n        for (int v_i_135034 = 0; v_i_135034 < v_MWidthC_1; v_i_135034 = (1 + v_i_135034)) {\n          v__105970 = add(v__105970, v__135054[(v_i_135034 + (v_MWidthC_1 * v_l_id_135033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_135035 = 0; \n          v__135059[v_w_id_135029] = doubleMultiplyAdd(v__105970, v__135040, v__135039[v_w_id_135029], v__135041); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_135029 = atomic_inc(v_work_idx_10882); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__135036",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135037",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135038",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__135039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__135040",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__135041",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__135043",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__135059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__135054",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}