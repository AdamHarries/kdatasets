{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108105, const global float* restrict v__108106, const global float* restrict v__108107, const global float* restrict v__108108, float v__108109, float v__108110, global float* v__108128, global float* v__108118, global int* v__108112, local float* v__108123, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108114; \n  float v__108119; \n  float v__105970; \n  /* Private Memory */\n  float v__108116_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8465 = v__108112; \n    local int v_w_id_108097; \n    if (get_local_id(0) == 0) {\n      v_w_id_108097 = atomic_inc(v_work_idx_8465); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108097 < v_MHeight_2)){\n      for (int v_l_id_108098 = get_local_id(0); v_l_id_108098 < v_MWidthC_1; v_l_id_108098 = (v_l_id_108098 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_108099 = 0; v_i_108099 < 8; v_i_108099 = (1 + v_i_108099)) {\n          float v_tmp_108191 = 0.0f; \n          v__108114 = v_tmp_108191; \n          int v_index_108192 = v__108105[(v_l_id_108098 + (8 * v_MWidthC_1 * v_w_id_108097) + (v_MWidthC_1 * v_i_108099))]; \n          if (v_index_108192 < 0) {\n            v__108116_0 = v__108114; \n          } else {\n            if (v_index_108192 >= v_VLength_3) {\n              v__108116_0 = v__108114; \n            } else {\n              v__108116_0 = v__108107[v_index_108192]; \n            }\n          }\n          v__108118[(7 + (8 * v_MWidthC_1 * v_w_id_108097) + (-1 * v_i_108099) + (8 * v_l_id_108098))] = mult(v__108116_0, v__108106[(v_l_id_108098 + (8 * v_MWidthC_1 * v_w_id_108097) + (v_MWidthC_1 * v_i_108099))]); \n        }\n        /* end map_seq */\n        float v_tmp_108193 = 0.0f; \n        v__108119 = v_tmp_108193; \n        /* reduce_seq */\n        for (int v_i_108100 = 0; v_i_108100 < 8; v_i_108100 = (1 + v_i_108100)) {\n          v__108119 = add(v__108119, v__108118[(v_i_108100 + (8 * v_MWidthC_1 * v_w_id_108097) + (8 * v_l_id_108098))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108101 = 0; \n          v__108123[v_l_id_108098] = id(v__108119); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_108102 = get_local_id(0); \n        float v_tmp_108196 = 0.0f; \n        v__105970 = v_tmp_108196; \n        /* reduce_seq */\n        for (int v_i_108103 = 0; v_i_108103 < v_MWidthC_1; v_i_108103 = (1 + v_i_108103)) {\n          v__105970 = add(v__105970, v__108123[(v_i_108103 + (v_MWidthC_1 * v_l_id_108102))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108104 = 0; \n          v__108128[v_w_id_108097] = doubleMultiplyAdd(v__105970, v__108109, v__108108[v_w_id_108097], v__108110); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108097 = atomic_inc(v_work_idx_8465); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__108105",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108106",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108107",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108109",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108110",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108118",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108112",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__108123",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}