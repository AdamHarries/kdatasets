{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133857, const global float* restrict v__133858, const global float* restrict v__133859, const global float* restrict v__133860, float v__133861, float v__133862, global float* v__133880, global float* v__133870, global int* v__133864, local float* v__133875, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133866; \n  float v__133871; \n  float v__105970; \n  /* Private Memory */\n  float v__133868_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10769 = v__133864; \n    local int v_w_id_133849; \n    if (get_local_id(0) == 0) {\n      v_w_id_133849 = atomic_inc(v_work_idx_10769); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_133849 < v_MHeight_2)){\n      for (int v_l_id_133850 = get_local_id(0); v_l_id_133850 < v_MWidthC_1; v_l_id_133850 = (v_l_id_133850 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_133851 = 0; v_i_133851 < 512; v_i_133851 = (1 + v_i_133851)) {\n          float v_tmp_133943 = 0.0f; \n          v__133866 = v_tmp_133943; \n          int v_index_133944 = v__133857[(v_l_id_133850 + (512 * v_MWidthC_1 * v_w_id_133849) + (v_MWidthC_1 * v_i_133851))]; \n          if (v_index_133944 < 0) {\n            v__133868_0 = v__133866; \n          } else {\n            if (v_index_133944 >= v_VLength_3) {\n              v__133868_0 = v__133866; \n            } else {\n              v__133868_0 = v__133859[v_index_133944]; \n            }\n          }\n          v__133870[(511 + (512 * v_MWidthC_1 * v_w_id_133849) + (-1 * v_i_133851) + (512 * v_l_id_133850))] = mult(v__133868_0, v__133858[(v_l_id_133850 + (512 * v_MWidthC_1 * v_w_id_133849) + (v_MWidthC_1 * v_i_133851))]); \n        }\n        /* end map_seq */\n        float v_tmp_133945 = 0.0f; \n        v__133871 = v_tmp_133945; \n        /* reduce_seq */\n        for (int v_i_133852 = 0; v_i_133852 < 512; v_i_133852 = (1 + v_i_133852)) {\n          v__133871 = add(v__133871, v__133870[(v_i_133852 + (512 * v_MWidthC_1 * v_w_id_133849) + (512 * v_l_id_133850))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133853 = 0; \n          v__133875[v_l_id_133850] = id(v__133871); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_133854 = get_local_id(0); \n        float v_tmp_133948 = 0.0f; \n        v__105970 = v_tmp_133948; \n        /* reduce_seq */\n        for (int v_i_133855 = 0; v_i_133855 < v_MWidthC_1; v_i_133855 = (1 + v_i_133855)) {\n          v__105970 = add(v__105970, v__133875[(v_i_133855 + (v_MWidthC_1 * v_l_id_133854))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133856 = 0; \n          v__133880[v_w_id_133849] = doubleMultiplyAdd(v__105970, v__133861, v__133860[v_w_id_133849], v__133862); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_133849 = atomic_inc(v_work_idx_10769); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__133857",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133858",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133859",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133860",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133861",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133862",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133870",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133864",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__133880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133875",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}