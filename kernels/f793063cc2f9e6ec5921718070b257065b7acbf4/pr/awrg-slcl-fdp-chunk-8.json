{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107701, const global float* restrict v__107702, const global float* restrict v__107703, const global float* restrict v__107704, float v__107705, float v__107706, global float* v__107720, global int* v__107708, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107710; \n  float v__107712; \n  /* Private Memory */\n  float v__107714_0;\n  \n  float v__107716_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8431 = v__107708; \n    local int v_w_id_107697; \n    if (get_local_id(0) == 0) {\n      v_w_id_107697 = atomic_inc(v_work_idx_8431); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_107697 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_107698 = get_local_id(0); v_l_id_107698 < 8; v_l_id_107698 = (v_l_id_107698 + get_local_size(0))) {\n        float v_tmp_107761 = 0.0f; \n        v__107710 = v_tmp_107761; \n        /* reduce_seq */\n        for (int v_i_107699 = 0; v_i_107699 < v_MWidthC_1; v_i_107699 = (1 + v_i_107699)) {\n          float v_tmp_107762 = 0.0f; \n          v__107712 = v_tmp_107762; \n          int v_index_107763 = v__107701[(v_i_107699 + (8 * v_MWidthC_1 * v_w_id_107697) + (v_MWidthC_1 * v_l_id_107698))]; \n          if (v_index_107763 < 0) {\n            v__107714_0 = v__107712; \n          } else {\n            if (v_index_107763 >= v_VLength_3) {\n              v__107714_0 = v__107712; \n            } else {\n              v__107714_0 = v__107703[v_index_107763]; \n            }\n          }\n          v__107716_0 = mult(v__107714_0, v__107702[(v_i_107699 + (8 * v_MWidthC_1 * v_w_id_107697) + (v_MWidthC_1 * v_l_id_107698))]); \n          v__107710 = add(v__107716_0, v__107710); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107700 = 0; \n          v__107720[(v_l_id_107698 + (8 * v_w_id_107697))] = doubleMultiplyAdd(v__107710, v__107705, v__107704[(v_l_id_107698 + (8 * v_w_id_107697))], v__107706); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_107697 = atomic_inc(v_work_idx_8431); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__107701",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107702",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107703",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107704",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107705",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107706",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107708",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__107720",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}