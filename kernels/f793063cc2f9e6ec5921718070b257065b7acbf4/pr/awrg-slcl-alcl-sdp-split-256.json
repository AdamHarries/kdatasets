{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__129886, const global float* restrict v__129887, const global float* restrict v__129888, const global float* restrict v__129889, float v__129890, float v__129891, global float* v__129909, global float* v__129899, global int* v__129893, local float* v__129904, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__129895; \n  float v__129900; \n  float v__105970; \n  /* Private Memory */\n  float v__129897_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10414 = v__129893; \n    local int v_w_id_129878; \n    if (get_local_id(0) == 0) {\n      v_w_id_129878 = atomic_inc(v_work_idx_10414); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_129878 < v_MHeight_2)){\n      for (int v_l_id_129879 = get_local_id(0); v_l_id_129879 < v_MWidthC_1; v_l_id_129879 = (v_l_id_129879 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_129880 = 0; v_i_129880 < 256; v_i_129880 = (1 + v_i_129880)) {\n          float v_tmp_129968 = 0.0f; \n          v__129895 = v_tmp_129968; \n          int v_index_129969 = v__129886[(v_l_id_129879 + (256 * v_MWidthC_1 * v_w_id_129878) + (v_MWidthC_1 * v_i_129880))]; \n          if (v_index_129969 < 0) {\n            v__129897_0 = v__129895; \n          } else {\n            if (v_index_129969 >= v_VLength_3) {\n              v__129897_0 = v__129895; \n            } else {\n              v__129897_0 = v__129888[v_index_129969]; \n            }\n          }\n          v__129899[(255 + (256 * v_MWidthC_1 * v_w_id_129878) + (-1 * v_i_129880) + (256 * v_l_id_129879))] = mult(v__129897_0, v__129887[(v_l_id_129879 + (256 * v_MWidthC_1 * v_w_id_129878) + (v_MWidthC_1 * v_i_129880))]); \n        }\n        /* end map_seq */\n        float v_tmp_129970 = 0.0f; \n        v__129900 = v_tmp_129970; \n        /* reduce_seq */\n        for (int v_i_129881 = 0; v_i_129881 < 256; v_i_129881 = (1 + v_i_129881)) {\n          v__129900 = add(v__129900, v__129899[(v_i_129881 + (256 * v_MWidthC_1 * v_w_id_129878) + (256 * v_l_id_129879))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_129882 = 0; \n          v__129904[v_l_id_129879] = id(v__129900); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10407; \n        v_work_idx_10407 = 0; \n        int v_l_id_129883 = atomic_inc(&(v_work_idx_10407)); \n        while((v_l_id_129883 < 1)){\n          float v_tmp_129973 = 0.0f; \n          v__105970 = v_tmp_129973; \n          /* reduce_seq */\n          for (int v_i_129884 = 0; v_i_129884 < v_MWidthC_1; v_i_129884 = (1 + v_i_129884)) {\n            v__105970 = add(v__105970, v__129904[(v_i_129884 + (v_MWidthC_1 * v_l_id_129883))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_129885 = 0; \n            v__129909[v_w_id_129878] = doubleMultiplyAdd(v__105970, v__129890, v__129889[v_w_id_129878], v__129891); \n          }\n          /* end map_seq */\n          v_l_id_129883 = atomic_inc(&(v_work_idx_10407)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_129878 = atomic_inc(v_work_idx_10414); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__129886",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129887",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129888",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__129889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__129890",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__129891",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__129899",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__129893",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__129909",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__129904",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}