{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__118068, const global float* restrict v__118069, const global float* restrict v__118070, const global float* restrict v__118071, float v__118072, float v__118073, global float* v__118091, global float* v__118081, global int* v__118075, local float* v__118086, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__118077; \n  float v__118082; \n  float v__105970; \n  /* Private Memory */\n  float v__118079_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9368 = v__118075; \n    local int v_w_id_118060; \n    if (get_local_id(0) == 0) {\n      v_w_id_118060 = atomic_inc(v_work_idx_9368); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_118060 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9366; \n        v_work_idx_9366 = 0; \n        int v_l_id_118061 = atomic_inc(&(v_work_idx_9366)); \n        while((v_l_id_118061 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_118062 = 0; v_i_118062 < 32; v_i_118062 = (1 + v_i_118062)) {\n            float v_tmp_118142 = 0.0f; \n            v__118077 = v_tmp_118142; \n            int v_index_118143 = v__118068[(v_l_id_118061 + (32 * v_MWidthC_1 * v_w_id_118060) + (v_MWidthC_1 * v_i_118062))]; \n            if (v_index_118143 < 0) {\n              v__118079_0 = v__118077; \n            } else {\n              if (v_index_118143 >= v_VLength_3) {\n                v__118079_0 = v__118077; \n              } else {\n                v__118079_0 = v__118070[v_index_118143]; \n              }\n            }\n            v__118081[(31 + (32 * v_MWidthC_1 * v_w_id_118060) + (-1 * v_i_118062) + (32 * v_l_id_118061))] = mult(v__118079_0, v__118069[(v_l_id_118061 + (32 * v_MWidthC_1 * v_w_id_118060) + (v_MWidthC_1 * v_i_118062))]); \n          }\n          /* end map_seq */\n          float v_tmp_118144 = 0.0f; \n          v__118082 = v_tmp_118144; \n          /* reduce_seq */\n          for (int v_i_118063 = 0; v_i_118063 < 32; v_i_118063 = (1 + v_i_118063)) {\n            v__118082 = add(v__118082, v__118081[(v_i_118063 + (32 * v_MWidthC_1 * v_w_id_118060) + (32 * v_l_id_118061))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118064 = 0; \n            v__118086[v_l_id_118061] = id(v__118082); \n          }\n          /* end map_seq */\n          v_l_id_118061 = atomic_inc(&(v_work_idx_9366)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9360; \n        v_work_idx_9360 = 0; \n        int v_l_id_118065 = atomic_inc(&(v_work_idx_9360)); \n        while((v_l_id_118065 < 1)){\n          float v_tmp_118147 = 0.0f; \n          v__105970 = v_tmp_118147; \n          /* reduce_seq */\n          for (int v_i_118066 = 0; v_i_118066 < v_MWidthC_1; v_i_118066 = (1 + v_i_118066)) {\n            v__105970 = add(v__105970, v__118086[(v_i_118066 + (v_MWidthC_1 * v_l_id_118065))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_118067 = 0; \n            v__118091[v_w_id_118060] = doubleMultiplyAdd(v__105970, v__118072, v__118071[v_w_id_118060], v__118073); \n          }\n          /* end map_seq */\n          v_l_id_118065 = atomic_inc(&(v_work_idx_9360)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_118060 = atomic_inc(v_work_idx_9368); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__118068",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118069",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118070",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__118071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__118072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__118073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__118081",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__118075",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__118091",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__118086",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}