{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128046, const global float* restrict v__128047, const global float* restrict v__128048, const global float* restrict v__128049, float v__128050, float v__128051, global float* v__128064, global float* v__128058, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128054; \n  float v__128059; \n  /* Private Memory */\n  float v__128056_0;\n  \n  for (int v_wg_id_128041 = get_group_id(0); v_wg_id_128041 < ((v_MHeight_2)/(256)); v_wg_id_128041 = (v_wg_id_128041 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10248; \n      v_work_idx_10248 = 0; \n      int v_l_id_128042 = atomic_inc(&(v_work_idx_10248)); \n      while((v_l_id_128042 < 256)){\n        /* map_seq */\n        for (int v_i_128043 = 0; v_i_128043 < v_MWidthC_1; v_i_128043 = (1 + v_i_128043)) {\n          float v_tmp_128104 = 0.0f; \n          v__128054 = v_tmp_128104; \n          int v_index_128105 = v__128046[(v_i_128043 + (256 * v_MWidthC_1 * v_wg_id_128041) + (v_MWidthC_1 * v_l_id_128042))]; \n          if (v_index_128105 < 0) {\n            v__128056_0 = v__128054; \n          } else {\n            if (v_index_128105 >= v_VLength_3) {\n              v__128056_0 = v__128054; \n            } else {\n              v__128056_0 = v__128048[v_index_128105]; \n            }\n          }\n          v__128058[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_128041) + (-1 * v_i_128043) + (v_MWidthC_1 * v_l_id_128042))] = mult(v__128056_0, v__128047[(v_i_128043 + (256 * v_MWidthC_1 * v_wg_id_128041) + (v_MWidthC_1 * v_l_id_128042))]); \n        }\n        /* end map_seq */\n        float v_tmp_128106 = 0.0f; \n        v__128059 = v_tmp_128106; \n        /* reduce_seq */\n        for (int v_i_128044 = 0; v_i_128044 < v_MWidthC_1; v_i_128044 = (1 + v_i_128044)) {\n          v__128059 = add(v__128059, v__128058[(v_i_128044 + (256 * v_MWidthC_1 * v_wg_id_128041) + (v_MWidthC_1 * v_l_id_128042))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128045 = 0; \n          v__128064[(v_l_id_128042 + (256 * v_wg_id_128041))] = doubleMultiplyAdd(v__128059, v__128050, v__128049[(v_l_id_128042 + (256 * v_wg_id_128041))], v__128051); \n        }\n        /* end map_seq */\n        v_l_id_128042 = atomic_inc(&(v_work_idx_10248)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__128046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128048",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128049",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128050",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128051",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__128058",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__128064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}