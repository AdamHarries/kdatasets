{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__124509, const global float* restrict v__124510, const global float* restrict v__124511, const global float* restrict v__124512, float v__124513, float v__124514, global float* v__124531, global float* v__124521, local float* v__124526, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__124517; \n  float v__124522; \n  float v__105970; \n  /* Private Memory */\n  float v__124519_0;\n  \n  for (int v_wg_id_124501 = get_group_id(0); v_wg_id_124501 < v_MHeight_2; v_wg_id_124501 = (v_wg_id_124501 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9933; \n      v_work_idx_9933 = 0; \n      int v_l_id_124502 = atomic_inc(&(v_work_idx_9933)); \n      while((v_l_id_124502 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_124503 = 0; v_i_124503 < 128; v_i_124503 = (1 + v_i_124503)) {\n          float v_tmp_124584 = 0.0f; \n          v__124517 = v_tmp_124584; \n          int v_index_124585 = v__124509[(v_l_id_124502 + (128 * v_MWidthC_1 * v_wg_id_124501) + (v_MWidthC_1 * v_i_124503))]; \n          if (v_index_124585 < 0) {\n            v__124519_0 = v__124517; \n          } else {\n            if (v_index_124585 >= v_VLength_3) {\n              v__124519_0 = v__124517; \n            } else {\n              v__124519_0 = v__124511[v_index_124585]; \n            }\n          }\n          v__124521[(127 + (128 * v_MWidthC_1 * v_wg_id_124501) + (-1 * v_i_124503) + (128 * v_l_id_124502))] = mult(v__124519_0, v__124510[(v_l_id_124502 + (128 * v_MWidthC_1 * v_wg_id_124501) + (v_MWidthC_1 * v_i_124503))]); \n        }\n        /* end map_seq */\n        float v_tmp_124586 = 0.0f; \n        v__124522 = v_tmp_124586; \n        /* reduce_seq */\n        for (int v_i_124504 = 0; v_i_124504 < 128; v_i_124504 = (1 + v_i_124504)) {\n          v__124522 = add(v__124522, v__124521[(v_i_124504 + (128 * v_MWidthC_1 * v_wg_id_124501) + (128 * v_l_id_124502))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124505 = 0; \n          v__124526[v_l_id_124502] = id(v__124522); \n        }\n        /* end map_seq */\n        v_l_id_124502 = atomic_inc(&(v_work_idx_9933)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9927; \n      v_work_idx_9927 = 0; \n      int v_l_id_124506 = atomic_inc(&(v_work_idx_9927)); \n      while((v_l_id_124506 < 1)){\n        float v_tmp_124589 = 0.0f; \n        v__105970 = v_tmp_124589; \n        /* reduce_seq */\n        for (int v_i_124507 = 0; v_i_124507 < v_MWidthC_1; v_i_124507 = (1 + v_i_124507)) {\n          v__105970 = add(v__105970, v__124526[(v_i_124507 + (v_MWidthC_1 * v_l_id_124506))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124508 = 0; \n          v__124531[v_wg_id_124501] = doubleMultiplyAdd(v__105970, v__124513, v__124512[v_wg_id_124501], v__124514); \n        }\n        /* end map_seq */\n        v_l_id_124506 = atomic_inc(&(v_work_idx_9927)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__124509",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124510",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124511",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__124512",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__124513",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__124514",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__124521",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__124531",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__124526",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}