{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108732, const global float* restrict v__108733, const global float* restrict v__108734, const global float* restrict v__108735, float v__108736, float v__108737, global float* v__108751, global float* v__108745, global int* v__108739, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108741; \n  float v__108746; \n  /* Private Memory */\n  float v__108743_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8522 = v__108739; \n    local int v_w_id_108727; \n    if (get_local_id(0) == 0) {\n      v_w_id_108727 = atomic_inc(v_work_idx_8522); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108727 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8520; \n        v_work_idx_8520 = 0; \n        int v_l_id_108728 = atomic_inc(&(v_work_idx_8520)); \n        while((v_l_id_108728 < 8)){\n          /* map_seq */\n          for (int v_i_108729 = 0; v_i_108729 < v_MWidthC_1; v_i_108729 = (1 + v_i_108729)) {\n            float v_tmp_108790 = 0.0f; \n            v__108741 = v_tmp_108790; \n            int v_index_108791 = v__108732[(v_i_108729 + (8 * v_MWidthC_1 * v_w_id_108727) + (v_MWidthC_1 * v_l_id_108728))]; \n            if (v_index_108791 < 0) {\n              v__108743_0 = v__108741; \n            } else {\n              if (v_index_108791 >= v_VLength_3) {\n                v__108743_0 = v__108741; \n              } else {\n                v__108743_0 = v__108734[v_index_108791]; \n              }\n            }\n            v__108745[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_108727) + (-1 * v_i_108729) + (v_MWidthC_1 * v_l_id_108728))] = mult(v__108743_0, v__108733[(v_i_108729 + (8 * v_MWidthC_1 * v_w_id_108727) + (v_MWidthC_1 * v_l_id_108728))]); \n          }\n          /* end map_seq */\n          float v_tmp_108792 = 0.0f; \n          v__108746 = v_tmp_108792; \n          /* reduce_seq */\n          for (int v_i_108730 = 0; v_i_108730 < v_MWidthC_1; v_i_108730 = (1 + v_i_108730)) {\n            v__108746 = add(v__108746, v__108745[(v_i_108730 + (8 * v_MWidthC_1 * v_w_id_108727) + (v_MWidthC_1 * v_l_id_108728))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_108731 = 0; \n            v__108751[(v_l_id_108728 + (8 * v_w_id_108727))] = doubleMultiplyAdd(v__108746, v__108736, v__108735[(v_l_id_108728 + (8 * v_w_id_108727))], v__108737); \n          }\n          /* end map_seq */\n          v_l_id_108728 = atomic_inc(&(v_work_idx_8520)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108727 = atomic_inc(v_work_idx_8522); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__108732",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108734",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108736",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108737",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108739",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108751",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}