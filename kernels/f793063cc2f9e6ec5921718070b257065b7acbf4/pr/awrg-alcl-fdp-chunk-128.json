{
  "name" : "awrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125971, const global float* restrict v__125972, const global float* restrict v__125973, const global float* restrict v__125974, float v__125975, float v__125976, global float* v__125990, global int* v__125978, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125980; \n  float v__125982; \n  /* Private Memory */\n  float v__125984_0;\n  \n  float v__125986_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10065 = v__125978; \n    local int v_w_id_125967; \n    if (get_local_id(0) == 0) {\n      v_w_id_125967 = atomic_inc(v_work_idx_10065); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125967 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10063; \n        v_work_idx_10063 = 0; \n        int v_l_id_125968 = atomic_inc(&(v_work_idx_10063)); \n        while((v_l_id_125968 < 128)){\n          float v_tmp_126027 = 0.0f; \n          v__125980 = v_tmp_126027; \n          /* reduce_seq */\n          for (int v_i_125969 = 0; v_i_125969 < v_MWidthC_1; v_i_125969 = (1 + v_i_125969)) {\n            float v_tmp_126028 = 0.0f; \n            v__125982 = v_tmp_126028; \n            int v_index_126029 = v__125971[(v_i_125969 + (128 * v_MWidthC_1 * v_w_id_125967) + (v_MWidthC_1 * v_l_id_125968))]; \n            if (v_index_126029 < 0) {\n              v__125984_0 = v__125982; \n            } else {\n              if (v_index_126029 >= v_VLength_3) {\n                v__125984_0 = v__125982; \n              } else {\n                v__125984_0 = v__125973[v_index_126029]; \n              }\n            }\n            v__125986_0 = mult(v__125984_0, v__125972[(v_i_125969 + (128 * v_MWidthC_1 * v_w_id_125967) + (v_MWidthC_1 * v_l_id_125968))]); \n            v__125980 = add(v__125986_0, v__125980); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_125970 = 0; \n            v__125990[(v_l_id_125968 + (128 * v_w_id_125967))] = doubleMultiplyAdd(v__125980, v__125975, v__125974[(v_l_id_125968 + (128 * v_w_id_125967))], v__125976); \n          }\n          /* end map_seq */\n          v_l_id_125968 = atomic_inc(&(v_work_idx_10063)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125967 = atomic_inc(v_work_idx_10065); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__125971",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125973",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125975",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125976",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125978",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}