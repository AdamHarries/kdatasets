{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__135236, const global float* restrict v__135237, const global float* restrict v__135238, const global float* restrict v__135239, float v__135240, float v__135241, global float* v__135259, global float* v__135249, global int* v__135243, local float* v__135254, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__135245; \n  float v__135250; \n  float v__105970; \n  /* Private Memory */\n  float v__135247_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10904 = v__135243; \n    local int v_w_id_135228; \n    if (get_local_id(0) == 0) {\n      v_w_id_135228 = atomic_inc(v_work_idx_10904); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_135228 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10902; \n        v_work_idx_10902 = 0; \n        int v_l_id_135229 = atomic_inc(&(v_work_idx_10902)); \n        while((v_l_id_135229 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_135230 = 0; v_i_135230 < 512; v_i_135230 = (1 + v_i_135230)) {\n            float v_tmp_135310 = 0.0f; \n            v__135245 = v_tmp_135310; \n            int v_index_135311 = v__135236[(v_l_id_135229 + (512 * v_MWidthC_1 * v_w_id_135228) + (v_MWidthC_1 * v_i_135230))]; \n            if (v_index_135311 < 0) {\n              v__135247_0 = v__135245; \n            } else {\n              if (v_index_135311 >= v_VLength_3) {\n                v__135247_0 = v__135245; \n              } else {\n                v__135247_0 = v__135238[v_index_135311]; \n              }\n            }\n            v__135249[(511 + (512 * v_MWidthC_1 * v_w_id_135228) + (-1 * v_i_135230) + (512 * v_l_id_135229))] = mult(v__135247_0, v__135237[(v_l_id_135229 + (512 * v_MWidthC_1 * v_w_id_135228) + (v_MWidthC_1 * v_i_135230))]); \n          }\n          /* end map_seq */\n          float v_tmp_135312 = 0.0f; \n          v__135250 = v_tmp_135312; \n          /* reduce_seq */\n          for (int v_i_135231 = 0; v_i_135231 < 512; v_i_135231 = (1 + v_i_135231)) {\n            v__135250 = add(v__135250, v__135249[(v_i_135231 + (512 * v_MWidthC_1 * v_w_id_135228) + (512 * v_l_id_135229))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135232 = 0; \n            v__135254[v_l_id_135229] = id(v__135250); \n          }\n          /* end map_seq */\n          v_l_id_135229 = atomic_inc(&(v_work_idx_10902)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10896; \n        v_work_idx_10896 = 0; \n        int v_l_id_135233 = atomic_inc(&(v_work_idx_10896)); \n        while((v_l_id_135233 < 1)){\n          float v_tmp_135315 = 0.0f; \n          v__105970 = v_tmp_135315; \n          /* reduce_seq */\n          for (int v_i_135234 = 0; v_i_135234 < v_MWidthC_1; v_i_135234 = (1 + v_i_135234)) {\n            v__105970 = add(v__105970, v__135254[(v_i_135234 + (v_MWidthC_1 * v_l_id_135233))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135235 = 0; \n            v__135259[v_w_id_135228] = doubleMultiplyAdd(v__105970, v__135240, v__135239[v_w_id_135228], v__135241); \n          }\n          /* end map_seq */\n          v_l_id_135233 = atomic_inc(&(v_work_idx_10896)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_135228 = atomic_inc(v_work_idx_10904); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__135236",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135237",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135238",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__135239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__135240",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__135241",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__135249",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135243",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__135259",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__135254",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}