{
  "name" : "awrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108803, const global float* restrict v__108804, const global float* restrict v__108805, const global float* restrict v__108806, float v__108807, float v__108808, global float* v__108822, global int* v__108810, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108812; \n  float v__108814; \n  /* Private Memory */\n  float v__108816_0;\n  \n  float v__108818_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8529 = v__108810; \n    local int v_w_id_108799; \n    if (get_local_id(0) == 0) {\n      v_w_id_108799 = atomic_inc(v_work_idx_8529); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108799 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8527; \n        v_work_idx_8527 = 0; \n        int v_l_id_108800 = atomic_inc(&(v_work_idx_8527)); \n        while((v_l_id_108800 < 8)){\n          float v_tmp_108859 = 0.0f; \n          v__108812 = v_tmp_108859; \n          /* reduce_seq */\n          for (int v_i_108801 = 0; v_i_108801 < v_MWidthC_1; v_i_108801 = (1 + v_i_108801)) {\n            float v_tmp_108860 = 0.0f; \n            v__108814 = v_tmp_108860; \n            int v_index_108861 = v__108803[(v_i_108801 + (8 * v_MWidthC_1 * v_w_id_108799) + (v_MWidthC_1 * v_l_id_108800))]; \n            if (v_index_108861 < 0) {\n              v__108816_0 = v__108814; \n            } else {\n              if (v_index_108861 >= v_VLength_3) {\n                v__108816_0 = v__108814; \n              } else {\n                v__108816_0 = v__108805[v_index_108861]; \n              }\n            }\n            v__108818_0 = mult(v__108816_0, v__108804[(v_i_108801 + (8 * v_MWidthC_1 * v_w_id_108799) + (v_MWidthC_1 * v_l_id_108800))]); \n            v__108812 = add(v__108818_0, v__108812); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_108802 = 0; \n            v__108822[(v_l_id_108800 + (8 * v_w_id_108799))] = doubleMultiplyAdd(v__108812, v__108807, v__108806[(v_l_id_108800 + (8 * v_w_id_108799))], v__108808); \n          }\n          /* end map_seq */\n          v_l_id_108800 = atomic_inc(&(v_work_idx_8527)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108799 = atomic_inc(v_work_idx_8529); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__108803",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108805",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108807",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108808",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108810",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}