{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128501, const global float* restrict v__128502, const global float* restrict v__128503, const global float* restrict v__128504, float v__128505, float v__128506, global float* v__128523, global float* v__128513, local float* v__128518, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128509; \n  float v__128514; \n  float v__105970; \n  /* Private Memory */\n  float v__128511_0;\n  \n  for (int v_wg_id_128493 = get_group_id(0); v_wg_id_128493 < v_MHeight_2; v_wg_id_128493 = (v_wg_id_128493 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10288; \n      v_work_idx_10288 = 0; \n      int v_l_id_128494 = atomic_inc(&(v_work_idx_10288)); \n      while((v_l_id_128494 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_128495 = 0; v_i_128495 < 256; v_i_128495 = (1 + v_i_128495)) {\n          float v_tmp_128580 = 0.0f; \n          v__128509 = v_tmp_128580; \n          int v_index_128581 = v__128501[(v_l_id_128494 + (256 * v_MWidthC_1 * v_wg_id_128493) + (v_MWidthC_1 * v_i_128495))]; \n          if (v_index_128581 < 0) {\n            v__128511_0 = v__128509; \n          } else {\n            if (v_index_128581 >= v_VLength_3) {\n              v__128511_0 = v__128509; \n            } else {\n              v__128511_0 = v__128503[v_index_128581]; \n            }\n          }\n          v__128513[(255 + (256 * v_MWidthC_1 * v_wg_id_128493) + (-1 * v_i_128495) + (256 * v_l_id_128494))] = mult(v__128511_0, v__128502[(v_l_id_128494 + (256 * v_MWidthC_1 * v_wg_id_128493) + (v_MWidthC_1 * v_i_128495))]); \n        }\n        /* end map_seq */\n        float v_tmp_128582 = 0.0f; \n        v__128514 = v_tmp_128582; \n        /* reduce_seq */\n        for (int v_i_128496 = 0; v_i_128496 < 256; v_i_128496 = (1 + v_i_128496)) {\n          v__128514 = add(v__128514, v__128513[(v_i_128496 + (256 * v_MWidthC_1 * v_wg_id_128493) + (256 * v_l_id_128494))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128497 = 0; \n          v__128518[v_l_id_128494] = id(v__128514); \n        }\n        /* end map_seq */\n        v_l_id_128494 = atomic_inc(&(v_work_idx_10288)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_128498 = get_local_id(0); \n      float v_tmp_128585 = 0.0f; \n      v__105970 = v_tmp_128585; \n      /* reduce_seq */\n      for (int v_i_128499 = 0; v_i_128499 < v_MWidthC_1; v_i_128499 = (1 + v_i_128499)) {\n        v__105970 = add(v__105970, v__128518[(v_i_128499 + (v_MWidthC_1 * v_l_id_128498))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_128500 = 0; \n        v__128523[v_wg_id_128493] = doubleMultiplyAdd(v__105970, v__128505, v__128504[v_wg_id_128493], v__128506); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__128501",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128502",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128503",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128504",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128505",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128506",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__128513",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__128523",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__128518",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}