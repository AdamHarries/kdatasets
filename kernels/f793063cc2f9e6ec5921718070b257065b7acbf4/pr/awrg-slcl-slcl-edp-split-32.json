{
  "name" : "awrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116899, const global float* restrict v__116900, const global float* restrict v__116901, const global float* restrict v__116902, float v__116903, float v__116904, global float* v__116924, global int* v__116906, local float* v__116919, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116908; \n  float v__116910; \n  float v__105970; \n  /* Private Memory */\n  float v__116912_0;\n  \n  float v__116914_0;\n  \n  int v__116918_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9251 = v__116906; \n    local int v_w_id_116892; \n    if (get_local_id(0) == 0) {\n      v_w_id_116892 = atomic_inc(v_work_idx_9251); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_116892 < v_MHeight_2)){\n      for (int v_l_id_116893 = get_local_id(0); v_l_id_116893 < v_MWidthC_1; v_l_id_116893 = (v_l_id_116893 + get_local_size(0))) {\n        float v_tmp_116990 = 0.0f; \n        v__116908 = v_tmp_116990; \n        /* reduce_while_seq */\n        for (int v_i_116894 = 0; v_i_116894 < 32; v_i_116894 = (1 + v_i_116894)) {\n          v__116918_0 = check(v__116908, v__116899[(v_l_id_116893 + (32 * v_MWidthC_1 * v_w_id_116892) + (v_MWidthC_1 * v_i_116894))]); \n          if (v__116918_0) {\n          } else {\n            break;\n          }\n          float v_tmp_116991 = 0.0f; \n          v__116910 = v_tmp_116991; \n          int v_index_116992 = v__116899[(v_l_id_116893 + (32 * v_MWidthC_1 * v_w_id_116892) + (v_MWidthC_1 * v_i_116894))]; \n          if (v_index_116992 < 0) {\n            v__116912_0 = v__116910; \n          } else {\n            if (v_index_116992 >= v_VLength_3) {\n              v__116912_0 = v__116910; \n            } else {\n              v__116912_0 = v__116901[v_index_116992]; \n            }\n          }\n          v__116914_0 = mult(v__116912_0, v__116900[(v_l_id_116893 + (32 * v_MWidthC_1 * v_w_id_116892) + (v_MWidthC_1 * v_i_116894))]); \n          v__116908 = add(v__116914_0, v__116908); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116895 = 0; \n          v__116919[v_l_id_116893] = id(v__116908); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_116896 = get_local_id(0); \n        float v_tmp_116995 = 0.0f; \n        v__105970 = v_tmp_116995; \n        /* reduce_seq */\n        for (int v_i_116897 = 0; v_i_116897 < v_MWidthC_1; v_i_116897 = (1 + v_i_116897)) {\n          v__105970 = add(v__105970, v__116919[(v_i_116897 + (v_MWidthC_1 * v_l_id_116896))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116898 = 0; \n          v__116924[v_w_id_116892] = doubleMultiplyAdd(v__105970, v__116903, v__116902[v_w_id_116892], v__116904); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_116892 = atomic_inc(v_work_idx_9251); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__116899",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116900",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116901",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116902",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116903",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116904",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__116906",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__116924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__116919",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}