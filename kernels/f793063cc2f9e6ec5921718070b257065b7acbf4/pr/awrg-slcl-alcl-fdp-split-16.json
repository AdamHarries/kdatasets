{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__112819, const global float* restrict v__112820, const global float* restrict v__112821, const global float* restrict v__112822, float v__112823, float v__112824, global float* v__112842, global int* v__112826, local float* v__112837, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112828; \n  float v__112830; \n  float v__105970; \n  /* Private Memory */\n  float v__112832_0;\n  \n  float v__112834_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8888 = v__112826; \n    local int v_w_id_112812; \n    if (get_local_id(0) == 0) {\n      v_w_id_112812 = atomic_inc(v_work_idx_8888); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112812 < v_MHeight_2)){\n      for (int v_l_id_112813 = get_local_id(0); v_l_id_112813 < v_MWidthC_1; v_l_id_112813 = (v_l_id_112813 + get_local_size(0))) {\n        float v_tmp_112901 = 0.0f; \n        v__112828 = v_tmp_112901; \n        /* reduce_seq */\n        for (int v_i_112814 = 0; v_i_112814 < 16; v_i_112814 = (1 + v_i_112814)) {\n          float v_tmp_112902 = 0.0f; \n          v__112830 = v_tmp_112902; \n          int v_index_112903 = v__112819[(v_l_id_112813 + (16 * v_MWidthC_1 * v_w_id_112812) + (v_MWidthC_1 * v_i_112814))]; \n          if (v_index_112903 < 0) {\n            v__112832_0 = v__112830; \n          } else {\n            if (v_index_112903 >= v_VLength_3) {\n              v__112832_0 = v__112830; \n            } else {\n              v__112832_0 = v__112821[v_index_112903]; \n            }\n          }\n          v__112834_0 = mult(v__112832_0, v__112820[(v_l_id_112813 + (16 * v_MWidthC_1 * v_w_id_112812) + (v_MWidthC_1 * v_i_112814))]); \n          v__112828 = add(v__112834_0, v__112828); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112815 = 0; \n          v__112837[v_l_id_112813] = id(v__112828); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8882; \n        v_work_idx_8882 = 0; \n        int v_l_id_112816 = atomic_inc(&(v_work_idx_8882)); \n        while((v_l_id_112816 < 1)){\n          float v_tmp_112906 = 0.0f; \n          v__105970 = v_tmp_112906; \n          /* reduce_seq */\n          for (int v_i_112817 = 0; v_i_112817 < v_MWidthC_1; v_i_112817 = (1 + v_i_112817)) {\n            v__105970 = add(v__105970, v__112837[(v_i_112817 + (v_MWidthC_1 * v_l_id_112816))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_112818 = 0; \n            v__112842[v_w_id_112812] = doubleMultiplyAdd(v__105970, v__112823, v__112822[v_w_id_112812], v__112824); \n          }\n          /* end map_seq */\n          v_l_id_112816 = atomic_inc(&(v_work_idx_8882)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_112812 = atomic_inc(v_work_idx_8888); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__112819",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112820",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112821",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__112822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112823",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112824",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112826",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__112837",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}