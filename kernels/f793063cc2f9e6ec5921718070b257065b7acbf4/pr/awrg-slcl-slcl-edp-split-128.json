{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__125483, const global float* restrict v__125484, const global float* restrict v__125485, const global float* restrict v__125486, float v__125487, float v__125488, global float* v__125508, global int* v__125490, local float* v__125503, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__125492; \n  float v__125494; \n  float v__105970; \n  /* Private Memory */\n  float v__125496_0;\n  \n  float v__125498_0;\n  \n  int v__125502_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10019 = v__125490; \n    local int v_w_id_125476; \n    if (get_local_id(0) == 0) {\n      v_w_id_125476 = atomic_inc(v_work_idx_10019); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_125476 < v_MHeight_2)){\n      for (int v_l_id_125477 = get_local_id(0); v_l_id_125477 < v_MWidthC_1; v_l_id_125477 = (v_l_id_125477 + get_local_size(0))) {\n        float v_tmp_125574 = 0.0f; \n        v__125492 = v_tmp_125574; \n        /* reduce_while_seq */\n        for (int v_i_125478 = 0; v_i_125478 < 128; v_i_125478 = (1 + v_i_125478)) {\n          v__125502_0 = check(v__125492, v__125483[(v_l_id_125477 + (128 * v_MWidthC_1 * v_w_id_125476) + (v_MWidthC_1 * v_i_125478))]); \n          if (v__125502_0) {\n          } else {\n            break;\n          }\n          float v_tmp_125575 = 0.0f; \n          v__125494 = v_tmp_125575; \n          int v_index_125576 = v__125483[(v_l_id_125477 + (128 * v_MWidthC_1 * v_w_id_125476) + (v_MWidthC_1 * v_i_125478))]; \n          if (v_index_125576 < 0) {\n            v__125496_0 = v__125494; \n          } else {\n            if (v_index_125576 >= v_VLength_3) {\n              v__125496_0 = v__125494; \n            } else {\n              v__125496_0 = v__125485[v_index_125576]; \n            }\n          }\n          v__125498_0 = mult(v__125496_0, v__125484[(v_l_id_125477 + (128 * v_MWidthC_1 * v_w_id_125476) + (v_MWidthC_1 * v_i_125478))]); \n          v__125492 = add(v__125498_0, v__125492); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125479 = 0; \n          v__125503[v_l_id_125477] = id(v__125492); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_125480 = get_local_id(0); \n        float v_tmp_125579 = 0.0f; \n        v__105970 = v_tmp_125579; \n        /* reduce_seq */\n        for (int v_i_125481 = 0; v_i_125481 < v_MWidthC_1; v_i_125481 = (1 + v_i_125481)) {\n          v__105970 = add(v__105970, v__125503[(v_i_125481 + (v_MWidthC_1 * v_l_id_125480))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_125482 = 0; \n          v__125508[v_w_id_125476] = doubleMultiplyAdd(v__105970, v__125487, v__125486[v_w_id_125476], v__125488); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_125476 = atomic_inc(v_work_idx_10019); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__125483",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125484",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__125485",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__125486",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__125487",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__125488",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__125490",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__125508",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__125503",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}