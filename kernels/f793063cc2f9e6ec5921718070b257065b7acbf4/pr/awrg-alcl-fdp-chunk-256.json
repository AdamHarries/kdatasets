{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130263, const global float* restrict v__130264, const global float* restrict v__130265, const global float* restrict v__130266, float v__130267, float v__130268, global float* v__130282, global int* v__130270, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130272; \n  float v__130274; \n  /* Private Memory */\n  float v__130276_0;\n  \n  float v__130278_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10449 = v__130270; \n    local int v_w_id_130259; \n    if (get_local_id(0) == 0) {\n      v_w_id_130259 = atomic_inc(v_work_idx_10449); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130259 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10447; \n        v_work_idx_10447 = 0; \n        int v_l_id_130260 = atomic_inc(&(v_work_idx_10447)); \n        while((v_l_id_130260 < 256)){\n          float v_tmp_130319 = 0.0f; \n          v__130272 = v_tmp_130319; \n          /* reduce_seq */\n          for (int v_i_130261 = 0; v_i_130261 < v_MWidthC_1; v_i_130261 = (1 + v_i_130261)) {\n            float v_tmp_130320 = 0.0f; \n            v__130274 = v_tmp_130320; \n            int v_index_130321 = v__130263[(v_i_130261 + (256 * v_MWidthC_1 * v_w_id_130259) + (v_MWidthC_1 * v_l_id_130260))]; \n            if (v_index_130321 < 0) {\n              v__130276_0 = v__130274; \n            } else {\n              if (v_index_130321 >= v_VLength_3) {\n                v__130276_0 = v__130274; \n              } else {\n                v__130276_0 = v__130265[v_index_130321]; \n              }\n            }\n            v__130278_0 = mult(v__130276_0, v__130264[(v_i_130261 + (256 * v_MWidthC_1 * v_w_id_130259) + (v_MWidthC_1 * v_l_id_130260))]); \n            v__130272 = add(v__130278_0, v__130272); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130262 = 0; \n            v__130282[(v_l_id_130260 + (256 * v_w_id_130259))] = doubleMultiplyAdd(v__130272, v__130267, v__130266[(v_l_id_130260 + (256 * v_w_id_130259))], v__130268); \n          }\n          /* end map_seq */\n          v_l_id_130260 = atomic_inc(&(v_work_idx_10447)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130259 = atomic_inc(v_work_idx_10449); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__130263",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130264",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130265",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130266",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130267",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130268",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130270",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130282",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}