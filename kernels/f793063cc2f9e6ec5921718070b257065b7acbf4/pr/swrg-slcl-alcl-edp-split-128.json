{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__123649, const global float* restrict v__123650, const global float* restrict v__123651, const global float* restrict v__123652, float v__123653, float v__123654, global float* v__123673, local float* v__123668, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123657; \n  float v__123659; \n  float v__105970; \n  /* Private Memory */\n  float v__123661_0;\n  \n  float v__123663_0;\n  \n  int v__123667_0;\n  \n  for (int v_wg_id_123642 = get_group_id(0); v_wg_id_123642 < v_MHeight_2; v_wg_id_123642 = (v_wg_id_123642 + get_num_groups(0))) {\n    for (int v_l_id_123643 = get_local_id(0); v_l_id_123643 < v_MWidthC_1; v_l_id_123643 = (v_l_id_123643 + get_local_size(0))) {\n      float v_tmp_123737 = 0.0f; \n      v__123657 = v_tmp_123737; \n      /* reduce_while_seq */\n      for (int v_i_123644 = 0; v_i_123644 < 128; v_i_123644 = (1 + v_i_123644)) {\n        v__123667_0 = check(v__123657, v__123649[(v_l_id_123643 + (128 * v_MWidthC_1 * v_wg_id_123642) + (v_MWidthC_1 * v_i_123644))]); \n        if (v__123667_0) {\n        } else {\n          break;\n        }\n        float v_tmp_123738 = 0.0f; \n        v__123659 = v_tmp_123738; \n        int v_index_123739 = v__123649[(v_l_id_123643 + (128 * v_MWidthC_1 * v_wg_id_123642) + (v_MWidthC_1 * v_i_123644))]; \n        if (v_index_123739 < 0) {\n          v__123661_0 = v__123659; \n        } else {\n          if (v_index_123739 >= v_VLength_3) {\n            v__123661_0 = v__123659; \n          } else {\n            v__123661_0 = v__123651[v_index_123739]; \n          }\n        }\n        v__123663_0 = mult(v__123661_0, v__123650[(v_l_id_123643 + (128 * v_MWidthC_1 * v_wg_id_123642) + (v_MWidthC_1 * v_i_123644))]); \n        v__123657 = add(v__123663_0, v__123657); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_123645 = 0; \n        v__123668[v_l_id_123643] = id(v__123657); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9853; \n      v_work_idx_9853 = 0; \n      int v_l_id_123646 = atomic_inc(&(v_work_idx_9853)); \n      while((v_l_id_123646 < 1)){\n        float v_tmp_123742 = 0.0f; \n        v__105970 = v_tmp_123742; \n        /* reduce_seq */\n        for (int v_i_123647 = 0; v_i_123647 < v_MWidthC_1; v_i_123647 = (1 + v_i_123647)) {\n          v__105970 = add(v__105970, v__123668[(v_i_123647 + (v_MWidthC_1 * v_l_id_123646))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_123648 = 0; \n          v__123673[v_wg_id_123642] = doubleMultiplyAdd(v__105970, v__123653, v__123652[v_wg_id_123642], v__123654); \n        }\n        /* end map_seq */\n        v_l_id_123646 = atomic_inc(&(v_work_idx_9853)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__123649",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123650",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123651",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__123652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123653",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123654",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__123673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__123668",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}