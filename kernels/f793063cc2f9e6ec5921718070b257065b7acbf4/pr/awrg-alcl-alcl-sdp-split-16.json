{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113776, const global float* restrict v__113777, const global float* restrict v__113778, const global float* restrict v__113779, float v__113780, float v__113781, global float* v__113799, global float* v__113789, global int* v__113783, local float* v__113794, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113785; \n  float v__113790; \n  float v__105970; \n  /* Private Memory */\n  float v__113787_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8984 = v__113783; \n    local int v_w_id_113768; \n    if (get_local_id(0) == 0) {\n      v_w_id_113768 = atomic_inc(v_work_idx_8984); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113768 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8982; \n        v_work_idx_8982 = 0; \n        int v_l_id_113769 = atomic_inc(&(v_work_idx_8982)); \n        while((v_l_id_113769 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_113770 = 0; v_i_113770 < 16; v_i_113770 = (1 + v_i_113770)) {\n            float v_tmp_113850 = 0.0f; \n            v__113785 = v_tmp_113850; \n            int v_index_113851 = v__113776[(v_l_id_113769 + (16 * v_MWidthC_1 * v_w_id_113768) + (v_MWidthC_1 * v_i_113770))]; \n            if (v_index_113851 < 0) {\n              v__113787_0 = v__113785; \n            } else {\n              if (v_index_113851 >= v_VLength_3) {\n                v__113787_0 = v__113785; \n              } else {\n                v__113787_0 = v__113778[v_index_113851]; \n              }\n            }\n            v__113789[(15 + (16 * v_MWidthC_1 * v_w_id_113768) + (-1 * v_i_113770) + (16 * v_l_id_113769))] = mult(v__113787_0, v__113777[(v_l_id_113769 + (16 * v_MWidthC_1 * v_w_id_113768) + (v_MWidthC_1 * v_i_113770))]); \n          }\n          /* end map_seq */\n          float v_tmp_113852 = 0.0f; \n          v__113790 = v_tmp_113852; \n          /* reduce_seq */\n          for (int v_i_113771 = 0; v_i_113771 < 16; v_i_113771 = (1 + v_i_113771)) {\n            v__113790 = add(v__113790, v__113789[(v_i_113771 + (16 * v_MWidthC_1 * v_w_id_113768) + (16 * v_l_id_113769))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113772 = 0; \n            v__113794[v_l_id_113769] = id(v__113790); \n          }\n          /* end map_seq */\n          v_l_id_113769 = atomic_inc(&(v_work_idx_8982)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8976; \n        v_work_idx_8976 = 0; \n        int v_l_id_113773 = atomic_inc(&(v_work_idx_8976)); \n        while((v_l_id_113773 < 1)){\n          float v_tmp_113855 = 0.0f; \n          v__105970 = v_tmp_113855; \n          /* reduce_seq */\n          for (int v_i_113774 = 0; v_i_113774 < v_MWidthC_1; v_i_113774 = (1 + v_i_113774)) {\n            v__105970 = add(v__105970, v__113794[(v_i_113774 + (v_MWidthC_1 * v_l_id_113773))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113775 = 0; \n            v__113799[v_w_id_113768] = doubleMultiplyAdd(v__105970, v__113780, v__113779[v_w_id_113768], v__113781); \n          }\n          /* end map_seq */\n          v_l_id_113773 = atomic_inc(&(v_work_idx_8976)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113768 = atomic_inc(v_work_idx_8984); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__113776",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113777",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113778",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113780",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113781",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113789",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113783",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__113794",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}