{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108426, const global float* restrict v__108427, const global float* restrict v__108428, const global float* restrict v__108429, float v__108430, float v__108431, global float* v__108449, global float* v__108439, global int* v__108433, local float* v__108444, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108435; \n  float v__108440; \n  float v__105970; \n  /* Private Memory */\n  float v__108437_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8494 = v__108433; \n    local int v_w_id_108418; \n    if (get_local_id(0) == 0) {\n      v_w_id_108418 = atomic_inc(v_work_idx_8494); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108418 < v_MHeight_2)){\n      for (int v_l_id_108419 = get_local_id(0); v_l_id_108419 < v_MWidthC_1; v_l_id_108419 = (v_l_id_108419 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_108420 = 0; v_i_108420 < 8; v_i_108420 = (1 + v_i_108420)) {\n          float v_tmp_108508 = 0.0f; \n          v__108435 = v_tmp_108508; \n          int v_index_108509 = v__108426[(v_l_id_108419 + (8 * v_MWidthC_1 * v_w_id_108418) + (v_MWidthC_1 * v_i_108420))]; \n          if (v_index_108509 < 0) {\n            v__108437_0 = v__108435; \n          } else {\n            if (v_index_108509 >= v_VLength_3) {\n              v__108437_0 = v__108435; \n            } else {\n              v__108437_0 = v__108428[v_index_108509]; \n            }\n          }\n          v__108439[(7 + (8 * v_MWidthC_1 * v_w_id_108418) + (-1 * v_i_108420) + (8 * v_l_id_108419))] = mult(v__108437_0, v__108427[(v_l_id_108419 + (8 * v_MWidthC_1 * v_w_id_108418) + (v_MWidthC_1 * v_i_108420))]); \n        }\n        /* end map_seq */\n        float v_tmp_108510 = 0.0f; \n        v__108440 = v_tmp_108510; \n        /* reduce_seq */\n        for (int v_i_108421 = 0; v_i_108421 < 8; v_i_108421 = (1 + v_i_108421)) {\n          v__108440 = add(v__108440, v__108439[(v_i_108421 + (8 * v_MWidthC_1 * v_w_id_108418) + (8 * v_l_id_108419))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108422 = 0; \n          v__108444[v_l_id_108419] = id(v__108440); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8487; \n        v_work_idx_8487 = 0; \n        int v_l_id_108423 = atomic_inc(&(v_work_idx_8487)); \n        while((v_l_id_108423 < 1)){\n          float v_tmp_108513 = 0.0f; \n          v__105970 = v_tmp_108513; \n          /* reduce_seq */\n          for (int v_i_108424 = 0; v_i_108424 < v_MWidthC_1; v_i_108424 = (1 + v_i_108424)) {\n            v__105970 = add(v__105970, v__108444[(v_i_108424 + (v_MWidthC_1 * v_l_id_108423))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_108425 = 0; \n            v__108449[v_w_id_108418] = doubleMultiplyAdd(v__105970, v__108430, v__108429[v_w_id_108418], v__108431); \n          }\n          /* end map_seq */\n          v_l_id_108423 = atomic_inc(&(v_work_idx_8487)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108418 = atomic_inc(v_work_idx_8494); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__108426",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108427",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108428",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108430",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108431",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108439",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108433",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108449",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__108444",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}