{
  "name" : "swrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107139, const global float* restrict v__107140, const global float* restrict v__107141, const global float* restrict v__107142, float v__107143, float v__107144, global float* v__107161, local float* v__107156, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107147; \n  float v__107149; \n  float v__105970; \n  /* Private Memory */\n  float v__107151_0;\n  \n  float v__107153_0;\n  \n  for (int v_wg_id_107132 = get_group_id(0); v_wg_id_107132 < v_MHeight_2; v_wg_id_107132 = (v_wg_id_107132 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8377; \n      v_work_idx_8377 = 0; \n      int v_l_id_107133 = atomic_inc(&(v_work_idx_8377)); \n      while((v_l_id_107133 < v_MWidthC_1)){\n        float v_tmp_107218 = 0.0f; \n        v__107147 = v_tmp_107218; \n        /* reduce_seq */\n        for (int v_i_107134 = 0; v_i_107134 < 8; v_i_107134 = (1 + v_i_107134)) {\n          float v_tmp_107219 = 0.0f; \n          v__107149 = v_tmp_107219; \n          int v_index_107220 = v__107139[(v_l_id_107133 + (8 * v_MWidthC_1 * v_wg_id_107132) + (v_MWidthC_1 * v_i_107134))]; \n          if (v_index_107220 < 0) {\n            v__107151_0 = v__107149; \n          } else {\n            if (v_index_107220 >= v_VLength_3) {\n              v__107151_0 = v__107149; \n            } else {\n              v__107151_0 = v__107141[v_index_107220]; \n            }\n          }\n          v__107153_0 = mult(v__107151_0, v__107140[(v_l_id_107133 + (8 * v_MWidthC_1 * v_wg_id_107132) + (v_MWidthC_1 * v_i_107134))]); \n          v__107147 = add(v__107153_0, v__107147); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107135 = 0; \n          v__107156[v_l_id_107133] = id(v__107147); \n        }\n        /* end map_seq */\n        v_l_id_107133 = atomic_inc(&(v_work_idx_8377)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_107136 = get_local_id(0); \n      float v_tmp_107223 = 0.0f; \n      v__105970 = v_tmp_107223; \n      /* reduce_seq */\n      for (int v_i_107137 = 0; v_i_107137 < v_MWidthC_1; v_i_107137 = (1 + v_i_107137)) {\n        v__105970 = add(v__105970, v__107156[(v_i_107137 + (v_MWidthC_1 * v_l_id_107136))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_107138 = 0; \n        v__107161[v_wg_id_107132] = doubleMultiplyAdd(v__105970, v__107143, v__107142[v_wg_id_107132], v__107144); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__107139",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107140",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107141",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107142",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107143",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107144",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__107161",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107156",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}