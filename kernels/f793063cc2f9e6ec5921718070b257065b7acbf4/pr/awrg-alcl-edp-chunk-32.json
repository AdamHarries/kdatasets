{
  "name" : "awrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__117456, const global float* restrict v__117457, const global float* restrict v__117458, const global float* restrict v__117459, float v__117460, float v__117461, global float* v__117477, global int* v__117463, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117464; \n  float v__117467; \n  /* Private Memory */\n  float v__117469_0;\n  \n  float v__117471_0;\n  \n  int v__117475_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9304 = v__117463; \n    local int v_w_id_117452; \n    if (get_local_id(0) == 0) {\n      v_w_id_117452 = atomic_inc(v_work_idx_9304); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117452 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9302; \n        v_work_idx_9302 = 0; \n        int v_l_id_117453 = atomic_inc(&(v_work_idx_9302)); \n        while((v_l_id_117453 < 32)){\n          float v_tmp_117520 = 0.0f; \n          v__117464 = v_tmp_117520; \n          /* reduce_while_seq */\n          for (int v_i_117454 = 0; v_i_117454 < v_MWidthC_1; v_i_117454 = (1 + v_i_117454)) {\n            v__117475_0 = check(v__117464, v__117456[(v_i_117454 + (32 * v_MWidthC_1 * v_w_id_117452) + (v_MWidthC_1 * v_l_id_117453))]); \n            if (v__117475_0) {\n            } else {\n              break;\n            }\n            float v_tmp_117521 = 0.0f; \n            v__117467 = v_tmp_117521; \n            int v_index_117522 = v__117456[(v_i_117454 + (32 * v_MWidthC_1 * v_w_id_117452) + (v_MWidthC_1 * v_l_id_117453))]; \n            if (v_index_117522 < 0) {\n              v__117469_0 = v__117467; \n            } else {\n              if (v_index_117522 >= v_VLength_3) {\n                v__117469_0 = v__117467; \n              } else {\n                v__117469_0 = v__117458[v_index_117522]; \n              }\n            }\n            v__117471_0 = mult(v__117469_0, v__117457[(v_i_117454 + (32 * v_MWidthC_1 * v_w_id_117452) + (v_MWidthC_1 * v_l_id_117453))]); \n            v__117464 = add(v__117471_0, v__117464); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117455 = 0; \n            v__117477[(v_l_id_117453 + (32 * v_w_id_117452))] = doubleMultiplyAdd(v__117464, v__117460, v__117459[(v_l_id_117453 + (32 * v_w_id_117452))], v__117461); \n          }\n          /* end map_seq */\n          v_l_id_117453 = atomic_inc(&(v_work_idx_9302)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117452 = atomic_inc(v_work_idx_9304); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__117456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117457",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__117458",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__117459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117460",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117461",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117463",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117477",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}