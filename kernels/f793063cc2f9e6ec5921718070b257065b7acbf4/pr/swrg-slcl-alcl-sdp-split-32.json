{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__114861, const global float* restrict v__114862, const global float* restrict v__114863, const global float* restrict v__114864, float v__114865, float v__114866, global float* v__114883, global float* v__114873, local float* v__114878, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__114869; \n  float v__114874; \n  float v__105970; \n  /* Private Memory */\n  float v__114871_0;\n  \n  for (int v_wg_id_114853 = get_group_id(0); v_wg_id_114853 < v_MHeight_2; v_wg_id_114853 = (v_wg_id_114853 + get_num_groups(0))) {\n    for (int v_l_id_114854 = get_local_id(0); v_l_id_114854 < v_MWidthC_1; v_l_id_114854 = (v_l_id_114854 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_114855 = 0; v_i_114855 < 32; v_i_114855 = (1 + v_i_114855)) {\n        float v_tmp_114944 = 0.0f; \n        v__114869 = v_tmp_114944; \n        int v_index_114945 = v__114861[(v_l_id_114854 + (32 * v_MWidthC_1 * v_wg_id_114853) + (v_MWidthC_1 * v_i_114855))]; \n        if (v_index_114945 < 0) {\n          v__114871_0 = v__114869; \n        } else {\n          if (v_index_114945 >= v_VLength_3) {\n            v__114871_0 = v__114869; \n          } else {\n            v__114871_0 = v__114863[v_index_114945]; \n          }\n        }\n        v__114873[(31 + (32 * v_MWidthC_1 * v_wg_id_114853) + (-1 * v_i_114855) + (32 * v_l_id_114854))] = mult(v__114871_0, v__114862[(v_l_id_114854 + (32 * v_MWidthC_1 * v_wg_id_114853) + (v_MWidthC_1 * v_i_114855))]); \n      }\n      /* end map_seq */\n      float v_tmp_114946 = 0.0f; \n      v__114874 = v_tmp_114946; \n      /* reduce_seq */\n      for (int v_i_114856 = 0; v_i_114856 < 32; v_i_114856 = (1 + v_i_114856)) {\n        v__114874 = add(v__114874, v__114873[(v_i_114856 + (32 * v_MWidthC_1 * v_wg_id_114853) + (32 * v_l_id_114854))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114857 = 0; \n        v__114878[v_l_id_114854] = id(v__114874); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9066; \n      v_work_idx_9066 = 0; \n      int v_l_id_114858 = atomic_inc(&(v_work_idx_9066)); \n      while((v_l_id_114858 < 1)){\n        float v_tmp_114949 = 0.0f; \n        v__105970 = v_tmp_114949; \n        /* reduce_seq */\n        for (int v_i_114859 = 0; v_i_114859 < v_MWidthC_1; v_i_114859 = (1 + v_i_114859)) {\n          v__105970 = add(v__105970, v__114878[(v_i_114859 + (v_MWidthC_1 * v_l_id_114858))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_114860 = 0; \n          v__114883[v_wg_id_114853] = doubleMultiplyAdd(v__105970, v__114865, v__114864[v_wg_id_114853], v__114866); \n        }\n        /* end map_seq */\n        v_l_id_114858 = atomic_inc(&(v_work_idx_9066)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__114861",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114862",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114863",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__114864",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__114865",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__114866",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__114873",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__114883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__114878",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}