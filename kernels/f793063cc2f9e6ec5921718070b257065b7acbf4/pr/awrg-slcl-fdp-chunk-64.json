{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120577, const global float* restrict v__120578, const global float* restrict v__120579, const global float* restrict v__120580, float v__120581, float v__120582, global float* v__120596, global int* v__120584, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120586; \n  float v__120588; \n  /* Private Memory */\n  float v__120590_0;\n  \n  float v__120592_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9583 = v__120584; \n    local int v_w_id_120573; \n    if (get_local_id(0) == 0) {\n      v_w_id_120573 = atomic_inc(v_work_idx_9583); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_120573 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_120574 = get_local_id(0); v_l_id_120574 < 64; v_l_id_120574 = (v_l_id_120574 + get_local_size(0))) {\n        float v_tmp_120637 = 0.0f; \n        v__120586 = v_tmp_120637; \n        /* reduce_seq */\n        for (int v_i_120575 = 0; v_i_120575 < v_MWidthC_1; v_i_120575 = (1 + v_i_120575)) {\n          float v_tmp_120638 = 0.0f; \n          v__120588 = v_tmp_120638; \n          int v_index_120639 = v__120577[(v_i_120575 + (64 * v_MWidthC_1 * v_w_id_120573) + (v_MWidthC_1 * v_l_id_120574))]; \n          if (v_index_120639 < 0) {\n            v__120590_0 = v__120588; \n          } else {\n            if (v_index_120639 >= v_VLength_3) {\n              v__120590_0 = v__120588; \n            } else {\n              v__120590_0 = v__120579[v_index_120639]; \n            }\n          }\n          v__120592_0 = mult(v__120590_0, v__120578[(v_i_120575 + (64 * v_MWidthC_1 * v_w_id_120573) + (v_MWidthC_1 * v_l_id_120574))]); \n          v__120586 = add(v__120592_0, v__120586); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120576 = 0; \n          v__120596[(v_l_id_120574 + (64 * v_w_id_120573))] = doubleMultiplyAdd(v__120586, v__120581, v__120580[(v_l_id_120574 + (64 * v_w_id_120573))], v__120582); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_120573 = atomic_inc(v_work_idx_9583); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__120577",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120578",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120579",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120581",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120582",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__120584",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__120596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}