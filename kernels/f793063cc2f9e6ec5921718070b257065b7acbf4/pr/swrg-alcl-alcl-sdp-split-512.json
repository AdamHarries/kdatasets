{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133093, const global float* restrict v__133094, const global float* restrict v__133095, const global float* restrict v__133096, float v__133097, float v__133098, global float* v__133115, global float* v__133105, local float* v__133110, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133101; \n  float v__133106; \n  float v__105970; \n  /* Private Memory */\n  float v__133103_0;\n  \n  for (int v_wg_id_133085 = get_group_id(0); v_wg_id_133085 < v_MHeight_2; v_wg_id_133085 = (v_wg_id_133085 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10701; \n      v_work_idx_10701 = 0; \n      int v_l_id_133086 = atomic_inc(&(v_work_idx_10701)); \n      while((v_l_id_133086 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_133087 = 0; v_i_133087 < 512; v_i_133087 = (1 + v_i_133087)) {\n          float v_tmp_133168 = 0.0f; \n          v__133101 = v_tmp_133168; \n          int v_index_133169 = v__133093[(v_l_id_133086 + (512 * v_MWidthC_1 * v_wg_id_133085) + (v_MWidthC_1 * v_i_133087))]; \n          if (v_index_133169 < 0) {\n            v__133103_0 = v__133101; \n          } else {\n            if (v_index_133169 >= v_VLength_3) {\n              v__133103_0 = v__133101; \n            } else {\n              v__133103_0 = v__133095[v_index_133169]; \n            }\n          }\n          v__133105[(511 + (512 * v_MWidthC_1 * v_wg_id_133085) + (-1 * v_i_133087) + (512 * v_l_id_133086))] = mult(v__133103_0, v__133094[(v_l_id_133086 + (512 * v_MWidthC_1 * v_wg_id_133085) + (v_MWidthC_1 * v_i_133087))]); \n        }\n        /* end map_seq */\n        float v_tmp_133170 = 0.0f; \n        v__133106 = v_tmp_133170; \n        /* reduce_seq */\n        for (int v_i_133088 = 0; v_i_133088 < 512; v_i_133088 = (1 + v_i_133088)) {\n          v__133106 = add(v__133106, v__133105[(v_i_133088 + (512 * v_MWidthC_1 * v_wg_id_133085) + (512 * v_l_id_133086))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133089 = 0; \n          v__133110[v_l_id_133086] = id(v__133106); \n        }\n        /* end map_seq */\n        v_l_id_133086 = atomic_inc(&(v_work_idx_10701)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10695; \n      v_work_idx_10695 = 0; \n      int v_l_id_133090 = atomic_inc(&(v_work_idx_10695)); \n      while((v_l_id_133090 < 1)){\n        float v_tmp_133173 = 0.0f; \n        v__105970 = v_tmp_133173; \n        /* reduce_seq */\n        for (int v_i_133091 = 0; v_i_133091 < v_MWidthC_1; v_i_133091 = (1 + v_i_133091)) {\n          v__105970 = add(v__105970, v__133110[(v_i_133091 + (v_MWidthC_1 * v_l_id_133090))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133092 = 0; \n          v__133115[v_wg_id_133085] = doubleMultiplyAdd(v__105970, v__133097, v__133096[v_wg_id_133085], v__133098); \n        }\n        /* end map_seq */\n        v_l_id_133090 = atomic_inc(&(v_work_idx_10695)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__133093",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133094",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133095",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133096",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133097",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133098",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133105",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__133115",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133110",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}