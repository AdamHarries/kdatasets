{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__111633, const global float* restrict v__111634, const global float* restrict v__111635, const global float* restrict v__111636, float v__111637, float v__111638, global float* v__111655, global float* v__111645, local float* v__111650, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__111641; \n  float v__111646; \n  float v__105970; \n  /* Private Memory */\n  float v__111643_0;\n  \n  for (int v_wg_id_111625 = get_group_id(0); v_wg_id_111625 < v_MHeight_2; v_wg_id_111625 = (v_wg_id_111625 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8781; \n      v_work_idx_8781 = 0; \n      int v_l_id_111626 = atomic_inc(&(v_work_idx_8781)); \n      while((v_l_id_111626 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_111627 = 0; v_i_111627 < 16; v_i_111627 = (1 + v_i_111627)) {\n          float v_tmp_111708 = 0.0f; \n          v__111641 = v_tmp_111708; \n          int v_index_111709 = v__111633[(v_l_id_111626 + (16 * v_MWidthC_1 * v_wg_id_111625) + (v_MWidthC_1 * v_i_111627))]; \n          if (v_index_111709 < 0) {\n            v__111643_0 = v__111641; \n          } else {\n            if (v_index_111709 >= v_VLength_3) {\n              v__111643_0 = v__111641; \n            } else {\n              v__111643_0 = v__111635[v_index_111709]; \n            }\n          }\n          v__111645[(15 + (16 * v_MWidthC_1 * v_wg_id_111625) + (-1 * v_i_111627) + (16 * v_l_id_111626))] = mult(v__111643_0, v__111634[(v_l_id_111626 + (16 * v_MWidthC_1 * v_wg_id_111625) + (v_MWidthC_1 * v_i_111627))]); \n        }\n        /* end map_seq */\n        float v_tmp_111710 = 0.0f; \n        v__111646 = v_tmp_111710; \n        /* reduce_seq */\n        for (int v_i_111628 = 0; v_i_111628 < 16; v_i_111628 = (1 + v_i_111628)) {\n          v__111646 = add(v__111646, v__111645[(v_i_111628 + (16 * v_MWidthC_1 * v_wg_id_111625) + (16 * v_l_id_111626))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111629 = 0; \n          v__111650[v_l_id_111626] = id(v__111646); \n        }\n        /* end map_seq */\n        v_l_id_111626 = atomic_inc(&(v_work_idx_8781)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8775; \n      v_work_idx_8775 = 0; \n      int v_l_id_111630 = atomic_inc(&(v_work_idx_8775)); \n      while((v_l_id_111630 < 1)){\n        float v_tmp_111713 = 0.0f; \n        v__105970 = v_tmp_111713; \n        /* reduce_seq */\n        for (int v_i_111631 = 0; v_i_111631 < v_MWidthC_1; v_i_111631 = (1 + v_i_111631)) {\n          v__105970 = add(v__105970, v__111650[(v_i_111631 + (v_MWidthC_1 * v_l_id_111630))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111632 = 0; \n          v__111655[v_wg_id_111625] = doubleMultiplyAdd(v__105970, v__111637, v__111636[v_wg_id_111625], v__111638); \n        }\n        /* end map_seq */\n        v_l_id_111630 = atomic_inc(&(v_work_idx_8775)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__111633",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111634",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111635",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__111636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__111637",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__111638",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__111645",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__111655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__111650",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}