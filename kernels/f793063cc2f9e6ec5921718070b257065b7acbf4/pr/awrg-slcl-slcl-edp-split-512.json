{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134067, const global float* restrict v__134068, const global float* restrict v__134069, const global float* restrict v__134070, float v__134071, float v__134072, global float* v__134092, global int* v__134074, local float* v__134087, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134076; \n  float v__134078; \n  float v__105970; \n  /* Private Memory */\n  float v__134080_0;\n  \n  float v__134082_0;\n  \n  int v__134086_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10787 = v__134074; \n    local int v_w_id_134060; \n    if (get_local_id(0) == 0) {\n      v_w_id_134060 = atomic_inc(v_work_idx_10787); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134060 < v_MHeight_2)){\n      for (int v_l_id_134061 = get_local_id(0); v_l_id_134061 < v_MWidthC_1; v_l_id_134061 = (v_l_id_134061 + get_local_size(0))) {\n        float v_tmp_134158 = 0.0f; \n        v__134076 = v_tmp_134158; \n        /* reduce_while_seq */\n        for (int v_i_134062 = 0; v_i_134062 < 512; v_i_134062 = (1 + v_i_134062)) {\n          v__134086_0 = check(v__134076, v__134067[(v_l_id_134061 + (512 * v_MWidthC_1 * v_w_id_134060) + (v_MWidthC_1 * v_i_134062))]); \n          if (v__134086_0) {\n          } else {\n            break;\n          }\n          float v_tmp_134159 = 0.0f; \n          v__134078 = v_tmp_134159; \n          int v_index_134160 = v__134067[(v_l_id_134061 + (512 * v_MWidthC_1 * v_w_id_134060) + (v_MWidthC_1 * v_i_134062))]; \n          if (v_index_134160 < 0) {\n            v__134080_0 = v__134078; \n          } else {\n            if (v_index_134160 >= v_VLength_3) {\n              v__134080_0 = v__134078; \n            } else {\n              v__134080_0 = v__134069[v_index_134160]; \n            }\n          }\n          v__134082_0 = mult(v__134080_0, v__134068[(v_l_id_134061 + (512 * v_MWidthC_1 * v_w_id_134060) + (v_MWidthC_1 * v_i_134062))]); \n          v__134076 = add(v__134082_0, v__134076); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134063 = 0; \n          v__134087[v_l_id_134061] = id(v__134076); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_134064 = get_local_id(0); \n        float v_tmp_134163 = 0.0f; \n        v__105970 = v_tmp_134163; \n        /* reduce_seq */\n        for (int v_i_134065 = 0; v_i_134065 < v_MWidthC_1; v_i_134065 = (1 + v_i_134065)) {\n          v__105970 = add(v__105970, v__134087[(v_i_134065 + (v_MWidthC_1 * v_l_id_134064))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134066 = 0; \n          v__134092[v_w_id_134060] = doubleMultiplyAdd(v__105970, v__134071, v__134070[v_w_id_134060], v__134072); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134060 = atomic_inc(v_work_idx_10787); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__134067",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134068",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134069",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134070",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134071",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134072",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134074",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134092",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__134087",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}