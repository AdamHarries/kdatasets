{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107626, const global float* restrict v__107627, const global float* restrict v__107628, const global float* restrict v__107629, float v__107630, float v__107631, global float* v__107645, global float* v__107639, global int* v__107633, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107635; \n  float v__107640; \n  /* Private Memory */\n  float v__107637_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8425 = v__107633; \n    local int v_w_id_107621; \n    if (get_local_id(0) == 0) {\n      v_w_id_107621 = atomic_inc(v_work_idx_8425); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_107621 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_107622 = get_local_id(0); v_l_id_107622 < 8; v_l_id_107622 = (v_l_id_107622 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_107623 = 0; v_i_107623 < v_MWidthC_1; v_i_107623 = (1 + v_i_107623)) {\n          float v_tmp_107688 = 0.0f; \n          v__107635 = v_tmp_107688; \n          int v_index_107689 = v__107626[(v_i_107623 + (8 * v_MWidthC_1 * v_w_id_107621) + (v_MWidthC_1 * v_l_id_107622))]; \n          if (v_index_107689 < 0) {\n            v__107637_0 = v__107635; \n          } else {\n            if (v_index_107689 >= v_VLength_3) {\n              v__107637_0 = v__107635; \n            } else {\n              v__107637_0 = v__107628[v_index_107689]; \n            }\n          }\n          v__107639[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_107621) + (-1 * v_i_107623) + (v_MWidthC_1 * v_l_id_107622))] = mult(v__107637_0, v__107627[(v_i_107623 + (8 * v_MWidthC_1 * v_w_id_107621) + (v_MWidthC_1 * v_l_id_107622))]); \n        }\n        /* end map_seq */\n        float v_tmp_107690 = 0.0f; \n        v__107640 = v_tmp_107690; \n        /* reduce_seq */\n        for (int v_i_107624 = 0; v_i_107624 < v_MWidthC_1; v_i_107624 = (1 + v_i_107624)) {\n          v__107640 = add(v__107640, v__107639[(v_i_107624 + (8 * v_MWidthC_1 * v_w_id_107621) + (v_MWidthC_1 * v_l_id_107622))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107625 = 0; \n          v__107645[(v_l_id_107622 + (8 * v_w_id_107621))] = doubleMultiplyAdd(v__107640, v__107630, v__107629[(v_l_id_107622 + (8 * v_w_id_107621))], v__107631); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_107621 = atomic_inc(v_work_idx_8425); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__107626",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107628",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107629",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107630",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107631",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107639",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107633",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__107645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}