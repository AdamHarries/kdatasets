{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107529, const global float* restrict v__107530, const global float* restrict v__107531, const global float* restrict v__107532, float v__107533, float v__107534, global float* v__107553, local float* v__107548, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107537; \n  float v__107539; \n  float v__105970; \n  /* Private Memory */\n  float v__107541_0;\n  \n  float v__107543_0;\n  \n  int v__107547_0;\n  \n  for (int v_wg_id_107522 = get_group_id(0); v_wg_id_107522 < v_MHeight_2; v_wg_id_107522 = (v_wg_id_107522 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8417; \n      v_work_idx_8417 = 0; \n      int v_l_id_107523 = atomic_inc(&(v_work_idx_8417)); \n      while((v_l_id_107523 < v_MWidthC_1)){\n        float v_tmp_107609 = 0.0f; \n        v__107537 = v_tmp_107609; \n        /* reduce_while_seq */\n        for (int v_i_107524 = 0; v_i_107524 < 8; v_i_107524 = (1 + v_i_107524)) {\n          v__107547_0 = check(v__107537, v__107529[(v_l_id_107523 + (8 * v_MWidthC_1 * v_wg_id_107522) + (v_MWidthC_1 * v_i_107524))]); \n          if (v__107547_0) {\n          } else {\n            break;\n          }\n          float v_tmp_107610 = 0.0f; \n          v__107539 = v_tmp_107610; \n          int v_index_107611 = v__107529[(v_l_id_107523 + (8 * v_MWidthC_1 * v_wg_id_107522) + (v_MWidthC_1 * v_i_107524))]; \n          if (v_index_107611 < 0) {\n            v__107541_0 = v__107539; \n          } else {\n            if (v_index_107611 >= v_VLength_3) {\n              v__107541_0 = v__107539; \n            } else {\n              v__107541_0 = v__107531[v_index_107611]; \n            }\n          }\n          v__107543_0 = mult(v__107541_0, v__107530[(v_l_id_107523 + (8 * v_MWidthC_1 * v_wg_id_107522) + (v_MWidthC_1 * v_i_107524))]); \n          v__107537 = add(v__107543_0, v__107537); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107525 = 0; \n          v__107548[v_l_id_107523] = id(v__107537); \n        }\n        /* end map_seq */\n        v_l_id_107523 = atomic_inc(&(v_work_idx_8417)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8412; \n      v_work_idx_8412 = 0; \n      int v_l_id_107526 = atomic_inc(&(v_work_idx_8412)); \n      while((v_l_id_107526 < 1)){\n        float v_tmp_107614 = 0.0f; \n        v__105970 = v_tmp_107614; \n        /* reduce_seq */\n        for (int v_i_107527 = 0; v_i_107527 < v_MWidthC_1; v_i_107527 = (1 + v_i_107527)) {\n          v__105970 = add(v__105970, v__107548[(v_i_107527 + (v_MWidthC_1 * v_l_id_107526))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107528 = 0; \n          v__107553[v_wg_id_107522] = doubleMultiplyAdd(v__105970, v__107533, v__107532[v_wg_id_107522], v__107534); \n        }\n        /* end map_seq */\n        v_l_id_107526 = atomic_inc(&(v_work_idx_8412)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__107529",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107530",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107531",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107533",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107534",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__107553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107548",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}