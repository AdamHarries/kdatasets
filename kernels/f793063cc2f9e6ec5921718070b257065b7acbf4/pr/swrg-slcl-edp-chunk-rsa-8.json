{
  "name" : "swrg-slcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__105867, const global float* restrict v__105868, const global float* restrict v__105869, const global float* restrict v__105870, float v__105871, float v__105872, global float* v__105886, global float* v__105885, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105874; \n  float v__105877; \n  /* Private Memory */\n  float v__105879_0;\n  \n  float v__105881_0;\n  \n  for (int v_wg_id_105862 = get_group_id(0); v_wg_id_105862 < ((v_MHeight_2)/(8)); v_wg_id_105862 = (v_wg_id_105862 + get_num_groups(0))) {\n    for (int v_l_id_105863 = get_local_id(0); v_l_id_105863 < 8; v_l_id_105863 = (v_l_id_105863 + get_local_size(0))) {\n      float v_tmp_105923 = 0.0f; \n      v__105874 = v_tmp_105923; \n      /* reduce_seq */\n      int v_stop_105924 = min(v__105867[(1 + (v__105867[(v_l_id_105863 + (8 * v_wg_id_105862))] / 4))], ((global int*)(v__105868 + (((global int*)(v__105868))[(v_l_id_105863 + (8 * v_wg_id_105862))] / 4)))[1]); \n      for (int v_i_105864 = 0; v_i_105864 < v_stop_105924; v_i_105864 = (1 + v_i_105864)) {\n        float v_tmp_105932 = 0.0f; \n        v__105877 = v_tmp_105932; \n        int v_index_105934 = v__105867[(2 + v_i_105864 + (v__105867[(v_l_id_105863 + (8 * v_wg_id_105862))] / 4))]; \n        if (v_index_105934 < 0) {\n          v__105879_0 = v__105877; \n        } else {\n          if (v_index_105934 >= v_MWidthC_1) {\n            v__105879_0 = v__105877; \n          } else {\n            v__105879_0 = v__105869[v_index_105934]; \n          }\n        }\n        v__105881_0 = mult(v__105868[(2 + v_i_105864 + (((global int*)(v__105868))[(v_l_id_105863 + (8 * v_wg_id_105862))] / 4))], v__105879_0); \n        v__105874 = add(v__105874, v__105881_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105865 = 0; \n        v__105885[(v_l_id_105863 + (8 * v_wg_id_105862))] = doubleMultiplyAdd(v__105874, v__105871, v__105870[(v_l_id_105863 + (8 * v_wg_id_105862))], v__105872); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105866 = 0; \n        v__105886[(v_l_id_105863 + (8 * v_wg_id_105862))] = id(v__105885[(v_l_id_105863 + (8 * v_wg_id_105862))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__105867",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__105868",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__105869",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__105870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105871",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105872",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105885",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__105886",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}