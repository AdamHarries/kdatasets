{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__122546, const global float* restrict v__122547, const global float* restrict v__122548, const global float* restrict v__122549, float v__122550, float v__122551, global float* v__122571, global int* v__122553, local float* v__122566, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__122555; \n  float v__122557; \n  float v__105970; \n  /* Private Memory */\n  float v__122559_0;\n  \n  float v__122561_0;\n  \n  int v__122565_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9774 = v__122553; \n    local int v_w_id_122539; \n    if (get_local_id(0) == 0) {\n      v_w_id_122539 = atomic_inc(v_work_idx_9774); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_122539 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9772; \n        v_work_idx_9772 = 0; \n        int v_l_id_122540 = atomic_inc(&(v_work_idx_9772)); \n        while((v_l_id_122540 < v_MWidthC_1)){\n          float v_tmp_122625 = 0.0f; \n          v__122555 = v_tmp_122625; \n          /* reduce_while_seq */\n          for (int v_i_122541 = 0; v_i_122541 < 64; v_i_122541 = (1 + v_i_122541)) {\n            v__122565_0 = check(v__122555, v__122546[(v_l_id_122540 + (64 * v_MWidthC_1 * v_w_id_122539) + (v_MWidthC_1 * v_i_122541))]); \n            if (v__122565_0) {\n            } else {\n              break;\n            }\n            float v_tmp_122626 = 0.0f; \n            v__122557 = v_tmp_122626; \n            int v_index_122627 = v__122546[(v_l_id_122540 + (64 * v_MWidthC_1 * v_w_id_122539) + (v_MWidthC_1 * v_i_122541))]; \n            if (v_index_122627 < 0) {\n              v__122559_0 = v__122557; \n            } else {\n              if (v_index_122627 >= v_VLength_3) {\n                v__122559_0 = v__122557; \n              } else {\n                v__122559_0 = v__122548[v_index_122627]; \n              }\n            }\n            v__122561_0 = mult(v__122559_0, v__122547[(v_l_id_122540 + (64 * v_MWidthC_1 * v_w_id_122539) + (v_MWidthC_1 * v_i_122541))]); \n            v__122555 = add(v__122561_0, v__122555); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122542 = 0; \n            v__122566[v_l_id_122540] = id(v__122555); \n          }\n          /* end map_seq */\n          v_l_id_122540 = atomic_inc(&(v_work_idx_9772)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9767; \n        v_work_idx_9767 = 0; \n        int v_l_id_122543 = atomic_inc(&(v_work_idx_9767)); \n        while((v_l_id_122543 < 1)){\n          float v_tmp_122630 = 0.0f; \n          v__105970 = v_tmp_122630; \n          /* reduce_seq */\n          for (int v_i_122544 = 0; v_i_122544 < v_MWidthC_1; v_i_122544 = (1 + v_i_122544)) {\n            v__105970 = add(v__105970, v__122566[(v_i_122544 + (v_MWidthC_1 * v_l_id_122543))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_122545 = 0; \n            v__122571[v_w_id_122539] = doubleMultiplyAdd(v__105970, v__122550, v__122549[v_w_id_122539], v__122551); \n          }\n          /* end map_seq */\n          v_l_id_122543 = atomic_inc(&(v_work_idx_9767)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_122539 = atomic_inc(v_work_idx_9774); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__122546",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122547",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__122548",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__122549",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__122550",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__122551",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__122553",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__122571",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__122566",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}