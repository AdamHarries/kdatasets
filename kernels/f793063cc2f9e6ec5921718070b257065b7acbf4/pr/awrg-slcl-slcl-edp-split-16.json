{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__112607, const global float* restrict v__112608, const global float* restrict v__112609, const global float* restrict v__112610, float v__112611, float v__112612, global float* v__112632, global int* v__112614, local float* v__112627, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__112616; \n  float v__112618; \n  float v__105970; \n  /* Private Memory */\n  float v__112620_0;\n  \n  float v__112622_0;\n  \n  int v__112626_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8867 = v__112614; \n    local int v_w_id_112600; \n    if (get_local_id(0) == 0) {\n      v_w_id_112600 = atomic_inc(v_work_idx_8867); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_112600 < v_MHeight_2)){\n      for (int v_l_id_112601 = get_local_id(0); v_l_id_112601 < v_MWidthC_1; v_l_id_112601 = (v_l_id_112601 + get_local_size(0))) {\n        float v_tmp_112698 = 0.0f; \n        v__112616 = v_tmp_112698; \n        /* reduce_while_seq */\n        for (int v_i_112602 = 0; v_i_112602 < 16; v_i_112602 = (1 + v_i_112602)) {\n          v__112626_0 = check(v__112616, v__112607[(v_l_id_112601 + (16 * v_MWidthC_1 * v_w_id_112600) + (v_MWidthC_1 * v_i_112602))]); \n          if (v__112626_0) {\n          } else {\n            break;\n          }\n          float v_tmp_112699 = 0.0f; \n          v__112618 = v_tmp_112699; \n          int v_index_112700 = v__112607[(v_l_id_112601 + (16 * v_MWidthC_1 * v_w_id_112600) + (v_MWidthC_1 * v_i_112602))]; \n          if (v_index_112700 < 0) {\n            v__112620_0 = v__112618; \n          } else {\n            if (v_index_112700 >= v_VLength_3) {\n              v__112620_0 = v__112618; \n            } else {\n              v__112620_0 = v__112609[v_index_112700]; \n            }\n          }\n          v__112622_0 = mult(v__112620_0, v__112608[(v_l_id_112601 + (16 * v_MWidthC_1 * v_w_id_112600) + (v_MWidthC_1 * v_i_112602))]); \n          v__112616 = add(v__112622_0, v__112616); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112603 = 0; \n          v__112627[v_l_id_112601] = id(v__112616); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_112604 = get_local_id(0); \n        float v_tmp_112703 = 0.0f; \n        v__105970 = v_tmp_112703; \n        /* reduce_seq */\n        for (int v_i_112605 = 0; v_i_112605 < v_MWidthC_1; v_i_112605 = (1 + v_i_112605)) {\n          v__105970 = add(v__105970, v__112627[(v_i_112605 + (v_MWidthC_1 * v_l_id_112604))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_112606 = 0; \n          v__112632[v_w_id_112600] = doubleMultiplyAdd(v__105970, v__112611, v__112610[v_w_id_112600], v__112612); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_112600 = atomic_inc(v_work_idx_8867); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__112607",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112608",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__112609",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__112610",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__112611",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__112612",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__112614",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__112632",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__112627",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}