{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113024, const global float* restrict v__113025, const global float* restrict v__113026, const global float* restrict v__113027, float v__113028, float v__113029, global float* v__113043, global float* v__113037, global int* v__113031, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113033; \n  float v__113038; \n  /* Private Memory */\n  float v__113035_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8906 = v__113031; \n    local int v_w_id_113019; \n    if (get_local_id(0) == 0) {\n      v_w_id_113019 = atomic_inc(v_work_idx_8906); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113019 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8904; \n        v_work_idx_8904 = 0; \n        int v_l_id_113020 = atomic_inc(&(v_work_idx_8904)); \n        while((v_l_id_113020 < 16)){\n          /* map_seq */\n          for (int v_i_113021 = 0; v_i_113021 < v_MWidthC_1; v_i_113021 = (1 + v_i_113021)) {\n            float v_tmp_113082 = 0.0f; \n            v__113033 = v_tmp_113082; \n            int v_index_113083 = v__113024[(v_i_113021 + (16 * v_MWidthC_1 * v_w_id_113019) + (v_MWidthC_1 * v_l_id_113020))]; \n            if (v_index_113083 < 0) {\n              v__113035_0 = v__113033; \n            } else {\n              if (v_index_113083 >= v_VLength_3) {\n                v__113035_0 = v__113033; \n              } else {\n                v__113035_0 = v__113026[v_index_113083]; \n              }\n            }\n            v__113037[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_113019) + (-1 * v_i_113021) + (v_MWidthC_1 * v_l_id_113020))] = mult(v__113035_0, v__113025[(v_i_113021 + (16 * v_MWidthC_1 * v_w_id_113019) + (v_MWidthC_1 * v_l_id_113020))]); \n          }\n          /* end map_seq */\n          float v_tmp_113084 = 0.0f; \n          v__113038 = v_tmp_113084; \n          /* reduce_seq */\n          for (int v_i_113022 = 0; v_i_113022 < v_MWidthC_1; v_i_113022 = (1 + v_i_113022)) {\n            v__113038 = add(v__113038, v__113037[(v_i_113022 + (16 * v_MWidthC_1 * v_w_id_113019) + (v_MWidthC_1 * v_l_id_113020))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113023 = 0; \n            v__113043[(v_l_id_113020 + (16 * v_w_id_113019))] = doubleMultiplyAdd(v__113038, v__113028, v__113027[(v_l_id_113020 + (16 * v_w_id_113019))], v__113029); \n          }\n          /* end map_seq */\n          v_l_id_113020 = atomic_inc(&(v_work_idx_8904)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113019 = atomic_inc(v_work_idx_8906); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__113024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113025",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113026",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113028",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113029",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113031",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}