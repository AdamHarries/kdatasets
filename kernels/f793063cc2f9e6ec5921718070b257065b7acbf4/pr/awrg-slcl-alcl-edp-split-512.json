{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134380, const global float* restrict v__134381, const global float* restrict v__134382, const global float* restrict v__134383, float v__134384, float v__134385, global float* v__134405, global int* v__134387, local float* v__134400, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134389; \n  float v__134391; \n  float v__105970; \n  /* Private Memory */\n  float v__134393_0;\n  \n  float v__134395_0;\n  \n  int v__134399_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10818 = v__134387; \n    local int v_w_id_134373; \n    if (get_local_id(0) == 0) {\n      v_w_id_134373 = atomic_inc(v_work_idx_10818); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134373 < v_MHeight_2)){\n      for (int v_l_id_134374 = get_local_id(0); v_l_id_134374 < v_MWidthC_1; v_l_id_134374 = (v_l_id_134374 + get_local_size(0))) {\n        float v_tmp_134467 = 0.0f; \n        v__134389 = v_tmp_134467; \n        /* reduce_while_seq */\n        for (int v_i_134375 = 0; v_i_134375 < 512; v_i_134375 = (1 + v_i_134375)) {\n          v__134399_0 = check(v__134389, v__134380[(v_l_id_134374 + (512 * v_MWidthC_1 * v_w_id_134373) + (v_MWidthC_1 * v_i_134375))]); \n          if (v__134399_0) {\n          } else {\n            break;\n          }\n          float v_tmp_134468 = 0.0f; \n          v__134391 = v_tmp_134468; \n          int v_index_134469 = v__134380[(v_l_id_134374 + (512 * v_MWidthC_1 * v_w_id_134373) + (v_MWidthC_1 * v_i_134375))]; \n          if (v_index_134469 < 0) {\n            v__134393_0 = v__134391; \n          } else {\n            if (v_index_134469 >= v_VLength_3) {\n              v__134393_0 = v__134391; \n            } else {\n              v__134393_0 = v__134382[v_index_134469]; \n            }\n          }\n          v__134395_0 = mult(v__134393_0, v__134381[(v_l_id_134374 + (512 * v_MWidthC_1 * v_w_id_134373) + (v_MWidthC_1 * v_i_134375))]); \n          v__134389 = add(v__134395_0, v__134389); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134376 = 0; \n          v__134400[v_l_id_134374] = id(v__134389); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10812; \n        v_work_idx_10812 = 0; \n        int v_l_id_134377 = atomic_inc(&(v_work_idx_10812)); \n        while((v_l_id_134377 < 1)){\n          float v_tmp_134472 = 0.0f; \n          v__105970 = v_tmp_134472; \n          /* reduce_seq */\n          for (int v_i_134378 = 0; v_i_134378 < v_MWidthC_1; v_i_134378 = (1 + v_i_134378)) {\n            v__105970 = add(v__105970, v__134400[(v_i_134378 + (v_MWidthC_1 * v_l_id_134377))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134379 = 0; \n            v__134405[v_w_id_134373] = doubleMultiplyAdd(v__105970, v__134384, v__134383[v_w_id_134373], v__134385); \n          }\n          /* end map_seq */\n          v_l_id_134377 = atomic_inc(&(v_work_idx_10812)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134373 = atomic_inc(v_work_idx_10818); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__134380",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134381",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134382",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134383",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134384",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134385",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134387",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__134400",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}