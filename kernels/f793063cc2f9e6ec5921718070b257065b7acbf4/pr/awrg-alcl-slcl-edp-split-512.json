{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__135133, const global float* restrict v__135134, const global float* restrict v__135135, const global float* restrict v__135136, float v__135137, float v__135138, global float* v__135158, global int* v__135140, local float* v__135153, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__135142; \n  float v__135144; \n  float v__105970; \n  /* Private Memory */\n  float v__135146_0;\n  \n  float v__135148_0;\n  \n  int v__135152_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10892 = v__135140; \n    local int v_w_id_135126; \n    if (get_local_id(0) == 0) {\n      v_w_id_135126 = atomic_inc(v_work_idx_10892); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_135126 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10890; \n        v_work_idx_10890 = 0; \n        int v_l_id_135127 = atomic_inc(&(v_work_idx_10890)); \n        while((v_l_id_135127 < v_MWidthC_1)){\n          float v_tmp_135216 = 0.0f; \n          v__135142 = v_tmp_135216; \n          /* reduce_while_seq */\n          for (int v_i_135128 = 0; v_i_135128 < 512; v_i_135128 = (1 + v_i_135128)) {\n            v__135152_0 = check(v__135142, v__135133[(v_l_id_135127 + (512 * v_MWidthC_1 * v_w_id_135126) + (v_MWidthC_1 * v_i_135128))]); \n            if (v__135152_0) {\n            } else {\n              break;\n            }\n            float v_tmp_135217 = 0.0f; \n            v__135144 = v_tmp_135217; \n            int v_index_135218 = v__135133[(v_l_id_135127 + (512 * v_MWidthC_1 * v_w_id_135126) + (v_MWidthC_1 * v_i_135128))]; \n            if (v_index_135218 < 0) {\n              v__135146_0 = v__135144; \n            } else {\n              if (v_index_135218 >= v_VLength_3) {\n                v__135146_0 = v__135144; \n              } else {\n                v__135146_0 = v__135135[v_index_135218]; \n              }\n            }\n            v__135148_0 = mult(v__135146_0, v__135134[(v_l_id_135127 + (512 * v_MWidthC_1 * v_w_id_135126) + (v_MWidthC_1 * v_i_135128))]); \n            v__135142 = add(v__135148_0, v__135142); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_135129 = 0; \n            v__135153[v_l_id_135127] = id(v__135142); \n          }\n          /* end map_seq */\n          v_l_id_135127 = atomic_inc(&(v_work_idx_10890)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_135130 = get_local_id(0); \n        float v_tmp_135221 = 0.0f; \n        v__105970 = v_tmp_135221; \n        /* reduce_seq */\n        for (int v_i_135131 = 0; v_i_135131 < v_MWidthC_1; v_i_135131 = (1 + v_i_135131)) {\n          v__105970 = add(v__105970, v__135153[(v_i_135131 + (v_MWidthC_1 * v_l_id_135130))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_135132 = 0; \n          v__135158[v_w_id_135126] = doubleMultiplyAdd(v__105970, v__135137, v__135136[v_w_id_135126], v__135138); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_135126 = atomic_inc(v_work_idx_10892); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__135133",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135134",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__135135",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__135136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__135137",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__135138",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__135140",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__135158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__135153",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}