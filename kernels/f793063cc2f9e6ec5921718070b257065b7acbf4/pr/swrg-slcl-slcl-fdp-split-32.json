{
  "name" : "swrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__114643, const global float* restrict v__114644, const global float* restrict v__114645, const global float* restrict v__114646, float v__114647, float v__114648, global float* v__114665, local float* v__114660, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__114651; \n  float v__114653; \n  float v__105970; \n  /* Private Memory */\n  float v__114655_0;\n  \n  float v__114657_0;\n  \n  for (int v_wg_id_114636 = get_group_id(0); v_wg_id_114636 < v_MHeight_2; v_wg_id_114636 = (v_wg_id_114636 + get_num_groups(0))) {\n    for (int v_l_id_114637 = get_local_id(0); v_l_id_114637 < v_MWidthC_1; v_l_id_114637 = (v_l_id_114637 + get_local_size(0))) {\n      float v_tmp_114730 = 0.0f; \n      v__114651 = v_tmp_114730; \n      /* reduce_seq */\n      for (int v_i_114638 = 0; v_i_114638 < 32; v_i_114638 = (1 + v_i_114638)) {\n        float v_tmp_114731 = 0.0f; \n        v__114653 = v_tmp_114731; \n        int v_index_114732 = v__114643[(v_l_id_114637 + (32 * v_MWidthC_1 * v_wg_id_114636) + (v_MWidthC_1 * v_i_114638))]; \n        if (v_index_114732 < 0) {\n          v__114655_0 = v__114653; \n        } else {\n          if (v_index_114732 >= v_VLength_3) {\n            v__114655_0 = v__114653; \n          } else {\n            v__114655_0 = v__114645[v_index_114732]; \n          }\n        }\n        v__114657_0 = mult(v__114655_0, v__114644[(v_l_id_114637 + (32 * v_MWidthC_1 * v_wg_id_114636) + (v_MWidthC_1 * v_i_114638))]); \n        v__114651 = add(v__114657_0, v__114651); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114639 = 0; \n        v__114660[v_l_id_114637] = id(v__114651); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_114640 = get_local_id(0); \n      float v_tmp_114735 = 0.0f; \n      v__105970 = v_tmp_114735; \n      /* reduce_seq */\n      for (int v_i_114641 = 0; v_i_114641 < v_MWidthC_1; v_i_114641 = (1 + v_i_114641)) {\n        v__105970 = add(v__105970, v__114660[(v_i_114641 + (v_MWidthC_1 * v_l_id_114640))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114642 = 0; \n        v__114665[v_wg_id_114636] = doubleMultiplyAdd(v__105970, v__114647, v__114646[v_wg_id_114636], v__114648); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__114643",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114644",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114645",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__114646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__114647",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__114648",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__114665",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__114660",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}