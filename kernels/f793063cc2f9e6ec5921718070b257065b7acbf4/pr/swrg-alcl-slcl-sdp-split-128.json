{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__124209, const global float* restrict v__124210, const global float* restrict v__124211, const global float* restrict v__124212, float v__124213, float v__124214, global float* v__124231, global float* v__124221, local float* v__124226, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__124217; \n  float v__124222; \n  float v__105970; \n  /* Private Memory */\n  float v__124219_0;\n  \n  for (int v_wg_id_124201 = get_group_id(0); v_wg_id_124201 < v_MHeight_2; v_wg_id_124201 = (v_wg_id_124201 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9904; \n      v_work_idx_9904 = 0; \n      int v_l_id_124202 = atomic_inc(&(v_work_idx_9904)); \n      while((v_l_id_124202 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_124203 = 0; v_i_124203 < 128; v_i_124203 = (1 + v_i_124203)) {\n          float v_tmp_124288 = 0.0f; \n          v__124217 = v_tmp_124288; \n          int v_index_124289 = v__124209[(v_l_id_124202 + (128 * v_MWidthC_1 * v_wg_id_124201) + (v_MWidthC_1 * v_i_124203))]; \n          if (v_index_124289 < 0) {\n            v__124219_0 = v__124217; \n          } else {\n            if (v_index_124289 >= v_VLength_3) {\n              v__124219_0 = v__124217; \n            } else {\n              v__124219_0 = v__124211[v_index_124289]; \n            }\n          }\n          v__124221[(127 + (128 * v_MWidthC_1 * v_wg_id_124201) + (-1 * v_i_124203) + (128 * v_l_id_124202))] = mult(v__124219_0, v__124210[(v_l_id_124202 + (128 * v_MWidthC_1 * v_wg_id_124201) + (v_MWidthC_1 * v_i_124203))]); \n        }\n        /* end map_seq */\n        float v_tmp_124290 = 0.0f; \n        v__124222 = v_tmp_124290; \n        /* reduce_seq */\n        for (int v_i_124204 = 0; v_i_124204 < 128; v_i_124204 = (1 + v_i_124204)) {\n          v__124222 = add(v__124222, v__124221[(v_i_124204 + (128 * v_MWidthC_1 * v_wg_id_124201) + (128 * v_l_id_124202))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_124205 = 0; \n          v__124226[v_l_id_124202] = id(v__124222); \n        }\n        /* end map_seq */\n        v_l_id_124202 = atomic_inc(&(v_work_idx_9904)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_124206 = get_local_id(0); \n      float v_tmp_124293 = 0.0f; \n      v__105970 = v_tmp_124293; \n      /* reduce_seq */\n      for (int v_i_124207 = 0; v_i_124207 < v_MWidthC_1; v_i_124207 = (1 + v_i_124207)) {\n        v__105970 = add(v__105970, v__124226[(v_i_124207 + (v_MWidthC_1 * v_l_id_124206))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_124208 = 0; \n        v__124231[v_wg_id_124201] = doubleMultiplyAdd(v__105970, v__124213, v__124212[v_wg_id_124201], v__124214); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__124209",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124210",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__124211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__124212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__124213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__124214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__124221",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__124231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__124226",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}