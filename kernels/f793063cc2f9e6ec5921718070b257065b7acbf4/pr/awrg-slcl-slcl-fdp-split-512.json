{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133962, const global float* restrict v__133963, const global float* restrict v__133964, const global float* restrict v__133965, float v__133966, float v__133967, global float* v__133985, global int* v__133969, local float* v__133980, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133971; \n  float v__133973; \n  float v__105970; \n  /* Private Memory */\n  float v__133975_0;\n  \n  float v__133977_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10778 = v__133969; \n    local int v_w_id_133955; \n    if (get_local_id(0) == 0) {\n      v_w_id_133955 = atomic_inc(v_work_idx_10778); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_133955 < v_MHeight_2)){\n      for (int v_l_id_133956 = get_local_id(0); v_l_id_133956 < v_MWidthC_1; v_l_id_133956 = (v_l_id_133956 + get_local_size(0))) {\n        float v_tmp_134048 = 0.0f; \n        v__133971 = v_tmp_134048; \n        /* reduce_seq */\n        for (int v_i_133957 = 0; v_i_133957 < 512; v_i_133957 = (1 + v_i_133957)) {\n          float v_tmp_134049 = 0.0f; \n          v__133973 = v_tmp_134049; \n          int v_index_134050 = v__133962[(v_l_id_133956 + (512 * v_MWidthC_1 * v_w_id_133955) + (v_MWidthC_1 * v_i_133957))]; \n          if (v_index_134050 < 0) {\n            v__133975_0 = v__133973; \n          } else {\n            if (v_index_134050 >= v_VLength_3) {\n              v__133975_0 = v__133973; \n            } else {\n              v__133975_0 = v__133964[v_index_134050]; \n            }\n          }\n          v__133977_0 = mult(v__133975_0, v__133963[(v_l_id_133956 + (512 * v_MWidthC_1 * v_w_id_133955) + (v_MWidthC_1 * v_i_133957))]); \n          v__133971 = add(v__133977_0, v__133971); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133958 = 0; \n          v__133980[v_l_id_133956] = id(v__133971); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_133959 = get_local_id(0); \n        float v_tmp_134053 = 0.0f; \n        v__105970 = v_tmp_134053; \n        /* reduce_seq */\n        for (int v_i_133960 = 0; v_i_133960 < v_MWidthC_1; v_i_133960 = (1 + v_i_133960)) {\n          v__105970 = add(v__105970, v__133980[(v_i_133960 + (v_MWidthC_1 * v_l_id_133959))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133961 = 0; \n          v__133985[v_w_id_133955] = doubleMultiplyAdd(v__105970, v__133966, v__133965[v_w_id_133955], v__133967); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_133955 = atomic_inc(v_work_idx_10778); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__133962",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133963",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133964",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133966",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133967",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133969",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__133985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133980",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}