{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128989, const global float* restrict v__128990, const global float* restrict v__128991, const global float* restrict v__128992, float v__128993, float v__128994, global float* v__129013, local float* v__129008, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128997; \n  float v__128999; \n  float v__105970; \n  /* Private Memory */\n  float v__129001_0;\n  \n  float v__129003_0;\n  \n  int v__129007_0;\n  \n  for (int v_wg_id_128982 = get_group_id(0); v_wg_id_128982 < v_MHeight_2; v_wg_id_128982 = (v_wg_id_128982 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10337; \n      v_work_idx_10337 = 0; \n      int v_l_id_128983 = atomic_inc(&(v_work_idx_10337)); \n      while((v_l_id_128983 < v_MWidthC_1)){\n        float v_tmp_129069 = 0.0f; \n        v__128997 = v_tmp_129069; \n        /* reduce_while_seq */\n        for (int v_i_128984 = 0; v_i_128984 < 256; v_i_128984 = (1 + v_i_128984)) {\n          v__129007_0 = check(v__128997, v__128989[(v_l_id_128983 + (256 * v_MWidthC_1 * v_wg_id_128982) + (v_MWidthC_1 * v_i_128984))]); \n          if (v__129007_0) {\n          } else {\n            break;\n          }\n          float v_tmp_129070 = 0.0f; \n          v__128999 = v_tmp_129070; \n          int v_index_129071 = v__128989[(v_l_id_128983 + (256 * v_MWidthC_1 * v_wg_id_128982) + (v_MWidthC_1 * v_i_128984))]; \n          if (v_index_129071 < 0) {\n            v__129001_0 = v__128999; \n          } else {\n            if (v_index_129071 >= v_VLength_3) {\n              v__129001_0 = v__128999; \n            } else {\n              v__129001_0 = v__128991[v_index_129071]; \n            }\n          }\n          v__129003_0 = mult(v__129001_0, v__128990[(v_l_id_128983 + (256 * v_MWidthC_1 * v_wg_id_128982) + (v_MWidthC_1 * v_i_128984))]); \n          v__128997 = add(v__129003_0, v__128997); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128985 = 0; \n          v__129008[v_l_id_128983] = id(v__128997); \n        }\n        /* end map_seq */\n        v_l_id_128983 = atomic_inc(&(v_work_idx_10337)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_10332; \n      v_work_idx_10332 = 0; \n      int v_l_id_128986 = atomic_inc(&(v_work_idx_10332)); \n      while((v_l_id_128986 < 1)){\n        float v_tmp_129074 = 0.0f; \n        v__105970 = v_tmp_129074; \n        /* reduce_seq */\n        for (int v_i_128987 = 0; v_i_128987 < v_MWidthC_1; v_i_128987 = (1 + v_i_128987)) {\n          v__105970 = add(v__105970, v__129008[(v_i_128987 + (v_MWidthC_1 * v_l_id_128986))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128988 = 0; \n          v__129013[v_wg_id_128982] = doubleMultiplyAdd(v__105970, v__128993, v__128992[v_wg_id_128982], v__128994); \n        }\n        /* end map_seq */\n        v_l_id_128986 = atomic_inc(&(v_work_idx_10332)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__128989",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128990",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128991",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128993",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128994",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__129013",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__129008",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}