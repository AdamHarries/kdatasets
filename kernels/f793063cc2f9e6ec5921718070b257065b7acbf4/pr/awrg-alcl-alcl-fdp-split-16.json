{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__113869, const global float* restrict v__113870, const global float* restrict v__113871, const global float* restrict v__113872, float v__113873, float v__113874, global float* v__113892, global int* v__113876, local float* v__113887, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__113878; \n  float v__113880; \n  float v__105970; \n  /* Private Memory */\n  float v__113882_0;\n  \n  float v__113884_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8995 = v__113876; \n    local int v_w_id_113862; \n    if (get_local_id(0) == 0) {\n      v_w_id_113862 = atomic_inc(v_work_idx_8995); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_113862 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8993; \n        v_work_idx_8993 = 0; \n        int v_l_id_113863 = atomic_inc(&(v_work_idx_8993)); \n        while((v_l_id_113863 < v_MWidthC_1)){\n          float v_tmp_113943 = 0.0f; \n          v__113878 = v_tmp_113943; \n          /* reduce_seq */\n          for (int v_i_113864 = 0; v_i_113864 < 16; v_i_113864 = (1 + v_i_113864)) {\n            float v_tmp_113944 = 0.0f; \n            v__113880 = v_tmp_113944; \n            int v_index_113945 = v__113869[(v_l_id_113863 + (16 * v_MWidthC_1 * v_w_id_113862) + (v_MWidthC_1 * v_i_113864))]; \n            if (v_index_113945 < 0) {\n              v__113882_0 = v__113880; \n            } else {\n              if (v_index_113945 >= v_VLength_3) {\n                v__113882_0 = v__113880; \n              } else {\n                v__113882_0 = v__113871[v_index_113945]; \n              }\n            }\n            v__113884_0 = mult(v__113882_0, v__113870[(v_l_id_113863 + (16 * v_MWidthC_1 * v_w_id_113862) + (v_MWidthC_1 * v_i_113864))]); \n            v__113878 = add(v__113884_0, v__113878); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113865 = 0; \n            v__113887[v_l_id_113863] = id(v__113878); \n          }\n          /* end map_seq */\n          v_l_id_113863 = atomic_inc(&(v_work_idx_8993)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8988; \n        v_work_idx_8988 = 0; \n        int v_l_id_113866 = atomic_inc(&(v_work_idx_8988)); \n        while((v_l_id_113866 < 1)){\n          float v_tmp_113948 = 0.0f; \n          v__105970 = v_tmp_113948; \n          /* reduce_seq */\n          for (int v_i_113867 = 0; v_i_113867 < v_MWidthC_1; v_i_113867 = (1 + v_i_113867)) {\n            v__105970 = add(v__105970, v__113887[(v_i_113867 + (v_MWidthC_1 * v_l_id_113866))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_113868 = 0; \n            v__113892[v_w_id_113862] = doubleMultiplyAdd(v__105970, v__113873, v__113872[v_w_id_113862], v__113874); \n          }\n          /* end map_seq */\n          v_l_id_113866 = atomic_inc(&(v_work_idx_8988)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_113862 = atomic_inc(v_work_idx_8995); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__113869",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113870",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__113871",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__113872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__113873",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__113874",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__113876",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__113892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__113887",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}