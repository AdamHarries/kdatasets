{
  "name" : "awrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__133453, const global float* restrict v__133454, const global float* restrict v__133455, const global float* restrict v__133456, float v__133457, float v__133458, global float* v__133472, global int* v__133460, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133462; \n  float v__133464; \n  /* Private Memory */\n  float v__133466_0;\n  \n  float v__133468_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10735 = v__133460; \n    local int v_w_id_133449; \n    if (get_local_id(0) == 0) {\n      v_w_id_133449 = atomic_inc(v_work_idx_10735); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_133449 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_133450 = get_local_id(0); v_l_id_133450 < 512; v_l_id_133450 = (v_l_id_133450 + get_local_size(0))) {\n        float v_tmp_133513 = 0.0f; \n        v__133462 = v_tmp_133513; \n        /* reduce_seq */\n        for (int v_i_133451 = 0; v_i_133451 < v_MWidthC_1; v_i_133451 = (1 + v_i_133451)) {\n          float v_tmp_133514 = 0.0f; \n          v__133464 = v_tmp_133514; \n          int v_index_133515 = v__133453[(v_i_133451 + (512 * v_MWidthC_1 * v_w_id_133449) + (v_MWidthC_1 * v_l_id_133450))]; \n          if (v_index_133515 < 0) {\n            v__133466_0 = v__133464; \n          } else {\n            if (v_index_133515 >= v_VLength_3) {\n              v__133466_0 = v__133464; \n            } else {\n              v__133466_0 = v__133455[v_index_133515]; \n            }\n          }\n          v__133468_0 = mult(v__133466_0, v__133454[(v_i_133451 + (512 * v_MWidthC_1 * v_w_id_133449) + (v_MWidthC_1 * v_l_id_133450))]); \n          v__133462 = add(v__133468_0, v__133462); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133452 = 0; \n          v__133472[(v_l_id_133450 + (512 * v_w_id_133449))] = doubleMultiplyAdd(v__133462, v__133457, v__133456[(v_l_id_133450 + (512 * v_w_id_133449))], v__133458); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_133449 = atomic_inc(v_work_idx_10735); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__133453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133454",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__133455",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__133456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133457",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133458",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133460",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__133472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}