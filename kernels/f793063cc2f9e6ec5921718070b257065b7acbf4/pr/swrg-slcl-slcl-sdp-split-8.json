{
  "name" : "swrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105952, const global float* restrict v__105953, const global float* restrict v__105954, const global float* restrict v__105955, float v__105956, float v__105957, global float* v__105975, global float* v__105964, local float* v__105969, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105960; \n  float v__105965; \n  float v__105970; \n  /* Private Memory */\n  float v__105962_0;\n  \n  for (int v_wg_id_105944 = get_group_id(0); v_wg_id_105944 < v_MHeight_2; v_wg_id_105944 = (v_wg_id_105944 + get_num_groups(0))) {\n    for (int v_l_id_105945 = get_local_id(0); v_l_id_105945 < v_MWidthC_1; v_l_id_105945 = (v_l_id_105945 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_105946 = 0; v_i_105946 < 8; v_i_105946 = (1 + v_i_105946)) {\n        float v_tmp_106040 = 0.0f; \n        v__105960 = v_tmp_106040; \n        int v_index_106041 = v__105952[(v_l_id_105945 + (8 * v_MWidthC_1 * v_wg_id_105944) + (v_MWidthC_1 * v_i_105946))]; \n        if (v_index_106041 < 0) {\n          v__105962_0 = v__105960; \n        } else {\n          if (v_index_106041 >= v_VLength_3) {\n            v__105962_0 = v__105960; \n          } else {\n            v__105962_0 = v__105954[v_index_106041]; \n          }\n        }\n        v__105964[(7 + (8 * v_MWidthC_1 * v_wg_id_105944) + (-1 * v_i_105946) + (8 * v_l_id_105945))] = mult(v__105962_0, v__105953[(v_l_id_105945 + (8 * v_MWidthC_1 * v_wg_id_105944) + (v_MWidthC_1 * v_i_105946))]); \n      }\n      /* end map_seq */\n      float v_tmp_106042 = 0.0f; \n      v__105965 = v_tmp_106042; \n      /* reduce_seq */\n      for (int v_i_105947 = 0; v_i_105947 < 8; v_i_105947 = (1 + v_i_105947)) {\n        v__105965 = add(v__105965, v__105964[(v_i_105947 + (8 * v_MWidthC_1 * v_wg_id_105944) + (8 * v_l_id_105945))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105948 = 0; \n        v__105969[v_l_id_105945] = id(v__105965); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_105949 = get_local_id(0); \n      float v_tmp_106045 = 0.0f; \n      v__105970 = v_tmp_106045; \n      /* reduce_seq */\n      for (int v_i_105950 = 0; v_i_105950 < v_MWidthC_1; v_i_105950 = (1 + v_i_105950)) {\n        v__105970 = add(v__105970, v__105969[(v_i_105950 + (v_MWidthC_1 * v_l_id_105949))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_105951 = 0; \n        v__105975[v_wg_id_105944] = doubleMultiplyAdd(v__105970, v__105956, v__105955[v_wg_id_105944], v__105957); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__105952",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105953",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105954",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105955",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105956",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105957",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105964",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__105975",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__105969",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}