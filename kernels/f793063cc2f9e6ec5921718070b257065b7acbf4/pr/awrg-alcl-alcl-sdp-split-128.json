{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__126652, const global float* restrict v__126653, const global float* restrict v__126654, const global float* restrict v__126655, float v__126656, float v__126657, global float* v__126675, global float* v__126665, global int* v__126659, local float* v__126670, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126661; \n  float v__126666; \n  float v__105970; \n  /* Private Memory */\n  float v__126663_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10136 = v__126659; \n    local int v_w_id_126644; \n    if (get_local_id(0) == 0) {\n      v_w_id_126644 = atomic_inc(v_work_idx_10136); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126644 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10134; \n        v_work_idx_10134 = 0; \n        int v_l_id_126645 = atomic_inc(&(v_work_idx_10134)); \n        while((v_l_id_126645 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_126646 = 0; v_i_126646 < 128; v_i_126646 = (1 + v_i_126646)) {\n            float v_tmp_126726 = 0.0f; \n            v__126661 = v_tmp_126726; \n            int v_index_126727 = v__126652[(v_l_id_126645 + (128 * v_MWidthC_1 * v_w_id_126644) + (v_MWidthC_1 * v_i_126646))]; \n            if (v_index_126727 < 0) {\n              v__126663_0 = v__126661; \n            } else {\n              if (v_index_126727 >= v_VLength_3) {\n                v__126663_0 = v__126661; \n              } else {\n                v__126663_0 = v__126654[v_index_126727]; \n              }\n            }\n            v__126665[(127 + (128 * v_MWidthC_1 * v_w_id_126644) + (-1 * v_i_126646) + (128 * v_l_id_126645))] = mult(v__126663_0, v__126653[(v_l_id_126645 + (128 * v_MWidthC_1 * v_w_id_126644) + (v_MWidthC_1 * v_i_126646))]); \n          }\n          /* end map_seq */\n          float v_tmp_126728 = 0.0f; \n          v__126666 = v_tmp_126728; \n          /* reduce_seq */\n          for (int v_i_126647 = 0; v_i_126647 < 128; v_i_126647 = (1 + v_i_126647)) {\n            v__126666 = add(v__126666, v__126665[(v_i_126647 + (128 * v_MWidthC_1 * v_w_id_126644) + (128 * v_l_id_126645))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126648 = 0; \n            v__126670[v_l_id_126645] = id(v__126666); \n          }\n          /* end map_seq */\n          v_l_id_126645 = atomic_inc(&(v_work_idx_10134)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10128; \n        v_work_idx_10128 = 0; \n        int v_l_id_126649 = atomic_inc(&(v_work_idx_10128)); \n        while((v_l_id_126649 < 1)){\n          float v_tmp_126731 = 0.0f; \n          v__105970 = v_tmp_126731; \n          /* reduce_seq */\n          for (int v_i_126650 = 0; v_i_126650 < v_MWidthC_1; v_i_126650 = (1 + v_i_126650)) {\n            v__105970 = add(v__105970, v__126670[(v_i_126650 + (v_MWidthC_1 * v_l_id_126649))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126651 = 0; \n            v__126675[v_w_id_126644] = doubleMultiplyAdd(v__105970, v__126656, v__126655[v_w_id_126644], v__126657); \n          }\n          /* end map_seq */\n          v_l_id_126649 = atomic_inc(&(v_work_idx_10128)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126644 = atomic_inc(v_work_idx_10136); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__126652",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126653",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126654",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__126655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126656",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126657",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126665",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__126659",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126675",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__126670",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}