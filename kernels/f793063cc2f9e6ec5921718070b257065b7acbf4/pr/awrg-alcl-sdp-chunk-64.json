{
  "name" : "awrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__121608, const global float* restrict v__121609, const global float* restrict v__121610, const global float* restrict v__121611, float v__121612, float v__121613, global float* v__121627, global float* v__121621, global int* v__121615, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__121617; \n  float v__121622; \n  /* Private Memory */\n  float v__121619_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9674 = v__121615; \n    local int v_w_id_121603; \n    if (get_local_id(0) == 0) {\n      v_w_id_121603 = atomic_inc(v_work_idx_9674); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_121603 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9672; \n        v_work_idx_9672 = 0; \n        int v_l_id_121604 = atomic_inc(&(v_work_idx_9672)); \n        while((v_l_id_121604 < 64)){\n          /* map_seq */\n          for (int v_i_121605 = 0; v_i_121605 < v_MWidthC_1; v_i_121605 = (1 + v_i_121605)) {\n            float v_tmp_121666 = 0.0f; \n            v__121617 = v_tmp_121666; \n            int v_index_121667 = v__121608[(v_i_121605 + (64 * v_MWidthC_1 * v_w_id_121603) + (v_MWidthC_1 * v_l_id_121604))]; \n            if (v_index_121667 < 0) {\n              v__121619_0 = v__121617; \n            } else {\n              if (v_index_121667 >= v_VLength_3) {\n                v__121619_0 = v__121617; \n              } else {\n                v__121619_0 = v__121610[v_index_121667]; \n              }\n            }\n            v__121621[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_121603) + (-1 * v_i_121605) + (v_MWidthC_1 * v_l_id_121604))] = mult(v__121619_0, v__121609[(v_i_121605 + (64 * v_MWidthC_1 * v_w_id_121603) + (v_MWidthC_1 * v_l_id_121604))]); \n          }\n          /* end map_seq */\n          float v_tmp_121668 = 0.0f; \n          v__121622 = v_tmp_121668; \n          /* reduce_seq */\n          for (int v_i_121606 = 0; v_i_121606 < v_MWidthC_1; v_i_121606 = (1 + v_i_121606)) {\n            v__121622 = add(v__121622, v__121621[(v_i_121606 + (64 * v_MWidthC_1 * v_w_id_121603) + (v_MWidthC_1 * v_l_id_121604))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_121607 = 0; \n            v__121627[(v_l_id_121604 + (64 * v_w_id_121603))] = doubleMultiplyAdd(v__121622, v__121612, v__121611[(v_l_id_121604 + (64 * v_w_id_121603))], v__121613); \n          }\n          /* end map_seq */\n          v_l_id_121604 = atomic_inc(&(v_work_idx_9672)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_121603 = atomic_inc(v_work_idx_9674); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__121608",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121609",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121610",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__121611",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__121612",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__121613",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__121621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__121615",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__121627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}