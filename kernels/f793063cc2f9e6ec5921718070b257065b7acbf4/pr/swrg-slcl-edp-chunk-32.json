{
  "name" : "swrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__114206, const global float* restrict v__114207, const global float* restrict v__114208, const global float* restrict v__114209, float v__114210, float v__114211, global float* v__114226, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__114213; \n  float v__114216; \n  /* Private Memory */\n  float v__114218_0;\n  \n  float v__114220_0;\n  \n  int v__114224_0;\n  \n  for (int v_wg_id_114202 = get_group_id(0); v_wg_id_114202 < ((v_MHeight_2)/(32)); v_wg_id_114202 = (v_wg_id_114202 + get_num_groups(0))) {\n    for (int v_l_id_114203 = get_local_id(0); v_l_id_114203 < 32; v_l_id_114203 = (v_l_id_114203 + get_local_size(0))) {\n      float v_tmp_114274 = 0.0f; \n      v__114213 = v_tmp_114274; \n      /* reduce_while_seq */\n      for (int v_i_114204 = 0; v_i_114204 < v_MWidthC_1; v_i_114204 = (1 + v_i_114204)) {\n        v__114224_0 = check(v__114213, v__114206[(v_i_114204 + (32 * v_MWidthC_1 * v_wg_id_114202) + (v_MWidthC_1 * v_l_id_114203))]); \n        if (v__114224_0) {\n        } else {\n          break;\n        }\n        float v_tmp_114275 = 0.0f; \n        v__114216 = v_tmp_114275; \n        int v_index_114276 = v__114206[(v_i_114204 + (32 * v_MWidthC_1 * v_wg_id_114202) + (v_MWidthC_1 * v_l_id_114203))]; \n        if (v_index_114276 < 0) {\n          v__114218_0 = v__114216; \n        } else {\n          if (v_index_114276 >= v_VLength_3) {\n            v__114218_0 = v__114216; \n          } else {\n            v__114218_0 = v__114208[v_index_114276]; \n          }\n        }\n        v__114220_0 = mult(v__114218_0, v__114207[(v_i_114204 + (32 * v_MWidthC_1 * v_wg_id_114202) + (v_MWidthC_1 * v_l_id_114203))]); \n        v__114213 = add(v__114220_0, v__114213); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_114205 = 0; \n        v__114226[(v_l_id_114203 + (32 * v_wg_id_114202))] = doubleMultiplyAdd(v__114213, v__114210, v__114209[(v_l_id_114203 + (32 * v_wg_id_114202))], v__114211); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__114206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114207",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__114208",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__114209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__114210",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__114211",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__114226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}