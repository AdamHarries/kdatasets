{
  "name" : "swrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__107237, const global float* restrict v__107238, const global float* restrict v__107239, const global float* restrict v__107240, float v__107241, float v__107242, global float* v__107261, local float* v__107256, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107245; \n  float v__107247; \n  float v__105970; \n  /* Private Memory */\n  float v__107249_0;\n  \n  float v__107251_0;\n  \n  int v__107255_0;\n  \n  for (int v_wg_id_107230 = get_group_id(0); v_wg_id_107230 < v_MHeight_2; v_wg_id_107230 = (v_wg_id_107230 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8386; \n      v_work_idx_8386 = 0; \n      int v_l_id_107231 = atomic_inc(&(v_work_idx_8386)); \n      while((v_l_id_107231 < v_MWidthC_1)){\n        float v_tmp_107321 = 0.0f; \n        v__107245 = v_tmp_107321; \n        /* reduce_while_seq */\n        for (int v_i_107232 = 0; v_i_107232 < 8; v_i_107232 = (1 + v_i_107232)) {\n          v__107255_0 = check(v__107245, v__107237[(v_l_id_107231 + (8 * v_MWidthC_1 * v_wg_id_107230) + (v_MWidthC_1 * v_i_107232))]); \n          if (v__107255_0) {\n          } else {\n            break;\n          }\n          float v_tmp_107322 = 0.0f; \n          v__107247 = v_tmp_107322; \n          int v_index_107323 = v__107237[(v_l_id_107231 + (8 * v_MWidthC_1 * v_wg_id_107230) + (v_MWidthC_1 * v_i_107232))]; \n          if (v_index_107323 < 0) {\n            v__107249_0 = v__107247; \n          } else {\n            if (v_index_107323 >= v_VLength_3) {\n              v__107249_0 = v__107247; \n            } else {\n              v__107249_0 = v__107239[v_index_107323]; \n            }\n          }\n          v__107251_0 = mult(v__107249_0, v__107238[(v_l_id_107231 + (8 * v_MWidthC_1 * v_wg_id_107230) + (v_MWidthC_1 * v_i_107232))]); \n          v__107245 = add(v__107251_0, v__107245); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107233 = 0; \n          v__107256[v_l_id_107231] = id(v__107245); \n        }\n        /* end map_seq */\n        v_l_id_107231 = atomic_inc(&(v_work_idx_8386)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_107234 = get_local_id(0); \n      float v_tmp_107326 = 0.0f; \n      v__105970 = v_tmp_107326; \n      /* reduce_seq */\n      for (int v_i_107235 = 0; v_i_107235 < v_MWidthC_1; v_i_107235 = (1 + v_i_107235)) {\n        v__105970 = add(v__105970, v__107256[(v_i_107235 + (v_MWidthC_1 * v_l_id_107234))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_107236 = 0; \n        v__107261[v_wg_id_107230] = doubleMultiplyAdd(v__105970, v__107241, v__107240[v_wg_id_107230], v__107242); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__107237",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107238",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__107239",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__107240",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107241",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107242",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__107261",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__107256",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}