{
  "name" : "swrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__111431, const global float* restrict v__111432, const global float* restrict v__111433, const global float* restrict v__111434, float v__111435, float v__111436, global float* v__111453, local float* v__111448, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__111439; \n  float v__111441; \n  float v__105970; \n  /* Private Memory */\n  float v__111443_0;\n  \n  float v__111445_0;\n  \n  for (int v_wg_id_111424 = get_group_id(0); v_wg_id_111424 < v_MHeight_2; v_wg_id_111424 = (v_wg_id_111424 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8761; \n      v_work_idx_8761 = 0; \n      int v_l_id_111425 = atomic_inc(&(v_work_idx_8761)); \n      while((v_l_id_111425 < v_MWidthC_1)){\n        float v_tmp_111510 = 0.0f; \n        v__111439 = v_tmp_111510; \n        /* reduce_seq */\n        for (int v_i_111426 = 0; v_i_111426 < 16; v_i_111426 = (1 + v_i_111426)) {\n          float v_tmp_111511 = 0.0f; \n          v__111441 = v_tmp_111511; \n          int v_index_111512 = v__111431[(v_l_id_111425 + (16 * v_MWidthC_1 * v_wg_id_111424) + (v_MWidthC_1 * v_i_111426))]; \n          if (v_index_111512 < 0) {\n            v__111443_0 = v__111441; \n          } else {\n            if (v_index_111512 >= v_VLength_3) {\n              v__111443_0 = v__111441; \n            } else {\n              v__111443_0 = v__111433[v_index_111512]; \n            }\n          }\n          v__111445_0 = mult(v__111443_0, v__111432[(v_l_id_111425 + (16 * v_MWidthC_1 * v_wg_id_111424) + (v_MWidthC_1 * v_i_111426))]); \n          v__111439 = add(v__111445_0, v__111439); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111427 = 0; \n          v__111448[v_l_id_111425] = id(v__111439); \n        }\n        /* end map_seq */\n        v_l_id_111425 = atomic_inc(&(v_work_idx_8761)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_111428 = get_local_id(0); \n      float v_tmp_111515 = 0.0f; \n      v__105970 = v_tmp_111515; \n      /* reduce_seq */\n      for (int v_i_111429 = 0; v_i_111429 < v_MWidthC_1; v_i_111429 = (1 + v_i_111429)) {\n        v__105970 = add(v__105970, v__111448[(v_i_111429 + (v_MWidthC_1 * v_l_id_111428))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_111430 = 0; \n        v__111453[v_wg_id_111424] = doubleMultiplyAdd(v__105970, v__111435, v__111434[v_wg_id_111424], v__111436); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__111431",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111432",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111433",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__111434",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__111435",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__111436",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__111453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__111448",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}