{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__134178, const global float* restrict v__134179, const global float* restrict v__134180, const global float* restrict v__134181, float v__134182, float v__134183, global float* v__134201, global float* v__134191, global int* v__134185, local float* v__134196, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134187; \n  float v__134192; \n  float v__105970; \n  /* Private Memory */\n  float v__134189_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10798 = v__134185; \n    local int v_w_id_134170; \n    if (get_local_id(0) == 0) {\n      v_w_id_134170 = atomic_inc(v_work_idx_10798); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134170 < v_MHeight_2)){\n      for (int v_l_id_134171 = get_local_id(0); v_l_id_134171 < v_MWidthC_1; v_l_id_134171 = (v_l_id_134171 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_134172 = 0; v_i_134172 < 512; v_i_134172 = (1 + v_i_134172)) {\n          float v_tmp_134260 = 0.0f; \n          v__134187 = v_tmp_134260; \n          int v_index_134261 = v__134178[(v_l_id_134171 + (512 * v_MWidthC_1 * v_w_id_134170) + (v_MWidthC_1 * v_i_134172))]; \n          if (v_index_134261 < 0) {\n            v__134189_0 = v__134187; \n          } else {\n            if (v_index_134261 >= v_VLength_3) {\n              v__134189_0 = v__134187; \n            } else {\n              v__134189_0 = v__134180[v_index_134261]; \n            }\n          }\n          v__134191[(511 + (512 * v_MWidthC_1 * v_w_id_134170) + (-1 * v_i_134172) + (512 * v_l_id_134171))] = mult(v__134189_0, v__134179[(v_l_id_134171 + (512 * v_MWidthC_1 * v_w_id_134170) + (v_MWidthC_1 * v_i_134172))]); \n        }\n        /* end map_seq */\n        float v_tmp_134262 = 0.0f; \n        v__134192 = v_tmp_134262; \n        /* reduce_seq */\n        for (int v_i_134173 = 0; v_i_134173 < 512; v_i_134173 = (1 + v_i_134173)) {\n          v__134192 = add(v__134192, v__134191[(v_i_134173 + (512 * v_MWidthC_1 * v_w_id_134170) + (512 * v_l_id_134171))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_134174 = 0; \n          v__134196[v_l_id_134171] = id(v__134192); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10791; \n        v_work_idx_10791 = 0; \n        int v_l_id_134175 = atomic_inc(&(v_work_idx_10791)); \n        while((v_l_id_134175 < 1)){\n          float v_tmp_134265 = 0.0f; \n          v__105970 = v_tmp_134265; \n          /* reduce_seq */\n          for (int v_i_134176 = 0; v_i_134176 < v_MWidthC_1; v_i_134176 = (1 + v_i_134176)) {\n            v__105970 = add(v__105970, v__134196[(v_i_134176 + (v_MWidthC_1 * v_l_id_134175))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134177 = 0; \n            v__134201[v_w_id_134170] = doubleMultiplyAdd(v__105970, v__134182, v__134181[v_w_id_134170], v__134183); \n          }\n          /* end map_seq */\n          v_l_id_134175 = atomic_inc(&(v_work_idx_10791)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134170 = atomic_inc(v_work_idx_10798); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__134178",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134179",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134180",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__134181",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134182",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134183",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134191",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__134185",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__134196",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}