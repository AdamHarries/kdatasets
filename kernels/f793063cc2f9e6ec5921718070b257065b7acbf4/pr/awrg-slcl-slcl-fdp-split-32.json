{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116794, const global float* restrict v__116795, const global float* restrict v__116796, const global float* restrict v__116797, float v__116798, float v__116799, global float* v__116817, global int* v__116801, local float* v__116812, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116803; \n  float v__116805; \n  float v__105970; \n  /* Private Memory */\n  float v__116807_0;\n  \n  float v__116809_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9242 = v__116801; \n    local int v_w_id_116787; \n    if (get_local_id(0) == 0) {\n      v_w_id_116787 = atomic_inc(v_work_idx_9242); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_116787 < v_MHeight_2)){\n      for (int v_l_id_116788 = get_local_id(0); v_l_id_116788 < v_MWidthC_1; v_l_id_116788 = (v_l_id_116788 + get_local_size(0))) {\n        float v_tmp_116880 = 0.0f; \n        v__116803 = v_tmp_116880; \n        /* reduce_seq */\n        for (int v_i_116789 = 0; v_i_116789 < 32; v_i_116789 = (1 + v_i_116789)) {\n          float v_tmp_116881 = 0.0f; \n          v__116805 = v_tmp_116881; \n          int v_index_116882 = v__116794[(v_l_id_116788 + (32 * v_MWidthC_1 * v_w_id_116787) + (v_MWidthC_1 * v_i_116789))]; \n          if (v_index_116882 < 0) {\n            v__116807_0 = v__116805; \n          } else {\n            if (v_index_116882 >= v_VLength_3) {\n              v__116807_0 = v__116805; \n            } else {\n              v__116807_0 = v__116796[v_index_116882]; \n            }\n          }\n          v__116809_0 = mult(v__116807_0, v__116795[(v_l_id_116788 + (32 * v_MWidthC_1 * v_w_id_116787) + (v_MWidthC_1 * v_i_116789))]); \n          v__116803 = add(v__116809_0, v__116803); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116790 = 0; \n          v__116812[v_l_id_116788] = id(v__116803); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_116791 = get_local_id(0); \n        float v_tmp_116885 = 0.0f; \n        v__105970 = v_tmp_116885; \n        /* reduce_seq */\n        for (int v_i_116792 = 0; v_i_116792 < v_MWidthC_1; v_i_116792 = (1 + v_i_116792)) {\n          v__105970 = add(v__105970, v__116812[(v_i_116792 + (v_MWidthC_1 * v_l_id_116791))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116793 = 0; \n          v__116817[v_w_id_116787] = doubleMultiplyAdd(v__105970, v__116798, v__116797[v_w_id_116787], v__116799); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_116787 = atomic_inc(v_work_idx_9242); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__116794",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116795",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116796",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116797",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116798",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116799",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__116801",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__116817",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__116812",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}