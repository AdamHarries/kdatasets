{
  "name" : "swrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__110245, const global float* restrict v__110246, const global float* restrict v__110247, const global float* restrict v__110248, float v__110249, float v__110250, global float* v__110267, global float* v__110257, local float* v__110262, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__110253; \n  float v__110258; \n  float v__105970; \n  /* Private Memory */\n  float v__110255_0;\n  \n  for (int v_wg_id_110237 = get_group_id(0); v_wg_id_110237 < v_MHeight_2; v_wg_id_110237 = (v_wg_id_110237 + get_num_groups(0))) {\n    for (int v_l_id_110238 = get_local_id(0); v_l_id_110238 < v_MWidthC_1; v_l_id_110238 = (v_l_id_110238 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_110239 = 0; v_i_110239 < 16; v_i_110239 = (1 + v_i_110239)) {\n        float v_tmp_110332 = 0.0f; \n        v__110253 = v_tmp_110332; \n        int v_index_110333 = v__110245[(v_l_id_110238 + (16 * v_MWidthC_1 * v_wg_id_110237) + (v_MWidthC_1 * v_i_110239))]; \n        if (v_index_110333 < 0) {\n          v__110255_0 = v__110253; \n        } else {\n          if (v_index_110333 >= v_VLength_3) {\n            v__110255_0 = v__110253; \n          } else {\n            v__110255_0 = v__110247[v_index_110333]; \n          }\n        }\n        v__110257[(15 + (16 * v_MWidthC_1 * v_wg_id_110237) + (-1 * v_i_110239) + (16 * v_l_id_110238))] = mult(v__110255_0, v__110246[(v_l_id_110238 + (16 * v_MWidthC_1 * v_wg_id_110237) + (v_MWidthC_1 * v_i_110239))]); \n      }\n      /* end map_seq */\n      float v_tmp_110334 = 0.0f; \n      v__110258 = v_tmp_110334; \n      /* reduce_seq */\n      for (int v_i_110240 = 0; v_i_110240 < 16; v_i_110240 = (1 + v_i_110240)) {\n        v__110258 = add(v__110258, v__110257[(v_i_110240 + (16 * v_MWidthC_1 * v_wg_id_110237) + (16 * v_l_id_110238))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110241 = 0; \n        v__110262[v_l_id_110238] = id(v__110258); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_110242 = get_local_id(0); \n      float v_tmp_110337 = 0.0f; \n      v__105970 = v_tmp_110337; \n      /* reduce_seq */\n      for (int v_i_110243 = 0; v_i_110243 < v_MWidthC_1; v_i_110243 = (1 + v_i_110243)) {\n        v__105970 = add(v__105970, v__110262[(v_i_110243 + (v_MWidthC_1 * v_l_id_110242))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_110244 = 0; \n        v__110267[v_wg_id_110237] = doubleMultiplyAdd(v__105970, v__110249, v__110248[v_wg_id_110237], v__110250); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__110245",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110246",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110247",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110249",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110250",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__110257",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__110267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__110262",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}