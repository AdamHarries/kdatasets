{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__130647, const global float* restrict v__130648, const global float* restrict v__130649, const global float* restrict v__130650, float v__130651, float v__130652, global float* v__130670, global float* v__130660, global int* v__130654, local float* v__130665, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__130656; \n  float v__130661; \n  float v__105970; \n  /* Private Memory */\n  float v__130658_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10488 = v__130654; \n    local int v_w_id_130639; \n    if (get_local_id(0) == 0) {\n      v_w_id_130639 = atomic_inc(v_work_idx_10488); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130639 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10486; \n        v_work_idx_10486 = 0; \n        int v_l_id_130640 = atomic_inc(&(v_work_idx_10486)); \n        while((v_l_id_130640 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_130641 = 0; v_i_130641 < 256; v_i_130641 = (1 + v_i_130641)) {\n            float v_tmp_130725 = 0.0f; \n            v__130656 = v_tmp_130725; \n            int v_index_130726 = v__130647[(v_l_id_130640 + (256 * v_MWidthC_1 * v_w_id_130639) + (v_MWidthC_1 * v_i_130641))]; \n            if (v_index_130726 < 0) {\n              v__130658_0 = v__130656; \n            } else {\n              if (v_index_130726 >= v_VLength_3) {\n                v__130658_0 = v__130656; \n              } else {\n                v__130658_0 = v__130649[v_index_130726]; \n              }\n            }\n            v__130660[(255 + (256 * v_MWidthC_1 * v_w_id_130639) + (-1 * v_i_130641) + (256 * v_l_id_130640))] = mult(v__130658_0, v__130648[(v_l_id_130640 + (256 * v_MWidthC_1 * v_w_id_130639) + (v_MWidthC_1 * v_i_130641))]); \n          }\n          /* end map_seq */\n          float v_tmp_130727 = 0.0f; \n          v__130661 = v_tmp_130727; \n          /* reduce_seq */\n          for (int v_i_130642 = 0; v_i_130642 < 256; v_i_130642 = (1 + v_i_130642)) {\n            v__130661 = add(v__130661, v__130660[(v_i_130642 + (256 * v_MWidthC_1 * v_w_id_130639) + (256 * v_l_id_130640))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130643 = 0; \n            v__130665[v_l_id_130640] = id(v__130661); \n          }\n          /* end map_seq */\n          v_l_id_130640 = atomic_inc(&(v_work_idx_10486)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_130644 = get_local_id(0); \n        float v_tmp_130730 = 0.0f; \n        v__105970 = v_tmp_130730; \n        /* reduce_seq */\n        for (int v_i_130645 = 0; v_i_130645 < v_MWidthC_1; v_i_130645 = (1 + v_i_130645)) {\n          v__105970 = add(v__105970, v__130665[(v_i_130645 + (v_MWidthC_1 * v_l_id_130644))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_130646 = 0; \n          v__130670[v_w_id_130639] = doubleMultiplyAdd(v__105970, v__130651, v__130650[v_w_id_130639], v__130652); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130639 = atomic_inc(v_work_idx_10488); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__130647",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130648",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130649",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130650",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130651",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130652",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130660",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130654",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130665",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}