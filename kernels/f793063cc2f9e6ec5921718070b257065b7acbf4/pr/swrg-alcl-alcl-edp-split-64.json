{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__120405, const global float* restrict v__120406, const global float* restrict v__120407, const global float* restrict v__120408, float v__120409, float v__120410, global float* v__120429, local float* v__120424, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__120413; \n  float v__120415; \n  float v__105970; \n  /* Private Memory */\n  float v__120417_0;\n  \n  float v__120419_0;\n  \n  int v__120423_0;\n  \n  for (int v_wg_id_120398 = get_group_id(0); v_wg_id_120398 < v_MHeight_2; v_wg_id_120398 = (v_wg_id_120398 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9569; \n      v_work_idx_9569 = 0; \n      int v_l_id_120399 = atomic_inc(&(v_work_idx_9569)); \n      while((v_l_id_120399 < v_MWidthC_1)){\n        float v_tmp_120485 = 0.0f; \n        v__120413 = v_tmp_120485; \n        /* reduce_while_seq */\n        for (int v_i_120400 = 0; v_i_120400 < 64; v_i_120400 = (1 + v_i_120400)) {\n          v__120423_0 = check(v__120413, v__120405[(v_l_id_120399 + (64 * v_MWidthC_1 * v_wg_id_120398) + (v_MWidthC_1 * v_i_120400))]); \n          if (v__120423_0) {\n          } else {\n            break;\n          }\n          float v_tmp_120486 = 0.0f; \n          v__120415 = v_tmp_120486; \n          int v_index_120487 = v__120405[(v_l_id_120399 + (64 * v_MWidthC_1 * v_wg_id_120398) + (v_MWidthC_1 * v_i_120400))]; \n          if (v_index_120487 < 0) {\n            v__120417_0 = v__120415; \n          } else {\n            if (v_index_120487 >= v_VLength_3) {\n              v__120417_0 = v__120415; \n            } else {\n              v__120417_0 = v__120407[v_index_120487]; \n            }\n          }\n          v__120419_0 = mult(v__120417_0, v__120406[(v_l_id_120399 + (64 * v_MWidthC_1 * v_wg_id_120398) + (v_MWidthC_1 * v_i_120400))]); \n          v__120413 = add(v__120419_0, v__120413); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120401 = 0; \n          v__120424[v_l_id_120399] = id(v__120413); \n        }\n        /* end map_seq */\n        v_l_id_120399 = atomic_inc(&(v_work_idx_9569)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9564; \n      v_work_idx_9564 = 0; \n      int v_l_id_120402 = atomic_inc(&(v_work_idx_9564)); \n      while((v_l_id_120402 < 1)){\n        float v_tmp_120490 = 0.0f; \n        v__105970 = v_tmp_120490; \n        /* reduce_seq */\n        for (int v_i_120403 = 0; v_i_120403 < v_MWidthC_1; v_i_120403 = (1 + v_i_120403)) {\n          v__105970 = add(v__105970, v__120424[(v_i_120403 + (v_MWidthC_1 * v_l_id_120402))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_120404 = 0; \n          v__120429[v_wg_id_120398] = doubleMultiplyAdd(v__105970, v__120409, v__120408[v_wg_id_120398], v__120410); \n        }\n        /* end map_seq */\n        v_l_id_120402 = atomic_inc(&(v_work_idx_9564)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__120405",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120406",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__120407",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__120408",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__120409",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__120410",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__120429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__120424",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}