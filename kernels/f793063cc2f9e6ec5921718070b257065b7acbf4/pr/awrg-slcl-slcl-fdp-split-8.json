{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108210, const global float* restrict v__108211, const global float* restrict v__108212, const global float* restrict v__108213, float v__108214, float v__108215, global float* v__108233, global int* v__108217, local float* v__108228, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108219; \n  float v__108221; \n  float v__105970; \n  /* Private Memory */\n  float v__108223_0;\n  \n  float v__108225_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8474 = v__108217; \n    local int v_w_id_108203; \n    if (get_local_id(0) == 0) {\n      v_w_id_108203 = atomic_inc(v_work_idx_8474); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108203 < v_MHeight_2)){\n      for (int v_l_id_108204 = get_local_id(0); v_l_id_108204 < v_MWidthC_1; v_l_id_108204 = (v_l_id_108204 + get_local_size(0))) {\n        float v_tmp_108296 = 0.0f; \n        v__108219 = v_tmp_108296; \n        /* reduce_seq */\n        for (int v_i_108205 = 0; v_i_108205 < 8; v_i_108205 = (1 + v_i_108205)) {\n          float v_tmp_108297 = 0.0f; \n          v__108221 = v_tmp_108297; \n          int v_index_108298 = v__108210[(v_l_id_108204 + (8 * v_MWidthC_1 * v_w_id_108203) + (v_MWidthC_1 * v_i_108205))]; \n          if (v_index_108298 < 0) {\n            v__108223_0 = v__108221; \n          } else {\n            if (v_index_108298 >= v_VLength_3) {\n              v__108223_0 = v__108221; \n            } else {\n              v__108223_0 = v__108212[v_index_108298]; \n            }\n          }\n          v__108225_0 = mult(v__108223_0, v__108211[(v_l_id_108204 + (8 * v_MWidthC_1 * v_w_id_108203) + (v_MWidthC_1 * v_i_108205))]); \n          v__108219 = add(v__108225_0, v__108219); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108206 = 0; \n          v__108228[v_l_id_108204] = id(v__108219); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_108207 = get_local_id(0); \n        float v_tmp_108301 = 0.0f; \n        v__105970 = v_tmp_108301; \n        /* reduce_seq */\n        for (int v_i_108208 = 0; v_i_108208 < v_MWidthC_1; v_i_108208 = (1 + v_i_108208)) {\n          v__105970 = add(v__105970, v__108228[(v_i_108208 + (v_MWidthC_1 * v_l_id_108207))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108209 = 0; \n          v__108233[v_w_id_108203] = doubleMultiplyAdd(v__105970, v__108214, v__108213[v_w_id_108203], v__108215); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108203 = atomic_inc(v_work_idx_8474); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__108210",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108211",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108212",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108213",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108214",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108215",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108217",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__108228",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}