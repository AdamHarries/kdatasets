{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116113, const global float* restrict v__116114, const global float* restrict v__116115, const global float* restrict v__116116, float v__116117, float v__116118, global float* v__116137, local float* v__116132, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116121; \n  float v__116123; \n  float v__105970; \n  /* Private Memory */\n  float v__116125_0;\n  \n  float v__116127_0;\n  \n  int v__116131_0;\n  \n  for (int v_wg_id_116106 = get_group_id(0); v_wg_id_116106 < v_MHeight_2; v_wg_id_116106 = (v_wg_id_116106 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9185; \n      v_work_idx_9185 = 0; \n      int v_l_id_116107 = atomic_inc(&(v_work_idx_9185)); \n      while((v_l_id_116107 < v_MWidthC_1)){\n        float v_tmp_116193 = 0.0f; \n        v__116121 = v_tmp_116193; \n        /* reduce_while_seq */\n        for (int v_i_116108 = 0; v_i_116108 < 32; v_i_116108 = (1 + v_i_116108)) {\n          v__116131_0 = check(v__116121, v__116113[(v_l_id_116107 + (32 * v_MWidthC_1 * v_wg_id_116106) + (v_MWidthC_1 * v_i_116108))]); \n          if (v__116131_0) {\n          } else {\n            break;\n          }\n          float v_tmp_116194 = 0.0f; \n          v__116123 = v_tmp_116194; \n          int v_index_116195 = v__116113[(v_l_id_116107 + (32 * v_MWidthC_1 * v_wg_id_116106) + (v_MWidthC_1 * v_i_116108))]; \n          if (v_index_116195 < 0) {\n            v__116125_0 = v__116123; \n          } else {\n            if (v_index_116195 >= v_VLength_3) {\n              v__116125_0 = v__116123; \n            } else {\n              v__116125_0 = v__116115[v_index_116195]; \n            }\n          }\n          v__116127_0 = mult(v__116125_0, v__116114[(v_l_id_116107 + (32 * v_MWidthC_1 * v_wg_id_116106) + (v_MWidthC_1 * v_i_116108))]); \n          v__116121 = add(v__116127_0, v__116121); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116109 = 0; \n          v__116132[v_l_id_116107] = id(v__116121); \n        }\n        /* end map_seq */\n        v_l_id_116107 = atomic_inc(&(v_work_idx_9185)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9180; \n      v_work_idx_9180 = 0; \n      int v_l_id_116110 = atomic_inc(&(v_work_idx_9180)); \n      while((v_l_id_116110 < 1)){\n        float v_tmp_116198 = 0.0f; \n        v__105970 = v_tmp_116198; \n        /* reduce_seq */\n        for (int v_i_116111 = 0; v_i_116111 < v_MWidthC_1; v_i_116111 = (1 + v_i_116111)) {\n          v__105970 = add(v__105970, v__116132[(v_i_116111 + (v_MWidthC_1 * v_l_id_116110))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116112 = 0; \n          v__116137[v_wg_id_116106] = doubleMultiplyAdd(v__105970, v__116117, v__116116[v_wg_id_116106], v__116118); \n        }\n        /* end map_seq */\n        v_l_id_116110 = atomic_inc(&(v_work_idx_9180)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__116113",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116114",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116115",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116117",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116118",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__116137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__116132",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}