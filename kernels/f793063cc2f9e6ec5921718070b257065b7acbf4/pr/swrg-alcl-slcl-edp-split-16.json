{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__111529, const global float* restrict v__111530, const global float* restrict v__111531, const global float* restrict v__111532, float v__111533, float v__111534, global float* v__111553, local float* v__111548, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__111537; \n  float v__111539; \n  float v__105970; \n  /* Private Memory */\n  float v__111541_0;\n  \n  float v__111543_0;\n  \n  int v__111547_0;\n  \n  for (int v_wg_id_111522 = get_group_id(0); v_wg_id_111522 < v_MHeight_2; v_wg_id_111522 = (v_wg_id_111522 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8770; \n      v_work_idx_8770 = 0; \n      int v_l_id_111523 = atomic_inc(&(v_work_idx_8770)); \n      while((v_l_id_111523 < v_MWidthC_1)){\n        float v_tmp_111613 = 0.0f; \n        v__111537 = v_tmp_111613; \n        /* reduce_while_seq */\n        for (int v_i_111524 = 0; v_i_111524 < 16; v_i_111524 = (1 + v_i_111524)) {\n          v__111547_0 = check(v__111537, v__111529[(v_l_id_111523 + (16 * v_MWidthC_1 * v_wg_id_111522) + (v_MWidthC_1 * v_i_111524))]); \n          if (v__111547_0) {\n          } else {\n            break;\n          }\n          float v_tmp_111614 = 0.0f; \n          v__111539 = v_tmp_111614; \n          int v_index_111615 = v__111529[(v_l_id_111523 + (16 * v_MWidthC_1 * v_wg_id_111522) + (v_MWidthC_1 * v_i_111524))]; \n          if (v_index_111615 < 0) {\n            v__111541_0 = v__111539; \n          } else {\n            if (v_index_111615 >= v_VLength_3) {\n              v__111541_0 = v__111539; \n            } else {\n              v__111541_0 = v__111531[v_index_111615]; \n            }\n          }\n          v__111543_0 = mult(v__111541_0, v__111530[(v_l_id_111523 + (16 * v_MWidthC_1 * v_wg_id_111522) + (v_MWidthC_1 * v_i_111524))]); \n          v__111537 = add(v__111543_0, v__111537); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_111525 = 0; \n          v__111548[v_l_id_111523] = id(v__111537); \n        }\n        /* end map_seq */\n        v_l_id_111523 = atomic_inc(&(v_work_idx_8770)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_111526 = get_local_id(0); \n      float v_tmp_111618 = 0.0f; \n      v__105970 = v_tmp_111618; \n      /* reduce_seq */\n      for (int v_i_111527 = 0; v_i_111527 < v_MWidthC_1; v_i_111527 = (1 + v_i_111527)) {\n        v__105970 = add(v__105970, v__111548[(v_i_111527 + (v_MWidthC_1 * v_l_id_111526))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_111528 = 0; \n        v__111553[v_wg_id_111522] = doubleMultiplyAdd(v__105970, v__111533, v__111532[v_wg_id_111522], v__111534); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__111529",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111530",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__111531",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__111532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__111533",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__111534",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__111553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__111548",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}