{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132338, const global float* restrict v__132339, const global float* restrict v__132340, const global float* restrict v__132341, float v__132342, float v__132343, global float* v__132356, global float* v__132350, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132346; \n  float v__132351; \n  /* Private Memory */\n  float v__132348_0;\n  \n  for (int v_wg_id_132333 = get_group_id(0); v_wg_id_132333 < ((v_MHeight_2)/(512)); v_wg_id_132333 = (v_wg_id_132333 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10632; \n      v_work_idx_10632 = 0; \n      int v_l_id_132334 = atomic_inc(&(v_work_idx_10632)); \n      while((v_l_id_132334 < 512)){\n        /* map_seq */\n        for (int v_i_132335 = 0; v_i_132335 < v_MWidthC_1; v_i_132335 = (1 + v_i_132335)) {\n          float v_tmp_132396 = 0.0f; \n          v__132346 = v_tmp_132396; \n          int v_index_132397 = v__132338[(v_i_132335 + (512 * v_MWidthC_1 * v_wg_id_132333) + (v_MWidthC_1 * v_l_id_132334))]; \n          if (v_index_132397 < 0) {\n            v__132348_0 = v__132346; \n          } else {\n            if (v_index_132397 >= v_VLength_3) {\n              v__132348_0 = v__132346; \n            } else {\n              v__132348_0 = v__132340[v_index_132397]; \n            }\n          }\n          v__132350[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_132333) + (-1 * v_i_132335) + (v_MWidthC_1 * v_l_id_132334))] = mult(v__132348_0, v__132339[(v_i_132335 + (512 * v_MWidthC_1 * v_wg_id_132333) + (v_MWidthC_1 * v_l_id_132334))]); \n        }\n        /* end map_seq */\n        float v_tmp_132398 = 0.0f; \n        v__132351 = v_tmp_132398; \n        /* reduce_seq */\n        for (int v_i_132336 = 0; v_i_132336 < v_MWidthC_1; v_i_132336 = (1 + v_i_132336)) {\n          v__132351 = add(v__132351, v__132350[(v_i_132336 + (512 * v_MWidthC_1 * v_wg_id_132333) + (v_MWidthC_1 * v_l_id_132334))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132337 = 0; \n          v__132356[(v_l_id_132334 + (512 * v_wg_id_132333))] = doubleMultiplyAdd(v__132351, v__132342, v__132341[(v_l_id_132334 + (512 * v_wg_id_132333))], v__132343); \n        }\n        /* end map_seq */\n        v_l_id_132334 = atomic_inc(&(v_work_idx_10632)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__132338",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132339",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132340",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132341",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132342",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132343",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__132350",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__132356",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}