{
  "name" : "swrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131226, const global float* restrict v__131227, const global float* restrict v__131228, const global float* restrict v__131229, float v__131230, float v__131231, global float* v__131244, global float* v__131238, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131234; \n  float v__131239; \n  /* Private Memory */\n  float v__131236_0;\n  \n  for (int v_wg_id_131221 = get_group_id(0); v_wg_id_131221 < ((v_MHeight_2)/(512)); v_wg_id_131221 = (v_wg_id_131221 + get_num_groups(0))) {\n    for (int v_l_id_131222 = get_local_id(0); v_l_id_131222 < 512; v_l_id_131222 = (v_l_id_131222 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_131223 = 0; v_i_131223 < v_MWidthC_1; v_i_131223 = (1 + v_i_131223)) {\n        float v_tmp_131288 = 0.0f; \n        v__131234 = v_tmp_131288; \n        int v_index_131289 = v__131226[(v_i_131223 + (512 * v_MWidthC_1 * v_wg_id_131221) + (v_MWidthC_1 * v_l_id_131222))]; \n        if (v_index_131289 < 0) {\n          v__131236_0 = v__131234; \n        } else {\n          if (v_index_131289 >= v_VLength_3) {\n            v__131236_0 = v__131234; \n          } else {\n            v__131236_0 = v__131228[v_index_131289]; \n          }\n        }\n        v__131238[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_131221) + (-1 * v_i_131223) + (v_MWidthC_1 * v_l_id_131222))] = mult(v__131236_0, v__131227[(v_i_131223 + (512 * v_MWidthC_1 * v_wg_id_131221) + (v_MWidthC_1 * v_l_id_131222))]); \n      }\n      /* end map_seq */\n      float v_tmp_131290 = 0.0f; \n      v__131239 = v_tmp_131290; \n      /* reduce_seq */\n      for (int v_i_131224 = 0; v_i_131224 < v_MWidthC_1; v_i_131224 = (1 + v_i_131224)) {\n        v__131239 = add(v__131239, v__131238[(v_i_131224 + (512 * v_MWidthC_1 * v_wg_id_131221) + (v_MWidthC_1 * v_l_id_131222))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131225 = 0; \n        v__131244[(v_l_id_131222 + (512 * v_wg_id_131221))] = doubleMultiplyAdd(v__131239, v__131230, v__131229[(v_l_id_131222 + (512 * v_wg_id_131221))], v__131231); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__131226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131228",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131230",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131231",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__131238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__131244",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}