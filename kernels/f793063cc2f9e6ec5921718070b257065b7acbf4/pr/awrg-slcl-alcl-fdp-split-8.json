{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__108527, const global float* restrict v__108528, const global float* restrict v__108529, const global float* restrict v__108530, float v__108531, float v__108532, global float* v__108550, global int* v__108534, local float* v__108545, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__108536; \n  float v__108538; \n  float v__105970; \n  /* Private Memory */\n  float v__108540_0;\n  \n  float v__108542_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8504 = v__108534; \n    local int v_w_id_108520; \n    if (get_local_id(0) == 0) {\n      v_w_id_108520 = atomic_inc(v_work_idx_8504); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_108520 < v_MHeight_2)){\n      for (int v_l_id_108521 = get_local_id(0); v_l_id_108521 < v_MWidthC_1; v_l_id_108521 = (v_l_id_108521 + get_local_size(0))) {\n        float v_tmp_108609 = 0.0f; \n        v__108536 = v_tmp_108609; \n        /* reduce_seq */\n        for (int v_i_108522 = 0; v_i_108522 < 8; v_i_108522 = (1 + v_i_108522)) {\n          float v_tmp_108610 = 0.0f; \n          v__108538 = v_tmp_108610; \n          int v_index_108611 = v__108527[(v_l_id_108521 + (8 * v_MWidthC_1 * v_w_id_108520) + (v_MWidthC_1 * v_i_108522))]; \n          if (v_index_108611 < 0) {\n            v__108540_0 = v__108538; \n          } else {\n            if (v_index_108611 >= v_VLength_3) {\n              v__108540_0 = v__108538; \n            } else {\n              v__108540_0 = v__108529[v_index_108611]; \n            }\n          }\n          v__108542_0 = mult(v__108540_0, v__108528[(v_l_id_108521 + (8 * v_MWidthC_1 * v_w_id_108520) + (v_MWidthC_1 * v_i_108522))]); \n          v__108536 = add(v__108542_0, v__108536); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_108523 = 0; \n          v__108545[v_l_id_108521] = id(v__108536); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8498; \n        v_work_idx_8498 = 0; \n        int v_l_id_108524 = atomic_inc(&(v_work_idx_8498)); \n        while((v_l_id_108524 < 1)){\n          float v_tmp_108614 = 0.0f; \n          v__105970 = v_tmp_108614; \n          /* reduce_seq */\n          for (int v_i_108525 = 0; v_i_108525 < v_MWidthC_1; v_i_108525 = (1 + v_i_108525)) {\n            v__105970 = add(v__105970, v__108545[(v_i_108525 + (v_MWidthC_1 * v_l_id_108524))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_108526 = 0; \n            v__108550[v_w_id_108520] = doubleMultiplyAdd(v__105970, v__108531, v__108530[v_w_id_108520], v__108532); \n          }\n          /* end map_seq */\n          v_l_id_108524 = atomic_inc(&(v_work_idx_8498)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_108520 = atomic_inc(v_work_idx_8504); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__108527",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108528",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__108529",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__108530",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__108531",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__108532",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__108534",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__108550",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__108545",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}