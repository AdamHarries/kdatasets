{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131811, const global float* restrict v__131812, const global float* restrict v__131813, const global float* restrict v__131814, float v__131815, float v__131816, global float* v__131833, local float* v__131828, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131819; \n  float v__131821; \n  float v__105970; \n  /* Private Memory */\n  float v__131823_0;\n  \n  float v__131825_0;\n  \n  for (int v_wg_id_131804 = get_group_id(0); v_wg_id_131804 < v_MHeight_2; v_wg_id_131804 = (v_wg_id_131804 + get_num_groups(0))) {\n    for (int v_l_id_131805 = get_local_id(0); v_l_id_131805 < v_MWidthC_1; v_l_id_131805 = (v_l_id_131805 + get_local_size(0))) {\n      float v_tmp_131898 = 0.0f; \n      v__131819 = v_tmp_131898; \n      /* reduce_seq */\n      for (int v_i_131806 = 0; v_i_131806 < 512; v_i_131806 = (1 + v_i_131806)) {\n        float v_tmp_131899 = 0.0f; \n        v__131821 = v_tmp_131899; \n        int v_index_131900 = v__131811[(v_l_id_131805 + (512 * v_MWidthC_1 * v_wg_id_131804) + (v_MWidthC_1 * v_i_131806))]; \n        if (v_index_131900 < 0) {\n          v__131823_0 = v__131821; \n        } else {\n          if (v_index_131900 >= v_VLength_3) {\n            v__131823_0 = v__131821; \n          } else {\n            v__131823_0 = v__131813[v_index_131900]; \n          }\n        }\n        v__131825_0 = mult(v__131823_0, v__131812[(v_l_id_131805 + (512 * v_MWidthC_1 * v_wg_id_131804) + (v_MWidthC_1 * v_i_131806))]); \n        v__131819 = add(v__131825_0, v__131819); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131807 = 0; \n        v__131828[v_l_id_131805] = id(v__131819); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_131808 = get_local_id(0); \n      float v_tmp_131903 = 0.0f; \n      v__105970 = v_tmp_131903; \n      /* reduce_seq */\n      for (int v_i_131809 = 0; v_i_131809 < v_MWidthC_1; v_i_131809 = (1 + v_i_131809)) {\n        v__105970 = add(v__105970, v__131828[(v_i_131809 + (v_MWidthC_1 * v_l_id_131808))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_131810 = 0; \n        v__131833[v_wg_id_131804] = doubleMultiplyAdd(v__105970, v__131815, v__131814[v_wg_id_131804], v__131816); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__131811",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131812",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131813",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131814",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131815",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131816",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__131833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__131828",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}