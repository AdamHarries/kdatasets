{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__123754, const global float* restrict v__123755, const global float* restrict v__123756, const global float* restrict v__123757, float v__123758, float v__123759, global float* v__123772, global float* v__123766, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__123762; \n  float v__123767; \n  /* Private Memory */\n  float v__123764_0;\n  \n  for (int v_wg_id_123749 = get_group_id(0); v_wg_id_123749 < ((v_MHeight_2)/(128)); v_wg_id_123749 = (v_wg_id_123749 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9864; \n      v_work_idx_9864 = 0; \n      int v_l_id_123750 = atomic_inc(&(v_work_idx_9864)); \n      while((v_l_id_123750 < 128)){\n        /* map_seq */\n        for (int v_i_123751 = 0; v_i_123751 < v_MWidthC_1; v_i_123751 = (1 + v_i_123751)) {\n          float v_tmp_123812 = 0.0f; \n          v__123762 = v_tmp_123812; \n          int v_index_123813 = v__123754[(v_i_123751 + (128 * v_MWidthC_1 * v_wg_id_123749) + (v_MWidthC_1 * v_l_id_123750))]; \n          if (v_index_123813 < 0) {\n            v__123764_0 = v__123762; \n          } else {\n            if (v_index_123813 >= v_VLength_3) {\n              v__123764_0 = v__123762; \n            } else {\n              v__123764_0 = v__123756[v_index_123813]; \n            }\n          }\n          v__123766[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_123749) + (-1 * v_i_123751) + (v_MWidthC_1 * v_l_id_123750))] = mult(v__123764_0, v__123755[(v_i_123751 + (128 * v_MWidthC_1 * v_wg_id_123749) + (v_MWidthC_1 * v_l_id_123750))]); \n        }\n        /* end map_seq */\n        float v_tmp_123814 = 0.0f; \n        v__123767 = v_tmp_123814; \n        /* reduce_seq */\n        for (int v_i_123752 = 0; v_i_123752 < v_MWidthC_1; v_i_123752 = (1 + v_i_123752)) {\n          v__123767 = add(v__123767, v__123766[(v_i_123752 + (128 * v_MWidthC_1 * v_wg_id_123749) + (v_MWidthC_1 * v_l_id_123750))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_123753 = 0; \n          v__123772[(v_l_id_123750 + (128 * v_wg_id_123749))] = doubleMultiplyAdd(v__123767, v__123758, v__123757[(v_l_id_123750 + (128 * v_wg_id_123749))], v__123759); \n        }\n        /* end map_seq */\n        v_l_id_123750 = atomic_inc(&(v_work_idx_9864)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__123754",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123755",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__123756",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__123757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__123758",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__123759",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__123766",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__123772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}