{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__116019, const global float* restrict v__116020, const global float* restrict v__116021, const global float* restrict v__116022, float v__116023, float v__116024, global float* v__116041, local float* v__116036, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__116027; \n  float v__116029; \n  float v__105970; \n  /* Private Memory */\n  float v__116031_0;\n  \n  float v__116033_0;\n  \n  for (int v_wg_id_116012 = get_group_id(0); v_wg_id_116012 < v_MHeight_2; v_wg_id_116012 = (v_wg_id_116012 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9175; \n      v_work_idx_9175 = 0; \n      int v_l_id_116013 = atomic_inc(&(v_work_idx_9175)); \n      while((v_l_id_116013 < v_MWidthC_1)){\n        float v_tmp_116094 = 0.0f; \n        v__116027 = v_tmp_116094; \n        /* reduce_seq */\n        for (int v_i_116014 = 0; v_i_116014 < 32; v_i_116014 = (1 + v_i_116014)) {\n          float v_tmp_116095 = 0.0f; \n          v__116029 = v_tmp_116095; \n          int v_index_116096 = v__116019[(v_l_id_116013 + (32 * v_MWidthC_1 * v_wg_id_116012) + (v_MWidthC_1 * v_i_116014))]; \n          if (v_index_116096 < 0) {\n            v__116031_0 = v__116029; \n          } else {\n            if (v_index_116096 >= v_VLength_3) {\n              v__116031_0 = v__116029; \n            } else {\n              v__116031_0 = v__116021[v_index_116096]; \n            }\n          }\n          v__116033_0 = mult(v__116031_0, v__116020[(v_l_id_116013 + (32 * v_MWidthC_1 * v_wg_id_116012) + (v_MWidthC_1 * v_i_116014))]); \n          v__116027 = add(v__116033_0, v__116027); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116015 = 0; \n          v__116036[v_l_id_116013] = id(v__116027); \n        }\n        /* end map_seq */\n        v_l_id_116013 = atomic_inc(&(v_work_idx_9175)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_9170; \n      v_work_idx_9170 = 0; \n      int v_l_id_116016 = atomic_inc(&(v_work_idx_9170)); \n      while((v_l_id_116016 < 1)){\n        float v_tmp_116099 = 0.0f; \n        v__105970 = v_tmp_116099; \n        /* reduce_seq */\n        for (int v_i_116017 = 0; v_i_116017 < v_MWidthC_1; v_i_116017 = (1 + v_i_116017)) {\n          v__105970 = add(v__105970, v__116036[(v_i_116017 + (v_MWidthC_1 * v_l_id_116016))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_116018 = 0; \n          v__116041[v_wg_id_116012] = doubleMultiplyAdd(v__105970, v__116023, v__116022[v_wg_id_116012], v__116024); \n        }\n        /* end map_seq */\n        v_l_id_116016 = atomic_inc(&(v_work_idx_9170)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__116019",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116020",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__116021",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__116022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__116023",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__116024",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__116041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__116036",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}