{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__128599, const global float* restrict v__128600, const global float* restrict v__128601, const global float* restrict v__128602, float v__128603, float v__128604, global float* v__128621, local float* v__128616, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__128607; \n  float v__128609; \n  float v__105970; \n  /* Private Memory */\n  float v__128611_0;\n  \n  float v__128613_0;\n  \n  for (int v_wg_id_128592 = get_group_id(0); v_wg_id_128592 < v_MHeight_2; v_wg_id_128592 = (v_wg_id_128592 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10297; \n      v_work_idx_10297 = 0; \n      int v_l_id_128593 = atomic_inc(&(v_work_idx_10297)); \n      while((v_l_id_128593 < v_MWidthC_1)){\n        float v_tmp_128678 = 0.0f; \n        v__128607 = v_tmp_128678; \n        /* reduce_seq */\n        for (int v_i_128594 = 0; v_i_128594 < 256; v_i_128594 = (1 + v_i_128594)) {\n          float v_tmp_128679 = 0.0f; \n          v__128609 = v_tmp_128679; \n          int v_index_128680 = v__128599[(v_l_id_128593 + (256 * v_MWidthC_1 * v_wg_id_128592) + (v_MWidthC_1 * v_i_128594))]; \n          if (v_index_128680 < 0) {\n            v__128611_0 = v__128609; \n          } else {\n            if (v_index_128680 >= v_VLength_3) {\n              v__128611_0 = v__128609; \n            } else {\n              v__128611_0 = v__128601[v_index_128680]; \n            }\n          }\n          v__128613_0 = mult(v__128611_0, v__128600[(v_l_id_128593 + (256 * v_MWidthC_1 * v_wg_id_128592) + (v_MWidthC_1 * v_i_128594))]); \n          v__128607 = add(v__128613_0, v__128607); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_128595 = 0; \n          v__128616[v_l_id_128593] = id(v__128607); \n        }\n        /* end map_seq */\n        v_l_id_128593 = atomic_inc(&(v_work_idx_10297)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_128596 = get_local_id(0); \n      float v_tmp_128683 = 0.0f; \n      v__105970 = v_tmp_128683; \n      /* reduce_seq */\n      for (int v_i_128597 = 0; v_i_128597 < v_MWidthC_1; v_i_128597 = (1 + v_i_128597)) {\n        v__105970 = add(v__105970, v__128616[(v_i_128597 + (v_MWidthC_1 * v_l_id_128596))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_128598 = 0; \n        v__128621[v_wg_id_128592] = doubleMultiplyAdd(v__105970, v__128603, v__128602[v_wg_id_128592], v__128604); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__128599",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128600",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__128601",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__128602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__128603",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__128604",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__128621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__128616",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}