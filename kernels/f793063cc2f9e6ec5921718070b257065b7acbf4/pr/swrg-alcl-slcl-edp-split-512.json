{
  "name" : "swrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__132989, const global float* restrict v__132990, const global float* restrict v__132991, const global float* restrict v__132992, float v__132993, float v__132994, global float* v__133013, local float* v__133008, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__132997; \n  float v__132999; \n  float v__105970; \n  /* Private Memory */\n  float v__133001_0;\n  \n  float v__133003_0;\n  \n  int v__133007_0;\n  \n  for (int v_wg_id_132982 = get_group_id(0); v_wg_id_132982 < v_MHeight_2; v_wg_id_132982 = (v_wg_id_132982 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_10690; \n      v_work_idx_10690 = 0; \n      int v_l_id_132983 = atomic_inc(&(v_work_idx_10690)); \n      while((v_l_id_132983 < v_MWidthC_1)){\n        float v_tmp_133073 = 0.0f; \n        v__132997 = v_tmp_133073; \n        /* reduce_while_seq */\n        for (int v_i_132984 = 0; v_i_132984 < 512; v_i_132984 = (1 + v_i_132984)) {\n          v__133007_0 = check(v__132997, v__132989[(v_l_id_132983 + (512 * v_MWidthC_1 * v_wg_id_132982) + (v_MWidthC_1 * v_i_132984))]); \n          if (v__133007_0) {\n          } else {\n            break;\n          }\n          float v_tmp_133074 = 0.0f; \n          v__132999 = v_tmp_133074; \n          int v_index_133075 = v__132989[(v_l_id_132983 + (512 * v_MWidthC_1 * v_wg_id_132982) + (v_MWidthC_1 * v_i_132984))]; \n          if (v_index_133075 < 0) {\n            v__133001_0 = v__132999; \n          } else {\n            if (v_index_133075 >= v_VLength_3) {\n              v__133001_0 = v__132999; \n            } else {\n              v__133001_0 = v__132991[v_index_133075]; \n            }\n          }\n          v__133003_0 = mult(v__133001_0, v__132990[(v_l_id_132983 + (512 * v_MWidthC_1 * v_wg_id_132982) + (v_MWidthC_1 * v_i_132984))]); \n          v__132997 = add(v__133003_0, v__132997); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_132985 = 0; \n          v__133008[v_l_id_132983] = id(v__132997); \n        }\n        /* end map_seq */\n        v_l_id_132983 = atomic_inc(&(v_work_idx_10690)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_132986 = get_local_id(0); \n      float v_tmp_133078 = 0.0f; \n      v__105970 = v_tmp_133078; \n      /* reduce_seq */\n      for (int v_i_132987 = 0; v_i_132987 < v_MWidthC_1; v_i_132987 = (1 + v_i_132987)) {\n        v__105970 = add(v__105970, v__133008[(v_i_132987 + (v_MWidthC_1 * v_l_id_132986))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_132988 = 0; \n        v__133013[v_wg_id_132982] = doubleMultiplyAdd(v__105970, v__132993, v__132992[v_wg_id_132982], v__132994); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__132989",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132990",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__132991",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__132992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__132993",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__132994",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__133013",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__133008",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}