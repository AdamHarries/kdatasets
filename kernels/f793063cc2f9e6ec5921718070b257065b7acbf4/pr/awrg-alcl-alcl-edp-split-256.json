{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__131130, const global float* restrict v__131131, const global float* restrict v__131132, const global float* restrict v__131133, float v__131134, float v__131135, global float* v__131155, global int* v__131137, local float* v__131150, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__131139; \n  float v__131141; \n  float v__105970; \n  /* Private Memory */\n  float v__131143_0;\n  \n  float v__131145_0;\n  \n  int v__131149_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10542 = v__131137; \n    local int v_w_id_131123; \n    if (get_local_id(0) == 0) {\n      v_w_id_131123 = atomic_inc(v_work_idx_10542); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_131123 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10540; \n        v_work_idx_10540 = 0; \n        int v_l_id_131124 = atomic_inc(&(v_work_idx_10540)); \n        while((v_l_id_131124 < v_MWidthC_1)){\n          float v_tmp_131209 = 0.0f; \n          v__131139 = v_tmp_131209; \n          /* reduce_while_seq */\n          for (int v_i_131125 = 0; v_i_131125 < 256; v_i_131125 = (1 + v_i_131125)) {\n            v__131149_0 = check(v__131139, v__131130[(v_l_id_131124 + (256 * v_MWidthC_1 * v_w_id_131123) + (v_MWidthC_1 * v_i_131125))]); \n            if (v__131149_0) {\n            } else {\n              break;\n            }\n            float v_tmp_131210 = 0.0f; \n            v__131141 = v_tmp_131210; \n            int v_index_131211 = v__131130[(v_l_id_131124 + (256 * v_MWidthC_1 * v_w_id_131123) + (v_MWidthC_1 * v_i_131125))]; \n            if (v_index_131211 < 0) {\n              v__131143_0 = v__131141; \n            } else {\n              if (v_index_131211 >= v_VLength_3) {\n                v__131143_0 = v__131141; \n              } else {\n                v__131143_0 = v__131132[v_index_131211]; \n              }\n            }\n            v__131145_0 = mult(v__131143_0, v__131131[(v_l_id_131124 + (256 * v_MWidthC_1 * v_w_id_131123) + (v_MWidthC_1 * v_i_131125))]); \n            v__131139 = add(v__131145_0, v__131139); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_131126 = 0; \n            v__131150[v_l_id_131124] = id(v__131139); \n          }\n          /* end map_seq */\n          v_l_id_131124 = atomic_inc(&(v_work_idx_10540)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_10535; \n        v_work_idx_10535 = 0; \n        int v_l_id_131127 = atomic_inc(&(v_work_idx_10535)); \n        while((v_l_id_131127 < 1)){\n          float v_tmp_131214 = 0.0f; \n          v__105970 = v_tmp_131214; \n          /* reduce_seq */\n          for (int v_i_131128 = 0; v_i_131128 < v_MWidthC_1; v_i_131128 = (1 + v_i_131128)) {\n            v__105970 = add(v__105970, v__131150[(v_i_131128 + (v_MWidthC_1 * v_l_id_131127))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_131129 = 0; \n            v__131155[v_w_id_131123] = doubleMultiplyAdd(v__105970, v__131134, v__131133[v_w_id_131123], v__131135); \n          }\n          /* end map_seq */\n          v_l_id_131127 = atomic_inc(&(v_work_idx_10535)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_131123 = atomic_inc(v_work_idx_10542); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__131130",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131131",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__131132",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__131133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__131134",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__131135",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__131137",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__131155",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__131150",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}