{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75913, const global float* restrict v__75914, const global float* restrict v__75915, const global float* restrict v__75916, float v__75917, float v__75918, global float* v__75937, local float* v__75932, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75921; \n  float v__75923; \n  float v__75402; \n  /* Private Memory */\n  float v__75925_0;\n  \n  float v__75927_0;\n  \n  int v__75931_0;\n  \n  for (int v_wg_id_75906 = get_group_id(0); v_wg_id_75906 < v_MHeight_2; v_wg_id_75906 = (v_wg_id_75906 + get_num_groups(0))) {\n    for (int v_l_id_75907 = get_local_id(0); v_l_id_75907 < v_MWidthC_1; v_l_id_75907 = (v_l_id_75907 + get_local_size(0))) {\n      float v_tmp_76001 = 3.4028235E38f; \n      v__75921 = v_tmp_76001; \n      /* reduce_while_seq */\n      for (int v_i_75908 = 0; v_i_75908 < 8; v_i_75908 = (1 + v_i_75908)) {\n        v__75931_0 = check(v__75921, v__75913[(v_l_id_75907 + (8 * v_MWidthC_1 * v_wg_id_75906) + (v_MWidthC_1 * v_i_75908))]); \n        if (v__75931_0) {\n        } else {\n          break;\n        }\n        float v_tmp_76002 = 3.4028235E38f; \n        v__75923 = v_tmp_76002; \n        int v_index_76003 = v__75913[(v_l_id_75907 + (8 * v_MWidthC_1 * v_wg_id_75906) + (v_MWidthC_1 * v_i_75908))]; \n        if (v_index_76003 < 0) {\n          v__75925_0 = v__75923; \n        } else {\n          if (v_index_76003 >= v_VLength_3) {\n            v__75925_0 = v__75923; \n          } else {\n            v__75925_0 = v__75915[v_index_76003]; \n          }\n        }\n        v__75927_0 = absadd(v__75925_0, v__75914[(v_l_id_75907 + (8 * v_MWidthC_1 * v_wg_id_75906) + (v_MWidthC_1 * v_i_75908))]); \n        v__75921 = clmin(v__75927_0, v__75921); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_75909 = 0; \n        v__75932[v_l_id_75907] = id(v__75921); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5586; \n      v_work_idx_5586 = 0; \n      int v_l_id_75910 = atomic_inc(&(v_work_idx_5586)); \n      while((v_l_id_75910 < 1)){\n        float v_tmp_76006 = 3.4028235E38f; \n        v__75402 = v_tmp_76006; \n        /* reduce_seq */\n        for (int v_i_75911 = 0; v_i_75911 < v_MWidthC_1; v_i_75911 = (1 + v_i_75911)) {\n          v__75402 = clmin(v__75402, v__75932[(v_i_75911 + (v_MWidthC_1 * v_l_id_75910))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75912 = 0; \n          v__75937[v_wg_id_75906] = doubleMultiplyAdd(v__75402, v__75917, v__75916[v_wg_id_75906], v__75918); \n        }\n        /* end map_seq */\n        v_l_id_75910 = atomic_inc(&(v_work_idx_5586)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__75913",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75914",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75915",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75916",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75917",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75918",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75932",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}