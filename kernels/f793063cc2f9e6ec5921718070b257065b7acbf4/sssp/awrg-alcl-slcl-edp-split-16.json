{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__83105, const global float* restrict v__83106, const global float* restrict v__83107, const global float* restrict v__83108, float v__83109, float v__83110, global float* v__83130, global int* v__83112, local float* v__83125, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83114; \n  float v__83116; \n  float v__75402; \n  /* Private Memory */\n  float v__83118_0;\n  \n  float v__83120_0;\n  \n  int v__83124_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6241 = v__83112; \n    local int v_w_id_83098; \n    if (get_local_id(0) == 0) {\n      v_w_id_83098 = atomic_inc(v_work_idx_6241); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83098 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6239; \n        v_work_idx_6239 = 0; \n        int v_l_id_83099 = atomic_inc(&(v_work_idx_6239)); \n        while((v_l_id_83099 < v_MWidthC_1)){\n          float v_tmp_83188 = 3.4028235E38f; \n          v__83114 = v_tmp_83188; \n          /* reduce_while_seq */\n          for (int v_i_83100 = 0; v_i_83100 < 16; v_i_83100 = (1 + v_i_83100)) {\n            v__83124_0 = check(v__83114, v__83105[(v_l_id_83099 + (16 * v_MWidthC_1 * v_w_id_83098) + (v_MWidthC_1 * v_i_83100))]); \n            if (v__83124_0) {\n            } else {\n              break;\n            }\n            float v_tmp_83189 = 3.4028235E38f; \n            v__83116 = v_tmp_83189; \n            int v_index_83190 = v__83105[(v_l_id_83099 + (16 * v_MWidthC_1 * v_w_id_83098) + (v_MWidthC_1 * v_i_83100))]; \n            if (v_index_83190 < 0) {\n              v__83118_0 = v__83116; \n            } else {\n              if (v_index_83190 >= v_VLength_3) {\n                v__83118_0 = v__83116; \n              } else {\n                v__83118_0 = v__83107[v_index_83190]; \n              }\n            }\n            v__83120_0 = absadd(v__83118_0, v__83106[(v_l_id_83099 + (16 * v_MWidthC_1 * v_w_id_83098) + (v_MWidthC_1 * v_i_83100))]); \n            v__83114 = clmin(v__83120_0, v__83114); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83101 = 0; \n            v__83125[v_l_id_83099] = id(v__83114); \n          }\n          /* end map_seq */\n          v_l_id_83099 = atomic_inc(&(v_work_idx_6239)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83102 = get_local_id(0); \n        float v_tmp_83193 = 3.4028235E38f; \n        v__75402 = v_tmp_83193; \n        /* reduce_seq */\n        for (int v_i_83103 = 0; v_i_83103 < v_MWidthC_1; v_i_83103 = (1 + v_i_83103)) {\n          v__75402 = clmin(v__75402, v__83125[(v_i_83103 + (v_MWidthC_1 * v_l_id_83102))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83104 = 0; \n          v__83130[v_w_id_83098] = doubleMultiplyAdd(v__75402, v__83109, v__83108[v_w_id_83098], v__83110); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83098 = atomic_inc(v_work_idx_6241); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83105",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83106",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83107",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83109",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83110",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83112",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83130",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83125",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}