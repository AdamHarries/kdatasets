{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__83394, const global float* restrict v__83395, const global float* restrict v__83396, const global float* restrict v__83397, float v__83398, float v__83399, global float* v__83419, global int* v__83401, local float* v__83414, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83403; \n  float v__83405; \n  float v__75402; \n  /* Private Memory */\n  float v__83407_0;\n  \n  float v__83409_0;\n  \n  int v__83413_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6275 = v__83401; \n    local int v_w_id_83387; \n    if (get_local_id(0) == 0) {\n      v_w_id_83387 = atomic_inc(v_work_idx_6275); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83387 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6273; \n        v_work_idx_6273 = 0; \n        int v_l_id_83388 = atomic_inc(&(v_work_idx_6273)); \n        while((v_l_id_83388 < v_MWidthC_1)){\n          float v_tmp_83473 = 3.4028235E38f; \n          v__83403 = v_tmp_83473; \n          /* reduce_while_seq */\n          for (int v_i_83389 = 0; v_i_83389 < 16; v_i_83389 = (1 + v_i_83389)) {\n            v__83413_0 = check(v__83403, v__83394[(v_l_id_83388 + (16 * v_MWidthC_1 * v_w_id_83387) + (v_MWidthC_1 * v_i_83389))]); \n            if (v__83413_0) {\n            } else {\n              break;\n            }\n            float v_tmp_83474 = 3.4028235E38f; \n            v__83405 = v_tmp_83474; \n            int v_index_83475 = v__83394[(v_l_id_83388 + (16 * v_MWidthC_1 * v_w_id_83387) + (v_MWidthC_1 * v_i_83389))]; \n            if (v_index_83475 < 0) {\n              v__83407_0 = v__83405; \n            } else {\n              if (v_index_83475 >= v_VLength_3) {\n                v__83407_0 = v__83405; \n              } else {\n                v__83407_0 = v__83396[v_index_83475]; \n              }\n            }\n            v__83409_0 = absadd(v__83407_0, v__83395[(v_l_id_83388 + (16 * v_MWidthC_1 * v_w_id_83387) + (v_MWidthC_1 * v_i_83389))]); \n            v__83403 = clmin(v__83409_0, v__83403); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83390 = 0; \n            v__83414[v_l_id_83388] = id(v__83403); \n          }\n          /* end map_seq */\n          v_l_id_83388 = atomic_inc(&(v_work_idx_6273)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6268; \n        v_work_idx_6268 = 0; \n        int v_l_id_83391 = atomic_inc(&(v_work_idx_6268)); \n        while((v_l_id_83391 < 1)){\n          float v_tmp_83478 = 3.4028235E38f; \n          v__75402 = v_tmp_83478; \n          /* reduce_seq */\n          for (int v_i_83392 = 0; v_i_83392 < v_MWidthC_1; v_i_83392 = (1 + v_i_83392)) {\n            v__75402 = clmin(v__75402, v__83414[(v_i_83392 + (v_MWidthC_1 * v_l_id_83391))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83393 = 0; \n            v__83419[v_w_id_83387] = doubleMultiplyAdd(v__75402, v__83398, v__83397[v_w_id_83387], v__83399); \n          }\n          /* end map_seq */\n          v_l_id_83391 = atomic_inc(&(v_work_idx_6268)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83387 = atomic_inc(v_work_idx_6275); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83394",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83395",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83396",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83398",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83399",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83401",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83414",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}