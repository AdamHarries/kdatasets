{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85790, const global float* restrict v__85791, const global float* restrict v__85792, const global float* restrict v__85793, float v__85794, float v__85795, global float* v__85811, global int* v__85797, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85798; \n  float v__85801; \n  /* Private Memory */\n  float v__85803_0;\n  \n  float v__85805_0;\n  \n  int v__85809_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6474 = v__85797; \n    local int v_w_id_85786; \n    if (get_local_id(0) == 0) {\n      v_w_id_85786 = atomic_inc(v_work_idx_6474); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_85786 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_85787 = get_local_id(0); v_l_id_85787 < 32; v_l_id_85787 = (v_l_id_85787 + get_local_size(0))) {\n        float v_tmp_85858 = 3.4028235E38f; \n        v__85798 = v_tmp_85858; \n        /* reduce_while_seq */\n        for (int v_i_85788 = 0; v_i_85788 < v_MWidthC_1; v_i_85788 = (1 + v_i_85788)) {\n          v__85809_0 = check(v__85798, v__85790[(v_i_85788 + (32 * v_MWidthC_1 * v_w_id_85786) + (v_MWidthC_1 * v_l_id_85787))]); \n          if (v__85809_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85859 = 3.4028235E38f; \n          v__85801 = v_tmp_85859; \n          int v_index_85860 = v__85790[(v_i_85788 + (32 * v_MWidthC_1 * v_w_id_85786) + (v_MWidthC_1 * v_l_id_85787))]; \n          if (v_index_85860 < 0) {\n            v__85803_0 = v__85801; \n          } else {\n            if (v_index_85860 >= v_VLength_3) {\n              v__85803_0 = v__85801; \n            } else {\n              v__85803_0 = v__85792[v_index_85860]; \n            }\n          }\n          v__85805_0 = absadd(v__85803_0, v__85791[(v_i_85788 + (32 * v_MWidthC_1 * v_w_id_85786) + (v_MWidthC_1 * v_l_id_85787))]); \n          v__85798 = clmin(v__85805_0, v__85798); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85789 = 0; \n          v__85811[(v_l_id_85787 + (32 * v_w_id_85786))] = doubleMultiplyAdd(v__85798, v__85794, v__85793[(v_l_id_85787 + (32 * v_w_id_85786))], v__85795); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_85786 = atomic_inc(v_work_idx_6474); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85790",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85792",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85793",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85794",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85795",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85797",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__85811",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}