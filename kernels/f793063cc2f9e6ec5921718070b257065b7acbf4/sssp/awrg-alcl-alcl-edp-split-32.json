{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__87686, const global float* restrict v__87687, const global float* restrict v__87688, const global float* restrict v__87689, float v__87690, float v__87691, global float* v__87711, global int* v__87693, local float* v__87706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87695; \n  float v__87697; \n  float v__75402; \n  /* Private Memory */\n  float v__87699_0;\n  \n  float v__87701_0;\n  \n  int v__87705_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6659 = v__87693; \n    local int v_w_id_87679; \n    if (get_local_id(0) == 0) {\n      v_w_id_87679 = atomic_inc(v_work_idx_6659); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87679 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6657; \n        v_work_idx_6657 = 0; \n        int v_l_id_87680 = atomic_inc(&(v_work_idx_6657)); \n        while((v_l_id_87680 < v_MWidthC_1)){\n          float v_tmp_87765 = 3.4028235E38f; \n          v__87695 = v_tmp_87765; \n          /* reduce_while_seq */\n          for (int v_i_87681 = 0; v_i_87681 < 32; v_i_87681 = (1 + v_i_87681)) {\n            v__87705_0 = check(v__87695, v__87686[(v_l_id_87680 + (32 * v_MWidthC_1 * v_w_id_87679) + (v_MWidthC_1 * v_i_87681))]); \n            if (v__87705_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87766 = 3.4028235E38f; \n            v__87697 = v_tmp_87766; \n            int v_index_87767 = v__87686[(v_l_id_87680 + (32 * v_MWidthC_1 * v_w_id_87679) + (v_MWidthC_1 * v_i_87681))]; \n            if (v_index_87767 < 0) {\n              v__87699_0 = v__87697; \n            } else {\n              if (v_index_87767 >= v_VLength_3) {\n                v__87699_0 = v__87697; \n              } else {\n                v__87699_0 = v__87688[v_index_87767]; \n              }\n            }\n            v__87701_0 = absadd(v__87699_0, v__87687[(v_l_id_87680 + (32 * v_MWidthC_1 * v_w_id_87679) + (v_MWidthC_1 * v_i_87681))]); \n            v__87695 = clmin(v__87701_0, v__87695); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87682 = 0; \n            v__87706[v_l_id_87680] = id(v__87695); \n          }\n          /* end map_seq */\n          v_l_id_87680 = atomic_inc(&(v_work_idx_6657)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6652; \n        v_work_idx_6652 = 0; \n        int v_l_id_87683 = atomic_inc(&(v_work_idx_6652)); \n        while((v_l_id_87683 < 1)){\n          float v_tmp_87770 = 3.4028235E38f; \n          v__75402 = v_tmp_87770; \n          /* reduce_seq */\n          for (int v_i_87684 = 0; v_i_87684 < v_MWidthC_1; v_i_87684 = (1 + v_i_87684)) {\n            v__75402 = clmin(v__75402, v__87706[(v_i_87684 + (v_MWidthC_1 * v_l_id_87683))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87685 = 0; \n            v__87711[v_w_id_87679] = doubleMultiplyAdd(v__75402, v__87690, v__87689[v_w_id_87679], v__87691); \n          }\n          /* end map_seq */\n          v_l_id_87683 = atomic_inc(&(v_work_idx_6652)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87679 = atomic_inc(v_work_idx_6659); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87686",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87687",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87688",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87690",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87691",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87693",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}