{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__94129, const global float* restrict v__94130, const global float* restrict v__94131, const global float* restrict v__94132, float v__94133, float v__94134, global float* v__94153, local float* v__94148, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94137; \n  float v__94139; \n  float v__75402; \n  /* Private Memory */\n  float v__94141_0;\n  \n  float v__94143_0;\n  \n  int v__94147_0;\n  \n  for (int v_wg_id_94122 = get_group_id(0); v_wg_id_94122 < v_MHeight_2; v_wg_id_94122 = (v_wg_id_94122 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7222; \n      v_work_idx_7222 = 0; \n      int v_l_id_94123 = atomic_inc(&(v_work_idx_7222)); \n      while((v_l_id_94123 < v_MWidthC_1)){\n        float v_tmp_94209 = 3.4028235E38f; \n        v__94137 = v_tmp_94209; \n        /* reduce_while_seq */\n        for (int v_i_94124 = 0; v_i_94124 < 128; v_i_94124 = (1 + v_i_94124)) {\n          v__94147_0 = check(v__94137, v__94129[(v_l_id_94123 + (128 * v_MWidthC_1 * v_wg_id_94122) + (v_MWidthC_1 * v_i_94124))]); \n          if (v__94147_0) {\n          } else {\n            break;\n          }\n          float v_tmp_94210 = 3.4028235E38f; \n          v__94139 = v_tmp_94210; \n          int v_index_94211 = v__94129[(v_l_id_94123 + (128 * v_MWidthC_1 * v_wg_id_94122) + (v_MWidthC_1 * v_i_94124))]; \n          if (v_index_94211 < 0) {\n            v__94141_0 = v__94139; \n          } else {\n            if (v_index_94211 >= v_VLength_3) {\n              v__94141_0 = v__94139; \n            } else {\n              v__94141_0 = v__94131[v_index_94211]; \n            }\n          }\n          v__94143_0 = absadd(v__94141_0, v__94130[(v_l_id_94123 + (128 * v_MWidthC_1 * v_wg_id_94122) + (v_MWidthC_1 * v_i_94124))]); \n          v__94137 = clmin(v__94143_0, v__94137); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94125 = 0; \n          v__94148[v_l_id_94123] = id(v__94137); \n        }\n        /* end map_seq */\n        v_l_id_94123 = atomic_inc(&(v_work_idx_7222)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7217; \n      v_work_idx_7217 = 0; \n      int v_l_id_94126 = atomic_inc(&(v_work_idx_7217)); \n      while((v_l_id_94126 < 1)){\n        float v_tmp_94214 = 3.4028235E38f; \n        v__75402 = v_tmp_94214; \n        /* reduce_seq */\n        for (int v_i_94127 = 0; v_i_94127 < v_MWidthC_1; v_i_94127 = (1 + v_i_94127)) {\n          v__75402 = clmin(v__75402, v__94148[(v_i_94127 + (v_MWidthC_1 * v_l_id_94126))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94128 = 0; \n          v__94153[v_wg_id_94122] = doubleMultiplyAdd(v__75402, v__94133, v__94132[v_wg_id_94122], v__94134); \n        }\n        /* end map_seq */\n        v_l_id_94126 = atomic_inc(&(v_work_idx_7217)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94129",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94130",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94131",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94132",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94133",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94134",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94148",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}