{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103711, const global float* restrict v__103712, const global float* restrict v__103713, const global float* restrict v__103714, float v__103715, float v__103716, global float* v__103734, global int* v__103718, local float* v__103729, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103720; \n  float v__103722; \n  float v__75402; \n  /* Private Memory */\n  float v__103724_0;\n  \n  float v__103726_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8077 = v__103718; \n    local int v_w_id_103704; \n    if (get_local_id(0) == 0) {\n      v_w_id_103704 = atomic_inc(v_work_idx_8077); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103704 < v_MHeight_2)){\n      for (int v_l_id_103705 = get_local_id(0); v_l_id_103705 < v_MWidthC_1; v_l_id_103705 = (v_l_id_103705 + get_local_size(0))) {\n        float v_tmp_103793 = 3.4028235E38f; \n        v__103720 = v_tmp_103793; \n        /* reduce_seq */\n        for (int v_i_103706 = 0; v_i_103706 < 512; v_i_103706 = (1 + v_i_103706)) {\n          float v_tmp_103794 = 3.4028235E38f; \n          v__103722 = v_tmp_103794; \n          int v_index_103795 = v__103711[(v_l_id_103705 + (512 * v_MWidthC_1 * v_w_id_103704) + (v_MWidthC_1 * v_i_103706))]; \n          if (v_index_103795 < 0) {\n            v__103724_0 = v__103722; \n          } else {\n            if (v_index_103795 >= v_VLength_3) {\n              v__103724_0 = v__103722; \n            } else {\n              v__103724_0 = v__103713[v_index_103795]; \n            }\n          }\n          v__103726_0 = absadd(v__103724_0, v__103712[(v_l_id_103705 + (512 * v_MWidthC_1 * v_w_id_103704) + (v_MWidthC_1 * v_i_103706))]); \n          v__103720 = clmin(v__103726_0, v__103720); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103707 = 0; \n          v__103729[v_l_id_103705] = id(v__103720); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8071; \n        v_work_idx_8071 = 0; \n        int v_l_id_103708 = atomic_inc(&(v_work_idx_8071)); \n        while((v_l_id_103708 < 1)){\n          float v_tmp_103798 = 3.4028235E38f; \n          v__75402 = v_tmp_103798; \n          /* reduce_seq */\n          for (int v_i_103709 = 0; v_i_103709 < v_MWidthC_1; v_i_103709 = (1 + v_i_103709)) {\n            v__75402 = clmin(v__75402, v__103729[(v_i_103709 + (v_MWidthC_1 * v_l_id_103708))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103710 = 0; \n            v__103734[v_w_id_103704] = doubleMultiplyAdd(v__75402, v__103715, v__103714[v_w_id_103704], v__103716); \n          }\n          /* end map_seq */\n          v_l_id_103708 = atomic_inc(&(v_work_idx_8071)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103704 = atomic_inc(v_work_idx_8077); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__103711",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103712",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103713",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103715",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103716",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103718",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103729",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}