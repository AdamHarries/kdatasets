{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__86543, const global float* restrict v__86544, const global float* restrict v__86545, const global float* restrict v__86546, float v__86547, float v__86548, global float* v__86566, global int* v__86550, local float* v__86561, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86552; \n  float v__86554; \n  float v__75402; \n  /* Private Memory */\n  float v__86556_0;\n  \n  float v__86558_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6541 = v__86550; \n    local int v_w_id_86536; \n    if (get_local_id(0) == 0) {\n      v_w_id_86536 = atomic_inc(v_work_idx_6541); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86536 < v_MHeight_2)){\n      for (int v_l_id_86537 = get_local_id(0); v_l_id_86537 < v_MWidthC_1; v_l_id_86537 = (v_l_id_86537 + get_local_size(0))) {\n        float v_tmp_86625 = 3.4028235E38f; \n        v__86552 = v_tmp_86625; \n        /* reduce_seq */\n        for (int v_i_86538 = 0; v_i_86538 < 32; v_i_86538 = (1 + v_i_86538)) {\n          float v_tmp_86626 = 3.4028235E38f; \n          v__86554 = v_tmp_86626; \n          int v_index_86627 = v__86543[(v_l_id_86537 + (32 * v_MWidthC_1 * v_w_id_86536) + (v_MWidthC_1 * v_i_86538))]; \n          if (v_index_86627 < 0) {\n            v__86556_0 = v__86554; \n          } else {\n            if (v_index_86627 >= v_VLength_3) {\n              v__86556_0 = v__86554; \n            } else {\n              v__86556_0 = v__86545[v_index_86627]; \n            }\n          }\n          v__86558_0 = absadd(v__86556_0, v__86544[(v_l_id_86537 + (32 * v_MWidthC_1 * v_w_id_86536) + (v_MWidthC_1 * v_i_86538))]); \n          v__86552 = clmin(v__86558_0, v__86552); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86539 = 0; \n          v__86561[v_l_id_86537] = id(v__86552); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6535; \n        v_work_idx_6535 = 0; \n        int v_l_id_86540 = atomic_inc(&(v_work_idx_6535)); \n        while((v_l_id_86540 < 1)){\n          float v_tmp_86630 = 3.4028235E38f; \n          v__75402 = v_tmp_86630; \n          /* reduce_seq */\n          for (int v_i_86541 = 0; v_i_86541 < v_MWidthC_1; v_i_86541 = (1 + v_i_86541)) {\n            v__75402 = clmin(v__75402, v__86561[(v_i_86541 + (v_MWidthC_1 * v_l_id_86540))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86542 = 0; \n            v__86566[v_w_id_86536] = doubleMultiplyAdd(v__75402, v__86547, v__86546[v_w_id_86536], v__86548); \n          }\n          /* end map_seq */\n          v_l_id_86540 = atomic_inc(&(v_work_idx_6535)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86536 = atomic_inc(v_work_idx_6541); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86543",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86544",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86545",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86546",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86547",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86548",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86550",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86566",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86561",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}