{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__89743, const global float* restrict v__89744, const global float* restrict v__89745, const global float* restrict v__89746, float v__89747, float v__89748, global float* v__89765, local float* v__89760, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89751; \n  float v__89753; \n  float v__75402; \n  /* Private Memory */\n  float v__89755_0;\n  \n  float v__89757_0;\n  \n  for (int v_wg_id_89736 = get_group_id(0); v_wg_id_89736 < v_MHeight_2; v_wg_id_89736 = (v_wg_id_89736 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6828; \n      v_work_idx_6828 = 0; \n      int v_l_id_89737 = atomic_inc(&(v_work_idx_6828)); \n      while((v_l_id_89737 < v_MWidthC_1)){\n        float v_tmp_89818 = 3.4028235E38f; \n        v__89751 = v_tmp_89818; \n        /* reduce_seq */\n        for (int v_i_89738 = 0; v_i_89738 < 64; v_i_89738 = (1 + v_i_89738)) {\n          float v_tmp_89819 = 3.4028235E38f; \n          v__89753 = v_tmp_89819; \n          int v_index_89820 = v__89743[(v_l_id_89737 + (64 * v_MWidthC_1 * v_wg_id_89736) + (v_MWidthC_1 * v_i_89738))]; \n          if (v_index_89820 < 0) {\n            v__89755_0 = v__89753; \n          } else {\n            if (v_index_89820 >= v_VLength_3) {\n              v__89755_0 = v__89753; \n            } else {\n              v__89755_0 = v__89745[v_index_89820]; \n            }\n          }\n          v__89757_0 = absadd(v__89755_0, v__89744[(v_l_id_89737 + (64 * v_MWidthC_1 * v_wg_id_89736) + (v_MWidthC_1 * v_i_89738))]); \n          v__89751 = clmin(v__89757_0, v__89751); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89739 = 0; \n          v__89760[v_l_id_89737] = id(v__89751); \n        }\n        /* end map_seq */\n        v_l_id_89737 = atomic_inc(&(v_work_idx_6828)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6823; \n      v_work_idx_6823 = 0; \n      int v_l_id_89740 = atomic_inc(&(v_work_idx_6823)); \n      while((v_l_id_89740 < 1)){\n        float v_tmp_89823 = 3.4028235E38f; \n        v__75402 = v_tmp_89823; \n        /* reduce_seq */\n        for (int v_i_89741 = 0; v_i_89741 < v_MWidthC_1; v_i_89741 = (1 + v_i_89741)) {\n          v__75402 = clmin(v__75402, v__89760[(v_i_89741 + (v_MWidthC_1 * v_l_id_89740))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89742 = 0; \n          v__89765[v_wg_id_89736] = doubleMultiplyAdd(v__75402, v__89747, v__89746[v_wg_id_89736], v__89748); \n        }\n        /* end map_seq */\n        v_l_id_89740 = atomic_inc(&(v_work_idx_6823)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89743",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89744",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89745",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89746",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89747",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89748",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__89765",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89760",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}