{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78060, const global float* restrict v__78061, const global float* restrict v__78062, const global float* restrict v__78063, float v__78064, float v__78065, global float* v__78085, global int* v__78067, local float* v__78080, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78069; \n  float v__78071; \n  float v__75402; \n  /* Private Memory */\n  float v__78073_0;\n  \n  float v__78075_0;\n  \n  int v__78079_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5783 = v__78067; \n    local int v_w_id_78053; \n    if (get_local_id(0) == 0) {\n      v_w_id_78053 = atomic_inc(v_work_idx_5783); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78053 < v_MHeight_2)){\n      for (int v_l_id_78054 = get_local_id(0); v_l_id_78054 < v_MWidthC_1; v_l_id_78054 = (v_l_id_78054 + get_local_size(0))) {\n        float v_tmp_78147 = 3.4028235E38f; \n        v__78069 = v_tmp_78147; \n        /* reduce_while_seq */\n        for (int v_i_78055 = 0; v_i_78055 < 8; v_i_78055 = (1 + v_i_78055)) {\n          v__78079_0 = check(v__78069, v__78060[(v_l_id_78054 + (8 * v_MWidthC_1 * v_w_id_78053) + (v_MWidthC_1 * v_i_78055))]); \n          if (v__78079_0) {\n          } else {\n            break;\n          }\n          float v_tmp_78148 = 3.4028235E38f; \n          v__78071 = v_tmp_78148; \n          int v_index_78149 = v__78060[(v_l_id_78054 + (8 * v_MWidthC_1 * v_w_id_78053) + (v_MWidthC_1 * v_i_78055))]; \n          if (v_index_78149 < 0) {\n            v__78073_0 = v__78071; \n          } else {\n            if (v_index_78149 >= v_VLength_3) {\n              v__78073_0 = v__78071; \n            } else {\n              v__78073_0 = v__78062[v_index_78149]; \n            }\n          }\n          v__78075_0 = absadd(v__78073_0, v__78061[(v_l_id_78054 + (8 * v_MWidthC_1 * v_w_id_78053) + (v_MWidthC_1 * v_i_78055))]); \n          v__78069 = clmin(v__78075_0, v__78069); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78056 = 0; \n          v__78080[v_l_id_78054] = id(v__78069); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5777; \n        v_work_idx_5777 = 0; \n        int v_l_id_78057 = atomic_inc(&(v_work_idx_5777)); \n        while((v_l_id_78057 < 1)){\n          float v_tmp_78152 = 3.4028235E38f; \n          v__75402 = v_tmp_78152; \n          /* reduce_seq */\n          for (int v_i_78058 = 0; v_i_78058 < v_MWidthC_1; v_i_78058 = (1 + v_i_78058)) {\n            v__75402 = clmin(v__75402, v__78080[(v_i_78058 + (v_MWidthC_1 * v_l_id_78057))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78059 = 0; \n            v__78085[v_w_id_78053] = doubleMultiplyAdd(v__75402, v__78064, v__78063[v_w_id_78053], v__78065); \n          }\n          /* end map_seq */\n          v_l_id_78057 = atomic_inc(&(v_work_idx_5777)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78053 = atomic_inc(v_work_idx_5783); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__78060",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78061",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78062",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78064",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78065",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78067",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78080",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}