{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__93739, const global float* restrict v__93740, const global float* restrict v__93741, const global float* restrict v__93742, float v__93743, float v__93744, global float* v__93761, local float* v__93756, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93747; \n  float v__93749; \n  float v__75402; \n  /* Private Memory */\n  float v__93751_0;\n  \n  float v__93753_0;\n  \n  for (int v_wg_id_93732 = get_group_id(0); v_wg_id_93732 < v_MHeight_2; v_wg_id_93732 = (v_wg_id_93732 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7182; \n      v_work_idx_7182 = 0; \n      int v_l_id_93733 = atomic_inc(&(v_work_idx_7182)); \n      while((v_l_id_93733 < v_MWidthC_1)){\n        float v_tmp_93818 = 3.4028235E38f; \n        v__93747 = v_tmp_93818; \n        /* reduce_seq */\n        for (int v_i_93734 = 0; v_i_93734 < 128; v_i_93734 = (1 + v_i_93734)) {\n          float v_tmp_93819 = 3.4028235E38f; \n          v__93749 = v_tmp_93819; \n          int v_index_93820 = v__93739[(v_l_id_93733 + (128 * v_MWidthC_1 * v_wg_id_93732) + (v_MWidthC_1 * v_i_93734))]; \n          if (v_index_93820 < 0) {\n            v__93751_0 = v__93749; \n          } else {\n            if (v_index_93820 >= v_VLength_3) {\n              v__93751_0 = v__93749; \n            } else {\n              v__93751_0 = v__93741[v_index_93820]; \n            }\n          }\n          v__93753_0 = absadd(v__93751_0, v__93740[(v_l_id_93733 + (128 * v_MWidthC_1 * v_wg_id_93732) + (v_MWidthC_1 * v_i_93734))]); \n          v__93747 = clmin(v__93753_0, v__93747); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93735 = 0; \n          v__93756[v_l_id_93733] = id(v__93747); \n        }\n        /* end map_seq */\n        v_l_id_93733 = atomic_inc(&(v_work_idx_7182)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_93736 = get_local_id(0); \n      float v_tmp_93823 = 3.4028235E38f; \n      v__75402 = v_tmp_93823; \n      /* reduce_seq */\n      for (int v_i_93737 = 0; v_i_93737 < v_MWidthC_1; v_i_93737 = (1 + v_i_93737)) {\n        v__75402 = clmin(v__75402, v__93756[(v_i_93737 + (v_MWidthC_1 * v_l_id_93736))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_93738 = 0; \n        v__93761[v_wg_id_93732] = doubleMultiplyAdd(v__75402, v__93743, v__93742[v_wg_id_93732], v__93744); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93739",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93740",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93741",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93742",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93743",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93744",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__93761",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93756",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}