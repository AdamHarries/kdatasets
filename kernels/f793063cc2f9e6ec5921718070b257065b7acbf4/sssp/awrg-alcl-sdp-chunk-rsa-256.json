{
  "name" : "awrg-alcl-sdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99842, const global float* restrict v__99843, const global float* restrict v__99844, const global float* restrict v__99845, float v__99846, float v__99847, global float* v__99862, global float* v__99861, global int* v__99849, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99850; \n  float v__99853; \n  /* Private Memory */\n  float v__99855_0;\n  \n  float v__99857_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7732 = v__99849; \n    local int v_w_id_99837; \n    if (get_local_id(0) == 0) {\n      v_w_id_99837 = atomic_inc(v_work_idx_7732); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99837 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7730; \n        v_work_idx_7730 = 0; \n        int v_l_id_99838 = atomic_inc(&(v_work_idx_7730)); \n        while((v_l_id_99838 < 256)){\n          float v_tmp_99894 = 3.4028235E38f; \n          v__99850 = v_tmp_99894; \n          /* reduce_seq */\n          int v_stop_99895 = min(v__99842[(1 + (v__99842[(v_l_id_99838 + (256 * v_w_id_99837))] / 4))], ((global int*)(v__99843 + (((global int*)(v__99843))[(v_l_id_99838 + (256 * v_w_id_99837))] / 4)))[1]); \n          for (int v_i_99839 = 0; v_i_99839 < v_stop_99895; v_i_99839 = (1 + v_i_99839)) {\n            float v_tmp_99903 = 3.4028235E38f; \n            v__99853 = v_tmp_99903; \n            int v_index_99905 = v__99842[(2 + v_i_99839 + (v__99842[(v_l_id_99838 + (256 * v_w_id_99837))] / 4))]; \n            if (v_index_99905 < 0) {\n              v__99855_0 = v__99853; \n            } else {\n              if (v_index_99905 >= v_MWidthC_1) {\n                v__99855_0 = v__99853; \n              } else {\n                v__99855_0 = v__99844[v_index_99905]; \n              }\n            }\n            v__99857_0 = absadd(v__99843[(2 + v_i_99839 + (((global int*)(v__99843))[(v_l_id_99838 + (256 * v_w_id_99837))] / 4))], v__99855_0); \n            v__99850 = clmin(v__99850, v__99857_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99840 = 0; \n            v__99861[(v_l_id_99838 + (256 * v_w_id_99837))] = doubleMultiplyAdd(v__99850, v__99846, v__99845[(v_l_id_99838 + (256 * v_w_id_99837))], v__99847); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99841 = 0; \n            v__99862[(v_l_id_99838 + (256 * v_w_id_99837))] = id(v__99861[(v_l_id_99838 + (256 * v_w_id_99837))]); \n          }\n          /* end map_seq */\n          v_l_id_99838 = atomic_inc(&(v_work_idx_7730)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99837 = atomic_inc(v_work_idx_7732); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99842",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__99843",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__99844",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__99845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99846",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99847",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99849",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99862",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}