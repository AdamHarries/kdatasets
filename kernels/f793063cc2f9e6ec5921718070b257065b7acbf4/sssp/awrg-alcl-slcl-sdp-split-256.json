{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100079, const global float* restrict v__100080, const global float* restrict v__100081, const global float* restrict v__100082, float v__100083, float v__100084, global float* v__100102, global float* v__100092, global int* v__100086, local float* v__100097, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100088; \n  float v__100093; \n  float v__75402; \n  /* Private Memory */\n  float v__100090_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7757 = v__100086; \n    local int v_w_id_100071; \n    if (get_local_id(0) == 0) {\n      v_w_id_100071 = atomic_inc(v_work_idx_7757); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100071 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7755; \n        v_work_idx_7755 = 0; \n        int v_l_id_100072 = atomic_inc(&(v_work_idx_7755)); \n        while((v_l_id_100072 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100073 = 0; v_i_100073 < 256; v_i_100073 = (1 + v_i_100073)) {\n            float v_tmp_100157 = 3.4028235E38f; \n            v__100088 = v_tmp_100157; \n            int v_index_100158 = v__100079[(v_l_id_100072 + (256 * v_MWidthC_1 * v_w_id_100071) + (v_MWidthC_1 * v_i_100073))]; \n            if (v_index_100158 < 0) {\n              v__100090_0 = v__100088; \n            } else {\n              if (v_index_100158 >= v_VLength_3) {\n                v__100090_0 = v__100088; \n              } else {\n                v__100090_0 = v__100081[v_index_100158]; \n              }\n            }\n            v__100092[(255 + (256 * v_MWidthC_1 * v_w_id_100071) + (-1 * v_i_100073) + (256 * v_l_id_100072))] = absadd(v__100090_0, v__100080[(v_l_id_100072 + (256 * v_MWidthC_1 * v_w_id_100071) + (v_MWidthC_1 * v_i_100073))]); \n          }\n          /* end map_seq */\n          float v_tmp_100159 = 3.4028235E38f; \n          v__100093 = v_tmp_100159; \n          /* reduce_seq */\n          for (int v_i_100074 = 0; v_i_100074 < 256; v_i_100074 = (1 + v_i_100074)) {\n            v__100093 = clmin(v__100093, v__100092[(v_i_100074 + (256 * v_MWidthC_1 * v_w_id_100071) + (256 * v_l_id_100072))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100075 = 0; \n            v__100097[v_l_id_100072] = id(v__100093); \n          }\n          /* end map_seq */\n          v_l_id_100072 = atomic_inc(&(v_work_idx_7755)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100076 = get_local_id(0); \n        float v_tmp_100162 = 3.4028235E38f; \n        v__75402 = v_tmp_100162; \n        /* reduce_seq */\n        for (int v_i_100077 = 0; v_i_100077 < v_MWidthC_1; v_i_100077 = (1 + v_i_100077)) {\n          v__75402 = clmin(v__75402, v__100097[(v_i_100077 + (v_MWidthC_1 * v_l_id_100076))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100078 = 0; \n          v__100102[v_w_id_100071] = doubleMultiplyAdd(v__75402, v__100083, v__100082[v_w_id_100071], v__100084); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100071 = atomic_inc(v_work_idx_7757); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100079",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100080",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100081",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100083",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100084",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100092",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100086",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100097",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}