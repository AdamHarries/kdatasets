{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__92877, const global float* restrict v__92878, const global float* restrict v__92879, const global float* restrict v__92880, float v__92881, float v__92882, global float* v__92899, global float* v__92889, local float* v__92894, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92885; \n  float v__92890; \n  float v__75402; \n  /* Private Memory */\n  float v__92887_0;\n  \n  for (int v_wg_id_92869 = get_group_id(0); v_wg_id_92869 < v_MHeight_2; v_wg_id_92869 = (v_wg_id_92869 + get_num_groups(0))) {\n    for (int v_l_id_92870 = get_local_id(0); v_l_id_92870 < v_MWidthC_1; v_l_id_92870 = (v_l_id_92870 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_92871 = 0; v_i_92871 < 128; v_i_92871 = (1 + v_i_92871)) {\n        float v_tmp_92960 = 3.4028235E38f; \n        v__92885 = v_tmp_92960; \n        int v_index_92961 = v__92877[(v_l_id_92870 + (128 * v_MWidthC_1 * v_wg_id_92869) + (v_MWidthC_1 * v_i_92871))]; \n        if (v_index_92961 < 0) {\n          v__92887_0 = v__92885; \n        } else {\n          if (v_index_92961 >= v_VLength_3) {\n            v__92887_0 = v__92885; \n          } else {\n            v__92887_0 = v__92879[v_index_92961]; \n          }\n        }\n        v__92889[(127 + (128 * v_MWidthC_1 * v_wg_id_92869) + (-1 * v_i_92871) + (128 * v_l_id_92870))] = absadd(v__92887_0, v__92878[(v_l_id_92870 + (128 * v_MWidthC_1 * v_wg_id_92869) + (v_MWidthC_1 * v_i_92871))]); \n      }\n      /* end map_seq */\n      float v_tmp_92962 = 3.4028235E38f; \n      v__92890 = v_tmp_92962; \n      /* reduce_seq */\n      for (int v_i_92872 = 0; v_i_92872 < 128; v_i_92872 = (1 + v_i_92872)) {\n        v__92890 = clmin(v__92890, v__92889[(v_i_92872 + (128 * v_MWidthC_1 * v_wg_id_92869) + (128 * v_l_id_92870))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92873 = 0; \n        v__92894[v_l_id_92870] = id(v__92890); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7103; \n      v_work_idx_7103 = 0; \n      int v_l_id_92874 = atomic_inc(&(v_work_idx_7103)); \n      while((v_l_id_92874 < 1)){\n        float v_tmp_92965 = 3.4028235E38f; \n        v__75402 = v_tmp_92965; \n        /* reduce_seq */\n        for (int v_i_92875 = 0; v_i_92875 < v_MWidthC_1; v_i_92875 = (1 + v_i_92875)) {\n          v__75402 = clmin(v__75402, v__92894[(v_i_92875 + (v_MWidthC_1 * v_l_id_92874))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92876 = 0; \n          v__92899[v_wg_id_92869] = doubleMultiplyAdd(v__75402, v__92881, v__92880[v_wg_id_92869], v__92882); \n        }\n        /* end map_seq */\n        v_l_id_92874 = atomic_inc(&(v_work_idx_7103)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92877",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92878",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92879",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92881",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92882",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92889",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92899",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92894",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}