{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103812, const global float* restrict v__103813, const global float* restrict v__103814, const global float* restrict v__103815, float v__103816, float v__103817, global float* v__103837, global int* v__103819, local float* v__103832, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103821; \n  float v__103823; \n  float v__75402; \n  /* Private Memory */\n  float v__103825_0;\n  \n  float v__103827_0;\n  \n  int v__103831_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8087 = v__103819; \n    local int v_w_id_103805; \n    if (get_local_id(0) == 0) {\n      v_w_id_103805 = atomic_inc(v_work_idx_8087); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103805 < v_MHeight_2)){\n      for (int v_l_id_103806 = get_local_id(0); v_l_id_103806 < v_MWidthC_1; v_l_id_103806 = (v_l_id_103806 + get_local_size(0))) {\n        float v_tmp_103899 = 3.4028235E38f; \n        v__103821 = v_tmp_103899; \n        /* reduce_while_seq */\n        for (int v_i_103807 = 0; v_i_103807 < 512; v_i_103807 = (1 + v_i_103807)) {\n          v__103831_0 = check(v__103821, v__103812[(v_l_id_103806 + (512 * v_MWidthC_1 * v_w_id_103805) + (v_MWidthC_1 * v_i_103807))]); \n          if (v__103831_0) {\n          } else {\n            break;\n          }\n          float v_tmp_103900 = 3.4028235E38f; \n          v__103823 = v_tmp_103900; \n          int v_index_103901 = v__103812[(v_l_id_103806 + (512 * v_MWidthC_1 * v_w_id_103805) + (v_MWidthC_1 * v_i_103807))]; \n          if (v_index_103901 < 0) {\n            v__103825_0 = v__103823; \n          } else {\n            if (v_index_103901 >= v_VLength_3) {\n              v__103825_0 = v__103823; \n            } else {\n              v__103825_0 = v__103814[v_index_103901]; \n            }\n          }\n          v__103827_0 = absadd(v__103825_0, v__103813[(v_l_id_103806 + (512 * v_MWidthC_1 * v_w_id_103805) + (v_MWidthC_1 * v_i_103807))]); \n          v__103821 = clmin(v__103827_0, v__103821); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103808 = 0; \n          v__103832[v_l_id_103806] = id(v__103821); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8081; \n        v_work_idx_8081 = 0; \n        int v_l_id_103809 = atomic_inc(&(v_work_idx_8081)); \n        while((v_l_id_103809 < 1)){\n          float v_tmp_103904 = 3.4028235E38f; \n          v__75402 = v_tmp_103904; \n          /* reduce_seq */\n          for (int v_i_103810 = 0; v_i_103810 < v_MWidthC_1; v_i_103810 = (1 + v_i_103810)) {\n            v__75402 = clmin(v__75402, v__103832[(v_i_103810 + (v_MWidthC_1 * v_l_id_103809))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103811 = 0; \n            v__103837[v_w_id_103805] = doubleMultiplyAdd(v__75402, v__103816, v__103815[v_w_id_103805], v__103817); \n          }\n          /* end map_seq */\n          v_l_id_103809 = atomic_inc(&(v_work_idx_8081)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103805 = atomic_inc(v_work_idx_8087); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__103812",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103813",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103814",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103816",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103817",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103819",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103837",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103832",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}