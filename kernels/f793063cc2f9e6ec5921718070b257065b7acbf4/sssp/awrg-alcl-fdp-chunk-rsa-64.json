{
  "name" : "awrg-alcl-fdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__91336, const global float* restrict v__91337, const global float* restrict v__91338, const global float* restrict v__91339, float v__91340, float v__91341, global float* v__91356, global float* v__91355, global int* v__91343, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91344; \n  float v__91347; \n  /* Private Memory */\n  float v__91349_0;\n  \n  float v__91351_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6971 = v__91343; \n    local int v_w_id_91331; \n    if (get_local_id(0) == 0) {\n      v_w_id_91331 = atomic_inc(v_work_idx_6971); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_91331 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6969; \n        v_work_idx_6969 = 0; \n        int v_l_id_91332 = atomic_inc(&(v_work_idx_6969)); \n        while((v_l_id_91332 < 64)){\n          float v_tmp_91388 = 3.4028235E38f; \n          v__91344 = v_tmp_91388; \n          /* reduce_seq */\n          int v_stop_91389 = min(v__91336[(1 + (v__91336[(v_l_id_91332 + (64 * v_w_id_91331))] / 4))], ((global int*)(v__91337 + (((global int*)(v__91337))[(v_l_id_91332 + (64 * v_w_id_91331))] / 4)))[1]); \n          for (int v_i_91333 = 0; v_i_91333 < v_stop_91389; v_i_91333 = (1 + v_i_91333)) {\n            float v_tmp_91397 = 3.4028235E38f; \n            v__91347 = v_tmp_91397; \n            int v_index_91399 = v__91336[(2 + v_i_91333 + (v__91336[(v_l_id_91332 + (64 * v_w_id_91331))] / 4))]; \n            if (v_index_91399 < 0) {\n              v__91349_0 = v__91347; \n            } else {\n              if (v_index_91399 >= v_MWidthC_1) {\n                v__91349_0 = v__91347; \n              } else {\n                v__91349_0 = v__91338[v_index_91399]; \n              }\n            }\n            v__91351_0 = absadd(v__91337[(2 + v_i_91333 + (((global int*)(v__91337))[(v_l_id_91332 + (64 * v_w_id_91331))] / 4))], v__91349_0); \n            v__91344 = clmin(v__91344, v__91351_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91334 = 0; \n            v__91355[(v_l_id_91332 + (64 * v_w_id_91331))] = doubleMultiplyAdd(v__91344, v__91340, v__91339[(v_l_id_91332 + (64 * v_w_id_91331))], v__91341); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91335 = 0; \n            v__91356[(v_l_id_91332 + (64 * v_w_id_91331))] = id(v__91355[(v_l_id_91332 + (64 * v_w_id_91331))]); \n          }\n          /* end map_seq */\n          v_l_id_91332 = atomic_inc(&(v_work_idx_6969)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_91331 = atomic_inc(v_work_idx_6971); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91336",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91337",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91338",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__91339",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91340",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91341",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91355",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91343",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__91356",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}