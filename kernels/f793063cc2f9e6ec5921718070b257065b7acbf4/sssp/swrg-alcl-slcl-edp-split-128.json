{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__93837, const global float* restrict v__93838, const global float* restrict v__93839, const global float* restrict v__93840, float v__93841, float v__93842, global float* v__93861, local float* v__93856, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93845; \n  float v__93847; \n  float v__75402; \n  /* Private Memory */\n  float v__93849_0;\n  \n  float v__93851_0;\n  \n  int v__93855_0;\n  \n  for (int v_wg_id_93830 = get_group_id(0); v_wg_id_93830 < v_MHeight_2; v_wg_id_93830 = (v_wg_id_93830 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7191; \n      v_work_idx_7191 = 0; \n      int v_l_id_93831 = atomic_inc(&(v_work_idx_7191)); \n      while((v_l_id_93831 < v_MWidthC_1)){\n        float v_tmp_93921 = 3.4028235E38f; \n        v__93845 = v_tmp_93921; \n        /* reduce_while_seq */\n        for (int v_i_93832 = 0; v_i_93832 < 128; v_i_93832 = (1 + v_i_93832)) {\n          v__93855_0 = check(v__93845, v__93837[(v_l_id_93831 + (128 * v_MWidthC_1 * v_wg_id_93830) + (v_MWidthC_1 * v_i_93832))]); \n          if (v__93855_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93922 = 3.4028235E38f; \n          v__93847 = v_tmp_93922; \n          int v_index_93923 = v__93837[(v_l_id_93831 + (128 * v_MWidthC_1 * v_wg_id_93830) + (v_MWidthC_1 * v_i_93832))]; \n          if (v_index_93923 < 0) {\n            v__93849_0 = v__93847; \n          } else {\n            if (v_index_93923 >= v_VLength_3) {\n              v__93849_0 = v__93847; \n            } else {\n              v__93849_0 = v__93839[v_index_93923]; \n            }\n          }\n          v__93851_0 = absadd(v__93849_0, v__93838[(v_l_id_93831 + (128 * v_MWidthC_1 * v_wg_id_93830) + (v_MWidthC_1 * v_i_93832))]); \n          v__93845 = clmin(v__93851_0, v__93845); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93833 = 0; \n          v__93856[v_l_id_93831] = id(v__93845); \n        }\n        /* end map_seq */\n        v_l_id_93831 = atomic_inc(&(v_work_idx_7191)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_93834 = get_local_id(0); \n      float v_tmp_93926 = 3.4028235E38f; \n      v__75402 = v_tmp_93926; \n      /* reduce_seq */\n      for (int v_i_93835 = 0; v_i_93835 < v_MWidthC_1; v_i_93835 = (1 + v_i_93835)) {\n        v__75402 = clmin(v__75402, v__93856[(v_i_93835 + (v_MWidthC_1 * v_l_id_93834))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_93836 = 0; \n        v__93861[v_wg_id_93830] = doubleMultiplyAdd(v__75402, v__93841, v__93840[v_wg_id_93830], v__93842); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93837",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93838",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__93861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93856",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}