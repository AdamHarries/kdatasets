{
  "name" : "swrg-alcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__80684, const global float* restrict v__80685, const global float* restrict v__80686, const global float* restrict v__80687, float v__80688, float v__80689, global float* v__80703, global float* v__80702, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80691; \n  float v__80694; \n  /* Private Memory */\n  float v__80696_0;\n  \n  float v__80698_0;\n  \n  for (int v_wg_id_80679 = get_group_id(0); v_wg_id_80679 < ((v_MHeight_2)/(16)); v_wg_id_80679 = (v_wg_id_80679 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6011; \n      v_work_idx_6011 = 0; \n      int v_l_id_80680 = atomic_inc(&(v_work_idx_6011)); \n      while((v_l_id_80680 < 16)){\n        float v_tmp_80736 = 3.4028235E38f; \n        v__80691 = v_tmp_80736; \n        /* reduce_seq */\n        int v_stop_80737 = min(v__80684[(1 + (v__80684[(v_l_id_80680 + (16 * v_wg_id_80679))] / 4))], ((global int*)(v__80685 + (((global int*)(v__80685))[(v_l_id_80680 + (16 * v_wg_id_80679))] / 4)))[1]); \n        for (int v_i_80681 = 0; v_i_80681 < v_stop_80737; v_i_80681 = (1 + v_i_80681)) {\n          float v_tmp_80745 = 3.4028235E38f; \n          v__80694 = v_tmp_80745; \n          int v_index_80747 = v__80684[(2 + v_i_80681 + (v__80684[(v_l_id_80680 + (16 * v_wg_id_80679))] / 4))]; \n          if (v_index_80747 < 0) {\n            v__80696_0 = v__80694; \n          } else {\n            if (v_index_80747 >= v_MWidthC_1) {\n              v__80696_0 = v__80694; \n            } else {\n              v__80696_0 = v__80686[v_index_80747]; \n            }\n          }\n          v__80698_0 = absadd(v__80685[(2 + v_i_80681 + (((global int*)(v__80685))[(v_l_id_80680 + (16 * v_wg_id_80679))] / 4))], v__80696_0); \n          v__80691 = clmin(v__80691, v__80698_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80682 = 0; \n          v__80702[(v_l_id_80680 + (16 * v_wg_id_80679))] = doubleMultiplyAdd(v__80691, v__80688, v__80687[(v_l_id_80680 + (16 * v_wg_id_80679))], v__80689); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80683 = 0; \n          v__80703[(v_l_id_80680 + (16 * v_wg_id_80679))] = id(v__80702[(v_l_id_80680 + (16 * v_wg_id_80679))]); \n        }\n        /* end map_seq */\n        v_l_id_80680 = atomic_inc(&(v_work_idx_6011)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80684",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__80685",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__80686",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__80687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80688",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80689",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80702",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__80703",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}