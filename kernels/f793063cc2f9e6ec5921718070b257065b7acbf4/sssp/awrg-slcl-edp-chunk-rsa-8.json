{
  "name" : "awrg-slcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__77452, const global float* restrict v__77453, const global float* restrict v__77454, const global float* restrict v__77455, float v__77456, float v__77457, global float* v__77472, global float* v__77471, global int* v__77459, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77460; \n  float v__77463; \n  /* Private Memory */\n  float v__77465_0;\n  \n  float v__77467_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5724 = v__77459; \n    local int v_w_id_77447; \n    if (get_local_id(0) == 0) {\n      v_w_id_77447 = atomic_inc(v_work_idx_5724); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77447 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_77448 = get_local_id(0); v_l_id_77448 < 8; v_l_id_77448 = (v_l_id_77448 + get_local_size(0))) {\n        float v_tmp_77508 = 3.4028235E38f; \n        v__77460 = v_tmp_77508; \n        /* reduce_seq */\n        int v_stop_77509 = min(v__77452[(1 + (v__77452[(v_l_id_77448 + (8 * v_w_id_77447))] / 4))], ((global int*)(v__77453 + (((global int*)(v__77453))[(v_l_id_77448 + (8 * v_w_id_77447))] / 4)))[1]); \n        for (int v_i_77449 = 0; v_i_77449 < v_stop_77509; v_i_77449 = (1 + v_i_77449)) {\n          float v_tmp_77517 = 3.4028235E38f; \n          v__77463 = v_tmp_77517; \n          int v_index_77519 = v__77452[(2 + v_i_77449 + (v__77452[(v_l_id_77448 + (8 * v_w_id_77447))] / 4))]; \n          if (v_index_77519 < 0) {\n            v__77465_0 = v__77463; \n          } else {\n            if (v_index_77519 >= v_MWidthC_1) {\n              v__77465_0 = v__77463; \n            } else {\n              v__77465_0 = v__77454[v_index_77519]; \n            }\n          }\n          v__77467_0 = absadd(v__77453[(2 + v_i_77449 + (((global int*)(v__77453))[(v_l_id_77448 + (8 * v_w_id_77447))] / 4))], v__77465_0); \n          v__77460 = clmin(v__77460, v__77467_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77450 = 0; \n          v__77471[(v_l_id_77448 + (8 * v_w_id_77447))] = doubleMultiplyAdd(v__77460, v__77456, v__77455[(v_l_id_77448 + (8 * v_w_id_77447))], v__77457); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77451 = 0; \n          v__77472[(v_l_id_77448 + (8 * v_w_id_77447))] = id(v__77471[(v_l_id_77448 + (8 * v_w_id_77447))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_77447 = atomic_inc(v_work_idx_5724); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__77452",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__77453",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__77454",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__77455",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77456",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77457",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77459",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}