{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77747, const global float* restrict v__77748, const global float* restrict v__77749, const global float* restrict v__77750, float v__77751, float v__77752, global float* v__77772, global int* v__77754, local float* v__77767, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77756; \n  float v__77758; \n  float v__75402; \n  /* Private Memory */\n  float v__77760_0;\n  \n  float v__77762_0;\n  \n  int v__77766_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5752 = v__77754; \n    local int v_w_id_77740; \n    if (get_local_id(0) == 0) {\n      v_w_id_77740 = atomic_inc(v_work_idx_5752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77740 < v_MHeight_2)){\n      for (int v_l_id_77741 = get_local_id(0); v_l_id_77741 < v_MWidthC_1; v_l_id_77741 = (v_l_id_77741 + get_local_size(0))) {\n        float v_tmp_77838 = 3.4028235E38f; \n        v__77756 = v_tmp_77838; \n        /* reduce_while_seq */\n        for (int v_i_77742 = 0; v_i_77742 < 8; v_i_77742 = (1 + v_i_77742)) {\n          v__77766_0 = check(v__77756, v__77747[(v_l_id_77741 + (8 * v_MWidthC_1 * v_w_id_77740) + (v_MWidthC_1 * v_i_77742))]); \n          if (v__77766_0) {\n          } else {\n            break;\n          }\n          float v_tmp_77839 = 3.4028235E38f; \n          v__77758 = v_tmp_77839; \n          int v_index_77840 = v__77747[(v_l_id_77741 + (8 * v_MWidthC_1 * v_w_id_77740) + (v_MWidthC_1 * v_i_77742))]; \n          if (v_index_77840 < 0) {\n            v__77760_0 = v__77758; \n          } else {\n            if (v_index_77840 >= v_VLength_3) {\n              v__77760_0 = v__77758; \n            } else {\n              v__77760_0 = v__77749[v_index_77840]; \n            }\n          }\n          v__77762_0 = absadd(v__77760_0, v__77748[(v_l_id_77741 + (8 * v_MWidthC_1 * v_w_id_77740) + (v_MWidthC_1 * v_i_77742))]); \n          v__77756 = clmin(v__77762_0, v__77756); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77743 = 0; \n          v__77767[v_l_id_77741] = id(v__77756); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_77744 = get_local_id(0); \n        float v_tmp_77843 = 3.4028235E38f; \n        v__75402 = v_tmp_77843; \n        /* reduce_seq */\n        for (int v_i_77745 = 0; v_i_77745 < v_MWidthC_1; v_i_77745 = (1 + v_i_77745)) {\n          v__75402 = clmin(v__75402, v__77767[(v_i_77745 + (v_MWidthC_1 * v_l_id_77744))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77746 = 0; \n          v__77772[v_w_id_77740] = doubleMultiplyAdd(v__75402, v__77751, v__77750[v_w_id_77740], v__77752); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_77740 = atomic_inc(v_work_idx_5752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__77747",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77748",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77749",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77750",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77751",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77752",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77754",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77767",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}