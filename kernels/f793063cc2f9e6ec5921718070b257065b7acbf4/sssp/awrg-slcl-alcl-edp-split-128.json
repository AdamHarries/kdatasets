{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__95228, const global float* restrict v__95229, const global float* restrict v__95230, const global float* restrict v__95231, float v__95232, float v__95233, global float* v__95253, global int* v__95235, local float* v__95248, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95237; \n  float v__95239; \n  float v__75402; \n  /* Private Memory */\n  float v__95241_0;\n  \n  float v__95243_0;\n  \n  int v__95247_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7319 = v__95235; \n    local int v_w_id_95221; \n    if (get_local_id(0) == 0) {\n      v_w_id_95221 = atomic_inc(v_work_idx_7319); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_95221 < v_MHeight_2)){\n      for (int v_l_id_95222 = get_local_id(0); v_l_id_95222 < v_MWidthC_1; v_l_id_95222 = (v_l_id_95222 + get_local_size(0))) {\n        float v_tmp_95315 = 3.4028235E38f; \n        v__95237 = v_tmp_95315; \n        /* reduce_while_seq */\n        for (int v_i_95223 = 0; v_i_95223 < 128; v_i_95223 = (1 + v_i_95223)) {\n          v__95247_0 = check(v__95237, v__95228[(v_l_id_95222 + (128 * v_MWidthC_1 * v_w_id_95221) + (v_MWidthC_1 * v_i_95223))]); \n          if (v__95247_0) {\n          } else {\n            break;\n          }\n          float v_tmp_95316 = 3.4028235E38f; \n          v__95239 = v_tmp_95316; \n          int v_index_95317 = v__95228[(v_l_id_95222 + (128 * v_MWidthC_1 * v_w_id_95221) + (v_MWidthC_1 * v_i_95223))]; \n          if (v_index_95317 < 0) {\n            v__95241_0 = v__95239; \n          } else {\n            if (v_index_95317 >= v_VLength_3) {\n              v__95241_0 = v__95239; \n            } else {\n              v__95241_0 = v__95230[v_index_95317]; \n            }\n          }\n          v__95243_0 = absadd(v__95241_0, v__95229[(v_l_id_95222 + (128 * v_MWidthC_1 * v_w_id_95221) + (v_MWidthC_1 * v_i_95223))]); \n          v__95237 = clmin(v__95243_0, v__95237); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95224 = 0; \n          v__95248[v_l_id_95222] = id(v__95237); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7313; \n        v_work_idx_7313 = 0; \n        int v_l_id_95225 = atomic_inc(&(v_work_idx_7313)); \n        while((v_l_id_95225 < 1)){\n          float v_tmp_95320 = 3.4028235E38f; \n          v__75402 = v_tmp_95320; \n          /* reduce_seq */\n          for (int v_i_95226 = 0; v_i_95226 < v_MWidthC_1; v_i_95226 = (1 + v_i_95226)) {\n            v__75402 = clmin(v__75402, v__95248[(v_i_95226 + (v_MWidthC_1 * v_l_id_95225))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_95227 = 0; \n            v__95253[v_w_id_95221] = doubleMultiplyAdd(v__75402, v__95232, v__95231[v_w_id_95221], v__95233); \n          }\n          /* end map_seq */\n          v_l_id_95225 = atomic_inc(&(v_work_idx_7313)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_95221 = atomic_inc(v_work_idx_7319); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95228",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95229",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95230",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95232",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95233",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95235",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__95253",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95248",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}