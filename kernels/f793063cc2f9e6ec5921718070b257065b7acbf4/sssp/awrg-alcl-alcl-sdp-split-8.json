{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78916, const global float* restrict v__78917, const global float* restrict v__78918, const global float* restrict v__78919, float v__78920, float v__78921, global float* v__78939, global float* v__78929, global int* v__78923, local float* v__78934, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78925; \n  float v__78930; \n  float v__75402; \n  /* Private Memory */\n  float v__78927_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5869 = v__78923; \n    local int v_w_id_78908; \n    if (get_local_id(0) == 0) {\n      v_w_id_78908 = atomic_inc(v_work_idx_5869); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78908 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5867; \n        v_work_idx_5867 = 0; \n        int v_l_id_78909 = atomic_inc(&(v_work_idx_5867)); \n        while((v_l_id_78909 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_78910 = 0; v_i_78910 < 8; v_i_78910 = (1 + v_i_78910)) {\n            float v_tmp_78990 = 3.4028235E38f; \n            v__78925 = v_tmp_78990; \n            int v_index_78991 = v__78916[(v_l_id_78909 + (8 * v_MWidthC_1 * v_w_id_78908) + (v_MWidthC_1 * v_i_78910))]; \n            if (v_index_78991 < 0) {\n              v__78927_0 = v__78925; \n            } else {\n              if (v_index_78991 >= v_VLength_3) {\n                v__78927_0 = v__78925; \n              } else {\n                v__78927_0 = v__78918[v_index_78991]; \n              }\n            }\n            v__78929[(7 + (8 * v_MWidthC_1 * v_w_id_78908) + (-1 * v_i_78910) + (8 * v_l_id_78909))] = absadd(v__78927_0, v__78917[(v_l_id_78909 + (8 * v_MWidthC_1 * v_w_id_78908) + (v_MWidthC_1 * v_i_78910))]); \n          }\n          /* end map_seq */\n          float v_tmp_78992 = 3.4028235E38f; \n          v__78930 = v_tmp_78992; \n          /* reduce_seq */\n          for (int v_i_78911 = 0; v_i_78911 < 8; v_i_78911 = (1 + v_i_78911)) {\n            v__78930 = clmin(v__78930, v__78929[(v_i_78911 + (8 * v_MWidthC_1 * v_w_id_78908) + (8 * v_l_id_78909))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78912 = 0; \n            v__78934[v_l_id_78909] = id(v__78930); \n          }\n          /* end map_seq */\n          v_l_id_78909 = atomic_inc(&(v_work_idx_5867)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5861; \n        v_work_idx_5861 = 0; \n        int v_l_id_78913 = atomic_inc(&(v_work_idx_5861)); \n        while((v_l_id_78913 < 1)){\n          float v_tmp_78995 = 3.4028235E38f; \n          v__75402 = v_tmp_78995; \n          /* reduce_seq */\n          for (int v_i_78914 = 0; v_i_78914 < v_MWidthC_1; v_i_78914 = (1 + v_i_78914)) {\n            v__75402 = clmin(v__75402, v__78934[(v_i_78914 + (v_MWidthC_1 * v_l_id_78913))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78915 = 0; \n            v__78939[v_w_id_78908] = doubleMultiplyAdd(v__75402, v__78920, v__78919[v_w_id_78908], v__78921); \n          }\n          /* end map_seq */\n          v_l_id_78913 = atomic_inc(&(v_work_idx_5861)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78908 = atomic_inc(v_work_idx_5869); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78916",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78917",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78918",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78919",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78920",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78921",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78929",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78923",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78939",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78934",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}