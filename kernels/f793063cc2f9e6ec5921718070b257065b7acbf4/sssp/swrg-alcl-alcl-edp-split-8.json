{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76961, const global float* restrict v__76962, const global float* restrict v__76963, const global float* restrict v__76964, float v__76965, float v__76966, global float* v__76985, local float* v__76980, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76969; \n  float v__76971; \n  float v__75402; \n  /* Private Memory */\n  float v__76973_0;\n  \n  float v__76975_0;\n  \n  int v__76979_0;\n  \n  for (int v_wg_id_76954 = get_group_id(0); v_wg_id_76954 < v_MHeight_2; v_wg_id_76954 = (v_wg_id_76954 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5686; \n      v_work_idx_5686 = 0; \n      int v_l_id_76955 = atomic_inc(&(v_work_idx_5686)); \n      while((v_l_id_76955 < v_MWidthC_1)){\n        float v_tmp_77041 = 3.4028235E38f; \n        v__76969 = v_tmp_77041; \n        /* reduce_while_seq */\n        for (int v_i_76956 = 0; v_i_76956 < 8; v_i_76956 = (1 + v_i_76956)) {\n          v__76979_0 = check(v__76969, v__76961[(v_l_id_76955 + (8 * v_MWidthC_1 * v_wg_id_76954) + (v_MWidthC_1 * v_i_76956))]); \n          if (v__76979_0) {\n          } else {\n            break;\n          }\n          float v_tmp_77042 = 3.4028235E38f; \n          v__76971 = v_tmp_77042; \n          int v_index_77043 = v__76961[(v_l_id_76955 + (8 * v_MWidthC_1 * v_wg_id_76954) + (v_MWidthC_1 * v_i_76956))]; \n          if (v_index_77043 < 0) {\n            v__76973_0 = v__76971; \n          } else {\n            if (v_index_77043 >= v_VLength_3) {\n              v__76973_0 = v__76971; \n            } else {\n              v__76973_0 = v__76963[v_index_77043]; \n            }\n          }\n          v__76975_0 = absadd(v__76973_0, v__76962[(v_l_id_76955 + (8 * v_MWidthC_1 * v_wg_id_76954) + (v_MWidthC_1 * v_i_76956))]); \n          v__76969 = clmin(v__76975_0, v__76969); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76957 = 0; \n          v__76980[v_l_id_76955] = id(v__76969); \n        }\n        /* end map_seq */\n        v_l_id_76955 = atomic_inc(&(v_work_idx_5686)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5681; \n      v_work_idx_5681 = 0; \n      int v_l_id_76958 = atomic_inc(&(v_work_idx_5681)); \n      while((v_l_id_76958 < 1)){\n        float v_tmp_77046 = 3.4028235E38f; \n        v__75402 = v_tmp_77046; \n        /* reduce_seq */\n        for (int v_i_76959 = 0; v_i_76959 < v_MWidthC_1; v_i_76959 = (1 + v_i_76959)) {\n          v__75402 = clmin(v__75402, v__76980[(v_i_76959 + (v_MWidthC_1 * v_l_id_76958))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76960 = 0; \n          v__76985[v_wg_id_76954] = doubleMultiplyAdd(v__75402, v__76965, v__76964[v_wg_id_76954], v__76966); \n        }\n        /* end map_seq */\n        v_l_id_76958 = atomic_inc(&(v_work_idx_5681)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76961",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76962",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76963",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76964",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76965",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76966",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__76985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76980",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}