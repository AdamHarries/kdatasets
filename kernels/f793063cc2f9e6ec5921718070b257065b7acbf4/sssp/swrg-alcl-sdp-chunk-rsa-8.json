{
  "name" : "swrg-alcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__76236, const global float* restrict v__76237, const global float* restrict v__76238, const global float* restrict v__76239, float v__76240, float v__76241, global float* v__76255, global float* v__76254, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76243; \n  float v__76246; \n  /* Private Memory */\n  float v__76248_0;\n  \n  float v__76250_0;\n  \n  for (int v_wg_id_76231 = get_group_id(0); v_wg_id_76231 < ((v_MHeight_2)/(8)); v_wg_id_76231 = (v_wg_id_76231 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5615; \n      v_work_idx_5615 = 0; \n      int v_l_id_76232 = atomic_inc(&(v_work_idx_5615)); \n      while((v_l_id_76232 < 8)){\n        float v_tmp_76288 = 3.4028235E38f; \n        v__76243 = v_tmp_76288; \n        /* reduce_seq */\n        int v_stop_76289 = min(v__76236[(1 + (v__76236[(v_l_id_76232 + (8 * v_wg_id_76231))] / 4))], ((global int*)(v__76237 + (((global int*)(v__76237))[(v_l_id_76232 + (8 * v_wg_id_76231))] / 4)))[1]); \n        for (int v_i_76233 = 0; v_i_76233 < v_stop_76289; v_i_76233 = (1 + v_i_76233)) {\n          float v_tmp_76297 = 3.4028235E38f; \n          v__76246 = v_tmp_76297; \n          int v_index_76299 = v__76236[(2 + v_i_76233 + (v__76236[(v_l_id_76232 + (8 * v_wg_id_76231))] / 4))]; \n          if (v_index_76299 < 0) {\n            v__76248_0 = v__76246; \n          } else {\n            if (v_index_76299 >= v_MWidthC_1) {\n              v__76248_0 = v__76246; \n            } else {\n              v__76248_0 = v__76238[v_index_76299]; \n            }\n          }\n          v__76250_0 = absadd(v__76237[(2 + v_i_76233 + (((global int*)(v__76237))[(v_l_id_76232 + (8 * v_wg_id_76231))] / 4))], v__76248_0); \n          v__76243 = clmin(v__76243, v__76250_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76234 = 0; \n          v__76254[(v_l_id_76232 + (8 * v_wg_id_76231))] = doubleMultiplyAdd(v__76243, v__76240, v__76239[(v_l_id_76232 + (8 * v_wg_id_76231))], v__76241); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76235 = 0; \n          v__76255[(v_l_id_76232 + (8 * v_wg_id_76231))] = id(v__76254[(v_l_id_76232 + (8 * v_wg_id_76231))]); \n        }\n        /* end map_seq */\n        v_l_id_76232 = atomic_inc(&(v_work_idx_5615)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76236",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76237",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76238",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__76239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76240",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76241",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76254",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__76255",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}