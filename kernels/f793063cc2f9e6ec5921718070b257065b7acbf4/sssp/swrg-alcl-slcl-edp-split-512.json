{
  "name" : "swrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__102421, const global float* restrict v__102422, const global float* restrict v__102423, const global float* restrict v__102424, float v__102425, float v__102426, global float* v__102445, local float* v__102440, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102429; \n  float v__102431; \n  float v__75402; \n  /* Private Memory */\n  float v__102433_0;\n  \n  float v__102435_0;\n  \n  int v__102439_0;\n  \n  for (int v_wg_id_102414 = get_group_id(0); v_wg_id_102414 < v_MHeight_2; v_wg_id_102414 = (v_wg_id_102414 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7959; \n      v_work_idx_7959 = 0; \n      int v_l_id_102415 = atomic_inc(&(v_work_idx_7959)); \n      while((v_l_id_102415 < v_MWidthC_1)){\n        float v_tmp_102505 = 3.4028235E38f; \n        v__102429 = v_tmp_102505; \n        /* reduce_while_seq */\n        for (int v_i_102416 = 0; v_i_102416 < 512; v_i_102416 = (1 + v_i_102416)) {\n          v__102439_0 = check(v__102429, v__102421[(v_l_id_102415 + (512 * v_MWidthC_1 * v_wg_id_102414) + (v_MWidthC_1 * v_i_102416))]); \n          if (v__102439_0) {\n          } else {\n            break;\n          }\n          float v_tmp_102506 = 3.4028235E38f; \n          v__102431 = v_tmp_102506; \n          int v_index_102507 = v__102421[(v_l_id_102415 + (512 * v_MWidthC_1 * v_wg_id_102414) + (v_MWidthC_1 * v_i_102416))]; \n          if (v_index_102507 < 0) {\n            v__102433_0 = v__102431; \n          } else {\n            if (v_index_102507 >= v_VLength_3) {\n              v__102433_0 = v__102431; \n            } else {\n              v__102433_0 = v__102423[v_index_102507]; \n            }\n          }\n          v__102435_0 = absadd(v__102433_0, v__102422[(v_l_id_102415 + (512 * v_MWidthC_1 * v_wg_id_102414) + (v_MWidthC_1 * v_i_102416))]); \n          v__102429 = clmin(v__102435_0, v__102429); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102417 = 0; \n          v__102440[v_l_id_102415] = id(v__102429); \n        }\n        /* end map_seq */\n        v_l_id_102415 = atomic_inc(&(v_work_idx_7959)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_102418 = get_local_id(0); \n      float v_tmp_102510 = 3.4028235E38f; \n      v__75402 = v_tmp_102510; \n      /* reduce_seq */\n      for (int v_i_102419 = 0; v_i_102419 < v_MWidthC_1; v_i_102419 = (1 + v_i_102419)) {\n        v__75402 = clmin(v__75402, v__102440[(v_i_102419 + (v_MWidthC_1 * v_l_id_102418))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_102420 = 0; \n        v__102445[v_wg_id_102414] = doubleMultiplyAdd(v__75402, v__102425, v__102424[v_wg_id_102414], v__102426); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__102421",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102422",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102423",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102425",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102426",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__102445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102440",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}