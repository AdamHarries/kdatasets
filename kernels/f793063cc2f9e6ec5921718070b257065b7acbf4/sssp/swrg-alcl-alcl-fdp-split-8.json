{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76867, const global float* restrict v__76868, const global float* restrict v__76869, const global float* restrict v__76870, float v__76871, float v__76872, global float* v__76889, local float* v__76884, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76875; \n  float v__76877; \n  float v__75402; \n  /* Private Memory */\n  float v__76879_0;\n  \n  float v__76881_0;\n  \n  for (int v_wg_id_76860 = get_group_id(0); v_wg_id_76860 < v_MHeight_2; v_wg_id_76860 = (v_wg_id_76860 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5676; \n      v_work_idx_5676 = 0; \n      int v_l_id_76861 = atomic_inc(&(v_work_idx_5676)); \n      while((v_l_id_76861 < v_MWidthC_1)){\n        float v_tmp_76942 = 3.4028235E38f; \n        v__76875 = v_tmp_76942; \n        /* reduce_seq */\n        for (int v_i_76862 = 0; v_i_76862 < 8; v_i_76862 = (1 + v_i_76862)) {\n          float v_tmp_76943 = 3.4028235E38f; \n          v__76877 = v_tmp_76943; \n          int v_index_76944 = v__76867[(v_l_id_76861 + (8 * v_MWidthC_1 * v_wg_id_76860) + (v_MWidthC_1 * v_i_76862))]; \n          if (v_index_76944 < 0) {\n            v__76879_0 = v__76877; \n          } else {\n            if (v_index_76944 >= v_VLength_3) {\n              v__76879_0 = v__76877; \n            } else {\n              v__76879_0 = v__76869[v_index_76944]; \n            }\n          }\n          v__76881_0 = absadd(v__76879_0, v__76868[(v_l_id_76861 + (8 * v_MWidthC_1 * v_wg_id_76860) + (v_MWidthC_1 * v_i_76862))]); \n          v__76875 = clmin(v__76881_0, v__76875); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76863 = 0; \n          v__76884[v_l_id_76861] = id(v__76875); \n        }\n        /* end map_seq */\n        v_l_id_76861 = atomic_inc(&(v_work_idx_5676)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5671; \n      v_work_idx_5671 = 0; \n      int v_l_id_76864 = atomic_inc(&(v_work_idx_5671)); \n      while((v_l_id_76864 < 1)){\n        float v_tmp_76947 = 3.4028235E38f; \n        v__75402 = v_tmp_76947; \n        /* reduce_seq */\n        for (int v_i_76865 = 0; v_i_76865 < v_MWidthC_1; v_i_76865 = (1 + v_i_76865)) {\n          v__75402 = clmin(v__75402, v__76884[(v_i_76865 + (v_MWidthC_1 * v_l_id_76864))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76866 = 0; \n          v__76889[v_wg_id_76860] = doubleMultiplyAdd(v__75402, v__76871, v__76870[v_wg_id_76860], v__76872); \n        }\n        /* end map_seq */\n        v_l_id_76864 = atomic_inc(&(v_work_idx_5671)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76867",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76868",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76869",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76871",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76872",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__76889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76884",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}