{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__99207, const global float* restrict v__99208, const global float* restrict v__99209, const global float* restrict v__99210, float v__99211, float v__99212, global float* v__99232, global int* v__99214, local float* v__99227, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99216; \n  float v__99218; \n  float v__75402; \n  /* Private Memory */\n  float v__99220_0;\n  \n  float v__99222_0;\n  \n  int v__99226_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7672 = v__99214; \n    local int v_w_id_99200; \n    if (get_local_id(0) == 0) {\n      v_w_id_99200 = atomic_inc(v_work_idx_7672); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99200 < v_MHeight_2)){\n      for (int v_l_id_99201 = get_local_id(0); v_l_id_99201 < v_MWidthC_1; v_l_id_99201 = (v_l_id_99201 + get_local_size(0))) {\n        float v_tmp_99298 = 3.4028235E38f; \n        v__99216 = v_tmp_99298; \n        /* reduce_while_seq */\n        for (int v_i_99202 = 0; v_i_99202 < 256; v_i_99202 = (1 + v_i_99202)) {\n          v__99226_0 = check(v__99216, v__99207[(v_l_id_99201 + (256 * v_MWidthC_1 * v_w_id_99200) + (v_MWidthC_1 * v_i_99202))]); \n          if (v__99226_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99299 = 3.4028235E38f; \n          v__99218 = v_tmp_99299; \n          int v_index_99300 = v__99207[(v_l_id_99201 + (256 * v_MWidthC_1 * v_w_id_99200) + (v_MWidthC_1 * v_i_99202))]; \n          if (v_index_99300 < 0) {\n            v__99220_0 = v__99218; \n          } else {\n            if (v_index_99300 >= v_VLength_3) {\n              v__99220_0 = v__99218; \n            } else {\n              v__99220_0 = v__99209[v_index_99300]; \n            }\n          }\n          v__99222_0 = absadd(v__99220_0, v__99208[(v_l_id_99201 + (256 * v_MWidthC_1 * v_w_id_99200) + (v_MWidthC_1 * v_i_99202))]); \n          v__99216 = clmin(v__99222_0, v__99216); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99203 = 0; \n          v__99227[v_l_id_99201] = id(v__99216); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99204 = get_local_id(0); \n        float v_tmp_99303 = 3.4028235E38f; \n        v__75402 = v_tmp_99303; \n        /* reduce_seq */\n        for (int v_i_99205 = 0; v_i_99205 < v_MWidthC_1; v_i_99205 = (1 + v_i_99205)) {\n          v__75402 = clmin(v__75402, v__99227[(v_i_99205 + (v_MWidthC_1 * v_l_id_99204))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99206 = 0; \n          v__99232[v_w_id_99200] = doubleMultiplyAdd(v__75402, v__99211, v__99210[v_w_id_99200], v__99212); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99200 = atomic_inc(v_work_idx_7672); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99207",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99208",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99209",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99211",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99212",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99214",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99232",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99227",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}