{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78716, const global float* restrict v__78717, const global float* restrict v__78718, const global float* restrict v__78719, float v__78720, float v__78721, global float* v__78739, global int* v__78723, local float* v__78734, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78725; \n  float v__78727; \n  float v__75402; \n  /* Private Memory */\n  float v__78729_0;\n  \n  float v__78731_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5847 = v__78723; \n    local int v_w_id_78709; \n    if (get_local_id(0) == 0) {\n      v_w_id_78709 = atomic_inc(v_work_idx_5847); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78709 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5845; \n        v_work_idx_5845 = 0; \n        int v_l_id_78710 = atomic_inc(&(v_work_idx_5845)); \n        while((v_l_id_78710 < v_MWidthC_1)){\n          float v_tmp_78794 = 3.4028235E38f; \n          v__78725 = v_tmp_78794; \n          /* reduce_seq */\n          for (int v_i_78711 = 0; v_i_78711 < 8; v_i_78711 = (1 + v_i_78711)) {\n            float v_tmp_78795 = 3.4028235E38f; \n            v__78727 = v_tmp_78795; \n            int v_index_78796 = v__78716[(v_l_id_78710 + (8 * v_MWidthC_1 * v_w_id_78709) + (v_MWidthC_1 * v_i_78711))]; \n            if (v_index_78796 < 0) {\n              v__78729_0 = v__78727; \n            } else {\n              if (v_index_78796 >= v_VLength_3) {\n                v__78729_0 = v__78727; \n              } else {\n                v__78729_0 = v__78718[v_index_78796]; \n              }\n            }\n            v__78731_0 = absadd(v__78729_0, v__78717[(v_l_id_78710 + (8 * v_MWidthC_1 * v_w_id_78709) + (v_MWidthC_1 * v_i_78711))]); \n            v__78725 = clmin(v__78731_0, v__78725); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78712 = 0; \n            v__78734[v_l_id_78710] = id(v__78725); \n          }\n          /* end map_seq */\n          v_l_id_78710 = atomic_inc(&(v_work_idx_5845)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_78713 = get_local_id(0); \n        float v_tmp_78799 = 3.4028235E38f; \n        v__75402 = v_tmp_78799; \n        /* reduce_seq */\n        for (int v_i_78714 = 0; v_i_78714 < v_MWidthC_1; v_i_78714 = (1 + v_i_78714)) {\n          v__75402 = clmin(v__75402, v__78734[(v_i_78714 + (v_MWidthC_1 * v_l_id_78713))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78715 = 0; \n          v__78739[v_w_id_78709] = doubleMultiplyAdd(v__75402, v__78720, v__78719[v_w_id_78709], v__78721); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78709 = atomic_inc(v_work_idx_5847); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78716",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78717",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78718",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78719",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78720",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78721",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78723",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78734",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}