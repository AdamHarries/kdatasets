{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__94705, const global float* restrict v__94706, const global float* restrict v__94707, const global float* restrict v__94708, float v__94709, float v__94710, global float* v__94728, global float* v__94718, global int* v__94712, local float* v__94723, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94714; \n  float v__94719; \n  float v__75402; \n  /* Private Memory */\n  float v__94716_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7270 = v__94712; \n    local int v_w_id_94697; \n    if (get_local_id(0) == 0) {\n      v_w_id_94697 = atomic_inc(v_work_idx_7270); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94697 < v_MHeight_2)){\n      for (int v_l_id_94698 = get_local_id(0); v_l_id_94698 < v_MWidthC_1; v_l_id_94698 = (v_l_id_94698 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_94699 = 0; v_i_94699 < 128; v_i_94699 = (1 + v_i_94699)) {\n          float v_tmp_94791 = 3.4028235E38f; \n          v__94714 = v_tmp_94791; \n          int v_index_94792 = v__94705[(v_l_id_94698 + (128 * v_MWidthC_1 * v_w_id_94697) + (v_MWidthC_1 * v_i_94699))]; \n          if (v_index_94792 < 0) {\n            v__94716_0 = v__94714; \n          } else {\n            if (v_index_94792 >= v_VLength_3) {\n              v__94716_0 = v__94714; \n            } else {\n              v__94716_0 = v__94707[v_index_94792]; \n            }\n          }\n          v__94718[(127 + (128 * v_MWidthC_1 * v_w_id_94697) + (-1 * v_i_94699) + (128 * v_l_id_94698))] = absadd(v__94716_0, v__94706[(v_l_id_94698 + (128 * v_MWidthC_1 * v_w_id_94697) + (v_MWidthC_1 * v_i_94699))]); \n        }\n        /* end map_seq */\n        float v_tmp_94793 = 3.4028235E38f; \n        v__94719 = v_tmp_94793; \n        /* reduce_seq */\n        for (int v_i_94700 = 0; v_i_94700 < 128; v_i_94700 = (1 + v_i_94700)) {\n          v__94719 = clmin(v__94719, v__94718[(v_i_94700 + (128 * v_MWidthC_1 * v_w_id_94697) + (128 * v_l_id_94698))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94701 = 0; \n          v__94723[v_l_id_94698] = id(v__94719); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_94702 = get_local_id(0); \n        float v_tmp_94796 = 3.4028235E38f; \n        v__75402 = v_tmp_94796; \n        /* reduce_seq */\n        for (int v_i_94703 = 0; v_i_94703 < v_MWidthC_1; v_i_94703 = (1 + v_i_94703)) {\n          v__75402 = clmin(v__75402, v__94723[(v_i_94703 + (v_MWidthC_1 * v_l_id_94702))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94704 = 0; \n          v__94728[v_w_id_94697] = doubleMultiplyAdd(v__75402, v__94709, v__94708[v_w_id_94697], v__94710); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94697 = atomic_inc(v_work_idx_7270); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94705",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94706",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94707",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94708",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94709",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94710",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94718",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94712",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94723",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}