{
  "name" : "swrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79346, const global float* restrict v__79347, const global float* restrict v__79348, const global float* restrict v__79349, float v__79350, float v__79351, global float* v__79366, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79353; \n  float v__79356; \n  /* Private Memory */\n  float v__79358_0;\n  \n  float v__79360_0;\n  \n  int v__79364_0;\n  \n  for (int v_wg_id_79342 = get_group_id(0); v_wg_id_79342 < ((v_MHeight_2)/(16)); v_wg_id_79342 = (v_wg_id_79342 + get_num_groups(0))) {\n    for (int v_l_id_79343 = get_local_id(0); v_l_id_79343 < 16; v_l_id_79343 = (v_l_id_79343 + get_local_size(0))) {\n      float v_tmp_79414 = 3.4028235E38f; \n      v__79353 = v_tmp_79414; \n      /* reduce_while_seq */\n      for (int v_i_79344 = 0; v_i_79344 < v_MWidthC_1; v_i_79344 = (1 + v_i_79344)) {\n        v__79364_0 = check(v__79353, v__79346[(v_i_79344 + (16 * v_MWidthC_1 * v_wg_id_79342) + (v_MWidthC_1 * v_l_id_79343))]); \n        if (v__79364_0) {\n        } else {\n          break;\n        }\n        float v_tmp_79415 = 3.4028235E38f; \n        v__79356 = v_tmp_79415; \n        int v_index_79416 = v__79346[(v_i_79344 + (16 * v_MWidthC_1 * v_wg_id_79342) + (v_MWidthC_1 * v_l_id_79343))]; \n        if (v_index_79416 < 0) {\n          v__79358_0 = v__79356; \n        } else {\n          if (v_index_79416 >= v_VLength_3) {\n            v__79358_0 = v__79356; \n          } else {\n            v__79358_0 = v__79348[v_index_79416]; \n          }\n        }\n        v__79360_0 = absadd(v__79358_0, v__79347[(v_i_79344 + (16 * v_MWidthC_1 * v_wg_id_79342) + (v_MWidthC_1 * v_l_id_79343))]); \n        v__79353 = clmin(v__79360_0, v__79353); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_79345 = 0; \n        v__79366[(v_l_id_79343 + (16 * v_wg_id_79342))] = doubleMultiplyAdd(v__79353, v__79350, v__79349[(v_l_id_79343 + (16 * v_wg_id_79342))], v__79351); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79347",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79348",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79349",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79350",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79351",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__79366",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}