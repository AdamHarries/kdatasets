{
  "name" : "swrg-alcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97852, const global float* restrict v__97853, const global float* restrict v__97854, const global float* restrict v__97855, float v__97856, float v__97857, global float* v__97871, global float* v__97870, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97859; \n  float v__97862; \n  /* Private Memory */\n  float v__97864_0;\n  \n  float v__97866_0;\n  \n  for (int v_wg_id_97847 = get_group_id(0); v_wg_id_97847 < ((v_MHeight_2)/(256)); v_wg_id_97847 = (v_wg_id_97847 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7547; \n      v_work_idx_7547 = 0; \n      int v_l_id_97848 = atomic_inc(&(v_work_idx_7547)); \n      while((v_l_id_97848 < 256)){\n        float v_tmp_97904 = 3.4028235E38f; \n        v__97859 = v_tmp_97904; \n        /* reduce_seq */\n        int v_stop_97905 = min(v__97852[(1 + (v__97852[(v_l_id_97848 + (256 * v_wg_id_97847))] / 4))], ((global int*)(v__97853 + (((global int*)(v__97853))[(v_l_id_97848 + (256 * v_wg_id_97847))] / 4)))[1]); \n        for (int v_i_97849 = 0; v_i_97849 < v_stop_97905; v_i_97849 = (1 + v_i_97849)) {\n          float v_tmp_97913 = 3.4028235E38f; \n          v__97862 = v_tmp_97913; \n          int v_index_97915 = v__97852[(2 + v_i_97849 + (v__97852[(v_l_id_97848 + (256 * v_wg_id_97847))] / 4))]; \n          if (v_index_97915 < 0) {\n            v__97864_0 = v__97862; \n          } else {\n            if (v_index_97915 >= v_MWidthC_1) {\n              v__97864_0 = v__97862; \n            } else {\n              v__97864_0 = v__97854[v_index_97915]; \n            }\n          }\n          v__97866_0 = absadd(v__97853[(2 + v_i_97849 + (((global int*)(v__97853))[(v_l_id_97848 + (256 * v_wg_id_97847))] / 4))], v__97864_0); \n          v__97859 = clmin(v__97859, v__97866_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97850 = 0; \n          v__97870[(v_l_id_97848 + (256 * v_wg_id_97847))] = doubleMultiplyAdd(v__97859, v__97856, v__97855[(v_l_id_97848 + (256 * v_wg_id_97847))], v__97857); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97851 = 0; \n          v__97871[(v_l_id_97848 + (256 * v_wg_id_97847))] = id(v__97870[(v_l_id_97848 + (256 * v_wg_id_97847))]); \n        }\n        /* end map_seq */\n        v_l_id_97848 = atomic_inc(&(v_work_idx_7547)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97852",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97853",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97854",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__97855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97856",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97857",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97870",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__97871",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}