{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__81253, const global float* restrict v__81254, const global float* restrict v__81255, const global float* restrict v__81256, float v__81257, float v__81258, global float* v__81277, local float* v__81272, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81261; \n  float v__81263; \n  float v__75402; \n  /* Private Memory */\n  float v__81265_0;\n  \n  float v__81267_0;\n  \n  int v__81271_0;\n  \n  for (int v_wg_id_81246 = get_group_id(0); v_wg_id_81246 < v_MHeight_2; v_wg_id_81246 = (v_wg_id_81246 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6070; \n      v_work_idx_6070 = 0; \n      int v_l_id_81247 = atomic_inc(&(v_work_idx_6070)); \n      while((v_l_id_81247 < v_MWidthC_1)){\n        float v_tmp_81333 = 3.4028235E38f; \n        v__81261 = v_tmp_81333; \n        /* reduce_while_seq */\n        for (int v_i_81248 = 0; v_i_81248 < 16; v_i_81248 = (1 + v_i_81248)) {\n          v__81271_0 = check(v__81261, v__81253[(v_l_id_81247 + (16 * v_MWidthC_1 * v_wg_id_81246) + (v_MWidthC_1 * v_i_81248))]); \n          if (v__81271_0) {\n          } else {\n            break;\n          }\n          float v_tmp_81334 = 3.4028235E38f; \n          v__81263 = v_tmp_81334; \n          int v_index_81335 = v__81253[(v_l_id_81247 + (16 * v_MWidthC_1 * v_wg_id_81246) + (v_MWidthC_1 * v_i_81248))]; \n          if (v_index_81335 < 0) {\n            v__81265_0 = v__81263; \n          } else {\n            if (v_index_81335 >= v_VLength_3) {\n              v__81265_0 = v__81263; \n            } else {\n              v__81265_0 = v__81255[v_index_81335]; \n            }\n          }\n          v__81267_0 = absadd(v__81265_0, v__81254[(v_l_id_81247 + (16 * v_MWidthC_1 * v_wg_id_81246) + (v_MWidthC_1 * v_i_81248))]); \n          v__81261 = clmin(v__81267_0, v__81261); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81249 = 0; \n          v__81272[v_l_id_81247] = id(v__81261); \n        }\n        /* end map_seq */\n        v_l_id_81247 = atomic_inc(&(v_work_idx_6070)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6065; \n      v_work_idx_6065 = 0; \n      int v_l_id_81250 = atomic_inc(&(v_work_idx_6065)); \n      while((v_l_id_81250 < 1)){\n        float v_tmp_81338 = 3.4028235E38f; \n        v__75402 = v_tmp_81338; \n        /* reduce_seq */\n        for (int v_i_81251 = 0; v_i_81251 < v_MWidthC_1; v_i_81251 = (1 + v_i_81251)) {\n          v__75402 = clmin(v__75402, v__81272[(v_i_81251 + (v_MWidthC_1 * v_l_id_81250))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81252 = 0; \n          v__81277[v_wg_id_81246] = doubleMultiplyAdd(v__75402, v__81257, v__81256[v_wg_id_81246], v__81258); \n        }\n        /* end map_seq */\n        v_l_id_81250 = atomic_inc(&(v_work_idx_6065)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__81253",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81254",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81255",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81257",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81258",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81272",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}