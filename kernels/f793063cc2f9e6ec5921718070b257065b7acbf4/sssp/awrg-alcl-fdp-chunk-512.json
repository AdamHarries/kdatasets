{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103987, const global float* restrict v__103988, const global float* restrict v__103989, const global float* restrict v__103990, float v__103991, float v__103992, global float* v__104006, global int* v__103994, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103996; \n  float v__103998; \n  /* Private Memory */\n  float v__104000_0;\n  \n  float v__104002_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8102 = v__103994; \n    local int v_w_id_103983; \n    if (get_local_id(0) == 0) {\n      v_w_id_103983 = atomic_inc(v_work_idx_8102); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103983 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8100; \n        v_work_idx_8100 = 0; \n        int v_l_id_103984 = atomic_inc(&(v_work_idx_8100)); \n        while((v_l_id_103984 < 512)){\n          float v_tmp_104043 = 3.4028235E38f; \n          v__103996 = v_tmp_104043; \n          /* reduce_seq */\n          for (int v_i_103985 = 0; v_i_103985 < v_MWidthC_1; v_i_103985 = (1 + v_i_103985)) {\n            float v_tmp_104044 = 3.4028235E38f; \n            v__103998 = v_tmp_104044; \n            int v_index_104045 = v__103987[(v_i_103985 + (512 * v_MWidthC_1 * v_w_id_103983) + (v_MWidthC_1 * v_l_id_103984))]; \n            if (v_index_104045 < 0) {\n              v__104000_0 = v__103998; \n            } else {\n              if (v_index_104045 >= v_VLength_3) {\n                v__104000_0 = v__103998; \n              } else {\n                v__104000_0 = v__103989[v_index_104045]; \n              }\n            }\n            v__104002_0 = absadd(v__104000_0, v__103988[(v_i_103985 + (512 * v_MWidthC_1 * v_w_id_103983) + (v_MWidthC_1 * v_l_id_103984))]); \n            v__103996 = clmin(v__104002_0, v__103996); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103986 = 0; \n            v__104006[(v_l_id_103984 + (512 * v_w_id_103983))] = doubleMultiplyAdd(v__103996, v__103991, v__103990[(v_l_id_103984 + (512 * v_w_id_103983))], v__103992); \n          }\n          /* end map_seq */\n          v_l_id_103984 = atomic_inc(&(v_work_idx_8100)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103983 = atomic_inc(v_work_idx_8102); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__103987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103989",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103991",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103992",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103994",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104006",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}