{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__97169, const global float* restrict v__97170, const global float* restrict v__97171, const global float* restrict v__97172, float v__97173, float v__97174, global float* v__97191, global float* v__97181, local float* v__97186, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97177; \n  float v__97182; \n  float v__75402; \n  /* Private Memory */\n  float v__97179_0;\n  \n  for (int v_wg_id_97161 = get_group_id(0); v_wg_id_97161 < v_MHeight_2; v_wg_id_97161 = (v_wg_id_97161 + get_num_groups(0))) {\n    for (int v_l_id_97162 = get_local_id(0); v_l_id_97162 < v_MWidthC_1; v_l_id_97162 = (v_l_id_97162 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_97163 = 0; v_i_97163 < 256; v_i_97163 = (1 + v_i_97163)) {\n        float v_tmp_97252 = 3.4028235E38f; \n        v__97177 = v_tmp_97252; \n        int v_index_97253 = v__97169[(v_l_id_97162 + (256 * v_MWidthC_1 * v_wg_id_97161) + (v_MWidthC_1 * v_i_97163))]; \n        if (v_index_97253 < 0) {\n          v__97179_0 = v__97177; \n        } else {\n          if (v_index_97253 >= v_VLength_3) {\n            v__97179_0 = v__97177; \n          } else {\n            v__97179_0 = v__97171[v_index_97253]; \n          }\n        }\n        v__97181[(255 + (256 * v_MWidthC_1 * v_wg_id_97161) + (-1 * v_i_97163) + (256 * v_l_id_97162))] = absadd(v__97179_0, v__97170[(v_l_id_97162 + (256 * v_MWidthC_1 * v_wg_id_97161) + (v_MWidthC_1 * v_i_97163))]); \n      }\n      /* end map_seq */\n      float v_tmp_97254 = 3.4028235E38f; \n      v__97182 = v_tmp_97254; \n      /* reduce_seq */\n      for (int v_i_97164 = 0; v_i_97164 < 256; v_i_97164 = (1 + v_i_97164)) {\n        v__97182 = clmin(v__97182, v__97181[(v_i_97164 + (256 * v_MWidthC_1 * v_wg_id_97161) + (256 * v_l_id_97162))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_97165 = 0; \n        v__97186[v_l_id_97162] = id(v__97182); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7487; \n      v_work_idx_7487 = 0; \n      int v_l_id_97166 = atomic_inc(&(v_work_idx_7487)); \n      while((v_l_id_97166 < 1)){\n        float v_tmp_97257 = 3.4028235E38f; \n        v__75402 = v_tmp_97257; \n        /* reduce_seq */\n        for (int v_i_97167 = 0; v_i_97167 < v_MWidthC_1; v_i_97167 = (1 + v_i_97167)) {\n          v__75402 = clmin(v__75402, v__97186[(v_i_97167 + (v_MWidthC_1 * v_l_id_97166))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97168 = 0; \n          v__97191[v_wg_id_97161] = doubleMultiplyAdd(v__75402, v__97173, v__97172[v_wg_id_97161], v__97174); \n        }\n        /* end map_seq */\n        v_l_id_97166 = atomic_inc(&(v_work_idx_7487)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97169",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97170",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97171",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97172",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97173",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97174",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97181",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__97191",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97186",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}