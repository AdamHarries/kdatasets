{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__96366, const global float* restrict v__96367, const global float* restrict v__96368, const global float* restrict v__96369, float v__96370, float v__96371, global float* v__96384, global float* v__96378, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96374; \n  float v__96379; \n  /* Private Memory */\n  float v__96376_0;\n  \n  for (int v_wg_id_96361 = get_group_id(0); v_wg_id_96361 < ((v_MHeight_2)/(256)); v_wg_id_96361 = (v_wg_id_96361 + get_num_groups(0))) {\n    for (int v_l_id_96362 = get_local_id(0); v_l_id_96362 < 256; v_l_id_96362 = (v_l_id_96362 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_96363 = 0; v_i_96363 < v_MWidthC_1; v_i_96363 = (1 + v_i_96363)) {\n        float v_tmp_96428 = 3.4028235E38f; \n        v__96374 = v_tmp_96428; \n        int v_index_96429 = v__96366[(v_i_96363 + (256 * v_MWidthC_1 * v_wg_id_96361) + (v_MWidthC_1 * v_l_id_96362))]; \n        if (v_index_96429 < 0) {\n          v__96376_0 = v__96374; \n        } else {\n          if (v_index_96429 >= v_VLength_3) {\n            v__96376_0 = v__96374; \n          } else {\n            v__96376_0 = v__96368[v_index_96429]; \n          }\n        }\n        v__96378[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_96361) + (-1 * v_i_96363) + (v_MWidthC_1 * v_l_id_96362))] = absadd(v__96376_0, v__96367[(v_i_96363 + (256 * v_MWidthC_1 * v_wg_id_96361) + (v_MWidthC_1 * v_l_id_96362))]); \n      }\n      /* end map_seq */\n      float v_tmp_96430 = 3.4028235E38f; \n      v__96379 = v_tmp_96430; \n      /* reduce_seq */\n      for (int v_i_96364 = 0; v_i_96364 < v_MWidthC_1; v_i_96364 = (1 + v_i_96364)) {\n        v__96379 = clmin(v__96379, v__96378[(v_i_96364 + (256 * v_MWidthC_1 * v_wg_id_96361) + (v_MWidthC_1 * v_l_id_96362))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_96365 = 0; \n        v__96384[(v_l_id_96362 + (256 * v_wg_id_96361))] = doubleMultiplyAdd(v__96379, v__96370, v__96369[(v_l_id_96362 + (256 * v_wg_id_96361))], v__96371); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96366",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__96384",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}