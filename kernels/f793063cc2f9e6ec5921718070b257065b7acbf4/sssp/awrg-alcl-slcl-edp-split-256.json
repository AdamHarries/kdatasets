{
  "name" : "awrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100273, const global float* restrict v__100274, const global float* restrict v__100275, const global float* restrict v__100276, float v__100277, float v__100278, global float* v__100298, global int* v__100280, local float* v__100293, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100282; \n  float v__100284; \n  float v__75402; \n  /* Private Memory */\n  float v__100286_0;\n  \n  float v__100288_0;\n  \n  int v__100292_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7777 = v__100280; \n    local int v_w_id_100266; \n    if (get_local_id(0) == 0) {\n      v_w_id_100266 = atomic_inc(v_work_idx_7777); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100266 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7775; \n        v_work_idx_7775 = 0; \n        int v_l_id_100267 = atomic_inc(&(v_work_idx_7775)); \n        while((v_l_id_100267 < v_MWidthC_1)){\n          float v_tmp_100356 = 3.4028235E38f; \n          v__100282 = v_tmp_100356; \n          /* reduce_while_seq */\n          for (int v_i_100268 = 0; v_i_100268 < 256; v_i_100268 = (1 + v_i_100268)) {\n            v__100292_0 = check(v__100282, v__100273[(v_l_id_100267 + (256 * v_MWidthC_1 * v_w_id_100266) + (v_MWidthC_1 * v_i_100268))]); \n            if (v__100292_0) {\n            } else {\n              break;\n            }\n            float v_tmp_100357 = 3.4028235E38f; \n            v__100284 = v_tmp_100357; \n            int v_index_100358 = v__100273[(v_l_id_100267 + (256 * v_MWidthC_1 * v_w_id_100266) + (v_MWidthC_1 * v_i_100268))]; \n            if (v_index_100358 < 0) {\n              v__100286_0 = v__100284; \n            } else {\n              if (v_index_100358 >= v_VLength_3) {\n                v__100286_0 = v__100284; \n              } else {\n                v__100286_0 = v__100275[v_index_100358]; \n              }\n            }\n            v__100288_0 = absadd(v__100286_0, v__100274[(v_l_id_100267 + (256 * v_MWidthC_1 * v_w_id_100266) + (v_MWidthC_1 * v_i_100268))]); \n            v__100282 = clmin(v__100288_0, v__100282); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100269 = 0; \n            v__100293[v_l_id_100267] = id(v__100282); \n          }\n          /* end map_seq */\n          v_l_id_100267 = atomic_inc(&(v_work_idx_7775)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100270 = get_local_id(0); \n        float v_tmp_100361 = 3.4028235E38f; \n        v__75402 = v_tmp_100361; \n        /* reduce_seq */\n        for (int v_i_100271 = 0; v_i_100271 < v_MWidthC_1; v_i_100271 = (1 + v_i_100271)) {\n          v__75402 = clmin(v__75402, v__100293[(v_i_100271 + (v_MWidthC_1 * v_l_id_100270))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100272 = 0; \n          v__100298[v_w_id_100266] = doubleMultiplyAdd(v__75402, v__100277, v__100276[v_w_id_100266], v__100278); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100266 = atomic_inc(v_work_idx_7777); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100273",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100274",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100275",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100276",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100277",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100278",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100280",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100298",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100293",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}