{
  "name" : "swrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98129, const global float* restrict v__98130, const global float* restrict v__98131, const global float* restrict v__98132, float v__98133, float v__98134, global float* v__98153, local float* v__98148, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98137; \n  float v__98139; \n  float v__75402; \n  /* Private Memory */\n  float v__98141_0;\n  \n  float v__98143_0;\n  \n  int v__98147_0;\n  \n  for (int v_wg_id_98122 = get_group_id(0); v_wg_id_98122 < v_MHeight_2; v_wg_id_98122 = (v_wg_id_98122 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7575; \n      v_work_idx_7575 = 0; \n      int v_l_id_98123 = atomic_inc(&(v_work_idx_7575)); \n      while((v_l_id_98123 < v_MWidthC_1)){\n        float v_tmp_98213 = 3.4028235E38f; \n        v__98137 = v_tmp_98213; \n        /* reduce_while_seq */\n        for (int v_i_98124 = 0; v_i_98124 < 256; v_i_98124 = (1 + v_i_98124)) {\n          v__98147_0 = check(v__98137, v__98129[(v_l_id_98123 + (256 * v_MWidthC_1 * v_wg_id_98122) + (v_MWidthC_1 * v_i_98124))]); \n          if (v__98147_0) {\n          } else {\n            break;\n          }\n          float v_tmp_98214 = 3.4028235E38f; \n          v__98139 = v_tmp_98214; \n          int v_index_98215 = v__98129[(v_l_id_98123 + (256 * v_MWidthC_1 * v_wg_id_98122) + (v_MWidthC_1 * v_i_98124))]; \n          if (v_index_98215 < 0) {\n            v__98141_0 = v__98139; \n          } else {\n            if (v_index_98215 >= v_VLength_3) {\n              v__98141_0 = v__98139; \n            } else {\n              v__98141_0 = v__98131[v_index_98215]; \n            }\n          }\n          v__98143_0 = absadd(v__98141_0, v__98130[(v_l_id_98123 + (256 * v_MWidthC_1 * v_wg_id_98122) + (v_MWidthC_1 * v_i_98124))]); \n          v__98137 = clmin(v__98143_0, v__98137); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98125 = 0; \n          v__98148[v_l_id_98123] = id(v__98137); \n        }\n        /* end map_seq */\n        v_l_id_98123 = atomic_inc(&(v_work_idx_7575)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98126 = get_local_id(0); \n      float v_tmp_98218 = 3.4028235E38f; \n      v__75402 = v_tmp_98218; \n      /* reduce_seq */\n      for (int v_i_98127 = 0; v_i_98127 < v_MWidthC_1; v_i_98127 = (1 + v_i_98127)) {\n        v__75402 = clmin(v__75402, v__98148[(v_i_98127 + (v_MWidthC_1 * v_l_id_98126))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98128 = 0; \n        v__98153[v_wg_id_98122] = doubleMultiplyAdd(v__75402, v__98133, v__98132[v_wg_id_98122], v__98134); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98129",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98130",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98131",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98132",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98133",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98134",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98148",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}