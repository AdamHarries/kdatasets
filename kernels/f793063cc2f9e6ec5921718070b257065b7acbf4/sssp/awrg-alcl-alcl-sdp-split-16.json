{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__83208, const global float* restrict v__83209, const global float* restrict v__83210, const global float* restrict v__83211, float v__83212, float v__83213, global float* v__83231, global float* v__83221, global int* v__83215, local float* v__83226, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83217; \n  float v__83222; \n  float v__75402; \n  /* Private Memory */\n  float v__83219_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6253 = v__83215; \n    local int v_w_id_83200; \n    if (get_local_id(0) == 0) {\n      v_w_id_83200 = atomic_inc(v_work_idx_6253); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83200 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6251; \n        v_work_idx_6251 = 0; \n        int v_l_id_83201 = atomic_inc(&(v_work_idx_6251)); \n        while((v_l_id_83201 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_83202 = 0; v_i_83202 < 16; v_i_83202 = (1 + v_i_83202)) {\n            float v_tmp_83282 = 3.4028235E38f; \n            v__83217 = v_tmp_83282; \n            int v_index_83283 = v__83208[(v_l_id_83201 + (16 * v_MWidthC_1 * v_w_id_83200) + (v_MWidthC_1 * v_i_83202))]; \n            if (v_index_83283 < 0) {\n              v__83219_0 = v__83217; \n            } else {\n              if (v_index_83283 >= v_VLength_3) {\n                v__83219_0 = v__83217; \n              } else {\n                v__83219_0 = v__83210[v_index_83283]; \n              }\n            }\n            v__83221[(15 + (16 * v_MWidthC_1 * v_w_id_83200) + (-1 * v_i_83202) + (16 * v_l_id_83201))] = absadd(v__83219_0, v__83209[(v_l_id_83201 + (16 * v_MWidthC_1 * v_w_id_83200) + (v_MWidthC_1 * v_i_83202))]); \n          }\n          /* end map_seq */\n          float v_tmp_83284 = 3.4028235E38f; \n          v__83222 = v_tmp_83284; \n          /* reduce_seq */\n          for (int v_i_83203 = 0; v_i_83203 < 16; v_i_83203 = (1 + v_i_83203)) {\n            v__83222 = clmin(v__83222, v__83221[(v_i_83203 + (16 * v_MWidthC_1 * v_w_id_83200) + (16 * v_l_id_83201))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83204 = 0; \n            v__83226[v_l_id_83201] = id(v__83222); \n          }\n          /* end map_seq */\n          v_l_id_83201 = atomic_inc(&(v_work_idx_6251)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6245; \n        v_work_idx_6245 = 0; \n        int v_l_id_83205 = atomic_inc(&(v_work_idx_6245)); \n        while((v_l_id_83205 < 1)){\n          float v_tmp_83287 = 3.4028235E38f; \n          v__75402 = v_tmp_83287; \n          /* reduce_seq */\n          for (int v_i_83206 = 0; v_i_83206 < v_MWidthC_1; v_i_83206 = (1 + v_i_83206)) {\n            v__75402 = clmin(v__75402, v__83226[(v_i_83206 + (v_MWidthC_1 * v_l_id_83205))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83207 = 0; \n            v__83231[v_w_id_83200] = doubleMultiplyAdd(v__75402, v__83212, v__83211[v_w_id_83200], v__83213); \n          }\n          /* end map_seq */\n          v_l_id_83205 = atomic_inc(&(v_work_idx_6245)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83200 = atomic_inc(v_work_idx_6253); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83208",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83209",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83210",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83212",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83213",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83221",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83215",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83226",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}