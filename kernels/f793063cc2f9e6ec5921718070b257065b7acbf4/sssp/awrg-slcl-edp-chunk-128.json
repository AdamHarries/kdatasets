{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__94374, const global float* restrict v__94375, const global float* restrict v__94376, const global float* restrict v__94377, float v__94378, float v__94379, global float* v__94395, global int* v__94381, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94382; \n  float v__94385; \n  /* Private Memory */\n  float v__94387_0;\n  \n  float v__94389_0;\n  \n  int v__94393_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7242 = v__94381; \n    local int v_w_id_94370; \n    if (get_local_id(0) == 0) {\n      v_w_id_94370 = atomic_inc(v_work_idx_7242); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94370 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_94371 = get_local_id(0); v_l_id_94371 < 128; v_l_id_94371 = (v_l_id_94371 + get_local_size(0))) {\n        float v_tmp_94442 = 3.4028235E38f; \n        v__94382 = v_tmp_94442; \n        /* reduce_while_seq */\n        for (int v_i_94372 = 0; v_i_94372 < v_MWidthC_1; v_i_94372 = (1 + v_i_94372)) {\n          v__94393_0 = check(v__94382, v__94374[(v_i_94372 + (128 * v_MWidthC_1 * v_w_id_94370) + (v_MWidthC_1 * v_l_id_94371))]); \n          if (v__94393_0) {\n          } else {\n            break;\n          }\n          float v_tmp_94443 = 3.4028235E38f; \n          v__94385 = v_tmp_94443; \n          int v_index_94444 = v__94374[(v_i_94372 + (128 * v_MWidthC_1 * v_w_id_94370) + (v_MWidthC_1 * v_l_id_94371))]; \n          if (v_index_94444 < 0) {\n            v__94387_0 = v__94385; \n          } else {\n            if (v_index_94444 >= v_VLength_3) {\n              v__94387_0 = v__94385; \n            } else {\n              v__94387_0 = v__94376[v_index_94444]; \n            }\n          }\n          v__94389_0 = absadd(v__94387_0, v__94375[(v_i_94372 + (128 * v_MWidthC_1 * v_w_id_94370) + (v_MWidthC_1 * v_l_id_94371))]); \n          v__94382 = clmin(v__94389_0, v__94382); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94373 = 0; \n          v__94395[(v_l_id_94371 + (128 * v_w_id_94370))] = doubleMultiplyAdd(v__94382, v__94378, v__94377[(v_l_id_94371 + (128 * v_w_id_94370))], v__94379); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_94370 = atomic_inc(v_work_idx_7242); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94376",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94377",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94378",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94379",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94381",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}