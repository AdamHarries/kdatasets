{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__101665, const global float* restrict v__101666, const global float* restrict v__101667, const global float* restrict v__101668, float v__101669, float v__101670, global float* v__101689, local float* v__101684, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101673; \n  float v__101675; \n  float v__75402; \n  /* Private Memory */\n  float v__101677_0;\n  \n  float v__101679_0;\n  \n  int v__101683_0;\n  \n  for (int v_wg_id_101658 = get_group_id(0); v_wg_id_101658 < v_MHeight_2; v_wg_id_101658 = (v_wg_id_101658 + get_num_groups(0))) {\n    for (int v_l_id_101659 = get_local_id(0); v_l_id_101659 < v_MWidthC_1; v_l_id_101659 = (v_l_id_101659 + get_local_size(0))) {\n      float v_tmp_101753 = 3.4028235E38f; \n      v__101673 = v_tmp_101753; \n      /* reduce_while_seq */\n      for (int v_i_101660 = 0; v_i_101660 < 512; v_i_101660 = (1 + v_i_101660)) {\n        v__101683_0 = check(v__101673, v__101665[(v_l_id_101659 + (512 * v_MWidthC_1 * v_wg_id_101658) + (v_MWidthC_1 * v_i_101660))]); \n        if (v__101683_0) {\n        } else {\n          break;\n        }\n        float v_tmp_101754 = 3.4028235E38f; \n        v__101675 = v_tmp_101754; \n        int v_index_101755 = v__101665[(v_l_id_101659 + (512 * v_MWidthC_1 * v_wg_id_101658) + (v_MWidthC_1 * v_i_101660))]; \n        if (v_index_101755 < 0) {\n          v__101677_0 = v__101675; \n        } else {\n          if (v_index_101755 >= v_VLength_3) {\n            v__101677_0 = v__101675; \n          } else {\n            v__101677_0 = v__101667[v_index_101755]; \n          }\n        }\n        v__101679_0 = absadd(v__101677_0, v__101666[(v_l_id_101659 + (512 * v_MWidthC_1 * v_wg_id_101658) + (v_MWidthC_1 * v_i_101660))]); \n        v__101673 = clmin(v__101679_0, v__101673); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101661 = 0; \n        v__101684[v_l_id_101659] = id(v__101673); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7890; \n      v_work_idx_7890 = 0; \n      int v_l_id_101662 = atomic_inc(&(v_work_idx_7890)); \n      while((v_l_id_101662 < 1)){\n        float v_tmp_101758 = 3.4028235E38f; \n        v__75402 = v_tmp_101758; \n        /* reduce_seq */\n        for (int v_i_101663 = 0; v_i_101663 < v_MWidthC_1; v_i_101663 = (1 + v_i_101663)) {\n          v__75402 = clmin(v__75402, v__101684[(v_i_101663 + (v_MWidthC_1 * v_l_id_101662))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101664 = 0; \n          v__101689[v_wg_id_101658] = doubleMultiplyAdd(v__75402, v__101669, v__101668[v_wg_id_101658], v__101670); \n        }\n        /* end map_seq */\n        v_l_id_101662 = atomic_inc(&(v_work_idx_7890)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__101665",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101666",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101667",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101669",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101670",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101684",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}