{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85357, const global float* restrict v__85358, const global float* restrict v__85359, const global float* restrict v__85360, float v__85361, float v__85362, global float* v__85379, global float* v__85369, local float* v__85374, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85365; \n  float v__85370; \n  float v__75402; \n  /* Private Memory */\n  float v__85367_0;\n  \n  for (int v_wg_id_85349 = get_group_id(0); v_wg_id_85349 < v_MHeight_2; v_wg_id_85349 = (v_wg_id_85349 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6434; \n      v_work_idx_6434 = 0; \n      int v_l_id_85350 = atomic_inc(&(v_work_idx_6434)); \n      while((v_l_id_85350 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85351 = 0; v_i_85351 < 32; v_i_85351 = (1 + v_i_85351)) {\n          float v_tmp_85432 = 3.4028235E38f; \n          v__85365 = v_tmp_85432; \n          int v_index_85433 = v__85357[(v_l_id_85350 + (32 * v_MWidthC_1 * v_wg_id_85349) + (v_MWidthC_1 * v_i_85351))]; \n          if (v_index_85433 < 0) {\n            v__85367_0 = v__85365; \n          } else {\n            if (v_index_85433 >= v_VLength_3) {\n              v__85367_0 = v__85365; \n            } else {\n              v__85367_0 = v__85359[v_index_85433]; \n            }\n          }\n          v__85369[(31 + (32 * v_MWidthC_1 * v_wg_id_85349) + (-1 * v_i_85351) + (32 * v_l_id_85350))] = absadd(v__85367_0, v__85358[(v_l_id_85350 + (32 * v_MWidthC_1 * v_wg_id_85349) + (v_MWidthC_1 * v_i_85351))]); \n        }\n        /* end map_seq */\n        float v_tmp_85434 = 3.4028235E38f; \n        v__85370 = v_tmp_85434; \n        /* reduce_seq */\n        for (int v_i_85352 = 0; v_i_85352 < 32; v_i_85352 = (1 + v_i_85352)) {\n          v__85370 = clmin(v__85370, v__85369[(v_i_85352 + (32 * v_MWidthC_1 * v_wg_id_85349) + (32 * v_l_id_85350))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85353 = 0; \n          v__85374[v_l_id_85350] = id(v__85370); \n        }\n        /* end map_seq */\n        v_l_id_85350 = atomic_inc(&(v_work_idx_6434)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6428; \n      v_work_idx_6428 = 0; \n      int v_l_id_85354 = atomic_inc(&(v_work_idx_6428)); \n      while((v_l_id_85354 < 1)){\n        float v_tmp_85437 = 3.4028235E38f; \n        v__75402 = v_tmp_85437; \n        /* reduce_seq */\n        for (int v_i_85355 = 0; v_i_85355 < v_MWidthC_1; v_i_85355 = (1 + v_i_85355)) {\n          v__75402 = clmin(v__75402, v__85374[(v_i_85355 + (v_MWidthC_1 * v_l_id_85354))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85356 = 0; \n          v__85379[v_wg_id_85349] = doubleMultiplyAdd(v__75402, v__85361, v__85360[v_wg_id_85349], v__85362); \n        }\n        /* end map_seq */\n        v_l_id_85354 = atomic_inc(&(v_work_idx_6428)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85357",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85358",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85359",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85361",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85362",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85369",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85374",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}