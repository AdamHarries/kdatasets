{
  "name" : "swrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100806, const global float* restrict v__100807, const global float* restrict v__100808, const global float* restrict v__100809, float v__100810, float v__100811, global float* v__100826, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100813; \n  float v__100816; \n  /* Private Memory */\n  float v__100818_0;\n  \n  float v__100820_0;\n  \n  int v__100824_0;\n  \n  for (int v_wg_id_100802 = get_group_id(0); v_wg_id_100802 < ((v_MHeight_2)/(512)); v_wg_id_100802 = (v_wg_id_100802 + get_num_groups(0))) {\n    for (int v_l_id_100803 = get_local_id(0); v_l_id_100803 < 512; v_l_id_100803 = (v_l_id_100803 + get_local_size(0))) {\n      float v_tmp_100874 = 3.4028235E38f; \n      v__100813 = v_tmp_100874; \n      /* reduce_while_seq */\n      for (int v_i_100804 = 0; v_i_100804 < v_MWidthC_1; v_i_100804 = (1 + v_i_100804)) {\n        v__100824_0 = check(v__100813, v__100806[(v_i_100804 + (512 * v_MWidthC_1 * v_wg_id_100802) + (v_MWidthC_1 * v_l_id_100803))]); \n        if (v__100824_0) {\n        } else {\n          break;\n        }\n        float v_tmp_100875 = 3.4028235E38f; \n        v__100816 = v_tmp_100875; \n        int v_index_100876 = v__100806[(v_i_100804 + (512 * v_MWidthC_1 * v_wg_id_100802) + (v_MWidthC_1 * v_l_id_100803))]; \n        if (v_index_100876 < 0) {\n          v__100818_0 = v__100816; \n        } else {\n          if (v_index_100876 >= v_VLength_3) {\n            v__100818_0 = v__100816; \n          } else {\n            v__100818_0 = v__100808[v_index_100876]; \n          }\n        }\n        v__100820_0 = absadd(v__100818_0, v__100807[(v_i_100804 + (512 * v_MWidthC_1 * v_wg_id_100802) + (v_MWidthC_1 * v_l_id_100803))]); \n        v__100813 = clmin(v__100820_0, v__100813); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100805 = 0; \n        v__100826[(v_l_id_100803 + (512 * v_wg_id_100802))] = doubleMultiplyAdd(v__100813, v__100810, v__100809[(v_l_id_100803 + (512 * v_wg_id_100802))], v__100811); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100808",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100810",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100811",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__100826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}