{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__90518, const global float* restrict v__90519, const global float* restrict v__90520, const global float* restrict v__90521, float v__90522, float v__90523, global float* v__90541, global int* v__90525, local float* v__90536, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90527; \n  float v__90529; \n  float v__75402; \n  /* Private Memory */\n  float v__90531_0;\n  \n  float v__90533_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6895 = v__90525; \n    local int v_w_id_90511; \n    if (get_local_id(0) == 0) {\n      v_w_id_90511 = atomic_inc(v_work_idx_6895); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90511 < v_MHeight_2)){\n      for (int v_l_id_90512 = get_local_id(0); v_l_id_90512 < v_MWidthC_1; v_l_id_90512 = (v_l_id_90512 + get_local_size(0))) {\n        float v_tmp_90604 = 3.4028235E38f; \n        v__90527 = v_tmp_90604; \n        /* reduce_seq */\n        for (int v_i_90513 = 0; v_i_90513 < 64; v_i_90513 = (1 + v_i_90513)) {\n          float v_tmp_90605 = 3.4028235E38f; \n          v__90529 = v_tmp_90605; \n          int v_index_90606 = v__90518[(v_l_id_90512 + (64 * v_MWidthC_1 * v_w_id_90511) + (v_MWidthC_1 * v_i_90513))]; \n          if (v_index_90606 < 0) {\n            v__90531_0 = v__90529; \n          } else {\n            if (v_index_90606 >= v_VLength_3) {\n              v__90531_0 = v__90529; \n            } else {\n              v__90531_0 = v__90520[v_index_90606]; \n            }\n          }\n          v__90533_0 = absadd(v__90531_0, v__90519[(v_l_id_90512 + (64 * v_MWidthC_1 * v_w_id_90511) + (v_MWidthC_1 * v_i_90513))]); \n          v__90527 = clmin(v__90533_0, v__90527); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90514 = 0; \n          v__90536[v_l_id_90512] = id(v__90527); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90515 = get_local_id(0); \n        float v_tmp_90609 = 3.4028235E38f; \n        v__75402 = v_tmp_90609; \n        /* reduce_seq */\n        for (int v_i_90516 = 0; v_i_90516 < v_MWidthC_1; v_i_90516 = (1 + v_i_90516)) {\n          v__75402 = clmin(v__75402, v__90536[(v_i_90516 + (v_MWidthC_1 * v_l_id_90515))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90517 = 0; \n          v__90541[v_w_id_90511] = doubleMultiplyAdd(v__75402, v__90522, v__90521[v_w_id_90511], v__90523); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90511 = atomic_inc(v_work_idx_6895); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90518",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90519",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90520",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90522",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90523",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90525",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90536",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}