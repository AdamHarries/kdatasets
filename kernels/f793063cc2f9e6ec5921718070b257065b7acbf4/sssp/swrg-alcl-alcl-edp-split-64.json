{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__89837, const global float* restrict v__89838, const global float* restrict v__89839, const global float* restrict v__89840, float v__89841, float v__89842, global float* v__89861, local float* v__89856, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89845; \n  float v__89847; \n  float v__75402; \n  /* Private Memory */\n  float v__89849_0;\n  \n  float v__89851_0;\n  \n  int v__89855_0;\n  \n  for (int v_wg_id_89830 = get_group_id(0); v_wg_id_89830 < v_MHeight_2; v_wg_id_89830 = (v_wg_id_89830 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6838; \n      v_work_idx_6838 = 0; \n      int v_l_id_89831 = atomic_inc(&(v_work_idx_6838)); \n      while((v_l_id_89831 < v_MWidthC_1)){\n        float v_tmp_89917 = 3.4028235E38f; \n        v__89845 = v_tmp_89917; \n        /* reduce_while_seq */\n        for (int v_i_89832 = 0; v_i_89832 < 64; v_i_89832 = (1 + v_i_89832)) {\n          v__89855_0 = check(v__89845, v__89837[(v_l_id_89831 + (64 * v_MWidthC_1 * v_wg_id_89830) + (v_MWidthC_1 * v_i_89832))]); \n          if (v__89855_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89918 = 3.4028235E38f; \n          v__89847 = v_tmp_89918; \n          int v_index_89919 = v__89837[(v_l_id_89831 + (64 * v_MWidthC_1 * v_wg_id_89830) + (v_MWidthC_1 * v_i_89832))]; \n          if (v_index_89919 < 0) {\n            v__89849_0 = v__89847; \n          } else {\n            if (v_index_89919 >= v_VLength_3) {\n              v__89849_0 = v__89847; \n            } else {\n              v__89849_0 = v__89839[v_index_89919]; \n            }\n          }\n          v__89851_0 = absadd(v__89849_0, v__89838[(v_l_id_89831 + (64 * v_MWidthC_1 * v_wg_id_89830) + (v_MWidthC_1 * v_i_89832))]); \n          v__89845 = clmin(v__89851_0, v__89845); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89833 = 0; \n          v__89856[v_l_id_89831] = id(v__89845); \n        }\n        /* end map_seq */\n        v_l_id_89831 = atomic_inc(&(v_work_idx_6838)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6833; \n      v_work_idx_6833 = 0; \n      int v_l_id_89834 = atomic_inc(&(v_work_idx_6833)); \n      while((v_l_id_89834 < 1)){\n        float v_tmp_89922 = 3.4028235E38f; \n        v__75402 = v_tmp_89922; \n        /* reduce_seq */\n        for (int v_i_89835 = 0; v_i_89835 < v_MWidthC_1; v_i_89835 = (1 + v_i_89835)) {\n          v__75402 = clmin(v__75402, v__89856[(v_i_89835 + (v_MWidthC_1 * v_l_id_89834))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89836 = 0; \n          v__89861[v_wg_id_89830] = doubleMultiplyAdd(v__75402, v__89841, v__89840[v_wg_id_89830], v__89842); \n        }\n        /* end map_seq */\n        v_l_id_89834 = atomic_inc(&(v_work_idx_6833)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__89837",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89838",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__89861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89856",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}