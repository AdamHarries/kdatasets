{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80001, const global float* restrict v__80002, const global float* restrict v__80003, const global float* restrict v__80004, float v__80005, float v__80006, global float* v__80023, global float* v__80013, local float* v__80018, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80009; \n  float v__80014; \n  float v__75402; \n  /* Private Memory */\n  float v__80011_0;\n  \n  for (int v_wg_id_79993 = get_group_id(0); v_wg_id_79993 < v_MHeight_2; v_wg_id_79993 = (v_wg_id_79993 + get_num_groups(0))) {\n    for (int v_l_id_79994 = get_local_id(0); v_l_id_79994 < v_MWidthC_1; v_l_id_79994 = (v_l_id_79994 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_79995 = 0; v_i_79995 < 16; v_i_79995 = (1 + v_i_79995)) {\n        float v_tmp_80084 = 3.4028235E38f; \n        v__80009 = v_tmp_80084; \n        int v_index_80085 = v__80001[(v_l_id_79994 + (16 * v_MWidthC_1 * v_wg_id_79993) + (v_MWidthC_1 * v_i_79995))]; \n        if (v_index_80085 < 0) {\n          v__80011_0 = v__80009; \n        } else {\n          if (v_index_80085 >= v_VLength_3) {\n            v__80011_0 = v__80009; \n          } else {\n            v__80011_0 = v__80003[v_index_80085]; \n          }\n        }\n        v__80013[(15 + (16 * v_MWidthC_1 * v_wg_id_79993) + (-1 * v_i_79995) + (16 * v_l_id_79994))] = absadd(v__80011_0, v__80002[(v_l_id_79994 + (16 * v_MWidthC_1 * v_wg_id_79993) + (v_MWidthC_1 * v_i_79995))]); \n      }\n      /* end map_seq */\n      float v_tmp_80086 = 3.4028235E38f; \n      v__80014 = v_tmp_80086; \n      /* reduce_seq */\n      for (int v_i_79996 = 0; v_i_79996 < 16; v_i_79996 = (1 + v_i_79996)) {\n        v__80014 = clmin(v__80014, v__80013[(v_i_79996 + (16 * v_MWidthC_1 * v_wg_id_79993) + (16 * v_l_id_79994))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_79997 = 0; \n        v__80018[v_l_id_79994] = id(v__80014); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5951; \n      v_work_idx_5951 = 0; \n      int v_l_id_79998 = atomic_inc(&(v_work_idx_5951)); \n      while((v_l_id_79998 < 1)){\n        float v_tmp_80089 = 3.4028235E38f; \n        v__75402 = v_tmp_80089; \n        /* reduce_seq */\n        for (int v_i_79999 = 0; v_i_79999 < v_MWidthC_1; v_i_79999 = (1 + v_i_79999)) {\n          v__75402 = clmin(v__75402, v__80018[(v_i_79999 + (v_MWidthC_1 * v_l_id_79998))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80000 = 0; \n          v__80023[v_wg_id_79993] = doubleMultiplyAdd(v__75402, v__80005, v__80004[v_wg_id_79993], v__80006); \n        }\n        /* end map_seq */\n        v_l_id_79998 = atomic_inc(&(v_work_idx_5951)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80001",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80002",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80003",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80005",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80006",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80013",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80023",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80018",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}