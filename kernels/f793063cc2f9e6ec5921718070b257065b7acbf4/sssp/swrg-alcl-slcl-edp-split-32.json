{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85253, const global float* restrict v__85254, const global float* restrict v__85255, const global float* restrict v__85256, float v__85257, float v__85258, global float* v__85277, local float* v__85272, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85261; \n  float v__85263; \n  float v__75402; \n  /* Private Memory */\n  float v__85265_0;\n  \n  float v__85267_0;\n  \n  int v__85271_0;\n  \n  for (int v_wg_id_85246 = get_group_id(0); v_wg_id_85246 < v_MHeight_2; v_wg_id_85246 = (v_wg_id_85246 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6423; \n      v_work_idx_6423 = 0; \n      int v_l_id_85247 = atomic_inc(&(v_work_idx_6423)); \n      while((v_l_id_85247 < v_MWidthC_1)){\n        float v_tmp_85337 = 3.4028235E38f; \n        v__85261 = v_tmp_85337; \n        /* reduce_while_seq */\n        for (int v_i_85248 = 0; v_i_85248 < 32; v_i_85248 = (1 + v_i_85248)) {\n          v__85271_0 = check(v__85261, v__85253[(v_l_id_85247 + (32 * v_MWidthC_1 * v_wg_id_85246) + (v_MWidthC_1 * v_i_85248))]); \n          if (v__85271_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85338 = 3.4028235E38f; \n          v__85263 = v_tmp_85338; \n          int v_index_85339 = v__85253[(v_l_id_85247 + (32 * v_MWidthC_1 * v_wg_id_85246) + (v_MWidthC_1 * v_i_85248))]; \n          if (v_index_85339 < 0) {\n            v__85265_0 = v__85263; \n          } else {\n            if (v_index_85339 >= v_VLength_3) {\n              v__85265_0 = v__85263; \n            } else {\n              v__85265_0 = v__85255[v_index_85339]; \n            }\n          }\n          v__85267_0 = absadd(v__85265_0, v__85254[(v_l_id_85247 + (32 * v_MWidthC_1 * v_wg_id_85246) + (v_MWidthC_1 * v_i_85248))]); \n          v__85261 = clmin(v__85267_0, v__85261); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85249 = 0; \n          v__85272[v_l_id_85247] = id(v__85261); \n        }\n        /* end map_seq */\n        v_l_id_85247 = atomic_inc(&(v_work_idx_6423)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85250 = get_local_id(0); \n      float v_tmp_85342 = 3.4028235E38f; \n      v__75402 = v_tmp_85342; \n      /* reduce_seq */\n      for (int v_i_85251 = 0; v_i_85251 < v_MWidthC_1; v_i_85251 = (1 + v_i_85251)) {\n        v__75402 = clmin(v__75402, v__85272[(v_i_85251 + (v_MWidthC_1 * v_l_id_85250))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85252 = 0; \n        v__85277[v_wg_id_85246] = doubleMultiplyAdd(v__75402, v__85257, v__85256[v_wg_id_85246], v__85258); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85253",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85254",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85255",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85257",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85258",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85272",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}