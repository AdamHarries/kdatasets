{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__102225, const global float* restrict v__102226, const global float* restrict v__102227, const global float* restrict v__102228, float v__102229, float v__102230, global float* v__102247, global float* v__102237, local float* v__102242, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102233; \n  float v__102238; \n  float v__75402; \n  /* Private Memory */\n  float v__102235_0;\n  \n  for (int v_wg_id_102217 = get_group_id(0); v_wg_id_102217 < v_MHeight_2; v_wg_id_102217 = (v_wg_id_102217 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7941; \n      v_work_idx_7941 = 0; \n      int v_l_id_102218 = atomic_inc(&(v_work_idx_7941)); \n      while((v_l_id_102218 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102219 = 0; v_i_102219 < 512; v_i_102219 = (1 + v_i_102219)) {\n          float v_tmp_102304 = 3.4028235E38f; \n          v__102233 = v_tmp_102304; \n          int v_index_102305 = v__102225[(v_l_id_102218 + (512 * v_MWidthC_1 * v_wg_id_102217) + (v_MWidthC_1 * v_i_102219))]; \n          if (v_index_102305 < 0) {\n            v__102235_0 = v__102233; \n          } else {\n            if (v_index_102305 >= v_VLength_3) {\n              v__102235_0 = v__102233; \n            } else {\n              v__102235_0 = v__102227[v_index_102305]; \n            }\n          }\n          v__102237[(511 + (512 * v_MWidthC_1 * v_wg_id_102217) + (-1 * v_i_102219) + (512 * v_l_id_102218))] = absadd(v__102235_0, v__102226[(v_l_id_102218 + (512 * v_MWidthC_1 * v_wg_id_102217) + (v_MWidthC_1 * v_i_102219))]); \n        }\n        /* end map_seq */\n        float v_tmp_102306 = 3.4028235E38f; \n        v__102238 = v_tmp_102306; \n        /* reduce_seq */\n        for (int v_i_102220 = 0; v_i_102220 < 512; v_i_102220 = (1 + v_i_102220)) {\n          v__102238 = clmin(v__102238, v__102237[(v_i_102220 + (512 * v_MWidthC_1 * v_wg_id_102217) + (512 * v_l_id_102218))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102221 = 0; \n          v__102242[v_l_id_102218] = id(v__102238); \n        }\n        /* end map_seq */\n        v_l_id_102218 = atomic_inc(&(v_work_idx_7941)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_102222 = get_local_id(0); \n      float v_tmp_102309 = 3.4028235E38f; \n      v__75402 = v_tmp_102309; \n      /* reduce_seq */\n      for (int v_i_102223 = 0; v_i_102223 < v_MWidthC_1; v_i_102223 = (1 + v_i_102223)) {\n        v__75402 = clmin(v__75402, v__102242[(v_i_102223 + (v_MWidthC_1 * v_l_id_102222))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_102224 = 0; \n        v__102247[v_wg_id_102217] = doubleMultiplyAdd(v__75402, v__102229, v__102228[v_wg_id_102217], v__102230); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102225",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102226",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102227",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102229",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102230",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102237",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102242",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}