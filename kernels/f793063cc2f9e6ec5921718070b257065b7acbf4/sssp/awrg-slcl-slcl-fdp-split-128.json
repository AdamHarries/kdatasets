{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__94810, const global float* restrict v__94811, const global float* restrict v__94812, const global float* restrict v__94813, float v__94814, float v__94815, global float* v__94833, global int* v__94817, local float* v__94828, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94819; \n  float v__94821; \n  float v__75402; \n  /* Private Memory */\n  float v__94823_0;\n  \n  float v__94825_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7279 = v__94817; \n    local int v_w_id_94803; \n    if (get_local_id(0) == 0) {\n      v_w_id_94803 = atomic_inc(v_work_idx_7279); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94803 < v_MHeight_2)){\n      for (int v_l_id_94804 = get_local_id(0); v_l_id_94804 < v_MWidthC_1; v_l_id_94804 = (v_l_id_94804 + get_local_size(0))) {\n        float v_tmp_94896 = 3.4028235E38f; \n        v__94819 = v_tmp_94896; \n        /* reduce_seq */\n        for (int v_i_94805 = 0; v_i_94805 < 128; v_i_94805 = (1 + v_i_94805)) {\n          float v_tmp_94897 = 3.4028235E38f; \n          v__94821 = v_tmp_94897; \n          int v_index_94898 = v__94810[(v_l_id_94804 + (128 * v_MWidthC_1 * v_w_id_94803) + (v_MWidthC_1 * v_i_94805))]; \n          if (v_index_94898 < 0) {\n            v__94823_0 = v__94821; \n          } else {\n            if (v_index_94898 >= v_VLength_3) {\n              v__94823_0 = v__94821; \n            } else {\n              v__94823_0 = v__94812[v_index_94898]; \n            }\n          }\n          v__94825_0 = absadd(v__94823_0, v__94811[(v_l_id_94804 + (128 * v_MWidthC_1 * v_w_id_94803) + (v_MWidthC_1 * v_i_94805))]); \n          v__94819 = clmin(v__94825_0, v__94819); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94806 = 0; \n          v__94828[v_l_id_94804] = id(v__94819); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_94807 = get_local_id(0); \n        float v_tmp_94901 = 3.4028235E38f; \n        v__75402 = v_tmp_94901; \n        /* reduce_seq */\n        for (int v_i_94808 = 0; v_i_94808 < v_MWidthC_1; v_i_94808 = (1 + v_i_94808)) {\n          v__75402 = clmin(v__75402, v__94828[(v_i_94808 + (v_MWidthC_1 * v_l_id_94807))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94809 = 0; \n          v__94833[v_w_id_94803] = doubleMultiplyAdd(v__75402, v__94814, v__94813[v_w_id_94803], v__94815); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94803 = atomic_inc(v_work_idx_7279); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94810",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94811",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94812",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94814",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94815",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94817",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94828",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}