{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__88367, const global float* restrict v__88368, const global float* restrict v__88369, const global float* restrict v__88370, float v__88371, float v__88372, global float* v__88389, local float* v__88384, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88375; \n  float v__88377; \n  float v__75402; \n  /* Private Memory */\n  float v__88379_0;\n  \n  float v__88381_0;\n  \n  for (int v_wg_id_88360 = get_group_id(0); v_wg_id_88360 < v_MHeight_2; v_wg_id_88360 = (v_wg_id_88360 + get_num_groups(0))) {\n    for (int v_l_id_88361 = get_local_id(0); v_l_id_88361 < v_MWidthC_1; v_l_id_88361 = (v_l_id_88361 + get_local_size(0))) {\n      float v_tmp_88454 = 3.4028235E38f; \n      v__88375 = v_tmp_88454; \n      /* reduce_seq */\n      for (int v_i_88362 = 0; v_i_88362 < 64; v_i_88362 = (1 + v_i_88362)) {\n        float v_tmp_88455 = 3.4028235E38f; \n        v__88377 = v_tmp_88455; \n        int v_index_88456 = v__88367[(v_l_id_88361 + (64 * v_MWidthC_1 * v_wg_id_88360) + (v_MWidthC_1 * v_i_88362))]; \n        if (v_index_88456 < 0) {\n          v__88379_0 = v__88377; \n        } else {\n          if (v_index_88456 >= v_VLength_3) {\n            v__88379_0 = v__88377; \n          } else {\n            v__88379_0 = v__88369[v_index_88456]; \n          }\n        }\n        v__88381_0 = absadd(v__88379_0, v__88368[(v_l_id_88361 + (64 * v_MWidthC_1 * v_wg_id_88360) + (v_MWidthC_1 * v_i_88362))]); \n        v__88375 = clmin(v__88381_0, v__88375); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88363 = 0; \n        v__88384[v_l_id_88361] = id(v__88375); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_88364 = get_local_id(0); \n      float v_tmp_88459 = 3.4028235E38f; \n      v__75402 = v_tmp_88459; \n      /* reduce_seq */\n      for (int v_i_88365 = 0; v_i_88365 < v_MWidthC_1; v_i_88365 = (1 + v_i_88365)) {\n        v__75402 = clmin(v__75402, v__88384[(v_i_88365 + (v_MWidthC_1 * v_l_id_88364))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88366 = 0; \n        v__88389[v_wg_id_88360] = doubleMultiplyAdd(v__75402, v__88371, v__88370[v_wg_id_88360], v__88372); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__88367",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88368",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88369",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88370",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88371",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88372",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88389",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88384",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}