{
  "name" : "glb-edp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74503, const global float* restrict v__74504, const global float* restrict v__74505, const global float* restrict v__74506, float v__74507, float v__74508, global float* v__74523, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74510; \n  float v__74513; \n  /* Private Memory */\n  float v__74515; \n  float v__74517; \n  int v__74521; \n  for (int v_gl_id_74500 = get_global_id(0); v_gl_id_74500 < v_MHeight_2; v_gl_id_74500 = (v_gl_id_74500 + get_global_size(0))) {\n    float v_tmp_74556 = 3.4028235E38f; \n    v__74510 = v_tmp_74556; \n    /* reduce_while_seq */\n    for (int v_i_74501 = 0; v_i_74501 < v_MWidthC_1; v_i_74501 = (1 + v_i_74501)) {\n      v__74521 = check(v__74510, v__74503[(v_i_74501 + (v_MWidthC_1 * v_gl_id_74500))]); \n      if (v__74521) {\n      } else {\n        break;\n      }\n      float v_tmp_74557 = 3.4028235E38f; \n      v__74513 = v_tmp_74557; \n      int v_index_74558 = v__74503[(v_i_74501 + (v_MWidthC_1 * v_gl_id_74500))]; \n      if (v_index_74558 < 0) {\n        v__74515 = v__74513; \n      } else {\n        if (v_index_74558 >= v_VLength_3) {\n          v__74515 = v__74513; \n        } else {\n          v__74515 = v__74505[v_index_74558]; \n        }\n      }\n      v__74517 = absadd(v__74515, v__74504[(v_i_74501 + (v_MWidthC_1 * v_gl_id_74500))]); \n      v__74510 = clmin(v__74517, v__74510); \n    }\n    /* end reduce_while_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_74502 = 0; \n      v__74523[v_gl_id_74500] = doubleMultiplyAdd(v__74510, v__74507, v__74506[v_gl_id_74500], v__74508); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__74503",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74504",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74505",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74506",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74507",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74508",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__74523",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}