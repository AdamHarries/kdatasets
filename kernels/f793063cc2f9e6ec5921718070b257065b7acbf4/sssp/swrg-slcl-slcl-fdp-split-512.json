{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__101243, const global float* restrict v__101244, const global float* restrict v__101245, const global float* restrict v__101246, float v__101247, float v__101248, global float* v__101265, local float* v__101260, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101251; \n  float v__101253; \n  float v__75402; \n  /* Private Memory */\n  float v__101255_0;\n  \n  float v__101257_0;\n  \n  for (int v_wg_id_101236 = get_group_id(0); v_wg_id_101236 < v_MHeight_2; v_wg_id_101236 = (v_wg_id_101236 + get_num_groups(0))) {\n    for (int v_l_id_101237 = get_local_id(0); v_l_id_101237 < v_MWidthC_1; v_l_id_101237 = (v_l_id_101237 + get_local_size(0))) {\n      float v_tmp_101330 = 3.4028235E38f; \n      v__101251 = v_tmp_101330; \n      /* reduce_seq */\n      for (int v_i_101238 = 0; v_i_101238 < 512; v_i_101238 = (1 + v_i_101238)) {\n        float v_tmp_101331 = 3.4028235E38f; \n        v__101253 = v_tmp_101331; \n        int v_index_101332 = v__101243[(v_l_id_101237 + (512 * v_MWidthC_1 * v_wg_id_101236) + (v_MWidthC_1 * v_i_101238))]; \n        if (v_index_101332 < 0) {\n          v__101255_0 = v__101253; \n        } else {\n          if (v_index_101332 >= v_VLength_3) {\n            v__101255_0 = v__101253; \n          } else {\n            v__101255_0 = v__101245[v_index_101332]; \n          }\n        }\n        v__101257_0 = absadd(v__101255_0, v__101244[(v_l_id_101237 + (512 * v_MWidthC_1 * v_wg_id_101236) + (v_MWidthC_1 * v_i_101238))]); \n        v__101251 = clmin(v__101257_0, v__101251); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101239 = 0; \n        v__101260[v_l_id_101237] = id(v__101251); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101240 = get_local_id(0); \n      float v_tmp_101335 = 3.4028235E38f; \n      v__75402 = v_tmp_101335; \n      /* reduce_seq */\n      for (int v_i_101241 = 0; v_i_101241 < v_MWidthC_1; v_i_101241 = (1 + v_i_101241)) {\n        v__75402 = clmin(v__75402, v__101260[(v_i_101241 + (v_MWidthC_1 * v_l_id_101240))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101242 = 0; \n        v__101265[v_wg_id_101236] = doubleMultiplyAdd(v__75402, v__101247, v__101246[v_wg_id_101236], v__101248); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101243",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101244",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101245",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101246",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101247",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101248",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101265",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101260",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}