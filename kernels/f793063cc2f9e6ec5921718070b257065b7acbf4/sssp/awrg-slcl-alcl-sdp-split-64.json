{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__90734, const global float* restrict v__90735, const global float* restrict v__90736, const global float* restrict v__90737, float v__90738, float v__90739, global float* v__90757, global float* v__90747, global int* v__90741, local float* v__90752, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90743; \n  float v__90748; \n  float v__75402; \n  /* Private Memory */\n  float v__90745_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6915 = v__90741; \n    local int v_w_id_90726; \n    if (get_local_id(0) == 0) {\n      v_w_id_90726 = atomic_inc(v_work_idx_6915); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90726 < v_MHeight_2)){\n      for (int v_l_id_90727 = get_local_id(0); v_l_id_90727 < v_MWidthC_1; v_l_id_90727 = (v_l_id_90727 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_90728 = 0; v_i_90728 < 64; v_i_90728 = (1 + v_i_90728)) {\n          float v_tmp_90816 = 3.4028235E38f; \n          v__90743 = v_tmp_90816; \n          int v_index_90817 = v__90734[(v_l_id_90727 + (64 * v_MWidthC_1 * v_w_id_90726) + (v_MWidthC_1 * v_i_90728))]; \n          if (v_index_90817 < 0) {\n            v__90745_0 = v__90743; \n          } else {\n            if (v_index_90817 >= v_VLength_3) {\n              v__90745_0 = v__90743; \n            } else {\n              v__90745_0 = v__90736[v_index_90817]; \n            }\n          }\n          v__90747[(63 + (64 * v_MWidthC_1 * v_w_id_90726) + (-1 * v_i_90728) + (64 * v_l_id_90727))] = absadd(v__90745_0, v__90735[(v_l_id_90727 + (64 * v_MWidthC_1 * v_w_id_90726) + (v_MWidthC_1 * v_i_90728))]); \n        }\n        /* end map_seq */\n        float v_tmp_90818 = 3.4028235E38f; \n        v__90748 = v_tmp_90818; \n        /* reduce_seq */\n        for (int v_i_90729 = 0; v_i_90729 < 64; v_i_90729 = (1 + v_i_90729)) {\n          v__90748 = clmin(v__90748, v__90747[(v_i_90729 + (64 * v_MWidthC_1 * v_w_id_90726) + (64 * v_l_id_90727))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90730 = 0; \n          v__90752[v_l_id_90727] = id(v__90748); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6908; \n        v_work_idx_6908 = 0; \n        int v_l_id_90731 = atomic_inc(&(v_work_idx_6908)); \n        while((v_l_id_90731 < 1)){\n          float v_tmp_90821 = 3.4028235E38f; \n          v__75402 = v_tmp_90821; \n          /* reduce_seq */\n          for (int v_i_90732 = 0; v_i_90732 < v_MWidthC_1; v_i_90732 = (1 + v_i_90732)) {\n            v__75402 = clmin(v__75402, v__90752[(v_i_90732 + (v_MWidthC_1 * v_l_id_90731))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90733 = 0; \n            v__90757[v_w_id_90726] = doubleMultiplyAdd(v__75402, v__90738, v__90737[v_w_id_90726], v__90739); \n          }\n          /* end map_seq */\n          v_l_id_90731 = atomic_inc(&(v_work_idx_6908)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90726 = atomic_inc(v_work_idx_6915); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90734",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90735",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90747",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90741",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90752",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}