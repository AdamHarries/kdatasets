{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76473, const global float* restrict v__76474, const global float* restrict v__76475, const global float* restrict v__76476, float v__76477, float v__76478, global float* v__76495, global float* v__76485, local float* v__76490, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76481; \n  float v__76486; \n  float v__75402; \n  /* Private Memory */\n  float v__76483_0;\n  \n  for (int v_wg_id_76465 = get_group_id(0); v_wg_id_76465 < v_MHeight_2; v_wg_id_76465 = (v_wg_id_76465 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5637; \n      v_work_idx_5637 = 0; \n      int v_l_id_76466 = atomic_inc(&(v_work_idx_5637)); \n      while((v_l_id_76466 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_76467 = 0; v_i_76467 < 8; v_i_76467 = (1 + v_i_76467)) {\n          float v_tmp_76552 = 3.4028235E38f; \n          v__76481 = v_tmp_76552; \n          int v_index_76553 = v__76473[(v_l_id_76466 + (8 * v_MWidthC_1 * v_wg_id_76465) + (v_MWidthC_1 * v_i_76467))]; \n          if (v_index_76553 < 0) {\n            v__76483_0 = v__76481; \n          } else {\n            if (v_index_76553 >= v_VLength_3) {\n              v__76483_0 = v__76481; \n            } else {\n              v__76483_0 = v__76475[v_index_76553]; \n            }\n          }\n          v__76485[(7 + (8 * v_MWidthC_1 * v_wg_id_76465) + (-1 * v_i_76467) + (8 * v_l_id_76466))] = absadd(v__76483_0, v__76474[(v_l_id_76466 + (8 * v_MWidthC_1 * v_wg_id_76465) + (v_MWidthC_1 * v_i_76467))]); \n        }\n        /* end map_seq */\n        float v_tmp_76554 = 3.4028235E38f; \n        v__76486 = v_tmp_76554; \n        /* reduce_seq */\n        for (int v_i_76468 = 0; v_i_76468 < 8; v_i_76468 = (1 + v_i_76468)) {\n          v__76486 = clmin(v__76486, v__76485[(v_i_76468 + (8 * v_MWidthC_1 * v_wg_id_76465) + (8 * v_l_id_76466))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76469 = 0; \n          v__76490[v_l_id_76466] = id(v__76486); \n        }\n        /* end map_seq */\n        v_l_id_76466 = atomic_inc(&(v_work_idx_5637)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_76470 = get_local_id(0); \n      float v_tmp_76557 = 3.4028235E38f; \n      v__75402 = v_tmp_76557; \n      /* reduce_seq */\n      for (int v_i_76471 = 0; v_i_76471 < v_MWidthC_1; v_i_76471 = (1 + v_i_76471)) {\n        v__75402 = clmin(v__75402, v__76490[(v_i_76471 + (v_MWidthC_1 * v_l_id_76470))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_76472 = 0; \n        v__76495[v_wg_id_76465] = doubleMultiplyAdd(v__75402, v__76477, v__76476[v_wg_id_76465], v__76478); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76473",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76474",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76475",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76476",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76477",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76478",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76485",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__76495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76490",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}