{
  "name" : "swrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80205, const global float* restrict v__80206, const global float* restrict v__80207, const global float* restrict v__80208, float v__80209, float v__80210, global float* v__80229, local float* v__80224, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80213; \n  float v__80215; \n  float v__75402; \n  /* Private Memory */\n  float v__80217_0;\n  \n  float v__80219_0;\n  \n  int v__80223_0;\n  \n  for (int v_wg_id_80198 = get_group_id(0); v_wg_id_80198 < v_MHeight_2; v_wg_id_80198 = (v_wg_id_80198 + get_num_groups(0))) {\n    for (int v_l_id_80199 = get_local_id(0); v_l_id_80199 < v_MWidthC_1; v_l_id_80199 = (v_l_id_80199 + get_local_size(0))) {\n      float v_tmp_80293 = 3.4028235E38f; \n      v__80213 = v_tmp_80293; \n      /* reduce_while_seq */\n      for (int v_i_80200 = 0; v_i_80200 < 16; v_i_80200 = (1 + v_i_80200)) {\n        v__80223_0 = check(v__80213, v__80205[(v_l_id_80199 + (16 * v_MWidthC_1 * v_wg_id_80198) + (v_MWidthC_1 * v_i_80200))]); \n        if (v__80223_0) {\n        } else {\n          break;\n        }\n        float v_tmp_80294 = 3.4028235E38f; \n        v__80215 = v_tmp_80294; \n        int v_index_80295 = v__80205[(v_l_id_80199 + (16 * v_MWidthC_1 * v_wg_id_80198) + (v_MWidthC_1 * v_i_80200))]; \n        if (v_index_80295 < 0) {\n          v__80217_0 = v__80215; \n        } else {\n          if (v_index_80295 >= v_VLength_3) {\n            v__80217_0 = v__80215; \n          } else {\n            v__80217_0 = v__80207[v_index_80295]; \n          }\n        }\n        v__80219_0 = absadd(v__80217_0, v__80206[(v_l_id_80199 + (16 * v_MWidthC_1 * v_wg_id_80198) + (v_MWidthC_1 * v_i_80200))]); \n        v__80213 = clmin(v__80219_0, v__80213); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80201 = 0; \n        v__80224[v_l_id_80199] = id(v__80213); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5970; \n      v_work_idx_5970 = 0; \n      int v_l_id_80202 = atomic_inc(&(v_work_idx_5970)); \n      while((v_l_id_80202 < 1)){\n        float v_tmp_80298 = 3.4028235E38f; \n        v__75402 = v_tmp_80298; \n        /* reduce_seq */\n        for (int v_i_80203 = 0; v_i_80203 < v_MWidthC_1; v_i_80203 = (1 + v_i_80203)) {\n          v__75402 = clmin(v__75402, v__80224[(v_i_80203 + (v_MWidthC_1 * v_l_id_80202))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80204 = 0; \n          v__80229[v_wg_id_80198] = doubleMultiplyAdd(v__75402, v__80209, v__80208[v_wg_id_80198], v__80210); \n        }\n        /* end map_seq */\n        v_l_id_80202 = atomic_inc(&(v_work_idx_5970)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80205",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80206",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__80229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80224",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}