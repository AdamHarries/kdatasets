{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__90009, const global float* restrict v__90010, const global float* restrict v__90011, const global float* restrict v__90012, float v__90013, float v__90014, global float* v__90028, global int* v__90016, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90018; \n  float v__90020; \n  /* Private Memory */\n  float v__90022_0;\n  \n  float v__90024_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6852 = v__90016; \n    local int v_w_id_90005; \n    if (get_local_id(0) == 0) {\n      v_w_id_90005 = atomic_inc(v_work_idx_6852); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90005 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_90006 = get_local_id(0); v_l_id_90006 < 64; v_l_id_90006 = (v_l_id_90006 + get_local_size(0))) {\n        float v_tmp_90069 = 3.4028235E38f; \n        v__90018 = v_tmp_90069; \n        /* reduce_seq */\n        for (int v_i_90007 = 0; v_i_90007 < v_MWidthC_1; v_i_90007 = (1 + v_i_90007)) {\n          float v_tmp_90070 = 3.4028235E38f; \n          v__90020 = v_tmp_90070; \n          int v_index_90071 = v__90009[(v_i_90007 + (64 * v_MWidthC_1 * v_w_id_90005) + (v_MWidthC_1 * v_l_id_90006))]; \n          if (v_index_90071 < 0) {\n            v__90022_0 = v__90020; \n          } else {\n            if (v_index_90071 >= v_VLength_3) {\n              v__90022_0 = v__90020; \n            } else {\n              v__90022_0 = v__90011[v_index_90071]; \n            }\n          }\n          v__90024_0 = absadd(v__90022_0, v__90010[(v_i_90007 + (64 * v_MWidthC_1 * v_w_id_90005) + (v_MWidthC_1 * v_l_id_90006))]); \n          v__90018 = clmin(v__90024_0, v__90018); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90008 = 0; \n          v__90028[(v_l_id_90006 + (64 * v_w_id_90005))] = doubleMultiplyAdd(v__90018, v__90013, v__90012[(v_l_id_90006 + (64 * v_w_id_90005))], v__90014); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_90005 = atomic_inc(v_work_idx_6852); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90009",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90011",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90013",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90014",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90016",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}