{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__88789, const global float* restrict v__88790, const global float* restrict v__88791, const global float* restrict v__88792, float v__88793, float v__88794, global float* v__88813, local float* v__88808, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88797; \n  float v__88799; \n  float v__75402; \n  /* Private Memory */\n  float v__88801_0;\n  \n  float v__88803_0;\n  \n  int v__88807_0;\n  \n  for (int v_wg_id_88782 = get_group_id(0); v_wg_id_88782 < v_MHeight_2; v_wg_id_88782 = (v_wg_id_88782 + get_num_groups(0))) {\n    for (int v_l_id_88783 = get_local_id(0); v_l_id_88783 < v_MWidthC_1; v_l_id_88783 = (v_l_id_88783 + get_local_size(0))) {\n      float v_tmp_88877 = 3.4028235E38f; \n      v__88797 = v_tmp_88877; \n      /* reduce_while_seq */\n      for (int v_i_88784 = 0; v_i_88784 < 64; v_i_88784 = (1 + v_i_88784)) {\n        v__88807_0 = check(v__88797, v__88789[(v_l_id_88783 + (64 * v_MWidthC_1 * v_wg_id_88782) + (v_MWidthC_1 * v_i_88784))]); \n        if (v__88807_0) {\n        } else {\n          break;\n        }\n        float v_tmp_88878 = 3.4028235E38f; \n        v__88799 = v_tmp_88878; \n        int v_index_88879 = v__88789[(v_l_id_88783 + (64 * v_MWidthC_1 * v_wg_id_88782) + (v_MWidthC_1 * v_i_88784))]; \n        if (v_index_88879 < 0) {\n          v__88801_0 = v__88799; \n        } else {\n          if (v_index_88879 >= v_VLength_3) {\n            v__88801_0 = v__88799; \n          } else {\n            v__88801_0 = v__88791[v_index_88879]; \n          }\n        }\n        v__88803_0 = absadd(v__88801_0, v__88790[(v_l_id_88783 + (64 * v_MWidthC_1 * v_wg_id_88782) + (v_MWidthC_1 * v_i_88784))]); \n        v__88797 = clmin(v__88803_0, v__88797); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88785 = 0; \n        v__88808[v_l_id_88783] = id(v__88797); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6738; \n      v_work_idx_6738 = 0; \n      int v_l_id_88786 = atomic_inc(&(v_work_idx_6738)); \n      while((v_l_id_88786 < 1)){\n        float v_tmp_88882 = 3.4028235E38f; \n        v__75402 = v_tmp_88882; \n        /* reduce_seq */\n        for (int v_i_88787 = 0; v_i_88787 < v_MWidthC_1; v_i_88787 = (1 + v_i_88787)) {\n          v__75402 = clmin(v__75402, v__88808[(v_i_88787 + (v_MWidthC_1 * v_l_id_88786))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88788 = 0; \n          v__88813[v_wg_id_88782] = doubleMultiplyAdd(v__75402, v__88793, v__88792[v_wg_id_88782], v__88794); \n        }\n        /* end map_seq */\n        v_l_id_88786 = atomic_inc(&(v_work_idx_6738)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88789",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88790",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88791",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88792",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88793",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88794",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88808",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}