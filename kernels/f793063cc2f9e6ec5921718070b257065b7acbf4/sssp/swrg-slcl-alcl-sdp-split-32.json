{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__84293, const global float* restrict v__84294, const global float* restrict v__84295, const global float* restrict v__84296, float v__84297, float v__84298, global float* v__84315, global float* v__84305, local float* v__84310, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84301; \n  float v__84306; \n  float v__75402; \n  /* Private Memory */\n  float v__84303_0;\n  \n  for (int v_wg_id_84285 = get_group_id(0); v_wg_id_84285 < v_MHeight_2; v_wg_id_84285 = (v_wg_id_84285 + get_num_groups(0))) {\n    for (int v_l_id_84286 = get_local_id(0); v_l_id_84286 < v_MWidthC_1; v_l_id_84286 = (v_l_id_84286 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_84287 = 0; v_i_84287 < 32; v_i_84287 = (1 + v_i_84287)) {\n        float v_tmp_84376 = 3.4028235E38f; \n        v__84301 = v_tmp_84376; \n        int v_index_84377 = v__84293[(v_l_id_84286 + (32 * v_MWidthC_1 * v_wg_id_84285) + (v_MWidthC_1 * v_i_84287))]; \n        if (v_index_84377 < 0) {\n          v__84303_0 = v__84301; \n        } else {\n          if (v_index_84377 >= v_VLength_3) {\n            v__84303_0 = v__84301; \n          } else {\n            v__84303_0 = v__84295[v_index_84377]; \n          }\n        }\n        v__84305[(31 + (32 * v_MWidthC_1 * v_wg_id_84285) + (-1 * v_i_84287) + (32 * v_l_id_84286))] = absadd(v__84303_0, v__84294[(v_l_id_84286 + (32 * v_MWidthC_1 * v_wg_id_84285) + (v_MWidthC_1 * v_i_84287))]); \n      }\n      /* end map_seq */\n      float v_tmp_84378 = 3.4028235E38f; \n      v__84306 = v_tmp_84378; \n      /* reduce_seq */\n      for (int v_i_84288 = 0; v_i_84288 < 32; v_i_84288 = (1 + v_i_84288)) {\n        v__84306 = clmin(v__84306, v__84305[(v_i_84288 + (32 * v_MWidthC_1 * v_wg_id_84285) + (32 * v_l_id_84286))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84289 = 0; \n        v__84310[v_l_id_84286] = id(v__84306); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6335; \n      v_work_idx_6335 = 0; \n      int v_l_id_84290 = atomic_inc(&(v_work_idx_6335)); \n      while((v_l_id_84290 < 1)){\n        float v_tmp_84381 = 3.4028235E38f; \n        v__75402 = v_tmp_84381; \n        /* reduce_seq */\n        for (int v_i_84291 = 0; v_i_84291 < v_MWidthC_1; v_i_84291 = (1 + v_i_84291)) {\n          v__75402 = clmin(v__75402, v__84310[(v_i_84291 + (v_MWidthC_1 * v_l_id_84290))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84292 = 0; \n          v__84315[v_wg_id_84285] = doubleMultiplyAdd(v__75402, v__84297, v__84296[v_wg_id_84285], v__84298); \n        }\n        /* end map_seq */\n        v_l_id_84290 = atomic_inc(&(v_work_idx_6335)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84293",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84294",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84295",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84297",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84298",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84305",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84315",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84310",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}