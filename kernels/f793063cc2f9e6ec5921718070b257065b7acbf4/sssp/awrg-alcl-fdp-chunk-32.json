{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__86819, const global float* restrict v__86820, const global float* restrict v__86821, const global float* restrict v__86822, float v__86823, float v__86824, global float* v__86838, global int* v__86826, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86828; \n  float v__86830; \n  /* Private Memory */\n  float v__86832_0;\n  \n  float v__86834_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6566 = v__86826; \n    local int v_w_id_86815; \n    if (get_local_id(0) == 0) {\n      v_w_id_86815 = atomic_inc(v_work_idx_6566); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86815 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6564; \n        v_work_idx_6564 = 0; \n        int v_l_id_86816 = atomic_inc(&(v_work_idx_6564)); \n        while((v_l_id_86816 < 32)){\n          float v_tmp_86875 = 3.4028235E38f; \n          v__86828 = v_tmp_86875; \n          /* reduce_seq */\n          for (int v_i_86817 = 0; v_i_86817 < v_MWidthC_1; v_i_86817 = (1 + v_i_86817)) {\n            float v_tmp_86876 = 3.4028235E38f; \n            v__86830 = v_tmp_86876; \n            int v_index_86877 = v__86819[(v_i_86817 + (32 * v_MWidthC_1 * v_w_id_86815) + (v_MWidthC_1 * v_l_id_86816))]; \n            if (v_index_86877 < 0) {\n              v__86832_0 = v__86830; \n            } else {\n              if (v_index_86877 >= v_VLength_3) {\n                v__86832_0 = v__86830; \n              } else {\n                v__86832_0 = v__86821[v_index_86877]; \n              }\n            }\n            v__86834_0 = absadd(v__86832_0, v__86820[(v_i_86817 + (32 * v_MWidthC_1 * v_w_id_86815) + (v_MWidthC_1 * v_l_id_86816))]); \n            v__86828 = clmin(v__86834_0, v__86828); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86818 = 0; \n            v__86838[(v_l_id_86816 + (32 * v_w_id_86815))] = doubleMultiplyAdd(v__86828, v__86823, v__86822[(v_l_id_86816 + (32 * v_w_id_86815))], v__86824); \n          }\n          /* end map_seq */\n          v_l_id_86816 = atomic_inc(&(v_work_idx_6564)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86815 = atomic_inc(v_work_idx_6566); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86819",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86821",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86823",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86824",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86826",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86838",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}