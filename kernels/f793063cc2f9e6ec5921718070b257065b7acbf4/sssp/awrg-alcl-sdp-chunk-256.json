{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__99624, const global float* restrict v__99625, const global float* restrict v__99626, const global float* restrict v__99627, float v__99628, float v__99629, global float* v__99643, global float* v__99637, global int* v__99631, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99633; \n  float v__99638; \n  /* Private Memory */\n  float v__99635_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7711 = v__99631; \n    local int v_w_id_99619; \n    if (get_local_id(0) == 0) {\n      v_w_id_99619 = atomic_inc(v_work_idx_7711); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99619 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7709; \n        v_work_idx_7709 = 0; \n        int v_l_id_99620 = atomic_inc(&(v_work_idx_7709)); \n        while((v_l_id_99620 < 256)){\n          /* map_seq */\n          for (int v_i_99621 = 0; v_i_99621 < v_MWidthC_1; v_i_99621 = (1 + v_i_99621)) {\n            float v_tmp_99682 = 3.4028235E38f; \n            v__99633 = v_tmp_99682; \n            int v_index_99683 = v__99624[(v_i_99621 + (256 * v_MWidthC_1 * v_w_id_99619) + (v_MWidthC_1 * v_l_id_99620))]; \n            if (v_index_99683 < 0) {\n              v__99635_0 = v__99633; \n            } else {\n              if (v_index_99683 >= v_VLength_3) {\n                v__99635_0 = v__99633; \n              } else {\n                v__99635_0 = v__99626[v_index_99683]; \n              }\n            }\n            v__99637[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_99619) + (-1 * v_i_99621) + (v_MWidthC_1 * v_l_id_99620))] = absadd(v__99635_0, v__99625[(v_i_99621 + (256 * v_MWidthC_1 * v_w_id_99619) + (v_MWidthC_1 * v_l_id_99620))]); \n          }\n          /* end map_seq */\n          float v_tmp_99684 = 3.4028235E38f; \n          v__99638 = v_tmp_99684; \n          /* reduce_seq */\n          for (int v_i_99622 = 0; v_i_99622 < v_MWidthC_1; v_i_99622 = (1 + v_i_99622)) {\n            v__99638 = clmin(v__99638, v__99637[(v_i_99622 + (256 * v_MWidthC_1 * v_w_id_99619) + (v_MWidthC_1 * v_l_id_99620))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99623 = 0; \n            v__99643[(v_l_id_99620 + (256 * v_w_id_99619))] = doubleMultiplyAdd(v__99638, v__99628, v__99627[(v_l_id_99620 + (256 * v_w_id_99619))], v__99629); \n          }\n          /* end map_seq */\n          v_l_id_99620 = atomic_inc(&(v_work_idx_7709)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99619 = atomic_inc(v_work_idx_7711); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99626",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99628",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99629",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99637",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99631",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99643",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}