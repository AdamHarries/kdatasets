{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100469, const global float* restrict v__100470, const global float* restrict v__100471, const global float* restrict v__100472, float v__100473, float v__100474, global float* v__100492, global int* v__100476, local float* v__100487, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100478; \n  float v__100480; \n  float v__75402; \n  /* Private Memory */\n  float v__100482_0;\n  \n  float v__100484_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7800 = v__100476; \n    local int v_w_id_100462; \n    if (get_local_id(0) == 0) {\n      v_w_id_100462 = atomic_inc(v_work_idx_7800); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100462 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7798; \n        v_work_idx_7798 = 0; \n        int v_l_id_100463 = atomic_inc(&(v_work_idx_7798)); \n        while((v_l_id_100463 < v_MWidthC_1)){\n          float v_tmp_100543 = 3.4028235E38f; \n          v__100478 = v_tmp_100543; \n          /* reduce_seq */\n          for (int v_i_100464 = 0; v_i_100464 < 256; v_i_100464 = (1 + v_i_100464)) {\n            float v_tmp_100544 = 3.4028235E38f; \n            v__100480 = v_tmp_100544; \n            int v_index_100545 = v__100469[(v_l_id_100463 + (256 * v_MWidthC_1 * v_w_id_100462) + (v_MWidthC_1 * v_i_100464))]; \n            if (v_index_100545 < 0) {\n              v__100482_0 = v__100480; \n            } else {\n              if (v_index_100545 >= v_VLength_3) {\n                v__100482_0 = v__100480; \n              } else {\n                v__100482_0 = v__100471[v_index_100545]; \n              }\n            }\n            v__100484_0 = absadd(v__100482_0, v__100470[(v_l_id_100463 + (256 * v_MWidthC_1 * v_w_id_100462) + (v_MWidthC_1 * v_i_100464))]); \n            v__100478 = clmin(v__100484_0, v__100478); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100465 = 0; \n            v__100487[v_l_id_100463] = id(v__100478); \n          }\n          /* end map_seq */\n          v_l_id_100463 = atomic_inc(&(v_work_idx_7798)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7793; \n        v_work_idx_7793 = 0; \n        int v_l_id_100466 = atomic_inc(&(v_work_idx_7793)); \n        while((v_l_id_100466 < 1)){\n          float v_tmp_100548 = 3.4028235E38f; \n          v__75402 = v_tmp_100548; \n          /* reduce_seq */\n          for (int v_i_100467 = 0; v_i_100467 < v_MWidthC_1; v_i_100467 = (1 + v_i_100467)) {\n            v__75402 = clmin(v__75402, v__100487[(v_i_100467 + (v_MWidthC_1 * v_l_id_100466))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100468 = 0; \n            v__100492[v_w_id_100462] = doubleMultiplyAdd(v__75402, v__100473, v__100472[v_w_id_100462], v__100474); \n          }\n          /* end map_seq */\n          v_l_id_100466 = atomic_inc(&(v_work_idx_7793)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100462 = atomic_inc(v_work_idx_7800); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100469",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100470",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100471",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100473",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100474",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100476",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100492",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100487",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}