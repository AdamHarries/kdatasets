{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98327, const global float* restrict v__98328, const global float* restrict v__98329, const global float* restrict v__98330, float v__98331, float v__98332, global float* v__98349, local float* v__98344, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98335; \n  float v__98337; \n  float v__75402; \n  /* Private Memory */\n  float v__98339_0;\n  \n  float v__98341_0;\n  \n  for (int v_wg_id_98320 = get_group_id(0); v_wg_id_98320 < v_MHeight_2; v_wg_id_98320 = (v_wg_id_98320 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7596; \n      v_work_idx_7596 = 0; \n      int v_l_id_98321 = atomic_inc(&(v_work_idx_7596)); \n      while((v_l_id_98321 < v_MWidthC_1)){\n        float v_tmp_98402 = 3.4028235E38f; \n        v__98335 = v_tmp_98402; \n        /* reduce_seq */\n        for (int v_i_98322 = 0; v_i_98322 < 256; v_i_98322 = (1 + v_i_98322)) {\n          float v_tmp_98403 = 3.4028235E38f; \n          v__98337 = v_tmp_98403; \n          int v_index_98404 = v__98327[(v_l_id_98321 + (256 * v_MWidthC_1 * v_wg_id_98320) + (v_MWidthC_1 * v_i_98322))]; \n          if (v_index_98404 < 0) {\n            v__98339_0 = v__98337; \n          } else {\n            if (v_index_98404 >= v_VLength_3) {\n              v__98339_0 = v__98337; \n            } else {\n              v__98339_0 = v__98329[v_index_98404]; \n            }\n          }\n          v__98341_0 = absadd(v__98339_0, v__98328[(v_l_id_98321 + (256 * v_MWidthC_1 * v_wg_id_98320) + (v_MWidthC_1 * v_i_98322))]); \n          v__98335 = clmin(v__98341_0, v__98335); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98323 = 0; \n          v__98344[v_l_id_98321] = id(v__98335); \n        }\n        /* end map_seq */\n        v_l_id_98321 = atomic_inc(&(v_work_idx_7596)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7591; \n      v_work_idx_7591 = 0; \n      int v_l_id_98324 = atomic_inc(&(v_work_idx_7591)); \n      while((v_l_id_98324 < 1)){\n        float v_tmp_98407 = 3.4028235E38f; \n        v__75402 = v_tmp_98407; \n        /* reduce_seq */\n        for (int v_i_98325 = 0; v_i_98325 < v_MWidthC_1; v_i_98325 = (1 + v_i_98325)) {\n          v__75402 = clmin(v__75402, v__98344[(v_i_98325 + (v_MWidthC_1 * v_l_id_98324))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98326 = 0; \n          v__98349[v_wg_id_98320] = doubleMultiplyAdd(v__75402, v__98331, v__98330[v_wg_id_98320], v__98332); \n        }\n        /* end map_seq */\n        v_l_id_98324 = atomic_inc(&(v_work_idx_7591)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98327",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98328",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98329",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98331",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98332",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98349",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98344",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}