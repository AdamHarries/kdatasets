{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85057, const global float* restrict v__85058, const global float* restrict v__85059, const global float* restrict v__85060, float v__85061, float v__85062, global float* v__85079, global float* v__85069, local float* v__85074, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85065; \n  float v__85070; \n  float v__75402; \n  /* Private Memory */\n  float v__85067_0;\n  \n  for (int v_wg_id_85049 = get_group_id(0); v_wg_id_85049 < v_MHeight_2; v_wg_id_85049 = (v_wg_id_85049 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6405; \n      v_work_idx_6405 = 0; \n      int v_l_id_85050 = atomic_inc(&(v_work_idx_6405)); \n      while((v_l_id_85050 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85051 = 0; v_i_85051 < 32; v_i_85051 = (1 + v_i_85051)) {\n          float v_tmp_85136 = 3.4028235E38f; \n          v__85065 = v_tmp_85136; \n          int v_index_85137 = v__85057[(v_l_id_85050 + (32 * v_MWidthC_1 * v_wg_id_85049) + (v_MWidthC_1 * v_i_85051))]; \n          if (v_index_85137 < 0) {\n            v__85067_0 = v__85065; \n          } else {\n            if (v_index_85137 >= v_VLength_3) {\n              v__85067_0 = v__85065; \n            } else {\n              v__85067_0 = v__85059[v_index_85137]; \n            }\n          }\n          v__85069[(31 + (32 * v_MWidthC_1 * v_wg_id_85049) + (-1 * v_i_85051) + (32 * v_l_id_85050))] = absadd(v__85067_0, v__85058[(v_l_id_85050 + (32 * v_MWidthC_1 * v_wg_id_85049) + (v_MWidthC_1 * v_i_85051))]); \n        }\n        /* end map_seq */\n        float v_tmp_85138 = 3.4028235E38f; \n        v__85070 = v_tmp_85138; \n        /* reduce_seq */\n        for (int v_i_85052 = 0; v_i_85052 < 32; v_i_85052 = (1 + v_i_85052)) {\n          v__85070 = clmin(v__85070, v__85069[(v_i_85052 + (32 * v_MWidthC_1 * v_wg_id_85049) + (32 * v_l_id_85050))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85053 = 0; \n          v__85074[v_l_id_85050] = id(v__85070); \n        }\n        /* end map_seq */\n        v_l_id_85050 = atomic_inc(&(v_work_idx_6405)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85054 = get_local_id(0); \n      float v_tmp_85141 = 3.4028235E38f; \n      v__75402 = v_tmp_85141; \n      /* reduce_seq */\n      for (int v_i_85055 = 0; v_i_85055 < v_MWidthC_1; v_i_85055 = (1 + v_i_85055)) {\n        v__75402 = clmin(v__75402, v__85074[(v_i_85055 + (v_MWidthC_1 * v_l_id_85054))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85056 = 0; \n        v__85079[v_wg_id_85049] = doubleMultiplyAdd(v__75402, v__85061, v__85060[v_wg_id_85049], v__85062); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85057",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85058",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85059",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85061",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85062",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85069",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85079",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85074",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}