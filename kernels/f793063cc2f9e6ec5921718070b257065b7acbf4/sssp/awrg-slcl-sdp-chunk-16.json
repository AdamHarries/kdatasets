{
  "name" : "awrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__81350, const global float* restrict v__81351, const global float* restrict v__81352, const global float* restrict v__81353, float v__81354, float v__81355, global float* v__81369, global float* v__81363, global int* v__81357, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81359; \n  float v__81364; \n  /* Private Memory */\n  float v__81361_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6078 = v__81357; \n    local int v_w_id_81345; \n    if (get_local_id(0) == 0) {\n      v_w_id_81345 = atomic_inc(v_work_idx_6078); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_81345 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_81346 = get_local_id(0); v_l_id_81346 < 16; v_l_id_81346 = (v_l_id_81346 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_81347 = 0; v_i_81347 < v_MWidthC_1; v_i_81347 = (1 + v_i_81347)) {\n          float v_tmp_81412 = 3.4028235E38f; \n          v__81359 = v_tmp_81412; \n          int v_index_81413 = v__81350[(v_i_81347 + (16 * v_MWidthC_1 * v_w_id_81345) + (v_MWidthC_1 * v_l_id_81346))]; \n          if (v_index_81413 < 0) {\n            v__81361_0 = v__81359; \n          } else {\n            if (v_index_81413 >= v_VLength_3) {\n              v__81361_0 = v__81359; \n            } else {\n              v__81361_0 = v__81352[v_index_81413]; \n            }\n          }\n          v__81363[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_81345) + (-1 * v_i_81347) + (v_MWidthC_1 * v_l_id_81346))] = absadd(v__81361_0, v__81351[(v_i_81347 + (16 * v_MWidthC_1 * v_w_id_81345) + (v_MWidthC_1 * v_l_id_81346))]); \n        }\n        /* end map_seq */\n        float v_tmp_81414 = 3.4028235E38f; \n        v__81364 = v_tmp_81414; \n        /* reduce_seq */\n        for (int v_i_81348 = 0; v_i_81348 < v_MWidthC_1; v_i_81348 = (1 + v_i_81348)) {\n          v__81364 = clmin(v__81364, v__81363[(v_i_81348 + (16 * v_MWidthC_1 * v_w_id_81345) + (v_MWidthC_1 * v_l_id_81346))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81349 = 0; \n          v__81369[(v_l_id_81346 + (16 * v_w_id_81345))] = doubleMultiplyAdd(v__81364, v__81354, v__81353[(v_l_id_81346 + (16 * v_w_id_81345))], v__81355); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_81345 = atomic_inc(v_work_idx_6078); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81350",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81352",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81353",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81354",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81355",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81363",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81357",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__81369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}