{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__101461, const global float* restrict v__101462, const global float* restrict v__101463, const global float* restrict v__101464, float v__101465, float v__101466, global float* v__101483, global float* v__101473, local float* v__101478, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101469; \n  float v__101474; \n  float v__75402; \n  /* Private Memory */\n  float v__101471_0;\n  \n  for (int v_wg_id_101453 = get_group_id(0); v_wg_id_101453 < v_MHeight_2; v_wg_id_101453 = (v_wg_id_101453 + get_num_groups(0))) {\n    for (int v_l_id_101454 = get_local_id(0); v_l_id_101454 < v_MWidthC_1; v_l_id_101454 = (v_l_id_101454 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_101455 = 0; v_i_101455 < 512; v_i_101455 = (1 + v_i_101455)) {\n        float v_tmp_101544 = 3.4028235E38f; \n        v__101469 = v_tmp_101544; \n        int v_index_101545 = v__101461[(v_l_id_101454 + (512 * v_MWidthC_1 * v_wg_id_101453) + (v_MWidthC_1 * v_i_101455))]; \n        if (v_index_101545 < 0) {\n          v__101471_0 = v__101469; \n        } else {\n          if (v_index_101545 >= v_VLength_3) {\n            v__101471_0 = v__101469; \n          } else {\n            v__101471_0 = v__101463[v_index_101545]; \n          }\n        }\n        v__101473[(511 + (512 * v_MWidthC_1 * v_wg_id_101453) + (-1 * v_i_101455) + (512 * v_l_id_101454))] = absadd(v__101471_0, v__101462[(v_l_id_101454 + (512 * v_MWidthC_1 * v_wg_id_101453) + (v_MWidthC_1 * v_i_101455))]); \n      }\n      /* end map_seq */\n      float v_tmp_101546 = 3.4028235E38f; \n      v__101474 = v_tmp_101546; \n      /* reduce_seq */\n      for (int v_i_101456 = 0; v_i_101456 < 512; v_i_101456 = (1 + v_i_101456)) {\n        v__101474 = clmin(v__101474, v__101473[(v_i_101456 + (512 * v_MWidthC_1 * v_wg_id_101453) + (512 * v_l_id_101454))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101457 = 0; \n        v__101478[v_l_id_101454] = id(v__101474); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7871; \n      v_work_idx_7871 = 0; \n      int v_l_id_101458 = atomic_inc(&(v_work_idx_7871)); \n      while((v_l_id_101458 < 1)){\n        float v_tmp_101549 = 3.4028235E38f; \n        v__75402 = v_tmp_101549; \n        /* reduce_seq */\n        for (int v_i_101459 = 0; v_i_101459 < v_MWidthC_1; v_i_101459 = (1 + v_i_101459)) {\n          v__75402 = clmin(v__75402, v__101478[(v_i_101459 + (v_MWidthC_1 * v_l_id_101458))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101460 = 0; \n          v__101483[v_wg_id_101453] = doubleMultiplyAdd(v__75402, v__101465, v__101464[v_wg_id_101453], v__101466); \n        }\n        /* end map_seq */\n        v_l_id_101458 = atomic_inc(&(v_work_idx_7871)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101461",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101462",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101463",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101464",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101465",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101466",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101473",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101483",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101478",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}