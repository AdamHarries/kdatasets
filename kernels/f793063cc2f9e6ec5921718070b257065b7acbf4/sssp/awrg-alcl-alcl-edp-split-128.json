{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__96270, const global float* restrict v__96271, const global float* restrict v__96272, const global float* restrict v__96273, float v__96274, float v__96275, global float* v__96295, global int* v__96277, local float* v__96290, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96279; \n  float v__96281; \n  float v__75402; \n  /* Private Memory */\n  float v__96283_0;\n  \n  float v__96285_0;\n  \n  int v__96289_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7427 = v__96277; \n    local int v_w_id_96263; \n    if (get_local_id(0) == 0) {\n      v_w_id_96263 = atomic_inc(v_work_idx_7427); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96263 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7425; \n        v_work_idx_7425 = 0; \n        int v_l_id_96264 = atomic_inc(&(v_work_idx_7425)); \n        while((v_l_id_96264 < v_MWidthC_1)){\n          float v_tmp_96349 = 3.4028235E38f; \n          v__96279 = v_tmp_96349; \n          /* reduce_while_seq */\n          for (int v_i_96265 = 0; v_i_96265 < 128; v_i_96265 = (1 + v_i_96265)) {\n            v__96289_0 = check(v__96279, v__96270[(v_l_id_96264 + (128 * v_MWidthC_1 * v_w_id_96263) + (v_MWidthC_1 * v_i_96265))]); \n            if (v__96289_0) {\n            } else {\n              break;\n            }\n            float v_tmp_96350 = 3.4028235E38f; \n            v__96281 = v_tmp_96350; \n            int v_index_96351 = v__96270[(v_l_id_96264 + (128 * v_MWidthC_1 * v_w_id_96263) + (v_MWidthC_1 * v_i_96265))]; \n            if (v_index_96351 < 0) {\n              v__96283_0 = v__96281; \n            } else {\n              if (v_index_96351 >= v_VLength_3) {\n                v__96283_0 = v__96281; \n              } else {\n                v__96283_0 = v__96272[v_index_96351]; \n              }\n            }\n            v__96285_0 = absadd(v__96283_0, v__96271[(v_l_id_96264 + (128 * v_MWidthC_1 * v_w_id_96263) + (v_MWidthC_1 * v_i_96265))]); \n            v__96279 = clmin(v__96285_0, v__96279); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96266 = 0; \n            v__96290[v_l_id_96264] = id(v__96279); \n          }\n          /* end map_seq */\n          v_l_id_96264 = atomic_inc(&(v_work_idx_7425)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7420; \n        v_work_idx_7420 = 0; \n        int v_l_id_96267 = atomic_inc(&(v_work_idx_7420)); \n        while((v_l_id_96267 < 1)){\n          float v_tmp_96354 = 3.4028235E38f; \n          v__75402 = v_tmp_96354; \n          /* reduce_seq */\n          for (int v_i_96268 = 0; v_i_96268 < v_MWidthC_1; v_i_96268 = (1 + v_i_96268)) {\n            v__75402 = clmin(v__75402, v__96290[(v_i_96268 + (v_MWidthC_1 * v_l_id_96267))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96269 = 0; \n            v__96295[v_w_id_96263] = doubleMultiplyAdd(v__75402, v__96274, v__96273[v_w_id_96263], v__96275); \n          }\n          /* end map_seq */\n          v_l_id_96267 = atomic_inc(&(v_work_idx_7420)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96263 = atomic_inc(v_work_idx_7427); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96270",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96271",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96272",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96274",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96275",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96277",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96295",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96290",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}