{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98233, const global float* restrict v__98234, const global float* restrict v__98235, const global float* restrict v__98236, float v__98237, float v__98238, global float* v__98255, global float* v__98245, local float* v__98250, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98241; \n  float v__98246; \n  float v__75402; \n  /* Private Memory */\n  float v__98243_0;\n  \n  for (int v_wg_id_98225 = get_group_id(0); v_wg_id_98225 < v_MHeight_2; v_wg_id_98225 = (v_wg_id_98225 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7586; \n      v_work_idx_7586 = 0; \n      int v_l_id_98226 = atomic_inc(&(v_work_idx_7586)); \n      while((v_l_id_98226 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_98227 = 0; v_i_98227 < 256; v_i_98227 = (1 + v_i_98227)) {\n          float v_tmp_98308 = 3.4028235E38f; \n          v__98241 = v_tmp_98308; \n          int v_index_98309 = v__98233[(v_l_id_98226 + (256 * v_MWidthC_1 * v_wg_id_98225) + (v_MWidthC_1 * v_i_98227))]; \n          if (v_index_98309 < 0) {\n            v__98243_0 = v__98241; \n          } else {\n            if (v_index_98309 >= v_VLength_3) {\n              v__98243_0 = v__98241; \n            } else {\n              v__98243_0 = v__98235[v_index_98309]; \n            }\n          }\n          v__98245[(255 + (256 * v_MWidthC_1 * v_wg_id_98225) + (-1 * v_i_98227) + (256 * v_l_id_98226))] = absadd(v__98243_0, v__98234[(v_l_id_98226 + (256 * v_MWidthC_1 * v_wg_id_98225) + (v_MWidthC_1 * v_i_98227))]); \n        }\n        /* end map_seq */\n        float v_tmp_98310 = 3.4028235E38f; \n        v__98246 = v_tmp_98310; \n        /* reduce_seq */\n        for (int v_i_98228 = 0; v_i_98228 < 256; v_i_98228 = (1 + v_i_98228)) {\n          v__98246 = clmin(v__98246, v__98245[(v_i_98228 + (256 * v_MWidthC_1 * v_wg_id_98225) + (256 * v_l_id_98226))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98229 = 0; \n          v__98250[v_l_id_98226] = id(v__98246); \n        }\n        /* end map_seq */\n        v_l_id_98226 = atomic_inc(&(v_work_idx_7586)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7580; \n      v_work_idx_7580 = 0; \n      int v_l_id_98230 = atomic_inc(&(v_work_idx_7580)); \n      while((v_l_id_98230 < 1)){\n        float v_tmp_98313 = 3.4028235E38f; \n        v__75402 = v_tmp_98313; \n        /* reduce_seq */\n        for (int v_i_98231 = 0; v_i_98231 < v_MWidthC_1; v_i_98231 = (1 + v_i_98231)) {\n          v__75402 = clmin(v__75402, v__98250[(v_i_98231 + (v_MWidthC_1 * v_l_id_98230))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98232 = 0; \n          v__98255[v_wg_id_98225] = doubleMultiplyAdd(v__75402, v__98237, v__98236[v_wg_id_98225], v__98238); \n        }\n        /* end map_seq */\n        v_l_id_98230 = atomic_inc(&(v_work_idx_7580)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98233",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98234",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98235",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98237",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98238",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98245",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98255",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98250",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}