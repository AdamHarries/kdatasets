{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__96084, const global float* restrict v__96085, const global float* restrict v__96086, const global float* restrict v__96087, float v__96088, float v__96089, global float* v__96107, global float* v__96097, global int* v__96091, local float* v__96102, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96093; \n  float v__96098; \n  float v__75402; \n  /* Private Memory */\n  float v__96095_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7405 = v__96091; \n    local int v_w_id_96076; \n    if (get_local_id(0) == 0) {\n      v_w_id_96076 = atomic_inc(v_work_idx_7405); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96076 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7403; \n        v_work_idx_7403 = 0; \n        int v_l_id_96077 = atomic_inc(&(v_work_idx_7403)); \n        while((v_l_id_96077 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_96078 = 0; v_i_96078 < 128; v_i_96078 = (1 + v_i_96078)) {\n            float v_tmp_96158 = 3.4028235E38f; \n            v__96093 = v_tmp_96158; \n            int v_index_96159 = v__96084[(v_l_id_96077 + (128 * v_MWidthC_1 * v_w_id_96076) + (v_MWidthC_1 * v_i_96078))]; \n            if (v_index_96159 < 0) {\n              v__96095_0 = v__96093; \n            } else {\n              if (v_index_96159 >= v_VLength_3) {\n                v__96095_0 = v__96093; \n              } else {\n                v__96095_0 = v__96086[v_index_96159]; \n              }\n            }\n            v__96097[(127 + (128 * v_MWidthC_1 * v_w_id_96076) + (-1 * v_i_96078) + (128 * v_l_id_96077))] = absadd(v__96095_0, v__96085[(v_l_id_96077 + (128 * v_MWidthC_1 * v_w_id_96076) + (v_MWidthC_1 * v_i_96078))]); \n          }\n          /* end map_seq */\n          float v_tmp_96160 = 3.4028235E38f; \n          v__96098 = v_tmp_96160; \n          /* reduce_seq */\n          for (int v_i_96079 = 0; v_i_96079 < 128; v_i_96079 = (1 + v_i_96079)) {\n            v__96098 = clmin(v__96098, v__96097[(v_i_96079 + (128 * v_MWidthC_1 * v_w_id_96076) + (128 * v_l_id_96077))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96080 = 0; \n            v__96102[v_l_id_96077] = id(v__96098); \n          }\n          /* end map_seq */\n          v_l_id_96077 = atomic_inc(&(v_work_idx_7403)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7397; \n        v_work_idx_7397 = 0; \n        int v_l_id_96081 = atomic_inc(&(v_work_idx_7397)); \n        while((v_l_id_96081 < 1)){\n          float v_tmp_96163 = 3.4028235E38f; \n          v__75402 = v_tmp_96163; \n          /* reduce_seq */\n          for (int v_i_96082 = 0; v_i_96082 < v_MWidthC_1; v_i_96082 = (1 + v_i_96082)) {\n            v__75402 = clmin(v__75402, v__96102[(v_i_96082 + (v_MWidthC_1 * v_l_id_96081))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96083 = 0; \n            v__96107[v_w_id_96076] = doubleMultiplyAdd(v__75402, v__96088, v__96087[v_w_id_96076], v__96089); \n          }\n          /* end map_seq */\n          v_l_id_96081 = atomic_inc(&(v_work_idx_7397)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96076 = atomic_inc(v_work_idx_7405); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96084",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96085",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96086",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96088",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96089",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96097",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96091",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96107",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96102",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}