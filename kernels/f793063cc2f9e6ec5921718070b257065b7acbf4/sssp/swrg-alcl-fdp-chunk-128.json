{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__93257, const global float* restrict v__93258, const global float* restrict v__93259, const global float* restrict v__93260, float v__93261, float v__93262, global float* v__93275, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93265; \n  float v__93267; \n  /* Private Memory */\n  float v__93269_0;\n  \n  float v__93271_0;\n  \n  for (int v_wg_id_93253 = get_group_id(0); v_wg_id_93253 < ((v_MHeight_2)/(128)); v_wg_id_93253 = (v_wg_id_93253 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7139; \n      v_work_idx_7139 = 0; \n      int v_l_id_93254 = atomic_inc(&(v_work_idx_7139)); \n      while((v_l_id_93254 < 128)){\n        float v_tmp_93313 = 3.4028235E38f; \n        v__93265 = v_tmp_93313; \n        /* reduce_seq */\n        for (int v_i_93255 = 0; v_i_93255 < v_MWidthC_1; v_i_93255 = (1 + v_i_93255)) {\n          float v_tmp_93314 = 3.4028235E38f; \n          v__93267 = v_tmp_93314; \n          int v_index_93315 = v__93257[(v_i_93255 + (128 * v_MWidthC_1 * v_wg_id_93253) + (v_MWidthC_1 * v_l_id_93254))]; \n          if (v_index_93315 < 0) {\n            v__93269_0 = v__93267; \n          } else {\n            if (v_index_93315 >= v_VLength_3) {\n              v__93269_0 = v__93267; \n            } else {\n              v__93269_0 = v__93259[v_index_93315]; \n            }\n          }\n          v__93271_0 = absadd(v__93269_0, v__93258[(v_i_93255 + (128 * v_MWidthC_1 * v_wg_id_93253) + (v_MWidthC_1 * v_l_id_93254))]); \n          v__93265 = clmin(v__93271_0, v__93265); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93256 = 0; \n          v__93275[(v_l_id_93254 + (128 * v_wg_id_93253))] = doubleMultiplyAdd(v__93265, v__93261, v__93260[(v_l_id_93254 + (128 * v_wg_id_93253))], v__93262); \n        }\n        /* end map_seq */\n        v_l_id_93254 = atomic_inc(&(v_work_idx_7139)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93257",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93258",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93259",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93260",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93261",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93262",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__93275",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}