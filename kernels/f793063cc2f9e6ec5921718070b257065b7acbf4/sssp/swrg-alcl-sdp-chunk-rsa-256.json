{
  "name" : "swrg-alcl-sdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97696, const global float* restrict v__97697, const global float* restrict v__97698, const global float* restrict v__97699, float v__97700, float v__97701, global float* v__97715, global float* v__97714, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97703; \n  float v__97706; \n  /* Private Memory */\n  float v__97708_0;\n  \n  float v__97710_0;\n  \n  for (int v_wg_id_97691 = get_group_id(0); v_wg_id_97691 < ((v_MHeight_2)/(256)); v_wg_id_97691 = (v_wg_id_97691 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7535; \n      v_work_idx_7535 = 0; \n      int v_l_id_97692 = atomic_inc(&(v_work_idx_7535)); \n      while((v_l_id_97692 < 256)){\n        float v_tmp_97748 = 3.4028235E38f; \n        v__97703 = v_tmp_97748; \n        /* reduce_seq */\n        int v_stop_97749 = min(v__97696[(1 + (v__97696[(v_l_id_97692 + (256 * v_wg_id_97691))] / 4))], ((global int*)(v__97697 + (((global int*)(v__97697))[(v_l_id_97692 + (256 * v_wg_id_97691))] / 4)))[1]); \n        for (int v_i_97693 = 0; v_i_97693 < v_stop_97749; v_i_97693 = (1 + v_i_97693)) {\n          float v_tmp_97757 = 3.4028235E38f; \n          v__97706 = v_tmp_97757; \n          int v_index_97759 = v__97696[(2 + v_i_97693 + (v__97696[(v_l_id_97692 + (256 * v_wg_id_97691))] / 4))]; \n          if (v_index_97759 < 0) {\n            v__97708_0 = v__97706; \n          } else {\n            if (v_index_97759 >= v_MWidthC_1) {\n              v__97708_0 = v__97706; \n            } else {\n              v__97708_0 = v__97698[v_index_97759]; \n            }\n          }\n          v__97710_0 = absadd(v__97697[(2 + v_i_97693 + (((global int*)(v__97697))[(v_l_id_97692 + (256 * v_wg_id_97691))] / 4))], v__97708_0); \n          v__97703 = clmin(v__97703, v__97710_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97694 = 0; \n          v__97714[(v_l_id_97692 + (256 * v_wg_id_97691))] = doubleMultiplyAdd(v__97703, v__97700, v__97699[(v_l_id_97692 + (256 * v_wg_id_97691))], v__97701); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97695 = 0; \n          v__97715[(v_l_id_97692 + (256 * v_wg_id_97691))] = id(v__97714[(v_l_id_97692 + (256 * v_wg_id_97691))]); \n        }\n        /* end map_seq */\n        v_l_id_97692 = atomic_inc(&(v_work_idx_7535)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97696",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97697",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__97698",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__97699",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97700",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97701",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__97715",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}