{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__87397, const global float* restrict v__87398, const global float* restrict v__87399, const global float* restrict v__87400, float v__87401, float v__87402, global float* v__87422, global int* v__87404, local float* v__87417, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87406; \n  float v__87408; \n  float v__75402; \n  /* Private Memory */\n  float v__87410_0;\n  \n  float v__87412_0;\n  \n  int v__87416_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6625 = v__87404; \n    local int v_w_id_87390; \n    if (get_local_id(0) == 0) {\n      v_w_id_87390 = atomic_inc(v_work_idx_6625); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87390 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6623; \n        v_work_idx_6623 = 0; \n        int v_l_id_87391 = atomic_inc(&(v_work_idx_6623)); \n        while((v_l_id_87391 < v_MWidthC_1)){\n          float v_tmp_87480 = 3.4028235E38f; \n          v__87406 = v_tmp_87480; \n          /* reduce_while_seq */\n          for (int v_i_87392 = 0; v_i_87392 < 32; v_i_87392 = (1 + v_i_87392)) {\n            v__87416_0 = check(v__87406, v__87397[(v_l_id_87391 + (32 * v_MWidthC_1 * v_w_id_87390) + (v_MWidthC_1 * v_i_87392))]); \n            if (v__87416_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87481 = 3.4028235E38f; \n            v__87408 = v_tmp_87481; \n            int v_index_87482 = v__87397[(v_l_id_87391 + (32 * v_MWidthC_1 * v_w_id_87390) + (v_MWidthC_1 * v_i_87392))]; \n            if (v_index_87482 < 0) {\n              v__87410_0 = v__87408; \n            } else {\n              if (v_index_87482 >= v_VLength_3) {\n                v__87410_0 = v__87408; \n              } else {\n                v__87410_0 = v__87399[v_index_87482]; \n              }\n            }\n            v__87412_0 = absadd(v__87410_0, v__87398[(v_l_id_87391 + (32 * v_MWidthC_1 * v_w_id_87390) + (v_MWidthC_1 * v_i_87392))]); \n            v__87406 = clmin(v__87412_0, v__87406); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87393 = 0; \n            v__87417[v_l_id_87391] = id(v__87406); \n          }\n          /* end map_seq */\n          v_l_id_87391 = atomic_inc(&(v_work_idx_6623)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_87394 = get_local_id(0); \n        float v_tmp_87485 = 3.4028235E38f; \n        v__75402 = v_tmp_87485; \n        /* reduce_seq */\n        for (int v_i_87395 = 0; v_i_87395 < v_MWidthC_1; v_i_87395 = (1 + v_i_87395)) {\n          v__75402 = clmin(v__75402, v__87417[(v_i_87395 + (v_MWidthC_1 * v_l_id_87394))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_87396 = 0; \n          v__87422[v_w_id_87390] = doubleMultiplyAdd(v__75402, v__87401, v__87400[v_w_id_87390], v__87402); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87390 = atomic_inc(v_work_idx_6625); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87397",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87398",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87399",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87401",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87402",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87404",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87422",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87417",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}