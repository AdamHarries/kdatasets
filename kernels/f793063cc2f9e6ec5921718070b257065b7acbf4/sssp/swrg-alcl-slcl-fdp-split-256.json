{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98031, const global float* restrict v__98032, const global float* restrict v__98033, const global float* restrict v__98034, float v__98035, float v__98036, global float* v__98053, local float* v__98048, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98039; \n  float v__98041; \n  float v__75402; \n  /* Private Memory */\n  float v__98043_0;\n  \n  float v__98045_0;\n  \n  for (int v_wg_id_98024 = get_group_id(0); v_wg_id_98024 < v_MHeight_2; v_wg_id_98024 = (v_wg_id_98024 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7566; \n      v_work_idx_7566 = 0; \n      int v_l_id_98025 = atomic_inc(&(v_work_idx_7566)); \n      while((v_l_id_98025 < v_MWidthC_1)){\n        float v_tmp_98110 = 3.4028235E38f; \n        v__98039 = v_tmp_98110; \n        /* reduce_seq */\n        for (int v_i_98026 = 0; v_i_98026 < 256; v_i_98026 = (1 + v_i_98026)) {\n          float v_tmp_98111 = 3.4028235E38f; \n          v__98041 = v_tmp_98111; \n          int v_index_98112 = v__98031[(v_l_id_98025 + (256 * v_MWidthC_1 * v_wg_id_98024) + (v_MWidthC_1 * v_i_98026))]; \n          if (v_index_98112 < 0) {\n            v__98043_0 = v__98041; \n          } else {\n            if (v_index_98112 >= v_VLength_3) {\n              v__98043_0 = v__98041; \n            } else {\n              v__98043_0 = v__98033[v_index_98112]; \n            }\n          }\n          v__98045_0 = absadd(v__98043_0, v__98032[(v_l_id_98025 + (256 * v_MWidthC_1 * v_wg_id_98024) + (v_MWidthC_1 * v_i_98026))]); \n          v__98039 = clmin(v__98045_0, v__98039); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98027 = 0; \n          v__98048[v_l_id_98025] = id(v__98039); \n        }\n        /* end map_seq */\n        v_l_id_98025 = atomic_inc(&(v_work_idx_7566)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98028 = get_local_id(0); \n      float v_tmp_98115 = 3.4028235E38f; \n      v__75402 = v_tmp_98115; \n      /* reduce_seq */\n      for (int v_i_98029 = 0; v_i_98029 < v_MWidthC_1; v_i_98029 = (1 + v_i_98029)) {\n        v__75402 = clmin(v__75402, v__98048[(v_i_98029 + (v_MWidthC_1 * v_l_id_98028))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98030 = 0; \n        v__98053[v_wg_id_98024] = doubleMultiplyAdd(v__75402, v__98035, v__98034[v_wg_id_98024], v__98036); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98031",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98032",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98033",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98034",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98035",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98036",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98053",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98048",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}