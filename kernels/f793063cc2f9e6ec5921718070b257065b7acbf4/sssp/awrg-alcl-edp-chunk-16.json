{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__82596, const global float* restrict v__82597, const global float* restrict v__82598, const global float* restrict v__82599, float v__82600, float v__82601, global float* v__82617, global int* v__82603, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82604; \n  float v__82607; \n  /* Private Memory */\n  float v__82609_0;\n  \n  float v__82611_0;\n  \n  int v__82615_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6189 = v__82603; \n    local int v_w_id_82592; \n    if (get_local_id(0) == 0) {\n      v_w_id_82592 = atomic_inc(v_work_idx_6189); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82592 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6187; \n        v_work_idx_6187 = 0; \n        int v_l_id_82593 = atomic_inc(&(v_work_idx_6187)); \n        while((v_l_id_82593 < 16)){\n          float v_tmp_82660 = 3.4028235E38f; \n          v__82604 = v_tmp_82660; \n          /* reduce_while_seq */\n          for (int v_i_82594 = 0; v_i_82594 < v_MWidthC_1; v_i_82594 = (1 + v_i_82594)) {\n            v__82615_0 = check(v__82604, v__82596[(v_i_82594 + (16 * v_MWidthC_1 * v_w_id_82592) + (v_MWidthC_1 * v_l_id_82593))]); \n            if (v__82615_0) {\n            } else {\n              break;\n            }\n            float v_tmp_82661 = 3.4028235E38f; \n            v__82607 = v_tmp_82661; \n            int v_index_82662 = v__82596[(v_i_82594 + (16 * v_MWidthC_1 * v_w_id_82592) + (v_MWidthC_1 * v_l_id_82593))]; \n            if (v_index_82662 < 0) {\n              v__82609_0 = v__82607; \n            } else {\n              if (v_index_82662 >= v_VLength_3) {\n                v__82609_0 = v__82607; \n              } else {\n                v__82609_0 = v__82598[v_index_82662]; \n              }\n            }\n            v__82611_0 = absadd(v__82609_0, v__82597[(v_i_82594 + (16 * v_MWidthC_1 * v_w_id_82592) + (v_MWidthC_1 * v_l_id_82593))]); \n            v__82604 = clmin(v__82611_0, v__82604); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82595 = 0; \n            v__82617[(v_l_id_82593 + (16 * v_w_id_82592))] = doubleMultiplyAdd(v__82604, v__82600, v__82599[(v_l_id_82593 + (16 * v_w_id_82592))], v__82601); \n          }\n          /* end map_seq */\n          v_l_id_82593 = atomic_inc(&(v_work_idx_6187)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82592 = atomic_inc(v_work_idx_6189); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82597",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82598",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82599",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82600",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82601",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82603",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}