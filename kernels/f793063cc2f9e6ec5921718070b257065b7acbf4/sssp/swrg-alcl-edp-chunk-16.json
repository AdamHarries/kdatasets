{
  "name" : "swrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80450, const global float* restrict v__80451, const global float* restrict v__80452, const global float* restrict v__80453, float v__80454, float v__80455, global float* v__80470, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80457; \n  float v__80460; \n  /* Private Memory */\n  float v__80462_0;\n  \n  float v__80464_0;\n  \n  int v__80468_0;\n  \n  for (int v_wg_id_80446 = get_group_id(0); v_wg_id_80446 < ((v_MHeight_2)/(16)); v_wg_id_80446 = (v_wg_id_80446 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5993; \n      v_work_idx_5993 = 0; \n      int v_l_id_80447 = atomic_inc(&(v_work_idx_5993)); \n      while((v_l_id_80447 < 16)){\n        float v_tmp_80514 = 3.4028235E38f; \n        v__80457 = v_tmp_80514; \n        /* reduce_while_seq */\n        for (int v_i_80448 = 0; v_i_80448 < v_MWidthC_1; v_i_80448 = (1 + v_i_80448)) {\n          v__80468_0 = check(v__80457, v__80450[(v_i_80448 + (16 * v_MWidthC_1 * v_wg_id_80446) + (v_MWidthC_1 * v_l_id_80447))]); \n          if (v__80468_0) {\n          } else {\n            break;\n          }\n          float v_tmp_80515 = 3.4028235E38f; \n          v__80460 = v_tmp_80515; \n          int v_index_80516 = v__80450[(v_i_80448 + (16 * v_MWidthC_1 * v_wg_id_80446) + (v_MWidthC_1 * v_l_id_80447))]; \n          if (v_index_80516 < 0) {\n            v__80462_0 = v__80460; \n          } else {\n            if (v_index_80516 >= v_VLength_3) {\n              v__80462_0 = v__80460; \n            } else {\n              v__80462_0 = v__80452[v_index_80516]; \n            }\n          }\n          v__80464_0 = absadd(v__80462_0, v__80451[(v_i_80448 + (16 * v_MWidthC_1 * v_wg_id_80446) + (v_MWidthC_1 * v_l_id_80447))]); \n          v__80457 = clmin(v__80464_0, v__80457); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80449 = 0; \n          v__80470[(v_l_id_80447 + (16 * v_wg_id_80446))] = doubleMultiplyAdd(v__80457, v__80454, v__80453[(v_l_id_80447 + (16 * v_wg_id_80446))], v__80455); \n        }\n        /* end map_seq */\n        v_l_id_80447 = atomic_inc(&(v_work_idx_5993)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80450",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80451",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80452",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80454",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80455",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__80470",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}