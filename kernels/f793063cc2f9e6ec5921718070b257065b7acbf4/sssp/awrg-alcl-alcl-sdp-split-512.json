{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__104668, const global float* restrict v__104669, const global float* restrict v__104670, const global float* restrict v__104671, float v__104672, float v__104673, global float* v__104691, global float* v__104681, global int* v__104675, local float* v__104686, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104677; \n  float v__104682; \n  float v__75402; \n  /* Private Memory */\n  float v__104679_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8173 = v__104675; \n    local int v_w_id_104660; \n    if (get_local_id(0) == 0) {\n      v_w_id_104660 = atomic_inc(v_work_idx_8173); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104660 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8171; \n        v_work_idx_8171 = 0; \n        int v_l_id_104661 = atomic_inc(&(v_work_idx_8171)); \n        while((v_l_id_104661 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_104662 = 0; v_i_104662 < 512; v_i_104662 = (1 + v_i_104662)) {\n            float v_tmp_104742 = 3.4028235E38f; \n            v__104677 = v_tmp_104742; \n            int v_index_104743 = v__104668[(v_l_id_104661 + (512 * v_MWidthC_1 * v_w_id_104660) + (v_MWidthC_1 * v_i_104662))]; \n            if (v_index_104743 < 0) {\n              v__104679_0 = v__104677; \n            } else {\n              if (v_index_104743 >= v_VLength_3) {\n                v__104679_0 = v__104677; \n              } else {\n                v__104679_0 = v__104670[v_index_104743]; \n              }\n            }\n            v__104681[(511 + (512 * v_MWidthC_1 * v_w_id_104660) + (-1 * v_i_104662) + (512 * v_l_id_104661))] = absadd(v__104679_0, v__104669[(v_l_id_104661 + (512 * v_MWidthC_1 * v_w_id_104660) + (v_MWidthC_1 * v_i_104662))]); \n          }\n          /* end map_seq */\n          float v_tmp_104744 = 3.4028235E38f; \n          v__104682 = v_tmp_104744; \n          /* reduce_seq */\n          for (int v_i_104663 = 0; v_i_104663 < 512; v_i_104663 = (1 + v_i_104663)) {\n            v__104682 = clmin(v__104682, v__104681[(v_i_104663 + (512 * v_MWidthC_1 * v_w_id_104660) + (512 * v_l_id_104661))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104664 = 0; \n            v__104686[v_l_id_104661] = id(v__104682); \n          }\n          /* end map_seq */\n          v_l_id_104661 = atomic_inc(&(v_work_idx_8171)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8165; \n        v_work_idx_8165 = 0; \n        int v_l_id_104665 = atomic_inc(&(v_work_idx_8165)); \n        while((v_l_id_104665 < 1)){\n          float v_tmp_104747 = 3.4028235E38f; \n          v__75402 = v_tmp_104747; \n          /* reduce_seq */\n          for (int v_i_104666 = 0; v_i_104666 < v_MWidthC_1; v_i_104666 = (1 + v_i_104666)) {\n            v__75402 = clmin(v__75402, v__104686[(v_i_104666 + (v_MWidthC_1 * v_l_id_104665))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104667 = 0; \n            v__104691[v_w_id_104660] = doubleMultiplyAdd(v__75402, v__104672, v__104671[v_w_id_104660], v__104673); \n          }\n          /* end map_seq */\n          v_l_id_104665 = atomic_inc(&(v_work_idx_8165)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104660 = atomic_inc(v_work_idx_8173); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__104668",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104669",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104670",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104671",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104672",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104673",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104681",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104675",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104691",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104686",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}