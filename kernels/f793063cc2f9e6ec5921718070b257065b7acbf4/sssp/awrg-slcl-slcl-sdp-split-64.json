{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__90413, const global float* restrict v__90414, const global float* restrict v__90415, const global float* restrict v__90416, float v__90417, float v__90418, global float* v__90436, global float* v__90426, global int* v__90420, local float* v__90431, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90422; \n  float v__90427; \n  float v__75402; \n  /* Private Memory */\n  float v__90424_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6886 = v__90420; \n    local int v_w_id_90405; \n    if (get_local_id(0) == 0) {\n      v_w_id_90405 = atomic_inc(v_work_idx_6886); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90405 < v_MHeight_2)){\n      for (int v_l_id_90406 = get_local_id(0); v_l_id_90406 < v_MWidthC_1; v_l_id_90406 = (v_l_id_90406 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_90407 = 0; v_i_90407 < 64; v_i_90407 = (1 + v_i_90407)) {\n          float v_tmp_90499 = 3.4028235E38f; \n          v__90422 = v_tmp_90499; \n          int v_index_90500 = v__90413[(v_l_id_90406 + (64 * v_MWidthC_1 * v_w_id_90405) + (v_MWidthC_1 * v_i_90407))]; \n          if (v_index_90500 < 0) {\n            v__90424_0 = v__90422; \n          } else {\n            if (v_index_90500 >= v_VLength_3) {\n              v__90424_0 = v__90422; \n            } else {\n              v__90424_0 = v__90415[v_index_90500]; \n            }\n          }\n          v__90426[(63 + (64 * v_MWidthC_1 * v_w_id_90405) + (-1 * v_i_90407) + (64 * v_l_id_90406))] = absadd(v__90424_0, v__90414[(v_l_id_90406 + (64 * v_MWidthC_1 * v_w_id_90405) + (v_MWidthC_1 * v_i_90407))]); \n        }\n        /* end map_seq */\n        float v_tmp_90501 = 3.4028235E38f; \n        v__90427 = v_tmp_90501; \n        /* reduce_seq */\n        for (int v_i_90408 = 0; v_i_90408 < 64; v_i_90408 = (1 + v_i_90408)) {\n          v__90427 = clmin(v__90427, v__90426[(v_i_90408 + (64 * v_MWidthC_1 * v_w_id_90405) + (64 * v_l_id_90406))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90409 = 0; \n          v__90431[v_l_id_90406] = id(v__90427); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90410 = get_local_id(0); \n        float v_tmp_90504 = 3.4028235E38f; \n        v__75402 = v_tmp_90504; \n        /* reduce_seq */\n        for (int v_i_90411 = 0; v_i_90411 < v_MWidthC_1; v_i_90411 = (1 + v_i_90411)) {\n          v__75402 = clmin(v__75402, v__90431[(v_i_90411 + (v_MWidthC_1 * v_l_id_90410))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90412 = 0; \n          v__90436[v_w_id_90405] = doubleMultiplyAdd(v__75402, v__90417, v__90416[v_w_id_90405], v__90418); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90405 = atomic_inc(v_work_idx_6886); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90413",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90414",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90415",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90416",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90417",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90418",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90426",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90420",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90431",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}