{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__81829, const global float* restrict v__81830, const global float* restrict v__81831, const global float* restrict v__81832, float v__81833, float v__81834, global float* v__81852, global float* v__81842, global int* v__81836, local float* v__81847, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81838; \n  float v__81843; \n  float v__75402; \n  /* Private Memory */\n  float v__81840_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6118 = v__81836; \n    local int v_w_id_81821; \n    if (get_local_id(0) == 0) {\n      v_w_id_81821 = atomic_inc(v_work_idx_6118); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_81821 < v_MHeight_2)){\n      for (int v_l_id_81822 = get_local_id(0); v_l_id_81822 < v_MWidthC_1; v_l_id_81822 = (v_l_id_81822 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_81823 = 0; v_i_81823 < 16; v_i_81823 = (1 + v_i_81823)) {\n          float v_tmp_81915 = 3.4028235E38f; \n          v__81838 = v_tmp_81915; \n          int v_index_81916 = v__81829[(v_l_id_81822 + (16 * v_MWidthC_1 * v_w_id_81821) + (v_MWidthC_1 * v_i_81823))]; \n          if (v_index_81916 < 0) {\n            v__81840_0 = v__81838; \n          } else {\n            if (v_index_81916 >= v_VLength_3) {\n              v__81840_0 = v__81838; \n            } else {\n              v__81840_0 = v__81831[v_index_81916]; \n            }\n          }\n          v__81842[(15 + (16 * v_MWidthC_1 * v_w_id_81821) + (-1 * v_i_81823) + (16 * v_l_id_81822))] = absadd(v__81840_0, v__81830[(v_l_id_81822 + (16 * v_MWidthC_1 * v_w_id_81821) + (v_MWidthC_1 * v_i_81823))]); \n        }\n        /* end map_seq */\n        float v_tmp_81917 = 3.4028235E38f; \n        v__81843 = v_tmp_81917; \n        /* reduce_seq */\n        for (int v_i_81824 = 0; v_i_81824 < 16; v_i_81824 = (1 + v_i_81824)) {\n          v__81843 = clmin(v__81843, v__81842[(v_i_81824 + (16 * v_MWidthC_1 * v_w_id_81821) + (16 * v_l_id_81822))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81825 = 0; \n          v__81847[v_l_id_81822] = id(v__81843); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_81826 = get_local_id(0); \n        float v_tmp_81920 = 3.4028235E38f; \n        v__75402 = v_tmp_81920; \n        /* reduce_seq */\n        for (int v_i_81827 = 0; v_i_81827 < v_MWidthC_1; v_i_81827 = (1 + v_i_81827)) {\n          v__75402 = clmin(v__75402, v__81847[(v_i_81827 + (v_MWidthC_1 * v_l_id_81826))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81828 = 0; \n          v__81852[v_w_id_81821] = doubleMultiplyAdd(v__75402, v__81833, v__81832[v_w_id_81821], v__81834); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_81821 = atomic_inc(v_work_idx_6118); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81829",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81830",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81831",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81832",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81833",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81834",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81842",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81836",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__81852",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81847",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}