{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__101770, const global float* restrict v__101771, const global float* restrict v__101772, const global float* restrict v__101773, float v__101774, float v__101775, global float* v__101788, global float* v__101782, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101778; \n  float v__101783; \n  /* Private Memory */\n  float v__101780_0;\n  \n  for (int v_wg_id_101765 = get_group_id(0); v_wg_id_101765 < ((v_MHeight_2)/(512)); v_wg_id_101765 = (v_wg_id_101765 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7901; \n      v_work_idx_7901 = 0; \n      int v_l_id_101766 = atomic_inc(&(v_work_idx_7901)); \n      while((v_l_id_101766 < 512)){\n        /* map_seq */\n        for (int v_i_101767 = 0; v_i_101767 < v_MWidthC_1; v_i_101767 = (1 + v_i_101767)) {\n          float v_tmp_101828 = 3.4028235E38f; \n          v__101778 = v_tmp_101828; \n          int v_index_101829 = v__101770[(v_i_101767 + (512 * v_MWidthC_1 * v_wg_id_101765) + (v_MWidthC_1 * v_l_id_101766))]; \n          if (v_index_101829 < 0) {\n            v__101780_0 = v__101778; \n          } else {\n            if (v_index_101829 >= v_VLength_3) {\n              v__101780_0 = v__101778; \n            } else {\n              v__101780_0 = v__101772[v_index_101829]; \n            }\n          }\n          v__101782[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_101765) + (-1 * v_i_101767) + (v_MWidthC_1 * v_l_id_101766))] = absadd(v__101780_0, v__101771[(v_i_101767 + (512 * v_MWidthC_1 * v_wg_id_101765) + (v_MWidthC_1 * v_l_id_101766))]); \n        }\n        /* end map_seq */\n        float v_tmp_101830 = 3.4028235E38f; \n        v__101783 = v_tmp_101830; \n        /* reduce_seq */\n        for (int v_i_101768 = 0; v_i_101768 < v_MWidthC_1; v_i_101768 = (1 + v_i_101768)) {\n          v__101783 = clmin(v__101783, v__101782[(v_i_101768 + (512 * v_MWidthC_1 * v_wg_id_101765) + (v_MWidthC_1 * v_l_id_101766))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101769 = 0; \n          v__101788[(v_l_id_101766 + (512 * v_wg_id_101765))] = doubleMultiplyAdd(v__101783, v__101774, v__101773[(v_l_id_101766 + (512 * v_wg_id_101765))], v__101775); \n        }\n        /* end map_seq */\n        v_l_id_101766 = atomic_inc(&(v_work_idx_7901)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101770",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101771",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101772",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101773",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101774",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101775",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101782",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101788",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}