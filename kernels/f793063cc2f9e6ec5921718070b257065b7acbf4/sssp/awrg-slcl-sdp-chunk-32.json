{
  "name" : "awrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85642, const global float* restrict v__85643, const global float* restrict v__85644, const global float* restrict v__85645, float v__85646, float v__85647, global float* v__85661, global float* v__85655, global int* v__85649, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85651; \n  float v__85656; \n  /* Private Memory */\n  float v__85653_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6462 = v__85649; \n    local int v_w_id_85637; \n    if (get_local_id(0) == 0) {\n      v_w_id_85637 = atomic_inc(v_work_idx_6462); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_85637 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_85638 = get_local_id(0); v_l_id_85638 < 32; v_l_id_85638 = (v_l_id_85638 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_85639 = 0; v_i_85639 < v_MWidthC_1; v_i_85639 = (1 + v_i_85639)) {\n          float v_tmp_85704 = 3.4028235E38f; \n          v__85651 = v_tmp_85704; \n          int v_index_85705 = v__85642[(v_i_85639 + (32 * v_MWidthC_1 * v_w_id_85637) + (v_MWidthC_1 * v_l_id_85638))]; \n          if (v_index_85705 < 0) {\n            v__85653_0 = v__85651; \n          } else {\n            if (v_index_85705 >= v_VLength_3) {\n              v__85653_0 = v__85651; \n            } else {\n              v__85653_0 = v__85644[v_index_85705]; \n            }\n          }\n          v__85655[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_85637) + (-1 * v_i_85639) + (v_MWidthC_1 * v_l_id_85638))] = absadd(v__85653_0, v__85643[(v_i_85639 + (32 * v_MWidthC_1 * v_w_id_85637) + (v_MWidthC_1 * v_l_id_85638))]); \n        }\n        /* end map_seq */\n        float v_tmp_85706 = 3.4028235E38f; \n        v__85656 = v_tmp_85706; \n        /* reduce_seq */\n        for (int v_i_85640 = 0; v_i_85640 < v_MWidthC_1; v_i_85640 = (1 + v_i_85640)) {\n          v__85656 = clmin(v__85656, v__85655[(v_i_85640 + (32 * v_MWidthC_1 * v_w_id_85637) + (v_MWidthC_1 * v_l_id_85638))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85641 = 0; \n          v__85661[(v_l_id_85638 + (32 * v_w_id_85637))] = doubleMultiplyAdd(v__85656, v__85646, v__85645[(v_l_id_85638 + (32 * v_w_id_85637))], v__85647); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_85637 = atomic_inc(v_work_idx_6462); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85642",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85643",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85644",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85646",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85647",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85649",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__85661",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}