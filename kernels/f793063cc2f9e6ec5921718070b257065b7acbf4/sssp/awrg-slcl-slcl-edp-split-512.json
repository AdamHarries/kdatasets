{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103499, const global float* restrict v__103500, const global float* restrict v__103501, const global float* restrict v__103502, float v__103503, float v__103504, global float* v__103524, global int* v__103506, local float* v__103519, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103508; \n  float v__103510; \n  float v__75402; \n  /* Private Memory */\n  float v__103512_0;\n  \n  float v__103514_0;\n  \n  int v__103518_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8056 = v__103506; \n    local int v_w_id_103492; \n    if (get_local_id(0) == 0) {\n      v_w_id_103492 = atomic_inc(v_work_idx_8056); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103492 < v_MHeight_2)){\n      for (int v_l_id_103493 = get_local_id(0); v_l_id_103493 < v_MWidthC_1; v_l_id_103493 = (v_l_id_103493 + get_local_size(0))) {\n        float v_tmp_103590 = 3.4028235E38f; \n        v__103508 = v_tmp_103590; \n        /* reduce_while_seq */\n        for (int v_i_103494 = 0; v_i_103494 < 512; v_i_103494 = (1 + v_i_103494)) {\n          v__103518_0 = check(v__103508, v__103499[(v_l_id_103493 + (512 * v_MWidthC_1 * v_w_id_103492) + (v_MWidthC_1 * v_i_103494))]); \n          if (v__103518_0) {\n          } else {\n            break;\n          }\n          float v_tmp_103591 = 3.4028235E38f; \n          v__103510 = v_tmp_103591; \n          int v_index_103592 = v__103499[(v_l_id_103493 + (512 * v_MWidthC_1 * v_w_id_103492) + (v_MWidthC_1 * v_i_103494))]; \n          if (v_index_103592 < 0) {\n            v__103512_0 = v__103510; \n          } else {\n            if (v_index_103592 >= v_VLength_3) {\n              v__103512_0 = v__103510; \n            } else {\n              v__103512_0 = v__103501[v_index_103592]; \n            }\n          }\n          v__103514_0 = absadd(v__103512_0, v__103500[(v_l_id_103493 + (512 * v_MWidthC_1 * v_w_id_103492) + (v_MWidthC_1 * v_i_103494))]); \n          v__103508 = clmin(v__103514_0, v__103508); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103495 = 0; \n          v__103519[v_l_id_103493] = id(v__103508); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103496 = get_local_id(0); \n        float v_tmp_103595 = 3.4028235E38f; \n        v__75402 = v_tmp_103595; \n        /* reduce_seq */\n        for (int v_i_103497 = 0; v_i_103497 < v_MWidthC_1; v_i_103497 = (1 + v_i_103497)) {\n          v__75402 = clmin(v__75402, v__103519[(v_i_103497 + (v_MWidthC_1 * v_l_id_103496))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103498 = 0; \n          v__103524[v_w_id_103492] = doubleMultiplyAdd(v__75402, v__103503, v__103502[v_w_id_103492], v__103504); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103492 = atomic_inc(v_work_idx_8056); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__103499",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103500",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103501",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103503",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103504",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103506",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103524",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103519",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}