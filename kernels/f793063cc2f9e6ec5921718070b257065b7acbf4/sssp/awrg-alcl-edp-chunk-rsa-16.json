{
  "name" : "awrg-alcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82830, const global float* restrict v__82831, const global float* restrict v__82832, const global float* restrict v__82833, float v__82834, float v__82835, global float* v__82850, global float* v__82849, global int* v__82837, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82838; \n  float v__82841; \n  /* Private Memory */\n  float v__82843_0;\n  \n  float v__82845_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6210 = v__82837; \n    local int v_w_id_82825; \n    if (get_local_id(0) == 0) {\n      v_w_id_82825 = atomic_inc(v_work_idx_6210); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82825 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6208; \n        v_work_idx_6208 = 0; \n        int v_l_id_82826 = atomic_inc(&(v_work_idx_6208)); \n        while((v_l_id_82826 < 16)){\n          float v_tmp_82882 = 3.4028235E38f; \n          v__82838 = v_tmp_82882; \n          /* reduce_seq */\n          int v_stop_82883 = min(v__82830[(1 + (v__82830[(v_l_id_82826 + (16 * v_w_id_82825))] / 4))], ((global int*)(v__82831 + (((global int*)(v__82831))[(v_l_id_82826 + (16 * v_w_id_82825))] / 4)))[1]); \n          for (int v_i_82827 = 0; v_i_82827 < v_stop_82883; v_i_82827 = (1 + v_i_82827)) {\n            float v_tmp_82891 = 3.4028235E38f; \n            v__82841 = v_tmp_82891; \n            int v_index_82893 = v__82830[(2 + v_i_82827 + (v__82830[(v_l_id_82826 + (16 * v_w_id_82825))] / 4))]; \n            if (v_index_82893 < 0) {\n              v__82843_0 = v__82841; \n            } else {\n              if (v_index_82893 >= v_MWidthC_1) {\n                v__82843_0 = v__82841; \n              } else {\n                v__82843_0 = v__82832[v_index_82893]; \n              }\n            }\n            v__82845_0 = absadd(v__82831[(2 + v_i_82827 + (((global int*)(v__82831))[(v_l_id_82826 + (16 * v_w_id_82825))] / 4))], v__82843_0); \n            v__82838 = clmin(v__82838, v__82845_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82828 = 0; \n            v__82849[(v_l_id_82826 + (16 * v_w_id_82825))] = doubleMultiplyAdd(v__82838, v__82834, v__82833[(v_l_id_82826 + (16 * v_w_id_82825))], v__82835); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82829 = 0; \n            v__82850[(v_l_id_82826 + (16 * v_w_id_82825))] = id(v__82849[(v_l_id_82826 + (16 * v_w_id_82825))]); \n          }\n          /* end map_seq */\n          v_l_id_82826 = atomic_inc(&(v_work_idx_6208)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82825 = atomic_inc(v_work_idx_6210); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82830",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__82831",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__82832",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__82833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82834",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82835",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82837",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82850",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}