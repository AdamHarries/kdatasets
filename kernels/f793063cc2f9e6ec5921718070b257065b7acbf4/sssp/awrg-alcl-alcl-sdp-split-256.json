{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100376, const global float* restrict v__100377, const global float* restrict v__100378, const global float* restrict v__100379, float v__100380, float v__100381, global float* v__100399, global float* v__100389, global int* v__100383, local float* v__100394, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100385; \n  float v__100390; \n  float v__75402; \n  /* Private Memory */\n  float v__100387_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7789 = v__100383; \n    local int v_w_id_100368; \n    if (get_local_id(0) == 0) {\n      v_w_id_100368 = atomic_inc(v_work_idx_7789); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100368 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7787; \n        v_work_idx_7787 = 0; \n        int v_l_id_100369 = atomic_inc(&(v_work_idx_7787)); \n        while((v_l_id_100369 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100370 = 0; v_i_100370 < 256; v_i_100370 = (1 + v_i_100370)) {\n            float v_tmp_100450 = 3.4028235E38f; \n            v__100385 = v_tmp_100450; \n            int v_index_100451 = v__100376[(v_l_id_100369 + (256 * v_MWidthC_1 * v_w_id_100368) + (v_MWidthC_1 * v_i_100370))]; \n            if (v_index_100451 < 0) {\n              v__100387_0 = v__100385; \n            } else {\n              if (v_index_100451 >= v_VLength_3) {\n                v__100387_0 = v__100385; \n              } else {\n                v__100387_0 = v__100378[v_index_100451]; \n              }\n            }\n            v__100389[(255 + (256 * v_MWidthC_1 * v_w_id_100368) + (-1 * v_i_100370) + (256 * v_l_id_100369))] = absadd(v__100387_0, v__100377[(v_l_id_100369 + (256 * v_MWidthC_1 * v_w_id_100368) + (v_MWidthC_1 * v_i_100370))]); \n          }\n          /* end map_seq */\n          float v_tmp_100452 = 3.4028235E38f; \n          v__100390 = v_tmp_100452; \n          /* reduce_seq */\n          for (int v_i_100371 = 0; v_i_100371 < 256; v_i_100371 = (1 + v_i_100371)) {\n            v__100390 = clmin(v__100390, v__100389[(v_i_100371 + (256 * v_MWidthC_1 * v_w_id_100368) + (256 * v_l_id_100369))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100372 = 0; \n            v__100394[v_l_id_100369] = id(v__100390); \n          }\n          /* end map_seq */\n          v_l_id_100369 = atomic_inc(&(v_work_idx_7787)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7781; \n        v_work_idx_7781 = 0; \n        int v_l_id_100373 = atomic_inc(&(v_work_idx_7781)); \n        while((v_l_id_100373 < 1)){\n          float v_tmp_100455 = 3.4028235E38f; \n          v__75402 = v_tmp_100455; \n          /* reduce_seq */\n          for (int v_i_100374 = 0; v_i_100374 < v_MWidthC_1; v_i_100374 = (1 + v_i_100374)) {\n            v__75402 = clmin(v__75402, v__100394[(v_i_100374 + (v_MWidthC_1 * v_l_id_100373))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100375 = 0; \n            v__100399[v_w_id_100368] = doubleMultiplyAdd(v__75402, v__100380, v__100379[v_w_id_100368], v__100381); \n          }\n          /* end map_seq */\n          v_l_id_100373 = atomic_inc(&(v_work_idx_7781)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100368 = atomic_inc(v_work_idx_7789); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100376",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100377",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100378",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100380",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100381",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100389",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100383",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100399",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100394",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}