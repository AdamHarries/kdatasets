{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77537, const global float* restrict v__77538, const global float* restrict v__77539, const global float* restrict v__77540, float v__77541, float v__77542, global float* v__77560, global float* v__77550, global int* v__77544, local float* v__77555, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77546; \n  float v__77551; \n  float v__75402; \n  /* Private Memory */\n  float v__77548_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5734 = v__77544; \n    local int v_w_id_77529; \n    if (get_local_id(0) == 0) {\n      v_w_id_77529 = atomic_inc(v_work_idx_5734); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77529 < v_MHeight_2)){\n      for (int v_l_id_77530 = get_local_id(0); v_l_id_77530 < v_MWidthC_1; v_l_id_77530 = (v_l_id_77530 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_77531 = 0; v_i_77531 < 8; v_i_77531 = (1 + v_i_77531)) {\n          float v_tmp_77623 = 3.4028235E38f; \n          v__77546 = v_tmp_77623; \n          int v_index_77624 = v__77537[(v_l_id_77530 + (8 * v_MWidthC_1 * v_w_id_77529) + (v_MWidthC_1 * v_i_77531))]; \n          if (v_index_77624 < 0) {\n            v__77548_0 = v__77546; \n          } else {\n            if (v_index_77624 >= v_VLength_3) {\n              v__77548_0 = v__77546; \n            } else {\n              v__77548_0 = v__77539[v_index_77624]; \n            }\n          }\n          v__77550[(7 + (8 * v_MWidthC_1 * v_w_id_77529) + (-1 * v_i_77531) + (8 * v_l_id_77530))] = absadd(v__77548_0, v__77538[(v_l_id_77530 + (8 * v_MWidthC_1 * v_w_id_77529) + (v_MWidthC_1 * v_i_77531))]); \n        }\n        /* end map_seq */\n        float v_tmp_77625 = 3.4028235E38f; \n        v__77551 = v_tmp_77625; \n        /* reduce_seq */\n        for (int v_i_77532 = 0; v_i_77532 < 8; v_i_77532 = (1 + v_i_77532)) {\n          v__77551 = clmin(v__77551, v__77550[(v_i_77532 + (8 * v_MWidthC_1 * v_w_id_77529) + (8 * v_l_id_77530))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77533 = 0; \n          v__77555[v_l_id_77530] = id(v__77551); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_77534 = get_local_id(0); \n        float v_tmp_77628 = 3.4028235E38f; \n        v__75402 = v_tmp_77628; \n        /* reduce_seq */\n        for (int v_i_77535 = 0; v_i_77535 < v_MWidthC_1; v_i_77535 = (1 + v_i_77535)) {\n          v__75402 = clmin(v__75402, v__77555[(v_i_77535 + (v_MWidthC_1 * v_l_id_77534))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77536 = 0; \n          v__77560[v_w_id_77529] = doubleMultiplyAdd(v__75402, v__77541, v__77540[v_w_id_77529], v__77542); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_77529 = atomic_inc(v_work_idx_5734); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__77537",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77538",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77539",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77541",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77542",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77550",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77544",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77555",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}