{
  "name" : "swrg-alcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__76314, const global float* restrict v__76315, const global float* restrict v__76316, const global float* restrict v__76317, float v__76318, float v__76319, global float* v__76333, global float* v__76332, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76321; \n  float v__76324; \n  /* Private Memory */\n  float v__76326_0;\n  \n  float v__76328_0;\n  \n  for (int v_wg_id_76309 = get_group_id(0); v_wg_id_76309 < ((v_MHeight_2)/(8)); v_wg_id_76309 = (v_wg_id_76309 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5621; \n      v_work_idx_5621 = 0; \n      int v_l_id_76310 = atomic_inc(&(v_work_idx_5621)); \n      while((v_l_id_76310 < 8)){\n        float v_tmp_76366 = 3.4028235E38f; \n        v__76321 = v_tmp_76366; \n        /* reduce_seq */\n        int v_stop_76367 = min(v__76314[(1 + (v__76314[(v_l_id_76310 + (8 * v_wg_id_76309))] / 4))], ((global int*)(v__76315 + (((global int*)(v__76315))[(v_l_id_76310 + (8 * v_wg_id_76309))] / 4)))[1]); \n        for (int v_i_76311 = 0; v_i_76311 < v_stop_76367; v_i_76311 = (1 + v_i_76311)) {\n          float v_tmp_76375 = 3.4028235E38f; \n          v__76324 = v_tmp_76375; \n          int v_index_76377 = v__76314[(2 + v_i_76311 + (v__76314[(v_l_id_76310 + (8 * v_wg_id_76309))] / 4))]; \n          if (v_index_76377 < 0) {\n            v__76326_0 = v__76324; \n          } else {\n            if (v_index_76377 >= v_MWidthC_1) {\n              v__76326_0 = v__76324; \n            } else {\n              v__76326_0 = v__76316[v_index_76377]; \n            }\n          }\n          v__76328_0 = absadd(v__76315[(2 + v_i_76311 + (((global int*)(v__76315))[(v_l_id_76310 + (8 * v_wg_id_76309))] / 4))], v__76326_0); \n          v__76321 = clmin(v__76321, v__76328_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76312 = 0; \n          v__76332[(v_l_id_76310 + (8 * v_wg_id_76309))] = doubleMultiplyAdd(v__76321, v__76318, v__76317[(v_l_id_76310 + (8 * v_wg_id_76309))], v__76319); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76313 = 0; \n          v__76333[(v_l_id_76310 + (8 * v_wg_id_76309))] = id(v__76332[(v_l_id_76310 + (8 * v_wg_id_76309))]); \n        }\n        /* end map_seq */\n        v_l_id_76310 = atomic_inc(&(v_work_idx_5621)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76314",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76315",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76316",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__76317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76318",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76319",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__76333",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}