{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__82039, const global float* restrict v__82040, const global float* restrict v__82041, const global float* restrict v__82042, float v__82043, float v__82044, global float* v__82064, global int* v__82046, local float* v__82059, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82048; \n  float v__82050; \n  float v__75402; \n  /* Private Memory */\n  float v__82052_0;\n  \n  float v__82054_0;\n  \n  int v__82058_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6136 = v__82046; \n    local int v_w_id_82032; \n    if (get_local_id(0) == 0) {\n      v_w_id_82032 = atomic_inc(v_work_idx_6136); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82032 < v_MHeight_2)){\n      for (int v_l_id_82033 = get_local_id(0); v_l_id_82033 < v_MWidthC_1; v_l_id_82033 = (v_l_id_82033 + get_local_size(0))) {\n        float v_tmp_82130 = 3.4028235E38f; \n        v__82048 = v_tmp_82130; \n        /* reduce_while_seq */\n        for (int v_i_82034 = 0; v_i_82034 < 16; v_i_82034 = (1 + v_i_82034)) {\n          v__82058_0 = check(v__82048, v__82039[(v_l_id_82033 + (16 * v_MWidthC_1 * v_w_id_82032) + (v_MWidthC_1 * v_i_82034))]); \n          if (v__82058_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82131 = 3.4028235E38f; \n          v__82050 = v_tmp_82131; \n          int v_index_82132 = v__82039[(v_l_id_82033 + (16 * v_MWidthC_1 * v_w_id_82032) + (v_MWidthC_1 * v_i_82034))]; \n          if (v_index_82132 < 0) {\n            v__82052_0 = v__82050; \n          } else {\n            if (v_index_82132 >= v_VLength_3) {\n              v__82052_0 = v__82050; \n            } else {\n              v__82052_0 = v__82041[v_index_82132]; \n            }\n          }\n          v__82054_0 = absadd(v__82052_0, v__82040[(v_l_id_82033 + (16 * v_MWidthC_1 * v_w_id_82032) + (v_MWidthC_1 * v_i_82034))]); \n          v__82048 = clmin(v__82054_0, v__82048); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82035 = 0; \n          v__82059[v_l_id_82033] = id(v__82048); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_82036 = get_local_id(0); \n        float v_tmp_82135 = 3.4028235E38f; \n        v__75402 = v_tmp_82135; \n        /* reduce_seq */\n        for (int v_i_82037 = 0; v_i_82037 < v_MWidthC_1; v_i_82037 = (1 + v_i_82037)) {\n          v__75402 = clmin(v__75402, v__82059[(v_i_82037 + (v_MWidthC_1 * v_l_id_82036))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82038 = 0; \n          v__82064[v_w_id_82032] = doubleMultiplyAdd(v__75402, v__82043, v__82042[v_w_id_82032], v__82044); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82032 = atomic_inc(v_work_idx_6136); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82039",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82040",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82041",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82043",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82044",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82046",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82059",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}