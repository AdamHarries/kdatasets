{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78813, const global float* restrict v__78814, const global float* restrict v__78815, const global float* restrict v__78816, float v__78817, float v__78818, global float* v__78838, global int* v__78820, local float* v__78833, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78822; \n  float v__78824; \n  float v__75402; \n  /* Private Memory */\n  float v__78826_0;\n  \n  float v__78828_0;\n  \n  int v__78832_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5857 = v__78820; \n    local int v_w_id_78806; \n    if (get_local_id(0) == 0) {\n      v_w_id_78806 = atomic_inc(v_work_idx_5857); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78806 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5855; \n        v_work_idx_5855 = 0; \n        int v_l_id_78807 = atomic_inc(&(v_work_idx_5855)); \n        while((v_l_id_78807 < v_MWidthC_1)){\n          float v_tmp_78896 = 3.4028235E38f; \n          v__78822 = v_tmp_78896; \n          /* reduce_while_seq */\n          for (int v_i_78808 = 0; v_i_78808 < 8; v_i_78808 = (1 + v_i_78808)) {\n            v__78832_0 = check(v__78822, v__78813[(v_l_id_78807 + (8 * v_MWidthC_1 * v_w_id_78806) + (v_MWidthC_1 * v_i_78808))]); \n            if (v__78832_0) {\n            } else {\n              break;\n            }\n            float v_tmp_78897 = 3.4028235E38f; \n            v__78824 = v_tmp_78897; \n            int v_index_78898 = v__78813[(v_l_id_78807 + (8 * v_MWidthC_1 * v_w_id_78806) + (v_MWidthC_1 * v_i_78808))]; \n            if (v_index_78898 < 0) {\n              v__78826_0 = v__78824; \n            } else {\n              if (v_index_78898 >= v_VLength_3) {\n                v__78826_0 = v__78824; \n              } else {\n                v__78826_0 = v__78815[v_index_78898]; \n              }\n            }\n            v__78828_0 = absadd(v__78826_0, v__78814[(v_l_id_78807 + (8 * v_MWidthC_1 * v_w_id_78806) + (v_MWidthC_1 * v_i_78808))]); \n            v__78822 = clmin(v__78828_0, v__78822); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78809 = 0; \n            v__78833[v_l_id_78807] = id(v__78822); \n          }\n          /* end map_seq */\n          v_l_id_78807 = atomic_inc(&(v_work_idx_5855)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_78810 = get_local_id(0); \n        float v_tmp_78901 = 3.4028235E38f; \n        v__75402 = v_tmp_78901; \n        /* reduce_seq */\n        for (int v_i_78811 = 0; v_i_78811 < v_MWidthC_1; v_i_78811 = (1 + v_i_78811)) {\n          v__75402 = clmin(v__75402, v__78833[(v_i_78811 + (v_MWidthC_1 * v_l_id_78810))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78812 = 0; \n          v__78838[v_w_id_78806] = doubleMultiplyAdd(v__75402, v__78817, v__78816[v_w_id_78806], v__78818); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78806 = atomic_inc(v_work_idx_5857); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__78813",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78814",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78815",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78816",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78817",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78818",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78820",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78838",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78833",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}