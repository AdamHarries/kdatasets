{
  "name" : "awrg-alcl-sdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__86966, const global float* restrict v__86967, const global float* restrict v__86968, const global float* restrict v__86969, float v__86970, float v__86971, global float* v__86986, global float* v__86985, global int* v__86973, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86974; \n  float v__86977; \n  /* Private Memory */\n  float v__86979_0;\n  \n  float v__86981_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6580 = v__86973; \n    local int v_w_id_86961; \n    if (get_local_id(0) == 0) {\n      v_w_id_86961 = atomic_inc(v_work_idx_6580); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86961 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6578; \n        v_work_idx_6578 = 0; \n        int v_l_id_86962 = atomic_inc(&(v_work_idx_6578)); \n        while((v_l_id_86962 < 32)){\n          float v_tmp_87018 = 3.4028235E38f; \n          v__86974 = v_tmp_87018; \n          /* reduce_seq */\n          int v_stop_87019 = min(v__86966[(1 + (v__86966[(v_l_id_86962 + (32 * v_w_id_86961))] / 4))], ((global int*)(v__86967 + (((global int*)(v__86967))[(v_l_id_86962 + (32 * v_w_id_86961))] / 4)))[1]); \n          for (int v_i_86963 = 0; v_i_86963 < v_stop_87019; v_i_86963 = (1 + v_i_86963)) {\n            float v_tmp_87027 = 3.4028235E38f; \n            v__86977 = v_tmp_87027; \n            int v_index_87029 = v__86966[(2 + v_i_86963 + (v__86966[(v_l_id_86962 + (32 * v_w_id_86961))] / 4))]; \n            if (v_index_87029 < 0) {\n              v__86979_0 = v__86977; \n            } else {\n              if (v_index_87029 >= v_MWidthC_1) {\n                v__86979_0 = v__86977; \n              } else {\n                v__86979_0 = v__86968[v_index_87029]; \n              }\n            }\n            v__86981_0 = absadd(v__86967[(2 + v_i_86963 + (((global int*)(v__86967))[(v_l_id_86962 + (32 * v_w_id_86961))] / 4))], v__86979_0); \n            v__86974 = clmin(v__86974, v__86981_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86964 = 0; \n            v__86985[(v_l_id_86962 + (32 * v_w_id_86961))] = doubleMultiplyAdd(v__86974, v__86970, v__86969[(v_l_id_86962 + (32 * v_w_id_86961))], v__86971); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86965 = 0; \n            v__86986[(v_l_id_86962 + (32 * v_w_id_86961))] = id(v__86985[(v_l_id_86962 + (32 * v_w_id_86961))]); \n          }\n          /* end map_seq */\n          v_l_id_86962 = atomic_inc(&(v_work_idx_6578)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86961 = atomic_inc(v_work_idx_6580); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86966",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__86967",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__86968",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__86969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86970",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86971",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86973",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}