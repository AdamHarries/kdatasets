{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__102713, const global float* restrict v__102714, const global float* restrict v__102715, const global float* restrict v__102716, float v__102717, float v__102718, global float* v__102737, local float* v__102732, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102721; \n  float v__102723; \n  float v__75402; \n  /* Private Memory */\n  float v__102725_0;\n  \n  float v__102727_0;\n  \n  int v__102731_0;\n  \n  for (int v_wg_id_102706 = get_group_id(0); v_wg_id_102706 < v_MHeight_2; v_wg_id_102706 = (v_wg_id_102706 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7990; \n      v_work_idx_7990 = 0; \n      int v_l_id_102707 = atomic_inc(&(v_work_idx_7990)); \n      while((v_l_id_102707 < v_MWidthC_1)){\n        float v_tmp_102793 = 3.4028235E38f; \n        v__102721 = v_tmp_102793; \n        /* reduce_while_seq */\n        for (int v_i_102708 = 0; v_i_102708 < 512; v_i_102708 = (1 + v_i_102708)) {\n          v__102731_0 = check(v__102721, v__102713[(v_l_id_102707 + (512 * v_MWidthC_1 * v_wg_id_102706) + (v_MWidthC_1 * v_i_102708))]); \n          if (v__102731_0) {\n          } else {\n            break;\n          }\n          float v_tmp_102794 = 3.4028235E38f; \n          v__102723 = v_tmp_102794; \n          int v_index_102795 = v__102713[(v_l_id_102707 + (512 * v_MWidthC_1 * v_wg_id_102706) + (v_MWidthC_1 * v_i_102708))]; \n          if (v_index_102795 < 0) {\n            v__102725_0 = v__102723; \n          } else {\n            if (v_index_102795 >= v_VLength_3) {\n              v__102725_0 = v__102723; \n            } else {\n              v__102725_0 = v__102715[v_index_102795]; \n            }\n          }\n          v__102727_0 = absadd(v__102725_0, v__102714[(v_l_id_102707 + (512 * v_MWidthC_1 * v_wg_id_102706) + (v_MWidthC_1 * v_i_102708))]); \n          v__102721 = clmin(v__102727_0, v__102721); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102709 = 0; \n          v__102732[v_l_id_102707] = id(v__102721); \n        }\n        /* end map_seq */\n        v_l_id_102707 = atomic_inc(&(v_work_idx_7990)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7985; \n      v_work_idx_7985 = 0; \n      int v_l_id_102710 = atomic_inc(&(v_work_idx_7985)); \n      while((v_l_id_102710 < 1)){\n        float v_tmp_102798 = 3.4028235E38f; \n        v__75402 = v_tmp_102798; \n        /* reduce_seq */\n        for (int v_i_102711 = 0; v_i_102711 < v_MWidthC_1; v_i_102711 = (1 + v_i_102711)) {\n          v__75402 = clmin(v__75402, v__102732[(v_i_102711 + (v_MWidthC_1 * v_l_id_102710))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102712 = 0; \n          v__102737[v_wg_id_102706] = doubleMultiplyAdd(v__75402, v__102717, v__102716[v_wg_id_102706], v__102718); \n        }\n        /* end map_seq */\n        v_l_id_102710 = atomic_inc(&(v_work_idx_7985)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__102713",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102714",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102715",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102716",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102717",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102718",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__102737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102732",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}