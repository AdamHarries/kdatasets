{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__102525, const global float* restrict v__102526, const global float* restrict v__102527, const global float* restrict v__102528, float v__102529, float v__102530, global float* v__102547, global float* v__102537, local float* v__102542, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102533; \n  float v__102538; \n  float v__75402; \n  /* Private Memory */\n  float v__102535_0;\n  \n  for (int v_wg_id_102517 = get_group_id(0); v_wg_id_102517 < v_MHeight_2; v_wg_id_102517 = (v_wg_id_102517 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7970; \n      v_work_idx_7970 = 0; \n      int v_l_id_102518 = atomic_inc(&(v_work_idx_7970)); \n      while((v_l_id_102518 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102519 = 0; v_i_102519 < 512; v_i_102519 = (1 + v_i_102519)) {\n          float v_tmp_102600 = 3.4028235E38f; \n          v__102533 = v_tmp_102600; \n          int v_index_102601 = v__102525[(v_l_id_102518 + (512 * v_MWidthC_1 * v_wg_id_102517) + (v_MWidthC_1 * v_i_102519))]; \n          if (v_index_102601 < 0) {\n            v__102535_0 = v__102533; \n          } else {\n            if (v_index_102601 >= v_VLength_3) {\n              v__102535_0 = v__102533; \n            } else {\n              v__102535_0 = v__102527[v_index_102601]; \n            }\n          }\n          v__102537[(511 + (512 * v_MWidthC_1 * v_wg_id_102517) + (-1 * v_i_102519) + (512 * v_l_id_102518))] = absadd(v__102535_0, v__102526[(v_l_id_102518 + (512 * v_MWidthC_1 * v_wg_id_102517) + (v_MWidthC_1 * v_i_102519))]); \n        }\n        /* end map_seq */\n        float v_tmp_102602 = 3.4028235E38f; \n        v__102538 = v_tmp_102602; \n        /* reduce_seq */\n        for (int v_i_102520 = 0; v_i_102520 < 512; v_i_102520 = (1 + v_i_102520)) {\n          v__102538 = clmin(v__102538, v__102537[(v_i_102520 + (512 * v_MWidthC_1 * v_wg_id_102517) + (512 * v_l_id_102518))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102521 = 0; \n          v__102542[v_l_id_102518] = id(v__102538); \n        }\n        /* end map_seq */\n        v_l_id_102518 = atomic_inc(&(v_work_idx_7970)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7964; \n      v_work_idx_7964 = 0; \n      int v_l_id_102522 = atomic_inc(&(v_work_idx_7964)); \n      while((v_l_id_102522 < 1)){\n        float v_tmp_102605 = 3.4028235E38f; \n        v__75402 = v_tmp_102605; \n        /* reduce_seq */\n        for (int v_i_102523 = 0; v_i_102523 < v_MWidthC_1; v_i_102523 = (1 + v_i_102523)) {\n          v__75402 = clmin(v__75402, v__102542[(v_i_102523 + (v_MWidthC_1 * v_l_id_102522))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102524 = 0; \n          v__102547[v_wg_id_102517] = doubleMultiplyAdd(v__75402, v__102529, v__102528[v_wg_id_102517], v__102530); \n        }\n        /* end map_seq */\n        v_l_id_102522 = atomic_inc(&(v_work_idx_7964)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102525",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102526",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102527",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102528",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102529",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102530",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102537",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102547",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102542",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}