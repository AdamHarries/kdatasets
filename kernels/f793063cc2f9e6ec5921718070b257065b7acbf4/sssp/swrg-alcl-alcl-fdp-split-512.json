{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__102619, const global float* restrict v__102620, const global float* restrict v__102621, const global float* restrict v__102622, float v__102623, float v__102624, global float* v__102641, local float* v__102636, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102627; \n  float v__102629; \n  float v__75402; \n  /* Private Memory */\n  float v__102631_0;\n  \n  float v__102633_0;\n  \n  for (int v_wg_id_102612 = get_group_id(0); v_wg_id_102612 < v_MHeight_2; v_wg_id_102612 = (v_wg_id_102612 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7980; \n      v_work_idx_7980 = 0; \n      int v_l_id_102613 = atomic_inc(&(v_work_idx_7980)); \n      while((v_l_id_102613 < v_MWidthC_1)){\n        float v_tmp_102694 = 3.4028235E38f; \n        v__102627 = v_tmp_102694; \n        /* reduce_seq */\n        for (int v_i_102614 = 0; v_i_102614 < 512; v_i_102614 = (1 + v_i_102614)) {\n          float v_tmp_102695 = 3.4028235E38f; \n          v__102629 = v_tmp_102695; \n          int v_index_102696 = v__102619[(v_l_id_102613 + (512 * v_MWidthC_1 * v_wg_id_102612) + (v_MWidthC_1 * v_i_102614))]; \n          if (v_index_102696 < 0) {\n            v__102631_0 = v__102629; \n          } else {\n            if (v_index_102696 >= v_VLength_3) {\n              v__102631_0 = v__102629; \n            } else {\n              v__102631_0 = v__102621[v_index_102696]; \n            }\n          }\n          v__102633_0 = absadd(v__102631_0, v__102620[(v_l_id_102613 + (512 * v_MWidthC_1 * v_wg_id_102612) + (v_MWidthC_1 * v_i_102614))]); \n          v__102627 = clmin(v__102633_0, v__102627); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102615 = 0; \n          v__102636[v_l_id_102613] = id(v__102627); \n        }\n        /* end map_seq */\n        v_l_id_102613 = atomic_inc(&(v_work_idx_7980)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7975; \n      v_work_idx_7975 = 0; \n      int v_l_id_102616 = atomic_inc(&(v_work_idx_7975)); \n      while((v_l_id_102616 < 1)){\n        float v_tmp_102699 = 3.4028235E38f; \n        v__75402 = v_tmp_102699; \n        /* reduce_seq */\n        for (int v_i_102617 = 0; v_i_102617 < v_MWidthC_1; v_i_102617 = (1 + v_i_102617)) {\n          v__75402 = clmin(v__75402, v__102636[(v_i_102617 + (v_MWidthC_1 * v_l_id_102616))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102618 = 0; \n          v__102641[v_wg_id_102612] = doubleMultiplyAdd(v__75402, v__102623, v__102622[v_wg_id_102612], v__102624); \n        }\n        /* end map_seq */\n        v_l_id_102616 = atomic_inc(&(v_work_idx_7975)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__102619",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102620",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102621",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102622",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102623",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102624",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__102641",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102636",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}