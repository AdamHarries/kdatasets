{
  "name" : "swrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__89545, const global float* restrict v__89546, const global float* restrict v__89547, const global float* restrict v__89548, float v__89549, float v__89550, global float* v__89569, local float* v__89564, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89553; \n  float v__89555; \n  float v__75402; \n  /* Private Memory */\n  float v__89557_0;\n  \n  float v__89559_0;\n  \n  int v__89563_0;\n  \n  for (int v_wg_id_89538 = get_group_id(0); v_wg_id_89538 < v_MHeight_2; v_wg_id_89538 = (v_wg_id_89538 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6807; \n      v_work_idx_6807 = 0; \n      int v_l_id_89539 = atomic_inc(&(v_work_idx_6807)); \n      while((v_l_id_89539 < v_MWidthC_1)){\n        float v_tmp_89629 = 3.4028235E38f; \n        v__89553 = v_tmp_89629; \n        /* reduce_while_seq */\n        for (int v_i_89540 = 0; v_i_89540 < 64; v_i_89540 = (1 + v_i_89540)) {\n          v__89563_0 = check(v__89553, v__89545[(v_l_id_89539 + (64 * v_MWidthC_1 * v_wg_id_89538) + (v_MWidthC_1 * v_i_89540))]); \n          if (v__89563_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89630 = 3.4028235E38f; \n          v__89555 = v_tmp_89630; \n          int v_index_89631 = v__89545[(v_l_id_89539 + (64 * v_MWidthC_1 * v_wg_id_89538) + (v_MWidthC_1 * v_i_89540))]; \n          if (v_index_89631 < 0) {\n            v__89557_0 = v__89555; \n          } else {\n            if (v_index_89631 >= v_VLength_3) {\n              v__89557_0 = v__89555; \n            } else {\n              v__89557_0 = v__89547[v_index_89631]; \n            }\n          }\n          v__89559_0 = absadd(v__89557_0, v__89546[(v_l_id_89539 + (64 * v_MWidthC_1 * v_wg_id_89538) + (v_MWidthC_1 * v_i_89540))]); \n          v__89553 = clmin(v__89559_0, v__89553); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89541 = 0; \n          v__89564[v_l_id_89539] = id(v__89553); \n        }\n        /* end map_seq */\n        v_l_id_89539 = atomic_inc(&(v_work_idx_6807)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_89542 = get_local_id(0); \n      float v_tmp_89634 = 3.4028235E38f; \n      v__75402 = v_tmp_89634; \n      /* reduce_seq */\n      for (int v_i_89543 = 0; v_i_89543 < v_MWidthC_1; v_i_89543 = (1 + v_i_89543)) {\n        v__75402 = clmin(v__75402, v__89564[(v_i_89543 + (v_MWidthC_1 * v_l_id_89542))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_89544 = 0; \n        v__89569[v_wg_id_89538] = doubleMultiplyAdd(v__75402, v__89549, v__89548[v_wg_id_89538], v__89550); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__89545",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89546",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89547",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89548",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89549",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89550",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__89569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89564",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}