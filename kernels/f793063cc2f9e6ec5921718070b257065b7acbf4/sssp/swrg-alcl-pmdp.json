{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74710, const global float* restrict v__74711, const global float* restrict v__74712, const global float* restrict v__74713, float v__74714, float v__74715, global float* v__74728, global float* v__74722, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74718; \n  float v__74723; \n  /* Private Memory */\n  float v__74720_0;\n  \n  for (int v_wg_id_74706 = get_group_id(0); v_wg_id_74706 < v_MHeight_2; v_wg_id_74706 = (v_wg_id_74706 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_5494; \n      v_l_id_5494 = 0; \n      int v_l_id_74707 = atomic_inc(&(v_l_id_5494)); \n      while((v_l_id_74707 < v_MWidthC_1)){\n        float v_tmp_74760 = 3.4028235E38f; \n        v__74718 = v_tmp_74760; \n        int v_index_74761 = v__74710[(v_l_id_74707 + (v_MWidthC_1 * v_wg_id_74706))]; \n        if (v_index_74761 < 0) {\n          v__74720_0 = v__74718; \n        } else {\n          if (v_index_74761 >= v_VLength_3) {\n            v__74720_0 = v__74718; \n          } else {\n            v__74720_0 = v__74712[v_index_74761]; \n          }\n        }\n        v__74722[(-1 + v_MWidthC_1 + (-1 * v_l_id_74707) + (v_MWidthC_1 * v_wg_id_74706))] = absadd(v__74720_0, v__74711[(v_l_id_74707 + (v_MWidthC_1 * v_wg_id_74706))]); \n        v_l_id_74707 = atomic_inc(&(v_l_id_5494)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_74762 = 3.4028235E38f; \n    v__74723 = v_tmp_74762; \n    /* reduce_seq */\n    for (int v_i_74708 = 0; v_i_74708 < v_MWidthC_1; v_i_74708 = (1 + v_i_74708)) {\n      v__74723 = clmin(v__74723, v__74722[(v_i_74708 + (v_MWidthC_1 * v_wg_id_74706))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_74709 = 0; \n      v__74728[v_wg_id_74706] = doubleMultiplyAdd(v__74723, v__74714, v__74713[v_wg_id_74706], v__74715); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__74710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74712",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74713",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74714",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74715",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74722",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}