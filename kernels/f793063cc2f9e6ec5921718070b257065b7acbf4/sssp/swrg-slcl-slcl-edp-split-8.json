{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75597, const global float* restrict v__75598, const global float* restrict v__75599, const global float* restrict v__75600, float v__75601, float v__75602, global float* v__75621, local float* v__75616, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75605; \n  float v__75607; \n  float v__75402; \n  /* Private Memory */\n  float v__75609_0;\n  \n  float v__75611_0;\n  \n  int v__75615_0;\n  \n  for (int v_wg_id_75590 = get_group_id(0); v_wg_id_75590 < v_MHeight_2; v_wg_id_75590 = (v_wg_id_75590 + get_num_groups(0))) {\n    for (int v_l_id_75591 = get_local_id(0); v_l_id_75591 < v_MWidthC_1; v_l_id_75591 = (v_l_id_75591 + get_local_size(0))) {\n      float v_tmp_75689 = 3.4028235E38f; \n      v__75605 = v_tmp_75689; \n      /* reduce_while_seq */\n      for (int v_i_75592 = 0; v_i_75592 < 8; v_i_75592 = (1 + v_i_75592)) {\n        v__75615_0 = check(v__75605, v__75597[(v_l_id_75591 + (8 * v_MWidthC_1 * v_wg_id_75590) + (v_MWidthC_1 * v_i_75592))]); \n        if (v__75615_0) {\n        } else {\n          break;\n        }\n        float v_tmp_75690 = 3.4028235E38f; \n        v__75607 = v_tmp_75690; \n        int v_index_75691 = v__75597[(v_l_id_75591 + (8 * v_MWidthC_1 * v_wg_id_75590) + (v_MWidthC_1 * v_i_75592))]; \n        if (v_index_75691 < 0) {\n          v__75609_0 = v__75607; \n        } else {\n          if (v_index_75691 >= v_VLength_3) {\n            v__75609_0 = v__75607; \n          } else {\n            v__75609_0 = v__75599[v_index_75691]; \n          }\n        }\n        v__75611_0 = absadd(v__75609_0, v__75598[(v_l_id_75591 + (8 * v_MWidthC_1 * v_wg_id_75590) + (v_MWidthC_1 * v_i_75592))]); \n        v__75605 = clmin(v__75611_0, v__75605); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_75593 = 0; \n        v__75616[v_l_id_75591] = id(v__75605); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_75594 = get_local_id(0); \n      float v_tmp_75694 = 3.4028235E38f; \n      v__75402 = v_tmp_75694; \n      /* reduce_seq */\n      for (int v_i_75595 = 0; v_i_75595 < v_MWidthC_1; v_i_75595 = (1 + v_i_75595)) {\n        v__75402 = clmin(v__75402, v__75616[(v_i_75595 + (v_MWidthC_1 * v_l_id_75594))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_75596 = 0; \n        v__75621[v_wg_id_75590] = doubleMultiplyAdd(v__75402, v__75601, v__75600[v_wg_id_75590], v__75602); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__75597",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75598",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75599",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75600",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75601",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75602",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75616",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}