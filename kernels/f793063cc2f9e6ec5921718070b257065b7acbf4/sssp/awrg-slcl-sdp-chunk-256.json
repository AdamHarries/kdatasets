{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98518, const global float* restrict v__98519, const global float* restrict v__98520, const global float* restrict v__98521, float v__98522, float v__98523, global float* v__98537, global float* v__98531, global int* v__98525, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98527; \n  float v__98532; \n  /* Private Memory */\n  float v__98529_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7614 = v__98525; \n    local int v_w_id_98513; \n    if (get_local_id(0) == 0) {\n      v_w_id_98513 = atomic_inc(v_work_idx_7614); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_98513 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_98514 = get_local_id(0); v_l_id_98514 < 256; v_l_id_98514 = (v_l_id_98514 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_98515 = 0; v_i_98515 < v_MWidthC_1; v_i_98515 = (1 + v_i_98515)) {\n          float v_tmp_98580 = 3.4028235E38f; \n          v__98527 = v_tmp_98580; \n          int v_index_98581 = v__98518[(v_i_98515 + (256 * v_MWidthC_1 * v_w_id_98513) + (v_MWidthC_1 * v_l_id_98514))]; \n          if (v_index_98581 < 0) {\n            v__98529_0 = v__98527; \n          } else {\n            if (v_index_98581 >= v_VLength_3) {\n              v__98529_0 = v__98527; \n            } else {\n              v__98529_0 = v__98520[v_index_98581]; \n            }\n          }\n          v__98531[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_98513) + (-1 * v_i_98515) + (v_MWidthC_1 * v_l_id_98514))] = absadd(v__98529_0, v__98519[(v_i_98515 + (256 * v_MWidthC_1 * v_w_id_98513) + (v_MWidthC_1 * v_l_id_98514))]); \n        }\n        /* end map_seq */\n        float v_tmp_98582 = 3.4028235E38f; \n        v__98532 = v_tmp_98582; \n        /* reduce_seq */\n        for (int v_i_98516 = 0; v_i_98516 < v_MWidthC_1; v_i_98516 = (1 + v_i_98516)) {\n          v__98532 = clmin(v__98532, v__98531[(v_i_98516 + (256 * v_MWidthC_1 * v_w_id_98513) + (v_MWidthC_1 * v_l_id_98514))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98517 = 0; \n          v__98537[(v_l_id_98514 + (256 * v_w_id_98513))] = doubleMultiplyAdd(v__98532, v__98522, v__98521[(v_l_id_98514 + (256 * v_w_id_98513))], v__98523); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_98513 = atomic_inc(v_work_idx_7614); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98519",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98520",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98522",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98523",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98531",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98525",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__98537",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}