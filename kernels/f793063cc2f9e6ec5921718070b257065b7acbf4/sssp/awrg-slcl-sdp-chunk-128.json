{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__94226, const global float* restrict v__94227, const global float* restrict v__94228, const global float* restrict v__94229, float v__94230, float v__94231, global float* v__94245, global float* v__94239, global int* v__94233, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94235; \n  float v__94240; \n  /* Private Memory */\n  float v__94237_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7230 = v__94233; \n    local int v_w_id_94221; \n    if (get_local_id(0) == 0) {\n      v_w_id_94221 = atomic_inc(v_work_idx_7230); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94221 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_94222 = get_local_id(0); v_l_id_94222 < 128; v_l_id_94222 = (v_l_id_94222 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_94223 = 0; v_i_94223 < v_MWidthC_1; v_i_94223 = (1 + v_i_94223)) {\n          float v_tmp_94288 = 3.4028235E38f; \n          v__94235 = v_tmp_94288; \n          int v_index_94289 = v__94226[(v_i_94223 + (128 * v_MWidthC_1 * v_w_id_94221) + (v_MWidthC_1 * v_l_id_94222))]; \n          if (v_index_94289 < 0) {\n            v__94237_0 = v__94235; \n          } else {\n            if (v_index_94289 >= v_VLength_3) {\n              v__94237_0 = v__94235; \n            } else {\n              v__94237_0 = v__94228[v_index_94289]; \n            }\n          }\n          v__94239[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_94221) + (-1 * v_i_94223) + (v_MWidthC_1 * v_l_id_94222))] = absadd(v__94237_0, v__94227[(v_i_94223 + (128 * v_MWidthC_1 * v_w_id_94221) + (v_MWidthC_1 * v_l_id_94222))]); \n        }\n        /* end map_seq */\n        float v_tmp_94290 = 3.4028235E38f; \n        v__94240 = v_tmp_94290; \n        /* reduce_seq */\n        for (int v_i_94224 = 0; v_i_94224 < v_MWidthC_1; v_i_94224 = (1 + v_i_94224)) {\n          v__94240 = clmin(v__94240, v__94239[(v_i_94224 + (128 * v_MWidthC_1 * v_w_id_94221) + (v_MWidthC_1 * v_l_id_94222))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94225 = 0; \n          v__94245[(v_l_id_94222 + (128 * v_w_id_94221))] = doubleMultiplyAdd(v__94240, v__94230, v__94229[(v_l_id_94222 + (128 * v_w_id_94221))], v__94231); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_94221 = atomic_inc(v_work_idx_7230); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94228",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94230",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94231",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94233",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94245",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}