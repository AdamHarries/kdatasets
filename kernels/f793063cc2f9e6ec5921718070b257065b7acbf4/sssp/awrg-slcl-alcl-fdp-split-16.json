{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__82251, const global float* restrict v__82252, const global float* restrict v__82253, const global float* restrict v__82254, float v__82255, float v__82256, global float* v__82274, global int* v__82258, local float* v__82269, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82260; \n  float v__82262; \n  float v__75402; \n  /* Private Memory */\n  float v__82264_0;\n  \n  float v__82266_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6157 = v__82258; \n    local int v_w_id_82244; \n    if (get_local_id(0) == 0) {\n      v_w_id_82244 = atomic_inc(v_work_idx_6157); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82244 < v_MHeight_2)){\n      for (int v_l_id_82245 = get_local_id(0); v_l_id_82245 < v_MWidthC_1; v_l_id_82245 = (v_l_id_82245 + get_local_size(0))) {\n        float v_tmp_82333 = 3.4028235E38f; \n        v__82260 = v_tmp_82333; \n        /* reduce_seq */\n        for (int v_i_82246 = 0; v_i_82246 < 16; v_i_82246 = (1 + v_i_82246)) {\n          float v_tmp_82334 = 3.4028235E38f; \n          v__82262 = v_tmp_82334; \n          int v_index_82335 = v__82251[(v_l_id_82245 + (16 * v_MWidthC_1 * v_w_id_82244) + (v_MWidthC_1 * v_i_82246))]; \n          if (v_index_82335 < 0) {\n            v__82264_0 = v__82262; \n          } else {\n            if (v_index_82335 >= v_VLength_3) {\n              v__82264_0 = v__82262; \n            } else {\n              v__82264_0 = v__82253[v_index_82335]; \n            }\n          }\n          v__82266_0 = absadd(v__82264_0, v__82252[(v_l_id_82245 + (16 * v_MWidthC_1 * v_w_id_82244) + (v_MWidthC_1 * v_i_82246))]); \n          v__82260 = clmin(v__82266_0, v__82260); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82247 = 0; \n          v__82269[v_l_id_82245] = id(v__82260); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6151; \n        v_work_idx_6151 = 0; \n        int v_l_id_82248 = atomic_inc(&(v_work_idx_6151)); \n        while((v_l_id_82248 < 1)){\n          float v_tmp_82338 = 3.4028235E38f; \n          v__75402 = v_tmp_82338; \n          /* reduce_seq */\n          for (int v_i_82249 = 0; v_i_82249 < v_MWidthC_1; v_i_82249 = (1 + v_i_82249)) {\n            v__75402 = clmin(v__75402, v__82269[(v_i_82249 + (v_MWidthC_1 * v_l_id_82248))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82250 = 0; \n            v__82274[v_w_id_82244] = doubleMultiplyAdd(v__75402, v__82255, v__82254[v_w_id_82244], v__82256); \n          }\n          /* end map_seq */\n          v_l_id_82248 = atomic_inc(&(v_work_idx_6151)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82244 = atomic_inc(v_work_idx_6157); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82251",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82252",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82253",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82254",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82255",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82256",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82258",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82269",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}