{
  "name" : "awrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85717, const global float* restrict v__85718, const global float* restrict v__85719, const global float* restrict v__85720, float v__85721, float v__85722, global float* v__85736, global int* v__85724, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85726; \n  float v__85728; \n  /* Private Memory */\n  float v__85730_0;\n  \n  float v__85732_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6468 = v__85724; \n    local int v_w_id_85713; \n    if (get_local_id(0) == 0) {\n      v_w_id_85713 = atomic_inc(v_work_idx_6468); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_85713 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_85714 = get_local_id(0); v_l_id_85714 < 32; v_l_id_85714 = (v_l_id_85714 + get_local_size(0))) {\n        float v_tmp_85777 = 3.4028235E38f; \n        v__85726 = v_tmp_85777; \n        /* reduce_seq */\n        for (int v_i_85715 = 0; v_i_85715 < v_MWidthC_1; v_i_85715 = (1 + v_i_85715)) {\n          float v_tmp_85778 = 3.4028235E38f; \n          v__85728 = v_tmp_85778; \n          int v_index_85779 = v__85717[(v_i_85715 + (32 * v_MWidthC_1 * v_w_id_85713) + (v_MWidthC_1 * v_l_id_85714))]; \n          if (v_index_85779 < 0) {\n            v__85730_0 = v__85728; \n          } else {\n            if (v_index_85779 >= v_VLength_3) {\n              v__85730_0 = v__85728; \n            } else {\n              v__85730_0 = v__85719[v_index_85779]; \n            }\n          }\n          v__85732_0 = absadd(v__85730_0, v__85718[(v_i_85715 + (32 * v_MWidthC_1 * v_w_id_85713) + (v_MWidthC_1 * v_l_id_85714))]); \n          v__85726 = clmin(v__85732_0, v__85726); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85716 = 0; \n          v__85736[(v_l_id_85714 + (32 * v_w_id_85713))] = doubleMultiplyAdd(v__85726, v__85721, v__85720[(v_l_id_85714 + (32 * v_w_id_85713))], v__85722); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_85713 = atomic_inc(v_work_idx_6468); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85718",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85719",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85720",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85721",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85722",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85724",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__85736",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}