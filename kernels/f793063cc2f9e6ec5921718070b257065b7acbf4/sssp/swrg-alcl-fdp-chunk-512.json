{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__101841, const global float* restrict v__101842, const global float* restrict v__101843, const global float* restrict v__101844, float v__101845, float v__101846, global float* v__101859, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101849; \n  float v__101851; \n  /* Private Memory */\n  float v__101853_0;\n  \n  float v__101855_0;\n  \n  for (int v_wg_id_101837 = get_group_id(0); v_wg_id_101837 < ((v_MHeight_2)/(512)); v_wg_id_101837 = (v_wg_id_101837 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7907; \n      v_work_idx_7907 = 0; \n      int v_l_id_101838 = atomic_inc(&(v_work_idx_7907)); \n      while((v_l_id_101838 < 512)){\n        float v_tmp_101897 = 3.4028235E38f; \n        v__101849 = v_tmp_101897; \n        /* reduce_seq */\n        for (int v_i_101839 = 0; v_i_101839 < v_MWidthC_1; v_i_101839 = (1 + v_i_101839)) {\n          float v_tmp_101898 = 3.4028235E38f; \n          v__101851 = v_tmp_101898; \n          int v_index_101899 = v__101841[(v_i_101839 + (512 * v_MWidthC_1 * v_wg_id_101837) + (v_MWidthC_1 * v_l_id_101838))]; \n          if (v_index_101899 < 0) {\n            v__101853_0 = v__101851; \n          } else {\n            if (v_index_101899 >= v_VLength_3) {\n              v__101853_0 = v__101851; \n            } else {\n              v__101853_0 = v__101843[v_index_101899]; \n            }\n          }\n          v__101855_0 = absadd(v__101853_0, v__101842[(v_i_101839 + (512 * v_MWidthC_1 * v_wg_id_101837) + (v_MWidthC_1 * v_l_id_101838))]); \n          v__101849 = clmin(v__101855_0, v__101849); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101840 = 0; \n          v__101859[(v_l_id_101838 + (512 * v_wg_id_101837))] = doubleMultiplyAdd(v__101849, v__101845, v__101844[(v_l_id_101838 + (512 * v_wg_id_101837))], v__101846); \n        }\n        /* end map_seq */\n        v_l_id_101838 = atomic_inc(&(v_work_idx_7907)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101841",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101843",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101844",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101845",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101846",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101859",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}