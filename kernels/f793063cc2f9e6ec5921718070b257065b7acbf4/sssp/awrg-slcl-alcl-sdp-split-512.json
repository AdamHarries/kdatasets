{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103610, const global float* restrict v__103611, const global float* restrict v__103612, const global float* restrict v__103613, float v__103614, float v__103615, global float* v__103633, global float* v__103623, global int* v__103617, local float* v__103628, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103619; \n  float v__103624; \n  float v__75402; \n  /* Private Memory */\n  float v__103621_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8067 = v__103617; \n    local int v_w_id_103602; \n    if (get_local_id(0) == 0) {\n      v_w_id_103602 = atomic_inc(v_work_idx_8067); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103602 < v_MHeight_2)){\n      for (int v_l_id_103603 = get_local_id(0); v_l_id_103603 < v_MWidthC_1; v_l_id_103603 = (v_l_id_103603 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_103604 = 0; v_i_103604 < 512; v_i_103604 = (1 + v_i_103604)) {\n          float v_tmp_103692 = 3.4028235E38f; \n          v__103619 = v_tmp_103692; \n          int v_index_103693 = v__103610[(v_l_id_103603 + (512 * v_MWidthC_1 * v_w_id_103602) + (v_MWidthC_1 * v_i_103604))]; \n          if (v_index_103693 < 0) {\n            v__103621_0 = v__103619; \n          } else {\n            if (v_index_103693 >= v_VLength_3) {\n              v__103621_0 = v__103619; \n            } else {\n              v__103621_0 = v__103612[v_index_103693]; \n            }\n          }\n          v__103623[(511 + (512 * v_MWidthC_1 * v_w_id_103602) + (-1 * v_i_103604) + (512 * v_l_id_103603))] = absadd(v__103621_0, v__103611[(v_l_id_103603 + (512 * v_MWidthC_1 * v_w_id_103602) + (v_MWidthC_1 * v_i_103604))]); \n        }\n        /* end map_seq */\n        float v_tmp_103694 = 3.4028235E38f; \n        v__103624 = v_tmp_103694; \n        /* reduce_seq */\n        for (int v_i_103605 = 0; v_i_103605 < 512; v_i_103605 = (1 + v_i_103605)) {\n          v__103624 = clmin(v__103624, v__103623[(v_i_103605 + (512 * v_MWidthC_1 * v_w_id_103602) + (512 * v_l_id_103603))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103606 = 0; \n          v__103628[v_l_id_103603] = id(v__103624); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8060; \n        v_work_idx_8060 = 0; \n        int v_l_id_103607 = atomic_inc(&(v_work_idx_8060)); \n        while((v_l_id_103607 < 1)){\n          float v_tmp_103697 = 3.4028235E38f; \n          v__75402 = v_tmp_103697; \n          /* reduce_seq */\n          for (int v_i_103608 = 0; v_i_103608 < v_MWidthC_1; v_i_103608 = (1 + v_i_103608)) {\n            v__75402 = clmin(v__75402, v__103628[(v_i_103608 + (v_MWidthC_1 * v_l_id_103607))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103609 = 0; \n            v__103633[v_w_id_103602] = doubleMultiplyAdd(v__75402, v__103614, v__103613[v_w_id_103602], v__103615); \n          }\n          /* end map_seq */\n          v_l_id_103607 = atomic_inc(&(v_work_idx_8060)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103602 = atomic_inc(v_work_idx_8067); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103610",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103611",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103612",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103623",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103617",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103628",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}