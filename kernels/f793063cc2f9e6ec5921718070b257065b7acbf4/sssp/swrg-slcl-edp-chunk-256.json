{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__96514, const global float* restrict v__96515, const global float* restrict v__96516, const global float* restrict v__96517, float v__96518, float v__96519, global float* v__96534, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96521; \n  float v__96524; \n  /* Private Memory */\n  float v__96526_0;\n  \n  float v__96528_0;\n  \n  int v__96532_0;\n  \n  for (int v_wg_id_96510 = get_group_id(0); v_wg_id_96510 < ((v_MHeight_2)/(256)); v_wg_id_96510 = (v_wg_id_96510 + get_num_groups(0))) {\n    for (int v_l_id_96511 = get_local_id(0); v_l_id_96511 < 256; v_l_id_96511 = (v_l_id_96511 + get_local_size(0))) {\n      float v_tmp_96582 = 3.4028235E38f; \n      v__96521 = v_tmp_96582; \n      /* reduce_while_seq */\n      for (int v_i_96512 = 0; v_i_96512 < v_MWidthC_1; v_i_96512 = (1 + v_i_96512)) {\n        v__96532_0 = check(v__96521, v__96514[(v_i_96512 + (256 * v_MWidthC_1 * v_wg_id_96510) + (v_MWidthC_1 * v_l_id_96511))]); \n        if (v__96532_0) {\n        } else {\n          break;\n        }\n        float v_tmp_96583 = 3.4028235E38f; \n        v__96524 = v_tmp_96583; \n        int v_index_96584 = v__96514[(v_i_96512 + (256 * v_MWidthC_1 * v_wg_id_96510) + (v_MWidthC_1 * v_l_id_96511))]; \n        if (v_index_96584 < 0) {\n          v__96526_0 = v__96524; \n        } else {\n          if (v_index_96584 >= v_VLength_3) {\n            v__96526_0 = v__96524; \n          } else {\n            v__96526_0 = v__96516[v_index_96584]; \n          }\n        }\n        v__96528_0 = absadd(v__96526_0, v__96515[(v_i_96512 + (256 * v_MWidthC_1 * v_wg_id_96510) + (v_MWidthC_1 * v_l_id_96511))]); \n        v__96521 = clmin(v__96528_0, v__96521); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_96513 = 0; \n        v__96534[(v_l_id_96511 + (256 * v_wg_id_96510))] = doubleMultiplyAdd(v__96521, v__96518, v__96517[(v_l_id_96511 + (256 * v_wg_id_96510))], v__96519); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96514",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96515",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96516",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96518",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96519",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__96534",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}