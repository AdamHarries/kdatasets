{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__83301, const global float* restrict v__83302, const global float* restrict v__83303, const global float* restrict v__83304, float v__83305, float v__83306, global float* v__83324, global int* v__83308, local float* v__83319, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83310; \n  float v__83312; \n  float v__75402; \n  /* Private Memory */\n  float v__83314_0;\n  \n  float v__83316_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6264 = v__83308; \n    local int v_w_id_83294; \n    if (get_local_id(0) == 0) {\n      v_w_id_83294 = atomic_inc(v_work_idx_6264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83294 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6262; \n        v_work_idx_6262 = 0; \n        int v_l_id_83295 = atomic_inc(&(v_work_idx_6262)); \n        while((v_l_id_83295 < v_MWidthC_1)){\n          float v_tmp_83375 = 3.4028235E38f; \n          v__83310 = v_tmp_83375; \n          /* reduce_seq */\n          for (int v_i_83296 = 0; v_i_83296 < 16; v_i_83296 = (1 + v_i_83296)) {\n            float v_tmp_83376 = 3.4028235E38f; \n            v__83312 = v_tmp_83376; \n            int v_index_83377 = v__83301[(v_l_id_83295 + (16 * v_MWidthC_1 * v_w_id_83294) + (v_MWidthC_1 * v_i_83296))]; \n            if (v_index_83377 < 0) {\n              v__83314_0 = v__83312; \n            } else {\n              if (v_index_83377 >= v_VLength_3) {\n                v__83314_0 = v__83312; \n              } else {\n                v__83314_0 = v__83303[v_index_83377]; \n              }\n            }\n            v__83316_0 = absadd(v__83314_0, v__83302[(v_l_id_83295 + (16 * v_MWidthC_1 * v_w_id_83294) + (v_MWidthC_1 * v_i_83296))]); \n            v__83310 = clmin(v__83316_0, v__83310); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83297 = 0; \n            v__83319[v_l_id_83295] = id(v__83310); \n          }\n          /* end map_seq */\n          v_l_id_83295 = atomic_inc(&(v_work_idx_6262)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6257; \n        v_work_idx_6257 = 0; \n        int v_l_id_83298 = atomic_inc(&(v_work_idx_6257)); \n        while((v_l_id_83298 < 1)){\n          float v_tmp_83380 = 3.4028235E38f; \n          v__75402 = v_tmp_83380; \n          /* reduce_seq */\n          for (int v_i_83299 = 0; v_i_83299 < v_MWidthC_1; v_i_83299 = (1 + v_i_83299)) {\n            v__75402 = clmin(v__75402, v__83319[(v_i_83299 + (v_MWidthC_1 * v_l_id_83298))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83300 = 0; \n            v__83324[v_w_id_83294] = doubleMultiplyAdd(v__75402, v__83305, v__83304[v_w_id_83294], v__83306); \n          }\n          /* end map_seq */\n          v_l_id_83298 = atomic_inc(&(v_work_idx_6257)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83294 = atomic_inc(v_work_idx_6264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83301",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83302",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83303",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83304",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83305",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83306",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83308",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83324",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83319",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}