{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__103289, const global float* restrict v__103290, const global float* restrict v__103291, const global float* restrict v__103292, float v__103293, float v__103294, global float* v__103312, global float* v__103302, global int* v__103296, local float* v__103307, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103298; \n  float v__103303; \n  float v__75402; \n  /* Private Memory */\n  float v__103300_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8038 = v__103296; \n    local int v_w_id_103281; \n    if (get_local_id(0) == 0) {\n      v_w_id_103281 = atomic_inc(v_work_idx_8038); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103281 < v_MHeight_2)){\n      for (int v_l_id_103282 = get_local_id(0); v_l_id_103282 < v_MWidthC_1; v_l_id_103282 = (v_l_id_103282 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_103283 = 0; v_i_103283 < 512; v_i_103283 = (1 + v_i_103283)) {\n          float v_tmp_103375 = 3.4028235E38f; \n          v__103298 = v_tmp_103375; \n          int v_index_103376 = v__103289[(v_l_id_103282 + (512 * v_MWidthC_1 * v_w_id_103281) + (v_MWidthC_1 * v_i_103283))]; \n          if (v_index_103376 < 0) {\n            v__103300_0 = v__103298; \n          } else {\n            if (v_index_103376 >= v_VLength_3) {\n              v__103300_0 = v__103298; \n            } else {\n              v__103300_0 = v__103291[v_index_103376]; \n            }\n          }\n          v__103302[(511 + (512 * v_MWidthC_1 * v_w_id_103281) + (-1 * v_i_103283) + (512 * v_l_id_103282))] = absadd(v__103300_0, v__103290[(v_l_id_103282 + (512 * v_MWidthC_1 * v_w_id_103281) + (v_MWidthC_1 * v_i_103283))]); \n        }\n        /* end map_seq */\n        float v_tmp_103377 = 3.4028235E38f; \n        v__103303 = v_tmp_103377; \n        /* reduce_seq */\n        for (int v_i_103284 = 0; v_i_103284 < 512; v_i_103284 = (1 + v_i_103284)) {\n          v__103303 = clmin(v__103303, v__103302[(v_i_103284 + (512 * v_MWidthC_1 * v_w_id_103281) + (512 * v_l_id_103282))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103285 = 0; \n          v__103307[v_l_id_103282] = id(v__103303); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103286 = get_local_id(0); \n        float v_tmp_103380 = 3.4028235E38f; \n        v__75402 = v_tmp_103380; \n        /* reduce_seq */\n        for (int v_i_103287 = 0; v_i_103287 < v_MWidthC_1; v_i_103287 = (1 + v_i_103287)) {\n          v__75402 = clmin(v__75402, v__103307[(v_i_103287 + (v_MWidthC_1 * v_l_id_103286))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103288 = 0; \n          v__103312[v_w_id_103281] = doubleMultiplyAdd(v__75402, v__103293, v__103292[v_w_id_103281], v__103294); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103281 = atomic_inc(v_work_idx_8038); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103289",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103290",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103291",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103292",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103293",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103294",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103302",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103296",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103312",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103307",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}