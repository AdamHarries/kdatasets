{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77959, const global float* restrict v__77960, const global float* restrict v__77961, const global float* restrict v__77962, float v__77963, float v__77964, global float* v__77982, global int* v__77966, local float* v__77977, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77968; \n  float v__77970; \n  float v__75402; \n  /* Private Memory */\n  float v__77972_0;\n  \n  float v__77974_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5773 = v__77966; \n    local int v_w_id_77952; \n    if (get_local_id(0) == 0) {\n      v_w_id_77952 = atomic_inc(v_work_idx_5773); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77952 < v_MHeight_2)){\n      for (int v_l_id_77953 = get_local_id(0); v_l_id_77953 < v_MWidthC_1; v_l_id_77953 = (v_l_id_77953 + get_local_size(0))) {\n        float v_tmp_78041 = 3.4028235E38f; \n        v__77968 = v_tmp_78041; \n        /* reduce_seq */\n        for (int v_i_77954 = 0; v_i_77954 < 8; v_i_77954 = (1 + v_i_77954)) {\n          float v_tmp_78042 = 3.4028235E38f; \n          v__77970 = v_tmp_78042; \n          int v_index_78043 = v__77959[(v_l_id_77953 + (8 * v_MWidthC_1 * v_w_id_77952) + (v_MWidthC_1 * v_i_77954))]; \n          if (v_index_78043 < 0) {\n            v__77972_0 = v__77970; \n          } else {\n            if (v_index_78043 >= v_VLength_3) {\n              v__77972_0 = v__77970; \n            } else {\n              v__77972_0 = v__77961[v_index_78043]; \n            }\n          }\n          v__77974_0 = absadd(v__77972_0, v__77960[(v_l_id_77953 + (8 * v_MWidthC_1 * v_w_id_77952) + (v_MWidthC_1 * v_i_77954))]); \n          v__77968 = clmin(v__77974_0, v__77968); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77955 = 0; \n          v__77977[v_l_id_77953] = id(v__77968); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5767; \n        v_work_idx_5767 = 0; \n        int v_l_id_77956 = atomic_inc(&(v_work_idx_5767)); \n        while((v_l_id_77956 < 1)){\n          float v_tmp_78046 = 3.4028235E38f; \n          v__75402 = v_tmp_78046; \n          /* reduce_seq */\n          for (int v_i_77957 = 0; v_i_77957 < v_MWidthC_1; v_i_77957 = (1 + v_i_77957)) {\n            v__75402 = clmin(v__75402, v__77977[(v_i_77957 + (v_MWidthC_1 * v_l_id_77956))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_77958 = 0; \n            v__77982[v_w_id_77952] = doubleMultiplyAdd(v__75402, v__77963, v__77962[v_w_id_77952], v__77964); \n          }\n          /* end map_seq */\n          v_l_id_77956 = atomic_inc(&(v_work_idx_5767)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_77952 = atomic_inc(v_work_idx_5773); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__77959",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77960",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77961",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77962",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77963",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77964",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77966",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77982",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77977",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}