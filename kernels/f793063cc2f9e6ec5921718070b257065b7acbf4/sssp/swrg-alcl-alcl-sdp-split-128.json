{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__93941, const global float* restrict v__93942, const global float* restrict v__93943, const global float* restrict v__93944, float v__93945, float v__93946, global float* v__93963, global float* v__93953, local float* v__93958, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93949; \n  float v__93954; \n  float v__75402; \n  /* Private Memory */\n  float v__93951_0;\n  \n  for (int v_wg_id_93933 = get_group_id(0); v_wg_id_93933 < v_MHeight_2; v_wg_id_93933 = (v_wg_id_93933 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7202; \n      v_work_idx_7202 = 0; \n      int v_l_id_93934 = atomic_inc(&(v_work_idx_7202)); \n      while((v_l_id_93934 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_93935 = 0; v_i_93935 < 128; v_i_93935 = (1 + v_i_93935)) {\n          float v_tmp_94016 = 3.4028235E38f; \n          v__93949 = v_tmp_94016; \n          int v_index_94017 = v__93941[(v_l_id_93934 + (128 * v_MWidthC_1 * v_wg_id_93933) + (v_MWidthC_1 * v_i_93935))]; \n          if (v_index_94017 < 0) {\n            v__93951_0 = v__93949; \n          } else {\n            if (v_index_94017 >= v_VLength_3) {\n              v__93951_0 = v__93949; \n            } else {\n              v__93951_0 = v__93943[v_index_94017]; \n            }\n          }\n          v__93953[(127 + (128 * v_MWidthC_1 * v_wg_id_93933) + (-1 * v_i_93935) + (128 * v_l_id_93934))] = absadd(v__93951_0, v__93942[(v_l_id_93934 + (128 * v_MWidthC_1 * v_wg_id_93933) + (v_MWidthC_1 * v_i_93935))]); \n        }\n        /* end map_seq */\n        float v_tmp_94018 = 3.4028235E38f; \n        v__93954 = v_tmp_94018; \n        /* reduce_seq */\n        for (int v_i_93936 = 0; v_i_93936 < 128; v_i_93936 = (1 + v_i_93936)) {\n          v__93954 = clmin(v__93954, v__93953[(v_i_93936 + (128 * v_MWidthC_1 * v_wg_id_93933) + (128 * v_l_id_93934))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93937 = 0; \n          v__93958[v_l_id_93934] = id(v__93954); \n        }\n        /* end map_seq */\n        v_l_id_93934 = atomic_inc(&(v_work_idx_7202)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7196; \n      v_work_idx_7196 = 0; \n      int v_l_id_93938 = atomic_inc(&(v_work_idx_7196)); \n      while((v_l_id_93938 < 1)){\n        float v_tmp_94021 = 3.4028235E38f; \n        v__75402 = v_tmp_94021; \n        /* reduce_seq */\n        for (int v_i_93939 = 0; v_i_93939 < v_MWidthC_1; v_i_93939 = (1 + v_i_93939)) {\n          v__75402 = clmin(v__75402, v__93958[(v_i_93939 + (v_MWidthC_1 * v_l_id_93938))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93940 = 0; \n          v__93963[v_wg_id_93933] = doubleMultiplyAdd(v__75402, v__93945, v__93944[v_wg_id_93933], v__93946); \n        }\n        /* end map_seq */\n        v_l_id_93938 = atomic_inc(&(v_work_idx_7196)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93941",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93942",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93943",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93945",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93946",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93953",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__93963",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93958",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}