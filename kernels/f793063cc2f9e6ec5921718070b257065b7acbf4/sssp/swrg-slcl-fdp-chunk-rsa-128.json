{
  "name" : "swrg-slcl-fdp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__92386, const global float* restrict v__92387, const global float* restrict v__92388, const global float* restrict v__92389, float v__92390, float v__92391, global float* v__92405, global float* v__92404, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92393; \n  float v__92396; \n  /* Private Memory */\n  float v__92398_0;\n  \n  float v__92400_0;\n  \n  for (int v_wg_id_92381 = get_group_id(0); v_wg_id_92381 < ((v_MHeight_2)/(128)); v_wg_id_92381 = (v_wg_id_92381 + get_num_groups(0))) {\n    for (int v_l_id_92382 = get_local_id(0); v_l_id_92382 < 128; v_l_id_92382 = (v_l_id_92382 + get_local_size(0))) {\n      float v_tmp_92442 = 3.4028235E38f; \n      v__92393 = v_tmp_92442; \n      /* reduce_seq */\n      int v_stop_92443 = min(v__92386[(1 + (v__92386[(v_l_id_92382 + (128 * v_wg_id_92381))] / 4))], ((global int*)(v__92387 + (((global int*)(v__92387))[(v_l_id_92382 + (128 * v_wg_id_92381))] / 4)))[1]); \n      for (int v_i_92383 = 0; v_i_92383 < v_stop_92443; v_i_92383 = (1 + v_i_92383)) {\n        float v_tmp_92451 = 3.4028235E38f; \n        v__92396 = v_tmp_92451; \n        int v_index_92453 = v__92386[(2 + v_i_92383 + (v__92386[(v_l_id_92382 + (128 * v_wg_id_92381))] / 4))]; \n        if (v_index_92453 < 0) {\n          v__92398_0 = v__92396; \n        } else {\n          if (v_index_92453 >= v_MWidthC_1) {\n            v__92398_0 = v__92396; \n          } else {\n            v__92398_0 = v__92388[v_index_92453]; \n          }\n        }\n        v__92400_0 = absadd(v__92387[(2 + v_i_92383 + (((global int*)(v__92387))[(v_l_id_92382 + (128 * v_wg_id_92381))] / 4))], v__92398_0); \n        v__92393 = clmin(v__92393, v__92400_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92384 = 0; \n        v__92404[(v_l_id_92382 + (128 * v_wg_id_92381))] = doubleMultiplyAdd(v__92393, v__92390, v__92389[(v_l_id_92382 + (128 * v_wg_id_92381))], v__92391); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92385 = 0; \n        v__92405[(v_l_id_92382 + (128 * v_wg_id_92381))] = id(v__92404[(v_l_id_92382 + (128 * v_wg_id_92381))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92386",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__92387",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__92388",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__92389",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92390",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92391",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92404",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__92405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}