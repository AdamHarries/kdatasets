{
  "name" : "swrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__92149, const global float* restrict v__92150, const global float* restrict v__92151, const global float* restrict v__92152, float v__92153, float v__92154, global float* v__92167, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92157; \n  float v__92159; \n  /* Private Memory */\n  float v__92161_0;\n  \n  float v__92163_0;\n  \n  for (int v_wg_id_92145 = get_group_id(0); v_wg_id_92145 < ((v_MHeight_2)/(128)); v_wg_id_92145 = (v_wg_id_92145 + get_num_groups(0))) {\n    for (int v_l_id_92146 = get_local_id(0); v_l_id_92146 < 128; v_l_id_92146 = (v_l_id_92146 + get_local_size(0))) {\n      float v_tmp_92209 = 3.4028235E38f; \n      v__92157 = v_tmp_92209; \n      /* reduce_seq */\n      for (int v_i_92147 = 0; v_i_92147 < v_MWidthC_1; v_i_92147 = (1 + v_i_92147)) {\n        float v_tmp_92210 = 3.4028235E38f; \n        v__92159 = v_tmp_92210; \n        int v_index_92211 = v__92149[(v_i_92147 + (128 * v_MWidthC_1 * v_wg_id_92145) + (v_MWidthC_1 * v_l_id_92146))]; \n        if (v_index_92211 < 0) {\n          v__92161_0 = v__92159; \n        } else {\n          if (v_index_92211 >= v_VLength_3) {\n            v__92161_0 = v__92159; \n          } else {\n            v__92161_0 = v__92151[v_index_92211]; \n          }\n        }\n        v__92163_0 = absadd(v__92161_0, v__92150[(v_i_92147 + (128 * v_MWidthC_1 * v_wg_id_92145) + (v_MWidthC_1 * v_l_id_92146))]); \n        v__92157 = clmin(v__92163_0, v__92157); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92148 = 0; \n        v__92167[(v_l_id_92146 + (128 * v_wg_id_92145))] = doubleMultiplyAdd(v__92157, v__92153, v__92152[(v_l_id_92146 + (128 * v_wg_id_92145))], v__92154); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92149",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92151",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92153",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92154",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92167",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}