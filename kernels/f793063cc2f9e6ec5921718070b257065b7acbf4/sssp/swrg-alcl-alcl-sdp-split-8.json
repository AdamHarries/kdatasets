{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76773, const global float* restrict v__76774, const global float* restrict v__76775, const global float* restrict v__76776, float v__76777, float v__76778, global float* v__76795, global float* v__76785, local float* v__76790, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76781; \n  float v__76786; \n  float v__75402; \n  /* Private Memory */\n  float v__76783_0;\n  \n  for (int v_wg_id_76765 = get_group_id(0); v_wg_id_76765 < v_MHeight_2; v_wg_id_76765 = (v_wg_id_76765 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5666; \n      v_work_idx_5666 = 0; \n      int v_l_id_76766 = atomic_inc(&(v_work_idx_5666)); \n      while((v_l_id_76766 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_76767 = 0; v_i_76767 < 8; v_i_76767 = (1 + v_i_76767)) {\n          float v_tmp_76848 = 3.4028235E38f; \n          v__76781 = v_tmp_76848; \n          int v_index_76849 = v__76773[(v_l_id_76766 + (8 * v_MWidthC_1 * v_wg_id_76765) + (v_MWidthC_1 * v_i_76767))]; \n          if (v_index_76849 < 0) {\n            v__76783_0 = v__76781; \n          } else {\n            if (v_index_76849 >= v_VLength_3) {\n              v__76783_0 = v__76781; \n            } else {\n              v__76783_0 = v__76775[v_index_76849]; \n            }\n          }\n          v__76785[(7 + (8 * v_MWidthC_1 * v_wg_id_76765) + (-1 * v_i_76767) + (8 * v_l_id_76766))] = absadd(v__76783_0, v__76774[(v_l_id_76766 + (8 * v_MWidthC_1 * v_wg_id_76765) + (v_MWidthC_1 * v_i_76767))]); \n        }\n        /* end map_seq */\n        float v_tmp_76850 = 3.4028235E38f; \n        v__76786 = v_tmp_76850; \n        /* reduce_seq */\n        for (int v_i_76768 = 0; v_i_76768 < 8; v_i_76768 = (1 + v_i_76768)) {\n          v__76786 = clmin(v__76786, v__76785[(v_i_76768 + (8 * v_MWidthC_1 * v_wg_id_76765) + (8 * v_l_id_76766))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76769 = 0; \n          v__76790[v_l_id_76766] = id(v__76786); \n        }\n        /* end map_seq */\n        v_l_id_76766 = atomic_inc(&(v_work_idx_5666)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5660; \n      v_work_idx_5660 = 0; \n      int v_l_id_76770 = atomic_inc(&(v_work_idx_5660)); \n      while((v_l_id_76770 < 1)){\n        float v_tmp_76853 = 3.4028235E38f; \n        v__75402 = v_tmp_76853; \n        /* reduce_seq */\n        for (int v_i_76771 = 0; v_i_76771 < v_MWidthC_1; v_i_76771 = (1 + v_i_76771)) {\n          v__75402 = clmin(v__75402, v__76790[(v_i_76771 + (v_MWidthC_1 * v_l_id_76770))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76772 = 0; \n          v__76795[v_wg_id_76765] = doubleMultiplyAdd(v__75402, v__76777, v__76776[v_wg_id_76765], v__76778); \n        }\n        /* end map_seq */\n        v_l_id_76770 = atomic_inc(&(v_work_idx_5660)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76773",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76774",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76775",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76776",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76777",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76778",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76785",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__76795",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76790",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}