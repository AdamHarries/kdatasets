{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__87203, const global float* restrict v__87204, const global float* restrict v__87205, const global float* restrict v__87206, float v__87207, float v__87208, global float* v__87226, global float* v__87216, global int* v__87210, local float* v__87221, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87212; \n  float v__87217; \n  float v__75402; \n  /* Private Memory */\n  float v__87214_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6605 = v__87210; \n    local int v_w_id_87195; \n    if (get_local_id(0) == 0) {\n      v_w_id_87195 = atomic_inc(v_work_idx_6605); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87195 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6603; \n        v_work_idx_6603 = 0; \n        int v_l_id_87196 = atomic_inc(&(v_work_idx_6603)); \n        while((v_l_id_87196 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_87197 = 0; v_i_87197 < 32; v_i_87197 = (1 + v_i_87197)) {\n            float v_tmp_87281 = 3.4028235E38f; \n            v__87212 = v_tmp_87281; \n            int v_index_87282 = v__87203[(v_l_id_87196 + (32 * v_MWidthC_1 * v_w_id_87195) + (v_MWidthC_1 * v_i_87197))]; \n            if (v_index_87282 < 0) {\n              v__87214_0 = v__87212; \n            } else {\n              if (v_index_87282 >= v_VLength_3) {\n                v__87214_0 = v__87212; \n              } else {\n                v__87214_0 = v__87205[v_index_87282]; \n              }\n            }\n            v__87216[(31 + (32 * v_MWidthC_1 * v_w_id_87195) + (-1 * v_i_87197) + (32 * v_l_id_87196))] = absadd(v__87214_0, v__87204[(v_l_id_87196 + (32 * v_MWidthC_1 * v_w_id_87195) + (v_MWidthC_1 * v_i_87197))]); \n          }\n          /* end map_seq */\n          float v_tmp_87283 = 3.4028235E38f; \n          v__87217 = v_tmp_87283; \n          /* reduce_seq */\n          for (int v_i_87198 = 0; v_i_87198 < 32; v_i_87198 = (1 + v_i_87198)) {\n            v__87217 = clmin(v__87217, v__87216[(v_i_87198 + (32 * v_MWidthC_1 * v_w_id_87195) + (32 * v_l_id_87196))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87199 = 0; \n            v__87221[v_l_id_87196] = id(v__87217); \n          }\n          /* end map_seq */\n          v_l_id_87196 = atomic_inc(&(v_work_idx_6603)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_87200 = get_local_id(0); \n        float v_tmp_87286 = 3.4028235E38f; \n        v__75402 = v_tmp_87286; \n        /* reduce_seq */\n        for (int v_i_87201 = 0; v_i_87201 < v_MWidthC_1; v_i_87201 = (1 + v_i_87201)) {\n          v__75402 = clmin(v__75402, v__87221[(v_i_87201 + (v_MWidthC_1 * v_l_id_87200))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_87202 = 0; \n          v__87226[v_w_id_87195] = doubleMultiplyAdd(v__75402, v__87207, v__87206[v_w_id_87195], v__87208); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87195 = atomic_inc(v_work_idx_6605); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87203",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87204",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87205",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87207",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87208",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87216",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87210",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87221",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}