{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__91885, const global float* restrict v__91886, const global float* restrict v__91887, const global float* restrict v__91888, float v__91889, float v__91890, global float* v__91908, global int* v__91892, local float* v__91903, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91894; \n  float v__91896; \n  float v__75402; \n  /* Private Memory */\n  float v__91898_0;\n  \n  float v__91900_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7032 = v__91892; \n    local int v_w_id_91878; \n    if (get_local_id(0) == 0) {\n      v_w_id_91878 = atomic_inc(v_work_idx_7032); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_91878 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7030; \n        v_work_idx_7030 = 0; \n        int v_l_id_91879 = atomic_inc(&(v_work_idx_7030)); \n        while((v_l_id_91879 < v_MWidthC_1)){\n          float v_tmp_91959 = 3.4028235E38f; \n          v__91894 = v_tmp_91959; \n          /* reduce_seq */\n          for (int v_i_91880 = 0; v_i_91880 < 64; v_i_91880 = (1 + v_i_91880)) {\n            float v_tmp_91960 = 3.4028235E38f; \n            v__91896 = v_tmp_91960; \n            int v_index_91961 = v__91885[(v_l_id_91879 + (64 * v_MWidthC_1 * v_w_id_91878) + (v_MWidthC_1 * v_i_91880))]; \n            if (v_index_91961 < 0) {\n              v__91898_0 = v__91896; \n            } else {\n              if (v_index_91961 >= v_VLength_3) {\n                v__91898_0 = v__91896; \n              } else {\n                v__91898_0 = v__91887[v_index_91961]; \n              }\n            }\n            v__91900_0 = absadd(v__91898_0, v__91886[(v_l_id_91879 + (64 * v_MWidthC_1 * v_w_id_91878) + (v_MWidthC_1 * v_i_91880))]); \n            v__91894 = clmin(v__91900_0, v__91894); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91881 = 0; \n            v__91903[v_l_id_91879] = id(v__91894); \n          }\n          /* end map_seq */\n          v_l_id_91879 = atomic_inc(&(v_work_idx_7030)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7025; \n        v_work_idx_7025 = 0; \n        int v_l_id_91882 = atomic_inc(&(v_work_idx_7025)); \n        while((v_l_id_91882 < 1)){\n          float v_tmp_91964 = 3.4028235E38f; \n          v__75402 = v_tmp_91964; \n          /* reduce_seq */\n          for (int v_i_91883 = 0; v_i_91883 < v_MWidthC_1; v_i_91883 = (1 + v_i_91883)) {\n            v__75402 = clmin(v__75402, v__91903[(v_i_91883 + (v_MWidthC_1 * v_l_id_91882))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91884 = 0; \n            v__91908[v_w_id_91878] = doubleMultiplyAdd(v__75402, v__91889, v__91888[v_w_id_91878], v__91890); \n          }\n          /* end map_seq */\n          v_l_id_91882 = atomic_inc(&(v_work_idx_7025)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_91878 = atomic_inc(v_work_idx_7032); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91885",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91886",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91887",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91889",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91890",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91892",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__91908",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91903",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}