{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__99102, const global float* restrict v__99103, const global float* restrict v__99104, const global float* restrict v__99105, float v__99106, float v__99107, global float* v__99125, global int* v__99109, local float* v__99120, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99111; \n  float v__99113; \n  float v__75402; \n  /* Private Memory */\n  float v__99115_0;\n  \n  float v__99117_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7663 = v__99109; \n    local int v_w_id_99095; \n    if (get_local_id(0) == 0) {\n      v_w_id_99095 = atomic_inc(v_work_idx_7663); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99095 < v_MHeight_2)){\n      for (int v_l_id_99096 = get_local_id(0); v_l_id_99096 < v_MWidthC_1; v_l_id_99096 = (v_l_id_99096 + get_local_size(0))) {\n        float v_tmp_99188 = 3.4028235E38f; \n        v__99111 = v_tmp_99188; \n        /* reduce_seq */\n        for (int v_i_99097 = 0; v_i_99097 < 256; v_i_99097 = (1 + v_i_99097)) {\n          float v_tmp_99189 = 3.4028235E38f; \n          v__99113 = v_tmp_99189; \n          int v_index_99190 = v__99102[(v_l_id_99096 + (256 * v_MWidthC_1 * v_w_id_99095) + (v_MWidthC_1 * v_i_99097))]; \n          if (v_index_99190 < 0) {\n            v__99115_0 = v__99113; \n          } else {\n            if (v_index_99190 >= v_VLength_3) {\n              v__99115_0 = v__99113; \n            } else {\n              v__99115_0 = v__99104[v_index_99190]; \n            }\n          }\n          v__99117_0 = absadd(v__99115_0, v__99103[(v_l_id_99096 + (256 * v_MWidthC_1 * v_w_id_99095) + (v_MWidthC_1 * v_i_99097))]); \n          v__99111 = clmin(v__99117_0, v__99111); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99098 = 0; \n          v__99120[v_l_id_99096] = id(v__99111); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99099 = get_local_id(0); \n        float v_tmp_99193 = 3.4028235E38f; \n        v__75402 = v_tmp_99193; \n        /* reduce_seq */\n        for (int v_i_99100 = 0; v_i_99100 < v_MWidthC_1; v_i_99100 = (1 + v_i_99100)) {\n          v__75402 = clmin(v__75402, v__99120[(v_i_99100 + (v_MWidthC_1 * v_l_id_99099))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99101 = 0; \n          v__99125[v_w_id_99095] = doubleMultiplyAdd(v__75402, v__99106, v__99105[v_w_id_99095], v__99107); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99095 = atomic_inc(v_work_idx_7663); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99102",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99103",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99104",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99106",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99107",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99109",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99125",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99120",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}