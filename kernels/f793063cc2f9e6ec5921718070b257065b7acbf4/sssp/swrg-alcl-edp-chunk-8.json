{
  "name" : "swrg-alcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76158, const global float* restrict v__76159, const global float* restrict v__76160, const global float* restrict v__76161, float v__76162, float v__76163, global float* v__76178, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76165; \n  float v__76168; \n  /* Private Memory */\n  float v__76170_0;\n  \n  float v__76172_0;\n  \n  int v__76176_0;\n  \n  for (int v_wg_id_76154 = get_group_id(0); v_wg_id_76154 < ((v_MHeight_2)/(8)); v_wg_id_76154 = (v_wg_id_76154 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5609; \n      v_work_idx_5609 = 0; \n      int v_l_id_76155 = atomic_inc(&(v_work_idx_5609)); \n      while((v_l_id_76155 < 8)){\n        float v_tmp_76222 = 3.4028235E38f; \n        v__76165 = v_tmp_76222; \n        /* reduce_while_seq */\n        for (int v_i_76156 = 0; v_i_76156 < v_MWidthC_1; v_i_76156 = (1 + v_i_76156)) {\n          v__76176_0 = check(v__76165, v__76158[(v_i_76156 + (8 * v_MWidthC_1 * v_wg_id_76154) + (v_MWidthC_1 * v_l_id_76155))]); \n          if (v__76176_0) {\n          } else {\n            break;\n          }\n          float v_tmp_76223 = 3.4028235E38f; \n          v__76168 = v_tmp_76223; \n          int v_index_76224 = v__76158[(v_i_76156 + (8 * v_MWidthC_1 * v_wg_id_76154) + (v_MWidthC_1 * v_l_id_76155))]; \n          if (v_index_76224 < 0) {\n            v__76170_0 = v__76168; \n          } else {\n            if (v_index_76224 >= v_VLength_3) {\n              v__76170_0 = v__76168; \n            } else {\n              v__76170_0 = v__76160[v_index_76224]; \n            }\n          }\n          v__76172_0 = absadd(v__76170_0, v__76159[(v_i_76156 + (8 * v_MWidthC_1 * v_wg_id_76154) + (v_MWidthC_1 * v_l_id_76155))]); \n          v__76165 = clmin(v__76172_0, v__76165); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76157 = 0; \n          v__76178[(v_l_id_76155 + (8 * v_wg_id_76154))] = doubleMultiplyAdd(v__76165, v__76162, v__76161[(v_l_id_76155 + (8 * v_wg_id_76154))], v__76163); \n        }\n        /* end map_seq */\n        v_l_id_76155 = atomic_inc(&(v_work_idx_5609)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76159",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76160",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76161",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76162",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76163",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__76178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}