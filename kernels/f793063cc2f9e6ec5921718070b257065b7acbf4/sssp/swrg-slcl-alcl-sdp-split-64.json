{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__88585, const global float* restrict v__88586, const global float* restrict v__88587, const global float* restrict v__88588, float v__88589, float v__88590, global float* v__88607, global float* v__88597, local float* v__88602, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88593; \n  float v__88598; \n  float v__75402; \n  /* Private Memory */\n  float v__88595_0;\n  \n  for (int v_wg_id_88577 = get_group_id(0); v_wg_id_88577 < v_MHeight_2; v_wg_id_88577 = (v_wg_id_88577 + get_num_groups(0))) {\n    for (int v_l_id_88578 = get_local_id(0); v_l_id_88578 < v_MWidthC_1; v_l_id_88578 = (v_l_id_88578 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_88579 = 0; v_i_88579 < 64; v_i_88579 = (1 + v_i_88579)) {\n        float v_tmp_88668 = 3.4028235E38f; \n        v__88593 = v_tmp_88668; \n        int v_index_88669 = v__88585[(v_l_id_88578 + (64 * v_MWidthC_1 * v_wg_id_88577) + (v_MWidthC_1 * v_i_88579))]; \n        if (v_index_88669 < 0) {\n          v__88595_0 = v__88593; \n        } else {\n          if (v_index_88669 >= v_VLength_3) {\n            v__88595_0 = v__88593; \n          } else {\n            v__88595_0 = v__88587[v_index_88669]; \n          }\n        }\n        v__88597[(63 + (64 * v_MWidthC_1 * v_wg_id_88577) + (-1 * v_i_88579) + (64 * v_l_id_88578))] = absadd(v__88595_0, v__88586[(v_l_id_88578 + (64 * v_MWidthC_1 * v_wg_id_88577) + (v_MWidthC_1 * v_i_88579))]); \n      }\n      /* end map_seq */\n      float v_tmp_88670 = 3.4028235E38f; \n      v__88598 = v_tmp_88670; \n      /* reduce_seq */\n      for (int v_i_88580 = 0; v_i_88580 < 64; v_i_88580 = (1 + v_i_88580)) {\n        v__88598 = clmin(v__88598, v__88597[(v_i_88580 + (64 * v_MWidthC_1 * v_wg_id_88577) + (64 * v_l_id_88578))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88581 = 0; \n        v__88602[v_l_id_88578] = id(v__88598); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6719; \n      v_work_idx_6719 = 0; \n      int v_l_id_88582 = atomic_inc(&(v_work_idx_6719)); \n      while((v_l_id_88582 < 1)){\n        float v_tmp_88673 = 3.4028235E38f; \n        v__75402 = v_tmp_88673; \n        /* reduce_seq */\n        for (int v_i_88583 = 0; v_i_88583 < v_MWidthC_1; v_i_88583 = (1 + v_i_88583)) {\n          v__75402 = clmin(v__75402, v__88602[(v_i_88583 + (v_MWidthC_1 * v_l_id_88582))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88584 = 0; \n          v__88607[v_wg_id_88577] = doubleMultiplyAdd(v__75402, v__88589, v__88588[v_wg_id_88577], v__88590); \n        }\n        /* end map_seq */\n        v_l_id_88582 = atomic_inc(&(v_work_idx_6719)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88585",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88586",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88587",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88588",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88589",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88590",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88597",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88607",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88602",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}