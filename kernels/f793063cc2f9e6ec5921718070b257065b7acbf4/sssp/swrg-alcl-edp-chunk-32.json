{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__84742, const global float* restrict v__84743, const global float* restrict v__84744, const global float* restrict v__84745, float v__84746, float v__84747, global float* v__84762, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84749; \n  float v__84752; \n  /* Private Memory */\n  float v__84754_0;\n  \n  float v__84756_0;\n  \n  int v__84760_0;\n  \n  for (int v_wg_id_84738 = get_group_id(0); v_wg_id_84738 < ((v_MHeight_2)/(32)); v_wg_id_84738 = (v_wg_id_84738 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6377; \n      v_work_idx_6377 = 0; \n      int v_l_id_84739 = atomic_inc(&(v_work_idx_6377)); \n      while((v_l_id_84739 < 32)){\n        float v_tmp_84806 = 3.4028235E38f; \n        v__84749 = v_tmp_84806; \n        /* reduce_while_seq */\n        for (int v_i_84740 = 0; v_i_84740 < v_MWidthC_1; v_i_84740 = (1 + v_i_84740)) {\n          v__84760_0 = check(v__84749, v__84742[(v_i_84740 + (32 * v_MWidthC_1 * v_wg_id_84738) + (v_MWidthC_1 * v_l_id_84739))]); \n          if (v__84760_0) {\n          } else {\n            break;\n          }\n          float v_tmp_84807 = 3.4028235E38f; \n          v__84752 = v_tmp_84807; \n          int v_index_84808 = v__84742[(v_i_84740 + (32 * v_MWidthC_1 * v_wg_id_84738) + (v_MWidthC_1 * v_l_id_84739))]; \n          if (v_index_84808 < 0) {\n            v__84754_0 = v__84752; \n          } else {\n            if (v_index_84808 >= v_VLength_3) {\n              v__84754_0 = v__84752; \n            } else {\n              v__84754_0 = v__84744[v_index_84808]; \n            }\n          }\n          v__84756_0 = absadd(v__84754_0, v__84743[(v_i_84740 + (32 * v_MWidthC_1 * v_wg_id_84738) + (v_MWidthC_1 * v_l_id_84739))]); \n          v__84749 = clmin(v__84756_0, v__84749); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84741 = 0; \n          v__84762[(v_l_id_84739 + (32 * v_wg_id_84738))] = doubleMultiplyAdd(v__84749, v__84746, v__84745[(v_l_id_84739 + (32 * v_wg_id_84738))], v__84747); \n        }\n        /* end map_seq */\n        v_l_id_84739 = atomic_inc(&(v_work_idx_6377)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__84742",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84744",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84746",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84747",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__84762",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}