{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__86442, const global float* restrict v__86443, const global float* restrict v__86444, const global float* restrict v__86445, float v__86446, float v__86447, global float* v__86465, global float* v__86455, global int* v__86449, local float* v__86460, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86451; \n  float v__86456; \n  float v__75402; \n  /* Private Memory */\n  float v__86453_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6531 = v__86449; \n    local int v_w_id_86434; \n    if (get_local_id(0) == 0) {\n      v_w_id_86434 = atomic_inc(v_work_idx_6531); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86434 < v_MHeight_2)){\n      for (int v_l_id_86435 = get_local_id(0); v_l_id_86435 < v_MWidthC_1; v_l_id_86435 = (v_l_id_86435 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_86436 = 0; v_i_86436 < 32; v_i_86436 = (1 + v_i_86436)) {\n          float v_tmp_86524 = 3.4028235E38f; \n          v__86451 = v_tmp_86524; \n          int v_index_86525 = v__86442[(v_l_id_86435 + (32 * v_MWidthC_1 * v_w_id_86434) + (v_MWidthC_1 * v_i_86436))]; \n          if (v_index_86525 < 0) {\n            v__86453_0 = v__86451; \n          } else {\n            if (v_index_86525 >= v_VLength_3) {\n              v__86453_0 = v__86451; \n            } else {\n              v__86453_0 = v__86444[v_index_86525]; \n            }\n          }\n          v__86455[(31 + (32 * v_MWidthC_1 * v_w_id_86434) + (-1 * v_i_86436) + (32 * v_l_id_86435))] = absadd(v__86453_0, v__86443[(v_l_id_86435 + (32 * v_MWidthC_1 * v_w_id_86434) + (v_MWidthC_1 * v_i_86436))]); \n        }\n        /* end map_seq */\n        float v_tmp_86526 = 3.4028235E38f; \n        v__86456 = v_tmp_86526; \n        /* reduce_seq */\n        for (int v_i_86437 = 0; v_i_86437 < 32; v_i_86437 = (1 + v_i_86437)) {\n          v__86456 = clmin(v__86456, v__86455[(v_i_86437 + (32 * v_MWidthC_1 * v_w_id_86434) + (32 * v_l_id_86435))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86438 = 0; \n          v__86460[v_l_id_86435] = id(v__86456); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6524; \n        v_work_idx_6524 = 0; \n        int v_l_id_86439 = atomic_inc(&(v_work_idx_6524)); \n        while((v_l_id_86439 < 1)){\n          float v_tmp_86529 = 3.4028235E38f; \n          v__75402 = v_tmp_86529; \n          /* reduce_seq */\n          for (int v_i_86440 = 0; v_i_86440 < v_MWidthC_1; v_i_86440 = (1 + v_i_86440)) {\n            v__75402 = clmin(v__75402, v__86460[(v_i_86440 + (v_MWidthC_1 * v_l_id_86439))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86441 = 0; \n            v__86465[v_w_id_86434] = doubleMultiplyAdd(v__75402, v__86446, v__86445[v_w_id_86434], v__86447); \n          }\n          /* end map_seq */\n          v_l_id_86439 = atomic_inc(&(v_work_idx_6524)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86434 = atomic_inc(v_work_idx_6531); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86442",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86443",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86444",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86446",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86447",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86455",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86449",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86460",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}