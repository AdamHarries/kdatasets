{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__100562, const global float* restrict v__100563, const global float* restrict v__100564, const global float* restrict v__100565, float v__100566, float v__100567, global float* v__100587, global int* v__100569, local float* v__100582, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100571; \n  float v__100573; \n  float v__75402; \n  /* Private Memory */\n  float v__100575_0;\n  \n  float v__100577_0;\n  \n  int v__100581_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7811 = v__100569; \n    local int v_w_id_100555; \n    if (get_local_id(0) == 0) {\n      v_w_id_100555 = atomic_inc(v_work_idx_7811); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100555 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7809; \n        v_work_idx_7809 = 0; \n        int v_l_id_100556 = atomic_inc(&(v_work_idx_7809)); \n        while((v_l_id_100556 < v_MWidthC_1)){\n          float v_tmp_100641 = 3.4028235E38f; \n          v__100571 = v_tmp_100641; \n          /* reduce_while_seq */\n          for (int v_i_100557 = 0; v_i_100557 < 256; v_i_100557 = (1 + v_i_100557)) {\n            v__100581_0 = check(v__100571, v__100562[(v_l_id_100556 + (256 * v_MWidthC_1 * v_w_id_100555) + (v_MWidthC_1 * v_i_100557))]); \n            if (v__100581_0) {\n            } else {\n              break;\n            }\n            float v_tmp_100642 = 3.4028235E38f; \n            v__100573 = v_tmp_100642; \n            int v_index_100643 = v__100562[(v_l_id_100556 + (256 * v_MWidthC_1 * v_w_id_100555) + (v_MWidthC_1 * v_i_100557))]; \n            if (v_index_100643 < 0) {\n              v__100575_0 = v__100573; \n            } else {\n              if (v_index_100643 >= v_VLength_3) {\n                v__100575_0 = v__100573; \n              } else {\n                v__100575_0 = v__100564[v_index_100643]; \n              }\n            }\n            v__100577_0 = absadd(v__100575_0, v__100563[(v_l_id_100556 + (256 * v_MWidthC_1 * v_w_id_100555) + (v_MWidthC_1 * v_i_100557))]); \n            v__100571 = clmin(v__100577_0, v__100571); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100558 = 0; \n            v__100582[v_l_id_100556] = id(v__100571); \n          }\n          /* end map_seq */\n          v_l_id_100556 = atomic_inc(&(v_work_idx_7809)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7804; \n        v_work_idx_7804 = 0; \n        int v_l_id_100559 = atomic_inc(&(v_work_idx_7804)); \n        while((v_l_id_100559 < 1)){\n          float v_tmp_100646 = 3.4028235E38f; \n          v__75402 = v_tmp_100646; \n          /* reduce_seq */\n          for (int v_i_100560 = 0; v_i_100560 < v_MWidthC_1; v_i_100560 = (1 + v_i_100560)) {\n            v__75402 = clmin(v__75402, v__100582[(v_i_100560 + (v_MWidthC_1 * v_l_id_100559))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100561 = 0; \n            v__100587[v_w_id_100555] = doubleMultiplyAdd(v__75402, v__100566, v__100565[v_w_id_100555], v__100567); \n          }\n          /* end map_seq */\n          v_l_id_100559 = atomic_inc(&(v_work_idx_7804)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100555 = atomic_inc(v_work_idx_7811); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100562",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100563",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100564",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100565",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100566",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100567",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100569",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100587",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100582",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}