{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__104761, const global float* restrict v__104762, const global float* restrict v__104763, const global float* restrict v__104764, float v__104765, float v__104766, global float* v__104784, global int* v__104768, local float* v__104779, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104770; \n  float v__104772; \n  float v__75402; \n  /* Private Memory */\n  float v__104774_0;\n  \n  float v__104776_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8184 = v__104768; \n    local int v_w_id_104754; \n    if (get_local_id(0) == 0) {\n      v_w_id_104754 = atomic_inc(v_work_idx_8184); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104754 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8182; \n        v_work_idx_8182 = 0; \n        int v_l_id_104755 = atomic_inc(&(v_work_idx_8182)); \n        while((v_l_id_104755 < v_MWidthC_1)){\n          float v_tmp_104835 = 3.4028235E38f; \n          v__104770 = v_tmp_104835; \n          /* reduce_seq */\n          for (int v_i_104756 = 0; v_i_104756 < 512; v_i_104756 = (1 + v_i_104756)) {\n            float v_tmp_104836 = 3.4028235E38f; \n            v__104772 = v_tmp_104836; \n            int v_index_104837 = v__104761[(v_l_id_104755 + (512 * v_MWidthC_1 * v_w_id_104754) + (v_MWidthC_1 * v_i_104756))]; \n            if (v_index_104837 < 0) {\n              v__104774_0 = v__104772; \n            } else {\n              if (v_index_104837 >= v_VLength_3) {\n                v__104774_0 = v__104772; \n              } else {\n                v__104774_0 = v__104763[v_index_104837]; \n              }\n            }\n            v__104776_0 = absadd(v__104774_0, v__104762[(v_l_id_104755 + (512 * v_MWidthC_1 * v_w_id_104754) + (v_MWidthC_1 * v_i_104756))]); \n            v__104770 = clmin(v__104776_0, v__104770); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104757 = 0; \n            v__104779[v_l_id_104755] = id(v__104770); \n          }\n          /* end map_seq */\n          v_l_id_104755 = atomic_inc(&(v_work_idx_8182)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8177; \n        v_work_idx_8177 = 0; \n        int v_l_id_104758 = atomic_inc(&(v_work_idx_8177)); \n        while((v_l_id_104758 < 1)){\n          float v_tmp_104840 = 3.4028235E38f; \n          v__75402 = v_tmp_104840; \n          /* reduce_seq */\n          for (int v_i_104759 = 0; v_i_104759 < v_MWidthC_1; v_i_104759 = (1 + v_i_104759)) {\n            v__75402 = clmin(v__75402, v__104779[(v_i_104759 + (v_MWidthC_1 * v_l_id_104758))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104760 = 0; \n            v__104784[v_w_id_104754] = doubleMultiplyAdd(v__75402, v__104765, v__104764[v_w_id_104754], v__104766); \n          }\n          /* end map_seq */\n          v_l_id_104758 = atomic_inc(&(v_work_idx_8177)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104754 = atomic_inc(v_work_idx_8184); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__104761",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104762",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104763",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104765",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104766",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104768",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104779",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}