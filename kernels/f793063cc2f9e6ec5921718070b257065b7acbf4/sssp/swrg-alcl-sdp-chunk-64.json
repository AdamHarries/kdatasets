{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__88894, const global float* restrict v__88895, const global float* restrict v__88896, const global float* restrict v__88897, float v__88898, float v__88899, global float* v__88912, global float* v__88906, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88902; \n  float v__88907; \n  /* Private Memory */\n  float v__88904_0;\n  \n  for (int v_wg_id_88889 = get_group_id(0); v_wg_id_88889 < ((v_MHeight_2)/(64)); v_wg_id_88889 = (v_wg_id_88889 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6749; \n      v_work_idx_6749 = 0; \n      int v_l_id_88890 = atomic_inc(&(v_work_idx_6749)); \n      while((v_l_id_88890 < 64)){\n        /* map_seq */\n        for (int v_i_88891 = 0; v_i_88891 < v_MWidthC_1; v_i_88891 = (1 + v_i_88891)) {\n          float v_tmp_88952 = 3.4028235E38f; \n          v__88902 = v_tmp_88952; \n          int v_index_88953 = v__88894[(v_i_88891 + (64 * v_MWidthC_1 * v_wg_id_88889) + (v_MWidthC_1 * v_l_id_88890))]; \n          if (v_index_88953 < 0) {\n            v__88904_0 = v__88902; \n          } else {\n            if (v_index_88953 >= v_VLength_3) {\n              v__88904_0 = v__88902; \n            } else {\n              v__88904_0 = v__88896[v_index_88953]; \n            }\n          }\n          v__88906[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_88889) + (-1 * v_i_88891) + (v_MWidthC_1 * v_l_id_88890))] = absadd(v__88904_0, v__88895[(v_i_88891 + (64 * v_MWidthC_1 * v_wg_id_88889) + (v_MWidthC_1 * v_l_id_88890))]); \n        }\n        /* end map_seq */\n        float v_tmp_88954 = 3.4028235E38f; \n        v__88907 = v_tmp_88954; \n        /* reduce_seq */\n        for (int v_i_88892 = 0; v_i_88892 < v_MWidthC_1; v_i_88892 = (1 + v_i_88892)) {\n          v__88907 = clmin(v__88907, v__88906[(v_i_88892 + (64 * v_MWidthC_1 * v_wg_id_88889) + (v_MWidthC_1 * v_l_id_88890))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88893 = 0; \n          v__88912[(v_l_id_88890 + (64 * v_wg_id_88889))] = doubleMultiplyAdd(v__88907, v__88898, v__88897[(v_l_id_88890 + (64 * v_wg_id_88889))], v__88899); \n        }\n        /* end map_seq */\n        v_l_id_88890 = atomic_inc(&(v_work_idx_6749)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88894",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88895",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88896",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88897",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88898",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88899",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88912",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}