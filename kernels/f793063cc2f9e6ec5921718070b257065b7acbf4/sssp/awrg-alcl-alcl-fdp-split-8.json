{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79009, const global float* restrict v__79010, const global float* restrict v__79011, const global float* restrict v__79012, float v__79013, float v__79014, global float* v__79032, global int* v__79016, local float* v__79027, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79018; \n  float v__79020; \n  float v__75402; \n  /* Private Memory */\n  float v__79022_0;\n  \n  float v__79024_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5880 = v__79016; \n    local int v_w_id_79002; \n    if (get_local_id(0) == 0) {\n      v_w_id_79002 = atomic_inc(v_work_idx_5880); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79002 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5878; \n        v_work_idx_5878 = 0; \n        int v_l_id_79003 = atomic_inc(&(v_work_idx_5878)); \n        while((v_l_id_79003 < v_MWidthC_1)){\n          float v_tmp_79083 = 3.4028235E38f; \n          v__79018 = v_tmp_79083; \n          /* reduce_seq */\n          for (int v_i_79004 = 0; v_i_79004 < 8; v_i_79004 = (1 + v_i_79004)) {\n            float v_tmp_79084 = 3.4028235E38f; \n            v__79020 = v_tmp_79084; \n            int v_index_79085 = v__79009[(v_l_id_79003 + (8 * v_MWidthC_1 * v_w_id_79002) + (v_MWidthC_1 * v_i_79004))]; \n            if (v_index_79085 < 0) {\n              v__79022_0 = v__79020; \n            } else {\n              if (v_index_79085 >= v_VLength_3) {\n                v__79022_0 = v__79020; \n              } else {\n                v__79022_0 = v__79011[v_index_79085]; \n              }\n            }\n            v__79024_0 = absadd(v__79022_0, v__79010[(v_l_id_79003 + (8 * v_MWidthC_1 * v_w_id_79002) + (v_MWidthC_1 * v_i_79004))]); \n            v__79018 = clmin(v__79024_0, v__79018); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79005 = 0; \n            v__79027[v_l_id_79003] = id(v__79018); \n          }\n          /* end map_seq */\n          v_l_id_79003 = atomic_inc(&(v_work_idx_5878)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5873; \n        v_work_idx_5873 = 0; \n        int v_l_id_79006 = atomic_inc(&(v_work_idx_5873)); \n        while((v_l_id_79006 < 1)){\n          float v_tmp_79088 = 3.4028235E38f; \n          v__75402 = v_tmp_79088; \n          /* reduce_seq */\n          for (int v_i_79007 = 0; v_i_79007 < v_MWidthC_1; v_i_79007 = (1 + v_i_79007)) {\n            v__75402 = clmin(v__75402, v__79027[(v_i_79007 + (v_MWidthC_1 * v_l_id_79006))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79008 = 0; \n            v__79032[v_w_id_79002] = doubleMultiplyAdd(v__75402, v__79013, v__79012[v_w_id_79002], v__79014); \n          }\n          /* end map_seq */\n          v_l_id_79006 = atomic_inc(&(v_work_idx_5873)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79002 = atomic_inc(v_work_idx_5880); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79009",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79010",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79011",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79013",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79014",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79016",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79032",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79027",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}