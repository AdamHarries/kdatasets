{
  "name" : "awrg-alcl-fdp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99920, const global float* restrict v__99921, const global float* restrict v__99922, const global float* restrict v__99923, float v__99924, float v__99925, global float* v__99940, global float* v__99939, global int* v__99927, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99928; \n  float v__99931; \n  /* Private Memory */\n  float v__99933_0;\n  \n  float v__99935_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7739 = v__99927; \n    local int v_w_id_99915; \n    if (get_local_id(0) == 0) {\n      v_w_id_99915 = atomic_inc(v_work_idx_7739); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99915 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7737; \n        v_work_idx_7737 = 0; \n        int v_l_id_99916 = atomic_inc(&(v_work_idx_7737)); \n        while((v_l_id_99916 < 256)){\n          float v_tmp_99972 = 3.4028235E38f; \n          v__99928 = v_tmp_99972; \n          /* reduce_seq */\n          int v_stop_99973 = min(v__99920[(1 + (v__99920[(v_l_id_99916 + (256 * v_w_id_99915))] / 4))], ((global int*)(v__99921 + (((global int*)(v__99921))[(v_l_id_99916 + (256 * v_w_id_99915))] / 4)))[1]); \n          for (int v_i_99917 = 0; v_i_99917 < v_stop_99973; v_i_99917 = (1 + v_i_99917)) {\n            float v_tmp_99981 = 3.4028235E38f; \n            v__99931 = v_tmp_99981; \n            int v_index_99983 = v__99920[(2 + v_i_99917 + (v__99920[(v_l_id_99916 + (256 * v_w_id_99915))] / 4))]; \n            if (v_index_99983 < 0) {\n              v__99933_0 = v__99931; \n            } else {\n              if (v_index_99983 >= v_MWidthC_1) {\n                v__99933_0 = v__99931; \n              } else {\n                v__99933_0 = v__99922[v_index_99983]; \n              }\n            }\n            v__99935_0 = absadd(v__99921[(2 + v_i_99917 + (((global int*)(v__99921))[(v_l_id_99916 + (256 * v_w_id_99915))] / 4))], v__99933_0); \n            v__99928 = clmin(v__99928, v__99935_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99918 = 0; \n            v__99939[(v_l_id_99916 + (256 * v_w_id_99915))] = doubleMultiplyAdd(v__99928, v__99924, v__99923[(v_l_id_99916 + (256 * v_w_id_99915))], v__99925); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99919 = 0; \n            v__99940[(v_l_id_99916 + (256 * v_w_id_99915))] = id(v__99939[(v_l_id_99916 + (256 * v_w_id_99915))]); \n          }\n          /* end map_seq */\n          v_l_id_99916 = atomic_inc(&(v_work_idx_7737)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99915 = atomic_inc(v_work_idx_7739); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99920",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__99921",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__99922",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__99923",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99924",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99925",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99939",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99927",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99940",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}