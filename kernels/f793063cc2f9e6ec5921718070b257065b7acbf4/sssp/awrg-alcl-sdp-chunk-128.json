{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__95332, const global float* restrict v__95333, const global float* restrict v__95334, const global float* restrict v__95335, float v__95336, float v__95337, global float* v__95351, global float* v__95345, global int* v__95339, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95341; \n  float v__95346; \n  /* Private Memory */\n  float v__95343_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7327 = v__95339; \n    local int v_w_id_95327; \n    if (get_local_id(0) == 0) {\n      v_w_id_95327 = atomic_inc(v_work_idx_7327); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_95327 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7325; \n        v_work_idx_7325 = 0; \n        int v_l_id_95328 = atomic_inc(&(v_work_idx_7325)); \n        while((v_l_id_95328 < 128)){\n          /* map_seq */\n          for (int v_i_95329 = 0; v_i_95329 < v_MWidthC_1; v_i_95329 = (1 + v_i_95329)) {\n            float v_tmp_95390 = 3.4028235E38f; \n            v__95341 = v_tmp_95390; \n            int v_index_95391 = v__95332[(v_i_95329 + (128 * v_MWidthC_1 * v_w_id_95327) + (v_MWidthC_1 * v_l_id_95328))]; \n            if (v_index_95391 < 0) {\n              v__95343_0 = v__95341; \n            } else {\n              if (v_index_95391 >= v_VLength_3) {\n                v__95343_0 = v__95341; \n              } else {\n                v__95343_0 = v__95334[v_index_95391]; \n              }\n            }\n            v__95345[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_95327) + (-1 * v_i_95329) + (v_MWidthC_1 * v_l_id_95328))] = absadd(v__95343_0, v__95333[(v_i_95329 + (128 * v_MWidthC_1 * v_w_id_95327) + (v_MWidthC_1 * v_l_id_95328))]); \n          }\n          /* end map_seq */\n          float v_tmp_95392 = 3.4028235E38f; \n          v__95346 = v_tmp_95392; \n          /* reduce_seq */\n          for (int v_i_95330 = 0; v_i_95330 < v_MWidthC_1; v_i_95330 = (1 + v_i_95330)) {\n            v__95346 = clmin(v__95346, v__95345[(v_i_95330 + (128 * v_MWidthC_1 * v_w_id_95327) + (v_MWidthC_1 * v_l_id_95328))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_95331 = 0; \n            v__95351[(v_l_id_95328 + (128 * v_w_id_95327))] = doubleMultiplyAdd(v__95346, v__95336, v__95335[(v_l_id_95328 + (128 * v_w_id_95327))], v__95337); \n          }\n          /* end map_seq */\n          v_l_id_95328 = atomic_inc(&(v_work_idx_7325)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_95327 = atomic_inc(v_work_idx_7327); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95333",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95334",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95335",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95336",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95337",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95339",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__95351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}