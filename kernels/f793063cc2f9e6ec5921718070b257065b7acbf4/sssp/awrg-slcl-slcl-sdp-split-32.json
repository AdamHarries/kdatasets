{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__86121, const global float* restrict v__86122, const global float* restrict v__86123, const global float* restrict v__86124, float v__86125, float v__86126, global float* v__86144, global float* v__86134, global int* v__86128, local float* v__86139, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86130; \n  float v__86135; \n  float v__75402; \n  /* Private Memory */\n  float v__86132_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6502 = v__86128; \n    local int v_w_id_86113; \n    if (get_local_id(0) == 0) {\n      v_w_id_86113 = atomic_inc(v_work_idx_6502); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86113 < v_MHeight_2)){\n      for (int v_l_id_86114 = get_local_id(0); v_l_id_86114 < v_MWidthC_1; v_l_id_86114 = (v_l_id_86114 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_86115 = 0; v_i_86115 < 32; v_i_86115 = (1 + v_i_86115)) {\n          float v_tmp_86207 = 3.4028235E38f; \n          v__86130 = v_tmp_86207; \n          int v_index_86208 = v__86121[(v_l_id_86114 + (32 * v_MWidthC_1 * v_w_id_86113) + (v_MWidthC_1 * v_i_86115))]; \n          if (v_index_86208 < 0) {\n            v__86132_0 = v__86130; \n          } else {\n            if (v_index_86208 >= v_VLength_3) {\n              v__86132_0 = v__86130; \n            } else {\n              v__86132_0 = v__86123[v_index_86208]; \n            }\n          }\n          v__86134[(31 + (32 * v_MWidthC_1 * v_w_id_86113) + (-1 * v_i_86115) + (32 * v_l_id_86114))] = absadd(v__86132_0, v__86122[(v_l_id_86114 + (32 * v_MWidthC_1 * v_w_id_86113) + (v_MWidthC_1 * v_i_86115))]); \n        }\n        /* end map_seq */\n        float v_tmp_86209 = 3.4028235E38f; \n        v__86135 = v_tmp_86209; \n        /* reduce_seq */\n        for (int v_i_86116 = 0; v_i_86116 < 32; v_i_86116 = (1 + v_i_86116)) {\n          v__86135 = clmin(v__86135, v__86134[(v_i_86116 + (32 * v_MWidthC_1 * v_w_id_86113) + (32 * v_l_id_86114))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86117 = 0; \n          v__86139[v_l_id_86114] = id(v__86135); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86118 = get_local_id(0); \n        float v_tmp_86212 = 3.4028235E38f; \n        v__75402 = v_tmp_86212; \n        /* reduce_seq */\n        for (int v_i_86119 = 0; v_i_86119 < v_MWidthC_1; v_i_86119 = (1 + v_i_86119)) {\n          v__75402 = clmin(v__75402, v__86139[(v_i_86119 + (v_MWidthC_1 * v_l_id_86118))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86120 = 0; \n          v__86144[v_w_id_86113] = doubleMultiplyAdd(v__75402, v__86125, v__86124[v_w_id_86113], v__86126); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86113 = atomic_inc(v_work_idx_6502); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86121",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86122",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86123",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86124",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86125",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86126",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86134",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86128",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86144",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86139",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}