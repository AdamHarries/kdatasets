{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__81425, const global float* restrict v__81426, const global float* restrict v__81427, const global float* restrict v__81428, float v__81429, float v__81430, global float* v__81444, global int* v__81432, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81434; \n  float v__81436; \n  /* Private Memory */\n  float v__81438_0;\n  \n  float v__81440_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6084 = v__81432; \n    local int v_w_id_81421; \n    if (get_local_id(0) == 0) {\n      v_w_id_81421 = atomic_inc(v_work_idx_6084); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_81421 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_81422 = get_local_id(0); v_l_id_81422 < 16; v_l_id_81422 = (v_l_id_81422 + get_local_size(0))) {\n        float v_tmp_81485 = 3.4028235E38f; \n        v__81434 = v_tmp_81485; \n        /* reduce_seq */\n        for (int v_i_81423 = 0; v_i_81423 < v_MWidthC_1; v_i_81423 = (1 + v_i_81423)) {\n          float v_tmp_81486 = 3.4028235E38f; \n          v__81436 = v_tmp_81486; \n          int v_index_81487 = v__81425[(v_i_81423 + (16 * v_MWidthC_1 * v_w_id_81421) + (v_MWidthC_1 * v_l_id_81422))]; \n          if (v_index_81487 < 0) {\n            v__81438_0 = v__81436; \n          } else {\n            if (v_index_81487 >= v_VLength_3) {\n              v__81438_0 = v__81436; \n            } else {\n              v__81438_0 = v__81427[v_index_81487]; \n            }\n          }\n          v__81440_0 = absadd(v__81438_0, v__81426[(v_i_81423 + (16 * v_MWidthC_1 * v_w_id_81421) + (v_MWidthC_1 * v_l_id_81422))]); \n          v__81434 = clmin(v__81440_0, v__81434); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81424 = 0; \n          v__81444[(v_l_id_81422 + (16 * v_w_id_81421))] = doubleMultiplyAdd(v__81434, v__81429, v__81428[(v_l_id_81422 + (16 * v_w_id_81421))], v__81430); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_81421 = atomic_inc(v_work_idx_6084); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__81425",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81426",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81427",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81428",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81429",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81430",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81432",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__81444",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}