{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__81065, const global float* restrict v__81066, const global float* restrict v__81067, const global float* restrict v__81068, float v__81069, float v__81070, global float* v__81087, global float* v__81077, local float* v__81082, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81073; \n  float v__81078; \n  float v__75402; \n  /* Private Memory */\n  float v__81075_0;\n  \n  for (int v_wg_id_81057 = get_group_id(0); v_wg_id_81057 < v_MHeight_2; v_wg_id_81057 = (v_wg_id_81057 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6050; \n      v_work_idx_6050 = 0; \n      int v_l_id_81058 = atomic_inc(&(v_work_idx_6050)); \n      while((v_l_id_81058 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_81059 = 0; v_i_81059 < 16; v_i_81059 = (1 + v_i_81059)) {\n          float v_tmp_81140 = 3.4028235E38f; \n          v__81073 = v_tmp_81140; \n          int v_index_81141 = v__81065[(v_l_id_81058 + (16 * v_MWidthC_1 * v_wg_id_81057) + (v_MWidthC_1 * v_i_81059))]; \n          if (v_index_81141 < 0) {\n            v__81075_0 = v__81073; \n          } else {\n            if (v_index_81141 >= v_VLength_3) {\n              v__81075_0 = v__81073; \n            } else {\n              v__81075_0 = v__81067[v_index_81141]; \n            }\n          }\n          v__81077[(15 + (16 * v_MWidthC_1 * v_wg_id_81057) + (-1 * v_i_81059) + (16 * v_l_id_81058))] = absadd(v__81075_0, v__81066[(v_l_id_81058 + (16 * v_MWidthC_1 * v_wg_id_81057) + (v_MWidthC_1 * v_i_81059))]); \n        }\n        /* end map_seq */\n        float v_tmp_81142 = 3.4028235E38f; \n        v__81078 = v_tmp_81142; \n        /* reduce_seq */\n        for (int v_i_81060 = 0; v_i_81060 < 16; v_i_81060 = (1 + v_i_81060)) {\n          v__81078 = clmin(v__81078, v__81077[(v_i_81060 + (16 * v_MWidthC_1 * v_wg_id_81057) + (16 * v_l_id_81058))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81061 = 0; \n          v__81082[v_l_id_81058] = id(v__81078); \n        }\n        /* end map_seq */\n        v_l_id_81058 = atomic_inc(&(v_work_idx_6050)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6044; \n      v_work_idx_6044 = 0; \n      int v_l_id_81062 = atomic_inc(&(v_work_idx_6044)); \n      while((v_l_id_81062 < 1)){\n        float v_tmp_81145 = 3.4028235E38f; \n        v__75402 = v_tmp_81145; \n        /* reduce_seq */\n        for (int v_i_81063 = 0; v_i_81063 < v_MWidthC_1; v_i_81063 = (1 + v_i_81063)) {\n          v__75402 = clmin(v__75402, v__81082[(v_i_81063 + (v_MWidthC_1 * v_l_id_81062))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81064 = 0; \n          v__81087[v_wg_id_81057] = doubleMultiplyAdd(v__75402, v__81069, v__81068[v_wg_id_81057], v__81070); \n        }\n        /* end map_seq */\n        v_l_id_81062 = atomic_inc(&(v_work_idx_6044)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81065",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81066",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81067",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81069",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81070",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81077",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81082",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}