{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__93326, const global float* restrict v__93327, const global float* restrict v__93328, const global float* restrict v__93329, float v__93330, float v__93331, global float* v__93346, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93333; \n  float v__93336; \n  /* Private Memory */\n  float v__93338_0;\n  \n  float v__93340_0;\n  \n  int v__93344_0;\n  \n  for (int v_wg_id_93322 = get_group_id(0); v_wg_id_93322 < ((v_MHeight_2)/(128)); v_wg_id_93322 = (v_wg_id_93322 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7145; \n      v_work_idx_7145 = 0; \n      int v_l_id_93323 = atomic_inc(&(v_work_idx_7145)); \n      while((v_l_id_93323 < 128)){\n        float v_tmp_93390 = 3.4028235E38f; \n        v__93333 = v_tmp_93390; \n        /* reduce_while_seq */\n        for (int v_i_93324 = 0; v_i_93324 < v_MWidthC_1; v_i_93324 = (1 + v_i_93324)) {\n          v__93344_0 = check(v__93333, v__93326[(v_i_93324 + (128 * v_MWidthC_1 * v_wg_id_93322) + (v_MWidthC_1 * v_l_id_93323))]); \n          if (v__93344_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93391 = 3.4028235E38f; \n          v__93336 = v_tmp_93391; \n          int v_index_93392 = v__93326[(v_i_93324 + (128 * v_MWidthC_1 * v_wg_id_93322) + (v_MWidthC_1 * v_l_id_93323))]; \n          if (v_index_93392 < 0) {\n            v__93338_0 = v__93336; \n          } else {\n            if (v_index_93392 >= v_VLength_3) {\n              v__93338_0 = v__93336; \n            } else {\n              v__93338_0 = v__93328[v_index_93392]; \n            }\n          }\n          v__93340_0 = absadd(v__93338_0, v__93327[(v_i_93324 + (128 * v_MWidthC_1 * v_wg_id_93322) + (v_MWidthC_1 * v_l_id_93323))]); \n          v__93333 = clmin(v__93340_0, v__93333); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93325 = 0; \n          v__93346[(v_l_id_93323 + (128 * v_wg_id_93322))] = doubleMultiplyAdd(v__93333, v__93330, v__93329[(v_l_id_93323 + (128 * v_wg_id_93322))], v__93331); \n        }\n        /* end map_seq */\n        v_l_id_93323 = atomic_inc(&(v_work_idx_7145)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93326",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93327",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93328",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93330",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93331",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__93346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}