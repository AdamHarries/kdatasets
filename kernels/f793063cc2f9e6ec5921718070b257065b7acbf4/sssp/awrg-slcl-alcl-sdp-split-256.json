{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__99318, const global float* restrict v__99319, const global float* restrict v__99320, const global float* restrict v__99321, float v__99322, float v__99323, global float* v__99341, global float* v__99331, global int* v__99325, local float* v__99336, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99327; \n  float v__99332; \n  float v__75402; \n  /* Private Memory */\n  float v__99329_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7683 = v__99325; \n    local int v_w_id_99310; \n    if (get_local_id(0) == 0) {\n      v_w_id_99310 = atomic_inc(v_work_idx_7683); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99310 < v_MHeight_2)){\n      for (int v_l_id_99311 = get_local_id(0); v_l_id_99311 < v_MWidthC_1; v_l_id_99311 = (v_l_id_99311 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99312 = 0; v_i_99312 < 256; v_i_99312 = (1 + v_i_99312)) {\n          float v_tmp_99400 = 3.4028235E38f; \n          v__99327 = v_tmp_99400; \n          int v_index_99401 = v__99318[(v_l_id_99311 + (256 * v_MWidthC_1 * v_w_id_99310) + (v_MWidthC_1 * v_i_99312))]; \n          if (v_index_99401 < 0) {\n            v__99329_0 = v__99327; \n          } else {\n            if (v_index_99401 >= v_VLength_3) {\n              v__99329_0 = v__99327; \n            } else {\n              v__99329_0 = v__99320[v_index_99401]; \n            }\n          }\n          v__99331[(255 + (256 * v_MWidthC_1 * v_w_id_99310) + (-1 * v_i_99312) + (256 * v_l_id_99311))] = absadd(v__99329_0, v__99319[(v_l_id_99311 + (256 * v_MWidthC_1 * v_w_id_99310) + (v_MWidthC_1 * v_i_99312))]); \n        }\n        /* end map_seq */\n        float v_tmp_99402 = 3.4028235E38f; \n        v__99332 = v_tmp_99402; \n        /* reduce_seq */\n        for (int v_i_99313 = 0; v_i_99313 < 256; v_i_99313 = (1 + v_i_99313)) {\n          v__99332 = clmin(v__99332, v__99331[(v_i_99313 + (256 * v_MWidthC_1 * v_w_id_99310) + (256 * v_l_id_99311))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99314 = 0; \n          v__99336[v_l_id_99311] = id(v__99332); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7676; \n        v_work_idx_7676 = 0; \n        int v_l_id_99315 = atomic_inc(&(v_work_idx_7676)); \n        while((v_l_id_99315 < 1)){\n          float v_tmp_99405 = 3.4028235E38f; \n          v__75402 = v_tmp_99405; \n          /* reduce_seq */\n          for (int v_i_99316 = 0; v_i_99316 < v_MWidthC_1; v_i_99316 = (1 + v_i_99316)) {\n            v__75402 = clmin(v__75402, v__99336[(v_i_99316 + (v_MWidthC_1 * v_l_id_99315))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99317 = 0; \n            v__99341[v_w_id_99310] = doubleMultiplyAdd(v__75402, v__99322, v__99321[v_w_id_99310], v__99323); \n          }\n          /* end map_seq */\n          v_l_id_99315 = atomic_inc(&(v_work_idx_7676)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99310 = atomic_inc(v_work_idx_7683); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99318",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99319",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99320",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99322",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99323",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99331",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99325",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99341",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99336",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}