{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__104565, const global float* restrict v__104566, const global float* restrict v__104567, const global float* restrict v__104568, float v__104569, float v__104570, global float* v__104590, global int* v__104572, local float* v__104585, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104574; \n  float v__104576; \n  float v__75402; \n  /* Private Memory */\n  float v__104578_0;\n  \n  float v__104580_0;\n  \n  int v__104584_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8161 = v__104572; \n    local int v_w_id_104558; \n    if (get_local_id(0) == 0) {\n      v_w_id_104558 = atomic_inc(v_work_idx_8161); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104558 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8159; \n        v_work_idx_8159 = 0; \n        int v_l_id_104559 = atomic_inc(&(v_work_idx_8159)); \n        while((v_l_id_104559 < v_MWidthC_1)){\n          float v_tmp_104648 = 3.4028235E38f; \n          v__104574 = v_tmp_104648; \n          /* reduce_while_seq */\n          for (int v_i_104560 = 0; v_i_104560 < 512; v_i_104560 = (1 + v_i_104560)) {\n            v__104584_0 = check(v__104574, v__104565[(v_l_id_104559 + (512 * v_MWidthC_1 * v_w_id_104558) + (v_MWidthC_1 * v_i_104560))]); \n            if (v__104584_0) {\n            } else {\n              break;\n            }\n            float v_tmp_104649 = 3.4028235E38f; \n            v__104576 = v_tmp_104649; \n            int v_index_104650 = v__104565[(v_l_id_104559 + (512 * v_MWidthC_1 * v_w_id_104558) + (v_MWidthC_1 * v_i_104560))]; \n            if (v_index_104650 < 0) {\n              v__104578_0 = v__104576; \n            } else {\n              if (v_index_104650 >= v_VLength_3) {\n                v__104578_0 = v__104576; \n              } else {\n                v__104578_0 = v__104567[v_index_104650]; \n              }\n            }\n            v__104580_0 = absadd(v__104578_0, v__104566[(v_l_id_104559 + (512 * v_MWidthC_1 * v_w_id_104558) + (v_MWidthC_1 * v_i_104560))]); \n            v__104574 = clmin(v__104580_0, v__104574); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104561 = 0; \n            v__104585[v_l_id_104559] = id(v__104574); \n          }\n          /* end map_seq */\n          v_l_id_104559 = atomic_inc(&(v_work_idx_8159)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_104562 = get_local_id(0); \n        float v_tmp_104653 = 3.4028235E38f; \n        v__75402 = v_tmp_104653; \n        /* reduce_seq */\n        for (int v_i_104563 = 0; v_i_104563 < v_MWidthC_1; v_i_104563 = (1 + v_i_104563)) {\n          v__75402 = clmin(v__75402, v__104585[(v_i_104563 + (v_MWidthC_1 * v_l_id_104562))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_104564 = 0; \n          v__104590[v_w_id_104558] = doubleMultiplyAdd(v__75402, v__104569, v__104568[v_w_id_104558], v__104570); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104558 = atomic_inc(v_work_idx_8161); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__104565",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104566",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104567",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104568",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104569",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104570",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104572",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104590",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104585",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}