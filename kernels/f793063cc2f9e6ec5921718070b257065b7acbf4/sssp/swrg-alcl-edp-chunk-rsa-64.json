{
  "name" : "swrg-alcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__89268, const global float* restrict v__89269, const global float* restrict v__89270, const global float* restrict v__89271, float v__89272, float v__89273, global float* v__89287, global float* v__89286, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89275; \n  float v__89278; \n  /* Private Memory */\n  float v__89280_0;\n  \n  float v__89282_0;\n  \n  for (int v_wg_id_89263 = get_group_id(0); v_wg_id_89263 < ((v_MHeight_2)/(64)); v_wg_id_89263 = (v_wg_id_89263 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6779; \n      v_work_idx_6779 = 0; \n      int v_l_id_89264 = atomic_inc(&(v_work_idx_6779)); \n      while((v_l_id_89264 < 64)){\n        float v_tmp_89320 = 3.4028235E38f; \n        v__89275 = v_tmp_89320; \n        /* reduce_seq */\n        int v_stop_89321 = min(v__89268[(1 + (v__89268[(v_l_id_89264 + (64 * v_wg_id_89263))] / 4))], ((global int*)(v__89269 + (((global int*)(v__89269))[(v_l_id_89264 + (64 * v_wg_id_89263))] / 4)))[1]); \n        for (int v_i_89265 = 0; v_i_89265 < v_stop_89321; v_i_89265 = (1 + v_i_89265)) {\n          float v_tmp_89329 = 3.4028235E38f; \n          v__89278 = v_tmp_89329; \n          int v_index_89331 = v__89268[(2 + v_i_89265 + (v__89268[(v_l_id_89264 + (64 * v_wg_id_89263))] / 4))]; \n          if (v_index_89331 < 0) {\n            v__89280_0 = v__89278; \n          } else {\n            if (v_index_89331 >= v_MWidthC_1) {\n              v__89280_0 = v__89278; \n            } else {\n              v__89280_0 = v__89270[v_index_89331]; \n            }\n          }\n          v__89282_0 = absadd(v__89269[(2 + v_i_89265 + (((global int*)(v__89269))[(v_l_id_89264 + (64 * v_wg_id_89263))] / 4))], v__89280_0); \n          v__89275 = clmin(v__89275, v__89282_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89266 = 0; \n          v__89286[(v_l_id_89264 + (64 * v_wg_id_89263))] = doubleMultiplyAdd(v__89275, v__89272, v__89271[(v_l_id_89264 + (64 * v_wg_id_89263))], v__89273); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89267 = 0; \n          v__89287[(v_l_id_89264 + (64 * v_wg_id_89263))] = id(v__89286[(v_l_id_89264 + (64 * v_wg_id_89263))]); \n        }\n        /* end map_seq */\n        v_l_id_89264 = atomic_inc(&(v_work_idx_6779)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__89268",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__89269",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__89270",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__89271",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89272",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89273",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89286",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__89287",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}