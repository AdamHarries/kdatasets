{
  "name" : "swrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__92659, const global float* restrict v__92660, const global float* restrict v__92661, const global float* restrict v__92662, float v__92663, float v__92664, global float* v__92681, local float* v__92676, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92667; \n  float v__92669; \n  float v__75402; \n  /* Private Memory */\n  float v__92671_0;\n  \n  float v__92673_0;\n  \n  for (int v_wg_id_92652 = get_group_id(0); v_wg_id_92652 < v_MHeight_2; v_wg_id_92652 = (v_wg_id_92652 + get_num_groups(0))) {\n    for (int v_l_id_92653 = get_local_id(0); v_l_id_92653 < v_MWidthC_1; v_l_id_92653 = (v_l_id_92653 + get_local_size(0))) {\n      float v_tmp_92746 = 3.4028235E38f; \n      v__92667 = v_tmp_92746; \n      /* reduce_seq */\n      for (int v_i_92654 = 0; v_i_92654 < 128; v_i_92654 = (1 + v_i_92654)) {\n        float v_tmp_92747 = 3.4028235E38f; \n        v__92669 = v_tmp_92747; \n        int v_index_92748 = v__92659[(v_l_id_92653 + (128 * v_MWidthC_1 * v_wg_id_92652) + (v_MWidthC_1 * v_i_92654))]; \n        if (v_index_92748 < 0) {\n          v__92671_0 = v__92669; \n        } else {\n          if (v_index_92748 >= v_VLength_3) {\n            v__92671_0 = v__92669; \n          } else {\n            v__92671_0 = v__92661[v_index_92748]; \n          }\n        }\n        v__92673_0 = absadd(v__92671_0, v__92660[(v_l_id_92653 + (128 * v_MWidthC_1 * v_wg_id_92652) + (v_MWidthC_1 * v_i_92654))]); \n        v__92667 = clmin(v__92673_0, v__92667); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92655 = 0; \n        v__92676[v_l_id_92653] = id(v__92667); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92656 = get_local_id(0); \n      float v_tmp_92751 = 3.4028235E38f; \n      v__75402 = v_tmp_92751; \n      /* reduce_seq */\n      for (int v_i_92657 = 0; v_i_92657 < v_MWidthC_1; v_i_92657 = (1 + v_i_92657)) {\n        v__75402 = clmin(v__75402, v__92676[(v_i_92657 + (v_MWidthC_1 * v_l_id_92656))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92658 = 0; \n        v__92681[v_wg_id_92652] = doubleMultiplyAdd(v__75402, v__92663, v__92662[v_wg_id_92652], v__92664); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92659",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92660",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92661",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92663",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92664",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92681",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92676",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}