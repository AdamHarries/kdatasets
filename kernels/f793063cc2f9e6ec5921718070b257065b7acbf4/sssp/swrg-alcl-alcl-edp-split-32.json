{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__85545, const global float* restrict v__85546, const global float* restrict v__85547, const global float* restrict v__85548, float v__85549, float v__85550, global float* v__85569, local float* v__85564, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85553; \n  float v__85555; \n  float v__75402; \n  /* Private Memory */\n  float v__85557_0;\n  \n  float v__85559_0;\n  \n  int v__85563_0;\n  \n  for (int v_wg_id_85538 = get_group_id(0); v_wg_id_85538 < v_MHeight_2; v_wg_id_85538 = (v_wg_id_85538 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6454; \n      v_work_idx_6454 = 0; \n      int v_l_id_85539 = atomic_inc(&(v_work_idx_6454)); \n      while((v_l_id_85539 < v_MWidthC_1)){\n        float v_tmp_85625 = 3.4028235E38f; \n        v__85553 = v_tmp_85625; \n        /* reduce_while_seq */\n        for (int v_i_85540 = 0; v_i_85540 < 32; v_i_85540 = (1 + v_i_85540)) {\n          v__85563_0 = check(v__85553, v__85545[(v_l_id_85539 + (32 * v_MWidthC_1 * v_wg_id_85538) + (v_MWidthC_1 * v_i_85540))]); \n          if (v__85563_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85626 = 3.4028235E38f; \n          v__85555 = v_tmp_85626; \n          int v_index_85627 = v__85545[(v_l_id_85539 + (32 * v_MWidthC_1 * v_wg_id_85538) + (v_MWidthC_1 * v_i_85540))]; \n          if (v_index_85627 < 0) {\n            v__85557_0 = v__85555; \n          } else {\n            if (v_index_85627 >= v_VLength_3) {\n              v__85557_0 = v__85555; \n            } else {\n              v__85557_0 = v__85547[v_index_85627]; \n            }\n          }\n          v__85559_0 = absadd(v__85557_0, v__85546[(v_l_id_85539 + (32 * v_MWidthC_1 * v_wg_id_85538) + (v_MWidthC_1 * v_i_85540))]); \n          v__85553 = clmin(v__85559_0, v__85553); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85541 = 0; \n          v__85564[v_l_id_85539] = id(v__85553); \n        }\n        /* end map_seq */\n        v_l_id_85539 = atomic_inc(&(v_work_idx_6454)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6449; \n      v_work_idx_6449 = 0; \n      int v_l_id_85542 = atomic_inc(&(v_work_idx_6449)); \n      while((v_l_id_85542 < 1)){\n        float v_tmp_85630 = 3.4028235E38f; \n        v__75402 = v_tmp_85630; \n        /* reduce_seq */\n        for (int v_i_85543 = 0; v_i_85543 < v_MWidthC_1; v_i_85543 = (1 + v_i_85543)) {\n          v__75402 = clmin(v__75402, v__85564[(v_i_85543 + (v_MWidthC_1 * v_l_id_85542))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85544 = 0; \n          v__85569[v_wg_id_85538] = doubleMultiplyAdd(v__75402, v__85549, v__85548[v_wg_id_85538], v__85550); \n        }\n        /* end map_seq */\n        v_l_id_85542 = atomic_inc(&(v_work_idx_6449)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85545",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85546",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85547",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85548",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85549",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85550",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85564",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}