{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77133, const global float* restrict v__77134, const global float* restrict v__77135, const global float* restrict v__77136, float v__77137, float v__77138, global float* v__77152, global int* v__77140, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77142; \n  float v__77144; \n  /* Private Memory */\n  float v__77146_0;\n  \n  float v__77148_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5700 = v__77140; \n    local int v_w_id_77129; \n    if (get_local_id(0) == 0) {\n      v_w_id_77129 = atomic_inc(v_work_idx_5700); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77129 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_77130 = get_local_id(0); v_l_id_77130 < 8; v_l_id_77130 = (v_l_id_77130 + get_local_size(0))) {\n        float v_tmp_77193 = 3.4028235E38f; \n        v__77142 = v_tmp_77193; \n        /* reduce_seq */\n        for (int v_i_77131 = 0; v_i_77131 < v_MWidthC_1; v_i_77131 = (1 + v_i_77131)) {\n          float v_tmp_77194 = 3.4028235E38f; \n          v__77144 = v_tmp_77194; \n          int v_index_77195 = v__77133[(v_i_77131 + (8 * v_MWidthC_1 * v_w_id_77129) + (v_MWidthC_1 * v_l_id_77130))]; \n          if (v_index_77195 < 0) {\n            v__77146_0 = v__77144; \n          } else {\n            if (v_index_77195 >= v_VLength_3) {\n              v__77146_0 = v__77144; \n            } else {\n              v__77146_0 = v__77135[v_index_77195]; \n            }\n          }\n          v__77148_0 = absadd(v__77146_0, v__77134[(v_i_77131 + (8 * v_MWidthC_1 * v_w_id_77129) + (v_MWidthC_1 * v_l_id_77130))]); \n          v__77142 = clmin(v__77148_0, v__77142); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77132 = 0; \n          v__77152[(v_l_id_77130 + (8 * v_w_id_77129))] = doubleMultiplyAdd(v__77142, v__77137, v__77136[(v_l_id_77130 + (8 * v_w_id_77129))], v__77138); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_77129 = atomic_inc(v_work_idx_5700); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__77133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77135",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77137",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77138",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77140",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}