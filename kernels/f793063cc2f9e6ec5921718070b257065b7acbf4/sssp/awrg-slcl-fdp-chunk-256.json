{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__98593, const global float* restrict v__98594, const global float* restrict v__98595, const global float* restrict v__98596, float v__98597, float v__98598, global float* v__98612, global int* v__98600, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98602; \n  float v__98604; \n  /* Private Memory */\n  float v__98606_0;\n  \n  float v__98608_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7620 = v__98600; \n    local int v_w_id_98589; \n    if (get_local_id(0) == 0) {\n      v_w_id_98589 = atomic_inc(v_work_idx_7620); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_98589 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_98590 = get_local_id(0); v_l_id_98590 < 256; v_l_id_98590 = (v_l_id_98590 + get_local_size(0))) {\n        float v_tmp_98653 = 3.4028235E38f; \n        v__98602 = v_tmp_98653; \n        /* reduce_seq */\n        for (int v_i_98591 = 0; v_i_98591 < v_MWidthC_1; v_i_98591 = (1 + v_i_98591)) {\n          float v_tmp_98654 = 3.4028235E38f; \n          v__98604 = v_tmp_98654; \n          int v_index_98655 = v__98593[(v_i_98591 + (256 * v_MWidthC_1 * v_w_id_98589) + (v_MWidthC_1 * v_l_id_98590))]; \n          if (v_index_98655 < 0) {\n            v__98606_0 = v__98604; \n          } else {\n            if (v_index_98655 >= v_VLength_3) {\n              v__98606_0 = v__98604; \n            } else {\n              v__98606_0 = v__98595[v_index_98655]; \n            }\n          }\n          v__98608_0 = absadd(v__98606_0, v__98594[(v_i_98591 + (256 * v_MWidthC_1 * v_w_id_98589) + (v_MWidthC_1 * v_l_id_98590))]); \n          v__98602 = clmin(v__98608_0, v__98602); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98592 = 0; \n          v__98612[(v_l_id_98590 + (256 * v_w_id_98589))] = doubleMultiplyAdd(v__98602, v__98597, v__98596[(v_l_id_98590 + (256 * v_w_id_98589))], v__98598); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_98589 = atomic_inc(v_work_idx_7620); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98595",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98597",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98598",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98600",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__98612",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}