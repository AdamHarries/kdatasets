{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7496, const global float* restrict v__7497, const global float* restrict v__7498, const global float* restrict v__7499, float v__7500, float v__7501, global float* v__7518, local float* v__7513, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7504; \n  float v__7506; \n  float v__2938; \n  /* Private Memory */\n  float v__7508_0;\n  \n  float v__7510_0;\n  \n  for (int v_wg_id_7489 = get_group_id(0); v_wg_id_7489 < v_MHeight_2; v_wg_id_7489 = (v_wg_id_7489 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_489; \n      v_work_idx_489 = 0; \n      int v_l_id_7490 = atomic_inc(&(v_work_idx_489)); \n      while((v_l_id_7490 < v_MWidthC_1)){\n        float v_tmp_7571 = 0.0f; \n        v__7504 = v_tmp_7571; \n        /* reduce_seq */\n        for (int v_i_7491 = 0; v_i_7491 < 16; v_i_7491 = (1 + v_i_7491)) {\n          float v_tmp_7572 = 0.0f; \n          v__7506 = v_tmp_7572; \n          int v_index_7573 = v__7496[(v_l_id_7490 + (16 * v_MWidthC_1 * v_wg_id_7489) + (v_MWidthC_1 * v_i_7491))]; \n          if (v_index_7573 < 0) {\n            v__7508_0 = v__7506; \n          } else {\n            if (v_index_7573 >= v_VLength_3) {\n              v__7508_0 = v__7506; \n            } else {\n              v__7508_0 = v__7498[v_index_7573]; \n            }\n          }\n          v__7510_0 = mult(v__7508_0, v__7497[(v_l_id_7490 + (16 * v_MWidthC_1 * v_wg_id_7489) + (v_MWidthC_1 * v_i_7491))]); \n          v__7504 = add(v__7510_0, v__7504); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7492 = 0; \n          v__7513[v_l_id_7490] = id(v__7504); \n        }\n        /* end map_seq */\n        v_l_id_7490 = atomic_inc(&(v_work_idx_489)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_484; \n      v_work_idx_484 = 0; \n      int v_l_id_7493 = atomic_inc(&(v_work_idx_484)); \n      while((v_l_id_7493 < 1)){\n        float v_tmp_7576 = 0.0f; \n        v__2938 = v_tmp_7576; \n        /* reduce_seq */\n        for (int v_i_7494 = 0; v_i_7494 < v_MWidthC_1; v_i_7494 = (1 + v_i_7494)) {\n          v__2938 = add(v__2938, v__7513[(v_i_7494 + (v_MWidthC_1 * v_l_id_7493))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7495 = 0; \n          v__7518[v_wg_id_7489] = doubleMultiplyAdd(v__2938, v__7500, v__7499[v_wg_id_7489], v__7501); \n        }\n        /* end map_seq */\n        v_l_id_7493 = atomic_inc(&(v_work_idx_484)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__7496",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7497",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7498",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7499",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7500",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7501",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__7518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7513",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}