{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24136, const global float* restrict v__24137, const global float* restrict v__24138, const global float* restrict v__24139, float v__24140, float v__24141, global float* v__24158, local float* v__24153, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24144; \n  float v__24146; \n  float v__2938; \n  /* Private Memory */\n  float v__24148_0;\n  \n  float v__24150_0;\n  \n  for (int v_wg_id_24129 = get_group_id(0); v_wg_id_24129 < v_MHeight_2; v_wg_id_24129 = (v_wg_id_24129 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2049; \n      v_work_idx_2049 = 0; \n      int v_l_id_24130 = atomic_inc(&(v_work_idx_2049)); \n      while((v_l_id_24130 < v_MWidthC_1)){\n        float v_tmp_24211 = 0.0f; \n        v__24144 = v_tmp_24211; \n        /* reduce_seq */\n        for (int v_i_24131 = 0; v_i_24131 < 512; v_i_24131 = (1 + v_i_24131)) {\n          float v_tmp_24212 = 0.0f; \n          v__24146 = v_tmp_24212; \n          int v_index_24213 = v__24136[(v_l_id_24130 + (512 * v_MWidthC_1 * v_wg_id_24129) + (v_MWidthC_1 * v_i_24131))]; \n          if (v_index_24213 < 0) {\n            v__24148_0 = v__24146; \n          } else {\n            if (v_index_24213 >= v_VLength_3) {\n              v__24148_0 = v__24146; \n            } else {\n              v__24148_0 = v__24138[v_index_24213]; \n            }\n          }\n          v__24150_0 = mult(v__24148_0, v__24137[(v_l_id_24130 + (512 * v_MWidthC_1 * v_wg_id_24129) + (v_MWidthC_1 * v_i_24131))]); \n          v__24144 = add(v__24150_0, v__24144); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24132 = 0; \n          v__24153[v_l_id_24130] = id(v__24144); \n        }\n        /* end map_seq */\n        v_l_id_24130 = atomic_inc(&(v_work_idx_2049)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2044; \n      v_work_idx_2044 = 0; \n      int v_l_id_24133 = atomic_inc(&(v_work_idx_2044)); \n      while((v_l_id_24133 < 1)){\n        float v_tmp_24216 = 0.0f; \n        v__2938 = v_tmp_24216; \n        /* reduce_seq */\n        for (int v_i_24134 = 0; v_i_24134 < v_MWidthC_1; v_i_24134 = (1 + v_i_24134)) {\n          v__2938 = add(v__2938, v__24153[(v_i_24134 + (v_MWidthC_1 * v_l_id_24133))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24135 = 0; \n          v__24158[v_wg_id_24129] = doubleMultiplyAdd(v__2938, v__24140, v__24139[v_wg_id_24129], v__24141); \n        }\n        /* end map_seq */\n        v_l_id_24133 = atomic_inc(&(v_work_idx_2044)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24136",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24137",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24138",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24139",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24140",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24141",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__24158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24153",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}