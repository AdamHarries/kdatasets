{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15812, const global float* restrict v__15813, const global float* restrict v__15814, const global float* restrict v__15815, float v__15816, float v__15817, global int* v__15819, global float* v__15835, local float* v__15830, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15821; \n  float v__15823; \n  float v__2938; \n  /* Private Memory */\n  float v__15825_0;\n  \n  float v__15827_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1278 = v__15819; \n    local int v_w_id_15805; \n    if (get_local_id(0) == 0) {\n      v_w_id_15805 = atomic_inc(v_work_idx_1278); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15805 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1276; \n        v_work_idx_1276 = 0; \n        int v_l_id_15806 = atomic_inc(&(v_work_idx_1276)); \n        while((v_l_id_15806 < v_MWidthC_1)){\n          float v_tmp_15886 = 0.0f; \n          v__15821 = v_tmp_15886; \n          /* reduce_seq */\n          for (int v_i_15807 = 0; v_i_15807 < 64; v_i_15807 = (1 + v_i_15807)) {\n            float v_tmp_15887 = 0.0f; \n            v__15823 = v_tmp_15887; \n            int v_index_15888 = v__15812[(v_l_id_15806 + (64 * v_MWidthC_1 * v_w_id_15805) + (v_MWidthC_1 * v_i_15807))]; \n            if (v_index_15888 < 0) {\n              v__15825_0 = v__15823; \n            } else {\n              if (v_index_15888 >= v_VLength_3) {\n                v__15825_0 = v__15823; \n              } else {\n                v__15825_0 = v__15814[v_index_15888]; \n              }\n            }\n            v__15827_0 = mult(v__15825_0, v__15813[(v_l_id_15806 + (64 * v_MWidthC_1 * v_w_id_15805) + (v_MWidthC_1 * v_i_15807))]); \n            v__15821 = add(v__15827_0, v__15821); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15808 = 0; \n            v__15830[v_l_id_15806] = id(v__15821); \n          }\n          /* end map_seq */\n          v_l_id_15806 = atomic_inc(&(v_work_idx_1276)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1271; \n        v_work_idx_1271 = 0; \n        int v_l_id_15809 = atomic_inc(&(v_work_idx_1271)); \n        while((v_l_id_15809 < 1)){\n          float v_tmp_15891 = 0.0f; \n          v__2938 = v_tmp_15891; \n          /* reduce_seq */\n          for (int v_i_15810 = 0; v_i_15810 < v_MWidthC_1; v_i_15810 = (1 + v_i_15810)) {\n            v__2938 = add(v__2938, v__15830[(v_i_15810 + (v_MWidthC_1 * v_l_id_15809))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15811 = 0; \n            v__15835[v_w_id_15805] = doubleMultiplyAdd(v__2938, v__15816, v__15815[v_w_id_15805], v__15817); \n          }\n          /* end map_seq */\n          v_l_id_15809 = atomic_inc(&(v_work_idx_1271)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15805 = atomic_inc(v_work_idx_1278); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15812",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15813",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15814",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15816",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15817",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15819",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15835",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15830",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}