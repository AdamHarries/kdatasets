{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8442, const global float* restrict v__8443, const global float* restrict v__8444, const global float* restrict v__8445, float v__8446, float v__8447, global int* v__8449, global float* v__8467, local float* v__8462, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8451; \n  float v__8453; \n  float v__2938; \n  /* Private Memory */\n  float v__8455_0;\n  \n  float v__8457_0;\n  \n  int v__8461_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_578 = v__8449; \n    local int v_w_id_8435; \n    if (get_local_id(0) == 0) {\n      v_w_id_8435 = atomic_inc(v_work_idx_578); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8435 < v_MHeight_2)){\n      for (int v_l_id_8436 = get_local_id(0); v_l_id_8436 < v_MWidthC_1; v_l_id_8436 = (v_l_id_8436 + get_local_size(0))) {\n        float v_tmp_8529 = 0.0f; \n        v__8451 = v_tmp_8529; \n        /* reduce_while_seq */\n        for (int v_i_8437 = 0; v_i_8437 < 16; v_i_8437 = (1 + v_i_8437)) {\n          v__8461_0 = check(v__8451, v__8442[(v_l_id_8436 + (16 * v_MWidthC_1 * v_w_id_8435) + (v_MWidthC_1 * v_i_8437))]); \n          if (v__8461_0) {\n          } else {\n            break;\n          }\n          float v_tmp_8530 = 0.0f; \n          v__8453 = v_tmp_8530; \n          int v_index_8531 = v__8442[(v_l_id_8436 + (16 * v_MWidthC_1 * v_w_id_8435) + (v_MWidthC_1 * v_i_8437))]; \n          if (v_index_8531 < 0) {\n            v__8455_0 = v__8453; \n          } else {\n            if (v_index_8531 >= v_VLength_3) {\n              v__8455_0 = v__8453; \n            } else {\n              v__8455_0 = v__8444[v_index_8531]; \n            }\n          }\n          v__8457_0 = mult(v__8455_0, v__8443[(v_l_id_8436 + (16 * v_MWidthC_1 * v_w_id_8435) + (v_MWidthC_1 * v_i_8437))]); \n          v__8451 = add(v__8457_0, v__8451); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8438 = 0; \n          v__8462[v_l_id_8436] = id(v__8451); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_572; \n        v_work_idx_572 = 0; \n        int v_l_id_8439 = atomic_inc(&(v_work_idx_572)); \n        while((v_l_id_8439 < 1)){\n          float v_tmp_8534 = 0.0f; \n          v__2938 = v_tmp_8534; \n          /* reduce_seq */\n          for (int v_i_8440 = 0; v_i_8440 < v_MWidthC_1; v_i_8440 = (1 + v_i_8440)) {\n            v__2938 = add(v__2938, v__8462[(v_i_8440 + (v_MWidthC_1 * v_l_id_8439))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_8441 = 0; \n            v__8467[v_w_id_8435] = doubleMultiplyAdd(v__2938, v__8446, v__8445[v_w_id_8435], v__8447); \n          }\n          /* end map_seq */\n          v_l_id_8439 = atomic_inc(&(v_work_idx_572)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8435 = atomic_inc(v_work_idx_578); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__8442",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8443",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8444",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8446",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8447",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8449",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8467",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8462",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}