{
  "name" : "awrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7687, const global float* restrict v__7688, const global float* restrict v__7689, const global float* restrict v__7690, float v__7691, float v__7692, global int* v__7694, global float* v__7706, global float* v__7700, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7696; \n  float v__7701; \n  /* Private Memory */\n  float v__7698_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_507 = v__7694; \n    local int v_w_id_7682; \n    if (get_local_id(0) == 0) {\n      v_w_id_7682 = atomic_inc(v_work_idx_507); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_7682 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_7683 = get_local_id(0); v_l_id_7683 < 16; v_l_id_7683 = (v_l_id_7683 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_7684 = 0; v_i_7684 < v_MWidthC_1; v_i_7684 = (1 + v_i_7684)) {\n          float v_tmp_7748 = 0.0f; \n          v__7696 = v_tmp_7748; \n          int v_index_7749 = v__7687[(v_i_7684 + (16 * v_MWidthC_1 * v_w_id_7682) + (v_MWidthC_1 * v_l_id_7683))]; \n          if (v_index_7749 < 0) {\n            v__7698_0 = v__7696; \n          } else {\n            if (v_index_7749 >= v_VLength_3) {\n              v__7698_0 = v__7696; \n            } else {\n              v__7698_0 = v__7689[v_index_7749]; \n            }\n          }\n          v__7700[(v_i_7684 + (16 * v_MWidthC_1 * v_w_id_7682) + (v_MWidthC_1 * v_l_id_7683))] = mult(v__7698_0, v__7688[(v_i_7684 + (16 * v_MWidthC_1 * v_w_id_7682) + (v_MWidthC_1 * v_l_id_7683))]); \n        }\n        /* end map_seq */\n        float v_tmp_7750 = 0.0f; \n        v__7701 = v_tmp_7750; \n        /* reduce_seq */\n        for (int v_i_7685 = 0; v_i_7685 < v_MWidthC_1; v_i_7685 = (1 + v_i_7685)) {\n          v__7701 = add(v__7701, v__7700[(v_i_7685 + (16 * v_MWidthC_1 * v_w_id_7682) + (v_MWidthC_1 * v_l_id_7683))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7686 = 0; \n          v__7706[(v_l_id_7683 + (16 * v_w_id_7682))] = doubleMultiplyAdd(v__7701, v__7691, v__7690[(v_l_id_7683 + (16 * v_w_id_7682))], v__7692); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_7682 = atomic_inc(v_work_idx_507); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7688",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7689",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7690",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7691",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7692",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7694",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__7706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__7700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}