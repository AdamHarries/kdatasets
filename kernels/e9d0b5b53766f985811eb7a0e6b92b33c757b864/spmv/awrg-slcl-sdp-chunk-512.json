{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24327, const global float* restrict v__24328, const global float* restrict v__24329, const global float* restrict v__24330, float v__24331, float v__24332, global int* v__24334, global float* v__24346, global float* v__24340, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24336; \n  float v__24341; \n  /* Private Memory */\n  float v__24338_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2067 = v__24334; \n    local int v_w_id_24322; \n    if (get_local_id(0) == 0) {\n      v_w_id_24322 = atomic_inc(v_work_idx_2067); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24322 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_24323 = get_local_id(0); v_l_id_24323 < 512; v_l_id_24323 = (v_l_id_24323 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24324 = 0; v_i_24324 < v_MWidthC_1; v_i_24324 = (1 + v_i_24324)) {\n          float v_tmp_24388 = 0.0f; \n          v__24336 = v_tmp_24388; \n          int v_index_24389 = v__24327[(v_i_24324 + (512 * v_MWidthC_1 * v_w_id_24322) + (v_MWidthC_1 * v_l_id_24323))]; \n          if (v_index_24389 < 0) {\n            v__24338_0 = v__24336; \n          } else {\n            if (v_index_24389 >= v_VLength_3) {\n              v__24338_0 = v__24336; \n            } else {\n              v__24338_0 = v__24329[v_index_24389]; \n            }\n          }\n          v__24340[(v_i_24324 + (512 * v_MWidthC_1 * v_w_id_24322) + (v_MWidthC_1 * v_l_id_24323))] = mult(v__24338_0, v__24328[(v_i_24324 + (512 * v_MWidthC_1 * v_w_id_24322) + (v_MWidthC_1 * v_l_id_24323))]); \n        }\n        /* end map_seq */\n        float v_tmp_24390 = 0.0f; \n        v__24341 = v_tmp_24390; \n        /* reduce_seq */\n        for (int v_i_24325 = 0; v_i_24325 < v_MWidthC_1; v_i_24325 = (1 + v_i_24325)) {\n          v__24341 = add(v__24341, v__24340[(v_i_24325 + (512 * v_MWidthC_1 * v_w_id_24322) + (v_MWidthC_1 * v_l_id_24323))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24326 = 0; \n          v__24346[(v_l_id_24323 + (512 * v_w_id_24322))] = doubleMultiplyAdd(v__24341, v__24331, v__24330[(v_l_id_24323 + (512 * v_w_id_24322))], v__24332); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_24322 = atomic_inc(v_work_idx_2067); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24327",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24329",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24331",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24332",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24334",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__24346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__24340",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}