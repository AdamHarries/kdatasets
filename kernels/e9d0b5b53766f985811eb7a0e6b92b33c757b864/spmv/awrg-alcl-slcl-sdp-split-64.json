{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15422, const global float* restrict v__15423, const global float* restrict v__15424, const global float* restrict v__15425, float v__15426, float v__15427, global int* v__15429, global float* v__15445, global float* v__15435, local float* v__15440, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15431; \n  float v__15436; \n  float v__2938; \n  /* Private Memory */\n  float v__15433_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1235 = v__15429; \n    local int v_w_id_15414; \n    if (get_local_id(0) == 0) {\n      v_w_id_15414 = atomic_inc(v_work_idx_1235); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15414 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1233; \n        v_work_idx_1233 = 0; \n        int v_l_id_15415 = atomic_inc(&(v_work_idx_1233)); \n        while((v_l_id_15415 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15416 = 0; v_i_15416 < 64; v_i_15416 = (1 + v_i_15416)) {\n            float v_tmp_15500 = 0.0f; \n            v__15431 = v_tmp_15500; \n            int v_index_15501 = v__15422[(v_l_id_15415 + (64 * v_MWidthC_1 * v_w_id_15414) + (v_MWidthC_1 * v_i_15416))]; \n            if (v_index_15501 < 0) {\n              v__15433_0 = v__15431; \n            } else {\n              if (v_index_15501 >= v_VLength_3) {\n                v__15433_0 = v__15431; \n              } else {\n                v__15433_0 = v__15424[v_index_15501]; \n              }\n            }\n            v__15435[(v_i_15416 + (64 * v_MWidthC_1 * v_w_id_15414) + (64 * v_l_id_15415))] = mult(v__15433_0, v__15423[(v_l_id_15415 + (64 * v_MWidthC_1 * v_w_id_15414) + (v_MWidthC_1 * v_i_15416))]); \n          }\n          /* end map_seq */\n          float v_tmp_15502 = 0.0f; \n          v__15436 = v_tmp_15502; \n          /* reduce_seq */\n          for (int v_i_15417 = 0; v_i_15417 < 64; v_i_15417 = (1 + v_i_15417)) {\n            v__15436 = add(v__15436, v__15435[(v_i_15417 + (64 * v_MWidthC_1 * v_w_id_15414) + (64 * v_l_id_15415))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15418 = 0; \n            v__15440[v_l_id_15415] = id(v__15436); \n          }\n          /* end map_seq */\n          v_l_id_15415 = atomic_inc(&(v_work_idx_1233)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_15419 = get_local_id(0); \n        float v_tmp_15505 = 0.0f; \n        v__2938 = v_tmp_15505; \n        /* reduce_seq */\n        for (int v_i_15420 = 0; v_i_15420 < v_MWidthC_1; v_i_15420 = (1 + v_i_15420)) {\n          v__2938 = add(v__2938, v__15440[(v_i_15420 + (v_MWidthC_1 * v_l_id_15419))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15421 = 0; \n          v__15445[v_w_id_15414] = doubleMultiplyAdd(v__2938, v__15426, v__15425[v_w_id_15414], v__15427); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15414 = atomic_inc(v_work_idx_1235); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15422",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15423",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15424",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15425",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15426",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15427",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15429",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__15445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__15435",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__15440",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}