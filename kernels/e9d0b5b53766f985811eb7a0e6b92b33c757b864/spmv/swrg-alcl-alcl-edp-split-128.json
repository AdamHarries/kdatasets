{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17574, const global float* restrict v__17575, const global float* restrict v__17576, const global float* restrict v__17577, float v__17578, float v__17579, global float* v__17598, local float* v__17593, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17582; \n  float v__17584; \n  float v__2938; \n  /* Private Memory */\n  float v__17586_0;\n  \n  float v__17588_0;\n  \n  int v__17592_0;\n  \n  for (int v_wg_id_17567 = get_group_id(0); v_wg_id_17567 < v_MHeight_2; v_wg_id_17567 = (v_wg_id_17567 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1435; \n      v_work_idx_1435 = 0; \n      int v_l_id_17568 = atomic_inc(&(v_work_idx_1435)); \n      while((v_l_id_17568 < v_MWidthC_1)){\n        float v_tmp_17654 = 0.0f; \n        v__17582 = v_tmp_17654; \n        /* reduce_while_seq */\n        for (int v_i_17569 = 0; v_i_17569 < 128; v_i_17569 = (1 + v_i_17569)) {\n          v__17592_0 = check(v__17582, v__17574[(v_l_id_17568 + (128 * v_MWidthC_1 * v_wg_id_17567) + (v_MWidthC_1 * v_i_17569))]); \n          if (v__17592_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17655 = 0.0f; \n          v__17584 = v_tmp_17655; \n          int v_index_17656 = v__17574[(v_l_id_17568 + (128 * v_MWidthC_1 * v_wg_id_17567) + (v_MWidthC_1 * v_i_17569))]; \n          if (v_index_17656 < 0) {\n            v__17586_0 = v__17584; \n          } else {\n            if (v_index_17656 >= v_VLength_3) {\n              v__17586_0 = v__17584; \n            } else {\n              v__17586_0 = v__17576[v_index_17656]; \n            }\n          }\n          v__17588_0 = mult(v__17586_0, v__17575[(v_l_id_17568 + (128 * v_MWidthC_1 * v_wg_id_17567) + (v_MWidthC_1 * v_i_17569))]); \n          v__17582 = add(v__17588_0, v__17582); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17570 = 0; \n          v__17593[v_l_id_17568] = id(v__17582); \n        }\n        /* end map_seq */\n        v_l_id_17568 = atomic_inc(&(v_work_idx_1435)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1430; \n      v_work_idx_1430 = 0; \n      int v_l_id_17571 = atomic_inc(&(v_work_idx_1430)); \n      while((v_l_id_17571 < 1)){\n        float v_tmp_17659 = 0.0f; \n        v__2938 = v_tmp_17659; \n        /* reduce_seq */\n        for (int v_i_17572 = 0; v_i_17572 < v_MWidthC_1; v_i_17572 = (1 + v_i_17572)) {\n          v__2938 = add(v__2938, v__17593[(v_i_17572 + (v_MWidthC_1 * v_l_id_17571))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17573 = 0; \n          v__17598[v_wg_id_17567] = doubleMultiplyAdd(v__2938, v__17578, v__17577[v_wg_id_17567], v__17579); \n        }\n        /* end map_seq */\n        v_l_id_17571 = atomic_inc(&(v_work_idx_1430)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17574",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17575",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17576",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17577",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17578",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17579",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17593",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}