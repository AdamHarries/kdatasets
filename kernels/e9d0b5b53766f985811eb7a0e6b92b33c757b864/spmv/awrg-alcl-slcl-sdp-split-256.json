{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22078, const global float* restrict v__22079, const global float* restrict v__22080, const global float* restrict v__22081, float v__22082, float v__22083, global int* v__22085, global float* v__22101, global float* v__22091, local float* v__22096, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22087; \n  float v__22092; \n  float v__2938; \n  /* Private Memory */\n  float v__22089_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1859 = v__22085; \n    local int v_w_id_22070; \n    if (get_local_id(0) == 0) {\n      v_w_id_22070 = atomic_inc(v_work_idx_1859); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22070 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1857; \n        v_work_idx_1857 = 0; \n        int v_l_id_22071 = atomic_inc(&(v_work_idx_1857)); \n        while((v_l_id_22071 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22072 = 0; v_i_22072 < 256; v_i_22072 = (1 + v_i_22072)) {\n            float v_tmp_22156 = 0.0f; \n            v__22087 = v_tmp_22156; \n            int v_index_22157 = v__22078[(v_l_id_22071 + (256 * v_MWidthC_1 * v_w_id_22070) + (v_MWidthC_1 * v_i_22072))]; \n            if (v_index_22157 < 0) {\n              v__22089_0 = v__22087; \n            } else {\n              if (v_index_22157 >= v_VLength_3) {\n                v__22089_0 = v__22087; \n              } else {\n                v__22089_0 = v__22080[v_index_22157]; \n              }\n            }\n            v__22091[(v_i_22072 + (256 * v_MWidthC_1 * v_w_id_22070) + (256 * v_l_id_22071))] = mult(v__22089_0, v__22079[(v_l_id_22071 + (256 * v_MWidthC_1 * v_w_id_22070) + (v_MWidthC_1 * v_i_22072))]); \n          }\n          /* end map_seq */\n          float v_tmp_22158 = 0.0f; \n          v__22092 = v_tmp_22158; \n          /* reduce_seq */\n          for (int v_i_22073 = 0; v_i_22073 < 256; v_i_22073 = (1 + v_i_22073)) {\n            v__22092 = add(v__22092, v__22091[(v_i_22073 + (256 * v_MWidthC_1 * v_w_id_22070) + (256 * v_l_id_22071))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22074 = 0; \n            v__22096[v_l_id_22071] = id(v__22092); \n          }\n          /* end map_seq */\n          v_l_id_22071 = atomic_inc(&(v_work_idx_1857)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_22075 = get_local_id(0); \n        float v_tmp_22161 = 0.0f; \n        v__2938 = v_tmp_22161; \n        /* reduce_seq */\n        for (int v_i_22076 = 0; v_i_22076 < v_MWidthC_1; v_i_22076 = (1 + v_i_22076)) {\n          v__2938 = add(v__2938, v__22096[(v_i_22076 + (v_MWidthC_1 * v_l_id_22075))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_22077 = 0; \n          v__22101[v_w_id_22070] = doubleMultiplyAdd(v__2938, v__22082, v__22081[v_w_id_22070], v__22083); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22070 = atomic_inc(v_work_idx_1859); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22078",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22079",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22080",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22082",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22083",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22085",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__22101",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__22091",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__22096",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}