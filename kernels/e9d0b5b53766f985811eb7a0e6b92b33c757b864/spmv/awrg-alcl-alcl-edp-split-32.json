{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12577, const global float* restrict v__12578, const global float* restrict v__12579, const global float* restrict v__12580, float v__12581, float v__12582, global int* v__12584, global float* v__12602, local float* v__12597, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12586; \n  float v__12588; \n  float v__2938; \n  /* Private Memory */\n  float v__12590_0;\n  \n  float v__12592_0;\n  \n  int v__12596_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_977 = v__12584; \n    local int v_w_id_12570; \n    if (get_local_id(0) == 0) {\n      v_w_id_12570 = atomic_inc(v_work_idx_977); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12570 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_975; \n        v_work_idx_975 = 0; \n        int v_l_id_12571 = atomic_inc(&(v_work_idx_975)); \n        while((v_l_id_12571 < v_MWidthC_1)){\n          float v_tmp_12656 = 0.0f; \n          v__12586 = v_tmp_12656; \n          /* reduce_while_seq */\n          for (int v_i_12572 = 0; v_i_12572 < 32; v_i_12572 = (1 + v_i_12572)) {\n            v__12596_0 = check(v__12586, v__12577[(v_l_id_12571 + (32 * v_MWidthC_1 * v_w_id_12570) + (v_MWidthC_1 * v_i_12572))]); \n            if (v__12596_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12657 = 0.0f; \n            v__12588 = v_tmp_12657; \n            int v_index_12658 = v__12577[(v_l_id_12571 + (32 * v_MWidthC_1 * v_w_id_12570) + (v_MWidthC_1 * v_i_12572))]; \n            if (v_index_12658 < 0) {\n              v__12590_0 = v__12588; \n            } else {\n              if (v_index_12658 >= v_VLength_3) {\n                v__12590_0 = v__12588; \n              } else {\n                v__12590_0 = v__12579[v_index_12658]; \n              }\n            }\n            v__12592_0 = mult(v__12590_0, v__12578[(v_l_id_12571 + (32 * v_MWidthC_1 * v_w_id_12570) + (v_MWidthC_1 * v_i_12572))]); \n            v__12586 = add(v__12592_0, v__12586); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12573 = 0; \n            v__12597[v_l_id_12571] = id(v__12586); \n          }\n          /* end map_seq */\n          v_l_id_12571 = atomic_inc(&(v_work_idx_975)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_970; \n        v_work_idx_970 = 0; \n        int v_l_id_12574 = atomic_inc(&(v_work_idx_970)); \n        while((v_l_id_12574 < 1)){\n          float v_tmp_12661 = 0.0f; \n          v__2938 = v_tmp_12661; \n          /* reduce_seq */\n          for (int v_i_12575 = 0; v_i_12575 < v_MWidthC_1; v_i_12575 = (1 + v_i_12575)) {\n            v__2938 = add(v__2938, v__12597[(v_i_12575 + (v_MWidthC_1 * v_l_id_12574))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12576 = 0; \n            v__12602[v_w_id_12570] = doubleMultiplyAdd(v__2938, v__12581, v__12580[v_w_id_12570], v__12582); \n          }\n          /* end map_seq */\n          v_l_id_12574 = atomic_inc(&(v_work_idx_970)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12570 = atomic_inc(v_work_idx_977); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12577",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12578",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12579",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12581",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12582",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12584",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12597",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}