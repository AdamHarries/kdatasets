{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22375, const global float* restrict v__22376, const global float* restrict v__22377, const global float* restrict v__22378, float v__22379, float v__22380, global int* v__22382, global float* v__22398, global float* v__22388, local float* v__22393, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22384; \n  float v__22389; \n  float v__2938; \n  /* Private Memory */\n  float v__22386_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1891 = v__22382; \n    local int v_w_id_22367; \n    if (get_local_id(0) == 0) {\n      v_w_id_22367 = atomic_inc(v_work_idx_1891); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22367 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1889; \n        v_work_idx_1889 = 0; \n        int v_l_id_22368 = atomic_inc(&(v_work_idx_1889)); \n        while((v_l_id_22368 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22369 = 0; v_i_22369 < 256; v_i_22369 = (1 + v_i_22369)) {\n            float v_tmp_22449 = 0.0f; \n            v__22384 = v_tmp_22449; \n            int v_index_22450 = v__22375[(v_l_id_22368 + (256 * v_MWidthC_1 * v_w_id_22367) + (v_MWidthC_1 * v_i_22369))]; \n            if (v_index_22450 < 0) {\n              v__22386_0 = v__22384; \n            } else {\n              if (v_index_22450 >= v_VLength_3) {\n                v__22386_0 = v__22384; \n              } else {\n                v__22386_0 = v__22377[v_index_22450]; \n              }\n            }\n            v__22388[(v_i_22369 + (256 * v_MWidthC_1 * v_w_id_22367) + (256 * v_l_id_22368))] = mult(v__22386_0, v__22376[(v_l_id_22368 + (256 * v_MWidthC_1 * v_w_id_22367) + (v_MWidthC_1 * v_i_22369))]); \n          }\n          /* end map_seq */\n          float v_tmp_22451 = 0.0f; \n          v__22389 = v_tmp_22451; \n          /* reduce_seq */\n          for (int v_i_22370 = 0; v_i_22370 < 256; v_i_22370 = (1 + v_i_22370)) {\n            v__22389 = add(v__22389, v__22388[(v_i_22370 + (256 * v_MWidthC_1 * v_w_id_22367) + (256 * v_l_id_22368))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22371 = 0; \n            v__22393[v_l_id_22368] = id(v__22389); \n          }\n          /* end map_seq */\n          v_l_id_22368 = atomic_inc(&(v_work_idx_1889)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1883; \n        v_work_idx_1883 = 0; \n        int v_l_id_22372 = atomic_inc(&(v_work_idx_1883)); \n        while((v_l_id_22372 < 1)){\n          float v_tmp_22454 = 0.0f; \n          v__2938 = v_tmp_22454; \n          /* reduce_seq */\n          for (int v_i_22373 = 0; v_i_22373 < v_MWidthC_1; v_i_22373 = (1 + v_i_22373)) {\n            v__2938 = add(v__2938, v__22393[(v_i_22373 + (v_MWidthC_1 * v_l_id_22372))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22374 = 0; \n            v__22398[v_w_id_22367] = doubleMultiplyAdd(v__2938, v__22379, v__22378[v_w_id_22367], v__22380); \n          }\n          /* end map_seq */\n          v_l_id_22372 = atomic_inc(&(v_work_idx_1883)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22367 = atomic_inc(v_work_idx_1891); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22375",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22376",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22377",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22379",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22380",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22382",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__22398",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__22388",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__22393",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}