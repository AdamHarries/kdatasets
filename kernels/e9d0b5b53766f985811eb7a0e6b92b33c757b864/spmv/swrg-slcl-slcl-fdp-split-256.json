{
  "name" : "swrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19667, const global float* restrict v__19668, const global float* restrict v__19669, const global float* restrict v__19670, float v__19671, float v__19672, global float* v__19689, local float* v__19684, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19675; \n  float v__19677; \n  float v__2938; \n  /* Private Memory */\n  float v__19679_0;\n  \n  float v__19681_0;\n  \n  for (int v_wg_id_19660 = get_group_id(0); v_wg_id_19660 < v_MHeight_2; v_wg_id_19660 = (v_wg_id_19660 + get_num_groups(0))) {\n    for (int v_l_id_19661 = get_local_id(0); v_l_id_19661 < v_MWidthC_1; v_l_id_19661 = (v_l_id_19661 + get_local_size(0))) {\n      float v_tmp_19754 = 0.0f; \n      v__19675 = v_tmp_19754; \n      /* reduce_seq */\n      for (int v_i_19662 = 0; v_i_19662 < 256; v_i_19662 = (1 + v_i_19662)) {\n        float v_tmp_19755 = 0.0f; \n        v__19677 = v_tmp_19755; \n        int v_index_19756 = v__19667[(v_l_id_19661 + (256 * v_MWidthC_1 * v_wg_id_19660) + (v_MWidthC_1 * v_i_19662))]; \n        if (v_index_19756 < 0) {\n          v__19679_0 = v__19677; \n        } else {\n          if (v_index_19756 >= v_VLength_3) {\n            v__19679_0 = v__19677; \n          } else {\n            v__19679_0 = v__19669[v_index_19756]; \n          }\n        }\n        v__19681_0 = mult(v__19679_0, v__19668[(v_l_id_19661 + (256 * v_MWidthC_1 * v_wg_id_19660) + (v_MWidthC_1 * v_i_19662))]); \n        v__19675 = add(v__19681_0, v__19675); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19663 = 0; \n        v__19684[v_l_id_19661] = id(v__19675); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19664 = get_local_id(0); \n      float v_tmp_19759 = 0.0f; \n      v__2938 = v_tmp_19759; \n      /* reduce_seq */\n      for (int v_i_19665 = 0; v_i_19665 < v_MWidthC_1; v_i_19665 = (1 + v_i_19665)) {\n        v__2938 = add(v__2938, v__19684[(v_i_19665 + (v_MWidthC_1 * v_l_id_19664))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19666 = 0; \n        v__19689[v_wg_id_19660] = doubleMultiplyAdd(v__2938, v__19671, v__19670[v_wg_id_19660], v__19672); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19667",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19668",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19669",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19671",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19672",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19684",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}