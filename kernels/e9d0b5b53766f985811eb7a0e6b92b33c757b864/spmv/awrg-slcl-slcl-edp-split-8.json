{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4801, const global float* restrict v__4802, const global float* restrict v__4803, const global float* restrict v__4804, float v__4805, float v__4806, global int* v__4808, global float* v__4826, local float* v__4821, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4810; \n  float v__4812; \n  float v__2938; \n  /* Private Memory */\n  float v__4814_0;\n  \n  float v__4816_0;\n  \n  int v__4820_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_235 = v__4808; \n    local int v_w_id_4794; \n    if (get_local_id(0) == 0) {\n      v_w_id_4794 = atomic_inc(v_work_idx_235); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4794 < v_MHeight_2)){\n      for (int v_l_id_4795 = get_local_id(0); v_l_id_4795 < v_MWidthC_1; v_l_id_4795 = (v_l_id_4795 + get_local_size(0))) {\n        float v_tmp_4892 = 0.0f; \n        v__4810 = v_tmp_4892; \n        /* reduce_while_seq */\n        for (int v_i_4796 = 0; v_i_4796 < 8; v_i_4796 = (1 + v_i_4796)) {\n          v__4820_0 = check(v__4810, v__4801[(v_l_id_4795 + (8 * v_MWidthC_1 * v_w_id_4794) + (v_MWidthC_1 * v_i_4796))]); \n          if (v__4820_0) {\n          } else {\n            break;\n          }\n          float v_tmp_4893 = 0.0f; \n          v__4812 = v_tmp_4893; \n          int v_index_4894 = v__4801[(v_l_id_4795 + (8 * v_MWidthC_1 * v_w_id_4794) + (v_MWidthC_1 * v_i_4796))]; \n          if (v_index_4894 < 0) {\n            v__4814_0 = v__4812; \n          } else {\n            if (v_index_4894 >= v_VLength_3) {\n              v__4814_0 = v__4812; \n            } else {\n              v__4814_0 = v__4803[v_index_4894]; \n            }\n          }\n          v__4816_0 = mult(v__4814_0, v__4802[(v_l_id_4795 + (8 * v_MWidthC_1 * v_w_id_4794) + (v_MWidthC_1 * v_i_4796))]); \n          v__4810 = add(v__4816_0, v__4810); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4797 = 0; \n          v__4821[v_l_id_4795] = id(v__4810); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_4798 = get_local_id(0); \n        float v_tmp_4897 = 0.0f; \n        v__2938 = v_tmp_4897; \n        /* reduce_seq */\n        for (int v_i_4799 = 0; v_i_4799 < v_MWidthC_1; v_i_4799 = (1 + v_i_4799)) {\n          v__2938 = add(v__2938, v__4821[(v_i_4799 + (v_MWidthC_1 * v_l_id_4798))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4800 = 0; \n          v__4826[v_w_id_4794] = doubleMultiplyAdd(v__2938, v__4805, v__4804[v_w_id_4794], v__4806); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_4794 = atomic_inc(v_work_idx_235); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__4801",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4802",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4803",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4805",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4806",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4808",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__4826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__4821",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}