{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19047, const global float* restrict v__19048, const global float* restrict v__19049, const global float* restrict v__19050, float v__19051, float v__19052, global int* v__19054, global float* v__19070, global float* v__19060, local float* v__19065, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19056; \n  float v__19061; \n  float v__2938; \n  /* Private Memory */\n  float v__19058_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1579 = v__19054; \n    local int v_w_id_19039; \n    if (get_local_id(0) == 0) {\n      v_w_id_19039 = atomic_inc(v_work_idx_1579); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19039 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1577; \n        v_work_idx_1577 = 0; \n        int v_l_id_19040 = atomic_inc(&(v_work_idx_1577)); \n        while((v_l_id_19040 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_19041 = 0; v_i_19041 < 128; v_i_19041 = (1 + v_i_19041)) {\n            float v_tmp_19121 = 0.0f; \n            v__19056 = v_tmp_19121; \n            int v_index_19122 = v__19047[(v_l_id_19040 + (128 * v_MWidthC_1 * v_w_id_19039) + (v_MWidthC_1 * v_i_19041))]; \n            if (v_index_19122 < 0) {\n              v__19058_0 = v__19056; \n            } else {\n              if (v_index_19122 >= v_VLength_3) {\n                v__19058_0 = v__19056; \n              } else {\n                v__19058_0 = v__19049[v_index_19122]; \n              }\n            }\n            v__19060[(v_i_19041 + (128 * v_MWidthC_1 * v_w_id_19039) + (128 * v_l_id_19040))] = mult(v__19058_0, v__19048[(v_l_id_19040 + (128 * v_MWidthC_1 * v_w_id_19039) + (v_MWidthC_1 * v_i_19041))]); \n          }\n          /* end map_seq */\n          float v_tmp_19123 = 0.0f; \n          v__19061 = v_tmp_19123; \n          /* reduce_seq */\n          for (int v_i_19042 = 0; v_i_19042 < 128; v_i_19042 = (1 + v_i_19042)) {\n            v__19061 = add(v__19061, v__19060[(v_i_19042 + (128 * v_MWidthC_1 * v_w_id_19039) + (128 * v_l_id_19040))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19043 = 0; \n            v__19065[v_l_id_19040] = id(v__19061); \n          }\n          /* end map_seq */\n          v_l_id_19040 = atomic_inc(&(v_work_idx_1577)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1571; \n        v_work_idx_1571 = 0; \n        int v_l_id_19044 = atomic_inc(&(v_work_idx_1571)); \n        while((v_l_id_19044 < 1)){\n          float v_tmp_19126 = 0.0f; \n          v__2938 = v_tmp_19126; \n          /* reduce_seq */\n          for (int v_i_19045 = 0; v_i_19045 < v_MWidthC_1; v_i_19045 = (1 + v_i_19045)) {\n            v__2938 = add(v__2938, v__19065[(v_i_19045 + (v_MWidthC_1 * v_l_id_19044))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19046 = 0; \n            v__19070[v_w_id_19039] = doubleMultiplyAdd(v__2938, v__19051, v__19050[v_w_id_19039], v__19052); \n          }\n          /* end map_seq */\n          v_l_id_19044 = atomic_inc(&(v_work_idx_1571)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19039 = atomic_inc(v_work_idx_1579); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19047",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19048",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19049",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19050",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19051",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19052",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19054",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__19070",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__19060",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__19065",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}