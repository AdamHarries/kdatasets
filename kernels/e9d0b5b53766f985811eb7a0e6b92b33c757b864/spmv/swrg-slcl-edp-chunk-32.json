{
  "name" : "swrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9492, const global float* restrict v__9493, const global float* restrict v__9494, const global float* restrict v__9495, float v__9496, float v__9497, global float* v__9512, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9499; \n  float v__9502; \n  /* Private Memory */\n  float v__9504_0;\n  \n  float v__9506_0;\n  \n  int v__9510_0;\n  \n  for (int v_wg_id_9488 = get_group_id(0); v_wg_id_9488 < ((v_MHeight_2)/(32)); v_wg_id_9488 = (v_wg_id_9488 + get_num_groups(0))) {\n    for (int v_l_id_9489 = get_local_id(0); v_l_id_9489 < 32; v_l_id_9489 = (v_l_id_9489 + get_local_size(0))) {\n      float v_tmp_9560 = 0.0f; \n      v__9499 = v_tmp_9560; \n      /* reduce_while_seq */\n      for (int v_i_9490 = 0; v_i_9490 < v_MWidthC_1; v_i_9490 = (1 + v_i_9490)) {\n        v__9510_0 = check(v__9499, v__9492[(v_i_9490 + (32 * v_MWidthC_1 * v_wg_id_9488) + (v_MWidthC_1 * v_l_id_9489))]); \n        if (v__9510_0) {\n        } else {\n          break;\n        }\n        float v_tmp_9561 = 0.0f; \n        v__9502 = v_tmp_9561; \n        int v_index_9562 = v__9492[(v_i_9490 + (32 * v_MWidthC_1 * v_wg_id_9488) + (v_MWidthC_1 * v_l_id_9489))]; \n        if (v_index_9562 < 0) {\n          v__9504_0 = v__9502; \n        } else {\n          if (v_index_9562 >= v_VLength_3) {\n            v__9504_0 = v__9502; \n          } else {\n            v__9504_0 = v__9494[v_index_9562]; \n          }\n        }\n        v__9506_0 = mult(v__9504_0, v__9493[(v_i_9490 + (32 * v_MWidthC_1 * v_wg_id_9488) + (v_MWidthC_1 * v_l_id_9489))]); \n        v__9499 = add(v__9506_0, v__9499); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9491 = 0; \n        v__9512[(v_l_id_9489 + (32 * v_wg_id_9488))] = doubleMultiplyAdd(v__9499, v__9496, v__9495[(v_l_id_9489 + (32 * v_wg_id_9488))], v__9497); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__9492",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9493",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9494",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9496",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9497",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__9512",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}