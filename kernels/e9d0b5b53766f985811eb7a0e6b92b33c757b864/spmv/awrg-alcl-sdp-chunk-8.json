{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__5218, const global float* restrict v__5219, const global float* restrict v__5220, const global float* restrict v__5221, float v__5222, float v__5223, global int* v__5225, global float* v__5237, global float* v__5231, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__5227; \n  float v__5232; \n  /* Private Memory */\n  float v__5229_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_274 = v__5225; \n    local int v_w_id_5213; \n    if (get_local_id(0) == 0) {\n      v_w_id_5213 = atomic_inc(v_work_idx_274); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_5213 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_272; \n        v_work_idx_272 = 0; \n        int v_l_id_5214 = atomic_inc(&(v_work_idx_272)); \n        while((v_l_id_5214 < 8)){\n          /* map_seq */\n          for (int v_i_5215 = 0; v_i_5215 < v_MWidthC_1; v_i_5215 = (1 + v_i_5215)) {\n            float v_tmp_5275 = 0.0f; \n            v__5227 = v_tmp_5275; \n            int v_index_5276 = v__5218[(v_i_5215 + (8 * v_MWidthC_1 * v_w_id_5213) + (v_MWidthC_1 * v_l_id_5214))]; \n            if (v_index_5276 < 0) {\n              v__5229_0 = v__5227; \n            } else {\n              if (v_index_5276 >= v_VLength_3) {\n                v__5229_0 = v__5227; \n              } else {\n                v__5229_0 = v__5220[v_index_5276]; \n              }\n            }\n            v__5231[(v_i_5215 + (8 * v_MWidthC_1 * v_w_id_5213) + (v_MWidthC_1 * v_l_id_5214))] = mult(v__5229_0, v__5219[(v_i_5215 + (8 * v_MWidthC_1 * v_w_id_5213) + (v_MWidthC_1 * v_l_id_5214))]); \n          }\n          /* end map_seq */\n          float v_tmp_5277 = 0.0f; \n          v__5232 = v_tmp_5277; \n          /* reduce_seq */\n          for (int v_i_5216 = 0; v_i_5216 < v_MWidthC_1; v_i_5216 = (1 + v_i_5216)) {\n            v__5232 = add(v__5232, v__5231[(v_i_5216 + (8 * v_MWidthC_1 * v_w_id_5213) + (v_MWidthC_1 * v_l_id_5214))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5217 = 0; \n            v__5237[(v_l_id_5214 + (8 * v_w_id_5213))] = doubleMultiplyAdd(v__5232, v__5222, v__5221[(v_l_id_5214 + (8 * v_w_id_5213))], v__5223); \n          }\n          /* end map_seq */\n          v_l_id_5214 = atomic_inc(&(v_work_idx_272)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_5213 = atomic_inc(v_work_idx_274); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__5218",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5219",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5220",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__5221",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__5222",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__5223",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__5225",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__5237",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__5231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}