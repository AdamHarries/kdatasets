{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22995, const global float* restrict v__22996, const global float* restrict v__22997, const global float* restrict v__22998, float v__22999, float v__23000, global float* v__23017, local float* v__23012, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23003; \n  float v__23005; \n  float v__2938; \n  /* Private Memory */\n  float v__23007_0;\n  \n  float v__23009_0;\n  \n  for (int v_wg_id_22988 = get_group_id(0); v_wg_id_22988 < v_MHeight_2; v_wg_id_22988 = (v_wg_id_22988 + get_num_groups(0))) {\n    for (int v_l_id_22989 = get_local_id(0); v_l_id_22989 < v_MWidthC_1; v_l_id_22989 = (v_l_id_22989 + get_local_size(0))) {\n      float v_tmp_23082 = 0.0f; \n      v__23003 = v_tmp_23082; \n      /* reduce_seq */\n      for (int v_i_22990 = 0; v_i_22990 < 512; v_i_22990 = (1 + v_i_22990)) {\n        float v_tmp_23083 = 0.0f; \n        v__23005 = v_tmp_23083; \n        int v_index_23084 = v__22995[(v_l_id_22989 + (512 * v_MWidthC_1 * v_wg_id_22988) + (v_MWidthC_1 * v_i_22990))]; \n        if (v_index_23084 < 0) {\n          v__23007_0 = v__23005; \n        } else {\n          if (v_index_23084 >= v_VLength_3) {\n            v__23007_0 = v__23005; \n          } else {\n            v__23007_0 = v__22997[v_index_23084]; \n          }\n        }\n        v__23009_0 = mult(v__23007_0, v__22996[(v_l_id_22989 + (512 * v_MWidthC_1 * v_wg_id_22988) + (v_MWidthC_1 * v_i_22990))]); \n        v__23003 = add(v__23009_0, v__23003); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_22991 = 0; \n        v__23012[v_l_id_22989] = id(v__23003); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_22992 = get_local_id(0); \n      float v_tmp_23087 = 0.0f; \n      v__2938 = v_tmp_23087; \n      /* reduce_seq */\n      for (int v_i_22993 = 0; v_i_22993 < v_MWidthC_1; v_i_22993 = (1 + v_i_22993)) {\n        v__2938 = add(v__2938, v__23012[(v_i_22993 + (v_MWidthC_1 * v_l_id_22992))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_22994 = 0; \n        v__23017[v_wg_id_22988] = doubleMultiplyAdd(v__2938, v__22999, v__22998[v_wg_id_22988], v__23000); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22995",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22996",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22997",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22999",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23000",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23017",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23012",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}