{
  "name" : "swrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7021, const global float* restrict v__7022, const global float* restrict v__7023, const global float* restrict v__7024, float v__7025, float v__7026, global float* v__7041, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7028; \n  float v__7031; \n  /* Private Memory */\n  float v__7033_0;\n  \n  float v__7035_0;\n  \n  int v__7039_0;\n  \n  for (int v_wg_id_7017 = get_group_id(0); v_wg_id_7017 < ((v_MHeight_2)/(16)); v_wg_id_7017 = (v_wg_id_7017 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_440; \n      v_work_idx_440 = 0; \n      int v_l_id_7018 = atomic_inc(&(v_work_idx_440)); \n      while((v_l_id_7018 < 16)){\n        float v_tmp_7085 = 0.0f; \n        v__7028 = v_tmp_7085; \n        /* reduce_while_seq */\n        for (int v_i_7019 = 0; v_i_7019 < v_MWidthC_1; v_i_7019 = (1 + v_i_7019)) {\n          v__7039_0 = check(v__7028, v__7021[(v_i_7019 + (16 * v_MWidthC_1 * v_wg_id_7017) + (v_MWidthC_1 * v_l_id_7018))]); \n          if (v__7039_0) {\n          } else {\n            break;\n          }\n          float v_tmp_7086 = 0.0f; \n          v__7031 = v_tmp_7086; \n          int v_index_7087 = v__7021[(v_i_7019 + (16 * v_MWidthC_1 * v_wg_id_7017) + (v_MWidthC_1 * v_l_id_7018))]; \n          if (v_index_7087 < 0) {\n            v__7033_0 = v__7031; \n          } else {\n            if (v_index_7087 >= v_VLength_3) {\n              v__7033_0 = v__7031; \n            } else {\n              v__7033_0 = v__7023[v_index_7087]; \n            }\n          }\n          v__7035_0 = mult(v__7033_0, v__7022[(v_i_7019 + (16 * v_MWidthC_1 * v_wg_id_7017) + (v_MWidthC_1 * v_l_id_7018))]); \n          v__7028 = add(v__7035_0, v__7028); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7020 = 0; \n          v__7041[(v_l_id_7018 + (16 * v_wg_id_7017))] = doubleMultiplyAdd(v__7028, v__7025, v__7024[(v_l_id_7018 + (16 * v_wg_id_7017))], v__7026); \n        }\n        /* end map_seq */\n        v_l_id_7018 = atomic_inc(&(v_work_idx_440)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__7021",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7023",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7025",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7026",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__7041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}