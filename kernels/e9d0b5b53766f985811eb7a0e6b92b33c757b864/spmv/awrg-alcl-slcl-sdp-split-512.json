{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25406, const global float* restrict v__25407, const global float* restrict v__25408, const global float* restrict v__25409, float v__25410, float v__25411, global int* v__25413, global float* v__25429, global float* v__25419, local float* v__25424, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25415; \n  float v__25420; \n  float v__2938; \n  /* Private Memory */\n  float v__25417_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2171 = v__25413; \n    local int v_w_id_25398; \n    if (get_local_id(0) == 0) {\n      v_w_id_25398 = atomic_inc(v_work_idx_2171); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25398 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2169; \n        v_work_idx_2169 = 0; \n        int v_l_id_25399 = atomic_inc(&(v_work_idx_2169)); \n        while((v_l_id_25399 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_25400 = 0; v_i_25400 < 512; v_i_25400 = (1 + v_i_25400)) {\n            float v_tmp_25484 = 0.0f; \n            v__25415 = v_tmp_25484; \n            int v_index_25485 = v__25406[(v_l_id_25399 + (512 * v_MWidthC_1 * v_w_id_25398) + (v_MWidthC_1 * v_i_25400))]; \n            if (v_index_25485 < 0) {\n              v__25417_0 = v__25415; \n            } else {\n              if (v_index_25485 >= v_VLength_3) {\n                v__25417_0 = v__25415; \n              } else {\n                v__25417_0 = v__25408[v_index_25485]; \n              }\n            }\n            v__25419[(v_i_25400 + (512 * v_MWidthC_1 * v_w_id_25398) + (512 * v_l_id_25399))] = mult(v__25417_0, v__25407[(v_l_id_25399 + (512 * v_MWidthC_1 * v_w_id_25398) + (v_MWidthC_1 * v_i_25400))]); \n          }\n          /* end map_seq */\n          float v_tmp_25486 = 0.0f; \n          v__25420 = v_tmp_25486; \n          /* reduce_seq */\n          for (int v_i_25401 = 0; v_i_25401 < 512; v_i_25401 = (1 + v_i_25401)) {\n            v__25420 = add(v__25420, v__25419[(v_i_25401 + (512 * v_MWidthC_1 * v_w_id_25398) + (512 * v_l_id_25399))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25402 = 0; \n            v__25424[v_l_id_25399] = id(v__25420); \n          }\n          /* end map_seq */\n          v_l_id_25399 = atomic_inc(&(v_work_idx_2169)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25403 = get_local_id(0); \n        float v_tmp_25489 = 0.0f; \n        v__2938 = v_tmp_25489; \n        /* reduce_seq */\n        for (int v_i_25404 = 0; v_i_25404 < v_MWidthC_1; v_i_25404 = (1 + v_i_25404)) {\n          v__2938 = add(v__2938, v__25424[(v_i_25404 + (v_MWidthC_1 * v_l_id_25403))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25405 = 0; \n          v__25429[v_w_id_25398] = doubleMultiplyAdd(v__2938, v__25410, v__25409[v_w_id_25398], v__25411); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25398 = atomic_inc(v_work_idx_2171); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25406",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25407",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25408",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25409",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25410",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25411",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25413",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__25429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__25419",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__25424",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}