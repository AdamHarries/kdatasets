{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7402, const global float* restrict v__7403, const global float* restrict v__7404, const global float* restrict v__7405, float v__7406, float v__7407, global float* v__7424, global float* v__7414, local float* v__7419, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7410; \n  float v__7415; \n  float v__2938; \n  /* Private Memory */\n  float v__7412_0;\n  \n  for (int v_wg_id_7394 = get_group_id(0); v_wg_id_7394 < v_MHeight_2; v_wg_id_7394 = (v_wg_id_7394 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_479; \n      v_work_idx_479 = 0; \n      int v_l_id_7395 = atomic_inc(&(v_work_idx_479)); \n      while((v_l_id_7395 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_7396 = 0; v_i_7396 < 16; v_i_7396 = (1 + v_i_7396)) {\n          float v_tmp_7477 = 0.0f; \n          v__7410 = v_tmp_7477; \n          int v_index_7478 = v__7402[(v_l_id_7395 + (16 * v_MWidthC_1 * v_wg_id_7394) + (v_MWidthC_1 * v_i_7396))]; \n          if (v_index_7478 < 0) {\n            v__7412_0 = v__7410; \n          } else {\n            if (v_index_7478 >= v_VLength_3) {\n              v__7412_0 = v__7410; \n            } else {\n              v__7412_0 = v__7404[v_index_7478]; \n            }\n          }\n          v__7414[(v_i_7396 + (16 * v_MWidthC_1 * v_wg_id_7394) + (16 * v_l_id_7395))] = mult(v__7412_0, v__7403[(v_l_id_7395 + (16 * v_MWidthC_1 * v_wg_id_7394) + (v_MWidthC_1 * v_i_7396))]); \n        }\n        /* end map_seq */\n        float v_tmp_7479 = 0.0f; \n        v__7415 = v_tmp_7479; \n        /* reduce_seq */\n        for (int v_i_7397 = 0; v_i_7397 < 16; v_i_7397 = (1 + v_i_7397)) {\n          v__7415 = add(v__7415, v__7414[(v_i_7397 + (16 * v_MWidthC_1 * v_wg_id_7394) + (16 * v_l_id_7395))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7398 = 0; \n          v__7419[v_l_id_7395] = id(v__7415); \n        }\n        /* end map_seq */\n        v_l_id_7395 = atomic_inc(&(v_work_idx_479)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_473; \n      v_work_idx_473 = 0; \n      int v_l_id_7399 = atomic_inc(&(v_work_idx_473)); \n      while((v_l_id_7399 < 1)){\n        float v_tmp_7482 = 0.0f; \n        v__2938 = v_tmp_7482; \n        /* reduce_seq */\n        for (int v_i_7400 = 0; v_i_7400 < v_MWidthC_1; v_i_7400 = (1 + v_i_7400)) {\n          v__2938 = add(v__2938, v__7419[(v_i_7400 + (v_MWidthC_1 * v_l_id_7399))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7401 = 0; \n          v__7424[v_wg_id_7394] = doubleMultiplyAdd(v__2938, v__7406, v__7405[v_wg_id_7394], v__7407); \n        }\n        /* end map_seq */\n        v_l_id_7399 = atomic_inc(&(v_work_idx_473)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7402",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7403",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7404",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7406",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7407",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__7414",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__7419",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}