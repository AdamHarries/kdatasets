{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25796, const global float* restrict v__25797, const global float* restrict v__25798, const global float* restrict v__25799, float v__25800, float v__25801, global int* v__25803, global float* v__25819, local float* v__25814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25805; \n  float v__25807; \n  float v__2938; \n  /* Private Memory */\n  float v__25809_0;\n  \n  float v__25811_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2214 = v__25803; \n    local int v_w_id_25789; \n    if (get_local_id(0) == 0) {\n      v_w_id_25789 = atomic_inc(v_work_idx_2214); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25789 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2212; \n        v_work_idx_2212 = 0; \n        int v_l_id_25790 = atomic_inc(&(v_work_idx_2212)); \n        while((v_l_id_25790 < v_MWidthC_1)){\n          float v_tmp_25870 = 0.0f; \n          v__25805 = v_tmp_25870; \n          /* reduce_seq */\n          for (int v_i_25791 = 0; v_i_25791 < 512; v_i_25791 = (1 + v_i_25791)) {\n            float v_tmp_25871 = 0.0f; \n            v__25807 = v_tmp_25871; \n            int v_index_25872 = v__25796[(v_l_id_25790 + (512 * v_MWidthC_1 * v_w_id_25789) + (v_MWidthC_1 * v_i_25791))]; \n            if (v_index_25872 < 0) {\n              v__25809_0 = v__25807; \n            } else {\n              if (v_index_25872 >= v_VLength_3) {\n                v__25809_0 = v__25807; \n              } else {\n                v__25809_0 = v__25798[v_index_25872]; \n              }\n            }\n            v__25811_0 = mult(v__25809_0, v__25797[(v_l_id_25790 + (512 * v_MWidthC_1 * v_w_id_25789) + (v_MWidthC_1 * v_i_25791))]); \n            v__25805 = add(v__25811_0, v__25805); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25792 = 0; \n            v__25814[v_l_id_25790] = id(v__25805); \n          }\n          /* end map_seq */\n          v_l_id_25790 = atomic_inc(&(v_work_idx_2212)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2207; \n        v_work_idx_2207 = 0; \n        int v_l_id_25793 = atomic_inc(&(v_work_idx_2207)); \n        while((v_l_id_25793 < 1)){\n          float v_tmp_25875 = 0.0f; \n          v__2938 = v_tmp_25875; \n          /* reduce_seq */\n          for (int v_i_25794 = 0; v_i_25794 < v_MWidthC_1; v_i_25794 = (1 + v_i_25794)) {\n            v__2938 = add(v__2938, v__25814[(v_i_25794 + (v_MWidthC_1 * v_l_id_25793))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25795 = 0; \n            v__25819[v_w_id_25789] = doubleMultiplyAdd(v__2938, v__25800, v__25799[v_w_id_25789], v__25801); \n          }\n          /* end map_seq */\n          v_l_id_25793 = atomic_inc(&(v_work_idx_2207)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25789 = atomic_inc(v_work_idx_2214); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25796",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25797",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25798",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25800",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25801",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25803",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25819",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25814",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}