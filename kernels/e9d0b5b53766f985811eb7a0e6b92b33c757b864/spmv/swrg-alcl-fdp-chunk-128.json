{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16936, const global float* restrict v__16937, const global float* restrict v__16938, const global float* restrict v__16939, float v__16940, float v__16941, global float* v__16954, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16944; \n  float v__16946; \n  /* Private Memory */\n  float v__16948_0;\n  \n  float v__16950_0;\n  \n  for (int v_wg_id_16932 = get_group_id(0); v_wg_id_16932 < ((v_MHeight_2)/(128)); v_wg_id_16932 = (v_wg_id_16932 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1370; \n      v_work_idx_1370 = 0; \n      int v_l_id_16933 = atomic_inc(&(v_work_idx_1370)); \n      while((v_l_id_16933 < 128)){\n        float v_tmp_16992 = 0.0f; \n        v__16944 = v_tmp_16992; \n        /* reduce_seq */\n        for (int v_i_16934 = 0; v_i_16934 < v_MWidthC_1; v_i_16934 = (1 + v_i_16934)) {\n          float v_tmp_16993 = 0.0f; \n          v__16946 = v_tmp_16993; \n          int v_index_16994 = v__16936[(v_i_16934 + (128 * v_MWidthC_1 * v_wg_id_16932) + (v_MWidthC_1 * v_l_id_16933))]; \n          if (v_index_16994 < 0) {\n            v__16948_0 = v__16946; \n          } else {\n            if (v_index_16994 >= v_VLength_3) {\n              v__16948_0 = v__16946; \n            } else {\n              v__16948_0 = v__16938[v_index_16994]; \n            }\n          }\n          v__16950_0 = mult(v__16948_0, v__16937[(v_i_16934 + (128 * v_MWidthC_1 * v_wg_id_16932) + (v_MWidthC_1 * v_l_id_16933))]); \n          v__16944 = add(v__16950_0, v__16944); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16935 = 0; \n          v__16954[(v_l_id_16933 + (128 * v_wg_id_16932))] = doubleMultiplyAdd(v__16944, v__16940, v__16939[(v_l_id_16933 + (128 * v_wg_id_16932))], v__16941); \n        }\n        /* end map_seq */\n        v_l_id_16933 = atomic_inc(&(v_work_idx_1370)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__16936",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16938",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16939",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16940",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16941",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16954",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}