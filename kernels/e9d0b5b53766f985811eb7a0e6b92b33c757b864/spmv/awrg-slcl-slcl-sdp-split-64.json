{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14575, const global float* restrict v__14576, const global float* restrict v__14577, const global float* restrict v__14578, float v__14579, float v__14580, global int* v__14582, global float* v__14598, global float* v__14588, local float* v__14593, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14584; \n  float v__14589; \n  float v__2938; \n  /* Private Memory */\n  float v__14586_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1153 = v__14582; \n    local int v_w_id_14567; \n    if (get_local_id(0) == 0) {\n      v_w_id_14567 = atomic_inc(v_work_idx_1153); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14567 < v_MHeight_2)){\n      for (int v_l_id_14568 = get_local_id(0); v_l_id_14568 < v_MWidthC_1; v_l_id_14568 = (v_l_id_14568 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_14569 = 0; v_i_14569 < 64; v_i_14569 = (1 + v_i_14569)) {\n          float v_tmp_14661 = 0.0f; \n          v__14584 = v_tmp_14661; \n          int v_index_14662 = v__14575[(v_l_id_14568 + (64 * v_MWidthC_1 * v_w_id_14567) + (v_MWidthC_1 * v_i_14569))]; \n          if (v_index_14662 < 0) {\n            v__14586_0 = v__14584; \n          } else {\n            if (v_index_14662 >= v_VLength_3) {\n              v__14586_0 = v__14584; \n            } else {\n              v__14586_0 = v__14577[v_index_14662]; \n            }\n          }\n          v__14588[(v_i_14569 + (64 * v_MWidthC_1 * v_w_id_14567) + (64 * v_l_id_14568))] = mult(v__14586_0, v__14576[(v_l_id_14568 + (64 * v_MWidthC_1 * v_w_id_14567) + (v_MWidthC_1 * v_i_14569))]); \n        }\n        /* end map_seq */\n        float v_tmp_14663 = 0.0f; \n        v__14589 = v_tmp_14663; \n        /* reduce_seq */\n        for (int v_i_14570 = 0; v_i_14570 < 64; v_i_14570 = (1 + v_i_14570)) {\n          v__14589 = add(v__14589, v__14588[(v_i_14570 + (64 * v_MWidthC_1 * v_w_id_14567) + (64 * v_l_id_14568))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14571 = 0; \n          v__14593[v_l_id_14568] = id(v__14589); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14572 = get_local_id(0); \n        float v_tmp_14666 = 0.0f; \n        v__2938 = v_tmp_14666; \n        /* reduce_seq */\n        for (int v_i_14573 = 0; v_i_14573 < v_MWidthC_1; v_i_14573 = (1 + v_i_14573)) {\n          v__2938 = add(v__2938, v__14593[(v_i_14573 + (v_MWidthC_1 * v_l_id_14572))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14574 = 0; \n          v__14598[v_w_id_14567] = doubleMultiplyAdd(v__2938, v__14579, v__14578[v_w_id_14567], v__14580); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14567 = atomic_inc(v_work_idx_1153); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14575",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14576",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14577",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14578",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14579",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14580",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14582",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__14598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__14588",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__14593",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}