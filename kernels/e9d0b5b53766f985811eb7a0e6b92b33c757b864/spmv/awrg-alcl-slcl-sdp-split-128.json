{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18750, const global float* restrict v__18751, const global float* restrict v__18752, const global float* restrict v__18753, float v__18754, float v__18755, global int* v__18757, global float* v__18773, global float* v__18763, local float* v__18768, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18759; \n  float v__18764; \n  float v__2938; \n  /* Private Memory */\n  float v__18761_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1547 = v__18757; \n    local int v_w_id_18742; \n    if (get_local_id(0) == 0) {\n      v_w_id_18742 = atomic_inc(v_work_idx_1547); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18742 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1545; \n        v_work_idx_1545 = 0; \n        int v_l_id_18743 = atomic_inc(&(v_work_idx_1545)); \n        while((v_l_id_18743 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_18744 = 0; v_i_18744 < 128; v_i_18744 = (1 + v_i_18744)) {\n            float v_tmp_18828 = 0.0f; \n            v__18759 = v_tmp_18828; \n            int v_index_18829 = v__18750[(v_l_id_18743 + (128 * v_MWidthC_1 * v_w_id_18742) + (v_MWidthC_1 * v_i_18744))]; \n            if (v_index_18829 < 0) {\n              v__18761_0 = v__18759; \n            } else {\n              if (v_index_18829 >= v_VLength_3) {\n                v__18761_0 = v__18759; \n              } else {\n                v__18761_0 = v__18752[v_index_18829]; \n              }\n            }\n            v__18763[(v_i_18744 + (128 * v_MWidthC_1 * v_w_id_18742) + (128 * v_l_id_18743))] = mult(v__18761_0, v__18751[(v_l_id_18743 + (128 * v_MWidthC_1 * v_w_id_18742) + (v_MWidthC_1 * v_i_18744))]); \n          }\n          /* end map_seq */\n          float v_tmp_18830 = 0.0f; \n          v__18764 = v_tmp_18830; \n          /* reduce_seq */\n          for (int v_i_18745 = 0; v_i_18745 < 128; v_i_18745 = (1 + v_i_18745)) {\n            v__18764 = add(v__18764, v__18763[(v_i_18745 + (128 * v_MWidthC_1 * v_w_id_18742) + (128 * v_l_id_18743))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18746 = 0; \n            v__18768[v_l_id_18743] = id(v__18764); \n          }\n          /* end map_seq */\n          v_l_id_18743 = atomic_inc(&(v_work_idx_1545)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18747 = get_local_id(0); \n        float v_tmp_18833 = 0.0f; \n        v__2938 = v_tmp_18833; \n        /* reduce_seq */\n        for (int v_i_18748 = 0; v_i_18748 < v_MWidthC_1; v_i_18748 = (1 + v_i_18748)) {\n          v__2938 = add(v__2938, v__18768[(v_i_18748 + (v_MWidthC_1 * v_l_id_18747))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18749 = 0; \n          v__18773[v_w_id_18742] = doubleMultiplyAdd(v__2938, v__18754, v__18753[v_w_id_18742], v__18755); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18742 = atomic_inc(v_work_idx_1547); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__18750",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18751",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18752",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18754",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18755",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18757",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__18773",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__18763",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__18768",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}