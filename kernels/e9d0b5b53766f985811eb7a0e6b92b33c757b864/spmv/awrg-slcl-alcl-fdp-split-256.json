{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21653, const global float* restrict v__21654, const global float* restrict v__21655, const global float* restrict v__21656, float v__21657, float v__21658, global int* v__21660, global float* v__21676, local float* v__21671, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21662; \n  float v__21664; \n  float v__2938; \n  /* Private Memory */\n  float v__21666_0;\n  \n  float v__21668_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1816 = v__21660; \n    local int v_w_id_21646; \n    if (get_local_id(0) == 0) {\n      v_w_id_21646 = atomic_inc(v_work_idx_1816); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21646 < v_MHeight_2)){\n      for (int v_l_id_21647 = get_local_id(0); v_l_id_21647 < v_MWidthC_1; v_l_id_21647 = (v_l_id_21647 + get_local_size(0))) {\n        float v_tmp_21735 = 0.0f; \n        v__21662 = v_tmp_21735; \n        /* reduce_seq */\n        for (int v_i_21648 = 0; v_i_21648 < 256; v_i_21648 = (1 + v_i_21648)) {\n          float v_tmp_21736 = 0.0f; \n          v__21664 = v_tmp_21736; \n          int v_index_21737 = v__21653[(v_l_id_21647 + (256 * v_MWidthC_1 * v_w_id_21646) + (v_MWidthC_1 * v_i_21648))]; \n          if (v_index_21737 < 0) {\n            v__21666_0 = v__21664; \n          } else {\n            if (v_index_21737 >= v_VLength_3) {\n              v__21666_0 = v__21664; \n            } else {\n              v__21666_0 = v__21655[v_index_21737]; \n            }\n          }\n          v__21668_0 = mult(v__21666_0, v__21654[(v_l_id_21647 + (256 * v_MWidthC_1 * v_w_id_21646) + (v_MWidthC_1 * v_i_21648))]); \n          v__21662 = add(v__21668_0, v__21662); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21649 = 0; \n          v__21671[v_l_id_21647] = id(v__21662); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1810; \n        v_work_idx_1810 = 0; \n        int v_l_id_21650 = atomic_inc(&(v_work_idx_1810)); \n        while((v_l_id_21650 < 1)){\n          float v_tmp_21740 = 0.0f; \n          v__2938 = v_tmp_21740; \n          /* reduce_seq */\n          for (int v_i_21651 = 0; v_i_21651 < v_MWidthC_1; v_i_21651 = (1 + v_i_21651)) {\n            v__2938 = add(v__2938, v__21671[(v_i_21651 + (v_MWidthC_1 * v_l_id_21650))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21652 = 0; \n            v__21676[v_w_id_21646] = doubleMultiplyAdd(v__2938, v__21657, v__21656[v_w_id_21646], v__21658); \n          }\n          /* end map_seq */\n          v_l_id_21650 = atomic_inc(&(v_work_idx_1810)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21646 = atomic_inc(v_work_idx_1816); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21653",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21654",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21655",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21656",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21657",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21658",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21660",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21671",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}