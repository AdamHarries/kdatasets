{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10824, const global float* restrict v__10825, const global float* restrict v__10826, const global float* restrict v__10827, float v__10828, float v__10829, global float* v__10846, local float* v__10841, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10832; \n  float v__10834; \n  float v__2938; \n  /* Private Memory */\n  float v__10836_0;\n  \n  float v__10838_0;\n  \n  for (int v_wg_id_10817 = get_group_id(0); v_wg_id_10817 < v_MHeight_2; v_wg_id_10817 = (v_wg_id_10817 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_801; \n      v_work_idx_801 = 0; \n      int v_l_id_10818 = atomic_inc(&(v_work_idx_801)); \n      while((v_l_id_10818 < v_MWidthC_1)){\n        float v_tmp_10899 = 0.0f; \n        v__10832 = v_tmp_10899; \n        /* reduce_seq */\n        for (int v_i_10819 = 0; v_i_10819 < 32; v_i_10819 = (1 + v_i_10819)) {\n          float v_tmp_10900 = 0.0f; \n          v__10834 = v_tmp_10900; \n          int v_index_10901 = v__10824[(v_l_id_10818 + (32 * v_MWidthC_1 * v_wg_id_10817) + (v_MWidthC_1 * v_i_10819))]; \n          if (v_index_10901 < 0) {\n            v__10836_0 = v__10834; \n          } else {\n            if (v_index_10901 >= v_VLength_3) {\n              v__10836_0 = v__10834; \n            } else {\n              v__10836_0 = v__10826[v_index_10901]; \n            }\n          }\n          v__10838_0 = mult(v__10836_0, v__10825[(v_l_id_10818 + (32 * v_MWidthC_1 * v_wg_id_10817) + (v_MWidthC_1 * v_i_10819))]); \n          v__10832 = add(v__10838_0, v__10832); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10820 = 0; \n          v__10841[v_l_id_10818] = id(v__10832); \n        }\n        /* end map_seq */\n        v_l_id_10818 = atomic_inc(&(v_work_idx_801)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_796; \n      v_work_idx_796 = 0; \n      int v_l_id_10821 = atomic_inc(&(v_work_idx_796)); \n      while((v_l_id_10821 < 1)){\n        float v_tmp_10904 = 0.0f; \n        v__2938 = v_tmp_10904; \n        /* reduce_seq */\n        for (int v_i_10822 = 0; v_i_10822 < v_MWidthC_1; v_i_10822 = (1 + v_i_10822)) {\n          v__2938 = add(v__2938, v__10841[(v_i_10822 + (v_MWidthC_1 * v_l_id_10821))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10823 = 0; \n          v__10846[v_wg_id_10817] = doubleMultiplyAdd(v__2938, v__10828, v__10827[v_wg_id_10817], v__10829); \n        }\n        /* end map_seq */\n        v_l_id_10821 = atomic_inc(&(v_work_idx_796)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__10824",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10825",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10826",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10827",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10828",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10829",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10846",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10841",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}