{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7590, const global float* restrict v__7591, const global float* restrict v__7592, const global float* restrict v__7593, float v__7594, float v__7595, global float* v__7614, local float* v__7609, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7598; \n  float v__7600; \n  float v__2938; \n  /* Private Memory */\n  float v__7602_0;\n  \n  float v__7604_0;\n  \n  int v__7608_0;\n  \n  for (int v_wg_id_7583 = get_group_id(0); v_wg_id_7583 < v_MHeight_2; v_wg_id_7583 = (v_wg_id_7583 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_499; \n      v_work_idx_499 = 0; \n      int v_l_id_7584 = atomic_inc(&(v_work_idx_499)); \n      while((v_l_id_7584 < v_MWidthC_1)){\n        float v_tmp_7670 = 0.0f; \n        v__7598 = v_tmp_7670; \n        /* reduce_while_seq */\n        for (int v_i_7585 = 0; v_i_7585 < 16; v_i_7585 = (1 + v_i_7585)) {\n          v__7608_0 = check(v__7598, v__7590[(v_l_id_7584 + (16 * v_MWidthC_1 * v_wg_id_7583) + (v_MWidthC_1 * v_i_7585))]); \n          if (v__7608_0) {\n          } else {\n            break;\n          }\n          float v_tmp_7671 = 0.0f; \n          v__7600 = v_tmp_7671; \n          int v_index_7672 = v__7590[(v_l_id_7584 + (16 * v_MWidthC_1 * v_wg_id_7583) + (v_MWidthC_1 * v_i_7585))]; \n          if (v_index_7672 < 0) {\n            v__7602_0 = v__7600; \n          } else {\n            if (v_index_7672 >= v_VLength_3) {\n              v__7602_0 = v__7600; \n            } else {\n              v__7602_0 = v__7592[v_index_7672]; \n            }\n          }\n          v__7604_0 = mult(v__7602_0, v__7591[(v_l_id_7584 + (16 * v_MWidthC_1 * v_wg_id_7583) + (v_MWidthC_1 * v_i_7585))]); \n          v__7598 = add(v__7604_0, v__7598); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7586 = 0; \n          v__7609[v_l_id_7584] = id(v__7598); \n        }\n        /* end map_seq */\n        v_l_id_7584 = atomic_inc(&(v_work_idx_499)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_494; \n      v_work_idx_494 = 0; \n      int v_l_id_7587 = atomic_inc(&(v_work_idx_494)); \n      while((v_l_id_7587 < 1)){\n        float v_tmp_7675 = 0.0f; \n        v__2938 = v_tmp_7675; \n        /* reduce_seq */\n        for (int v_i_7588 = 0; v_i_7588 < v_MWidthC_1; v_i_7588 = (1 + v_i_7588)) {\n          v__2938 = add(v__2938, v__7609[(v_i_7588 + (v_MWidthC_1 * v_l_id_7587))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7589 = 0; \n          v__7614[v_wg_id_7583] = doubleMultiplyAdd(v__2938, v__7594, v__7593[v_wg_id_7583], v__7595); \n        }\n        /* end map_seq */\n        v_l_id_7587 = atomic_inc(&(v_work_idx_494)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__7590",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7591",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7592",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7594",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7595",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__7614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7609",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}