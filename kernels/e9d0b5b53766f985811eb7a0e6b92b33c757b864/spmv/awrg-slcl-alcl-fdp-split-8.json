{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__5013, const global float* restrict v__5014, const global float* restrict v__5015, const global float* restrict v__5016, float v__5017, float v__5018, global int* v__5020, global float* v__5036, local float* v__5031, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__5022; \n  float v__5024; \n  float v__2938; \n  /* Private Memory */\n  float v__5026_0;\n  \n  float v__5028_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_256 = v__5020; \n    local int v_w_id_5006; \n    if (get_local_id(0) == 0) {\n      v_w_id_5006 = atomic_inc(v_work_idx_256); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_5006 < v_MHeight_2)){\n      for (int v_l_id_5007 = get_local_id(0); v_l_id_5007 < v_MWidthC_1; v_l_id_5007 = (v_l_id_5007 + get_local_size(0))) {\n        float v_tmp_5095 = 0.0f; \n        v__5022 = v_tmp_5095; \n        /* reduce_seq */\n        for (int v_i_5008 = 0; v_i_5008 < 8; v_i_5008 = (1 + v_i_5008)) {\n          float v_tmp_5096 = 0.0f; \n          v__5024 = v_tmp_5096; \n          int v_index_5097 = v__5013[(v_l_id_5007 + (8 * v_MWidthC_1 * v_w_id_5006) + (v_MWidthC_1 * v_i_5008))]; \n          if (v_index_5097 < 0) {\n            v__5026_0 = v__5024; \n          } else {\n            if (v_index_5097 >= v_VLength_3) {\n              v__5026_0 = v__5024; \n            } else {\n              v__5026_0 = v__5015[v_index_5097]; \n            }\n          }\n          v__5028_0 = mult(v__5026_0, v__5014[(v_l_id_5007 + (8 * v_MWidthC_1 * v_w_id_5006) + (v_MWidthC_1 * v_i_5008))]); \n          v__5022 = add(v__5028_0, v__5022); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_5009 = 0; \n          v__5031[v_l_id_5007] = id(v__5022); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_250; \n        v_work_idx_250 = 0; \n        int v_l_id_5010 = atomic_inc(&(v_work_idx_250)); \n        while((v_l_id_5010 < 1)){\n          float v_tmp_5100 = 0.0f; \n          v__2938 = v_tmp_5100; \n          /* reduce_seq */\n          for (int v_i_5011 = 0; v_i_5011 < v_MWidthC_1; v_i_5011 = (1 + v_i_5011)) {\n            v__2938 = add(v__2938, v__5031[(v_i_5011 + (v_MWidthC_1 * v_l_id_5010))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5012 = 0; \n            v__5036[v_w_id_5006] = doubleMultiplyAdd(v__2938, v__5017, v__5016[v_w_id_5006], v__5018); \n          }\n          /* end map_seq */\n          v_l_id_5010 = atomic_inc(&(v_work_idx_250)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_5006 = atomic_inc(v_work_idx_256); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__5013",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5014",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5015",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__5016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__5017",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__5018",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__5020",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__5036",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__5031",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}