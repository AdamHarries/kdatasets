{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13229, const global float* restrict v__13230, const global float* restrict v__13231, const global float* restrict v__13232, float v__13233, float v__13234, global float* v__13251, global float* v__13241, local float* v__13246, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13237; \n  float v__13242; \n  float v__2938; \n  /* Private Memory */\n  float v__13239_0;\n  \n  for (int v_wg_id_13221 = get_group_id(0); v_wg_id_13221 < v_MHeight_2; v_wg_id_13221 = (v_wg_id_13221 + get_num_groups(0))) {\n    for (int v_l_id_13222 = get_local_id(0); v_l_id_13222 < v_MWidthC_1; v_l_id_13222 = (v_l_id_13222 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_13223 = 0; v_i_13223 < 64; v_i_13223 = (1 + v_i_13223)) {\n        float v_tmp_13312 = 0.0f; \n        v__13237 = v_tmp_13312; \n        int v_index_13313 = v__13229[(v_l_id_13222 + (64 * v_MWidthC_1 * v_wg_id_13221) + (v_MWidthC_1 * v_i_13223))]; \n        if (v_index_13313 < 0) {\n          v__13239_0 = v__13237; \n        } else {\n          if (v_index_13313 >= v_VLength_3) {\n            v__13239_0 = v__13237; \n          } else {\n            v__13239_0 = v__13231[v_index_13313]; \n          }\n        }\n        v__13241[(v_i_13223 + (64 * v_MWidthC_1 * v_wg_id_13221) + (64 * v_l_id_13222))] = mult(v__13239_0, v__13230[(v_l_id_13222 + (64 * v_MWidthC_1 * v_wg_id_13221) + (v_MWidthC_1 * v_i_13223))]); \n      }\n      /* end map_seq */\n      float v_tmp_13314 = 0.0f; \n      v__13242 = v_tmp_13314; \n      /* reduce_seq */\n      for (int v_i_13224 = 0; v_i_13224 < 64; v_i_13224 = (1 + v_i_13224)) {\n        v__13242 = add(v__13242, v__13241[(v_i_13224 + (64 * v_MWidthC_1 * v_wg_id_13221) + (64 * v_l_id_13222))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13225 = 0; \n        v__13246[v_l_id_13222] = id(v__13242); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1022; \n      v_work_idx_1022 = 0; \n      int v_l_id_13226 = atomic_inc(&(v_work_idx_1022)); \n      while((v_l_id_13226 < 1)){\n        float v_tmp_13317 = 0.0f; \n        v__2938 = v_tmp_13317; \n        /* reduce_seq */\n        for (int v_i_13227 = 0; v_i_13227 < v_MWidthC_1; v_i_13227 = (1 + v_i_13227)) {\n          v__2938 = add(v__2938, v__13246[(v_i_13227 + (v_MWidthC_1 * v_l_id_13226))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13228 = 0; \n          v__13251[v_wg_id_13221] = doubleMultiplyAdd(v__2938, v__13233, v__13232[v_wg_id_13221], v__13234); \n        }\n        /* end map_seq */\n        v_l_id_13226 = atomic_inc(&(v_work_idx_1022)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13229",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13230",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13231",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13232",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13233",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13234",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13251",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__13241",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__13246",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}