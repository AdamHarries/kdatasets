{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24880, const global float* restrict v__24881, const global float* restrict v__24882, const global float* restrict v__24883, float v__24884, float v__24885, global int* v__24887, global float* v__24903, global float* v__24893, local float* v__24898, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24889; \n  float v__24894; \n  float v__2938; \n  /* Private Memory */\n  float v__24891_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2118 = v__24887; \n    local int v_w_id_24872; \n    if (get_local_id(0) == 0) {\n      v_w_id_24872 = atomic_inc(v_work_idx_2118); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24872 < v_MHeight_2)){\n      for (int v_l_id_24873 = get_local_id(0); v_l_id_24873 < v_MWidthC_1; v_l_id_24873 = (v_l_id_24873 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24874 = 0; v_i_24874 < 512; v_i_24874 = (1 + v_i_24874)) {\n          float v_tmp_24962 = 0.0f; \n          v__24889 = v_tmp_24962; \n          int v_index_24963 = v__24880[(v_l_id_24873 + (512 * v_MWidthC_1 * v_w_id_24872) + (v_MWidthC_1 * v_i_24874))]; \n          if (v_index_24963 < 0) {\n            v__24891_0 = v__24889; \n          } else {\n            if (v_index_24963 >= v_VLength_3) {\n              v__24891_0 = v__24889; \n            } else {\n              v__24891_0 = v__24882[v_index_24963]; \n            }\n          }\n          v__24893[(v_i_24874 + (512 * v_MWidthC_1 * v_w_id_24872) + (512 * v_l_id_24873))] = mult(v__24891_0, v__24881[(v_l_id_24873 + (512 * v_MWidthC_1 * v_w_id_24872) + (v_MWidthC_1 * v_i_24874))]); \n        }\n        /* end map_seq */\n        float v_tmp_24964 = 0.0f; \n        v__24894 = v_tmp_24964; \n        /* reduce_seq */\n        for (int v_i_24875 = 0; v_i_24875 < 512; v_i_24875 = (1 + v_i_24875)) {\n          v__24894 = add(v__24894, v__24893[(v_i_24875 + (512 * v_MWidthC_1 * v_w_id_24872) + (512 * v_l_id_24873))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24876 = 0; \n          v__24898[v_l_id_24873] = id(v__24894); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2111; \n        v_work_idx_2111 = 0; \n        int v_l_id_24877 = atomic_inc(&(v_work_idx_2111)); \n        while((v_l_id_24877 < 1)){\n          float v_tmp_24967 = 0.0f; \n          v__2938 = v_tmp_24967; \n          /* reduce_seq */\n          for (int v_i_24878 = 0; v_i_24878 < v_MWidthC_1; v_i_24878 = (1 + v_i_24878)) {\n            v__2938 = add(v__2938, v__24898[(v_i_24878 + (v_MWidthC_1 * v_l_id_24877))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_24879 = 0; \n            v__24903[v_w_id_24872] = doubleMultiplyAdd(v__2938, v__24884, v__24883[v_w_id_24872], v__24885); \n          }\n          /* end map_seq */\n          v_l_id_24877 = atomic_inc(&(v_work_idx_2111)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24872 = atomic_inc(v_work_idx_2118); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24880",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24881",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24882",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24884",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24885",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24887",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__24903",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__24893",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__24898",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}