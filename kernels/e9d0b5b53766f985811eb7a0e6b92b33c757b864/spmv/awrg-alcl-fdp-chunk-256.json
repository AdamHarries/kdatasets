{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21928, const global float* restrict v__21929, const global float* restrict v__21930, const global float* restrict v__21931, float v__21932, float v__21933, global int* v__21935, global float* v__21947, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21937; \n  float v__21939; \n  /* Private Memory */\n  float v__21941_0;\n  \n  float v__21943_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1841 = v__21935; \n    local int v_w_id_21924; \n    if (get_local_id(0) == 0) {\n      v_w_id_21924 = atomic_inc(v_work_idx_1841); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21924 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1839; \n        v_work_idx_1839 = 0; \n        int v_l_id_21925 = atomic_inc(&(v_work_idx_1839)); \n        while((v_l_id_21925 < 256)){\n          float v_tmp_21984 = 0.0f; \n          v__21937 = v_tmp_21984; \n          /* reduce_seq */\n          for (int v_i_21926 = 0; v_i_21926 < v_MWidthC_1; v_i_21926 = (1 + v_i_21926)) {\n            float v_tmp_21985 = 0.0f; \n            v__21939 = v_tmp_21985; \n            int v_index_21986 = v__21928[(v_i_21926 + (256 * v_MWidthC_1 * v_w_id_21924) + (v_MWidthC_1 * v_l_id_21925))]; \n            if (v_index_21986 < 0) {\n              v__21941_0 = v__21939; \n            } else {\n              if (v_index_21986 >= v_VLength_3) {\n                v__21941_0 = v__21939; \n              } else {\n                v__21941_0 = v__21930[v_index_21986]; \n              }\n            }\n            v__21943_0 = mult(v__21941_0, v__21929[(v_i_21926 + (256 * v_MWidthC_1 * v_w_id_21924) + (v_MWidthC_1 * v_l_id_21925))]); \n            v__21937 = add(v__21943_0, v__21937); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21927 = 0; \n            v__21947[(v_l_id_21925 + (256 * v_w_id_21924))] = doubleMultiplyAdd(v__21937, v__21932, v__21931[(v_l_id_21925 + (256 * v_w_id_21924))], v__21933); \n          }\n          /* end map_seq */\n          v_l_id_21925 = atomic_inc(&(v_work_idx_1839)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21924 = atomic_inc(v_work_idx_1841); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21928",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21930",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21931",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21932",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21933",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21935",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}