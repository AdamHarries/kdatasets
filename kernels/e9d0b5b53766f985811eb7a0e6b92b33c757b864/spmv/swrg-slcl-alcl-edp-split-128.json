{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16761, const global float* restrict v__16762, const global float* restrict v__16763, const global float* restrict v__16764, float v__16765, float v__16766, global float* v__16785, local float* v__16780, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16769; \n  float v__16771; \n  float v__2938; \n  /* Private Memory */\n  float v__16773_0;\n  \n  float v__16775_0;\n  \n  int v__16779_0;\n  \n  for (int v_wg_id_16754 = get_group_id(0); v_wg_id_16754 < v_MHeight_2; v_wg_id_16754 = (v_wg_id_16754 + get_num_groups(0))) {\n    for (int v_l_id_16755 = get_local_id(0); v_l_id_16755 < v_MWidthC_1; v_l_id_16755 = (v_l_id_16755 + get_local_size(0))) {\n      float v_tmp_16849 = 0.0f; \n      v__16769 = v_tmp_16849; \n      /* reduce_while_seq */\n      for (int v_i_16756 = 0; v_i_16756 < 128; v_i_16756 = (1 + v_i_16756)) {\n        v__16779_0 = check(v__16769, v__16761[(v_l_id_16755 + (128 * v_MWidthC_1 * v_wg_id_16754) + (v_MWidthC_1 * v_i_16756))]); \n        if (v__16779_0) {\n        } else {\n          break;\n        }\n        float v_tmp_16850 = 0.0f; \n        v__16771 = v_tmp_16850; \n        int v_index_16851 = v__16761[(v_l_id_16755 + (128 * v_MWidthC_1 * v_wg_id_16754) + (v_MWidthC_1 * v_i_16756))]; \n        if (v_index_16851 < 0) {\n          v__16773_0 = v__16771; \n        } else {\n          if (v_index_16851 >= v_VLength_3) {\n            v__16773_0 = v__16771; \n          } else {\n            v__16773_0 = v__16763[v_index_16851]; \n          }\n        }\n        v__16775_0 = mult(v__16773_0, v__16762[(v_l_id_16755 + (128 * v_MWidthC_1 * v_wg_id_16754) + (v_MWidthC_1 * v_i_16756))]); \n        v__16769 = add(v__16775_0, v__16769); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16757 = 0; \n        v__16780[v_l_id_16755] = id(v__16769); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1353; \n      v_work_idx_1353 = 0; \n      int v_l_id_16758 = atomic_inc(&(v_work_idx_1353)); \n      while((v_l_id_16758 < 1)){\n        float v_tmp_16854 = 0.0f; \n        v__2938 = v_tmp_16854; \n        /* reduce_seq */\n        for (int v_i_16759 = 0; v_i_16759 < v_MWidthC_1; v_i_16759 = (1 + v_i_16759)) {\n          v__2938 = add(v__2938, v__16780[(v_i_16759 + (v_MWidthC_1 * v_l_id_16758))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16760 = 0; \n          v__16785[v_wg_id_16754] = doubleMultiplyAdd(v__2938, v__16765, v__16764[v_wg_id_16754], v__16766); \n        }\n        /* end map_seq */\n        v_l_id_16758 = atomic_inc(&(v_work_idx_1353)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__16761",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16762",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16763",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16765",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16766",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16785",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16780",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}