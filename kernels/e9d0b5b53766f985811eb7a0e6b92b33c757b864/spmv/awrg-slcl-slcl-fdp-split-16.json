{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8024, const global float* restrict v__8025, const global float* restrict v__8026, const global float* restrict v__8027, float v__8028, float v__8029, global int* v__8031, global float* v__8047, local float* v__8042, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8033; \n  float v__8035; \n  float v__2938; \n  /* Private Memory */\n  float v__8037_0;\n  \n  float v__8039_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_538 = v__8031; \n    local int v_w_id_8017; \n    if (get_local_id(0) == 0) {\n      v_w_id_8017 = atomic_inc(v_work_idx_538); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8017 < v_MHeight_2)){\n      for (int v_l_id_8018 = get_local_id(0); v_l_id_8018 < v_MWidthC_1; v_l_id_8018 = (v_l_id_8018 + get_local_size(0))) {\n        float v_tmp_8110 = 0.0f; \n        v__8033 = v_tmp_8110; \n        /* reduce_seq */\n        for (int v_i_8019 = 0; v_i_8019 < 16; v_i_8019 = (1 + v_i_8019)) {\n          float v_tmp_8111 = 0.0f; \n          v__8035 = v_tmp_8111; \n          int v_index_8112 = v__8024[(v_l_id_8018 + (16 * v_MWidthC_1 * v_w_id_8017) + (v_MWidthC_1 * v_i_8019))]; \n          if (v_index_8112 < 0) {\n            v__8037_0 = v__8035; \n          } else {\n            if (v_index_8112 >= v_VLength_3) {\n              v__8037_0 = v__8035; \n            } else {\n              v__8037_0 = v__8026[v_index_8112]; \n            }\n          }\n          v__8039_0 = mult(v__8037_0, v__8025[(v_l_id_8018 + (16 * v_MWidthC_1 * v_w_id_8017) + (v_MWidthC_1 * v_i_8019))]); \n          v__8033 = add(v__8039_0, v__8033); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8020 = 0; \n          v__8042[v_l_id_8018] = id(v__8033); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_8021 = get_local_id(0); \n        float v_tmp_8115 = 0.0f; \n        v__2938 = v_tmp_8115; \n        /* reduce_seq */\n        for (int v_i_8022 = 0; v_i_8022 < v_MWidthC_1; v_i_8022 = (1 + v_i_8022)) {\n          v__2938 = add(v__2938, v__8042[(v_i_8022 + (v_MWidthC_1 * v_l_id_8021))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8023 = 0; \n          v__8047[v_w_id_8017] = doubleMultiplyAdd(v__2938, v__8028, v__8027[v_w_id_8017], v__8029); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8017 = atomic_inc(v_work_idx_538); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__8024",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8025",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8026",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8028",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8029",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8031",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8042",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}