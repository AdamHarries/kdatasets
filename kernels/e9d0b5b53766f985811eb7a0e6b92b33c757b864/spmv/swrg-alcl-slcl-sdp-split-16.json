{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7102, const global float* restrict v__7103, const global float* restrict v__7104, const global float* restrict v__7105, float v__7106, float v__7107, global float* v__7124, global float* v__7114, local float* v__7119, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7110; \n  float v__7115; \n  float v__2938; \n  /* Private Memory */\n  float v__7112_0;\n  \n  for (int v_wg_id_7094 = get_group_id(0); v_wg_id_7094 < v_MHeight_2; v_wg_id_7094 = (v_wg_id_7094 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_450; \n      v_work_idx_450 = 0; \n      int v_l_id_7095 = atomic_inc(&(v_work_idx_450)); \n      while((v_l_id_7095 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_7096 = 0; v_i_7096 < 16; v_i_7096 = (1 + v_i_7096)) {\n          float v_tmp_7181 = 0.0f; \n          v__7110 = v_tmp_7181; \n          int v_index_7182 = v__7102[(v_l_id_7095 + (16 * v_MWidthC_1 * v_wg_id_7094) + (v_MWidthC_1 * v_i_7096))]; \n          if (v_index_7182 < 0) {\n            v__7112_0 = v__7110; \n          } else {\n            if (v_index_7182 >= v_VLength_3) {\n              v__7112_0 = v__7110; \n            } else {\n              v__7112_0 = v__7104[v_index_7182]; \n            }\n          }\n          v__7114[(v_i_7096 + (16 * v_MWidthC_1 * v_wg_id_7094) + (16 * v_l_id_7095))] = mult(v__7112_0, v__7103[(v_l_id_7095 + (16 * v_MWidthC_1 * v_wg_id_7094) + (v_MWidthC_1 * v_i_7096))]); \n        }\n        /* end map_seq */\n        float v_tmp_7183 = 0.0f; \n        v__7115 = v_tmp_7183; \n        /* reduce_seq */\n        for (int v_i_7097 = 0; v_i_7097 < 16; v_i_7097 = (1 + v_i_7097)) {\n          v__7115 = add(v__7115, v__7114[(v_i_7097 + (16 * v_MWidthC_1 * v_wg_id_7094) + (16 * v_l_id_7095))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7098 = 0; \n          v__7119[v_l_id_7095] = id(v__7115); \n        }\n        /* end map_seq */\n        v_l_id_7095 = atomic_inc(&(v_work_idx_450)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_7099 = get_local_id(0); \n      float v_tmp_7186 = 0.0f; \n      v__2938 = v_tmp_7186; \n      /* reduce_seq */\n      for (int v_i_7100 = 0; v_i_7100 < v_MWidthC_1; v_i_7100 = (1 + v_i_7100)) {\n        v__2938 = add(v__2938, v__7119[(v_i_7100 + (v_MWidthC_1 * v_l_id_7099))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_7101 = 0; \n        v__7124[v_wg_id_7094] = doubleMultiplyAdd(v__2938, v__7106, v__7105[v_wg_id_7094], v__7107); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7102",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7103",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7104",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7106",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7107",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7124",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__7114",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__7119",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}