{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2495, const global float* restrict v__2496, const global float* restrict v__2497, const global float* restrict v__2498, float v__2499, float v__2500, global int* v__2502, global float* v__2514, global float* v__2508, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2504; \n  float v__2509; \n  /* Private Memory */\n  float v__2506_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_26 = v__2502; \n    local int v_w_id_2491; \n    if (get_local_id(0) == 0) {\n      v_w_id_2491 = atomic_inc(v_work_idx_26); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_2491 < v_MHeight_2)){\n      for (int v_l_id_2492 = get_local_id(0); v_l_id_2492 < v_MWidthC_1; v_l_id_2492 = (v_l_id_2492 + get_local_size(0))) {\n        float v_tmp_2551 = 0.0f; \n        v__2504 = v_tmp_2551; \n        int v_index_2552 = v__2495[(v_l_id_2492 + (v_MWidthC_1 * v_w_id_2491))]; \n        if (v_index_2552 < 0) {\n          v__2506_0 = v__2504; \n        } else {\n          if (v_index_2552 >= v_VLength_3) {\n            v__2506_0 = v__2504; \n          } else {\n            v__2506_0 = v__2497[v_index_2552]; \n          }\n        }\n        v__2508[(v_l_id_2492 + (v_MWidthC_1 * v_w_id_2491))] = mult(v__2506_0, v__2496[(v_l_id_2492 + (v_MWidthC_1 * v_w_id_2491))]); \n      }\n      float v_tmp_2553 = 0.0f; \n      v__2509 = v_tmp_2553; \n      /* reduce_seq */\n      for (int v_i_2493 = 0; v_i_2493 < v_MWidthC_1; v_i_2493 = (1 + v_i_2493)) {\n        v__2509 = add(v__2509, v__2508[(v_i_2493 + (v_MWidthC_1 * v_w_id_2491))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_2494 = 0; \n        v__2514[v_w_id_2491] = doubleMultiplyAdd(v__2509, v__2499, v__2498[v_w_id_2491], v__2500); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_2491 = atomic_inc(v_work_idx_26); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__2495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2496",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2497",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2499",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2500",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__2502",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__2514",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__2508",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}