{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4912, const global float* restrict v__4913, const global float* restrict v__4914, const global float* restrict v__4915, float v__4916, float v__4917, global int* v__4919, global float* v__4935, global float* v__4925, local float* v__4930, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4921; \n  float v__4926; \n  float v__2938; \n  /* Private Memory */\n  float v__4923_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_246 = v__4919; \n    local int v_w_id_4904; \n    if (get_local_id(0) == 0) {\n      v_w_id_4904 = atomic_inc(v_work_idx_246); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4904 < v_MHeight_2)){\n      for (int v_l_id_4905 = get_local_id(0); v_l_id_4905 < v_MWidthC_1; v_l_id_4905 = (v_l_id_4905 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_4906 = 0; v_i_4906 < 8; v_i_4906 = (1 + v_i_4906)) {\n          float v_tmp_4994 = 0.0f; \n          v__4921 = v_tmp_4994; \n          int v_index_4995 = v__4912[(v_l_id_4905 + (8 * v_MWidthC_1 * v_w_id_4904) + (v_MWidthC_1 * v_i_4906))]; \n          if (v_index_4995 < 0) {\n            v__4923_0 = v__4921; \n          } else {\n            if (v_index_4995 >= v_VLength_3) {\n              v__4923_0 = v__4921; \n            } else {\n              v__4923_0 = v__4914[v_index_4995]; \n            }\n          }\n          v__4925[(v_i_4906 + (8 * v_MWidthC_1 * v_w_id_4904) + (8 * v_l_id_4905))] = mult(v__4923_0, v__4913[(v_l_id_4905 + (8 * v_MWidthC_1 * v_w_id_4904) + (v_MWidthC_1 * v_i_4906))]); \n        }\n        /* end map_seq */\n        float v_tmp_4996 = 0.0f; \n        v__4926 = v_tmp_4996; \n        /* reduce_seq */\n        for (int v_i_4907 = 0; v_i_4907 < 8; v_i_4907 = (1 + v_i_4907)) {\n          v__4926 = add(v__4926, v__4925[(v_i_4907 + (8 * v_MWidthC_1 * v_w_id_4904) + (8 * v_l_id_4905))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4908 = 0; \n          v__4930[v_l_id_4905] = id(v__4926); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_239; \n        v_work_idx_239 = 0; \n        int v_l_id_4909 = atomic_inc(&(v_work_idx_239)); \n        while((v_l_id_4909 < 1)){\n          float v_tmp_4999 = 0.0f; \n          v__2938 = v_tmp_4999; \n          /* reduce_seq */\n          for (int v_i_4910 = 0; v_i_4910 < v_MWidthC_1; v_i_4910 = (1 + v_i_4910)) {\n            v__2938 = add(v__2938, v__4930[(v_i_4910 + (v_MWidthC_1 * v_l_id_4909))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_4911 = 0; \n            v__4935[v_w_id_4904] = doubleMultiplyAdd(v__2938, v__4916, v__4915[v_w_id_4904], v__4917); \n          }\n          /* end map_seq */\n          v_l_id_4909 = atomic_inc(&(v_work_idx_239)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_4904 = atomic_inc(v_work_idx_246); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__4912",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4913",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4914",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4915",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4916",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4917",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4919",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__4935",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__4925",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__4930",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}