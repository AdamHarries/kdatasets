{
  "name" : "awrg-alcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__5357, const global float* restrict v__5358, const global float* restrict v__5359, const global float* restrict v__5360, float v__5361, float v__5362, global int* v__5364, global float* v__5378, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__5365; \n  float v__5368; \n  /* Private Memory */\n  float v__5370_0;\n  \n  float v__5372_0;\n  \n  int v__5376_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_288 = v__5364; \n    local int v_w_id_5353; \n    if (get_local_id(0) == 0) {\n      v_w_id_5353 = atomic_inc(v_work_idx_288); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_5353 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_286; \n        v_work_idx_286 = 0; \n        int v_l_id_5354 = atomic_inc(&(v_work_idx_286)); \n        while((v_l_id_5354 < 8)){\n          float v_tmp_5421 = 0.0f; \n          v__5365 = v_tmp_5421; \n          /* reduce_while_seq */\n          for (int v_i_5355 = 0; v_i_5355 < v_MWidthC_1; v_i_5355 = (1 + v_i_5355)) {\n            v__5376_0 = check(v__5365, v__5357[(v_i_5355 + (8 * v_MWidthC_1 * v_w_id_5353) + (v_MWidthC_1 * v_l_id_5354))]); \n            if (v__5376_0) {\n            } else {\n              break;\n            }\n            float v_tmp_5422 = 0.0f; \n            v__5368 = v_tmp_5422; \n            int v_index_5423 = v__5357[(v_i_5355 + (8 * v_MWidthC_1 * v_w_id_5353) + (v_MWidthC_1 * v_l_id_5354))]; \n            if (v_index_5423 < 0) {\n              v__5370_0 = v__5368; \n            } else {\n              if (v_index_5423 >= v_VLength_3) {\n                v__5370_0 = v__5368; \n              } else {\n                v__5370_0 = v__5359[v_index_5423]; \n              }\n            }\n            v__5372_0 = mult(v__5370_0, v__5358[(v_i_5355 + (8 * v_MWidthC_1 * v_w_id_5353) + (v_MWidthC_1 * v_l_id_5354))]); \n            v__5365 = add(v__5372_0, v__5365); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5356 = 0; \n            v__5378[(v_l_id_5354 + (8 * v_w_id_5353))] = doubleMultiplyAdd(v__5365, v__5361, v__5360[(v_l_id_5354 + (8 * v_w_id_5353))], v__5362); \n          }\n          /* end map_seq */\n          v_l_id_5354 = atomic_inc(&(v_work_idx_286)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_5353 = atomic_inc(v_work_idx_288); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__5357",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5358",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5359",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__5360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__5361",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__5362",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__5364",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__5378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}