{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15272, const global float* restrict v__15273, const global float* restrict v__15274, const global float* restrict v__15275, float v__15276, float v__15277, global int* v__15279, global float* v__15291, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15281; \n  float v__15283; \n  /* Private Memory */\n  float v__15285_0;\n  \n  float v__15287_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1217 = v__15279; \n    local int v_w_id_15268; \n    if (get_local_id(0) == 0) {\n      v_w_id_15268 = atomic_inc(v_work_idx_1217); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15268 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1215; \n        v_work_idx_1215 = 0; \n        int v_l_id_15269 = atomic_inc(&(v_work_idx_1215)); \n        while((v_l_id_15269 < 64)){\n          float v_tmp_15328 = 0.0f; \n          v__15281 = v_tmp_15328; \n          /* reduce_seq */\n          for (int v_i_15270 = 0; v_i_15270 < v_MWidthC_1; v_i_15270 = (1 + v_i_15270)) {\n            float v_tmp_15329 = 0.0f; \n            v__15283 = v_tmp_15329; \n            int v_index_15330 = v__15272[(v_i_15270 + (64 * v_MWidthC_1 * v_w_id_15268) + (v_MWidthC_1 * v_l_id_15269))]; \n            if (v_index_15330 < 0) {\n              v__15285_0 = v__15283; \n            } else {\n              if (v_index_15330 >= v_VLength_3) {\n                v__15285_0 = v__15283; \n              } else {\n                v__15285_0 = v__15274[v_index_15330]; \n              }\n            }\n            v__15287_0 = mult(v__15285_0, v__15273[(v_i_15270 + (64 * v_MWidthC_1 * v_w_id_15268) + (v_MWidthC_1 * v_l_id_15269))]); \n            v__15281 = add(v__15287_0, v__15281); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15271 = 0; \n            v__15291[(v_l_id_15269 + (64 * v_w_id_15268))] = doubleMultiplyAdd(v__15281, v__15276, v__15275[(v_l_id_15269 + (64 * v_w_id_15268))], v__15277); \n          }\n          /* end map_seq */\n          v_l_id_15269 = atomic_inc(&(v_work_idx_1215)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15268 = atomic_inc(v_work_idx_1217); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15272",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15274",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15275",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15276",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15277",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15279",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}