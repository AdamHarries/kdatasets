{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18113, const global float* restrict v__18114, const global float* restrict v__18115, const global float* restrict v__18116, float v__18117, float v__18118, global int* v__18120, global float* v__18138, local float* v__18133, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18122; \n  float v__18124; \n  float v__2938; \n  /* Private Memory */\n  float v__18126_0;\n  \n  float v__18128_0;\n  \n  int v__18132_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1483 = v__18120; \n    local int v_w_id_18106; \n    if (get_local_id(0) == 0) {\n      v_w_id_18106 = atomic_inc(v_work_idx_1483); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18106 < v_MHeight_2)){\n      for (int v_l_id_18107 = get_local_id(0); v_l_id_18107 < v_MWidthC_1; v_l_id_18107 = (v_l_id_18107 + get_local_size(0))) {\n        float v_tmp_18204 = 0.0f; \n        v__18122 = v_tmp_18204; \n        /* reduce_while_seq */\n        for (int v_i_18108 = 0; v_i_18108 < 128; v_i_18108 = (1 + v_i_18108)) {\n          v__18132_0 = check(v__18122, v__18113[(v_l_id_18107 + (128 * v_MWidthC_1 * v_w_id_18106) + (v_MWidthC_1 * v_i_18108))]); \n          if (v__18132_0) {\n          } else {\n            break;\n          }\n          float v_tmp_18205 = 0.0f; \n          v__18124 = v_tmp_18205; \n          int v_index_18206 = v__18113[(v_l_id_18107 + (128 * v_MWidthC_1 * v_w_id_18106) + (v_MWidthC_1 * v_i_18108))]; \n          if (v_index_18206 < 0) {\n            v__18126_0 = v__18124; \n          } else {\n            if (v_index_18206 >= v_VLength_3) {\n              v__18126_0 = v__18124; \n            } else {\n              v__18126_0 = v__18115[v_index_18206]; \n            }\n          }\n          v__18128_0 = mult(v__18126_0, v__18114[(v_l_id_18107 + (128 * v_MWidthC_1 * v_w_id_18106) + (v_MWidthC_1 * v_i_18108))]); \n          v__18122 = add(v__18128_0, v__18122); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18109 = 0; \n          v__18133[v_l_id_18107] = id(v__18122); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18110 = get_local_id(0); \n        float v_tmp_18209 = 0.0f; \n        v__2938 = v_tmp_18209; \n        /* reduce_seq */\n        for (int v_i_18111 = 0; v_i_18111 < v_MWidthC_1; v_i_18111 = (1 + v_i_18111)) {\n          v__2938 = add(v__2938, v__18133[(v_i_18111 + (v_MWidthC_1 * v_l_id_18110))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18112 = 0; \n          v__18138[v_w_id_18106] = doubleMultiplyAdd(v__2938, v__18117, v__18116[v_w_id_18106], v__18118); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18106 = atomic_inc(v_work_idx_1483); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__18113",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18114",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18115",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18117",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18118",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18120",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18138",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18133",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}