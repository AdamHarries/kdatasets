{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14896, const global float* restrict v__14897, const global float* restrict v__14898, const global float* restrict v__14899, float v__14900, float v__14901, global int* v__14903, global float* v__14919, global float* v__14909, local float* v__14914, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14905; \n  float v__14910; \n  float v__2938; \n  /* Private Memory */\n  float v__14907_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1182 = v__14903; \n    local int v_w_id_14888; \n    if (get_local_id(0) == 0) {\n      v_w_id_14888 = atomic_inc(v_work_idx_1182); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14888 < v_MHeight_2)){\n      for (int v_l_id_14889 = get_local_id(0); v_l_id_14889 < v_MWidthC_1; v_l_id_14889 = (v_l_id_14889 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_14890 = 0; v_i_14890 < 64; v_i_14890 = (1 + v_i_14890)) {\n          float v_tmp_14978 = 0.0f; \n          v__14905 = v_tmp_14978; \n          int v_index_14979 = v__14896[(v_l_id_14889 + (64 * v_MWidthC_1 * v_w_id_14888) + (v_MWidthC_1 * v_i_14890))]; \n          if (v_index_14979 < 0) {\n            v__14907_0 = v__14905; \n          } else {\n            if (v_index_14979 >= v_VLength_3) {\n              v__14907_0 = v__14905; \n            } else {\n              v__14907_0 = v__14898[v_index_14979]; \n            }\n          }\n          v__14909[(v_i_14890 + (64 * v_MWidthC_1 * v_w_id_14888) + (64 * v_l_id_14889))] = mult(v__14907_0, v__14897[(v_l_id_14889 + (64 * v_MWidthC_1 * v_w_id_14888) + (v_MWidthC_1 * v_i_14890))]); \n        }\n        /* end map_seq */\n        float v_tmp_14980 = 0.0f; \n        v__14910 = v_tmp_14980; \n        /* reduce_seq */\n        for (int v_i_14891 = 0; v_i_14891 < 64; v_i_14891 = (1 + v_i_14891)) {\n          v__14910 = add(v__14910, v__14909[(v_i_14891 + (64 * v_MWidthC_1 * v_w_id_14888) + (64 * v_l_id_14889))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14892 = 0; \n          v__14914[v_l_id_14889] = id(v__14910); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1175; \n        v_work_idx_1175 = 0; \n        int v_l_id_14893 = atomic_inc(&(v_work_idx_1175)); \n        while((v_l_id_14893 < 1)){\n          float v_tmp_14983 = 0.0f; \n          v__2938 = v_tmp_14983; \n          /* reduce_seq */\n          for (int v_i_14894 = 0; v_i_14894 < v_MWidthC_1; v_i_14894 = (1 + v_i_14894)) {\n            v__2938 = add(v__2938, v__14914[(v_i_14894 + (v_MWidthC_1 * v_l_id_14893))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_14895 = 0; \n            v__14919[v_w_id_14888] = doubleMultiplyAdd(v__2938, v__14900, v__14899[v_w_id_14888], v__14901); \n          }\n          /* end map_seq */\n          v_l_id_14893 = atomic_inc(&(v_work_idx_1175)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14888 = atomic_inc(v_work_idx_1182); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14896",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14897",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14898",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14899",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14900",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14901",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14903",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__14919",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__14909",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__14914",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}