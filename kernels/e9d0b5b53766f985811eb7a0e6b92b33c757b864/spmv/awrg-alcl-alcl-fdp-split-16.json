{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9156, const global float* restrict v__9157, const global float* restrict v__9158, const global float* restrict v__9159, float v__9160, float v__9161, global int* v__9163, global float* v__9179, local float* v__9174, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9165; \n  float v__9167; \n  float v__2938; \n  /* Private Memory */\n  float v__9169_0;\n  \n  float v__9171_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_654 = v__9163; \n    local int v_w_id_9149; \n    if (get_local_id(0) == 0) {\n      v_w_id_9149 = atomic_inc(v_work_idx_654); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_9149 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_652; \n        v_work_idx_652 = 0; \n        int v_l_id_9150 = atomic_inc(&(v_work_idx_652)); \n        while((v_l_id_9150 < v_MWidthC_1)){\n          float v_tmp_9230 = 0.0f; \n          v__9165 = v_tmp_9230; \n          /* reduce_seq */\n          for (int v_i_9151 = 0; v_i_9151 < 16; v_i_9151 = (1 + v_i_9151)) {\n            float v_tmp_9231 = 0.0f; \n            v__9167 = v_tmp_9231; \n            int v_index_9232 = v__9156[(v_l_id_9150 + (16 * v_MWidthC_1 * v_w_id_9149) + (v_MWidthC_1 * v_i_9151))]; \n            if (v_index_9232 < 0) {\n              v__9169_0 = v__9167; \n            } else {\n              if (v_index_9232 >= v_VLength_3) {\n                v__9169_0 = v__9167; \n              } else {\n                v__9169_0 = v__9158[v_index_9232]; \n              }\n            }\n            v__9171_0 = mult(v__9169_0, v__9157[(v_l_id_9150 + (16 * v_MWidthC_1 * v_w_id_9149) + (v_MWidthC_1 * v_i_9151))]); \n            v__9165 = add(v__9171_0, v__9165); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9152 = 0; \n            v__9174[v_l_id_9150] = id(v__9165); \n          }\n          /* end map_seq */\n          v_l_id_9150 = atomic_inc(&(v_work_idx_652)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_647; \n        v_work_idx_647 = 0; \n        int v_l_id_9153 = atomic_inc(&(v_work_idx_647)); \n        while((v_l_id_9153 < 1)){\n          float v_tmp_9235 = 0.0f; \n          v__2938 = v_tmp_9235; \n          /* reduce_seq */\n          for (int v_i_9154 = 0; v_i_9154 < v_MWidthC_1; v_i_9154 = (1 + v_i_9154)) {\n            v__2938 = add(v__2938, v__9174[(v_i_9154 + (v_MWidthC_1 * v_l_id_9153))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9155 = 0; \n            v__9179[v_w_id_9149] = doubleMultiplyAdd(v__2938, v__9160, v__9159[v_w_id_9149], v__9161); \n          }\n          /* end map_seq */\n          v_l_id_9153 = atomic_inc(&(v_work_idx_647)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_9149 = atomic_inc(v_work_idx_654); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__9156",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9157",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9158",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9159",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9160",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9161",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9163",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9179",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9174",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}