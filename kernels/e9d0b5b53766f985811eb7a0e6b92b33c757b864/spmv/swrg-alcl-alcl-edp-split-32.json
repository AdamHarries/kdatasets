{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10918, const global float* restrict v__10919, const global float* restrict v__10920, const global float* restrict v__10921, float v__10922, float v__10923, global float* v__10942, local float* v__10937, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10926; \n  float v__10928; \n  float v__2938; \n  /* Private Memory */\n  float v__10930_0;\n  \n  float v__10932_0;\n  \n  int v__10936_0;\n  \n  for (int v_wg_id_10911 = get_group_id(0); v_wg_id_10911 < v_MHeight_2; v_wg_id_10911 = (v_wg_id_10911 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_811; \n      v_work_idx_811 = 0; \n      int v_l_id_10912 = atomic_inc(&(v_work_idx_811)); \n      while((v_l_id_10912 < v_MWidthC_1)){\n        float v_tmp_10998 = 0.0f; \n        v__10926 = v_tmp_10998; \n        /* reduce_while_seq */\n        for (int v_i_10913 = 0; v_i_10913 < 32; v_i_10913 = (1 + v_i_10913)) {\n          v__10936_0 = check(v__10926, v__10918[(v_l_id_10912 + (32 * v_MWidthC_1 * v_wg_id_10911) + (v_MWidthC_1 * v_i_10913))]); \n          if (v__10936_0) {\n          } else {\n            break;\n          }\n          float v_tmp_10999 = 0.0f; \n          v__10928 = v_tmp_10999; \n          int v_index_11000 = v__10918[(v_l_id_10912 + (32 * v_MWidthC_1 * v_wg_id_10911) + (v_MWidthC_1 * v_i_10913))]; \n          if (v_index_11000 < 0) {\n            v__10930_0 = v__10928; \n          } else {\n            if (v_index_11000 >= v_VLength_3) {\n              v__10930_0 = v__10928; \n            } else {\n              v__10930_0 = v__10920[v_index_11000]; \n            }\n          }\n          v__10932_0 = mult(v__10930_0, v__10919[(v_l_id_10912 + (32 * v_MWidthC_1 * v_wg_id_10911) + (v_MWidthC_1 * v_i_10913))]); \n          v__10926 = add(v__10932_0, v__10926); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10914 = 0; \n          v__10937[v_l_id_10912] = id(v__10926); \n        }\n        /* end map_seq */\n        v_l_id_10912 = atomic_inc(&(v_work_idx_811)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_806; \n      v_work_idx_806 = 0; \n      int v_l_id_10915 = atomic_inc(&(v_work_idx_806)); \n      while((v_l_id_10915 < 1)){\n        float v_tmp_11003 = 0.0f; \n        v__2938 = v_tmp_11003; \n        /* reduce_seq */\n        for (int v_i_10916 = 0; v_i_10916 < v_MWidthC_1; v_i_10916 = (1 + v_i_10916)) {\n          v__2938 = add(v__2938, v__10937[(v_i_10916 + (v_MWidthC_1 * v_l_id_10915))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10917 = 0; \n          v__10942[v_wg_id_10911] = doubleMultiplyAdd(v__2938, v__10922, v__10921[v_wg_id_10911], v__10923); \n        }\n        /* end map_seq */\n        v_l_id_10915 = atomic_inc(&(v_work_idx_806)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10918",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10919",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10920",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10921",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10922",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10923",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10937",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}