{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24664, const global float* restrict v__24665, const global float* restrict v__24666, const global float* restrict v__24667, float v__24668, float v__24669, global int* v__24671, global float* v__24687, local float* v__24682, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24673; \n  float v__24675; \n  float v__2938; \n  /* Private Memory */\n  float v__24677_0;\n  \n  float v__24679_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2098 = v__24671; \n    local int v_w_id_24657; \n    if (get_local_id(0) == 0) {\n      v_w_id_24657 = atomic_inc(v_work_idx_2098); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24657 < v_MHeight_2)){\n      for (int v_l_id_24658 = get_local_id(0); v_l_id_24658 < v_MWidthC_1; v_l_id_24658 = (v_l_id_24658 + get_local_size(0))) {\n        float v_tmp_24750 = 0.0f; \n        v__24673 = v_tmp_24750; \n        /* reduce_seq */\n        for (int v_i_24659 = 0; v_i_24659 < 512; v_i_24659 = (1 + v_i_24659)) {\n          float v_tmp_24751 = 0.0f; \n          v__24675 = v_tmp_24751; \n          int v_index_24752 = v__24664[(v_l_id_24658 + (512 * v_MWidthC_1 * v_w_id_24657) + (v_MWidthC_1 * v_i_24659))]; \n          if (v_index_24752 < 0) {\n            v__24677_0 = v__24675; \n          } else {\n            if (v_index_24752 >= v_VLength_3) {\n              v__24677_0 = v__24675; \n            } else {\n              v__24677_0 = v__24666[v_index_24752]; \n            }\n          }\n          v__24679_0 = mult(v__24677_0, v__24665[(v_l_id_24658 + (512 * v_MWidthC_1 * v_w_id_24657) + (v_MWidthC_1 * v_i_24659))]); \n          v__24673 = add(v__24679_0, v__24673); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24660 = 0; \n          v__24682[v_l_id_24658] = id(v__24673); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_24661 = get_local_id(0); \n        float v_tmp_24755 = 0.0f; \n        v__2938 = v_tmp_24755; \n        /* reduce_seq */\n        for (int v_i_24662 = 0; v_i_24662 < v_MWidthC_1; v_i_24662 = (1 + v_i_24662)) {\n          v__2938 = add(v__2938, v__24682[(v_i_24662 + (v_MWidthC_1 * v_l_id_24661))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24663 = 0; \n          v__24687[v_w_id_24657] = doubleMultiplyAdd(v__2938, v__24668, v__24667[v_w_id_24657], v__24669); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24657 = atomic_inc(v_work_idx_2098); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24664",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24665",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24666",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24667",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24668",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24669",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24671",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24682",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}