{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__3449, const global float* restrict v__3450, const global float* restrict v__3451, const global float* restrict v__3452, float v__3453, float v__3454, global float* v__3473, local float* v__3468, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__3457; \n  float v__3459; \n  float v__2938; \n  /* Private Memory */\n  float v__3461_0;\n  \n  float v__3463_0;\n  \n  int v__3467_0;\n  \n  for (int v_wg_id_3442 = get_group_id(0); v_wg_id_3442 < v_MHeight_2; v_wg_id_3442 = (v_wg_id_3442 + get_num_groups(0))) {\n    for (int v_l_id_3443 = get_local_id(0); v_l_id_3443 < v_MWidthC_1; v_l_id_3443 = (v_l_id_3443 + get_local_size(0))) {\n      float v_tmp_3537 = 0.0f; \n      v__3457 = v_tmp_3537; \n      /* reduce_while_seq */\n      for (int v_i_3444 = 0; v_i_3444 < 8; v_i_3444 = (1 + v_i_3444)) {\n        v__3467_0 = check(v__3457, v__3449[(v_l_id_3443 + (8 * v_MWidthC_1 * v_wg_id_3442) + (v_MWidthC_1 * v_i_3444))]); \n        if (v__3467_0) {\n        } else {\n          break;\n        }\n        float v_tmp_3538 = 0.0f; \n        v__3459 = v_tmp_3538; \n        int v_index_3539 = v__3449[(v_l_id_3443 + (8 * v_MWidthC_1 * v_wg_id_3442) + (v_MWidthC_1 * v_i_3444))]; \n        if (v_index_3539 < 0) {\n          v__3461_0 = v__3459; \n        } else {\n          if (v_index_3539 >= v_VLength_3) {\n            v__3461_0 = v__3459; \n          } else {\n            v__3461_0 = v__3451[v_index_3539]; \n          }\n        }\n        v__3463_0 = mult(v__3461_0, v__3450[(v_l_id_3443 + (8 * v_MWidthC_1 * v_wg_id_3442) + (v_MWidthC_1 * v_i_3444))]); \n        v__3457 = add(v__3463_0, v__3457); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_3445 = 0; \n        v__3468[v_l_id_3443] = id(v__3457); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_105; \n      v_work_idx_105 = 0; \n      int v_l_id_3446 = atomic_inc(&(v_work_idx_105)); \n      while((v_l_id_3446 < 1)){\n        float v_tmp_3542 = 0.0f; \n        v__2938 = v_tmp_3542; \n        /* reduce_seq */\n        for (int v_i_3447 = 0; v_i_3447 < v_MWidthC_1; v_i_3447 = (1 + v_i_3447)) {\n          v__2938 = add(v__2938, v__3468[(v_i_3447 + (v_MWidthC_1 * v_l_id_3446))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_3448 = 0; \n          v__3473[v_wg_id_3442] = doubleMultiplyAdd(v__2938, v__3453, v__3452[v_wg_id_3442], v__3454); \n        }\n        /* end map_seq */\n        v_l_id_3446 = atomic_inc(&(v_work_idx_105)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__3449",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3450",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3451",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__3452",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__3453",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__3454",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__3473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__3468",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}