{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8341, const global float* restrict v__8342, const global float* restrict v__8343, const global float* restrict v__8344, float v__8345, float v__8346, global int* v__8348, global float* v__8364, local float* v__8359, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8350; \n  float v__8352; \n  float v__2938; \n  /* Private Memory */\n  float v__8354_0;\n  \n  float v__8356_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_568 = v__8348; \n    local int v_w_id_8334; \n    if (get_local_id(0) == 0) {\n      v_w_id_8334 = atomic_inc(v_work_idx_568); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8334 < v_MHeight_2)){\n      for (int v_l_id_8335 = get_local_id(0); v_l_id_8335 < v_MWidthC_1; v_l_id_8335 = (v_l_id_8335 + get_local_size(0))) {\n        float v_tmp_8423 = 0.0f; \n        v__8350 = v_tmp_8423; \n        /* reduce_seq */\n        for (int v_i_8336 = 0; v_i_8336 < 16; v_i_8336 = (1 + v_i_8336)) {\n          float v_tmp_8424 = 0.0f; \n          v__8352 = v_tmp_8424; \n          int v_index_8425 = v__8341[(v_l_id_8335 + (16 * v_MWidthC_1 * v_w_id_8334) + (v_MWidthC_1 * v_i_8336))]; \n          if (v_index_8425 < 0) {\n            v__8354_0 = v__8352; \n          } else {\n            if (v_index_8425 >= v_VLength_3) {\n              v__8354_0 = v__8352; \n            } else {\n              v__8354_0 = v__8343[v_index_8425]; \n            }\n          }\n          v__8356_0 = mult(v__8354_0, v__8342[(v_l_id_8335 + (16 * v_MWidthC_1 * v_w_id_8334) + (v_MWidthC_1 * v_i_8336))]); \n          v__8350 = add(v__8356_0, v__8350); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8337 = 0; \n          v__8359[v_l_id_8335] = id(v__8350); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_562; \n        v_work_idx_562 = 0; \n        int v_l_id_8338 = atomic_inc(&(v_work_idx_562)); \n        while((v_l_id_8338 < 1)){\n          float v_tmp_8428 = 0.0f; \n          v__2938 = v_tmp_8428; \n          /* reduce_seq */\n          for (int v_i_8339 = 0; v_i_8339 < v_MWidthC_1; v_i_8339 = (1 + v_i_8339)) {\n            v__2938 = add(v__2938, v__8359[(v_i_8339 + (v_MWidthC_1 * v_l_id_8338))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_8340 = 0; \n            v__8364[v_w_id_8334] = doubleMultiplyAdd(v__2938, v__8345, v__8344[v_w_id_8334], v__8346); \n          }\n          /* end map_seq */\n          v_l_id_8338 = atomic_inc(&(v_work_idx_562)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8334 = atomic_inc(v_work_idx_568); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__8341",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8342",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8343",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8345",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8346",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8348",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8359",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}