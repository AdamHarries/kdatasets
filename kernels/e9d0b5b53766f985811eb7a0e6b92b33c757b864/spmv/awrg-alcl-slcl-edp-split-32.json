{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12288, const global float* restrict v__12289, const global float* restrict v__12290, const global float* restrict v__12291, float v__12292, float v__12293, global int* v__12295, global float* v__12313, local float* v__12308, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12297; \n  float v__12299; \n  float v__2938; \n  /* Private Memory */\n  float v__12301_0;\n  \n  float v__12303_0;\n  \n  int v__12307_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_943 = v__12295; \n    local int v_w_id_12281; \n    if (get_local_id(0) == 0) {\n      v_w_id_12281 = atomic_inc(v_work_idx_943); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12281 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_941; \n        v_work_idx_941 = 0; \n        int v_l_id_12282 = atomic_inc(&(v_work_idx_941)); \n        while((v_l_id_12282 < v_MWidthC_1)){\n          float v_tmp_12371 = 0.0f; \n          v__12297 = v_tmp_12371; \n          /* reduce_while_seq */\n          for (int v_i_12283 = 0; v_i_12283 < 32; v_i_12283 = (1 + v_i_12283)) {\n            v__12307_0 = check(v__12297, v__12288[(v_l_id_12282 + (32 * v_MWidthC_1 * v_w_id_12281) + (v_MWidthC_1 * v_i_12283))]); \n            if (v__12307_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12372 = 0.0f; \n            v__12299 = v_tmp_12372; \n            int v_index_12373 = v__12288[(v_l_id_12282 + (32 * v_MWidthC_1 * v_w_id_12281) + (v_MWidthC_1 * v_i_12283))]; \n            if (v_index_12373 < 0) {\n              v__12301_0 = v__12299; \n            } else {\n              if (v_index_12373 >= v_VLength_3) {\n                v__12301_0 = v__12299; \n              } else {\n                v__12301_0 = v__12290[v_index_12373]; \n              }\n            }\n            v__12303_0 = mult(v__12301_0, v__12289[(v_l_id_12282 + (32 * v_MWidthC_1 * v_w_id_12281) + (v_MWidthC_1 * v_i_12283))]); \n            v__12297 = add(v__12303_0, v__12297); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12284 = 0; \n            v__12308[v_l_id_12282] = id(v__12297); \n          }\n          /* end map_seq */\n          v_l_id_12282 = atomic_inc(&(v_work_idx_941)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_12285 = get_local_id(0); \n        float v_tmp_12376 = 0.0f; \n        v__2938 = v_tmp_12376; \n        /* reduce_seq */\n        for (int v_i_12286 = 0; v_i_12286 < v_MWidthC_1; v_i_12286 = (1 + v_i_12286)) {\n          v__2938 = add(v__2938, v__12308[(v_i_12286 + (v_MWidthC_1 * v_l_id_12285))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_12287 = 0; \n          v__12313[v_w_id_12281] = doubleMultiplyAdd(v__2938, v__12292, v__12291[v_w_id_12281], v__12293); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12281 = atomic_inc(v_work_idx_943); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12288",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12289",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12290",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12292",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12293",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12295",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12313",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12308",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}