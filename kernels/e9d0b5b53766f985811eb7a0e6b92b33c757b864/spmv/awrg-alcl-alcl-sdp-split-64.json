{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15719, const global float* restrict v__15720, const global float* restrict v__15721, const global float* restrict v__15722, float v__15723, float v__15724, global int* v__15726, global float* v__15742, global float* v__15732, local float* v__15737, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15728; \n  float v__15733; \n  float v__2938; \n  /* Private Memory */\n  float v__15730_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1267 = v__15726; \n    local int v_w_id_15711; \n    if (get_local_id(0) == 0) {\n      v_w_id_15711 = atomic_inc(v_work_idx_1267); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15711 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1265; \n        v_work_idx_1265 = 0; \n        int v_l_id_15712 = atomic_inc(&(v_work_idx_1265)); \n        while((v_l_id_15712 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15713 = 0; v_i_15713 < 64; v_i_15713 = (1 + v_i_15713)) {\n            float v_tmp_15793 = 0.0f; \n            v__15728 = v_tmp_15793; \n            int v_index_15794 = v__15719[(v_l_id_15712 + (64 * v_MWidthC_1 * v_w_id_15711) + (v_MWidthC_1 * v_i_15713))]; \n            if (v_index_15794 < 0) {\n              v__15730_0 = v__15728; \n            } else {\n              if (v_index_15794 >= v_VLength_3) {\n                v__15730_0 = v__15728; \n              } else {\n                v__15730_0 = v__15721[v_index_15794]; \n              }\n            }\n            v__15732[(v_i_15713 + (64 * v_MWidthC_1 * v_w_id_15711) + (64 * v_l_id_15712))] = mult(v__15730_0, v__15720[(v_l_id_15712 + (64 * v_MWidthC_1 * v_w_id_15711) + (v_MWidthC_1 * v_i_15713))]); \n          }\n          /* end map_seq */\n          float v_tmp_15795 = 0.0f; \n          v__15733 = v_tmp_15795; \n          /* reduce_seq */\n          for (int v_i_15714 = 0; v_i_15714 < 64; v_i_15714 = (1 + v_i_15714)) {\n            v__15733 = add(v__15733, v__15732[(v_i_15714 + (64 * v_MWidthC_1 * v_w_id_15711) + (64 * v_l_id_15712))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15715 = 0; \n            v__15737[v_l_id_15712] = id(v__15733); \n          }\n          /* end map_seq */\n          v_l_id_15712 = atomic_inc(&(v_work_idx_1265)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1259; \n        v_work_idx_1259 = 0; \n        int v_l_id_15716 = atomic_inc(&(v_work_idx_1259)); \n        while((v_l_id_15716 < 1)){\n          float v_tmp_15798 = 0.0f; \n          v__2938 = v_tmp_15798; \n          /* reduce_seq */\n          for (int v_i_15717 = 0; v_i_15717 < v_MWidthC_1; v_i_15717 = (1 + v_i_15717)) {\n            v__2938 = add(v__2938, v__15737[(v_i_15717 + (v_MWidthC_1 * v_l_id_15716))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15718 = 0; \n            v__15742[v_w_id_15711] = doubleMultiplyAdd(v__2938, v__15723, v__15722[v_w_id_15711], v__15724); \n          }\n          /* end map_seq */\n          v_l_id_15716 = atomic_inc(&(v_work_idx_1259)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15711 = atomic_inc(v_work_idx_1267); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15719",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15720",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15721",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15722",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15723",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15724",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15726",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__15742",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__15732",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__15737",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}