{
  "name" : "swrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19403, const global float* restrict v__19404, const global float* restrict v__19405, const global float* restrict v__19406, float v__19407, float v__19408, global float* v__19421, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19411; \n  float v__19413; \n  /* Private Memory */\n  float v__19415_0;\n  \n  float v__19417_0;\n  \n  for (int v_wg_id_19399 = get_group_id(0); v_wg_id_19399 < ((v_MHeight_2)/(256)); v_wg_id_19399 = (v_wg_id_19399 + get_num_groups(0))) {\n    for (int v_l_id_19400 = get_local_id(0); v_l_id_19400 < 256; v_l_id_19400 = (v_l_id_19400 + get_local_size(0))) {\n      float v_tmp_19463 = 0.0f; \n      v__19411 = v_tmp_19463; \n      /* reduce_seq */\n      for (int v_i_19401 = 0; v_i_19401 < v_MWidthC_1; v_i_19401 = (1 + v_i_19401)) {\n        float v_tmp_19464 = 0.0f; \n        v__19413 = v_tmp_19464; \n        int v_index_19465 = v__19403[(v_i_19401 + (256 * v_MWidthC_1 * v_wg_id_19399) + (v_MWidthC_1 * v_l_id_19400))]; \n        if (v_index_19465 < 0) {\n          v__19415_0 = v__19413; \n        } else {\n          if (v_index_19465 >= v_VLength_3) {\n            v__19415_0 = v__19413; \n          } else {\n            v__19415_0 = v__19405[v_index_19465]; \n          }\n        }\n        v__19417_0 = mult(v__19415_0, v__19404[(v_i_19401 + (256 * v_MWidthC_1 * v_wg_id_19399) + (v_MWidthC_1 * v_l_id_19400))]); \n        v__19411 = add(v__19417_0, v__19411); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19402 = 0; \n        v__19421[(v_l_id_19400 + (256 * v_wg_id_19399))] = doubleMultiplyAdd(v__19411, v__19407, v__19406[(v_l_id_19400 + (256 * v_wg_id_19399))], v__19408); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19403",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19404",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19405",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19407",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19408",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19421",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}