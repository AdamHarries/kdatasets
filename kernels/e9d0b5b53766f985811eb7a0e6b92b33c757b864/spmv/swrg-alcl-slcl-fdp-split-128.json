{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17184, const global float* restrict v__17185, const global float* restrict v__17186, const global float* restrict v__17187, float v__17188, float v__17189, global float* v__17206, local float* v__17201, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17192; \n  float v__17194; \n  float v__2938; \n  /* Private Memory */\n  float v__17196_0;\n  \n  float v__17198_0;\n  \n  for (int v_wg_id_17177 = get_group_id(0); v_wg_id_17177 < v_MHeight_2; v_wg_id_17177 = (v_wg_id_17177 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1395; \n      v_work_idx_1395 = 0; \n      int v_l_id_17178 = atomic_inc(&(v_work_idx_1395)); \n      while((v_l_id_17178 < v_MWidthC_1)){\n        float v_tmp_17263 = 0.0f; \n        v__17192 = v_tmp_17263; \n        /* reduce_seq */\n        for (int v_i_17179 = 0; v_i_17179 < 128; v_i_17179 = (1 + v_i_17179)) {\n          float v_tmp_17264 = 0.0f; \n          v__17194 = v_tmp_17264; \n          int v_index_17265 = v__17184[(v_l_id_17178 + (128 * v_MWidthC_1 * v_wg_id_17177) + (v_MWidthC_1 * v_i_17179))]; \n          if (v_index_17265 < 0) {\n            v__17196_0 = v__17194; \n          } else {\n            if (v_index_17265 >= v_VLength_3) {\n              v__17196_0 = v__17194; \n            } else {\n              v__17196_0 = v__17186[v_index_17265]; \n            }\n          }\n          v__17198_0 = mult(v__17196_0, v__17185[(v_l_id_17178 + (128 * v_MWidthC_1 * v_wg_id_17177) + (v_MWidthC_1 * v_i_17179))]); \n          v__17192 = add(v__17198_0, v__17192); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17180 = 0; \n          v__17201[v_l_id_17178] = id(v__17192); \n        }\n        /* end map_seq */\n        v_l_id_17178 = atomic_inc(&(v_work_idx_1395)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_17181 = get_local_id(0); \n      float v_tmp_17268 = 0.0f; \n      v__2938 = v_tmp_17268; \n      /* reduce_seq */\n      for (int v_i_17182 = 0; v_i_17182 < v_MWidthC_1; v_i_17182 = (1 + v_i_17182)) {\n        v__2938 = add(v__2938, v__17201[(v_i_17182 + (v_MWidthC_1 * v_l_id_17181))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_17183 = 0; \n        v__17206[v_wg_id_17177] = doubleMultiplyAdd(v__2938, v__17188, v__17187[v_wg_id_17177], v__17189); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17184",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17185",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17186",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17187",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17188",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17189",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17201",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}