{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22468, const global float* restrict v__22469, const global float* restrict v__22470, const global float* restrict v__22471, float v__22472, float v__22473, global int* v__22475, global float* v__22491, local float* v__22486, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22477; \n  float v__22479; \n  float v__2938; \n  /* Private Memory */\n  float v__22481_0;\n  \n  float v__22483_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1902 = v__22475; \n    local int v_w_id_22461; \n    if (get_local_id(0) == 0) {\n      v_w_id_22461 = atomic_inc(v_work_idx_1902); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22461 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1900; \n        v_work_idx_1900 = 0; \n        int v_l_id_22462 = atomic_inc(&(v_work_idx_1900)); \n        while((v_l_id_22462 < v_MWidthC_1)){\n          float v_tmp_22542 = 0.0f; \n          v__22477 = v_tmp_22542; \n          /* reduce_seq */\n          for (int v_i_22463 = 0; v_i_22463 < 256; v_i_22463 = (1 + v_i_22463)) {\n            float v_tmp_22543 = 0.0f; \n            v__22479 = v_tmp_22543; \n            int v_index_22544 = v__22468[(v_l_id_22462 + (256 * v_MWidthC_1 * v_w_id_22461) + (v_MWidthC_1 * v_i_22463))]; \n            if (v_index_22544 < 0) {\n              v__22481_0 = v__22479; \n            } else {\n              if (v_index_22544 >= v_VLength_3) {\n                v__22481_0 = v__22479; \n              } else {\n                v__22481_0 = v__22470[v_index_22544]; \n              }\n            }\n            v__22483_0 = mult(v__22481_0, v__22469[(v_l_id_22462 + (256 * v_MWidthC_1 * v_w_id_22461) + (v_MWidthC_1 * v_i_22463))]); \n            v__22477 = add(v__22483_0, v__22477); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22464 = 0; \n            v__22486[v_l_id_22462] = id(v__22477); \n          }\n          /* end map_seq */\n          v_l_id_22462 = atomic_inc(&(v_work_idx_1900)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1895; \n        v_work_idx_1895 = 0; \n        int v_l_id_22465 = atomic_inc(&(v_work_idx_1895)); \n        while((v_l_id_22465 < 1)){\n          float v_tmp_22547 = 0.0f; \n          v__2938 = v_tmp_22547; \n          /* reduce_seq */\n          for (int v_i_22466 = 0; v_i_22466 < v_MWidthC_1; v_i_22466 = (1 + v_i_22466)) {\n            v__2938 = add(v__2938, v__22486[(v_i_22466 + (v_MWidthC_1 * v_l_id_22465))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22467 = 0; \n            v__22491[v_w_id_22461] = doubleMultiplyAdd(v__2938, v__22472, v__22471[v_w_id_22461], v__22473); \n          }\n          /* end map_seq */\n          v_l_id_22465 = atomic_inc(&(v_work_idx_1895)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22461 = atomic_inc(v_work_idx_1902); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22468",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22469",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22470",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22472",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22473",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22475",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22491",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22486",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}