{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21754, const global float* restrict v__21755, const global float* restrict v__21756, const global float* restrict v__21757, float v__21758, float v__21759, global int* v__21761, global float* v__21779, local float* v__21774, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21763; \n  float v__21765; \n  float v__2938; \n  /* Private Memory */\n  float v__21767_0;\n  \n  float v__21769_0;\n  \n  int v__21773_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1826 = v__21761; \n    local int v_w_id_21747; \n    if (get_local_id(0) == 0) {\n      v_w_id_21747 = atomic_inc(v_work_idx_1826); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21747 < v_MHeight_2)){\n      for (int v_l_id_21748 = get_local_id(0); v_l_id_21748 < v_MWidthC_1; v_l_id_21748 = (v_l_id_21748 + get_local_size(0))) {\n        float v_tmp_21841 = 0.0f; \n        v__21763 = v_tmp_21841; \n        /* reduce_while_seq */\n        for (int v_i_21749 = 0; v_i_21749 < 256; v_i_21749 = (1 + v_i_21749)) {\n          v__21773_0 = check(v__21763, v__21754[(v_l_id_21748 + (256 * v_MWidthC_1 * v_w_id_21747) + (v_MWidthC_1 * v_i_21749))]); \n          if (v__21773_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21842 = 0.0f; \n          v__21765 = v_tmp_21842; \n          int v_index_21843 = v__21754[(v_l_id_21748 + (256 * v_MWidthC_1 * v_w_id_21747) + (v_MWidthC_1 * v_i_21749))]; \n          if (v_index_21843 < 0) {\n            v__21767_0 = v__21765; \n          } else {\n            if (v_index_21843 >= v_VLength_3) {\n              v__21767_0 = v__21765; \n            } else {\n              v__21767_0 = v__21756[v_index_21843]; \n            }\n          }\n          v__21769_0 = mult(v__21767_0, v__21755[(v_l_id_21748 + (256 * v_MWidthC_1 * v_w_id_21747) + (v_MWidthC_1 * v_i_21749))]); \n          v__21763 = add(v__21769_0, v__21763); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21750 = 0; \n          v__21774[v_l_id_21748] = id(v__21763); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1820; \n        v_work_idx_1820 = 0; \n        int v_l_id_21751 = atomic_inc(&(v_work_idx_1820)); \n        while((v_l_id_21751 < 1)){\n          float v_tmp_21846 = 0.0f; \n          v__2938 = v_tmp_21846; \n          /* reduce_seq */\n          for (int v_i_21752 = 0; v_i_21752 < v_MWidthC_1; v_i_21752 = (1 + v_i_21752)) {\n            v__2938 = add(v__2938, v__21774[(v_i_21752 + (v_MWidthC_1 * v_l_id_21751))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21753 = 0; \n            v__21779[v_w_id_21747] = doubleMultiplyAdd(v__2938, v__21758, v__21757[v_w_id_21747], v__21759); \n          }\n          /* end map_seq */\n          v_l_id_21751 = atomic_inc(&(v_work_idx_1820)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21747 = atomic_inc(v_work_idx_1826); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21754",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21755",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21756",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21758",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21759",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21761",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21774",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}