{
  "name" : "awrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21997, const global float* restrict v__21998, const global float* restrict v__21999, const global float* restrict v__22000, float v__22001, float v__22002, global int* v__22004, global float* v__22018, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22005; \n  float v__22008; \n  /* Private Memory */\n  float v__22010_0;\n  \n  float v__22012_0;\n  \n  int v__22016_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1848 = v__22004; \n    local int v_w_id_21993; \n    if (get_local_id(0) == 0) {\n      v_w_id_21993 = atomic_inc(v_work_idx_1848); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21993 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1846; \n        v_work_idx_1846 = 0; \n        int v_l_id_21994 = atomic_inc(&(v_work_idx_1846)); \n        while((v_l_id_21994 < 256)){\n          float v_tmp_22061 = 0.0f; \n          v__22005 = v_tmp_22061; \n          /* reduce_while_seq */\n          for (int v_i_21995 = 0; v_i_21995 < v_MWidthC_1; v_i_21995 = (1 + v_i_21995)) {\n            v__22016_0 = check(v__22005, v__21997[(v_i_21995 + (256 * v_MWidthC_1 * v_w_id_21993) + (v_MWidthC_1 * v_l_id_21994))]); \n            if (v__22016_0) {\n            } else {\n              break;\n            }\n            float v_tmp_22062 = 0.0f; \n            v__22008 = v_tmp_22062; \n            int v_index_22063 = v__21997[(v_i_21995 + (256 * v_MWidthC_1 * v_w_id_21993) + (v_MWidthC_1 * v_l_id_21994))]; \n            if (v_index_22063 < 0) {\n              v__22010_0 = v__22008; \n            } else {\n              if (v_index_22063 >= v_VLength_3) {\n                v__22010_0 = v__22008; \n              } else {\n                v__22010_0 = v__21999[v_index_22063]; \n              }\n            }\n            v__22012_0 = mult(v__22010_0, v__21998[(v_i_21995 + (256 * v_MWidthC_1 * v_w_id_21993) + (v_MWidthC_1 * v_l_id_21994))]); \n            v__22005 = add(v__22012_0, v__22005); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21996 = 0; \n            v__22018[(v_l_id_21994 + (256 * v_w_id_21993))] = doubleMultiplyAdd(v__22005, v__22001, v__22000[(v_l_id_21994 + (256 * v_w_id_21993))], v__22002); \n          }\n          /* end map_seq */\n          v_l_id_21994 = atomic_inc(&(v_work_idx_1846)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21993 = atomic_inc(v_work_idx_1848); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21997",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21999",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22001",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22002",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22004",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}