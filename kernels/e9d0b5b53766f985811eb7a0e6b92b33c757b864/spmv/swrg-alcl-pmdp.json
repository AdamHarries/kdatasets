{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2564, const global float* restrict v__2565, const global float* restrict v__2566, const global float* restrict v__2567, float v__2568, float v__2569, global float* v__2582, global float* v__2576, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2572; \n  float v__2577; \n  /* Private Memory */\n  float v__2574_0;\n  \n  for (int v_wg_id_2560 = get_group_id(0); v_wg_id_2560 < v_MHeight_2; v_wg_id_2560 = (v_wg_id_2560 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_32; \n      v_l_id_32 = 0; \n      int v_l_id_2561 = atomic_inc(&(v_l_id_32)); \n      while((v_l_id_2561 < v_MWidthC_1)){\n        float v_tmp_2613 = 0.0f; \n        v__2572 = v_tmp_2613; \n        int v_index_2614 = v__2564[(v_l_id_2561 + (v_MWidthC_1 * v_wg_id_2560))]; \n        if (v_index_2614 < 0) {\n          v__2574_0 = v__2572; \n        } else {\n          if (v_index_2614 >= v_VLength_3) {\n            v__2574_0 = v__2572; \n          } else {\n            v__2574_0 = v__2566[v_index_2614]; \n          }\n        }\n        v__2576[(v_l_id_2561 + (v_MWidthC_1 * v_wg_id_2560))] = mult(v__2574_0, v__2565[(v_l_id_2561 + (v_MWidthC_1 * v_wg_id_2560))]); \n        v_l_id_2561 = atomic_inc(&(v_l_id_32)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_2615 = 0.0f; \n    v__2577 = v_tmp_2615; \n    /* reduce_seq */\n    for (int v_i_2562 = 0; v_i_2562 < v_MWidthC_1; v_i_2562 = (1 + v_i_2562)) {\n      v__2577 = add(v__2577, v__2576[(v_i_2562 + (v_MWidthC_1 * v_wg_id_2560))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_2563 = 0; \n      v__2582[v_wg_id_2560] = doubleMultiplyAdd(v__2577, v__2568, v__2567[v_wg_id_2560], v__2569); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__2564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2565",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2566",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2567",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2568",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2569",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__2582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__2576",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}