{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25703, const global float* restrict v__25704, const global float* restrict v__25705, const global float* restrict v__25706, float v__25707, float v__25708, global int* v__25710, global float* v__25726, global float* v__25716, local float* v__25721, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25712; \n  float v__25717; \n  float v__2938; \n  /* Private Memory */\n  float v__25714_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2203 = v__25710; \n    local int v_w_id_25695; \n    if (get_local_id(0) == 0) {\n      v_w_id_25695 = atomic_inc(v_work_idx_2203); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25695 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2201; \n        v_work_idx_2201 = 0; \n        int v_l_id_25696 = atomic_inc(&(v_work_idx_2201)); \n        while((v_l_id_25696 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_25697 = 0; v_i_25697 < 512; v_i_25697 = (1 + v_i_25697)) {\n            float v_tmp_25777 = 0.0f; \n            v__25712 = v_tmp_25777; \n            int v_index_25778 = v__25703[(v_l_id_25696 + (512 * v_MWidthC_1 * v_w_id_25695) + (v_MWidthC_1 * v_i_25697))]; \n            if (v_index_25778 < 0) {\n              v__25714_0 = v__25712; \n            } else {\n              if (v_index_25778 >= v_VLength_3) {\n                v__25714_0 = v__25712; \n              } else {\n                v__25714_0 = v__25705[v_index_25778]; \n              }\n            }\n            v__25716[(v_i_25697 + (512 * v_MWidthC_1 * v_w_id_25695) + (512 * v_l_id_25696))] = mult(v__25714_0, v__25704[(v_l_id_25696 + (512 * v_MWidthC_1 * v_w_id_25695) + (v_MWidthC_1 * v_i_25697))]); \n          }\n          /* end map_seq */\n          float v_tmp_25779 = 0.0f; \n          v__25717 = v_tmp_25779; \n          /* reduce_seq */\n          for (int v_i_25698 = 0; v_i_25698 < 512; v_i_25698 = (1 + v_i_25698)) {\n            v__25717 = add(v__25717, v__25716[(v_i_25698 + (512 * v_MWidthC_1 * v_w_id_25695) + (512 * v_l_id_25696))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25699 = 0; \n            v__25721[v_l_id_25696] = id(v__25717); \n          }\n          /* end map_seq */\n          v_l_id_25696 = atomic_inc(&(v_work_idx_2201)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2195; \n        v_work_idx_2195 = 0; \n        int v_l_id_25700 = atomic_inc(&(v_work_idx_2195)); \n        while((v_l_id_25700 < 1)){\n          float v_tmp_25782 = 0.0f; \n          v__2938 = v_tmp_25782; \n          /* reduce_seq */\n          for (int v_i_25701 = 0; v_i_25701 < v_MWidthC_1; v_i_25701 = (1 + v_i_25701)) {\n            v__2938 = add(v__2938, v__25721[(v_i_25701 + (v_MWidthC_1 * v_l_id_25700))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25702 = 0; \n            v__25726[v_w_id_25695] = doubleMultiplyAdd(v__2938, v__25707, v__25706[v_w_id_25695], v__25708); \n          }\n          /* end map_seq */\n          v_l_id_25700 = atomic_inc(&(v_work_idx_2195)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25695 = atomic_inc(v_work_idx_2203); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25703",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25704",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25705",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25707",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25708",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25710",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__25726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__25716",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__25721",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}