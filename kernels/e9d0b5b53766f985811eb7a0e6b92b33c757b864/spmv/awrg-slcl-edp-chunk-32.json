{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11162, const global float* restrict v__11163, const global float* restrict v__11164, const global float* restrict v__11165, float v__11166, float v__11167, global int* v__11169, global float* v__11183, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11170; \n  float v__11173; \n  /* Private Memory */\n  float v__11175_0;\n  \n  float v__11177_0;\n  \n  int v__11181_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_831 = v__11169; \n    local int v_w_id_11158; \n    if (get_local_id(0) == 0) {\n      v_w_id_11158 = atomic_inc(v_work_idx_831); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11158 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_11159 = get_local_id(0); v_l_id_11159 < 32; v_l_id_11159 = (v_l_id_11159 + get_local_size(0))) {\n        float v_tmp_11230 = 0.0f; \n        v__11170 = v_tmp_11230; \n        /* reduce_while_seq */\n        for (int v_i_11160 = 0; v_i_11160 < v_MWidthC_1; v_i_11160 = (1 + v_i_11160)) {\n          v__11181_0 = check(v__11170, v__11162[(v_i_11160 + (32 * v_MWidthC_1 * v_w_id_11158) + (v_MWidthC_1 * v_l_id_11159))]); \n          if (v__11181_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11231 = 0.0f; \n          v__11173 = v_tmp_11231; \n          int v_index_11232 = v__11162[(v_i_11160 + (32 * v_MWidthC_1 * v_w_id_11158) + (v_MWidthC_1 * v_l_id_11159))]; \n          if (v_index_11232 < 0) {\n            v__11175_0 = v__11173; \n          } else {\n            if (v_index_11232 >= v_VLength_3) {\n              v__11175_0 = v__11173; \n            } else {\n              v__11175_0 = v__11164[v_index_11232]; \n            }\n          }\n          v__11177_0 = mult(v__11175_0, v__11163[(v_i_11160 + (32 * v_MWidthC_1 * v_w_id_11158) + (v_MWidthC_1 * v_l_id_11159))]); \n          v__11170 = add(v__11177_0, v__11170); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11161 = 0; \n          v__11183[(v_l_id_11159 + (32 * v_w_id_11158))] = doubleMultiplyAdd(v__11170, v__11166, v__11165[(v_l_id_11159 + (32 * v_w_id_11158))], v__11167); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_11158 = atomic_inc(v_work_idx_831); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__11162",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11163",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11164",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11165",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11166",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11167",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11169",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}