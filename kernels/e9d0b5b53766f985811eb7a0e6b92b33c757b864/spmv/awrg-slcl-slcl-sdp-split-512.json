{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24559, const global float* restrict v__24560, const global float* restrict v__24561, const global float* restrict v__24562, float v__24563, float v__24564, global int* v__24566, global float* v__24582, global float* v__24572, local float* v__24577, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24568; \n  float v__24573; \n  float v__2938; \n  /* Private Memory */\n  float v__24570_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2089 = v__24566; \n    local int v_w_id_24551; \n    if (get_local_id(0) == 0) {\n      v_w_id_24551 = atomic_inc(v_work_idx_2089); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24551 < v_MHeight_2)){\n      for (int v_l_id_24552 = get_local_id(0); v_l_id_24552 < v_MWidthC_1; v_l_id_24552 = (v_l_id_24552 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24553 = 0; v_i_24553 < 512; v_i_24553 = (1 + v_i_24553)) {\n          float v_tmp_24645 = 0.0f; \n          v__24568 = v_tmp_24645; \n          int v_index_24646 = v__24559[(v_l_id_24552 + (512 * v_MWidthC_1 * v_w_id_24551) + (v_MWidthC_1 * v_i_24553))]; \n          if (v_index_24646 < 0) {\n            v__24570_0 = v__24568; \n          } else {\n            if (v_index_24646 >= v_VLength_3) {\n              v__24570_0 = v__24568; \n            } else {\n              v__24570_0 = v__24561[v_index_24646]; \n            }\n          }\n          v__24572[(v_i_24553 + (512 * v_MWidthC_1 * v_w_id_24551) + (512 * v_l_id_24552))] = mult(v__24570_0, v__24560[(v_l_id_24552 + (512 * v_MWidthC_1 * v_w_id_24551) + (v_MWidthC_1 * v_i_24553))]); \n        }\n        /* end map_seq */\n        float v_tmp_24647 = 0.0f; \n        v__24573 = v_tmp_24647; \n        /* reduce_seq */\n        for (int v_i_24554 = 0; v_i_24554 < 512; v_i_24554 = (1 + v_i_24554)) {\n          v__24573 = add(v__24573, v__24572[(v_i_24554 + (512 * v_MWidthC_1 * v_w_id_24551) + (512 * v_l_id_24552))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24555 = 0; \n          v__24577[v_l_id_24552] = id(v__24573); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_24556 = get_local_id(0); \n        float v_tmp_24650 = 0.0f; \n        v__2938 = v_tmp_24650; \n        /* reduce_seq */\n        for (int v_i_24557 = 0; v_i_24557 < v_MWidthC_1; v_i_24557 = (1 + v_i_24557)) {\n          v__2938 = add(v__2938, v__24577[(v_i_24557 + (v_MWidthC_1 * v_l_id_24556))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24558 = 0; \n          v__24582[v_w_id_24551] = doubleMultiplyAdd(v__2938, v__24563, v__24562[v_w_id_24551], v__24564); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24551 = atomic_inc(v_work_idx_2089); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24559",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24560",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24561",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24563",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24564",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24566",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__24582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__24572",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__24577",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}