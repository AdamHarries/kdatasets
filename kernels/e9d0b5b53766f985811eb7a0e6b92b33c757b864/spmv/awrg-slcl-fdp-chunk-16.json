{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7761, const global float* restrict v__7762, const global float* restrict v__7763, const global float* restrict v__7764, float v__7765, float v__7766, global int* v__7768, global float* v__7780, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7770; \n  float v__7772; \n  /* Private Memory */\n  float v__7774_0;\n  \n  float v__7776_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_513 = v__7768; \n    local int v_w_id_7757; \n    if (get_local_id(0) == 0) {\n      v_w_id_7757 = atomic_inc(v_work_idx_513); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_7757 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_7758 = get_local_id(0); v_l_id_7758 < 16; v_l_id_7758 = (v_l_id_7758 + get_local_size(0))) {\n        float v_tmp_7821 = 0.0f; \n        v__7770 = v_tmp_7821; \n        /* reduce_seq */\n        for (int v_i_7759 = 0; v_i_7759 < v_MWidthC_1; v_i_7759 = (1 + v_i_7759)) {\n          float v_tmp_7822 = 0.0f; \n          v__7772 = v_tmp_7822; \n          int v_index_7823 = v__7761[(v_i_7759 + (16 * v_MWidthC_1 * v_w_id_7757) + (v_MWidthC_1 * v_l_id_7758))]; \n          if (v_index_7823 < 0) {\n            v__7774_0 = v__7772; \n          } else {\n            if (v_index_7823 >= v_VLength_3) {\n              v__7774_0 = v__7772; \n            } else {\n              v__7774_0 = v__7763[v_index_7823]; \n            }\n          }\n          v__7776_0 = mult(v__7774_0, v__7762[(v_i_7759 + (16 * v_MWidthC_1 * v_w_id_7757) + (v_MWidthC_1 * v_l_id_7758))]); \n          v__7770 = add(v__7776_0, v__7770); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7760 = 0; \n          v__7780[(v_l_id_7758 + (16 * v_w_id_7757))] = doubleMultiplyAdd(v__7770, v__7765, v__7764[(v_l_id_7758 + (16 * v_w_id_7757))], v__7766); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_7757 = atomic_inc(v_work_idx_513); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__7761",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7762",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7763",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7765",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7766",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7768",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__7780",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}