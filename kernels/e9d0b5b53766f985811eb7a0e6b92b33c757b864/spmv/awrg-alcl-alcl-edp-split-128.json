{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19233, const global float* restrict v__19234, const global float* restrict v__19235, const global float* restrict v__19236, float v__19237, float v__19238, global int* v__19240, global float* v__19258, local float* v__19253, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19242; \n  float v__19244; \n  float v__2938; \n  /* Private Memory */\n  float v__19246_0;\n  \n  float v__19248_0;\n  \n  int v__19252_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1601 = v__19240; \n    local int v_w_id_19226; \n    if (get_local_id(0) == 0) {\n      v_w_id_19226 = atomic_inc(v_work_idx_1601); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19226 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1599; \n        v_work_idx_1599 = 0; \n        int v_l_id_19227 = atomic_inc(&(v_work_idx_1599)); \n        while((v_l_id_19227 < v_MWidthC_1)){\n          float v_tmp_19312 = 0.0f; \n          v__19242 = v_tmp_19312; \n          /* reduce_while_seq */\n          for (int v_i_19228 = 0; v_i_19228 < 128; v_i_19228 = (1 + v_i_19228)) {\n            v__19252_0 = check(v__19242, v__19233[(v_l_id_19227 + (128 * v_MWidthC_1 * v_w_id_19226) + (v_MWidthC_1 * v_i_19228))]); \n            if (v__19252_0) {\n            } else {\n              break;\n            }\n            float v_tmp_19313 = 0.0f; \n            v__19244 = v_tmp_19313; \n            int v_index_19314 = v__19233[(v_l_id_19227 + (128 * v_MWidthC_1 * v_w_id_19226) + (v_MWidthC_1 * v_i_19228))]; \n            if (v_index_19314 < 0) {\n              v__19246_0 = v__19244; \n            } else {\n              if (v_index_19314 >= v_VLength_3) {\n                v__19246_0 = v__19244; \n              } else {\n                v__19246_0 = v__19235[v_index_19314]; \n              }\n            }\n            v__19248_0 = mult(v__19246_0, v__19234[(v_l_id_19227 + (128 * v_MWidthC_1 * v_w_id_19226) + (v_MWidthC_1 * v_i_19228))]); \n            v__19242 = add(v__19248_0, v__19242); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19229 = 0; \n            v__19253[v_l_id_19227] = id(v__19242); \n          }\n          /* end map_seq */\n          v_l_id_19227 = atomic_inc(&(v_work_idx_1599)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1594; \n        v_work_idx_1594 = 0; \n        int v_l_id_19230 = atomic_inc(&(v_work_idx_1594)); \n        while((v_l_id_19230 < 1)){\n          float v_tmp_19317 = 0.0f; \n          v__2938 = v_tmp_19317; \n          /* reduce_seq */\n          for (int v_i_19231 = 0; v_i_19231 < v_MWidthC_1; v_i_19231 = (1 + v_i_19231)) {\n            v__2938 = add(v__2938, v__19253[(v_i_19231 + (v_MWidthC_1 * v_l_id_19230))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19232 = 0; \n            v__19258[v_w_id_19226] = doubleMultiplyAdd(v__2938, v__19237, v__19236[v_w_id_19226], v__19238); \n          }\n          /* end map_seq */\n          v_l_id_19230 = atomic_inc(&(v_work_idx_1594)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19226 = atomic_inc(v_work_idx_1601); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19233",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19234",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19235",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19237",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19238",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19240",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19258",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19253",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}