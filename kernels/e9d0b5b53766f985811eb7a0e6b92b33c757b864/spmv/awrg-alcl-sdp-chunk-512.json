{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25186, const global float* restrict v__25187, const global float* restrict v__25188, const global float* restrict v__25189, float v__25190, float v__25191, global int* v__25193, global float* v__25205, global float* v__25199, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25195; \n  float v__25200; \n  /* Private Memory */\n  float v__25197_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2146 = v__25193; \n    local int v_w_id_25181; \n    if (get_local_id(0) == 0) {\n      v_w_id_25181 = atomic_inc(v_work_idx_2146); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25181 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2144; \n        v_work_idx_2144 = 0; \n        int v_l_id_25182 = atomic_inc(&(v_work_idx_2144)); \n        while((v_l_id_25182 < 512)){\n          /* map_seq */\n          for (int v_i_25183 = 0; v_i_25183 < v_MWidthC_1; v_i_25183 = (1 + v_i_25183)) {\n            float v_tmp_25243 = 0.0f; \n            v__25195 = v_tmp_25243; \n            int v_index_25244 = v__25186[(v_i_25183 + (512 * v_MWidthC_1 * v_w_id_25181) + (v_MWidthC_1 * v_l_id_25182))]; \n            if (v_index_25244 < 0) {\n              v__25197_0 = v__25195; \n            } else {\n              if (v_index_25244 >= v_VLength_3) {\n                v__25197_0 = v__25195; \n              } else {\n                v__25197_0 = v__25188[v_index_25244]; \n              }\n            }\n            v__25199[(v_i_25183 + (512 * v_MWidthC_1 * v_w_id_25181) + (v_MWidthC_1 * v_l_id_25182))] = mult(v__25197_0, v__25187[(v_i_25183 + (512 * v_MWidthC_1 * v_w_id_25181) + (v_MWidthC_1 * v_l_id_25182))]); \n          }\n          /* end map_seq */\n          float v_tmp_25245 = 0.0f; \n          v__25200 = v_tmp_25245; \n          /* reduce_seq */\n          for (int v_i_25184 = 0; v_i_25184 < v_MWidthC_1; v_i_25184 = (1 + v_i_25184)) {\n            v__25200 = add(v__25200, v__25199[(v_i_25184 + (512 * v_MWidthC_1 * v_w_id_25181) + (v_MWidthC_1 * v_l_id_25182))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25185 = 0; \n            v__25205[(v_l_id_25182 + (512 * v_w_id_25181))] = doubleMultiplyAdd(v__25200, v__25190, v__25189[(v_l_id_25182 + (512 * v_w_id_25181))], v__25191); \n          }\n          /* end map_seq */\n          v_l_id_25182 = atomic_inc(&(v_work_idx_2144)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25181 = atomic_inc(v_work_idx_2146); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25187",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25188",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25190",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25191",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25193",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__25205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__25199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}