{
  "name" : "swrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23840, const global float* restrict v__23841, const global float* restrict v__23842, const global float* restrict v__23843, float v__23844, float v__23845, global float* v__23862, local float* v__23857, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23848; \n  float v__23850; \n  float v__2938; \n  /* Private Memory */\n  float v__23852_0;\n  \n  float v__23854_0;\n  \n  for (int v_wg_id_23833 = get_group_id(0); v_wg_id_23833 < v_MHeight_2; v_wg_id_23833 = (v_wg_id_23833 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2019; \n      v_work_idx_2019 = 0; \n      int v_l_id_23834 = atomic_inc(&(v_work_idx_2019)); \n      while((v_l_id_23834 < v_MWidthC_1)){\n        float v_tmp_23919 = 0.0f; \n        v__23848 = v_tmp_23919; \n        /* reduce_seq */\n        for (int v_i_23835 = 0; v_i_23835 < 512; v_i_23835 = (1 + v_i_23835)) {\n          float v_tmp_23920 = 0.0f; \n          v__23850 = v_tmp_23920; \n          int v_index_23921 = v__23840[(v_l_id_23834 + (512 * v_MWidthC_1 * v_wg_id_23833) + (v_MWidthC_1 * v_i_23835))]; \n          if (v_index_23921 < 0) {\n            v__23852_0 = v__23850; \n          } else {\n            if (v_index_23921 >= v_VLength_3) {\n              v__23852_0 = v__23850; \n            } else {\n              v__23852_0 = v__23842[v_index_23921]; \n            }\n          }\n          v__23854_0 = mult(v__23852_0, v__23841[(v_l_id_23834 + (512 * v_MWidthC_1 * v_wg_id_23833) + (v_MWidthC_1 * v_i_23835))]); \n          v__23848 = add(v__23854_0, v__23848); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23836 = 0; \n          v__23857[v_l_id_23834] = id(v__23848); \n        }\n        /* end map_seq */\n        v_l_id_23834 = atomic_inc(&(v_work_idx_2019)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23837 = get_local_id(0); \n      float v_tmp_23924 = 0.0f; \n      v__2938 = v_tmp_23924; \n      /* reduce_seq */\n      for (int v_i_23838 = 0; v_i_23838 < v_MWidthC_1; v_i_23838 = (1 + v_i_23838)) {\n        v__2938 = add(v__2938, v__23857[(v_i_23838 + (v_MWidthC_1 * v_l_id_23837))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23839 = 0; \n        v__23862[v_wg_id_23833] = doubleMultiplyAdd(v__2938, v__23844, v__23843[v_wg_id_23833], v__23845); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__23840",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23841",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23842",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23843",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23844",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23845",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23862",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23857",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}