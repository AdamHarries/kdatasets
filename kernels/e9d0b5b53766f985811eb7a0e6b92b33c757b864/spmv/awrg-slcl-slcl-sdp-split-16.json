{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7919, const global float* restrict v__7920, const global float* restrict v__7921, const global float* restrict v__7922, float v__7923, float v__7924, global int* v__7926, global float* v__7942, global float* v__7932, local float* v__7937, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7928; \n  float v__7933; \n  float v__2938; \n  /* Private Memory */\n  float v__7930_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_529 = v__7926; \n    local int v_w_id_7911; \n    if (get_local_id(0) == 0) {\n      v_w_id_7911 = atomic_inc(v_work_idx_529); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_7911 < v_MHeight_2)){\n      for (int v_l_id_7912 = get_local_id(0); v_l_id_7912 < v_MWidthC_1; v_l_id_7912 = (v_l_id_7912 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_7913 = 0; v_i_7913 < 16; v_i_7913 = (1 + v_i_7913)) {\n          float v_tmp_8005 = 0.0f; \n          v__7928 = v_tmp_8005; \n          int v_index_8006 = v__7919[(v_l_id_7912 + (16 * v_MWidthC_1 * v_w_id_7911) + (v_MWidthC_1 * v_i_7913))]; \n          if (v_index_8006 < 0) {\n            v__7930_0 = v__7928; \n          } else {\n            if (v_index_8006 >= v_VLength_3) {\n              v__7930_0 = v__7928; \n            } else {\n              v__7930_0 = v__7921[v_index_8006]; \n            }\n          }\n          v__7932[(v_i_7913 + (16 * v_MWidthC_1 * v_w_id_7911) + (16 * v_l_id_7912))] = mult(v__7930_0, v__7920[(v_l_id_7912 + (16 * v_MWidthC_1 * v_w_id_7911) + (v_MWidthC_1 * v_i_7913))]); \n        }\n        /* end map_seq */\n        float v_tmp_8007 = 0.0f; \n        v__7933 = v_tmp_8007; \n        /* reduce_seq */\n        for (int v_i_7914 = 0; v_i_7914 < 16; v_i_7914 = (1 + v_i_7914)) {\n          v__7933 = add(v__7933, v__7932[(v_i_7914 + (16 * v_MWidthC_1 * v_w_id_7911) + (16 * v_l_id_7912))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7915 = 0; \n          v__7937[v_l_id_7912] = id(v__7933); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_7916 = get_local_id(0); \n        float v_tmp_8010 = 0.0f; \n        v__2938 = v_tmp_8010; \n        /* reduce_seq */\n        for (int v_i_7917 = 0; v_i_7917 < v_MWidthC_1; v_i_7917 = (1 + v_i_7917)) {\n          v__2938 = add(v__2938, v__7937[(v_i_7917 + (v_MWidthC_1 * v_l_id_7916))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7918 = 0; \n          v__7942[v_w_id_7911] = doubleMultiplyAdd(v__2938, v__7923, v__7922[v_w_id_7911], v__7924); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_7911 = atomic_inc(v_work_idx_529); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7919",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7920",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7921",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7922",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7923",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7924",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7926",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__7942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__7932",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__7937",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}