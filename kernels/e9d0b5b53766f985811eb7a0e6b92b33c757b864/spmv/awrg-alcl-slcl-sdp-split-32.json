{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12094, const global float* restrict v__12095, const global float* restrict v__12096, const global float* restrict v__12097, float v__12098, float v__12099, global int* v__12101, global float* v__12117, global float* v__12107, local float* v__12112, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12103; \n  float v__12108; \n  float v__2938; \n  /* Private Memory */\n  float v__12105_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_923 = v__12101; \n    local int v_w_id_12086; \n    if (get_local_id(0) == 0) {\n      v_w_id_12086 = atomic_inc(v_work_idx_923); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12086 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_921; \n        v_work_idx_921 = 0; \n        int v_l_id_12087 = atomic_inc(&(v_work_idx_921)); \n        while((v_l_id_12087 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_12088 = 0; v_i_12088 < 32; v_i_12088 = (1 + v_i_12088)) {\n            float v_tmp_12172 = 0.0f; \n            v__12103 = v_tmp_12172; \n            int v_index_12173 = v__12094[(v_l_id_12087 + (32 * v_MWidthC_1 * v_w_id_12086) + (v_MWidthC_1 * v_i_12088))]; \n            if (v_index_12173 < 0) {\n              v__12105_0 = v__12103; \n            } else {\n              if (v_index_12173 >= v_VLength_3) {\n                v__12105_0 = v__12103; \n              } else {\n                v__12105_0 = v__12096[v_index_12173]; \n              }\n            }\n            v__12107[(v_i_12088 + (32 * v_MWidthC_1 * v_w_id_12086) + (32 * v_l_id_12087))] = mult(v__12105_0, v__12095[(v_l_id_12087 + (32 * v_MWidthC_1 * v_w_id_12086) + (v_MWidthC_1 * v_i_12088))]); \n          }\n          /* end map_seq */\n          float v_tmp_12174 = 0.0f; \n          v__12108 = v_tmp_12174; \n          /* reduce_seq */\n          for (int v_i_12089 = 0; v_i_12089 < 32; v_i_12089 = (1 + v_i_12089)) {\n            v__12108 = add(v__12108, v__12107[(v_i_12089 + (32 * v_MWidthC_1 * v_w_id_12086) + (32 * v_l_id_12087))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12090 = 0; \n            v__12112[v_l_id_12087] = id(v__12108); \n          }\n          /* end map_seq */\n          v_l_id_12087 = atomic_inc(&(v_work_idx_921)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_12091 = get_local_id(0); \n        float v_tmp_12177 = 0.0f; \n        v__2938 = v_tmp_12177; \n        /* reduce_seq */\n        for (int v_i_12092 = 0; v_i_12092 < v_MWidthC_1; v_i_12092 = (1 + v_i_12092)) {\n          v__2938 = add(v__2938, v__12112[(v_i_12092 + (v_MWidthC_1 * v_l_id_12091))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_12093 = 0; \n          v__12117[v_w_id_12086] = doubleMultiplyAdd(v__2938, v__12098, v__12097[v_w_id_12086], v__12099); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12086 = atomic_inc(v_work_idx_923); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12094",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12095",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12096",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12097",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12098",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12099",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12101",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__12117",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__12107",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__12112",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}