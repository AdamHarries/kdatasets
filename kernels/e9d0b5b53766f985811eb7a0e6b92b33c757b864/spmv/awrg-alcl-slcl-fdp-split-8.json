{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__5535, const global float* restrict v__5536, const global float* restrict v__5537, const global float* restrict v__5538, float v__5539, float v__5540, global int* v__5542, global float* v__5558, local float* v__5553, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__5544; \n  float v__5546; \n  float v__2938; \n  /* Private Memory */\n  float v__5548_0;\n  \n  float v__5550_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_309 = v__5542; \n    local int v_w_id_5528; \n    if (get_local_id(0) == 0) {\n      v_w_id_5528 = atomic_inc(v_work_idx_309); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_5528 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_307; \n        v_work_idx_307 = 0; \n        int v_l_id_5529 = atomic_inc(&(v_work_idx_307)); \n        while((v_l_id_5529 < v_MWidthC_1)){\n          float v_tmp_5613 = 0.0f; \n          v__5544 = v_tmp_5613; \n          /* reduce_seq */\n          for (int v_i_5530 = 0; v_i_5530 < 8; v_i_5530 = (1 + v_i_5530)) {\n            float v_tmp_5614 = 0.0f; \n            v__5546 = v_tmp_5614; \n            int v_index_5615 = v__5535[(v_l_id_5529 + (8 * v_MWidthC_1 * v_w_id_5528) + (v_MWidthC_1 * v_i_5530))]; \n            if (v_index_5615 < 0) {\n              v__5548_0 = v__5546; \n            } else {\n              if (v_index_5615 >= v_VLength_3) {\n                v__5548_0 = v__5546; \n              } else {\n                v__5548_0 = v__5537[v_index_5615]; \n              }\n            }\n            v__5550_0 = mult(v__5548_0, v__5536[(v_l_id_5529 + (8 * v_MWidthC_1 * v_w_id_5528) + (v_MWidthC_1 * v_i_5530))]); \n            v__5544 = add(v__5550_0, v__5544); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5531 = 0; \n            v__5553[v_l_id_5529] = id(v__5544); \n          }\n          /* end map_seq */\n          v_l_id_5529 = atomic_inc(&(v_work_idx_307)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_5532 = get_local_id(0); \n        float v_tmp_5618 = 0.0f; \n        v__2938 = v_tmp_5618; \n        /* reduce_seq */\n        for (int v_i_5533 = 0; v_i_5533 < v_MWidthC_1; v_i_5533 = (1 + v_i_5533)) {\n          v__2938 = add(v__2938, v__5553[(v_i_5533 + (v_MWidthC_1 * v_l_id_5532))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_5534 = 0; \n          v__5558[v_w_id_5528] = doubleMultiplyAdd(v__2938, v__5539, v__5538[v_w_id_5528], v__5540); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_5528 = atomic_inc(v_work_idx_309); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__5535",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5536",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5537",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__5538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__5539",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__5540",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__5542",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__5558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__5553",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}