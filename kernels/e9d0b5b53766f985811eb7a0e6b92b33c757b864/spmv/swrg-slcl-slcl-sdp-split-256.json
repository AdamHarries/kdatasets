{
  "name" : "swrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19561, const global float* restrict v__19562, const global float* restrict v__19563, const global float* restrict v__19564, float v__19565, float v__19566, global float* v__19583, global float* v__19573, local float* v__19578, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19569; \n  float v__19574; \n  float v__2938; \n  /* Private Memory */\n  float v__19571_0;\n  \n  for (int v_wg_id_19553 = get_group_id(0); v_wg_id_19553 < v_MHeight_2; v_wg_id_19553 = (v_wg_id_19553 + get_num_groups(0))) {\n    for (int v_l_id_19554 = get_local_id(0); v_l_id_19554 < v_MWidthC_1; v_l_id_19554 = (v_l_id_19554 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19555 = 0; v_i_19555 < 256; v_i_19555 = (1 + v_i_19555)) {\n        float v_tmp_19648 = 0.0f; \n        v__19569 = v_tmp_19648; \n        int v_index_19649 = v__19561[(v_l_id_19554 + (256 * v_MWidthC_1 * v_wg_id_19553) + (v_MWidthC_1 * v_i_19555))]; \n        if (v_index_19649 < 0) {\n          v__19571_0 = v__19569; \n        } else {\n          if (v_index_19649 >= v_VLength_3) {\n            v__19571_0 = v__19569; \n          } else {\n            v__19571_0 = v__19563[v_index_19649]; \n          }\n        }\n        v__19573[(v_i_19555 + (256 * v_MWidthC_1 * v_wg_id_19553) + (256 * v_l_id_19554))] = mult(v__19571_0, v__19562[(v_l_id_19554 + (256 * v_MWidthC_1 * v_wg_id_19553) + (v_MWidthC_1 * v_i_19555))]); \n      }\n      /* end map_seq */\n      float v_tmp_19650 = 0.0f; \n      v__19574 = v_tmp_19650; \n      /* reduce_seq */\n      for (int v_i_19556 = 0; v_i_19556 < 256; v_i_19556 = (1 + v_i_19556)) {\n        v__19574 = add(v__19574, v__19573[(v_i_19556 + (256 * v_MWidthC_1 * v_wg_id_19553) + (256 * v_l_id_19554))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19557 = 0; \n        v__19578[v_l_id_19554] = id(v__19574); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19558 = get_local_id(0); \n      float v_tmp_19653 = 0.0f; \n      v__2938 = v_tmp_19653; \n      /* reduce_seq */\n      for (int v_i_19559 = 0; v_i_19559 < v_MWidthC_1; v_i_19559 = (1 + v_i_19559)) {\n        v__2938 = add(v__2938, v__19578[(v_i_19559 + (v_MWidthC_1 * v_l_id_19558))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19560 = 0; \n        v__19583[v_wg_id_19553] = doubleMultiplyAdd(v__2938, v__19565, v__19564[v_wg_id_19553], v__19566); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19561",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19562",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19563",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19565",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19566",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19583",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__19573",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__19578",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}