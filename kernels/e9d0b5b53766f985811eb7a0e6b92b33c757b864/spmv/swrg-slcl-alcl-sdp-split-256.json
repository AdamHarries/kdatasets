{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19885, const global float* restrict v__19886, const global float* restrict v__19887, const global float* restrict v__19888, float v__19889, float v__19890, global float* v__19907, global float* v__19897, local float* v__19902, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19893; \n  float v__19898; \n  float v__2938; \n  /* Private Memory */\n  float v__19895_0;\n  \n  for (int v_wg_id_19877 = get_group_id(0); v_wg_id_19877 < v_MHeight_2; v_wg_id_19877 = (v_wg_id_19877 + get_num_groups(0))) {\n    for (int v_l_id_19878 = get_local_id(0); v_l_id_19878 < v_MWidthC_1; v_l_id_19878 = (v_l_id_19878 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19879 = 0; v_i_19879 < 256; v_i_19879 = (1 + v_i_19879)) {\n        float v_tmp_19968 = 0.0f; \n        v__19893 = v_tmp_19968; \n        int v_index_19969 = v__19885[(v_l_id_19878 + (256 * v_MWidthC_1 * v_wg_id_19877) + (v_MWidthC_1 * v_i_19879))]; \n        if (v_index_19969 < 0) {\n          v__19895_0 = v__19893; \n        } else {\n          if (v_index_19969 >= v_VLength_3) {\n            v__19895_0 = v__19893; \n          } else {\n            v__19895_0 = v__19887[v_index_19969]; \n          }\n        }\n        v__19897[(v_i_19879 + (256 * v_MWidthC_1 * v_wg_id_19877) + (256 * v_l_id_19878))] = mult(v__19895_0, v__19886[(v_l_id_19878 + (256 * v_MWidthC_1 * v_wg_id_19877) + (v_MWidthC_1 * v_i_19879))]); \n      }\n      /* end map_seq */\n      float v_tmp_19970 = 0.0f; \n      v__19898 = v_tmp_19970; \n      /* reduce_seq */\n      for (int v_i_19880 = 0; v_i_19880 < 256; v_i_19880 = (1 + v_i_19880)) {\n        v__19898 = add(v__19898, v__19897[(v_i_19880 + (256 * v_MWidthC_1 * v_wg_id_19877) + (256 * v_l_id_19878))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19881 = 0; \n        v__19902[v_l_id_19878] = id(v__19898); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1646; \n      v_work_idx_1646 = 0; \n      int v_l_id_19882 = atomic_inc(&(v_work_idx_1646)); \n      while((v_l_id_19882 < 1)){\n        float v_tmp_19973 = 0.0f; \n        v__2938 = v_tmp_19973; \n        /* reduce_seq */\n        for (int v_i_19883 = 0; v_i_19883 < v_MWidthC_1; v_i_19883 = (1 + v_i_19883)) {\n          v__2938 = add(v__2938, v__19902[(v_i_19883 + (v_MWidthC_1 * v_l_id_19882))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_19884 = 0; \n          v__19907[v_wg_id_19877] = doubleMultiplyAdd(v__2938, v__19889, v__19888[v_wg_id_19877], v__19890); \n        }\n        /* end map_seq */\n        v_l_id_19882 = atomic_inc(&(v_work_idx_1646)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19885",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19886",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19887",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19889",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19890",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19907",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__19897",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  },
  "tempLocals" : [ {
    "variable" : "v__19902",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}