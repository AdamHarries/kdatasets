{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23417, const global float* restrict v__23418, const global float* restrict v__23419, const global float* restrict v__23420, float v__23421, float v__23422, global float* v__23441, local float* v__23436, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23425; \n  float v__23427; \n  float v__2938; \n  /* Private Memory */\n  float v__23429_0;\n  \n  float v__23431_0;\n  \n  int v__23435_0;\n  \n  for (int v_wg_id_23410 = get_group_id(0); v_wg_id_23410 < v_MHeight_2; v_wg_id_23410 = (v_wg_id_23410 + get_num_groups(0))) {\n    for (int v_l_id_23411 = get_local_id(0); v_l_id_23411 < v_MWidthC_1; v_l_id_23411 = (v_l_id_23411 + get_local_size(0))) {\n      float v_tmp_23505 = 0.0f; \n      v__23425 = v_tmp_23505; \n      /* reduce_while_seq */\n      for (int v_i_23412 = 0; v_i_23412 < 512; v_i_23412 = (1 + v_i_23412)) {\n        v__23435_0 = check(v__23425, v__23417[(v_l_id_23411 + (512 * v_MWidthC_1 * v_wg_id_23410) + (v_MWidthC_1 * v_i_23412))]); \n        if (v__23435_0) {\n        } else {\n          break;\n        }\n        float v_tmp_23506 = 0.0f; \n        v__23427 = v_tmp_23506; \n        int v_index_23507 = v__23417[(v_l_id_23411 + (512 * v_MWidthC_1 * v_wg_id_23410) + (v_MWidthC_1 * v_i_23412))]; \n        if (v_index_23507 < 0) {\n          v__23429_0 = v__23427; \n        } else {\n          if (v_index_23507 >= v_VLength_3) {\n            v__23429_0 = v__23427; \n          } else {\n            v__23429_0 = v__23419[v_index_23507]; \n          }\n        }\n        v__23431_0 = mult(v__23429_0, v__23418[(v_l_id_23411 + (512 * v_MWidthC_1 * v_wg_id_23410) + (v_MWidthC_1 * v_i_23412))]); \n        v__23425 = add(v__23431_0, v__23425); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23413 = 0; \n        v__23436[v_l_id_23411] = id(v__23425); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1977; \n      v_work_idx_1977 = 0; \n      int v_l_id_23414 = atomic_inc(&(v_work_idx_1977)); \n      while((v_l_id_23414 < 1)){\n        float v_tmp_23510 = 0.0f; \n        v__2938 = v_tmp_23510; \n        /* reduce_seq */\n        for (int v_i_23415 = 0; v_i_23415 < v_MWidthC_1; v_i_23415 = (1 + v_i_23415)) {\n          v__2938 = add(v__2938, v__23436[(v_i_23415 + (v_MWidthC_1 * v_l_id_23414))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23416 = 0; \n          v__23441[v_wg_id_23410] = doubleMultiplyAdd(v__2938, v__23421, v__23420[v_wg_id_23410], v__23422); \n        }\n        /* end map_seq */\n        v_l_id_23414 = atomic_inc(&(v_work_idx_1977)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__23417",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23418",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23419",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23421",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23422",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23441",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23436",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}