{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__8975, const global float* restrict v__8976, const global float* restrict v__8977, const global float* restrict v__8978, float v__8979, float v__8980, global float* v__9000, global int* v__8982, local float* v__8995, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8984; \n  float v__8986; \n  float v__3017; \n  /* Private Memory */\n  float v__8988_0;\n  \n  float v__8990_0;\n  \n  int v__8994_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_635 = v__8982; \n    local int v_w_id_8968; \n    if (get_local_id(0) == 0) {\n      v_w_id_8968 = atomic_inc(v_work_idx_635); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8968 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_633; \n        v_work_idx_633 = 0; \n        int v_l_id_8969 = atomic_inc(&(v_work_idx_633)); \n        while((v_l_id_8969 < v_MWidthC_1)){\n          float v_tmp_9057 = 0.0f; \n          v__8984 = v_tmp_9057; \n          /* reduce_while_seq */\n          for (int v_i_8970 = 0; v_i_8970 < 16; v_i_8970 = (1 + v_i_8970)) {\n            v__8994_0 = check(v__8984, v__8975[(v_l_id_8969 + (16 * v_MWidthC_1 * v_w_id_8968) + (v_MWidthC_1 * v_i_8970))]); \n            if (v__8994_0) {\n            } else {\n              break;\n            }\n            float v_tmp_9058 = 0.0f; \n            v__8986 = v_tmp_9058; \n            int v_index_9059 = v__8975[(v_l_id_8969 + (16 * v_MWidthC_1 * v_w_id_8968) + (v_MWidthC_1 * v_i_8970))]; \n            if (v_index_9059 < 0) {\n              v__8988_0 = v__8986; \n            } else {\n              if (v_index_9059 >= v_VLength_3) {\n                v__8988_0 = v__8986; \n              } else {\n                v__8988_0 = v__8977[v_index_9059]; \n              }\n            }\n            v__8990_0 = mult(v__8988_0, v__8976[(v_l_id_8969 + (16 * v_MWidthC_1 * v_w_id_8968) + (v_MWidthC_1 * v_i_8970))]); \n            v__8984 = add(v__8990_0, v__8984); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_8971 = 0; \n            v__8995[v_l_id_8969] = id(v__8984); \n          }\n          /* end map_seq */\n          v_l_id_8969 = atomic_inc(&(v_work_idx_633)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_8972 = get_local_id(0); \n        float v_tmp_9062 = 0.0f; \n        v__3017 = v_tmp_9062; \n        /* reduce_seq */\n        for (int v_i_8973 = 0; v_i_8973 < v_MWidthC_1; v_i_8973 = (1 + v_i_8973)) {\n          v__3017 = add(v__3017, v__8995[(v_i_8973 + (v_MWidthC_1 * v_l_id_8972))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8974 = 0; \n          v__9000[v_w_id_8968] = doubleMultiplyAdd(v__3017, v__8979, v__8978[v_w_id_8968], v__8980); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8968 = atomic_inc(v_work_idx_635); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__8975",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8976",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8977",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8979",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8980",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8982",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8995",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}