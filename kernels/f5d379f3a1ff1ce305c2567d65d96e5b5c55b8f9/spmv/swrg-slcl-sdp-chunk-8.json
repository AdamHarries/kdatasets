{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2766, const global float* restrict v__2767, const global float* restrict v__2768, const global float* restrict v__2769, float v__2770, float v__2771, global float* v__2784, global float* v__2778, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2774; \n  float v__2779; \n  /* Private Memory */\n  float v__2776_0;\n  \n  for (int v_wg_id_2761 = get_group_id(0); v_wg_id_2761 < ((v_MHeight_2)/(8)); v_wg_id_2761 = (v_wg_id_2761 + get_num_groups(0))) {\n    for (int v_l_id_2762 = get_local_id(0); v_l_id_2762 < 8; v_l_id_2762 = (v_l_id_2762 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_2763 = 0; v_i_2763 < v_MWidthC_1; v_i_2763 = (1 + v_i_2763)) {\n        float v_tmp_2828 = 0.0f; \n        v__2774 = v_tmp_2828; \n        int v_index_2829 = v__2766[(v_i_2763 + (8 * v_MWidthC_1 * v_wg_id_2761) + (v_MWidthC_1 * v_l_id_2762))]; \n        if (v_index_2829 < 0) {\n          v__2776_0 = v__2774; \n        } else {\n          if (v_index_2829 >= v_VLength_3) {\n            v__2776_0 = v__2774; \n          } else {\n            v__2776_0 = v__2768[v_index_2829]; \n          }\n        }\n        v__2778[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_2761) + (-1 * v_i_2763) + (v_MWidthC_1 * v_l_id_2762))] = mult(v__2776_0, v__2767[(v_i_2763 + (8 * v_MWidthC_1 * v_wg_id_2761) + (v_MWidthC_1 * v_l_id_2762))]); \n      }\n      /* end map_seq */\n      float v_tmp_2830 = 0.0f; \n      v__2779 = v_tmp_2830; \n      /* reduce_seq */\n      for (int v_i_2764 = 0; v_i_2764 < v_MWidthC_1; v_i_2764 = (1 + v_i_2764)) {\n        v__2779 = add(v__2779, v__2778[(v_i_2764 + (8 * v_MWidthC_1 * v_wg_id_2761) + (v_MWidthC_1 * v_l_id_2762))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_2765 = 0; \n        v__2784[(v_l_id_2762 + (8 * v_wg_id_2761))] = doubleMultiplyAdd(v__2779, v__2770, v__2769[(v_l_id_2762 + (8 * v_wg_id_2761))], v__2771); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__2766",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2768",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2770",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2771",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__2778",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__2784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}