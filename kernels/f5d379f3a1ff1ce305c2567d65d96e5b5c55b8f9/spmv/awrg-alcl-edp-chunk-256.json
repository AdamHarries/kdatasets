{
  "name" : "awrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21886, const global float* restrict v__21887, const global float* restrict v__21888, const global float* restrict v__21889, float v__21890, float v__21891, global float* v__21907, global int* v__21893, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21894; \n  float v__21897; \n  /* Private Memory */\n  float v__21899_0;\n  \n  float v__21901_0;\n  \n  int v__21905_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1852 = v__21893; \n    local int v_w_id_21882; \n    if (get_local_id(0) == 0) {\n      v_w_id_21882 = atomic_inc(v_work_idx_1852); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21882 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1850; \n        v_work_idx_1850 = 0; \n        int v_l_id_21883 = atomic_inc(&(v_work_idx_1850)); \n        while((v_l_id_21883 < 256)){\n          float v_tmp_21950 = 0.0f; \n          v__21894 = v_tmp_21950; \n          /* reduce_while_seq */\n          for (int v_i_21884 = 0; v_i_21884 < v_MWidthC_1; v_i_21884 = (1 + v_i_21884)) {\n            v__21905_0 = check(v__21894, v__21886[(v_i_21884 + (256 * v_MWidthC_1 * v_w_id_21882) + (v_MWidthC_1 * v_l_id_21883))]); \n            if (v__21905_0) {\n            } else {\n              break;\n            }\n            float v_tmp_21951 = 0.0f; \n            v__21897 = v_tmp_21951; \n            int v_index_21952 = v__21886[(v_i_21884 + (256 * v_MWidthC_1 * v_w_id_21882) + (v_MWidthC_1 * v_l_id_21883))]; \n            if (v_index_21952 < 0) {\n              v__21899_0 = v__21897; \n            } else {\n              if (v_index_21952 >= v_VLength_3) {\n                v__21899_0 = v__21897; \n              } else {\n                v__21899_0 = v__21888[v_index_21952]; \n              }\n            }\n            v__21901_0 = mult(v__21899_0, v__21887[(v_i_21884 + (256 * v_MWidthC_1 * v_w_id_21882) + (v_MWidthC_1 * v_l_id_21883))]); \n            v__21894 = add(v__21901_0, v__21894); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21885 = 0; \n            v__21907[(v_l_id_21883 + (256 * v_w_id_21882))] = doubleMultiplyAdd(v__21894, v__21890, v__21889[(v_l_id_21883 + (256 * v_w_id_21882))], v__21891); \n          }\n          /* end map_seq */\n          v_l_id_21883 = atomic_inc(&(v_work_idx_1850)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21882 = atomic_inc(v_work_idx_1852); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21886",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21887",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21888",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21890",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21891",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21893",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21907",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}