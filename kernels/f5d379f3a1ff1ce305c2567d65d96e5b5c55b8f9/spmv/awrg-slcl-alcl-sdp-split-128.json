{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18153, const global float* restrict v__18154, const global float* restrict v__18155, const global float* restrict v__18156, float v__18157, float v__18158, global float* v__18176, global float* v__18166, global int* v__18160, local float* v__18171, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18162; \n  float v__18167; \n  float v__3017; \n  /* Private Memory */\n  float v__18164_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1498 = v__18160; \n    local int v_w_id_18145; \n    if (get_local_id(0) == 0) {\n      v_w_id_18145 = atomic_inc(v_work_idx_1498); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18145 < v_MHeight_2)){\n      for (int v_l_id_18146 = get_local_id(0); v_l_id_18146 < v_MWidthC_1; v_l_id_18146 = (v_l_id_18146 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_18147 = 0; v_i_18147 < 128; v_i_18147 = (1 + v_i_18147)) {\n          float v_tmp_18232 = 0.0f; \n          v__18162 = v_tmp_18232; \n          int v_index_18233 = v__18153[(v_l_id_18146 + (128 * v_MWidthC_1 * v_w_id_18145) + (v_MWidthC_1 * v_i_18147))]; \n          if (v_index_18233 < 0) {\n            v__18164_0 = v__18162; \n          } else {\n            if (v_index_18233 >= v_VLength_3) {\n              v__18164_0 = v__18162; \n            } else {\n              v__18164_0 = v__18155[v_index_18233]; \n            }\n          }\n          v__18166[(127 + (128 * v_MWidthC_1 * v_w_id_18145) + (-1 * v_i_18147) + (128 * v_l_id_18146))] = mult(v__18164_0, v__18154[(v_l_id_18146 + (128 * v_MWidthC_1 * v_w_id_18145) + (v_MWidthC_1 * v_i_18147))]); \n        }\n        /* end map_seq */\n        float v_tmp_18234 = 0.0f; \n        v__18167 = v_tmp_18234; \n        /* reduce_seq */\n        for (int v_i_18148 = 0; v_i_18148 < 128; v_i_18148 = (1 + v_i_18148)) {\n          v__18167 = add(v__18167, v__18166[(v_i_18148 + (128 * v_MWidthC_1 * v_w_id_18145) + (128 * v_l_id_18146))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18149 = 0; \n          v__18171[v_l_id_18146] = id(v__18167); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1491; \n        v_work_idx_1491 = 0; \n        int v_l_id_18150 = atomic_inc(&(v_work_idx_1491)); \n        while((v_l_id_18150 < 1)){\n          float v_tmp_18237 = 0.0f; \n          v__3017 = v_tmp_18237; \n          /* reduce_seq */\n          for (int v_i_18151 = 0; v_i_18151 < v_MWidthC_1; v_i_18151 = (1 + v_i_18151)) {\n            v__3017 = add(v__3017, v__18171[v_i_18151]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18152 = 0; \n            v__18176[v_w_id_18145] = doubleMultiplyAdd(v__3017, v__18157, v__18156[v_w_id_18145], v__18158); \n          }\n          /* end map_seq */\n          v_l_id_18150 = atomic_inc(&(v_work_idx_1491)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18145 = atomic_inc(v_work_idx_1498); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__18153",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18154",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18166",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18160",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18176",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18171",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}