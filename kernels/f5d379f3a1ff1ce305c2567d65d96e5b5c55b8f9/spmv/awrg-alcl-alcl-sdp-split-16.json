{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9077, const global float* restrict v__9078, const global float* restrict v__9079, const global float* restrict v__9080, float v__9081, float v__9082, global float* v__9100, global float* v__9090, global int* v__9084, local float* v__9095, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9086; \n  float v__9091; \n  float v__3017; \n  /* Private Memory */\n  float v__9088_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_647 = v__9084; \n    local int v_w_id_9069; \n    if (get_local_id(0) == 0) {\n      v_w_id_9069 = atomic_inc(v_work_idx_647); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_9069 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_645; \n        v_work_idx_645 = 0; \n        int v_l_id_9070 = atomic_inc(&(v_work_idx_645)); \n        while((v_l_id_9070 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_9071 = 0; v_i_9071 < 16; v_i_9071 = (1 + v_i_9071)) {\n            float v_tmp_9151 = 0.0f; \n            v__9086 = v_tmp_9151; \n            int v_index_9152 = v__9077[(v_l_id_9070 + (16 * v_MWidthC_1 * v_w_id_9069) + (v_MWidthC_1 * v_i_9071))]; \n            if (v_index_9152 < 0) {\n              v__9088_0 = v__9086; \n            } else {\n              if (v_index_9152 >= v_VLength_3) {\n                v__9088_0 = v__9086; \n              } else {\n                v__9088_0 = v__9079[v_index_9152]; \n              }\n            }\n            v__9090[(15 + (16 * v_MWidthC_1 * v_w_id_9069) + (-1 * v_i_9071) + (16 * v_l_id_9070))] = mult(v__9088_0, v__9078[(v_l_id_9070 + (16 * v_MWidthC_1 * v_w_id_9069) + (v_MWidthC_1 * v_i_9071))]); \n          }\n          /* end map_seq */\n          float v_tmp_9153 = 0.0f; \n          v__9091 = v_tmp_9153; \n          /* reduce_seq */\n          for (int v_i_9072 = 0; v_i_9072 < 16; v_i_9072 = (1 + v_i_9072)) {\n            v__9091 = add(v__9091, v__9090[(v_i_9072 + (16 * v_MWidthC_1 * v_w_id_9069) + (16 * v_l_id_9070))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9073 = 0; \n            v__9095[v_l_id_9070] = id(v__9091); \n          }\n          /* end map_seq */\n          v_l_id_9070 = atomic_inc(&(v_work_idx_645)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_639; \n        v_work_idx_639 = 0; \n        int v_l_id_9074 = atomic_inc(&(v_work_idx_639)); \n        while((v_l_id_9074 < 1)){\n          float v_tmp_9156 = 0.0f; \n          v__3017 = v_tmp_9156; \n          /* reduce_seq */\n          for (int v_i_9075 = 0; v_i_9075 < v_MWidthC_1; v_i_9075 = (1 + v_i_9075)) {\n            v__3017 = add(v__3017, v__9095[v_i_9075]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9076 = 0; \n            v__9100[v_w_id_9069] = doubleMultiplyAdd(v__3017, v__9081, v__9080[v_w_id_9069], v__9082); \n          }\n          /* end map_seq */\n          v_l_id_9074 = atomic_inc(&(v_work_idx_639)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_9069 = atomic_inc(v_work_idx_647); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__9077",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9078",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9079",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9080",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9081",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9082",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9090",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9084",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9095",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}