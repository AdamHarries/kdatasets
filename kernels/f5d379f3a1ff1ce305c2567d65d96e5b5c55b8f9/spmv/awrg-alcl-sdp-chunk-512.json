{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25042, const global float* restrict v__25043, const global float* restrict v__25044, const global float* restrict v__25045, float v__25046, float v__25047, global float* v__25061, global float* v__25055, global int* v__25049, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25051; \n  float v__25056; \n  /* Private Memory */\n  float v__25053_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2150 = v__25049; \n    local int v_w_id_25037; \n    if (get_local_id(0) == 0) {\n      v_w_id_25037 = atomic_inc(v_work_idx_2150); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25037 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2148; \n        v_work_idx_2148 = 0; \n        int v_l_id_25038 = atomic_inc(&(v_work_idx_2148)); \n        while((v_l_id_25038 < 512)){\n          /* map_seq */\n          for (int v_i_25039 = 0; v_i_25039 < v_MWidthC_1; v_i_25039 = (1 + v_i_25039)) {\n            float v_tmp_25100 = 0.0f; \n            v__25051 = v_tmp_25100; \n            int v_index_25101 = v__25042[(v_i_25039 + (512 * v_MWidthC_1 * v_w_id_25037) + (v_MWidthC_1 * v_l_id_25038))]; \n            if (v_index_25101 < 0) {\n              v__25053_0 = v__25051; \n            } else {\n              if (v_index_25101 >= v_VLength_3) {\n                v__25053_0 = v__25051; \n              } else {\n                v__25053_0 = v__25044[v_index_25101]; \n              }\n            }\n            v__25055[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_25037) + (-1 * v_i_25039) + (v_MWidthC_1 * v_l_id_25038))] = mult(v__25053_0, v__25043[(v_i_25039 + (512 * v_MWidthC_1 * v_w_id_25037) + (v_MWidthC_1 * v_l_id_25038))]); \n          }\n          /* end map_seq */\n          float v_tmp_25102 = 0.0f; \n          v__25056 = v_tmp_25102; \n          /* reduce_seq */\n          for (int v_i_25040 = 0; v_i_25040 < v_MWidthC_1; v_i_25040 = (1 + v_i_25040)) {\n            v__25056 = add(v__25056, v__25055[(v_i_25040 + (512 * v_MWidthC_1 * v_w_id_25037) + (v_MWidthC_1 * v_l_id_25038))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25041 = 0; \n            v__25061[(v_l_id_25038 + (512 * v_w_id_25037))] = doubleMultiplyAdd(v__25056, v__25046, v__25045[(v_l_id_25038 + (512 * v_w_id_25037))], v__25047); \n          }\n          /* end map_seq */\n          v_l_id_25038 = atomic_inc(&(v_work_idx_2148)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25037 = atomic_inc(v_work_idx_2150); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25044",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25046",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25047",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25055",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25049",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}