{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4142, const global float* restrict v__4143, const global float* restrict v__4144, const global float* restrict v__4145, float v__4146, float v__4147, global float* v__4164, global float* v__4154, local float* v__4159, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4150; \n  float v__4155; \n  float v__3017; \n  /* Private Memory */\n  float v__4152_0;\n  \n  for (int v_wg_id_4134 = get_group_id(0); v_wg_id_4134 < v_MHeight_2; v_wg_id_4134 = (v_wg_id_4134 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_171; \n      v_work_idx_171 = 0; \n      int v_l_id_4135 = atomic_inc(&(v_work_idx_171)); \n      while((v_l_id_4135 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_4136 = 0; v_i_4136 < 8; v_i_4136 = (1 + v_i_4136)) {\n          float v_tmp_4218 = 0.0f; \n          v__4150 = v_tmp_4218; \n          int v_index_4219 = v__4142[(v_l_id_4135 + (8 * v_MWidthC_1 * v_wg_id_4134) + (v_MWidthC_1 * v_i_4136))]; \n          if (v_index_4219 < 0) {\n            v__4152_0 = v__4150; \n          } else {\n            if (v_index_4219 >= v_VLength_3) {\n              v__4152_0 = v__4150; \n            } else {\n              v__4152_0 = v__4144[v_index_4219]; \n            }\n          }\n          v__4154[(7 + (8 * v_MWidthC_1 * v_wg_id_4134) + (-1 * v_i_4136) + (8 * v_l_id_4135))] = mult(v__4152_0, v__4143[(v_l_id_4135 + (8 * v_MWidthC_1 * v_wg_id_4134) + (v_MWidthC_1 * v_i_4136))]); \n        }\n        /* end map_seq */\n        float v_tmp_4220 = 0.0f; \n        v__4155 = v_tmp_4220; \n        /* reduce_seq */\n        for (int v_i_4137 = 0; v_i_4137 < 8; v_i_4137 = (1 + v_i_4137)) {\n          v__4155 = add(v__4155, v__4154[(v_i_4137 + (8 * v_MWidthC_1 * v_wg_id_4134) + (8 * v_l_id_4135))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4138 = 0; \n          v__4159[v_l_id_4135] = id(v__4155); \n        }\n        /* end map_seq */\n        v_l_id_4135 = atomic_inc(&(v_work_idx_171)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_165; \n      v_work_idx_165 = 0; \n      int v_l_id_4139 = atomic_inc(&(v_work_idx_165)); \n      while((v_l_id_4139 < 1)){\n        float v_tmp_4223 = 0.0f; \n        v__3017 = v_tmp_4223; \n        /* reduce_seq */\n        for (int v_i_4140 = 0; v_i_4140 < v_MWidthC_1; v_i_4140 = (1 + v_i_4140)) {\n          v__3017 = add(v__3017, v__4159[v_i_4140]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4141 = 0; \n          v__4164[v_wg_id_4134] = doubleMultiplyAdd(v__3017, v__4146, v__4145[v_wg_id_4134], v__4147); \n        }\n        /* end map_seq */\n        v_l_id_4139 = atomic_inc(&(v_work_idx_165)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__4142",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4143",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4144",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4145",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4146",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4147",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4154",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__4164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__4159",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}