{
  "name" : "awrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11096, const global float* restrict v__11097, const global float* restrict v__11098, const global float* restrict v__11099, float v__11100, float v__11101, global float* v__11115, global int* v__11103, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11105; \n  float v__11107; \n  /* Private Memory */\n  float v__11109_0;\n  \n  float v__11111_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_829 = v__11103; \n    local int v_w_id_11092; \n    if (get_local_id(0) == 0) {\n      v_w_id_11092 = atomic_inc(v_work_idx_829); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11092 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_11093 = get_local_id(0); v_l_id_11093 < 32; v_l_id_11093 = (v_l_id_11093 + get_local_size(0))) {\n        float v_tmp_11155 = 0.0f; \n        v__11105 = v_tmp_11155; \n        /* reduce_seq */\n        for (int v_i_11094 = 0; v_i_11094 < v_MWidthC_1; v_i_11094 = (1 + v_i_11094)) {\n          float v_tmp_11156 = 0.0f; \n          v__11107 = v_tmp_11156; \n          int v_index_11157 = v__11096[(v_i_11094 + (32 * v_MWidthC_1 * v_w_id_11092) + (v_MWidthC_1 * v_l_id_11093))]; \n          if (v_index_11157 < 0) {\n            v__11109_0 = v__11107; \n          } else {\n            if (v_index_11157 >= v_VLength_3) {\n              v__11109_0 = v__11107; \n            } else {\n              v__11109_0 = v__11098[v_index_11157]; \n            }\n          }\n          v__11111_0 = mult(v__11109_0, v__11097[(v_i_11094 + (32 * v_MWidthC_1 * v_w_id_11092) + (v_MWidthC_1 * v_l_id_11093))]); \n          v__11105 = add(v__11111_0, v__11105); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11095 = 0; \n          v__11115[(v_l_id_11093 + (32 * v_w_id_11092))] = doubleMultiplyAdd(v__11105, v__11100, v__11099[(v_l_id_11093 + (32 * v_w_id_11092))], v__11101); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_11092 = atomic_inc(v_work_idx_829); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11096",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11097",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11098",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11100",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11101",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11103",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11115",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}