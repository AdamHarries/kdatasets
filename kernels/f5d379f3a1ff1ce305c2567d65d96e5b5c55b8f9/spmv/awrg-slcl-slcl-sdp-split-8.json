{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4660, const global float* restrict v__4661, const global float* restrict v__4662, const global float* restrict v__4663, float v__4664, float v__4665, global float* v__4683, global float* v__4673, global int* v__4667, local float* v__4678, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4669; \n  float v__4674; \n  float v__3017; \n  /* Private Memory */\n  float v__4671_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_221 = v__4667; \n    local int v_w_id_4652; \n    if (get_local_id(0) == 0) {\n      v_w_id_4652 = atomic_inc(v_work_idx_221); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4652 < v_MHeight_2)){\n      for (int v_l_id_4653 = get_local_id(0); v_l_id_4653 < v_MWidthC_1; v_l_id_4653 = (v_l_id_4653 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_4654 = 0; v_i_4654 < 8; v_i_4654 = (1 + v_i_4654)) {\n          float v_tmp_4742 = 0.0f; \n          v__4669 = v_tmp_4742; \n          int v_index_4743 = v__4660[(v_l_id_4653 + (8 * v_MWidthC_1 * v_w_id_4652) + (v_MWidthC_1 * v_i_4654))]; \n          if (v_index_4743 < 0) {\n            v__4671_0 = v__4669; \n          } else {\n            if (v_index_4743 >= v_VLength_3) {\n              v__4671_0 = v__4669; \n            } else {\n              v__4671_0 = v__4662[v_index_4743]; \n            }\n          }\n          v__4673[(7 + (8 * v_MWidthC_1 * v_w_id_4652) + (-1 * v_i_4654) + (8 * v_l_id_4653))] = mult(v__4671_0, v__4661[(v_l_id_4653 + (8 * v_MWidthC_1 * v_w_id_4652) + (v_MWidthC_1 * v_i_4654))]); \n        }\n        /* end map_seq */\n        float v_tmp_4744 = 0.0f; \n        v__4674 = v_tmp_4744; \n        /* reduce_seq */\n        for (int v_i_4655 = 0; v_i_4655 < 8; v_i_4655 = (1 + v_i_4655)) {\n          v__4674 = add(v__4674, v__4673[(v_i_4655 + (8 * v_MWidthC_1 * v_w_id_4652) + (8 * v_l_id_4653))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4656 = 0; \n          v__4678[v_l_id_4653] = id(v__4674); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_4657 = get_local_id(0); \n        float v_tmp_4747 = 0.0f; \n        v__3017 = v_tmp_4747; \n        /* reduce_seq */\n        for (int v_i_4658 = 0; v_i_4658 < v_MWidthC_1; v_i_4658 = (1 + v_i_4658)) {\n          v__3017 = add(v__3017, v__4678[(v_i_4658 + (v_MWidthC_1 * v_l_id_4657))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4659 = 0; \n          v__4683[v_w_id_4652] = doubleMultiplyAdd(v__3017, v__4664, v__4663[v_w_id_4652], v__4665); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_4652 = atomic_inc(v_work_idx_221); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__4660",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4661",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4662",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4663",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4664",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4665",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4673",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4667",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__4683",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__4678",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}