{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17326, const global float* restrict v__17327, const global float* restrict v__17328, const global float* restrict v__17329, float v__17330, float v__17331, global float* v__17348, global float* v__17338, local float* v__17343, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17334; \n  float v__17339; \n  float v__3017; \n  /* Private Memory */\n  float v__17336_0;\n  \n  for (int v_wg_id_17318 = get_group_id(0); v_wg_id_17318 < v_MHeight_2; v_wg_id_17318 = (v_wg_id_17318 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1419; \n      v_work_idx_1419 = 0; \n      int v_l_id_17319 = atomic_inc(&(v_work_idx_1419)); \n      while((v_l_id_17319 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_17320 = 0; v_i_17320 < 128; v_i_17320 = (1 + v_i_17320)) {\n          float v_tmp_17402 = 0.0f; \n          v__17334 = v_tmp_17402; \n          int v_index_17403 = v__17326[(v_l_id_17319 + (128 * v_MWidthC_1 * v_wg_id_17318) + (v_MWidthC_1 * v_i_17320))]; \n          if (v_index_17403 < 0) {\n            v__17336_0 = v__17334; \n          } else {\n            if (v_index_17403 >= v_VLength_3) {\n              v__17336_0 = v__17334; \n            } else {\n              v__17336_0 = v__17328[v_index_17403]; \n            }\n          }\n          v__17338[(127 + (128 * v_MWidthC_1 * v_wg_id_17318) + (-1 * v_i_17320) + (128 * v_l_id_17319))] = mult(v__17336_0, v__17327[(v_l_id_17319 + (128 * v_MWidthC_1 * v_wg_id_17318) + (v_MWidthC_1 * v_i_17320))]); \n        }\n        /* end map_seq */\n        float v_tmp_17404 = 0.0f; \n        v__17339 = v_tmp_17404; \n        /* reduce_seq */\n        for (int v_i_17321 = 0; v_i_17321 < 128; v_i_17321 = (1 + v_i_17321)) {\n          v__17339 = add(v__17339, v__17338[(v_i_17321 + (128 * v_MWidthC_1 * v_wg_id_17318) + (128 * v_l_id_17319))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17322 = 0; \n          v__17343[v_l_id_17319] = id(v__17339); \n        }\n        /* end map_seq */\n        v_l_id_17319 = atomic_inc(&(v_work_idx_1419)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1413; \n      v_work_idx_1413 = 0; \n      int v_l_id_17323 = atomic_inc(&(v_work_idx_1413)); \n      while((v_l_id_17323 < 1)){\n        float v_tmp_17407 = 0.0f; \n        v__3017 = v_tmp_17407; \n        /* reduce_seq */\n        for (int v_i_17324 = 0; v_i_17324 < v_MWidthC_1; v_i_17324 = (1 + v_i_17324)) {\n          v__3017 = add(v__3017, v__17343[v_i_17324]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17325 = 0; \n          v__17348[v_wg_id_17318] = doubleMultiplyAdd(v__3017, v__17330, v__17329[v_wg_id_17318], v__17331); \n        }\n        /* end map_seq */\n        v_l_id_17323 = atomic_inc(&(v_work_idx_1413)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17326",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17327",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17328",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17330",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17331",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17338",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__17348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17343",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}