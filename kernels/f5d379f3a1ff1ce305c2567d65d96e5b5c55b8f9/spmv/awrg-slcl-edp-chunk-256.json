{
  "name" : "awrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21056, const global float* restrict v__21057, const global float* restrict v__21058, const global float* restrict v__21059, float v__21060, float v__21061, global float* v__21077, global int* v__21063, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21064; \n  float v__21067; \n  /* Private Memory */\n  float v__21069_0;\n  \n  float v__21071_0;\n  \n  int v__21075_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1771 = v__21063; \n    local int v_w_id_21052; \n    if (get_local_id(0) == 0) {\n      v_w_id_21052 = atomic_inc(v_work_idx_1771); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21052 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_21053 = get_local_id(0); v_l_id_21053 < 256; v_l_id_21053 = (v_l_id_21053 + get_local_size(0))) {\n        float v_tmp_21123 = 0.0f; \n        v__21064 = v_tmp_21123; \n        /* reduce_while_seq */\n        for (int v_i_21054 = 0; v_i_21054 < v_MWidthC_1; v_i_21054 = (1 + v_i_21054)) {\n          v__21075_0 = check(v__21064, v__21056[(v_i_21054 + (256 * v_MWidthC_1 * v_w_id_21052) + (v_MWidthC_1 * v_l_id_21053))]); \n          if (v__21075_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21124 = 0.0f; \n          v__21067 = v_tmp_21124; \n          int v_index_21125 = v__21056[(v_i_21054 + (256 * v_MWidthC_1 * v_w_id_21052) + (v_MWidthC_1 * v_l_id_21053))]; \n          if (v_index_21125 < 0) {\n            v__21069_0 = v__21067; \n          } else {\n            if (v_index_21125 >= v_VLength_3) {\n              v__21069_0 = v__21067; \n            } else {\n              v__21069_0 = v__21058[v_index_21125]; \n            }\n          }\n          v__21071_0 = mult(v__21069_0, v__21057[(v_i_21054 + (256 * v_MWidthC_1 * v_w_id_21052) + (v_MWidthC_1 * v_l_id_21053))]); \n          v__21064 = add(v__21071_0, v__21064); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21055 = 0; \n          v__21077[(v_l_id_21053 + (256 * v_w_id_21052))] = doubleMultiplyAdd(v__21064, v__21060, v__21059[(v_l_id_21053 + (256 * v_w_id_21052))], v__21061); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_21052 = atomic_inc(v_work_idx_1771); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21058",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21060",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21061",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21063",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21077",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}