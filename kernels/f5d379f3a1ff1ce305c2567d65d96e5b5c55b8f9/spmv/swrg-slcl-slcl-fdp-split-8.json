{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__3103, const global float* restrict v__3104, const global float* restrict v__3105, const global float* restrict v__3106, float v__3107, float v__3108, global float* v__3125, local float* v__3120, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__3111; \n  float v__3113; \n  float v__3017; \n  /* Private Memory */\n  float v__3115_0;\n  \n  float v__3117_0;\n  \n  for (int v_wg_id_3096 = get_group_id(0); v_wg_id_3096 < v_MHeight_2; v_wg_id_3096 = (v_wg_id_3096 + get_num_groups(0))) {\n    for (int v_l_id_3097 = get_local_id(0); v_l_id_3097 < v_MWidthC_1; v_l_id_3097 = (v_l_id_3097 + get_local_size(0))) {\n      float v_tmp_3187 = 0.0f; \n      v__3111 = v_tmp_3187; \n      /* reduce_seq */\n      for (int v_i_3098 = 0; v_i_3098 < 8; v_i_3098 = (1 + v_i_3098)) {\n        float v_tmp_3188 = 0.0f; \n        v__3113 = v_tmp_3188; \n        int v_index_3189 = v__3103[(v_l_id_3097 + (8 * v_MWidthC_1 * v_wg_id_3096) + (v_MWidthC_1 * v_i_3098))]; \n        if (v_index_3189 < 0) {\n          v__3115_0 = v__3113; \n        } else {\n          if (v_index_3189 >= v_VLength_3) {\n            v__3115_0 = v__3113; \n          } else {\n            v__3115_0 = v__3105[v_index_3189]; \n          }\n        }\n        v__3117_0 = mult(v__3115_0, v__3104[(v_l_id_3097 + (8 * v_MWidthC_1 * v_wg_id_3096) + (v_MWidthC_1 * v_i_3098))]); \n        v__3111 = add(v__3117_0, v__3111); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_3099 = 0; \n        v__3120[v_l_id_3097] = id(v__3111); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_3100 = get_local_id(0); \n      float v_tmp_3192 = 0.0f; \n      v__3017 = v_tmp_3192; \n      /* reduce_seq */\n      for (int v_i_3101 = 0; v_i_3101 < v_MWidthC_1; v_i_3101 = (1 + v_i_3101)) {\n        v__3017 = add(v__3017, v__3120[(v_i_3101 + (v_MWidthC_1 * v_l_id_3100))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_3102 = 0; \n        v__3125[v_wg_id_3096] = doubleMultiplyAdd(v__3017, v__3107, v__3106[v_wg_id_3096], v__3108); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__3103",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3104",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3105",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__3106",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__3107",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__3108",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__3125",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__3120",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}