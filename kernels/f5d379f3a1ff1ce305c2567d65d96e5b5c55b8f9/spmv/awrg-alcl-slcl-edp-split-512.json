{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__25455, const global float* restrict v__25456, const global float* restrict v__25457, const global float* restrict v__25458, float v__25459, float v__25460, global float* v__25480, global int* v__25462, local float* v__25475, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25464; \n  float v__25466; \n  float v__3017; \n  /* Private Memory */\n  float v__25468_0;\n  \n  float v__25470_0;\n  \n  int v__25474_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2195 = v__25462; \n    local int v_w_id_25448; \n    if (get_local_id(0) == 0) {\n      v_w_id_25448 = atomic_inc(v_work_idx_2195); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25448 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2193; \n        v_work_idx_2193 = 0; \n        int v_l_id_25449 = atomic_inc(&(v_work_idx_2193)); \n        while((v_l_id_25449 < v_MWidthC_1)){\n          float v_tmp_25537 = 0.0f; \n          v__25464 = v_tmp_25537; \n          /* reduce_while_seq */\n          for (int v_i_25450 = 0; v_i_25450 < 512; v_i_25450 = (1 + v_i_25450)) {\n            v__25474_0 = check(v__25464, v__25455[(v_l_id_25449 + (512 * v_MWidthC_1 * v_w_id_25448) + (v_MWidthC_1 * v_i_25450))]); \n            if (v__25474_0) {\n            } else {\n              break;\n            }\n            float v_tmp_25538 = 0.0f; \n            v__25466 = v_tmp_25538; \n            int v_index_25539 = v__25455[(v_l_id_25449 + (512 * v_MWidthC_1 * v_w_id_25448) + (v_MWidthC_1 * v_i_25450))]; \n            if (v_index_25539 < 0) {\n              v__25468_0 = v__25466; \n            } else {\n              if (v_index_25539 >= v_VLength_3) {\n                v__25468_0 = v__25466; \n              } else {\n                v__25468_0 = v__25457[v_index_25539]; \n              }\n            }\n            v__25470_0 = mult(v__25468_0, v__25456[(v_l_id_25449 + (512 * v_MWidthC_1 * v_w_id_25448) + (v_MWidthC_1 * v_i_25450))]); \n            v__25464 = add(v__25470_0, v__25464); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25451 = 0; \n            v__25475[v_l_id_25449] = id(v__25464); \n          }\n          /* end map_seq */\n          v_l_id_25449 = atomic_inc(&(v_work_idx_2193)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25452 = get_local_id(0); \n        float v_tmp_25542 = 0.0f; \n        v__3017 = v_tmp_25542; \n        /* reduce_seq */\n        for (int v_i_25453 = 0; v_i_25453 < v_MWidthC_1; v_i_25453 = (1 + v_i_25453)) {\n          v__3017 = add(v__3017, v__25475[(v_i_25453 + (v_MWidthC_1 * v_l_id_25452))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25454 = 0; \n          v__25480[v_w_id_25448] = doubleMultiplyAdd(v__3017, v__25459, v__25458[v_w_id_25448], v__25460); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25448 = atomic_inc(v_work_idx_2195); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__25455",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25456",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25457",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25458",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25459",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25460",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25462",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25475",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}