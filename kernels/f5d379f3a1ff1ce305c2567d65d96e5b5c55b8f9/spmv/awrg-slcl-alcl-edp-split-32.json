{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__11757, const global float* restrict v__11758, const global float* restrict v__11759, const global float* restrict v__11760, float v__11761, float v__11762, global float* v__11782, global int* v__11764, local float* v__11777, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11766; \n  float v__11768; \n  float v__3017; \n  /* Private Memory */\n  float v__11770_0;\n  \n  float v__11772_0;\n  \n  int v__11776_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_894 = v__11764; \n    local int v_w_id_11750; \n    if (get_local_id(0) == 0) {\n      v_w_id_11750 = atomic_inc(v_work_idx_894); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11750 < v_MHeight_2)){\n      for (int v_l_id_11751 = get_local_id(0); v_l_id_11751 < v_MWidthC_1; v_l_id_11751 = (v_l_id_11751 + get_local_size(0))) {\n        float v_tmp_11841 = 0.0f; \n        v__11766 = v_tmp_11841; \n        /* reduce_while_seq */\n        for (int v_i_11752 = 0; v_i_11752 < 32; v_i_11752 = (1 + v_i_11752)) {\n          v__11776_0 = check(v__11766, v__11757[(v_l_id_11751 + (32 * v_MWidthC_1 * v_w_id_11750) + (v_MWidthC_1 * v_i_11752))]); \n          if (v__11776_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11842 = 0.0f; \n          v__11768 = v_tmp_11842; \n          int v_index_11843 = v__11757[(v_l_id_11751 + (32 * v_MWidthC_1 * v_w_id_11750) + (v_MWidthC_1 * v_i_11752))]; \n          if (v_index_11843 < 0) {\n            v__11770_0 = v__11768; \n          } else {\n            if (v_index_11843 >= v_VLength_3) {\n              v__11770_0 = v__11768; \n            } else {\n              v__11770_0 = v__11759[v_index_11843]; \n            }\n          }\n          v__11772_0 = mult(v__11770_0, v__11758[(v_l_id_11751 + (32 * v_MWidthC_1 * v_w_id_11750) + (v_MWidthC_1 * v_i_11752))]); \n          v__11766 = add(v__11772_0, v__11766); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11753 = 0; \n          v__11777[v_l_id_11751] = id(v__11766); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_888; \n        v_work_idx_888 = 0; \n        int v_l_id_11754 = atomic_inc(&(v_work_idx_888)); \n        while((v_l_id_11754 < 1)){\n          float v_tmp_11846 = 0.0f; \n          v__3017 = v_tmp_11846; \n          /* reduce_seq */\n          for (int v_i_11755 = 0; v_i_11755 < v_MWidthC_1; v_i_11755 = (1 + v_i_11755)) {\n            v__3017 = add(v__3017, v__11777[v_i_11755]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_11756 = 0; \n            v__11782[v_w_id_11750] = doubleMultiplyAdd(v__3017, v__11761, v__11760[v_w_id_11750], v__11762); \n          }\n          /* end map_seq */\n          v_l_id_11754 = atomic_inc(&(v_work_idx_888)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11750 = atomic_inc(v_work_idx_894); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__11757",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11758",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11759",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11760",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11761",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11762",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11764",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11782",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11777",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}