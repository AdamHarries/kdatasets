{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19058, const global float* restrict v__19059, const global float* restrict v__19060, const global float* restrict v__19061, float v__19062, float v__19063, global float* v__19081, global int* v__19065, local float* v__19076, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19067; \n  float v__19069; \n  float v__3017; \n  /* Private Memory */\n  float v__19071_0;\n  \n  float v__19073_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1594 = v__19065; \n    local int v_w_id_19051; \n    if (get_local_id(0) == 0) {\n      v_w_id_19051 = atomic_inc(v_work_idx_1594); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19051 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1592; \n        v_work_idx_1592 = 0; \n        int v_l_id_19052 = atomic_inc(&(v_work_idx_1592)); \n        while((v_l_id_19052 < v_MWidthC_1)){\n          float v_tmp_19132 = 0.0f; \n          v__19067 = v_tmp_19132; \n          /* reduce_seq */\n          for (int v_i_19053 = 0; v_i_19053 < 128; v_i_19053 = (1 + v_i_19053)) {\n            float v_tmp_19133 = 0.0f; \n            v__19069 = v_tmp_19133; \n            int v_index_19134 = v__19058[(v_l_id_19052 + (128 * v_MWidthC_1 * v_w_id_19051) + (v_MWidthC_1 * v_i_19053))]; \n            if (v_index_19134 < 0) {\n              v__19071_0 = v__19069; \n            } else {\n              if (v_index_19134 >= v_VLength_3) {\n                v__19071_0 = v__19069; \n              } else {\n                v__19071_0 = v__19060[v_index_19134]; \n              }\n            }\n            v__19073_0 = mult(v__19071_0, v__19059[(v_l_id_19052 + (128 * v_MWidthC_1 * v_w_id_19051) + (v_MWidthC_1 * v_i_19053))]); \n            v__19067 = add(v__19073_0, v__19067); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19054 = 0; \n            v__19076[v_l_id_19052] = id(v__19067); \n          }\n          /* end map_seq */\n          v_l_id_19052 = atomic_inc(&(v_work_idx_1592)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1587; \n        v_work_idx_1587 = 0; \n        int v_l_id_19055 = atomic_inc(&(v_work_idx_1587)); \n        while((v_l_id_19055 < 1)){\n          float v_tmp_19137 = 0.0f; \n          v__3017 = v_tmp_19137; \n          /* reduce_seq */\n          for (int v_i_19056 = 0; v_i_19056 < v_MWidthC_1; v_i_19056 = (1 + v_i_19056)) {\n            v__3017 = add(v__3017, v__19076[v_i_19056]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19057 = 0; \n            v__19081[v_w_id_19051] = doubleMultiplyAdd(v__3017, v__19062, v__19061[v_w_id_19051], v__19063); \n          }\n          /* end map_seq */\n          v_l_id_19055 = atomic_inc(&(v_work_idx_1587)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19051 = atomic_inc(v_work_idx_1594); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19058",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19059",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19060",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19062",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19063",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19065",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19081",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19076",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}