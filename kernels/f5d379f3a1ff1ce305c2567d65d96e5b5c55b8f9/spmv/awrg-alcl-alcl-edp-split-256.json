{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__22447, const global float* restrict v__22448, const global float* restrict v__22449, const global float* restrict v__22450, float v__22451, float v__22452, global float* v__22472, global int* v__22454, local float* v__22467, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22456; \n  float v__22458; \n  float v__3017; \n  /* Private Memory */\n  float v__22460_0;\n  \n  float v__22462_0;\n  \n  int v__22466_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1917 = v__22454; \n    local int v_w_id_22440; \n    if (get_local_id(0) == 0) {\n      v_w_id_22440 = atomic_inc(v_work_idx_1917); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22440 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1915; \n        v_work_idx_1915 = 0; \n        int v_l_id_22441 = atomic_inc(&(v_work_idx_1915)); \n        while((v_l_id_22441 < v_MWidthC_1)){\n          float v_tmp_22526 = 0.0f; \n          v__22456 = v_tmp_22526; \n          /* reduce_while_seq */\n          for (int v_i_22442 = 0; v_i_22442 < 256; v_i_22442 = (1 + v_i_22442)) {\n            v__22466_0 = check(v__22456, v__22447[(v_l_id_22441 + (256 * v_MWidthC_1 * v_w_id_22440) + (v_MWidthC_1 * v_i_22442))]); \n            if (v__22466_0) {\n            } else {\n              break;\n            }\n            float v_tmp_22527 = 0.0f; \n            v__22458 = v_tmp_22527; \n            int v_index_22528 = v__22447[(v_l_id_22441 + (256 * v_MWidthC_1 * v_w_id_22440) + (v_MWidthC_1 * v_i_22442))]; \n            if (v_index_22528 < 0) {\n              v__22460_0 = v__22458; \n            } else {\n              if (v_index_22528 >= v_VLength_3) {\n                v__22460_0 = v__22458; \n              } else {\n                v__22460_0 = v__22449[v_index_22528]; \n              }\n            }\n            v__22462_0 = mult(v__22460_0, v__22448[(v_l_id_22441 + (256 * v_MWidthC_1 * v_w_id_22440) + (v_MWidthC_1 * v_i_22442))]); \n            v__22456 = add(v__22462_0, v__22456); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22443 = 0; \n            v__22467[v_l_id_22441] = id(v__22456); \n          }\n          /* end map_seq */\n          v_l_id_22441 = atomic_inc(&(v_work_idx_1915)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1910; \n        v_work_idx_1910 = 0; \n        int v_l_id_22444 = atomic_inc(&(v_work_idx_1910)); \n        while((v_l_id_22444 < 1)){\n          float v_tmp_22531 = 0.0f; \n          v__3017 = v_tmp_22531; \n          /* reduce_seq */\n          for (int v_i_22445 = 0; v_i_22445 < v_MWidthC_1; v_i_22445 = (1 + v_i_22445)) {\n            v__3017 = add(v__3017, v__22467[v_i_22445]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22446 = 0; \n            v__22472[v_w_id_22440] = doubleMultiplyAdd(v__3017, v__22451, v__22450[v_w_id_22440], v__22452); \n          }\n          /* end map_seq */\n          v_l_id_22444 = atomic_inc(&(v_work_idx_1910)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22440 = atomic_inc(v_work_idx_1917); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__22447",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22448",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22449",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22450",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22451",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22452",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22454",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22467",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}