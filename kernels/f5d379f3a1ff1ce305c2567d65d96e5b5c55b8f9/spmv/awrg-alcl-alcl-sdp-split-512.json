{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25557, const global float* restrict v__25558, const global float* restrict v__25559, const global float* restrict v__25560, float v__25561, float v__25562, global float* v__25580, global float* v__25570, global int* v__25564, local float* v__25575, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25566; \n  float v__25571; \n  float v__3017; \n  /* Private Memory */\n  float v__25568_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2207 = v__25564; \n    local int v_w_id_25549; \n    if (get_local_id(0) == 0) {\n      v_w_id_25549 = atomic_inc(v_work_idx_2207); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25549 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2205; \n        v_work_idx_2205 = 0; \n        int v_l_id_25550 = atomic_inc(&(v_work_idx_2205)); \n        while((v_l_id_25550 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_25551 = 0; v_i_25551 < 512; v_i_25551 = (1 + v_i_25551)) {\n            float v_tmp_25631 = 0.0f; \n            v__25566 = v_tmp_25631; \n            int v_index_25632 = v__25557[(v_l_id_25550 + (512 * v_MWidthC_1 * v_w_id_25549) + (v_MWidthC_1 * v_i_25551))]; \n            if (v_index_25632 < 0) {\n              v__25568_0 = v__25566; \n            } else {\n              if (v_index_25632 >= v_VLength_3) {\n                v__25568_0 = v__25566; \n              } else {\n                v__25568_0 = v__25559[v_index_25632]; \n              }\n            }\n            v__25570[(511 + (512 * v_MWidthC_1 * v_w_id_25549) + (-1 * v_i_25551) + (512 * v_l_id_25550))] = mult(v__25568_0, v__25558[(v_l_id_25550 + (512 * v_MWidthC_1 * v_w_id_25549) + (v_MWidthC_1 * v_i_25551))]); \n          }\n          /* end map_seq */\n          float v_tmp_25633 = 0.0f; \n          v__25571 = v_tmp_25633; \n          /* reduce_seq */\n          for (int v_i_25552 = 0; v_i_25552 < 512; v_i_25552 = (1 + v_i_25552)) {\n            v__25571 = add(v__25571, v__25570[(v_i_25552 + (512 * v_MWidthC_1 * v_w_id_25549) + (512 * v_l_id_25550))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25553 = 0; \n            v__25575[v_l_id_25550] = id(v__25571); \n          }\n          /* end map_seq */\n          v_l_id_25550 = atomic_inc(&(v_work_idx_2205)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2199; \n        v_work_idx_2199 = 0; \n        int v_l_id_25554 = atomic_inc(&(v_work_idx_2199)); \n        while((v_l_id_25554 < 1)){\n          float v_tmp_25636 = 0.0f; \n          v__3017 = v_tmp_25636; \n          /* reduce_seq */\n          for (int v_i_25555 = 0; v_i_25555 < v_MWidthC_1; v_i_25555 = (1 + v_i_25555)) {\n            v__3017 = add(v__3017, v__25575[v_i_25555]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25556 = 0; \n            v__25580[v_w_id_25549] = doubleMultiplyAdd(v__3017, v__25561, v__25560[v_w_id_25549], v__25562); \n          }\n          /* end map_seq */\n          v_l_id_25554 = atomic_inc(&(v_work_idx_2199)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25549 = atomic_inc(v_work_idx_2207); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25557",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25558",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25559",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25561",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25562",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25570",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25564",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25575",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}