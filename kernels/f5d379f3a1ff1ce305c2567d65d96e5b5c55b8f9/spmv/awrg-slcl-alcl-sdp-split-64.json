{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14857, const global float* restrict v__14858, const global float* restrict v__14859, const global float* restrict v__14860, float v__14861, float v__14862, global float* v__14880, global float* v__14870, global int* v__14864, local float* v__14875, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14866; \n  float v__14871; \n  float v__3017; \n  /* Private Memory */\n  float v__14868_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1186 = v__14864; \n    local int v_w_id_14849; \n    if (get_local_id(0) == 0) {\n      v_w_id_14849 = atomic_inc(v_work_idx_1186); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14849 < v_MHeight_2)){\n      for (int v_l_id_14850 = get_local_id(0); v_l_id_14850 < v_MWidthC_1; v_l_id_14850 = (v_l_id_14850 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_14851 = 0; v_i_14851 < 64; v_i_14851 = (1 + v_i_14851)) {\n          float v_tmp_14936 = 0.0f; \n          v__14866 = v_tmp_14936; \n          int v_index_14937 = v__14857[(v_l_id_14850 + (64 * v_MWidthC_1 * v_w_id_14849) + (v_MWidthC_1 * v_i_14851))]; \n          if (v_index_14937 < 0) {\n            v__14868_0 = v__14866; \n          } else {\n            if (v_index_14937 >= v_VLength_3) {\n              v__14868_0 = v__14866; \n            } else {\n              v__14868_0 = v__14859[v_index_14937]; \n            }\n          }\n          v__14870[(63 + (64 * v_MWidthC_1 * v_w_id_14849) + (-1 * v_i_14851) + (64 * v_l_id_14850))] = mult(v__14868_0, v__14858[(v_l_id_14850 + (64 * v_MWidthC_1 * v_w_id_14849) + (v_MWidthC_1 * v_i_14851))]); \n        }\n        /* end map_seq */\n        float v_tmp_14938 = 0.0f; \n        v__14871 = v_tmp_14938; \n        /* reduce_seq */\n        for (int v_i_14852 = 0; v_i_14852 < 64; v_i_14852 = (1 + v_i_14852)) {\n          v__14871 = add(v__14871, v__14870[(v_i_14852 + (64 * v_MWidthC_1 * v_w_id_14849) + (64 * v_l_id_14850))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14853 = 0; \n          v__14875[v_l_id_14850] = id(v__14871); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1179; \n        v_work_idx_1179 = 0; \n        int v_l_id_14854 = atomic_inc(&(v_work_idx_1179)); \n        while((v_l_id_14854 < 1)){\n          float v_tmp_14941 = 0.0f; \n          v__3017 = v_tmp_14941; \n          /* reduce_seq */\n          for (int v_i_14855 = 0; v_i_14855 < v_MWidthC_1; v_i_14855 = (1 + v_i_14855)) {\n            v__3017 = add(v__3017, v__14875[v_i_14855]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_14856 = 0; \n            v__14880[v_w_id_14849] = doubleMultiplyAdd(v__3017, v__14861, v__14860[v_w_id_14849], v__14862); \n          }\n          /* end map_seq */\n          v_l_id_14854 = atomic_inc(&(v_work_idx_1179)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14849 = atomic_inc(v_work_idx_1186); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14857",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14858",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14859",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14860",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14861",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14862",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14870",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14864",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14875",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}