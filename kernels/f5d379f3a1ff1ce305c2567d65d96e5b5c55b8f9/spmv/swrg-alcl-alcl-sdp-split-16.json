{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7438, const global float* restrict v__7439, const global float* restrict v__7440, const global float* restrict v__7441, float v__7442, float v__7443, global float* v__7460, global float* v__7450, local float* v__7455, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7446; \n  float v__7451; \n  float v__3017; \n  /* Private Memory */\n  float v__7448_0;\n  \n  for (int v_wg_id_7430 = get_group_id(0); v_wg_id_7430 < v_MHeight_2; v_wg_id_7430 = (v_wg_id_7430 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_483; \n      v_work_idx_483 = 0; \n      int v_l_id_7431 = atomic_inc(&(v_work_idx_483)); \n      while((v_l_id_7431 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_7432 = 0; v_i_7432 < 16; v_i_7432 = (1 + v_i_7432)) {\n          float v_tmp_7514 = 0.0f; \n          v__7446 = v_tmp_7514; \n          int v_index_7515 = v__7438[(v_l_id_7431 + (16 * v_MWidthC_1 * v_wg_id_7430) + (v_MWidthC_1 * v_i_7432))]; \n          if (v_index_7515 < 0) {\n            v__7448_0 = v__7446; \n          } else {\n            if (v_index_7515 >= v_VLength_3) {\n              v__7448_0 = v__7446; \n            } else {\n              v__7448_0 = v__7440[v_index_7515]; \n            }\n          }\n          v__7450[(15 + (16 * v_MWidthC_1 * v_wg_id_7430) + (-1 * v_i_7432) + (16 * v_l_id_7431))] = mult(v__7448_0, v__7439[(v_l_id_7431 + (16 * v_MWidthC_1 * v_wg_id_7430) + (v_MWidthC_1 * v_i_7432))]); \n        }\n        /* end map_seq */\n        float v_tmp_7516 = 0.0f; \n        v__7451 = v_tmp_7516; \n        /* reduce_seq */\n        for (int v_i_7433 = 0; v_i_7433 < 16; v_i_7433 = (1 + v_i_7433)) {\n          v__7451 = add(v__7451, v__7450[(v_i_7433 + (16 * v_MWidthC_1 * v_wg_id_7430) + (16 * v_l_id_7431))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7434 = 0; \n          v__7455[v_l_id_7431] = id(v__7451); \n        }\n        /* end map_seq */\n        v_l_id_7431 = atomic_inc(&(v_work_idx_483)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_477; \n      v_work_idx_477 = 0; \n      int v_l_id_7435 = atomic_inc(&(v_work_idx_477)); \n      while((v_l_id_7435 < 1)){\n        float v_tmp_7519 = 0.0f; \n        v__3017 = v_tmp_7519; \n        /* reduce_seq */\n        for (int v_i_7436 = 0; v_i_7436 < v_MWidthC_1; v_i_7436 = (1 + v_i_7436)) {\n          v__3017 = add(v__3017, v__7455[v_i_7436]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7437 = 0; \n          v__7460[v_wg_id_7430] = doubleMultiplyAdd(v__3017, v__7442, v__7441[v_wg_id_7430], v__7443); \n        }\n        /* end map_seq */\n        v_l_id_7435 = atomic_inc(&(v_work_idx_477)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7438",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7439",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7440",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7441",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7442",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7443",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7450",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__7460",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7455",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}