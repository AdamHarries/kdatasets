{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24013, const global float* restrict v__24014, const global float* restrict v__24015, const global float* restrict v__24016, float v__24017, float v__24018, global float* v__24035, local float* v__24030, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24021; \n  float v__24023; \n  float v__3017; \n  /* Private Memory */\n  float v__24025_0;\n  \n  float v__24027_0;\n  \n  for (int v_wg_id_24006 = get_group_id(0); v_wg_id_24006 < v_MHeight_2; v_wg_id_24006 = (v_wg_id_24006 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2053; \n      v_work_idx_2053 = 0; \n      int v_l_id_24007 = atomic_inc(&(v_work_idx_2053)); \n      while((v_l_id_24007 < v_MWidthC_1)){\n        float v_tmp_24089 = 0.0f; \n        v__24021 = v_tmp_24089; \n        /* reduce_seq */\n        for (int v_i_24008 = 0; v_i_24008 < 512; v_i_24008 = (1 + v_i_24008)) {\n          float v_tmp_24090 = 0.0f; \n          v__24023 = v_tmp_24090; \n          int v_index_24091 = v__24013[(v_l_id_24007 + (512 * v_MWidthC_1 * v_wg_id_24006) + (v_MWidthC_1 * v_i_24008))]; \n          if (v_index_24091 < 0) {\n            v__24025_0 = v__24023; \n          } else {\n            if (v_index_24091 >= v_VLength_3) {\n              v__24025_0 = v__24023; \n            } else {\n              v__24025_0 = v__24015[v_index_24091]; \n            }\n          }\n          v__24027_0 = mult(v__24025_0, v__24014[(v_l_id_24007 + (512 * v_MWidthC_1 * v_wg_id_24006) + (v_MWidthC_1 * v_i_24008))]); \n          v__24021 = add(v__24027_0, v__24021); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24009 = 0; \n          v__24030[v_l_id_24007] = id(v__24021); \n        }\n        /* end map_seq */\n        v_l_id_24007 = atomic_inc(&(v_work_idx_2053)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2048; \n      v_work_idx_2048 = 0; \n      int v_l_id_24010 = atomic_inc(&(v_work_idx_2048)); \n      while((v_l_id_24010 < 1)){\n        float v_tmp_24094 = 0.0f; \n        v__3017 = v_tmp_24094; \n        /* reduce_seq */\n        for (int v_i_24011 = 0; v_i_24011 < v_MWidthC_1; v_i_24011 = (1 + v_i_24011)) {\n          v__3017 = add(v__3017, v__24030[v_i_24011]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24012 = 0; \n          v__24035[v_wg_id_24006] = doubleMultiplyAdd(v__3017, v__24017, v__24016[v_wg_id_24006], v__24018); \n        }\n        /* end map_seq */\n        v_l_id_24010 = atomic_inc(&(v_work_idx_2048)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24013",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24014",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24015",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24017",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24018",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__24035",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24030",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}