{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__21645, const global float* restrict v__21646, const global float* restrict v__21647, const global float* restrict v__21648, float v__21649, float v__21650, global float* v__21670, global int* v__21652, local float* v__21665, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21654; \n  float v__21656; \n  float v__3017; \n  /* Private Memory */\n  float v__21658_0;\n  \n  float v__21660_0;\n  \n  int v__21664_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1830 = v__21652; \n    local int v_w_id_21638; \n    if (get_local_id(0) == 0) {\n      v_w_id_21638 = atomic_inc(v_work_idx_1830); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21638 < v_MHeight_2)){\n      for (int v_l_id_21639 = get_local_id(0); v_l_id_21639 < v_MWidthC_1; v_l_id_21639 = (v_l_id_21639 + get_local_size(0))) {\n        float v_tmp_21729 = 0.0f; \n        v__21654 = v_tmp_21729; \n        /* reduce_while_seq */\n        for (int v_i_21640 = 0; v_i_21640 < 256; v_i_21640 = (1 + v_i_21640)) {\n          v__21664_0 = check(v__21654, v__21645[(v_l_id_21639 + (256 * v_MWidthC_1 * v_w_id_21638) + (v_MWidthC_1 * v_i_21640))]); \n          if (v__21664_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21730 = 0.0f; \n          v__21656 = v_tmp_21730; \n          int v_index_21731 = v__21645[(v_l_id_21639 + (256 * v_MWidthC_1 * v_w_id_21638) + (v_MWidthC_1 * v_i_21640))]; \n          if (v_index_21731 < 0) {\n            v__21658_0 = v__21656; \n          } else {\n            if (v_index_21731 >= v_VLength_3) {\n              v__21658_0 = v__21656; \n            } else {\n              v__21658_0 = v__21647[v_index_21731]; \n            }\n          }\n          v__21660_0 = mult(v__21658_0, v__21646[(v_l_id_21639 + (256 * v_MWidthC_1 * v_w_id_21638) + (v_MWidthC_1 * v_i_21640))]); \n          v__21654 = add(v__21660_0, v__21654); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21641 = 0; \n          v__21665[v_l_id_21639] = id(v__21654); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1824; \n        v_work_idx_1824 = 0; \n        int v_l_id_21642 = atomic_inc(&(v_work_idx_1824)); \n        while((v_l_id_21642 < 1)){\n          float v_tmp_21734 = 0.0f; \n          v__3017 = v_tmp_21734; \n          /* reduce_seq */\n          for (int v_i_21643 = 0; v_i_21643 < v_MWidthC_1; v_i_21643 = (1 + v_i_21643)) {\n            v__3017 = add(v__3017, v__21665[v_i_21643]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21644 = 0; \n            v__21670[v_w_id_21638] = doubleMultiplyAdd(v__3017, v__21649, v__21648[v_w_id_21638], v__21650); \n          }\n          /* end map_seq */\n          v_l_id_21642 = atomic_inc(&(v_work_idx_1824)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21638 = atomic_inc(v_work_idx_1830); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21645",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21646",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21647",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21648",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21649",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21650",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21652",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21665",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}