{
  "name" : "swrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__6986, const global float* restrict v__6987, const global float* restrict v__6988, const global float* restrict v__6989, float v__6990, float v__6991, global float* v__7004, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__6994; \n  float v__6996; \n  /* Private Memory */\n  float v__6998_0;\n  \n  float v__7000_0;\n  \n  for (int v_wg_id_6982 = get_group_id(0); v_wg_id_6982 < ((v_MHeight_2)/(16)); v_wg_id_6982 = (v_wg_id_6982 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_438; \n      v_work_idx_438 = 0; \n      int v_l_id_6983 = atomic_inc(&(v_work_idx_438)); \n      while((v_l_id_6983 < 16)){\n        float v_tmp_7043 = 0.0f; \n        v__6994 = v_tmp_7043; \n        /* reduce_seq */\n        for (int v_i_6984 = 0; v_i_6984 < v_MWidthC_1; v_i_6984 = (1 + v_i_6984)) {\n          float v_tmp_7044 = 0.0f; \n          v__6996 = v_tmp_7044; \n          int v_index_7045 = v__6986[(v_i_6984 + (16 * v_MWidthC_1 * v_wg_id_6982) + (v_MWidthC_1 * v_l_id_6983))]; \n          if (v_index_7045 < 0) {\n            v__6998_0 = v__6996; \n          } else {\n            if (v_index_7045 >= v_VLength_3) {\n              v__6998_0 = v__6996; \n            } else {\n              v__6998_0 = v__6988[v_index_7045]; \n            }\n          }\n          v__7000_0 = mult(v__6998_0, v__6987[(v_i_6984 + (16 * v_MWidthC_1 * v_wg_id_6982) + (v_MWidthC_1 * v_l_id_6983))]); \n          v__6994 = add(v__7000_0, v__6994); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_6985 = 0; \n          v__7004[(v_l_id_6983 + (16 * v_wg_id_6982))] = doubleMultiplyAdd(v__6994, v__6990, v__6989[(v_l_id_6983 + (16 * v_wg_id_6982))], v__6991); \n        }\n        /* end map_seq */\n        v_l_id_6983 = atomic_inc(&(v_work_idx_438)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__6986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6988",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__6989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__6990",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__6991",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__7004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}