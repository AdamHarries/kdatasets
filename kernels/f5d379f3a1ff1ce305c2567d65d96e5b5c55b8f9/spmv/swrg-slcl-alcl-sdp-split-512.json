{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23091, const global float* restrict v__23092, const global float* restrict v__23093, const global float* restrict v__23094, float v__23095, float v__23096, global float* v__23113, global float* v__23103, local float* v__23108, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23099; \n  float v__23104; \n  float v__3017; \n  /* Private Memory */\n  float v__23101_0;\n  \n  for (int v_wg_id_23083 = get_group_id(0); v_wg_id_23083 < v_MHeight_2; v_wg_id_23083 = (v_wg_id_23083 + get_num_groups(0))) {\n    for (int v_l_id_23084 = get_local_id(0); v_l_id_23084 < v_MWidthC_1; v_l_id_23084 = (v_l_id_23084 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_23085 = 0; v_i_23085 < 512; v_i_23085 = (1 + v_i_23085)) {\n        float v_tmp_23172 = 0.0f; \n        v__23099 = v_tmp_23172; \n        int v_index_23173 = v__23091[(v_l_id_23084 + (512 * v_MWidthC_1 * v_wg_id_23083) + (v_MWidthC_1 * v_i_23085))]; \n        if (v_index_23173 < 0) {\n          v__23101_0 = v__23099; \n        } else {\n          if (v_index_23173 >= v_VLength_3) {\n            v__23101_0 = v__23099; \n          } else {\n            v__23101_0 = v__23093[v_index_23173]; \n          }\n        }\n        v__23103[(511 + (512 * v_MWidthC_1 * v_wg_id_23083) + (-1 * v_i_23085) + (512 * v_l_id_23084))] = mult(v__23101_0, v__23092[(v_l_id_23084 + (512 * v_MWidthC_1 * v_wg_id_23083) + (v_MWidthC_1 * v_i_23085))]); \n      }\n      /* end map_seq */\n      float v_tmp_23174 = 0.0f; \n      v__23104 = v_tmp_23174; \n      /* reduce_seq */\n      for (int v_i_23086 = 0; v_i_23086 < 512; v_i_23086 = (1 + v_i_23086)) {\n        v__23104 = add(v__23104, v__23103[(v_i_23086 + (512 * v_MWidthC_1 * v_wg_id_23083) + (512 * v_l_id_23084))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23087 = 0; \n        v__23108[v_l_id_23084] = id(v__23104); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1962; \n      v_work_idx_1962 = 0; \n      int v_l_id_23088 = atomic_inc(&(v_work_idx_1962)); \n      while((v_l_id_23088 < 1)){\n        float v_tmp_23177 = 0.0f; \n        v__3017 = v_tmp_23177; \n        /* reduce_seq */\n        for (int v_i_23089 = 0; v_i_23089 < v_MWidthC_1; v_i_23089 = (1 + v_i_23089)) {\n          v__3017 = add(v__3017, v__23108[v_i_23089]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23090 = 0; \n          v__23113[v_wg_id_23083] = doubleMultiplyAdd(v__3017, v__23095, v__23094[v_wg_id_23083], v__23096); \n        }\n        /* end map_seq */\n        v_l_id_23088 = atomic_inc(&(v_work_idx_1962)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23091",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23092",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23093",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23094",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23095",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23096",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23103",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23108",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}