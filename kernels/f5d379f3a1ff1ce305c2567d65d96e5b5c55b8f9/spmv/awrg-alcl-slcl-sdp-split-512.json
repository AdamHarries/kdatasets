{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25263, const global float* restrict v__25264, const global float* restrict v__25265, const global float* restrict v__25266, float v__25267, float v__25268, global float* v__25286, global float* v__25276, global int* v__25270, local float* v__25281, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25272; \n  float v__25277; \n  float v__3017; \n  /* Private Memory */\n  float v__25274_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2175 = v__25270; \n    local int v_w_id_25255; \n    if (get_local_id(0) == 0) {\n      v_w_id_25255 = atomic_inc(v_work_idx_2175); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25255 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2173; \n        v_work_idx_2173 = 0; \n        int v_l_id_25256 = atomic_inc(&(v_work_idx_2173)); \n        while((v_l_id_25256 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_25257 = 0; v_i_25257 < 512; v_i_25257 = (1 + v_i_25257)) {\n            float v_tmp_25340 = 0.0f; \n            v__25272 = v_tmp_25340; \n            int v_index_25341 = v__25263[(v_l_id_25256 + (512 * v_MWidthC_1 * v_w_id_25255) + (v_MWidthC_1 * v_i_25257))]; \n            if (v_index_25341 < 0) {\n              v__25274_0 = v__25272; \n            } else {\n              if (v_index_25341 >= v_VLength_3) {\n                v__25274_0 = v__25272; \n              } else {\n                v__25274_0 = v__25265[v_index_25341]; \n              }\n            }\n            v__25276[(511 + (512 * v_MWidthC_1 * v_w_id_25255) + (-1 * v_i_25257) + (512 * v_l_id_25256))] = mult(v__25274_0, v__25264[(v_l_id_25256 + (512 * v_MWidthC_1 * v_w_id_25255) + (v_MWidthC_1 * v_i_25257))]); \n          }\n          /* end map_seq */\n          float v_tmp_25342 = 0.0f; \n          v__25277 = v_tmp_25342; \n          /* reduce_seq */\n          for (int v_i_25258 = 0; v_i_25258 < 512; v_i_25258 = (1 + v_i_25258)) {\n            v__25277 = add(v__25277, v__25276[(v_i_25258 + (512 * v_MWidthC_1 * v_w_id_25255) + (512 * v_l_id_25256))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25259 = 0; \n            v__25281[v_l_id_25256] = id(v__25277); \n          }\n          /* end map_seq */\n          v_l_id_25256 = atomic_inc(&(v_work_idx_2173)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25260 = get_local_id(0); \n        float v_tmp_25345 = 0.0f; \n        v__3017 = v_tmp_25345; \n        /* reduce_seq */\n        for (int v_i_25261 = 0; v_i_25261 < v_MWidthC_1; v_i_25261 = (1 + v_i_25261)) {\n          v__3017 = add(v__3017, v__25281[(v_i_25261 + (v_MWidthC_1 * v_l_id_25260))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25262 = 0; \n          v__25286[v_w_id_25255] = doubleMultiplyAdd(v__3017, v__25267, v__25266[v_w_id_25255], v__25268); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25255 = atomic_inc(v_work_idx_2175); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25263",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25264",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25265",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25266",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25267",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25268",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25276",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25270",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25286",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25281",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}