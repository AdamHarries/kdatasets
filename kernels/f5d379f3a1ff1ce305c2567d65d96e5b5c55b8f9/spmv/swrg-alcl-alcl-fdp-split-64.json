{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14125, const global float* restrict v__14126, const global float* restrict v__14127, const global float* restrict v__14128, float v__14129, float v__14130, global float* v__14147, local float* v__14142, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14133; \n  float v__14135; \n  float v__3017; \n  /* Private Memory */\n  float v__14137_0;\n  \n  float v__14139_0;\n  \n  for (int v_wg_id_14118 = get_group_id(0); v_wg_id_14118 < v_MHeight_2; v_wg_id_14118 = (v_wg_id_14118 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1117; \n      v_work_idx_1117 = 0; \n      int v_l_id_14119 = atomic_inc(&(v_work_idx_1117)); \n      while((v_l_id_14119 < v_MWidthC_1)){\n        float v_tmp_14201 = 0.0f; \n        v__14133 = v_tmp_14201; \n        /* reduce_seq */\n        for (int v_i_14120 = 0; v_i_14120 < 64; v_i_14120 = (1 + v_i_14120)) {\n          float v_tmp_14202 = 0.0f; \n          v__14135 = v_tmp_14202; \n          int v_index_14203 = v__14125[(v_l_id_14119 + (64 * v_MWidthC_1 * v_wg_id_14118) + (v_MWidthC_1 * v_i_14120))]; \n          if (v_index_14203 < 0) {\n            v__14137_0 = v__14135; \n          } else {\n            if (v_index_14203 >= v_VLength_3) {\n              v__14137_0 = v__14135; \n            } else {\n              v__14137_0 = v__14127[v_index_14203]; \n            }\n          }\n          v__14139_0 = mult(v__14137_0, v__14126[(v_l_id_14119 + (64 * v_MWidthC_1 * v_wg_id_14118) + (v_MWidthC_1 * v_i_14120))]); \n          v__14133 = add(v__14139_0, v__14133); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14121 = 0; \n          v__14142[v_l_id_14119] = id(v__14133); \n        }\n        /* end map_seq */\n        v_l_id_14119 = atomic_inc(&(v_work_idx_1117)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1112; \n      v_work_idx_1112 = 0; \n      int v_l_id_14122 = atomic_inc(&(v_work_idx_1112)); \n      while((v_l_id_14122 < 1)){\n        float v_tmp_14206 = 0.0f; \n        v__3017 = v_tmp_14206; \n        /* reduce_seq */\n        for (int v_i_14123 = 0; v_i_14123 < v_MWidthC_1; v_i_14123 = (1 + v_i_14123)) {\n          v__3017 = add(v__3017, v__14142[v_i_14123]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14124 = 0; \n          v__14147[v_wg_id_14118] = doubleMultiplyAdd(v__3017, v__14129, v__14128[v_wg_id_14118], v__14130); \n        }\n        /* end map_seq */\n        v_l_id_14122 = atomic_inc(&(v_work_idx_1112)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__14125",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14126",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14127",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14129",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14130",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14147",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14142",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}