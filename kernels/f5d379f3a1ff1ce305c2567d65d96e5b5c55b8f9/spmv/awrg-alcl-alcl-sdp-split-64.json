{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15669, const global float* restrict v__15670, const global float* restrict v__15671, const global float* restrict v__15672, float v__15673, float v__15674, global float* v__15692, global float* v__15682, global int* v__15676, local float* v__15687, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15678; \n  float v__15683; \n  float v__3017; \n  /* Private Memory */\n  float v__15680_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1271 = v__15676; \n    local int v_w_id_15661; \n    if (get_local_id(0) == 0) {\n      v_w_id_15661 = atomic_inc(v_work_idx_1271); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15661 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1269; \n        v_work_idx_1269 = 0; \n        int v_l_id_15662 = atomic_inc(&(v_work_idx_1269)); \n        while((v_l_id_15662 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15663 = 0; v_i_15663 < 64; v_i_15663 = (1 + v_i_15663)) {\n            float v_tmp_15743 = 0.0f; \n            v__15678 = v_tmp_15743; \n            int v_index_15744 = v__15669[(v_l_id_15662 + (64 * v_MWidthC_1 * v_w_id_15661) + (v_MWidthC_1 * v_i_15663))]; \n            if (v_index_15744 < 0) {\n              v__15680_0 = v__15678; \n            } else {\n              if (v_index_15744 >= v_VLength_3) {\n                v__15680_0 = v__15678; \n              } else {\n                v__15680_0 = v__15671[v_index_15744]; \n              }\n            }\n            v__15682[(63 + (64 * v_MWidthC_1 * v_w_id_15661) + (-1 * v_i_15663) + (64 * v_l_id_15662))] = mult(v__15680_0, v__15670[(v_l_id_15662 + (64 * v_MWidthC_1 * v_w_id_15661) + (v_MWidthC_1 * v_i_15663))]); \n          }\n          /* end map_seq */\n          float v_tmp_15745 = 0.0f; \n          v__15683 = v_tmp_15745; \n          /* reduce_seq */\n          for (int v_i_15664 = 0; v_i_15664 < 64; v_i_15664 = (1 + v_i_15664)) {\n            v__15683 = add(v__15683, v__15682[(v_i_15664 + (64 * v_MWidthC_1 * v_w_id_15661) + (64 * v_l_id_15662))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15665 = 0; \n            v__15687[v_l_id_15662] = id(v__15683); \n          }\n          /* end map_seq */\n          v_l_id_15662 = atomic_inc(&(v_work_idx_1269)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1263; \n        v_work_idx_1263 = 0; \n        int v_l_id_15666 = atomic_inc(&(v_work_idx_1263)); \n        while((v_l_id_15666 < 1)){\n          float v_tmp_15748 = 0.0f; \n          v__3017 = v_tmp_15748; \n          /* reduce_seq */\n          for (int v_i_15667 = 0; v_i_15667 < v_MWidthC_1; v_i_15667 = (1 + v_i_15667)) {\n            v__3017 = add(v__3017, v__15687[v_i_15667]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15668 = 0; \n            v__15692[v_w_id_15661] = doubleMultiplyAdd(v__3017, v__15673, v__15672[v_w_id_15661], v__15674); \n          }\n          /* end map_seq */\n          v_l_id_15666 = atomic_inc(&(v_work_idx_1263)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15661 = atomic_inc(v_work_idx_1271); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15669",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15670",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15671",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15673",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15674",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15682",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15676",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15687",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}