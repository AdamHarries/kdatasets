{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13203, const global float* restrict v__13204, const global float* restrict v__13205, const global float* restrict v__13206, float v__13207, float v__13208, global float* v__13225, global float* v__13215, local float* v__13220, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13211; \n  float v__13216; \n  float v__3017; \n  /* Private Memory */\n  float v__13213_0;\n  \n  for (int v_wg_id_13195 = get_group_id(0); v_wg_id_13195 < v_MHeight_2; v_wg_id_13195 = (v_wg_id_13195 + get_num_groups(0))) {\n    for (int v_l_id_13196 = get_local_id(0); v_l_id_13196 < v_MWidthC_1; v_l_id_13196 = (v_l_id_13196 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_13197 = 0; v_i_13197 < 64; v_i_13197 = (1 + v_i_13197)) {\n        float v_tmp_13284 = 0.0f; \n        v__13211 = v_tmp_13284; \n        int v_index_13285 = v__13203[(v_l_id_13196 + (64 * v_MWidthC_1 * v_wg_id_13195) + (v_MWidthC_1 * v_i_13197))]; \n        if (v_index_13285 < 0) {\n          v__13213_0 = v__13211; \n        } else {\n          if (v_index_13285 >= v_VLength_3) {\n            v__13213_0 = v__13211; \n          } else {\n            v__13213_0 = v__13205[v_index_13285]; \n          }\n        }\n        v__13215[(63 + (64 * v_MWidthC_1 * v_wg_id_13195) + (-1 * v_i_13197) + (64 * v_l_id_13196))] = mult(v__13213_0, v__13204[(v_l_id_13196 + (64 * v_MWidthC_1 * v_wg_id_13195) + (v_MWidthC_1 * v_i_13197))]); \n      }\n      /* end map_seq */\n      float v_tmp_13286 = 0.0f; \n      v__13216 = v_tmp_13286; \n      /* reduce_seq */\n      for (int v_i_13198 = 0; v_i_13198 < 64; v_i_13198 = (1 + v_i_13198)) {\n        v__13216 = add(v__13216, v__13215[(v_i_13198 + (64 * v_MWidthC_1 * v_wg_id_13195) + (64 * v_l_id_13196))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13199 = 0; \n        v__13220[v_l_id_13196] = id(v__13216); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1026; \n      v_work_idx_1026 = 0; \n      int v_l_id_13200 = atomic_inc(&(v_work_idx_1026)); \n      while((v_l_id_13200 < 1)){\n        float v_tmp_13289 = 0.0f; \n        v__3017 = v_tmp_13289; \n        /* reduce_seq */\n        for (int v_i_13201 = 0; v_i_13201 < v_MWidthC_1; v_i_13201 = (1 + v_i_13201)) {\n          v__3017 = add(v__3017, v__13220[v_i_13201]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13202 = 0; \n          v__13225[v_wg_id_13195] = doubleMultiplyAdd(v__3017, v__13207, v__13206[v_wg_id_13195], v__13208); \n        }\n        /* end map_seq */\n        v_l_id_13200 = atomic_inc(&(v_work_idx_1026)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13203",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13204",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13205",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13207",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13208",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13215",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13225",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13220",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}