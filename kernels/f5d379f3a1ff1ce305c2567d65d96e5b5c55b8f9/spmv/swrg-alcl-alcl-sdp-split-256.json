{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20622, const global float* restrict v__20623, const global float* restrict v__20624, const global float* restrict v__20625, float v__20626, float v__20627, global float* v__20644, global float* v__20634, local float* v__20639, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20630; \n  float v__20635; \n  float v__3017; \n  /* Private Memory */\n  float v__20632_0;\n  \n  for (int v_wg_id_20614 = get_group_id(0); v_wg_id_20614 < v_MHeight_2; v_wg_id_20614 = (v_wg_id_20614 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1731; \n      v_work_idx_1731 = 0; \n      int v_l_id_20615 = atomic_inc(&(v_work_idx_1731)); \n      while((v_l_id_20615 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20616 = 0; v_i_20616 < 256; v_i_20616 = (1 + v_i_20616)) {\n          float v_tmp_20698 = 0.0f; \n          v__20630 = v_tmp_20698; \n          int v_index_20699 = v__20622[(v_l_id_20615 + (256 * v_MWidthC_1 * v_wg_id_20614) + (v_MWidthC_1 * v_i_20616))]; \n          if (v_index_20699 < 0) {\n            v__20632_0 = v__20630; \n          } else {\n            if (v_index_20699 >= v_VLength_3) {\n              v__20632_0 = v__20630; \n            } else {\n              v__20632_0 = v__20624[v_index_20699]; \n            }\n          }\n          v__20634[(255 + (256 * v_MWidthC_1 * v_wg_id_20614) + (-1 * v_i_20616) + (256 * v_l_id_20615))] = mult(v__20632_0, v__20623[(v_l_id_20615 + (256 * v_MWidthC_1 * v_wg_id_20614) + (v_MWidthC_1 * v_i_20616))]); \n        }\n        /* end map_seq */\n        float v_tmp_20700 = 0.0f; \n        v__20635 = v_tmp_20700; \n        /* reduce_seq */\n        for (int v_i_20617 = 0; v_i_20617 < 256; v_i_20617 = (1 + v_i_20617)) {\n          v__20635 = add(v__20635, v__20634[(v_i_20617 + (256 * v_MWidthC_1 * v_wg_id_20614) + (256 * v_l_id_20615))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20618 = 0; \n          v__20639[v_l_id_20615] = id(v__20635); \n        }\n        /* end map_seq */\n        v_l_id_20615 = atomic_inc(&(v_work_idx_1731)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1725; \n      v_work_idx_1725 = 0; \n      int v_l_id_20619 = atomic_inc(&(v_work_idx_1725)); \n      while((v_l_id_20619 < 1)){\n        float v_tmp_20703 = 0.0f; \n        v__3017 = v_tmp_20703; \n        /* reduce_seq */\n        for (int v_i_20620 = 0; v_i_20620 < v_MWidthC_1; v_i_20620 = (1 + v_i_20620)) {\n          v__3017 = add(v__3017, v__20639[v_i_20620]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20621 = 0; \n          v__20644[v_wg_id_20614] = doubleMultiplyAdd(v__3017, v__20626, v__20625[v_wg_id_20614], v__20627); \n        }\n        /* end map_seq */\n        v_l_id_20619 = atomic_inc(&(v_work_idx_1725)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20622",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20623",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20624",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20626",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20627",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20634",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20644",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20639",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}