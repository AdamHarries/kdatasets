{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__6611, const global float* restrict v__6612, const global float* restrict v__6613, const global float* restrict v__6614, float v__6615, float v__6616, global float* v__6633, global float* v__6623, local float* v__6628, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__6619; \n  float v__6624; \n  float v__3017; \n  /* Private Memory */\n  float v__6621_0;\n  \n  for (int v_wg_id_6603 = get_group_id(0); v_wg_id_6603 < v_MHeight_2; v_wg_id_6603 = (v_wg_id_6603 + get_num_groups(0))) {\n    for (int v_l_id_6604 = get_local_id(0); v_l_id_6604 < v_MWidthC_1; v_l_id_6604 = (v_l_id_6604 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_6605 = 0; v_i_6605 < 16; v_i_6605 = (1 + v_i_6605)) {\n        float v_tmp_6692 = 0.0f; \n        v__6619 = v_tmp_6692; \n        int v_index_6693 = v__6611[(v_l_id_6604 + (16 * v_MWidthC_1 * v_wg_id_6603) + (v_MWidthC_1 * v_i_6605))]; \n        if (v_index_6693 < 0) {\n          v__6621_0 = v__6619; \n        } else {\n          if (v_index_6693 >= v_VLength_3) {\n            v__6621_0 = v__6619; \n          } else {\n            v__6621_0 = v__6613[v_index_6693]; \n          }\n        }\n        v__6623[(15 + (16 * v_MWidthC_1 * v_wg_id_6603) + (-1 * v_i_6605) + (16 * v_l_id_6604))] = mult(v__6621_0, v__6612[(v_l_id_6604 + (16 * v_MWidthC_1 * v_wg_id_6603) + (v_MWidthC_1 * v_i_6605))]); \n      }\n      /* end map_seq */\n      float v_tmp_6694 = 0.0f; \n      v__6624 = v_tmp_6694; \n      /* reduce_seq */\n      for (int v_i_6606 = 0; v_i_6606 < 16; v_i_6606 = (1 + v_i_6606)) {\n        v__6624 = add(v__6624, v__6623[(v_i_6606 + (16 * v_MWidthC_1 * v_wg_id_6603) + (16 * v_l_id_6604))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_6607 = 0; \n        v__6628[v_l_id_6604] = id(v__6624); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_402; \n      v_work_idx_402 = 0; \n      int v_l_id_6608 = atomic_inc(&(v_work_idx_402)); \n      while((v_l_id_6608 < 1)){\n        float v_tmp_6697 = 0.0f; \n        v__3017 = v_tmp_6697; \n        /* reduce_seq */\n        for (int v_i_6609 = 0; v_i_6609 < v_MWidthC_1; v_i_6609 = (1 + v_i_6609)) {\n          v__3017 = add(v__3017, v__6628[v_i_6609]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_6610 = 0; \n          v__6633[v_wg_id_6603] = doubleMultiplyAdd(v__3017, v__6615, v__6614[v_wg_id_6603], v__6616); \n        }\n        /* end map_seq */\n        v_l_id_6608 = atomic_inc(&(v_work_idx_402)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__6611",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6612",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6613",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__6614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__6615",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__6616",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__6623",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__6633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__6628",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}