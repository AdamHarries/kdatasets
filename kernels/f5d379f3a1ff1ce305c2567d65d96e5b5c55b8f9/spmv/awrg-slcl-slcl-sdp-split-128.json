{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17844, const global float* restrict v__17845, const global float* restrict v__17846, const global float* restrict v__17847, float v__17848, float v__17849, global float* v__17867, global float* v__17857, global int* v__17851, local float* v__17862, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17853; \n  float v__17858; \n  float v__3017; \n  /* Private Memory */\n  float v__17855_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1469 = v__17851; \n    local int v_w_id_17836; \n    if (get_local_id(0) == 0) {\n      v_w_id_17836 = atomic_inc(v_work_idx_1469); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17836 < v_MHeight_2)){\n      for (int v_l_id_17837 = get_local_id(0); v_l_id_17837 < v_MWidthC_1; v_l_id_17837 = (v_l_id_17837 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_17838 = 0; v_i_17838 < 128; v_i_17838 = (1 + v_i_17838)) {\n          float v_tmp_17926 = 0.0f; \n          v__17853 = v_tmp_17926; \n          int v_index_17927 = v__17844[(v_l_id_17837 + (128 * v_MWidthC_1 * v_w_id_17836) + (v_MWidthC_1 * v_i_17838))]; \n          if (v_index_17927 < 0) {\n            v__17855_0 = v__17853; \n          } else {\n            if (v_index_17927 >= v_VLength_3) {\n              v__17855_0 = v__17853; \n            } else {\n              v__17855_0 = v__17846[v_index_17927]; \n            }\n          }\n          v__17857[(127 + (128 * v_MWidthC_1 * v_w_id_17836) + (-1 * v_i_17838) + (128 * v_l_id_17837))] = mult(v__17855_0, v__17845[(v_l_id_17837 + (128 * v_MWidthC_1 * v_w_id_17836) + (v_MWidthC_1 * v_i_17838))]); \n        }\n        /* end map_seq */\n        float v_tmp_17928 = 0.0f; \n        v__17858 = v_tmp_17928; \n        /* reduce_seq */\n        for (int v_i_17839 = 0; v_i_17839 < 128; v_i_17839 = (1 + v_i_17839)) {\n          v__17858 = add(v__17858, v__17857[(v_i_17839 + (128 * v_MWidthC_1 * v_w_id_17836) + (128 * v_l_id_17837))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17840 = 0; \n          v__17862[v_l_id_17837] = id(v__17858); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_17841 = get_local_id(0); \n        float v_tmp_17931 = 0.0f; \n        v__3017 = v_tmp_17931; \n        /* reduce_seq */\n        for (int v_i_17842 = 0; v_i_17842 < v_MWidthC_1; v_i_17842 = (1 + v_i_17842)) {\n          v__3017 = add(v__3017, v__17862[(v_i_17842 + (v_MWidthC_1 * v_l_id_17841))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17843 = 0; \n          v__17867[v_w_id_17836] = doubleMultiplyAdd(v__3017, v__17848, v__17847[v_w_id_17836], v__17849); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17836 = atomic_inc(v_work_idx_1469); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17844",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17845",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17846",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17848",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17849",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17857",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17851",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17867",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17862",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}