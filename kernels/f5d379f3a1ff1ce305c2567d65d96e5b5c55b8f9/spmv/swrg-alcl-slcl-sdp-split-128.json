{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17026, const global float* restrict v__17027, const global float* restrict v__17028, const global float* restrict v__17029, float v__17030, float v__17031, global float* v__17048, global float* v__17038, local float* v__17043, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17034; \n  float v__17039; \n  float v__3017; \n  /* Private Memory */\n  float v__17036_0;\n  \n  for (int v_wg_id_17018 = get_group_id(0); v_wg_id_17018 < v_MHeight_2; v_wg_id_17018 = (v_wg_id_17018 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1390; \n      v_work_idx_1390 = 0; \n      int v_l_id_17019 = atomic_inc(&(v_work_idx_1390)); \n      while((v_l_id_17019 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_17020 = 0; v_i_17020 < 128; v_i_17020 = (1 + v_i_17020)) {\n          float v_tmp_17105 = 0.0f; \n          v__17034 = v_tmp_17105; \n          int v_index_17106 = v__17026[(v_l_id_17019 + (128 * v_MWidthC_1 * v_wg_id_17018) + (v_MWidthC_1 * v_i_17020))]; \n          if (v_index_17106 < 0) {\n            v__17036_0 = v__17034; \n          } else {\n            if (v_index_17106 >= v_VLength_3) {\n              v__17036_0 = v__17034; \n            } else {\n              v__17036_0 = v__17028[v_index_17106]; \n            }\n          }\n          v__17038[(127 + (128 * v_MWidthC_1 * v_wg_id_17018) + (-1 * v_i_17020) + (128 * v_l_id_17019))] = mult(v__17036_0, v__17027[(v_l_id_17019 + (128 * v_MWidthC_1 * v_wg_id_17018) + (v_MWidthC_1 * v_i_17020))]); \n        }\n        /* end map_seq */\n        float v_tmp_17107 = 0.0f; \n        v__17039 = v_tmp_17107; \n        /* reduce_seq */\n        for (int v_i_17021 = 0; v_i_17021 < 128; v_i_17021 = (1 + v_i_17021)) {\n          v__17039 = add(v__17039, v__17038[(v_i_17021 + (128 * v_MWidthC_1 * v_wg_id_17018) + (128 * v_l_id_17019))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17022 = 0; \n          v__17043[v_l_id_17019] = id(v__17039); \n        }\n        /* end map_seq */\n        v_l_id_17019 = atomic_inc(&(v_work_idx_1390)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_17023 = get_local_id(0); \n      float v_tmp_17110 = 0.0f; \n      v__3017 = v_tmp_17110; \n      /* reduce_seq */\n      for (int v_i_17024 = 0; v_i_17024 < v_MWidthC_1; v_i_17024 = (1 + v_i_17024)) {\n        v__3017 = add(v__3017, v__17043[(v_i_17024 + (v_MWidthC_1 * v_l_id_17023))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_17025 = 0; \n        v__17048[v_wg_id_17018] = doubleMultiplyAdd(v__3017, v__17030, v__17029[v_wg_id_17018], v__17031); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17026",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17027",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17028",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17030",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17031",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17038",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__17048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17043",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}