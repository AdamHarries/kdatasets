{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__15053, const global float* restrict v__15054, const global float* restrict v__15055, const global float* restrict v__15056, float v__15057, float v__15058, global float* v__15078, global int* v__15060, local float* v__15073, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15062; \n  float v__15064; \n  float v__3017; \n  /* Private Memory */\n  float v__15066_0;\n  \n  float v__15068_0;\n  \n  int v__15072_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1206 = v__15060; \n    local int v_w_id_15046; \n    if (get_local_id(0) == 0) {\n      v_w_id_15046 = atomic_inc(v_work_idx_1206); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15046 < v_MHeight_2)){\n      for (int v_l_id_15047 = get_local_id(0); v_l_id_15047 < v_MWidthC_1; v_l_id_15047 = (v_l_id_15047 + get_local_size(0))) {\n        float v_tmp_15137 = 0.0f; \n        v__15062 = v_tmp_15137; \n        /* reduce_while_seq */\n        for (int v_i_15048 = 0; v_i_15048 < 64; v_i_15048 = (1 + v_i_15048)) {\n          v__15072_0 = check(v__15062, v__15053[(v_l_id_15047 + (64 * v_MWidthC_1 * v_w_id_15046) + (v_MWidthC_1 * v_i_15048))]); \n          if (v__15072_0) {\n          } else {\n            break;\n          }\n          float v_tmp_15138 = 0.0f; \n          v__15064 = v_tmp_15138; \n          int v_index_15139 = v__15053[(v_l_id_15047 + (64 * v_MWidthC_1 * v_w_id_15046) + (v_MWidthC_1 * v_i_15048))]; \n          if (v_index_15139 < 0) {\n            v__15066_0 = v__15064; \n          } else {\n            if (v_index_15139 >= v_VLength_3) {\n              v__15066_0 = v__15064; \n            } else {\n              v__15066_0 = v__15055[v_index_15139]; \n            }\n          }\n          v__15068_0 = mult(v__15066_0, v__15054[(v_l_id_15047 + (64 * v_MWidthC_1 * v_w_id_15046) + (v_MWidthC_1 * v_i_15048))]); \n          v__15062 = add(v__15068_0, v__15062); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15049 = 0; \n          v__15073[v_l_id_15047] = id(v__15062); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1200; \n        v_work_idx_1200 = 0; \n        int v_l_id_15050 = atomic_inc(&(v_work_idx_1200)); \n        while((v_l_id_15050 < 1)){\n          float v_tmp_15142 = 0.0f; \n          v__3017 = v_tmp_15142; \n          /* reduce_seq */\n          for (int v_i_15051 = 0; v_i_15051 < v_MWidthC_1; v_i_15051 = (1 + v_i_15051)) {\n            v__3017 = add(v__3017, v__15073[v_i_15051]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15052 = 0; \n            v__15078[v_w_id_15046] = doubleMultiplyAdd(v__3017, v__15057, v__15056[v_w_id_15046], v__15058); \n          }\n          /* end map_seq */\n          v_l_id_15050 = atomic_inc(&(v_work_idx_1200)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15046 = atomic_inc(v_work_idx_1206); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__15053",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15054",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15055",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15057",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15058",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15060",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15078",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15073",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}