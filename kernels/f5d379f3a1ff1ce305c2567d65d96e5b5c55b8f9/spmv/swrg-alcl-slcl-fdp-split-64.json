{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13828, const global float* restrict v__13829, const global float* restrict v__13830, const global float* restrict v__13831, float v__13832, float v__13833, global float* v__13850, local float* v__13845, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13836; \n  float v__13838; \n  float v__3017; \n  /* Private Memory */\n  float v__13840_0;\n  \n  float v__13842_0;\n  \n  for (int v_wg_id_13821 = get_group_id(0); v_wg_id_13821 < v_MHeight_2; v_wg_id_13821 = (v_wg_id_13821 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1087; \n      v_work_idx_1087 = 0; \n      int v_l_id_13822 = atomic_inc(&(v_work_idx_1087)); \n      while((v_l_id_13822 < v_MWidthC_1)){\n        float v_tmp_13907 = 0.0f; \n        v__13836 = v_tmp_13907; \n        /* reduce_seq */\n        for (int v_i_13823 = 0; v_i_13823 < 64; v_i_13823 = (1 + v_i_13823)) {\n          float v_tmp_13908 = 0.0f; \n          v__13838 = v_tmp_13908; \n          int v_index_13909 = v__13828[(v_l_id_13822 + (64 * v_MWidthC_1 * v_wg_id_13821) + (v_MWidthC_1 * v_i_13823))]; \n          if (v_index_13909 < 0) {\n            v__13840_0 = v__13838; \n          } else {\n            if (v_index_13909 >= v_VLength_3) {\n              v__13840_0 = v__13838; \n            } else {\n              v__13840_0 = v__13830[v_index_13909]; \n            }\n          }\n          v__13842_0 = mult(v__13840_0, v__13829[(v_l_id_13822 + (64 * v_MWidthC_1 * v_wg_id_13821) + (v_MWidthC_1 * v_i_13823))]); \n          v__13836 = add(v__13842_0, v__13836); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13824 = 0; \n          v__13845[v_l_id_13822] = id(v__13836); \n        }\n        /* end map_seq */\n        v_l_id_13822 = atomic_inc(&(v_work_idx_1087)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13825 = get_local_id(0); \n      float v_tmp_13912 = 0.0f; \n      v__3017 = v_tmp_13912; \n      /* reduce_seq */\n      for (int v_i_13826 = 0; v_i_13826 < v_MWidthC_1; v_i_13826 = (1 + v_i_13826)) {\n        v__3017 = add(v__3017, v__13845[(v_i_13826 + (v_MWidthC_1 * v_l_id_13825))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13827 = 0; \n        v__13850[v_wg_id_13821] = doubleMultiplyAdd(v__3017, v__13832, v__13831[v_wg_id_13821], v__13833); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__13828",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13829",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13830",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13831",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13832",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13833",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13850",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13845",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}