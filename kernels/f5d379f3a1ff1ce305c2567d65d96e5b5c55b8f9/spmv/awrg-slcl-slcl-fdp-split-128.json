{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17945, const global float* restrict v__17946, const global float* restrict v__17947, const global float* restrict v__17948, float v__17949, float v__17950, global float* v__17968, global int* v__17952, local float* v__17963, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17954; \n  float v__17956; \n  float v__3017; \n  /* Private Memory */\n  float v__17958_0;\n  \n  float v__17960_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1478 = v__17952; \n    local int v_w_id_17938; \n    if (get_local_id(0) == 0) {\n      v_w_id_17938 = atomic_inc(v_work_idx_1478); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17938 < v_MHeight_2)){\n      for (int v_l_id_17939 = get_local_id(0); v_l_id_17939 < v_MWidthC_1; v_l_id_17939 = (v_l_id_17939 + get_local_size(0))) {\n        float v_tmp_18027 = 0.0f; \n        v__17954 = v_tmp_18027; \n        /* reduce_seq */\n        for (int v_i_17940 = 0; v_i_17940 < 128; v_i_17940 = (1 + v_i_17940)) {\n          float v_tmp_18028 = 0.0f; \n          v__17956 = v_tmp_18028; \n          int v_index_18029 = v__17945[(v_l_id_17939 + (128 * v_MWidthC_1 * v_w_id_17938) + (v_MWidthC_1 * v_i_17940))]; \n          if (v_index_18029 < 0) {\n            v__17958_0 = v__17956; \n          } else {\n            if (v_index_18029 >= v_VLength_3) {\n              v__17958_0 = v__17956; \n            } else {\n              v__17958_0 = v__17947[v_index_18029]; \n            }\n          }\n          v__17960_0 = mult(v__17958_0, v__17946[(v_l_id_17939 + (128 * v_MWidthC_1 * v_w_id_17938) + (v_MWidthC_1 * v_i_17940))]); \n          v__17954 = add(v__17960_0, v__17954); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17941 = 0; \n          v__17963[v_l_id_17939] = id(v__17954); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_17942 = get_local_id(0); \n        float v_tmp_18032 = 0.0f; \n        v__3017 = v_tmp_18032; \n        /* reduce_seq */\n        for (int v_i_17943 = 0; v_i_17943 < v_MWidthC_1; v_i_17943 = (1 + v_i_17943)) {\n          v__3017 = add(v__3017, v__17963[(v_i_17943 + (v_MWidthC_1 * v_l_id_17942))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17944 = 0; \n          v__17968[v_w_id_17938] = doubleMultiplyAdd(v__3017, v__17949, v__17948[v_w_id_17938], v__17950); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_17938 = atomic_inc(v_work_idx_1478); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17945",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17946",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17947",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17948",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17949",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17950",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17952",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17963",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}