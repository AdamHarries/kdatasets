{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4761, const global float* restrict v__4762, const global float* restrict v__4763, const global float* restrict v__4764, float v__4765, float v__4766, global float* v__4784, global int* v__4768, local float* v__4779, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4770; \n  float v__4772; \n  float v__3017; \n  /* Private Memory */\n  float v__4774_0;\n  \n  float v__4776_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_230 = v__4768; \n    local int v_w_id_4754; \n    if (get_local_id(0) == 0) {\n      v_w_id_4754 = atomic_inc(v_work_idx_230); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4754 < v_MHeight_2)){\n      for (int v_l_id_4755 = get_local_id(0); v_l_id_4755 < v_MWidthC_1; v_l_id_4755 = (v_l_id_4755 + get_local_size(0))) {\n        float v_tmp_4843 = 0.0f; \n        v__4770 = v_tmp_4843; \n        /* reduce_seq */\n        for (int v_i_4756 = 0; v_i_4756 < 8; v_i_4756 = (1 + v_i_4756)) {\n          float v_tmp_4844 = 0.0f; \n          v__4772 = v_tmp_4844; \n          int v_index_4845 = v__4761[(v_l_id_4755 + (8 * v_MWidthC_1 * v_w_id_4754) + (v_MWidthC_1 * v_i_4756))]; \n          if (v_index_4845 < 0) {\n            v__4774_0 = v__4772; \n          } else {\n            if (v_index_4845 >= v_VLength_3) {\n              v__4774_0 = v__4772; \n            } else {\n              v__4774_0 = v__4763[v_index_4845]; \n            }\n          }\n          v__4776_0 = mult(v__4774_0, v__4762[(v_l_id_4755 + (8 * v_MWidthC_1 * v_w_id_4754) + (v_MWidthC_1 * v_i_4756))]); \n          v__4770 = add(v__4776_0, v__4770); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4757 = 0; \n          v__4779[v_l_id_4755] = id(v__4770); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_4758 = get_local_id(0); \n        float v_tmp_4848 = 0.0f; \n        v__3017 = v_tmp_4848; \n        /* reduce_seq */\n        for (int v_i_4759 = 0; v_i_4759 < v_MWidthC_1; v_i_4759 = (1 + v_i_4759)) {\n          v__3017 = add(v__3017, v__4779[(v_i_4759 + (v_MWidthC_1 * v_l_id_4758))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4760 = 0; \n          v__4784[v_w_id_4754] = doubleMultiplyAdd(v__3017, v__4765, v__4764[v_w_id_4754], v__4766); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_4754 = atomic_inc(v_work_idx_230); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__4761",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4762",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4763",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4765",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4766",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4768",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__4784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__4779",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}