{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11561, const global float* restrict v__11562, const global float* restrict v__11563, const global float* restrict v__11564, float v__11565, float v__11566, global float* v__11584, global float* v__11574, global int* v__11568, local float* v__11579, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11570; \n  float v__11575; \n  float v__3017; \n  /* Private Memory */\n  float v__11572_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_874 = v__11568; \n    local int v_w_id_11553; \n    if (get_local_id(0) == 0) {\n      v_w_id_11553 = atomic_inc(v_work_idx_874); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11553 < v_MHeight_2)){\n      for (int v_l_id_11554 = get_local_id(0); v_l_id_11554 < v_MWidthC_1; v_l_id_11554 = (v_l_id_11554 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_11555 = 0; v_i_11555 < 32; v_i_11555 = (1 + v_i_11555)) {\n          float v_tmp_11640 = 0.0f; \n          v__11570 = v_tmp_11640; \n          int v_index_11641 = v__11561[(v_l_id_11554 + (32 * v_MWidthC_1 * v_w_id_11553) + (v_MWidthC_1 * v_i_11555))]; \n          if (v_index_11641 < 0) {\n            v__11572_0 = v__11570; \n          } else {\n            if (v_index_11641 >= v_VLength_3) {\n              v__11572_0 = v__11570; \n            } else {\n              v__11572_0 = v__11563[v_index_11641]; \n            }\n          }\n          v__11574[(31 + (32 * v_MWidthC_1 * v_w_id_11553) + (-1 * v_i_11555) + (32 * v_l_id_11554))] = mult(v__11572_0, v__11562[(v_l_id_11554 + (32 * v_MWidthC_1 * v_w_id_11553) + (v_MWidthC_1 * v_i_11555))]); \n        }\n        /* end map_seq */\n        float v_tmp_11642 = 0.0f; \n        v__11575 = v_tmp_11642; \n        /* reduce_seq */\n        for (int v_i_11556 = 0; v_i_11556 < 32; v_i_11556 = (1 + v_i_11556)) {\n          v__11575 = add(v__11575, v__11574[(v_i_11556 + (32 * v_MWidthC_1 * v_w_id_11553) + (32 * v_l_id_11554))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11557 = 0; \n          v__11579[v_l_id_11554] = id(v__11575); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_867; \n        v_work_idx_867 = 0; \n        int v_l_id_11558 = atomic_inc(&(v_work_idx_867)); \n        while((v_l_id_11558 < 1)){\n          float v_tmp_11645 = 0.0f; \n          v__3017 = v_tmp_11645; \n          /* reduce_seq */\n          for (int v_i_11559 = 0; v_i_11559 < v_MWidthC_1; v_i_11559 = (1 + v_i_11559)) {\n            v__3017 = add(v__3017, v__11579[v_i_11559]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_11560 = 0; \n            v__11584[v_w_id_11553] = doubleMultiplyAdd(v__3017, v__11565, v__11564[v_w_id_11553], v__11566); \n          }\n          /* end map_seq */\n          v_l_id_11558 = atomic_inc(&(v_work_idx_867)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11553 = atomic_inc(v_work_idx_874); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__11561",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11562",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11563",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11565",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11566",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11574",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11568",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11579",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}