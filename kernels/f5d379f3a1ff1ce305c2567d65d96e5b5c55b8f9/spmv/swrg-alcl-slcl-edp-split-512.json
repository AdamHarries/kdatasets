{
  "name" : "swrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__23814, const global float* restrict v__23815, const global float* restrict v__23816, const global float* restrict v__23817, float v__23818, float v__23819, global float* v__23838, local float* v__23833, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23822; \n  float v__23824; \n  float v__3017; \n  /* Private Memory */\n  float v__23826_0;\n  \n  float v__23828_0;\n  \n  int v__23832_0;\n  \n  for (int v_wg_id_23807 = get_group_id(0); v_wg_id_23807 < v_MHeight_2; v_wg_id_23807 = (v_wg_id_23807 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2032; \n      v_work_idx_2032 = 0; \n      int v_l_id_23808 = atomic_inc(&(v_work_idx_2032)); \n      while((v_l_id_23808 < v_MWidthC_1)){\n        float v_tmp_23898 = 0.0f; \n        v__23822 = v_tmp_23898; \n        /* reduce_while_seq */\n        for (int v_i_23809 = 0; v_i_23809 < 512; v_i_23809 = (1 + v_i_23809)) {\n          v__23832_0 = check(v__23822, v__23814[(v_l_id_23808 + (512 * v_MWidthC_1 * v_wg_id_23807) + (v_MWidthC_1 * v_i_23809))]); \n          if (v__23832_0) {\n          } else {\n            break;\n          }\n          float v_tmp_23899 = 0.0f; \n          v__23824 = v_tmp_23899; \n          int v_index_23900 = v__23814[(v_l_id_23808 + (512 * v_MWidthC_1 * v_wg_id_23807) + (v_MWidthC_1 * v_i_23809))]; \n          if (v_index_23900 < 0) {\n            v__23826_0 = v__23824; \n          } else {\n            if (v_index_23900 >= v_VLength_3) {\n              v__23826_0 = v__23824; \n            } else {\n              v__23826_0 = v__23816[v_index_23900]; \n            }\n          }\n          v__23828_0 = mult(v__23826_0, v__23815[(v_l_id_23808 + (512 * v_MWidthC_1 * v_wg_id_23807) + (v_MWidthC_1 * v_i_23809))]); \n          v__23822 = add(v__23828_0, v__23822); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23810 = 0; \n          v__23833[v_l_id_23808] = id(v__23822); \n        }\n        /* end map_seq */\n        v_l_id_23808 = atomic_inc(&(v_work_idx_2032)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23811 = get_local_id(0); \n      float v_tmp_23903 = 0.0f; \n      v__3017 = v_tmp_23903; \n      /* reduce_seq */\n      for (int v_i_23812 = 0; v_i_23812 < v_MWidthC_1; v_i_23812 = (1 + v_i_23812)) {\n        v__3017 = add(v__3017, v__23833[(v_i_23812 + (v_MWidthC_1 * v_l_id_23811))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23813 = 0; \n        v__23838[v_wg_id_23807] = doubleMultiplyAdd(v__3017, v__23818, v__23817[v_wg_id_23807], v__23819); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__23814",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23815",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23816",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23817",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23818",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23819",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23838",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23833",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}