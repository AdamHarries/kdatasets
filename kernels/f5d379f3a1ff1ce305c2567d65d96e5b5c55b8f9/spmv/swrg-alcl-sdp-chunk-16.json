{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__6914, const global float* restrict v__6915, const global float* restrict v__6916, const global float* restrict v__6917, float v__6918, float v__6919, global float* v__6932, global float* v__6926, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__6922; \n  float v__6927; \n  /* Private Memory */\n  float v__6924_0;\n  \n  for (int v_wg_id_6909 = get_group_id(0); v_wg_id_6909 < ((v_MHeight_2)/(16)); v_wg_id_6909 = (v_wg_id_6909 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_432; \n      v_work_idx_432 = 0; \n      int v_l_id_6910 = atomic_inc(&(v_work_idx_432)); \n      while((v_l_id_6910 < 16)){\n        /* map_seq */\n        for (int v_i_6911 = 0; v_i_6911 < v_MWidthC_1; v_i_6911 = (1 + v_i_6911)) {\n          float v_tmp_6973 = 0.0f; \n          v__6922 = v_tmp_6973; \n          int v_index_6974 = v__6914[(v_i_6911 + (16 * v_MWidthC_1 * v_wg_id_6909) + (v_MWidthC_1 * v_l_id_6910))]; \n          if (v_index_6974 < 0) {\n            v__6924_0 = v__6922; \n          } else {\n            if (v_index_6974 >= v_VLength_3) {\n              v__6924_0 = v__6922; \n            } else {\n              v__6924_0 = v__6916[v_index_6974]; \n            }\n          }\n          v__6926[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_6909) + (-1 * v_i_6911) + (v_MWidthC_1 * v_l_id_6910))] = mult(v__6924_0, v__6915[(v_i_6911 + (16 * v_MWidthC_1 * v_wg_id_6909) + (v_MWidthC_1 * v_l_id_6910))]); \n        }\n        /* end map_seq */\n        float v_tmp_6975 = 0.0f; \n        v__6927 = v_tmp_6975; \n        /* reduce_seq */\n        for (int v_i_6912 = 0; v_i_6912 < v_MWidthC_1; v_i_6912 = (1 + v_i_6912)) {\n          v__6927 = add(v__6927, v__6926[(v_i_6912 + (16 * v_MWidthC_1 * v_wg_id_6909) + (v_MWidthC_1 * v_l_id_6910))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_6913 = 0; \n          v__6932[(v_l_id_6910 + (16 * v_wg_id_6909))] = doubleMultiplyAdd(v__6927, v__6918, v__6917[(v_l_id_6910 + (16 * v_wg_id_6909))], v__6919); \n        }\n        /* end map_seq */\n        v_l_id_6910 = atomic_inc(&(v_work_idx_432)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__6914",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6915",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__6916",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__6917",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__6918",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__6919",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__6926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__6932",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}