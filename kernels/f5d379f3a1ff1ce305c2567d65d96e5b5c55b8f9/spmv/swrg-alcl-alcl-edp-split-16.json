{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__7628, const global float* restrict v__7629, const global float* restrict v__7630, const global float* restrict v__7631, float v__7632, float v__7633, global float* v__7652, local float* v__7647, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7636; \n  float v__7638; \n  float v__3017; \n  /* Private Memory */\n  float v__7640_0;\n  \n  float v__7642_0;\n  \n  int v__7646_0;\n  \n  for (int v_wg_id_7621 = get_group_id(0); v_wg_id_7621 < v_MHeight_2; v_wg_id_7621 = (v_wg_id_7621 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_503; \n      v_work_idx_503 = 0; \n      int v_l_id_7622 = atomic_inc(&(v_work_idx_503)); \n      while((v_l_id_7622 < v_MWidthC_1)){\n        float v_tmp_7709 = 0.0f; \n        v__7636 = v_tmp_7709; \n        /* reduce_while_seq */\n        for (int v_i_7623 = 0; v_i_7623 < 16; v_i_7623 = (1 + v_i_7623)) {\n          v__7646_0 = check(v__7636, v__7628[(v_l_id_7622 + (16 * v_MWidthC_1 * v_wg_id_7621) + (v_MWidthC_1 * v_i_7623))]); \n          if (v__7646_0) {\n          } else {\n            break;\n          }\n          float v_tmp_7710 = 0.0f; \n          v__7638 = v_tmp_7710; \n          int v_index_7711 = v__7628[(v_l_id_7622 + (16 * v_MWidthC_1 * v_wg_id_7621) + (v_MWidthC_1 * v_i_7623))]; \n          if (v_index_7711 < 0) {\n            v__7640_0 = v__7638; \n          } else {\n            if (v_index_7711 >= v_VLength_3) {\n              v__7640_0 = v__7638; \n            } else {\n              v__7640_0 = v__7630[v_index_7711]; \n            }\n          }\n          v__7642_0 = mult(v__7640_0, v__7629[(v_l_id_7622 + (16 * v_MWidthC_1 * v_wg_id_7621) + (v_MWidthC_1 * v_i_7623))]); \n          v__7636 = add(v__7642_0, v__7636); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7624 = 0; \n          v__7647[v_l_id_7622] = id(v__7636); \n        }\n        /* end map_seq */\n        v_l_id_7622 = atomic_inc(&(v_work_idx_503)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_498; \n      v_work_idx_498 = 0; \n      int v_l_id_7625 = atomic_inc(&(v_work_idx_498)); \n      while((v_l_id_7625 < 1)){\n        float v_tmp_7714 = 0.0f; \n        v__3017 = v_tmp_7714; \n        /* reduce_seq */\n        for (int v_i_7626 = 0; v_i_7626 < v_MWidthC_1; v_i_7626 = (1 + v_i_7626)) {\n          v__3017 = add(v__3017, v__7647[v_i_7626]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7627 = 0; \n          v__7652[v_wg_id_7621] = doubleMultiplyAdd(v__3017, v__7632, v__7631[v_wg_id_7621], v__7633); \n        }\n        /* end map_seq */\n        v_l_id_7625 = atomic_inc(&(v_work_idx_498)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__7628",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7629",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7630",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7632",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7633",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__7652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7647",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}