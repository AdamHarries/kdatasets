{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8562, const global float* restrict v__8563, const global float* restrict v__8564, const global float* restrict v__8565, float v__8566, float v__8567, global float* v__8581, global float* v__8575, global int* v__8569, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8571; \n  float v__8576; \n  /* Private Memory */\n  float v__8573_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_590 = v__8569; \n    local int v_w_id_8557; \n    if (get_local_id(0) == 0) {\n      v_w_id_8557 = atomic_inc(v_work_idx_590); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8557 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_588; \n        v_work_idx_588 = 0; \n        int v_l_id_8558 = atomic_inc(&(v_work_idx_588)); \n        while((v_l_id_8558 < 16)){\n          /* map_seq */\n          for (int v_i_8559 = 0; v_i_8559 < v_MWidthC_1; v_i_8559 = (1 + v_i_8559)) {\n            float v_tmp_8620 = 0.0f; \n            v__8571 = v_tmp_8620; \n            int v_index_8621 = v__8562[(v_i_8559 + (16 * v_MWidthC_1 * v_w_id_8557) + (v_MWidthC_1 * v_l_id_8558))]; \n            if (v_index_8621 < 0) {\n              v__8573_0 = v__8571; \n            } else {\n              if (v_index_8621 >= v_VLength_3) {\n                v__8573_0 = v__8571; \n              } else {\n                v__8573_0 = v__8564[v_index_8621]; \n              }\n            }\n            v__8575[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_8557) + (-1 * v_i_8559) + (v_MWidthC_1 * v_l_id_8558))] = mult(v__8573_0, v__8563[(v_i_8559 + (16 * v_MWidthC_1 * v_w_id_8557) + (v_MWidthC_1 * v_l_id_8558))]); \n          }\n          /* end map_seq */\n          float v_tmp_8622 = 0.0f; \n          v__8576 = v_tmp_8622; \n          /* reduce_seq */\n          for (int v_i_8560 = 0; v_i_8560 < v_MWidthC_1; v_i_8560 = (1 + v_i_8560)) {\n            v__8576 = add(v__8576, v__8575[(v_i_8560 + (16 * v_MWidthC_1 * v_w_id_8557) + (v_MWidthC_1 * v_l_id_8558))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_8561 = 0; \n            v__8581[(v_l_id_8558 + (16 * v_w_id_8557))] = doubleMultiplyAdd(v__8576, v__8566, v__8565[(v_l_id_8558 + (16 * v_w_id_8557))], v__8567); \n          }\n          /* end map_seq */\n          v_l_id_8558 = atomic_inc(&(v_work_idx_588)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8557 = atomic_inc(v_work_idx_590); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__8562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8564",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8565",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8566",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8567",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8575",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8569",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}