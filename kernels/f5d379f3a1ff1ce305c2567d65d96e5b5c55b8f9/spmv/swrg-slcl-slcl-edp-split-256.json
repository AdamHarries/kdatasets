{
  "name" : "swrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__19686, const global float* restrict v__19687, const global float* restrict v__19688, const global float* restrict v__19689, float v__19690, float v__19691, global float* v__19710, local float* v__19705, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19694; \n  float v__19696; \n  float v__3017; \n  /* Private Memory */\n  float v__19698_0;\n  \n  float v__19700_0;\n  \n  int v__19704_0;\n  \n  for (int v_wg_id_19679 = get_group_id(0); v_wg_id_19679 < v_MHeight_2; v_wg_id_19679 = (v_wg_id_19679 + get_num_groups(0))) {\n    for (int v_l_id_19680 = get_local_id(0); v_l_id_19680 < v_MWidthC_1; v_l_id_19680 = (v_l_id_19680 + get_local_size(0))) {\n      float v_tmp_19775 = 0.0f; \n      v__19694 = v_tmp_19775; \n      /* reduce_while_seq */\n      for (int v_i_19681 = 0; v_i_19681 < 256; v_i_19681 = (1 + v_i_19681)) {\n        v__19704_0 = check(v__19694, v__19686[(v_l_id_19680 + (256 * v_MWidthC_1 * v_wg_id_19679) + (v_MWidthC_1 * v_i_19681))]); \n        if (v__19704_0) {\n        } else {\n          break;\n        }\n        float v_tmp_19776 = 0.0f; \n        v__19696 = v_tmp_19776; \n        int v_index_19777 = v__19686[(v_l_id_19680 + (256 * v_MWidthC_1 * v_wg_id_19679) + (v_MWidthC_1 * v_i_19681))]; \n        if (v_index_19777 < 0) {\n          v__19698_0 = v__19696; \n        } else {\n          if (v_index_19777 >= v_VLength_3) {\n            v__19698_0 = v__19696; \n          } else {\n            v__19698_0 = v__19688[v_index_19777]; \n          }\n        }\n        v__19700_0 = mult(v__19698_0, v__19687[(v_l_id_19680 + (256 * v_MWidthC_1 * v_wg_id_19679) + (v_MWidthC_1 * v_i_19681))]); \n        v__19694 = add(v__19700_0, v__19694); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19682 = 0; \n        v__19705[v_l_id_19680] = id(v__19694); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19683 = get_local_id(0); \n      float v_tmp_19780 = 0.0f; \n      v__3017 = v_tmp_19780; \n      /* reduce_seq */\n      for (int v_i_19684 = 0; v_i_19684 < v_MWidthC_1; v_i_19684 = (1 + v_i_19684)) {\n        v__3017 = add(v__3017, v__19705[(v_i_19684 + (v_MWidthC_1 * v_l_id_19683))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19685 = 0; \n        v__19710[v_wg_id_19679] = doubleMultiplyAdd(v__3017, v__19690, v__19689[v_wg_id_19679], v__19691); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19686",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19687",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19688",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19690",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19691",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19705",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}