{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7956, const global float* restrict v__7957, const global float* restrict v__7958, const global float* restrict v__7959, float v__7960, float v__7961, global float* v__7979, global float* v__7969, global int* v__7963, local float* v__7974, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7965; \n  float v__7970; \n  float v__3017; \n  /* Private Memory */\n  float v__7967_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_533 = v__7963; \n    local int v_w_id_7948; \n    if (get_local_id(0) == 0) {\n      v_w_id_7948 = atomic_inc(v_work_idx_533); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_7948 < v_MHeight_2)){\n      for (int v_l_id_7949 = get_local_id(0); v_l_id_7949 < v_MWidthC_1; v_l_id_7949 = (v_l_id_7949 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_7950 = 0; v_i_7950 < 16; v_i_7950 = (1 + v_i_7950)) {\n          float v_tmp_8038 = 0.0f; \n          v__7965 = v_tmp_8038; \n          int v_index_8039 = v__7956[(v_l_id_7949 + (16 * v_MWidthC_1 * v_w_id_7948) + (v_MWidthC_1 * v_i_7950))]; \n          if (v_index_8039 < 0) {\n            v__7967_0 = v__7965; \n          } else {\n            if (v_index_8039 >= v_VLength_3) {\n              v__7967_0 = v__7965; \n            } else {\n              v__7967_0 = v__7958[v_index_8039]; \n            }\n          }\n          v__7969[(15 + (16 * v_MWidthC_1 * v_w_id_7948) + (-1 * v_i_7950) + (16 * v_l_id_7949))] = mult(v__7967_0, v__7957[(v_l_id_7949 + (16 * v_MWidthC_1 * v_w_id_7948) + (v_MWidthC_1 * v_i_7950))]); \n        }\n        /* end map_seq */\n        float v_tmp_8040 = 0.0f; \n        v__7970 = v_tmp_8040; \n        /* reduce_seq */\n        for (int v_i_7951 = 0; v_i_7951 < 16; v_i_7951 = (1 + v_i_7951)) {\n          v__7970 = add(v__7970, v__7969[(v_i_7951 + (16 * v_MWidthC_1 * v_w_id_7948) + (16 * v_l_id_7949))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7952 = 0; \n          v__7974[v_l_id_7949] = id(v__7970); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_7953 = get_local_id(0); \n        float v_tmp_8043 = 0.0f; \n        v__3017 = v_tmp_8043; \n        /* reduce_seq */\n        for (int v_i_7954 = 0; v_i_7954 < v_MWidthC_1; v_i_7954 = (1 + v_i_7954)) {\n          v__3017 = add(v__3017, v__7974[(v_i_7954 + (v_MWidthC_1 * v_l_id_7953))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7955 = 0; \n          v__7979[v_w_id_7948] = doubleMultiplyAdd(v__3017, v__7960, v__7959[v_w_id_7948], v__7961); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_7948 = atomic_inc(v_work_idx_533); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7956",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7957",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7958",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7960",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7961",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7969",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7963",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__7979",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7974",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}