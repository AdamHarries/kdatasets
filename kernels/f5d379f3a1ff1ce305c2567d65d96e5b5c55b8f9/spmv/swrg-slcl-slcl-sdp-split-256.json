{
  "name" : "swrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19480, const global float* restrict v__19481, const global float* restrict v__19482, const global float* restrict v__19483, float v__19484, float v__19485, global float* v__19502, global float* v__19492, local float* v__19497, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19488; \n  float v__19493; \n  float v__3017; \n  /* Private Memory */\n  float v__19490_0;\n  \n  for (int v_wg_id_19472 = get_group_id(0); v_wg_id_19472 < v_MHeight_2; v_wg_id_19472 = (v_wg_id_19472 + get_num_groups(0))) {\n    for (int v_l_id_19473 = get_local_id(0); v_l_id_19473 < v_MWidthC_1; v_l_id_19473 = (v_l_id_19473 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19474 = 0; v_i_19474 < 256; v_i_19474 = (1 + v_i_19474)) {\n        float v_tmp_19564 = 0.0f; \n        v__19488 = v_tmp_19564; \n        int v_index_19565 = v__19480[(v_l_id_19473 + (256 * v_MWidthC_1 * v_wg_id_19472) + (v_MWidthC_1 * v_i_19474))]; \n        if (v_index_19565 < 0) {\n          v__19490_0 = v__19488; \n        } else {\n          if (v_index_19565 >= v_VLength_3) {\n            v__19490_0 = v__19488; \n          } else {\n            v__19490_0 = v__19482[v_index_19565]; \n          }\n        }\n        v__19492[(255 + (256 * v_MWidthC_1 * v_wg_id_19472) + (-1 * v_i_19474) + (256 * v_l_id_19473))] = mult(v__19490_0, v__19481[(v_l_id_19473 + (256 * v_MWidthC_1 * v_wg_id_19472) + (v_MWidthC_1 * v_i_19474))]); \n      }\n      /* end map_seq */\n      float v_tmp_19566 = 0.0f; \n      v__19493 = v_tmp_19566; \n      /* reduce_seq */\n      for (int v_i_19475 = 0; v_i_19475 < 256; v_i_19475 = (1 + v_i_19475)) {\n        v__19493 = add(v__19493, v__19492[(v_i_19475 + (256 * v_MWidthC_1 * v_wg_id_19472) + (256 * v_l_id_19473))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19476 = 0; \n        v__19497[v_l_id_19473] = id(v__19493); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19477 = get_local_id(0); \n      float v_tmp_19569 = 0.0f; \n      v__3017 = v_tmp_19569; \n      /* reduce_seq */\n      for (int v_i_19478 = 0; v_i_19478 < v_MWidthC_1; v_i_19478 = (1 + v_i_19478)) {\n        v__3017 = add(v__3017, v__19497[(v_i_19478 + (v_MWidthC_1 * v_l_id_19477))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19479 = 0; \n        v__19502[v_wg_id_19472] = doubleMultiplyAdd(v__3017, v__19484, v__19483[v_wg_id_19472], v__19485); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19480",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19481",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19482",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19483",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19484",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19485",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19492",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__19502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19497",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}