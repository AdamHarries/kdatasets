{
  "name" : "awrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7726, const global float* restrict v__7727, const global float* restrict v__7728, const global float* restrict v__7729, float v__7730, float v__7731, global float* v__7745, global float* v__7739, global int* v__7733, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7735; \n  float v__7740; \n  /* Private Memory */\n  float v__7737_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_511 = v__7733; \n    local int v_w_id_7721; \n    if (get_local_id(0) == 0) {\n      v_w_id_7721 = atomic_inc(v_work_idx_511); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_7721 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_7722 = get_local_id(0); v_l_id_7722 < 16; v_l_id_7722 = (v_l_id_7722 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_7723 = 0; v_i_7723 < v_MWidthC_1; v_i_7723 = (1 + v_i_7723)) {\n          float v_tmp_7787 = 0.0f; \n          v__7735 = v_tmp_7787; \n          int v_index_7788 = v__7726[(v_i_7723 + (16 * v_MWidthC_1 * v_w_id_7721) + (v_MWidthC_1 * v_l_id_7722))]; \n          if (v_index_7788 < 0) {\n            v__7737_0 = v__7735; \n          } else {\n            if (v_index_7788 >= v_VLength_3) {\n              v__7737_0 = v__7735; \n            } else {\n              v__7737_0 = v__7728[v_index_7788]; \n            }\n          }\n          v__7739[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_7721) + (-1 * v_i_7723) + (v_MWidthC_1 * v_l_id_7722))] = mult(v__7737_0, v__7727[(v_i_7723 + (16 * v_MWidthC_1 * v_w_id_7721) + (v_MWidthC_1 * v_l_id_7722))]); \n        }\n        /* end map_seq */\n        float v_tmp_7789 = 0.0f; \n        v__7740 = v_tmp_7789; \n        /* reduce_seq */\n        for (int v_i_7724 = 0; v_i_7724 < v_MWidthC_1; v_i_7724 = (1 + v_i_7724)) {\n          v__7740 = add(v__7740, v__7739[(v_i_7724 + (16 * v_MWidthC_1 * v_w_id_7721) + (v_MWidthC_1 * v_l_id_7722))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7725 = 0; \n          v__7745[(v_l_id_7722 + (16 * v_w_id_7721))] = doubleMultiplyAdd(v__7740, v__7730, v__7729[(v_l_id_7722 + (16 * v_w_id_7721))], v__7731); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_7721 = atomic_inc(v_work_idx_511); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7728",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7729",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7730",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7731",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7733",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__7745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}