{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__15855, const global float* restrict v__15856, const global float* restrict v__15857, const global float* restrict v__15858, float v__15859, float v__15860, global float* v__15880, global int* v__15862, local float* v__15875, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15864; \n  float v__15866; \n  float v__3017; \n  /* Private Memory */\n  float v__15868_0;\n  \n  float v__15870_0;\n  \n  int v__15874_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1293 = v__15862; \n    local int v_w_id_15848; \n    if (get_local_id(0) == 0) {\n      v_w_id_15848 = atomic_inc(v_work_idx_1293); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15848 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1291; \n        v_work_idx_1291 = 0; \n        int v_l_id_15849 = atomic_inc(&(v_work_idx_1291)); \n        while((v_l_id_15849 < v_MWidthC_1)){\n          float v_tmp_15934 = 0.0f; \n          v__15864 = v_tmp_15934; \n          /* reduce_while_seq */\n          for (int v_i_15850 = 0; v_i_15850 < 64; v_i_15850 = (1 + v_i_15850)) {\n            v__15874_0 = check(v__15864, v__15855[(v_l_id_15849 + (64 * v_MWidthC_1 * v_w_id_15848) + (v_MWidthC_1 * v_i_15850))]); \n            if (v__15874_0) {\n            } else {\n              break;\n            }\n            float v_tmp_15935 = 0.0f; \n            v__15866 = v_tmp_15935; \n            int v_index_15936 = v__15855[(v_l_id_15849 + (64 * v_MWidthC_1 * v_w_id_15848) + (v_MWidthC_1 * v_i_15850))]; \n            if (v_index_15936 < 0) {\n              v__15868_0 = v__15866; \n            } else {\n              if (v_index_15936 >= v_VLength_3) {\n                v__15868_0 = v__15866; \n              } else {\n                v__15868_0 = v__15857[v_index_15936]; \n              }\n            }\n            v__15870_0 = mult(v__15868_0, v__15856[(v_l_id_15849 + (64 * v_MWidthC_1 * v_w_id_15848) + (v_MWidthC_1 * v_i_15850))]); \n            v__15864 = add(v__15870_0, v__15864); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15851 = 0; \n            v__15875[v_l_id_15849] = id(v__15864); \n          }\n          /* end map_seq */\n          v_l_id_15849 = atomic_inc(&(v_work_idx_1291)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1286; \n        v_work_idx_1286 = 0; \n        int v_l_id_15852 = atomic_inc(&(v_work_idx_1286)); \n        while((v_l_id_15852 < 1)){\n          float v_tmp_15939 = 0.0f; \n          v__3017 = v_tmp_15939; \n          /* reduce_seq */\n          for (int v_i_15853 = 0; v_i_15853 < v_MWidthC_1; v_i_15853 = (1 + v_i_15853)) {\n            v__3017 = add(v__3017, v__15875[v_i_15853]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15854 = 0; \n            v__15880[v_w_id_15848] = doubleMultiplyAdd(v__3017, v__15859, v__15858[v_w_id_15848], v__15860); \n          }\n          /* end map_seq */\n          v_l_id_15852 = atomic_inc(&(v_work_idx_1286)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15848 = atomic_inc(v_work_idx_1293); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__15855",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15856",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15857",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15859",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15860",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15862",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15875",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}