{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13730, const global float* restrict v__13731, const global float* restrict v__13732, const global float* restrict v__13733, float v__13734, float v__13735, global float* v__13752, global float* v__13742, local float* v__13747, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13738; \n  float v__13743; \n  float v__3017; \n  /* Private Memory */\n  float v__13740_0;\n  \n  for (int v_wg_id_13722 = get_group_id(0); v_wg_id_13722 < v_MHeight_2; v_wg_id_13722 = (v_wg_id_13722 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1078; \n      v_work_idx_1078 = 0; \n      int v_l_id_13723 = atomic_inc(&(v_work_idx_1078)); \n      while((v_l_id_13723 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_13724 = 0; v_i_13724 < 64; v_i_13724 = (1 + v_i_13724)) {\n          float v_tmp_13809 = 0.0f; \n          v__13738 = v_tmp_13809; \n          int v_index_13810 = v__13730[(v_l_id_13723 + (64 * v_MWidthC_1 * v_wg_id_13722) + (v_MWidthC_1 * v_i_13724))]; \n          if (v_index_13810 < 0) {\n            v__13740_0 = v__13738; \n          } else {\n            if (v_index_13810 >= v_VLength_3) {\n              v__13740_0 = v__13738; \n            } else {\n              v__13740_0 = v__13732[v_index_13810]; \n            }\n          }\n          v__13742[(63 + (64 * v_MWidthC_1 * v_wg_id_13722) + (-1 * v_i_13724) + (64 * v_l_id_13723))] = mult(v__13740_0, v__13731[(v_l_id_13723 + (64 * v_MWidthC_1 * v_wg_id_13722) + (v_MWidthC_1 * v_i_13724))]); \n        }\n        /* end map_seq */\n        float v_tmp_13811 = 0.0f; \n        v__13743 = v_tmp_13811; \n        /* reduce_seq */\n        for (int v_i_13725 = 0; v_i_13725 < 64; v_i_13725 = (1 + v_i_13725)) {\n          v__13743 = add(v__13743, v__13742[(v_i_13725 + (64 * v_MWidthC_1 * v_wg_id_13722) + (64 * v_l_id_13723))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13726 = 0; \n          v__13747[v_l_id_13723] = id(v__13743); \n        }\n        /* end map_seq */\n        v_l_id_13723 = atomic_inc(&(v_work_idx_1078)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13727 = get_local_id(0); \n      float v_tmp_13814 = 0.0f; \n      v__3017 = v_tmp_13814; \n      /* reduce_seq */\n      for (int v_i_13728 = 0; v_i_13728 < v_MWidthC_1; v_i_13728 = (1 + v_i_13728)) {\n        v__3017 = add(v__3017, v__13747[(v_i_13728 + (v_MWidthC_1 * v_l_id_13727))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13729 = 0; \n        v__13752[v_wg_id_13722] = doubleMultiplyAdd(v__3017, v__13734, v__13733[v_wg_id_13722], v__13735); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13730",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13731",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13732",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13734",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13735",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13742",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13752",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13747",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}