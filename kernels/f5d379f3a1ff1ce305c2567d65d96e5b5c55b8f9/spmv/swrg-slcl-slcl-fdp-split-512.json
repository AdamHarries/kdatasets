{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22879, const global float* restrict v__22880, const global float* restrict v__22881, const global float* restrict v__22882, float v__22883, float v__22884, global float* v__22901, local float* v__22896, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22887; \n  float v__22889; \n  float v__3017; \n  /* Private Memory */\n  float v__22891_0;\n  \n  float v__22893_0;\n  \n  for (int v_wg_id_22872 = get_group_id(0); v_wg_id_22872 < v_MHeight_2; v_wg_id_22872 = (v_wg_id_22872 + get_num_groups(0))) {\n    for (int v_l_id_22873 = get_local_id(0); v_l_id_22873 < v_MWidthC_1; v_l_id_22873 = (v_l_id_22873 + get_local_size(0))) {\n      float v_tmp_22963 = 0.0f; \n      v__22887 = v_tmp_22963; \n      /* reduce_seq */\n      for (int v_i_22874 = 0; v_i_22874 < 512; v_i_22874 = (1 + v_i_22874)) {\n        float v_tmp_22964 = 0.0f; \n        v__22889 = v_tmp_22964; \n        int v_index_22965 = v__22879[(v_l_id_22873 + (512 * v_MWidthC_1 * v_wg_id_22872) + (v_MWidthC_1 * v_i_22874))]; \n        if (v_index_22965 < 0) {\n          v__22891_0 = v__22889; \n        } else {\n          if (v_index_22965 >= v_VLength_3) {\n            v__22891_0 = v__22889; \n          } else {\n            v__22891_0 = v__22881[v_index_22965]; \n          }\n        }\n        v__22893_0 = mult(v__22891_0, v__22880[(v_l_id_22873 + (512 * v_MWidthC_1 * v_wg_id_22872) + (v_MWidthC_1 * v_i_22874))]); \n        v__22887 = add(v__22893_0, v__22887); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_22875 = 0; \n        v__22896[v_l_id_22873] = id(v__22887); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_22876 = get_local_id(0); \n      float v_tmp_22968 = 0.0f; \n      v__3017 = v_tmp_22968; \n      /* reduce_seq */\n      for (int v_i_22877 = 0; v_i_22877 < v_MWidthC_1; v_i_22877 = (1 + v_i_22877)) {\n        v__3017 = add(v__3017, v__22896[(v_i_22877 + (v_MWidthC_1 * v_l_id_22876))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_22878 = 0; \n        v__22901[v_wg_id_22872] = doubleMultiplyAdd(v__3017, v__22883, v__22882[v_wg_id_22872], v__22884); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22879",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22880",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22881",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22883",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22884",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__22901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22896",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}