{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17614, const global float* restrict v__17615, const global float* restrict v__17616, const global float* restrict v__17617, float v__17618, float v__17619, global float* v__17633, global float* v__17627, global int* v__17621, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17623; \n  float v__17628; \n  /* Private Memory */\n  float v__17625_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1447 = v__17621; \n    local int v_w_id_17609; \n    if (get_local_id(0) == 0) {\n      v_w_id_17609 = atomic_inc(v_work_idx_1447); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_17609 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_17610 = get_local_id(0); v_l_id_17610 < 128; v_l_id_17610 = (v_l_id_17610 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_17611 = 0; v_i_17611 < v_MWidthC_1; v_i_17611 = (1 + v_i_17611)) {\n          float v_tmp_17675 = 0.0f; \n          v__17623 = v_tmp_17675; \n          int v_index_17676 = v__17614[(v_i_17611 + (128 * v_MWidthC_1 * v_w_id_17609) + (v_MWidthC_1 * v_l_id_17610))]; \n          if (v_index_17676 < 0) {\n            v__17625_0 = v__17623; \n          } else {\n            if (v_index_17676 >= v_VLength_3) {\n              v__17625_0 = v__17623; \n            } else {\n              v__17625_0 = v__17616[v_index_17676]; \n            }\n          }\n          v__17627[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_17609) + (-1 * v_i_17611) + (v_MWidthC_1 * v_l_id_17610))] = mult(v__17625_0, v__17615[(v_i_17611 + (128 * v_MWidthC_1 * v_w_id_17609) + (v_MWidthC_1 * v_l_id_17610))]); \n        }\n        /* end map_seq */\n        float v_tmp_17677 = 0.0f; \n        v__17628 = v_tmp_17677; \n        /* reduce_seq */\n        for (int v_i_17612 = 0; v_i_17612 < v_MWidthC_1; v_i_17612 = (1 + v_i_17612)) {\n          v__17628 = add(v__17628, v__17627[(v_i_17612 + (128 * v_MWidthC_1 * v_w_id_17609) + (v_MWidthC_1 * v_l_id_17610))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17613 = 0; \n          v__17633[(v_l_id_17610 + (128 * v_w_id_17609))] = doubleMultiplyAdd(v__17628, v__17618, v__17617[(v_l_id_17610 + (128 * v_w_id_17609))], v__17619); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_17609 = atomic_inc(v_work_idx_1447); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17615",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17616",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17618",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17619",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17621",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__17633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}