{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22354, const global float* restrict v__22355, const global float* restrict v__22356, const global float* restrict v__22357, float v__22358, float v__22359, global float* v__22377, global int* v__22361, local float* v__22372, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22363; \n  float v__22365; \n  float v__3017; \n  /* Private Memory */\n  float v__22367_0;\n  \n  float v__22369_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1906 = v__22361; \n    local int v_w_id_22347; \n    if (get_local_id(0) == 0) {\n      v_w_id_22347 = atomic_inc(v_work_idx_1906); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22347 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1904; \n        v_work_idx_1904 = 0; \n        int v_l_id_22348 = atomic_inc(&(v_work_idx_1904)); \n        while((v_l_id_22348 < v_MWidthC_1)){\n          float v_tmp_22428 = 0.0f; \n          v__22363 = v_tmp_22428; \n          /* reduce_seq */\n          for (int v_i_22349 = 0; v_i_22349 < 256; v_i_22349 = (1 + v_i_22349)) {\n            float v_tmp_22429 = 0.0f; \n            v__22365 = v_tmp_22429; \n            int v_index_22430 = v__22354[(v_l_id_22348 + (256 * v_MWidthC_1 * v_w_id_22347) + (v_MWidthC_1 * v_i_22349))]; \n            if (v_index_22430 < 0) {\n              v__22367_0 = v__22365; \n            } else {\n              if (v_index_22430 >= v_VLength_3) {\n                v__22367_0 = v__22365; \n              } else {\n                v__22367_0 = v__22356[v_index_22430]; \n              }\n            }\n            v__22369_0 = mult(v__22367_0, v__22355[(v_l_id_22348 + (256 * v_MWidthC_1 * v_w_id_22347) + (v_MWidthC_1 * v_i_22349))]); \n            v__22363 = add(v__22369_0, v__22363); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22350 = 0; \n            v__22372[v_l_id_22348] = id(v__22363); \n          }\n          /* end map_seq */\n          v_l_id_22348 = atomic_inc(&(v_work_idx_1904)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1899; \n        v_work_idx_1899 = 0; \n        int v_l_id_22351 = atomic_inc(&(v_work_idx_1899)); \n        while((v_l_id_22351 < 1)){\n          float v_tmp_22433 = 0.0f; \n          v__3017 = v_tmp_22433; \n          /* reduce_seq */\n          for (int v_i_22352 = 0; v_i_22352 < v_MWidthC_1; v_i_22352 = (1 + v_i_22352)) {\n            v__3017 = add(v__3017, v__22372[v_i_22352]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22353 = 0; \n            v__22377[v_w_id_22347] = doubleMultiplyAdd(v__3017, v__22358, v__22357[v_w_id_22347], v__22359); \n          }\n          /* end map_seq */\n          v_l_id_22351 = atomic_inc(&(v_work_idx_1899)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22347 = atomic_inc(v_work_idx_1906); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22354",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22355",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22356",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22357",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22358",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22359",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22361",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22377",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22372",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}