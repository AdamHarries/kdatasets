{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__14220, const global float* restrict v__14221, const global float* restrict v__14222, const global float* restrict v__14223, float v__14224, float v__14225, global float* v__14244, local float* v__14239, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14228; \n  float v__14230; \n  float v__3017; \n  /* Private Memory */\n  float v__14232_0;\n  \n  float v__14234_0;\n  \n  int v__14238_0;\n  \n  for (int v_wg_id_14213 = get_group_id(0); v_wg_id_14213 < v_MHeight_2; v_wg_id_14213 = (v_wg_id_14213 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1127; \n      v_work_idx_1127 = 0; \n      int v_l_id_14214 = atomic_inc(&(v_work_idx_1127)); \n      while((v_l_id_14214 < v_MWidthC_1)){\n        float v_tmp_14301 = 0.0f; \n        v__14228 = v_tmp_14301; \n        /* reduce_while_seq */\n        for (int v_i_14215 = 0; v_i_14215 < 64; v_i_14215 = (1 + v_i_14215)) {\n          v__14238_0 = check(v__14228, v__14220[(v_l_id_14214 + (64 * v_MWidthC_1 * v_wg_id_14213) + (v_MWidthC_1 * v_i_14215))]); \n          if (v__14238_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14302 = 0.0f; \n          v__14230 = v_tmp_14302; \n          int v_index_14303 = v__14220[(v_l_id_14214 + (64 * v_MWidthC_1 * v_wg_id_14213) + (v_MWidthC_1 * v_i_14215))]; \n          if (v_index_14303 < 0) {\n            v__14232_0 = v__14230; \n          } else {\n            if (v_index_14303 >= v_VLength_3) {\n              v__14232_0 = v__14230; \n            } else {\n              v__14232_0 = v__14222[v_index_14303]; \n            }\n          }\n          v__14234_0 = mult(v__14232_0, v__14221[(v_l_id_14214 + (64 * v_MWidthC_1 * v_wg_id_14213) + (v_MWidthC_1 * v_i_14215))]); \n          v__14228 = add(v__14234_0, v__14228); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14216 = 0; \n          v__14239[v_l_id_14214] = id(v__14228); \n        }\n        /* end map_seq */\n        v_l_id_14214 = atomic_inc(&(v_work_idx_1127)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1122; \n      v_work_idx_1122 = 0; \n      int v_l_id_14217 = atomic_inc(&(v_work_idx_1122)); \n      while((v_l_id_14217 < 1)){\n        float v_tmp_14306 = 0.0f; \n        v__3017 = v_tmp_14306; \n        /* reduce_seq */\n        for (int v_i_14218 = 0; v_i_14218 < v_MWidthC_1; v_i_14218 = (1 + v_i_14218)) {\n          v__3017 = add(v__3017, v__14239[v_i_14218]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14219 = 0; \n          v__14244[v_wg_id_14213] = doubleMultiplyAdd(v__3017, v__14224, v__14223[v_wg_id_14213], v__14225); \n        }\n        /* end map_seq */\n        v_l_id_14217 = atomic_inc(&(v_work_idx_1122)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14220",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14221",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14222",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14223",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14224",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14225",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14244",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14239",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}