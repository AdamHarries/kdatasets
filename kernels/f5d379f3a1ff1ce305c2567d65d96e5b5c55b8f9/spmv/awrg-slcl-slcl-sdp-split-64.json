{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14548, const global float* restrict v__14549, const global float* restrict v__14550, const global float* restrict v__14551, float v__14552, float v__14553, global float* v__14571, global float* v__14561, global int* v__14555, local float* v__14566, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14557; \n  float v__14562; \n  float v__3017; \n  /* Private Memory */\n  float v__14559_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1157 = v__14555; \n    local int v_w_id_14540; \n    if (get_local_id(0) == 0) {\n      v_w_id_14540 = atomic_inc(v_work_idx_1157); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14540 < v_MHeight_2)){\n      for (int v_l_id_14541 = get_local_id(0); v_l_id_14541 < v_MWidthC_1; v_l_id_14541 = (v_l_id_14541 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_14542 = 0; v_i_14542 < 64; v_i_14542 = (1 + v_i_14542)) {\n          float v_tmp_14630 = 0.0f; \n          v__14557 = v_tmp_14630; \n          int v_index_14631 = v__14548[(v_l_id_14541 + (64 * v_MWidthC_1 * v_w_id_14540) + (v_MWidthC_1 * v_i_14542))]; \n          if (v_index_14631 < 0) {\n            v__14559_0 = v__14557; \n          } else {\n            if (v_index_14631 >= v_VLength_3) {\n              v__14559_0 = v__14557; \n            } else {\n              v__14559_0 = v__14550[v_index_14631]; \n            }\n          }\n          v__14561[(63 + (64 * v_MWidthC_1 * v_w_id_14540) + (-1 * v_i_14542) + (64 * v_l_id_14541))] = mult(v__14559_0, v__14549[(v_l_id_14541 + (64 * v_MWidthC_1 * v_w_id_14540) + (v_MWidthC_1 * v_i_14542))]); \n        }\n        /* end map_seq */\n        float v_tmp_14632 = 0.0f; \n        v__14562 = v_tmp_14632; \n        /* reduce_seq */\n        for (int v_i_14543 = 0; v_i_14543 < 64; v_i_14543 = (1 + v_i_14543)) {\n          v__14562 = add(v__14562, v__14561[(v_i_14543 + (64 * v_MWidthC_1 * v_w_id_14540) + (64 * v_l_id_14541))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14544 = 0; \n          v__14566[v_l_id_14541] = id(v__14562); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14545 = get_local_id(0); \n        float v_tmp_14635 = 0.0f; \n        v__3017 = v_tmp_14635; \n        /* reduce_seq */\n        for (int v_i_14546 = 0; v_i_14546 < v_MWidthC_1; v_i_14546 = (1 + v_i_14546)) {\n          v__3017 = add(v__3017, v__14566[(v_i_14546 + (v_MWidthC_1 * v_l_id_14545))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14547 = 0; \n          v__14571[v_w_id_14540] = doubleMultiplyAdd(v__3017, v__14552, v__14551[v_w_id_14540], v__14553); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14540 = atomic_inc(v_work_idx_1157); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14548",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14549",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14550",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14551",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14552",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14553",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14561",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14555",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14571",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14566",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}