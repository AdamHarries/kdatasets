{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25359, const global float* restrict v__25360, const global float* restrict v__25361, const global float* restrict v__25362, float v__25363, float v__25364, global float* v__25382, global int* v__25366, local float* v__25377, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25368; \n  float v__25370; \n  float v__3017; \n  /* Private Memory */\n  float v__25372_0;\n  \n  float v__25374_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2185 = v__25366; \n    local int v_w_id_25352; \n    if (get_local_id(0) == 0) {\n      v_w_id_25352 = atomic_inc(v_work_idx_2185); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25352 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2183; \n        v_work_idx_2183 = 0; \n        int v_l_id_25353 = atomic_inc(&(v_work_idx_2183)); \n        while((v_l_id_25353 < v_MWidthC_1)){\n          float v_tmp_25436 = 0.0f; \n          v__25368 = v_tmp_25436; \n          /* reduce_seq */\n          for (int v_i_25354 = 0; v_i_25354 < 512; v_i_25354 = (1 + v_i_25354)) {\n            float v_tmp_25437 = 0.0f; \n            v__25370 = v_tmp_25437; \n            int v_index_25438 = v__25359[(v_l_id_25353 + (512 * v_MWidthC_1 * v_w_id_25352) + (v_MWidthC_1 * v_i_25354))]; \n            if (v_index_25438 < 0) {\n              v__25372_0 = v__25370; \n            } else {\n              if (v_index_25438 >= v_VLength_3) {\n                v__25372_0 = v__25370; \n              } else {\n                v__25372_0 = v__25361[v_index_25438]; \n              }\n            }\n            v__25374_0 = mult(v__25372_0, v__25360[(v_l_id_25353 + (512 * v_MWidthC_1 * v_w_id_25352) + (v_MWidthC_1 * v_i_25354))]); \n            v__25368 = add(v__25374_0, v__25368); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25355 = 0; \n            v__25377[v_l_id_25353] = id(v__25368); \n          }\n          /* end map_seq */\n          v_l_id_25353 = atomic_inc(&(v_work_idx_2183)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25356 = get_local_id(0); \n        float v_tmp_25441 = 0.0f; \n        v__3017 = v_tmp_25441; \n        /* reduce_seq */\n        for (int v_i_25357 = 0; v_i_25357 < v_MWidthC_1; v_i_25357 = (1 + v_i_25357)) {\n          v__3017 = add(v__3017, v__25377[(v_i_25357 + (v_MWidthC_1 * v_l_id_25356))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25358 = 0; \n          v__25382[v_w_id_25352] = doubleMultiplyAdd(v__3017, v__25363, v__25362[v_w_id_25352], v__25364); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25352 = atomic_inc(v_work_idx_2185); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25359",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25360",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25361",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25363",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25364",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25366",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25377",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}