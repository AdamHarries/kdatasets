{
  "name" : "swrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19583, const global float* restrict v__19584, const global float* restrict v__19585, const global float* restrict v__19586, float v__19587, float v__19588, global float* v__19605, local float* v__19600, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19591; \n  float v__19593; \n  float v__3017; \n  /* Private Memory */\n  float v__19595_0;\n  \n  float v__19597_0;\n  \n  for (int v_wg_id_19576 = get_group_id(0); v_wg_id_19576 < v_MHeight_2; v_wg_id_19576 = (v_wg_id_19576 + get_num_groups(0))) {\n    for (int v_l_id_19577 = get_local_id(0); v_l_id_19577 < v_MWidthC_1; v_l_id_19577 = (v_l_id_19577 + get_local_size(0))) {\n      float v_tmp_19667 = 0.0f; \n      v__19591 = v_tmp_19667; \n      /* reduce_seq */\n      for (int v_i_19578 = 0; v_i_19578 < 256; v_i_19578 = (1 + v_i_19578)) {\n        float v_tmp_19668 = 0.0f; \n        v__19593 = v_tmp_19668; \n        int v_index_19669 = v__19583[(v_l_id_19577 + (256 * v_MWidthC_1 * v_wg_id_19576) + (v_MWidthC_1 * v_i_19578))]; \n        if (v_index_19669 < 0) {\n          v__19595_0 = v__19593; \n        } else {\n          if (v_index_19669 >= v_VLength_3) {\n            v__19595_0 = v__19593; \n          } else {\n            v__19595_0 = v__19585[v_index_19669]; \n          }\n        }\n        v__19597_0 = mult(v__19595_0, v__19584[(v_l_id_19577 + (256 * v_MWidthC_1 * v_wg_id_19576) + (v_MWidthC_1 * v_i_19578))]); \n        v__19591 = add(v__19597_0, v__19591); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19579 = 0; \n        v__19600[v_l_id_19577] = id(v__19591); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19580 = get_local_id(0); \n      float v_tmp_19672 = 0.0f; \n      v__3017 = v_tmp_19672; \n      /* reduce_seq */\n      for (int v_i_19581 = 0; v_i_19581 < v_MWidthC_1; v_i_19581 = (1 + v_i_19581)) {\n        v__3017 = add(v__3017, v__19600[(v_i_19581 + (v_MWidthC_1 * v_l_id_19580))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19582 = 0; \n        v__19605[v_wg_id_19576] = doubleMultiplyAdd(v__3017, v__19587, v__19586[v_wg_id_19576], v__19588); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19583",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19584",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19585",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19586",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19587",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19588",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19605",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19600",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}