{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10734, const global float* restrict v__10735, const global float* restrict v__10736, const global float* restrict v__10737, float v__10738, float v__10739, global float* v__10756, global float* v__10746, local float* v__10751, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10742; \n  float v__10747; \n  float v__3017; \n  /* Private Memory */\n  float v__10744_0;\n  \n  for (int v_wg_id_10726 = get_group_id(0); v_wg_id_10726 < v_MHeight_2; v_wg_id_10726 = (v_wg_id_10726 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_795; \n      v_work_idx_795 = 0; \n      int v_l_id_10727 = atomic_inc(&(v_work_idx_795)); \n      while((v_l_id_10727 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_10728 = 0; v_i_10728 < 32; v_i_10728 = (1 + v_i_10728)) {\n          float v_tmp_10810 = 0.0f; \n          v__10742 = v_tmp_10810; \n          int v_index_10811 = v__10734[(v_l_id_10727 + (32 * v_MWidthC_1 * v_wg_id_10726) + (v_MWidthC_1 * v_i_10728))]; \n          if (v_index_10811 < 0) {\n            v__10744_0 = v__10742; \n          } else {\n            if (v_index_10811 >= v_VLength_3) {\n              v__10744_0 = v__10742; \n            } else {\n              v__10744_0 = v__10736[v_index_10811]; \n            }\n          }\n          v__10746[(31 + (32 * v_MWidthC_1 * v_wg_id_10726) + (-1 * v_i_10728) + (32 * v_l_id_10727))] = mult(v__10744_0, v__10735[(v_l_id_10727 + (32 * v_MWidthC_1 * v_wg_id_10726) + (v_MWidthC_1 * v_i_10728))]); \n        }\n        /* end map_seq */\n        float v_tmp_10812 = 0.0f; \n        v__10747 = v_tmp_10812; \n        /* reduce_seq */\n        for (int v_i_10729 = 0; v_i_10729 < 32; v_i_10729 = (1 + v_i_10729)) {\n          v__10747 = add(v__10747, v__10746[(v_i_10729 + (32 * v_MWidthC_1 * v_wg_id_10726) + (32 * v_l_id_10727))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10730 = 0; \n          v__10751[v_l_id_10727] = id(v__10747); \n        }\n        /* end map_seq */\n        v_l_id_10727 = atomic_inc(&(v_work_idx_795)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_789; \n      v_work_idx_789 = 0; \n      int v_l_id_10731 = atomic_inc(&(v_work_idx_789)); \n      while((v_l_id_10731 < 1)){\n        float v_tmp_10815 = 0.0f; \n        v__3017 = v_tmp_10815; \n        /* reduce_seq */\n        for (int v_i_10732 = 0; v_i_10732 < v_MWidthC_1; v_i_10732 = (1 + v_i_10732)) {\n          v__3017 = add(v__3017, v__10751[v_i_10732]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10733 = 0; \n          v__10756[v_wg_id_10726] = doubleMultiplyAdd(v__3017, v__10738, v__10737[v_wg_id_10726], v__10739); \n        }\n        /* end map_seq */\n        v_l_id_10731 = atomic_inc(&(v_work_idx_789)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10734",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10735",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10746",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10756",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10751",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}