{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8265, const global float* restrict v__8266, const global float* restrict v__8267, const global float* restrict v__8268, float v__8269, float v__8270, global float* v__8288, global float* v__8278, global int* v__8272, local float* v__8283, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8274; \n  float v__8279; \n  float v__3017; \n  /* Private Memory */\n  float v__8276_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_562 = v__8272; \n    local int v_w_id_8257; \n    if (get_local_id(0) == 0) {\n      v_w_id_8257 = atomic_inc(v_work_idx_562); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8257 < v_MHeight_2)){\n      for (int v_l_id_8258 = get_local_id(0); v_l_id_8258 < v_MWidthC_1; v_l_id_8258 = (v_l_id_8258 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_8259 = 0; v_i_8259 < 16; v_i_8259 = (1 + v_i_8259)) {\n          float v_tmp_8344 = 0.0f; \n          v__8274 = v_tmp_8344; \n          int v_index_8345 = v__8265[(v_l_id_8258 + (16 * v_MWidthC_1 * v_w_id_8257) + (v_MWidthC_1 * v_i_8259))]; \n          if (v_index_8345 < 0) {\n            v__8276_0 = v__8274; \n          } else {\n            if (v_index_8345 >= v_VLength_3) {\n              v__8276_0 = v__8274; \n            } else {\n              v__8276_0 = v__8267[v_index_8345]; \n            }\n          }\n          v__8278[(15 + (16 * v_MWidthC_1 * v_w_id_8257) + (-1 * v_i_8259) + (16 * v_l_id_8258))] = mult(v__8276_0, v__8266[(v_l_id_8258 + (16 * v_MWidthC_1 * v_w_id_8257) + (v_MWidthC_1 * v_i_8259))]); \n        }\n        /* end map_seq */\n        float v_tmp_8346 = 0.0f; \n        v__8279 = v_tmp_8346; \n        /* reduce_seq */\n        for (int v_i_8260 = 0; v_i_8260 < 16; v_i_8260 = (1 + v_i_8260)) {\n          v__8279 = add(v__8279, v__8278[(v_i_8260 + (16 * v_MWidthC_1 * v_w_id_8257) + (16 * v_l_id_8258))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8261 = 0; \n          v__8283[v_l_id_8258] = id(v__8279); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_555; \n        v_work_idx_555 = 0; \n        int v_l_id_8262 = atomic_inc(&(v_work_idx_555)); \n        while((v_l_id_8262 < 1)){\n          float v_tmp_8349 = 0.0f; \n          v__3017 = v_tmp_8349; \n          /* reduce_seq */\n          for (int v_i_8263 = 0; v_i_8263 < v_MWidthC_1; v_i_8263 = (1 + v_i_8263)) {\n            v__3017 = add(v__3017, v__8283[v_i_8263]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_8264 = 0; \n            v__8288[v_w_id_8257] = doubleMultiplyAdd(v__3017, v__8269, v__8268[v_w_id_8257], v__8270); \n          }\n          /* end map_seq */\n          v_l_id_8262 = atomic_inc(&(v_work_idx_555)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8257 = atomic_inc(v_work_idx_562); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__8265",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8266",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8267",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8268",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8269",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8270",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8278",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8272",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8288",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8283",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}