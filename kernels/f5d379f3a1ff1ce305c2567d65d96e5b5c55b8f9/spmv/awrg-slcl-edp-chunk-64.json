{
  "name" : "awrg-slcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14464, const global float* restrict v__14465, const global float* restrict v__14466, const global float* restrict v__14467, float v__14468, float v__14469, global float* v__14485, global int* v__14471, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14472; \n  float v__14475; \n  /* Private Memory */\n  float v__14477_0;\n  \n  float v__14479_0;\n  \n  int v__14483_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1147 = v__14471; \n    local int v_w_id_14460; \n    if (get_local_id(0) == 0) {\n      v_w_id_14460 = atomic_inc(v_work_idx_1147); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14460 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_14461 = get_local_id(0); v_l_id_14461 < 64; v_l_id_14461 = (v_l_id_14461 + get_local_size(0))) {\n        float v_tmp_14531 = 0.0f; \n        v__14472 = v_tmp_14531; \n        /* reduce_while_seq */\n        for (int v_i_14462 = 0; v_i_14462 < v_MWidthC_1; v_i_14462 = (1 + v_i_14462)) {\n          v__14483_0 = check(v__14472, v__14464[(v_i_14462 + (64 * v_MWidthC_1 * v_w_id_14460) + (v_MWidthC_1 * v_l_id_14461))]); \n          if (v__14483_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14532 = 0.0f; \n          v__14475 = v_tmp_14532; \n          int v_index_14533 = v__14464[(v_i_14462 + (64 * v_MWidthC_1 * v_w_id_14460) + (v_MWidthC_1 * v_l_id_14461))]; \n          if (v_index_14533 < 0) {\n            v__14477_0 = v__14475; \n          } else {\n            if (v_index_14533 >= v_VLength_3) {\n              v__14477_0 = v__14475; \n            } else {\n              v__14477_0 = v__14466[v_index_14533]; \n            }\n          }\n          v__14479_0 = mult(v__14477_0, v__14465[(v_i_14462 + (64 * v_MWidthC_1 * v_w_id_14460) + (v_MWidthC_1 * v_l_id_14461))]); \n          v__14472 = add(v__14479_0, v__14472); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14463 = 0; \n          v__14485[(v_l_id_14461 + (64 * v_w_id_14460))] = doubleMultiplyAdd(v__14472, v__14468, v__14467[(v_l_id_14461 + (64 * v_w_id_14460))], v__14469); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_14460 = atomic_inc(v_work_idx_1147); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14464",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14466",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14467",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14468",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14469",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14471",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}