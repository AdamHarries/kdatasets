{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__9263, const global float* restrict v__9264, const global float* restrict v__9265, const global float* restrict v__9266, float v__9267, float v__9268, global float* v__9288, global int* v__9270, local float* v__9283, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9272; \n  float v__9274; \n  float v__3017; \n  /* Private Memory */\n  float v__9276_0;\n  \n  float v__9278_0;\n  \n  int v__9282_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_669 = v__9270; \n    local int v_w_id_9256; \n    if (get_local_id(0) == 0) {\n      v_w_id_9256 = atomic_inc(v_work_idx_669); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_9256 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_667; \n        v_work_idx_667 = 0; \n        int v_l_id_9257 = atomic_inc(&(v_work_idx_667)); \n        while((v_l_id_9257 < v_MWidthC_1)){\n          float v_tmp_9342 = 0.0f; \n          v__9272 = v_tmp_9342; \n          /* reduce_while_seq */\n          for (int v_i_9258 = 0; v_i_9258 < 16; v_i_9258 = (1 + v_i_9258)) {\n            v__9282_0 = check(v__9272, v__9263[(v_l_id_9257 + (16 * v_MWidthC_1 * v_w_id_9256) + (v_MWidthC_1 * v_i_9258))]); \n            if (v__9282_0) {\n            } else {\n              break;\n            }\n            float v_tmp_9343 = 0.0f; \n            v__9274 = v_tmp_9343; \n            int v_index_9344 = v__9263[(v_l_id_9257 + (16 * v_MWidthC_1 * v_w_id_9256) + (v_MWidthC_1 * v_i_9258))]; \n            if (v_index_9344 < 0) {\n              v__9276_0 = v__9274; \n            } else {\n              if (v_index_9344 >= v_VLength_3) {\n                v__9276_0 = v__9274; \n              } else {\n                v__9276_0 = v__9265[v_index_9344]; \n              }\n            }\n            v__9278_0 = mult(v__9276_0, v__9264[(v_l_id_9257 + (16 * v_MWidthC_1 * v_w_id_9256) + (v_MWidthC_1 * v_i_9258))]); \n            v__9272 = add(v__9278_0, v__9272); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9259 = 0; \n            v__9283[v_l_id_9257] = id(v__9272); \n          }\n          /* end map_seq */\n          v_l_id_9257 = atomic_inc(&(v_work_idx_667)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_662; \n        v_work_idx_662 = 0; \n        int v_l_id_9260 = atomic_inc(&(v_work_idx_662)); \n        while((v_l_id_9260 < 1)){\n          float v_tmp_9347 = 0.0f; \n          v__3017 = v_tmp_9347; \n          /* reduce_seq */\n          for (int v_i_9261 = 0; v_i_9261 < v_MWidthC_1; v_i_9261 = (1 + v_i_9261)) {\n            v__3017 = add(v__3017, v__9283[v_i_9261]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9262 = 0; \n            v__9288[v_w_id_9256] = doubleMultiplyAdd(v__3017, v__9267, v__9266[v_w_id_9256], v__9268); \n          }\n          /* end map_seq */\n          v_l_id_9260 = atomic_inc(&(v_work_idx_662)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_9256 = atomic_inc(v_work_idx_669); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__9263",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9264",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9265",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9266",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9267",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9268",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9270",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9288",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9283",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}