{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19795, const global float* restrict v__19796, const global float* restrict v__19797, const global float* restrict v__19798, float v__19799, float v__19800, global float* v__19817, global float* v__19807, local float* v__19812, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19803; \n  float v__19808; \n  float v__3017; \n  /* Private Memory */\n  float v__19805_0;\n  \n  for (int v_wg_id_19787 = get_group_id(0); v_wg_id_19787 < v_MHeight_2; v_wg_id_19787 = (v_wg_id_19787 + get_num_groups(0))) {\n    for (int v_l_id_19788 = get_local_id(0); v_l_id_19788 < v_MWidthC_1; v_l_id_19788 = (v_l_id_19788 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19789 = 0; v_i_19789 < 256; v_i_19789 = (1 + v_i_19789)) {\n        float v_tmp_19876 = 0.0f; \n        v__19803 = v_tmp_19876; \n        int v_index_19877 = v__19795[(v_l_id_19788 + (256 * v_MWidthC_1 * v_wg_id_19787) + (v_MWidthC_1 * v_i_19789))]; \n        if (v_index_19877 < 0) {\n          v__19805_0 = v__19803; \n        } else {\n          if (v_index_19877 >= v_VLength_3) {\n            v__19805_0 = v__19803; \n          } else {\n            v__19805_0 = v__19797[v_index_19877]; \n          }\n        }\n        v__19807[(255 + (256 * v_MWidthC_1 * v_wg_id_19787) + (-1 * v_i_19789) + (256 * v_l_id_19788))] = mult(v__19805_0, v__19796[(v_l_id_19788 + (256 * v_MWidthC_1 * v_wg_id_19787) + (v_MWidthC_1 * v_i_19789))]); \n      }\n      /* end map_seq */\n      float v_tmp_19878 = 0.0f; \n      v__19808 = v_tmp_19878; \n      /* reduce_seq */\n      for (int v_i_19790 = 0; v_i_19790 < 256; v_i_19790 = (1 + v_i_19790)) {\n        v__19808 = add(v__19808, v__19807[(v_i_19790 + (256 * v_MWidthC_1 * v_wg_id_19787) + (256 * v_l_id_19788))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19791 = 0; \n        v__19812[v_l_id_19788] = id(v__19808); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1650; \n      v_work_idx_1650 = 0; \n      int v_l_id_19792 = atomic_inc(&(v_work_idx_1650)); \n      while((v_l_id_19792 < 1)){\n        float v_tmp_19881 = 0.0f; \n        v__3017 = v_tmp_19881; \n        /* reduce_seq */\n        for (int v_i_19793 = 0; v_i_19793 < v_MWidthC_1; v_i_19793 = (1 + v_i_19793)) {\n          v__3017 = add(v__3017, v__19812[v_i_19793]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_19794 = 0; \n          v__19817[v_wg_id_19787] = doubleMultiplyAdd(v__3017, v__19799, v__19798[v_wg_id_19787], v__19800); \n        }\n        /* end map_seq */\n        v_l_id_19792 = atomic_inc(&(v_work_idx_1650)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19795",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19796",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19797",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19798",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19799",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19800",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19807",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__19817",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19812",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}