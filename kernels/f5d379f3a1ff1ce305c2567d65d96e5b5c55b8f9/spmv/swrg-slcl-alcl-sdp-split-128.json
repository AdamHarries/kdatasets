{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16499, const global float* restrict v__16500, const global float* restrict v__16501, const global float* restrict v__16502, float v__16503, float v__16504, global float* v__16521, global float* v__16511, local float* v__16516, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16507; \n  float v__16512; \n  float v__3017; \n  /* Private Memory */\n  float v__16509_0;\n  \n  for (int v_wg_id_16491 = get_group_id(0); v_wg_id_16491 < v_MHeight_2; v_wg_id_16491 = (v_wg_id_16491 + get_num_groups(0))) {\n    for (int v_l_id_16492 = get_local_id(0); v_l_id_16492 < v_MWidthC_1; v_l_id_16492 = (v_l_id_16492 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_16493 = 0; v_i_16493 < 128; v_i_16493 = (1 + v_i_16493)) {\n        float v_tmp_16580 = 0.0f; \n        v__16507 = v_tmp_16580; \n        int v_index_16581 = v__16499[(v_l_id_16492 + (128 * v_MWidthC_1 * v_wg_id_16491) + (v_MWidthC_1 * v_i_16493))]; \n        if (v_index_16581 < 0) {\n          v__16509_0 = v__16507; \n        } else {\n          if (v_index_16581 >= v_VLength_3) {\n            v__16509_0 = v__16507; \n          } else {\n            v__16509_0 = v__16501[v_index_16581]; \n          }\n        }\n        v__16511[(127 + (128 * v_MWidthC_1 * v_wg_id_16491) + (-1 * v_i_16493) + (128 * v_l_id_16492))] = mult(v__16509_0, v__16500[(v_l_id_16492 + (128 * v_MWidthC_1 * v_wg_id_16491) + (v_MWidthC_1 * v_i_16493))]); \n      }\n      /* end map_seq */\n      float v_tmp_16582 = 0.0f; \n      v__16512 = v_tmp_16582; \n      /* reduce_seq */\n      for (int v_i_16494 = 0; v_i_16494 < 128; v_i_16494 = (1 + v_i_16494)) {\n        v__16512 = add(v__16512, v__16511[(v_i_16494 + (128 * v_MWidthC_1 * v_wg_id_16491) + (128 * v_l_id_16492))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16495 = 0; \n        v__16516[v_l_id_16492] = id(v__16512); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1338; \n      v_work_idx_1338 = 0; \n      int v_l_id_16496 = atomic_inc(&(v_work_idx_1338)); \n      while((v_l_id_16496 < 1)){\n        float v_tmp_16585 = 0.0f; \n        v__3017 = v_tmp_16585; \n        /* reduce_seq */\n        for (int v_i_16497 = 0; v_i_16497 < v_MWidthC_1; v_i_16497 = (1 + v_i_16497)) {\n          v__3017 = add(v__3017, v__16516[v_i_16497]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16498 = 0; \n          v__16521[v_wg_id_16491] = doubleMultiplyAdd(v__3017, v__16503, v__16502[v_wg_id_16491], v__16504); \n        }\n        /* end map_seq */\n        v_l_id_16496 = atomic_inc(&(v_work_idx_1338)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16499",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16500",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16501",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16503",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16504",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16511",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16516",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}