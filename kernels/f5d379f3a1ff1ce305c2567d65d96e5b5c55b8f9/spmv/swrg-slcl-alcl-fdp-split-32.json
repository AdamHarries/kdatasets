{
  "name" : "swrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10007, const global float* restrict v__10008, const global float* restrict v__10009, const global float* restrict v__10010, float v__10011, float v__10012, global float* v__10029, local float* v__10024, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10015; \n  float v__10017; \n  float v__3017; \n  /* Private Memory */\n  float v__10019_0;\n  \n  float v__10021_0;\n  \n  for (int v_wg_id_10000 = get_group_id(0); v_wg_id_10000 < v_MHeight_2; v_wg_id_10000 = (v_wg_id_10000 + get_num_groups(0))) {\n    for (int v_l_id_10001 = get_local_id(0); v_l_id_10001 < v_MWidthC_1; v_l_id_10001 = (v_l_id_10001 + get_local_size(0))) {\n      float v_tmp_10088 = 0.0f; \n      v__10015 = v_tmp_10088; \n      /* reduce_seq */\n      for (int v_i_10002 = 0; v_i_10002 < 32; v_i_10002 = (1 + v_i_10002)) {\n        float v_tmp_10089 = 0.0f; \n        v__10017 = v_tmp_10089; \n        int v_index_10090 = v__10007[(v_l_id_10001 + (32 * v_MWidthC_1 * v_wg_id_10000) + (v_MWidthC_1 * v_i_10002))]; \n        if (v_index_10090 < 0) {\n          v__10019_0 = v__10017; \n        } else {\n          if (v_index_10090 >= v_VLength_3) {\n            v__10019_0 = v__10017; \n          } else {\n            v__10019_0 = v__10009[v_index_10090]; \n          }\n        }\n        v__10021_0 = mult(v__10019_0, v__10008[(v_l_id_10001 + (32 * v_MWidthC_1 * v_wg_id_10000) + (v_MWidthC_1 * v_i_10002))]); \n        v__10015 = add(v__10021_0, v__10015); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10003 = 0; \n        v__10024[v_l_id_10001] = id(v__10015); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_724; \n      v_work_idx_724 = 0; \n      int v_l_id_10004 = atomic_inc(&(v_work_idx_724)); \n      while((v_l_id_10004 < 1)){\n        float v_tmp_10093 = 0.0f; \n        v__3017 = v_tmp_10093; \n        /* reduce_seq */\n        for (int v_i_10005 = 0; v_i_10005 < v_MWidthC_1; v_i_10005 = (1 + v_i_10005)) {\n          v__3017 = add(v__3017, v__10024[v_i_10005]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10006 = 0; \n          v__10029[v_wg_id_10000] = doubleMultiplyAdd(v__3017, v__10011, v__10010[v_wg_id_10000], v__10012); \n        }\n        /* end map_seq */\n        v_l_id_10004 = atomic_inc(&(v_work_idx_724)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__10007",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10008",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10009",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10011",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10012",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10024",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}