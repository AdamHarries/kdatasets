{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__8057, const global float* restrict v__8058, const global float* restrict v__8059, const global float* restrict v__8060, float v__8061, float v__8062, global float* v__8080, global int* v__8064, local float* v__8075, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__8066; \n  float v__8068; \n  float v__3017; \n  /* Private Memory */\n  float v__8070_0;\n  \n  float v__8072_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_542 = v__8064; \n    local int v_w_id_8050; \n    if (get_local_id(0) == 0) {\n      v_w_id_8050 = atomic_inc(v_work_idx_542); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_8050 < v_MHeight_2)){\n      for (int v_l_id_8051 = get_local_id(0); v_l_id_8051 < v_MWidthC_1; v_l_id_8051 = (v_l_id_8051 + get_local_size(0))) {\n        float v_tmp_8139 = 0.0f; \n        v__8066 = v_tmp_8139; \n        /* reduce_seq */\n        for (int v_i_8052 = 0; v_i_8052 < 16; v_i_8052 = (1 + v_i_8052)) {\n          float v_tmp_8140 = 0.0f; \n          v__8068 = v_tmp_8140; \n          int v_index_8141 = v__8057[(v_l_id_8051 + (16 * v_MWidthC_1 * v_w_id_8050) + (v_MWidthC_1 * v_i_8052))]; \n          if (v_index_8141 < 0) {\n            v__8070_0 = v__8068; \n          } else {\n            if (v_index_8141 >= v_VLength_3) {\n              v__8070_0 = v__8068; \n            } else {\n              v__8070_0 = v__8059[v_index_8141]; \n            }\n          }\n          v__8072_0 = mult(v__8070_0, v__8058[(v_l_id_8051 + (16 * v_MWidthC_1 * v_w_id_8050) + (v_MWidthC_1 * v_i_8052))]); \n          v__8066 = add(v__8072_0, v__8066); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8053 = 0; \n          v__8075[v_l_id_8051] = id(v__8066); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_8054 = get_local_id(0); \n        float v_tmp_8144 = 0.0f; \n        v__3017 = v_tmp_8144; \n        /* reduce_seq */\n        for (int v_i_8055 = 0; v_i_8055 < v_MWidthC_1; v_i_8055 = (1 + v_i_8055)) {\n          v__3017 = add(v__3017, v__8075[(v_i_8055 + (v_MWidthC_1 * v_l_id_8054))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_8056 = 0; \n          v__8080[v_w_id_8050] = doubleMultiplyAdd(v__3017, v__8061, v__8060[v_w_id_8050], v__8062); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_8050 = atomic_inc(v_work_idx_542); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__8057",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8058",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__8059",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__8060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__8061",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__8062",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__8064",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__8080",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__8075",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}