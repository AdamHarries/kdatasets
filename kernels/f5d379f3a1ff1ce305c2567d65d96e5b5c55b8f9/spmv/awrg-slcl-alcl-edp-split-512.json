{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__24941, const global float* restrict v__24942, const global float* restrict v__24943, const global float* restrict v__24944, float v__24945, float v__24946, global float* v__24966, global int* v__24948, local float* v__24961, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24950; \n  float v__24952; \n  float v__3017; \n  /* Private Memory */\n  float v__24954_0;\n  \n  float v__24956_0;\n  \n  int v__24960_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2142 = v__24948; \n    local int v_w_id_24934; \n    if (get_local_id(0) == 0) {\n      v_w_id_24934 = atomic_inc(v_work_idx_2142); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24934 < v_MHeight_2)){\n      for (int v_l_id_24935 = get_local_id(0); v_l_id_24935 < v_MWidthC_1; v_l_id_24935 = (v_l_id_24935 + get_local_size(0))) {\n        float v_tmp_25025 = 0.0f; \n        v__24950 = v_tmp_25025; \n        /* reduce_while_seq */\n        for (int v_i_24936 = 0; v_i_24936 < 512; v_i_24936 = (1 + v_i_24936)) {\n          v__24960_0 = check(v__24950, v__24941[(v_l_id_24935 + (512 * v_MWidthC_1 * v_w_id_24934) + (v_MWidthC_1 * v_i_24936))]); \n          if (v__24960_0) {\n          } else {\n            break;\n          }\n          float v_tmp_25026 = 0.0f; \n          v__24952 = v_tmp_25026; \n          int v_index_25027 = v__24941[(v_l_id_24935 + (512 * v_MWidthC_1 * v_w_id_24934) + (v_MWidthC_1 * v_i_24936))]; \n          if (v_index_25027 < 0) {\n            v__24954_0 = v__24952; \n          } else {\n            if (v_index_25027 >= v_VLength_3) {\n              v__24954_0 = v__24952; \n            } else {\n              v__24954_0 = v__24943[v_index_25027]; \n            }\n          }\n          v__24956_0 = mult(v__24954_0, v__24942[(v_l_id_24935 + (512 * v_MWidthC_1 * v_w_id_24934) + (v_MWidthC_1 * v_i_24936))]); \n          v__24950 = add(v__24956_0, v__24950); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24937 = 0; \n          v__24961[v_l_id_24935] = id(v__24950); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2136; \n        v_work_idx_2136 = 0; \n        int v_l_id_24938 = atomic_inc(&(v_work_idx_2136)); \n        while((v_l_id_24938 < 1)){\n          float v_tmp_25030 = 0.0f; \n          v__3017 = v_tmp_25030; \n          /* reduce_seq */\n          for (int v_i_24939 = 0; v_i_24939 < v_MWidthC_1; v_i_24939 = (1 + v_i_24939)) {\n            v__3017 = add(v__3017, v__24961[v_i_24939]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_24940 = 0; \n            v__24966[v_w_id_24934] = doubleMultiplyAdd(v__3017, v__24945, v__24944[v_w_id_24934], v__24946); \n          }\n          /* end map_seq */\n          v_l_id_24938 = atomic_inc(&(v_work_idx_2136)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24934 = atomic_inc(v_work_idx_2142); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__24941",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24942",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24943",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24945",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24946",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24948",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24966",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24961",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}