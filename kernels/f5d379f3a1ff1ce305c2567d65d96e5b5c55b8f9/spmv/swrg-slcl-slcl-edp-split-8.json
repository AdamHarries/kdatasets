{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__3206, const global float* restrict v__3207, const global float* restrict v__3208, const global float* restrict v__3209, float v__3210, float v__3211, global float* v__3230, local float* v__3225, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__3214; \n  float v__3216; \n  float v__3017; \n  /* Private Memory */\n  float v__3218_0;\n  \n  float v__3220_0;\n  \n  int v__3224_0;\n  \n  for (int v_wg_id_3199 = get_group_id(0); v_wg_id_3199 < v_MHeight_2; v_wg_id_3199 = (v_wg_id_3199 + get_num_groups(0))) {\n    for (int v_l_id_3200 = get_local_id(0); v_l_id_3200 < v_MWidthC_1; v_l_id_3200 = (v_l_id_3200 + get_local_size(0))) {\n      float v_tmp_3295 = 0.0f; \n      v__3214 = v_tmp_3295; \n      /* reduce_while_seq */\n      for (int v_i_3201 = 0; v_i_3201 < 8; v_i_3201 = (1 + v_i_3201)) {\n        v__3224_0 = check(v__3214, v__3206[(v_l_id_3200 + (8 * v_MWidthC_1 * v_wg_id_3199) + (v_MWidthC_1 * v_i_3201))]); \n        if (v__3224_0) {\n        } else {\n          break;\n        }\n        float v_tmp_3296 = 0.0f; \n        v__3216 = v_tmp_3296; \n        int v_index_3297 = v__3206[(v_l_id_3200 + (8 * v_MWidthC_1 * v_wg_id_3199) + (v_MWidthC_1 * v_i_3201))]; \n        if (v_index_3297 < 0) {\n          v__3218_0 = v__3216; \n        } else {\n          if (v_index_3297 >= v_VLength_3) {\n            v__3218_0 = v__3216; \n          } else {\n            v__3218_0 = v__3208[v_index_3297]; \n          }\n        }\n        v__3220_0 = mult(v__3218_0, v__3207[(v_l_id_3200 + (8 * v_MWidthC_1 * v_wg_id_3199) + (v_MWidthC_1 * v_i_3201))]); \n        v__3214 = add(v__3220_0, v__3214); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_3202 = 0; \n        v__3225[v_l_id_3200] = id(v__3214); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_3203 = get_local_id(0); \n      float v_tmp_3300 = 0.0f; \n      v__3017 = v_tmp_3300; \n      /* reduce_seq */\n      for (int v_i_3204 = 0; v_i_3204 < v_MWidthC_1; v_i_3204 = (1 + v_i_3204)) {\n        v__3017 = add(v__3017, v__3225[(v_i_3204 + (v_MWidthC_1 * v_l_id_3203))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_3205 = 0; \n        v__3230[v_wg_id_3199] = doubleMultiplyAdd(v__3017, v__3210, v__3209[v_wg_id_3199], v__3211); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__3206",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3207",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3208",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__3209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__3210",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__3211",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__3230",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__3225",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}