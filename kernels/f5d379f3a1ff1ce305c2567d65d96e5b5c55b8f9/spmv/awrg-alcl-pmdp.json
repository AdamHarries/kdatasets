{
  "name" : "awrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2633, const global float* restrict v__2634, const global float* restrict v__2635, const global float* restrict v__2636, float v__2637, float v__2638, global float* v__2652, global float* v__2646, global int* v__2640, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2642; \n  float v__2647; \n  /* Private Memory */\n  float v__2644_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_41 = v__2640; \n    local int v_w_id_2629; \n    if (get_local_id(0) == 0) {\n      v_w_id_2629 = atomic_inc(v_work_idx_41); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_2629 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_l_id_39; \n        v_l_id_39 = 0; \n        int v_l_id_2630 = atomic_inc(&(v_l_id_39)); \n        while((v_l_id_2630 < v_MWidthC_1)){\n          float v_tmp_2682 = 0.0f; \n          v__2642 = v_tmp_2682; \n          int v_index_2683 = v__2633[(v_l_id_2630 + (v_MWidthC_1 * v_w_id_2629))]; \n          if (v_index_2683 < 0) {\n            v__2644_0 = v__2642; \n          } else {\n            if (v_index_2683 >= v_VLength_3) {\n              v__2644_0 = v__2642; \n            } else {\n              v__2644_0 = v__2635[v_index_2683]; \n            }\n          }\n          v__2646[(-1 + v_MWidthC_1 + (-1 * v_l_id_2630) + (v_MWidthC_1 * v_w_id_2629))] = mult(v__2644_0, v__2634[(v_l_id_2630 + (v_MWidthC_1 * v_w_id_2629))]); \n          v_l_id_2630 = atomic_inc(&(v_l_id_39)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_2684 = 0.0f; \n      v__2647 = v_tmp_2684; \n      /* reduce_seq */\n      for (int v_i_2631 = 0; v_i_2631 < v_MWidthC_1; v_i_2631 = (1 + v_i_2631)) {\n        v__2647 = add(v__2647, v__2646[(v_i_2631 + (v_MWidthC_1 * v_w_id_2629))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_2632 = 0; \n        v__2652[v_w_id_2629] = doubleMultiplyAdd(v__2647, v__2637, v__2636[v_w_id_2629], v__2638); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_2629 = atomic_inc(v_work_idx_41); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__2633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2634",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2635",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2637",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2638",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__2646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2640",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__2652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}