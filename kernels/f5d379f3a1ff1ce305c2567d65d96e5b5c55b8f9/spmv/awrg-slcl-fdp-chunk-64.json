{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14392, const global float* restrict v__14393, const global float* restrict v__14394, const global float* restrict v__14395, float v__14396, float v__14397, global float* v__14411, global int* v__14399, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14401; \n  float v__14403; \n  /* Private Memory */\n  float v__14405_0;\n  \n  float v__14407_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1141 = v__14399; \n    local int v_w_id_14388; \n    if (get_local_id(0) == 0) {\n      v_w_id_14388 = atomic_inc(v_work_idx_1141); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14388 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_14389 = get_local_id(0); v_l_id_14389 < 64; v_l_id_14389 = (v_l_id_14389 + get_local_size(0))) {\n        float v_tmp_14451 = 0.0f; \n        v__14401 = v_tmp_14451; \n        /* reduce_seq */\n        for (int v_i_14390 = 0; v_i_14390 < v_MWidthC_1; v_i_14390 = (1 + v_i_14390)) {\n          float v_tmp_14452 = 0.0f; \n          v__14403 = v_tmp_14452; \n          int v_index_14453 = v__14392[(v_i_14390 + (64 * v_MWidthC_1 * v_w_id_14388) + (v_MWidthC_1 * v_l_id_14389))]; \n          if (v_index_14453 < 0) {\n            v__14405_0 = v__14403; \n          } else {\n            if (v_index_14453 >= v_VLength_3) {\n              v__14405_0 = v__14403; \n            } else {\n              v__14405_0 = v__14394[v_index_14453]; \n            }\n          }\n          v__14407_0 = mult(v__14405_0, v__14393[(v_i_14390 + (64 * v_MWidthC_1 * v_w_id_14388) + (v_MWidthC_1 * v_l_id_14389))]); \n          v__14401 = add(v__14407_0, v__14401); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14391 = 0; \n          v__14411[(v_l_id_14389 + (64 * v_w_id_14388))] = doubleMultiplyAdd(v__14401, v__14396, v__14395[(v_l_id_14389 + (64 * v_w_id_14388))], v__14397); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_14388 = atomic_inc(v_work_idx_1141); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__14392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14393",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14394",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14396",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14397",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14399",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14411",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}