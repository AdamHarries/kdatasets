{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20322, const global float* restrict v__20323, const global float* restrict v__20324, const global float* restrict v__20325, float v__20326, float v__20327, global float* v__20344, global float* v__20334, local float* v__20339, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20330; \n  float v__20335; \n  float v__3017; \n  /* Private Memory */\n  float v__20332_0;\n  \n  for (int v_wg_id_20314 = get_group_id(0); v_wg_id_20314 < v_MHeight_2; v_wg_id_20314 = (v_wg_id_20314 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1702; \n      v_work_idx_1702 = 0; \n      int v_l_id_20315 = atomic_inc(&(v_work_idx_1702)); \n      while((v_l_id_20315 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20316 = 0; v_i_20316 < 256; v_i_20316 = (1 + v_i_20316)) {\n          float v_tmp_20401 = 0.0f; \n          v__20330 = v_tmp_20401; \n          int v_index_20402 = v__20322[(v_l_id_20315 + (256 * v_MWidthC_1 * v_wg_id_20314) + (v_MWidthC_1 * v_i_20316))]; \n          if (v_index_20402 < 0) {\n            v__20332_0 = v__20330; \n          } else {\n            if (v_index_20402 >= v_VLength_3) {\n              v__20332_0 = v__20330; \n            } else {\n              v__20332_0 = v__20324[v_index_20402]; \n            }\n          }\n          v__20334[(255 + (256 * v_MWidthC_1 * v_wg_id_20314) + (-1 * v_i_20316) + (256 * v_l_id_20315))] = mult(v__20332_0, v__20323[(v_l_id_20315 + (256 * v_MWidthC_1 * v_wg_id_20314) + (v_MWidthC_1 * v_i_20316))]); \n        }\n        /* end map_seq */\n        float v_tmp_20403 = 0.0f; \n        v__20335 = v_tmp_20403; \n        /* reduce_seq */\n        for (int v_i_20317 = 0; v_i_20317 < 256; v_i_20317 = (1 + v_i_20317)) {\n          v__20335 = add(v__20335, v__20334[(v_i_20317 + (256 * v_MWidthC_1 * v_wg_id_20314) + (256 * v_l_id_20315))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20318 = 0; \n          v__20339[v_l_id_20315] = id(v__20335); \n        }\n        /* end map_seq */\n        v_l_id_20315 = atomic_inc(&(v_work_idx_1702)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_20319 = get_local_id(0); \n      float v_tmp_20406 = 0.0f; \n      v__3017 = v_tmp_20406; \n      /* reduce_seq */\n      for (int v_i_20320 = 0; v_i_20320 < v_MWidthC_1; v_i_20320 = (1 + v_i_20320)) {\n        v__3017 = add(v__3017, v__20339[(v_i_20320 + (v_MWidthC_1 * v_l_id_20319))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20321 = 0; \n        v__20344[v_wg_id_20314] = doubleMultiplyAdd(v__3017, v__20326, v__20325[v_wg_id_20314], v__20327); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20322",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20323",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20324",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20326",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20327",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20334",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20339",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}