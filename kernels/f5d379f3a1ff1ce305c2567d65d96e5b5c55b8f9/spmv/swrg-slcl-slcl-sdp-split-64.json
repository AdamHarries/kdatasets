{
  "name" : "swrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12888, const global float* restrict v__12889, const global float* restrict v__12890, const global float* restrict v__12891, float v__12892, float v__12893, global float* v__12910, global float* v__12900, local float* v__12905, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12896; \n  float v__12901; \n  float v__3017; \n  /* Private Memory */\n  float v__12898_0;\n  \n  for (int v_wg_id_12880 = get_group_id(0); v_wg_id_12880 < v_MHeight_2; v_wg_id_12880 = (v_wg_id_12880 + get_num_groups(0))) {\n    for (int v_l_id_12881 = get_local_id(0); v_l_id_12881 < v_MWidthC_1; v_l_id_12881 = (v_l_id_12881 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_12882 = 0; v_i_12882 < 64; v_i_12882 = (1 + v_i_12882)) {\n        float v_tmp_12972 = 0.0f; \n        v__12896 = v_tmp_12972; \n        int v_index_12973 = v__12888[(v_l_id_12881 + (64 * v_MWidthC_1 * v_wg_id_12880) + (v_MWidthC_1 * v_i_12882))]; \n        if (v_index_12973 < 0) {\n          v__12898_0 = v__12896; \n        } else {\n          if (v_index_12973 >= v_VLength_3) {\n            v__12898_0 = v__12896; \n          } else {\n            v__12898_0 = v__12890[v_index_12973]; \n          }\n        }\n        v__12900[(63 + (64 * v_MWidthC_1 * v_wg_id_12880) + (-1 * v_i_12882) + (64 * v_l_id_12881))] = mult(v__12898_0, v__12889[(v_l_id_12881 + (64 * v_MWidthC_1 * v_wg_id_12880) + (v_MWidthC_1 * v_i_12882))]); \n      }\n      /* end map_seq */\n      float v_tmp_12974 = 0.0f; \n      v__12901 = v_tmp_12974; \n      /* reduce_seq */\n      for (int v_i_12883 = 0; v_i_12883 < 64; v_i_12883 = (1 + v_i_12883)) {\n        v__12901 = add(v__12901, v__12900[(v_i_12883 + (64 * v_MWidthC_1 * v_wg_id_12880) + (64 * v_l_id_12881))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_12884 = 0; \n        v__12905[v_l_id_12881] = id(v__12901); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_12885 = get_local_id(0); \n      float v_tmp_12977 = 0.0f; \n      v__3017 = v_tmp_12977; \n      /* reduce_seq */\n      for (int v_i_12886 = 0; v_i_12886 < v_MWidthC_1; v_i_12886 = (1 + v_i_12886)) {\n        v__3017 = add(v__3017, v__12905[(v_i_12886 + (v_MWidthC_1 * v_l_id_12885))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_12887 = 0; \n        v__12910[v_wg_id_12880] = doubleMultiplyAdd(v__3017, v__12892, v__12891[v_wg_id_12880], v__12893); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12888",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12889",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12890",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12892",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12893",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12900",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__12910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12905",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}