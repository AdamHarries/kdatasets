{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10352, const global float* restrict v__10353, const global float* restrict v__10354, const global float* restrict v__10355, float v__10356, float v__10357, global float* v__10372, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10359; \n  float v__10362; \n  /* Private Memory */\n  float v__10364_0;\n  \n  float v__10366_0;\n  \n  int v__10370_0;\n  \n  for (int v_wg_id_10348 = get_group_id(0); v_wg_id_10348 < ((v_MHeight_2)/(32)); v_wg_id_10348 = (v_wg_id_10348 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_756; \n      v_work_idx_756 = 0; \n      int v_l_id_10349 = atomic_inc(&(v_work_idx_756)); \n      while((v_l_id_10349 < 32)){\n        float v_tmp_10417 = 0.0f; \n        v__10359 = v_tmp_10417; \n        /* reduce_while_seq */\n        for (int v_i_10350 = 0; v_i_10350 < v_MWidthC_1; v_i_10350 = (1 + v_i_10350)) {\n          v__10370_0 = check(v__10359, v__10352[(v_i_10350 + (32 * v_MWidthC_1 * v_wg_id_10348) + (v_MWidthC_1 * v_l_id_10349))]); \n          if (v__10370_0) {\n          } else {\n            break;\n          }\n          float v_tmp_10418 = 0.0f; \n          v__10362 = v_tmp_10418; \n          int v_index_10419 = v__10352[(v_i_10350 + (32 * v_MWidthC_1 * v_wg_id_10348) + (v_MWidthC_1 * v_l_id_10349))]; \n          if (v_index_10419 < 0) {\n            v__10364_0 = v__10362; \n          } else {\n            if (v_index_10419 >= v_VLength_3) {\n              v__10364_0 = v__10362; \n            } else {\n              v__10364_0 = v__10354[v_index_10419]; \n            }\n          }\n          v__10366_0 = mult(v__10364_0, v__10353[(v_i_10350 + (32 * v_MWidthC_1 * v_wg_id_10348) + (v_MWidthC_1 * v_l_id_10349))]); \n          v__10359 = add(v__10366_0, v__10359); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10351 = 0; \n          v__10372[(v_l_id_10349 + (32 * v_wg_id_10348))] = doubleMultiplyAdd(v__10359, v__10356, v__10355[(v_l_id_10349 + (32 * v_wg_id_10348))], v__10357); \n        }\n        /* end map_seq */\n        v_l_id_10349 = atomic_inc(&(v_work_idx_756)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10352",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10353",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10354",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10355",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10356",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10357",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10372",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}