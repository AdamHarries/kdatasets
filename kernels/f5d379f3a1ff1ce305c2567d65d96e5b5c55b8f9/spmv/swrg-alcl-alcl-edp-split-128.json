{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__17516, const global float* restrict v__17517, const global float* restrict v__17518, const global float* restrict v__17519, float v__17520, float v__17521, global float* v__17540, local float* v__17535, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17524; \n  float v__17526; \n  float v__3017; \n  /* Private Memory */\n  float v__17528_0;\n  \n  float v__17530_0;\n  \n  int v__17534_0;\n  \n  for (int v_wg_id_17509 = get_group_id(0); v_wg_id_17509 < v_MHeight_2; v_wg_id_17509 = (v_wg_id_17509 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1439; \n      v_work_idx_1439 = 0; \n      int v_l_id_17510 = atomic_inc(&(v_work_idx_1439)); \n      while((v_l_id_17510 < v_MWidthC_1)){\n        float v_tmp_17597 = 0.0f; \n        v__17524 = v_tmp_17597; \n        /* reduce_while_seq */\n        for (int v_i_17511 = 0; v_i_17511 < 128; v_i_17511 = (1 + v_i_17511)) {\n          v__17534_0 = check(v__17524, v__17516[(v_l_id_17510 + (128 * v_MWidthC_1 * v_wg_id_17509) + (v_MWidthC_1 * v_i_17511))]); \n          if (v__17534_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17598 = 0.0f; \n          v__17526 = v_tmp_17598; \n          int v_index_17599 = v__17516[(v_l_id_17510 + (128 * v_MWidthC_1 * v_wg_id_17509) + (v_MWidthC_1 * v_i_17511))]; \n          if (v_index_17599 < 0) {\n            v__17528_0 = v__17526; \n          } else {\n            if (v_index_17599 >= v_VLength_3) {\n              v__17528_0 = v__17526; \n            } else {\n              v__17528_0 = v__17518[v_index_17599]; \n            }\n          }\n          v__17530_0 = mult(v__17528_0, v__17517[(v_l_id_17510 + (128 * v_MWidthC_1 * v_wg_id_17509) + (v_MWidthC_1 * v_i_17511))]); \n          v__17524 = add(v__17530_0, v__17524); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17512 = 0; \n          v__17535[v_l_id_17510] = id(v__17524); \n        }\n        /* end map_seq */\n        v_l_id_17510 = atomic_inc(&(v_work_idx_1439)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1434; \n      v_work_idx_1434 = 0; \n      int v_l_id_17513 = atomic_inc(&(v_work_idx_1434)); \n      while((v_l_id_17513 < 1)){\n        float v_tmp_17602 = 0.0f; \n        v__3017 = v_tmp_17602; \n        /* reduce_seq */\n        for (int v_i_17514 = 0; v_i_17514 < v_MWidthC_1; v_i_17514 = (1 + v_i_17514)) {\n          v__3017 = add(v__3017, v__17535[v_i_17514]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17515 = 0; \n          v__17540[v_wg_id_17509] = doubleMultiplyAdd(v__3017, v__17520, v__17519[v_wg_id_17509], v__17521); \n        }\n        /* end map_seq */\n        v_l_id_17513 = atomic_inc(&(v_work_idx_1434)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17516",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17517",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17518",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17519",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17520",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17521",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17535",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}