{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19247, const global float* restrict v__19248, const global float* restrict v__19249, const global float* restrict v__19250, float v__19251, float v__19252, global float* v__19265, global float* v__19259, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19255; \n  float v__19260; \n  /* Private Memory */\n  float v__19257_0;\n  \n  for (int v_wg_id_19242 = get_group_id(0); v_wg_id_19242 < ((v_MHeight_2)/(256)); v_wg_id_19242 = (v_wg_id_19242 + get_num_groups(0))) {\n    for (int v_l_id_19243 = get_local_id(0); v_l_id_19243 < 256; v_l_id_19243 = (v_l_id_19243 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19244 = 0; v_i_19244 < v_MWidthC_1; v_i_19244 = (1 + v_i_19244)) {\n        float v_tmp_19309 = 0.0f; \n        v__19255 = v_tmp_19309; \n        int v_index_19310 = v__19247[(v_i_19244 + (256 * v_MWidthC_1 * v_wg_id_19242) + (v_MWidthC_1 * v_l_id_19243))]; \n        if (v_index_19310 < 0) {\n          v__19257_0 = v__19255; \n        } else {\n          if (v_index_19310 >= v_VLength_3) {\n            v__19257_0 = v__19255; \n          } else {\n            v__19257_0 = v__19249[v_index_19310]; \n          }\n        }\n        v__19259[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_19242) + (-1 * v_i_19244) + (v_MWidthC_1 * v_l_id_19243))] = mult(v__19257_0, v__19248[(v_i_19244 + (256 * v_MWidthC_1 * v_wg_id_19242) + (v_MWidthC_1 * v_l_id_19243))]); \n      }\n      /* end map_seq */\n      float v_tmp_19311 = 0.0f; \n      v__19260 = v_tmp_19311; \n      /* reduce_seq */\n      for (int v_i_19245 = 0; v_i_19245 < v_MWidthC_1; v_i_19245 = (1 + v_i_19245)) {\n        v__19260 = add(v__19260, v__19259[(v_i_19245 + (256 * v_MWidthC_1 * v_wg_id_19242) + (v_MWidthC_1 * v_l_id_19243))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19246 = 0; \n        v__19265[(v_l_id_19243 + (256 * v_wg_id_19242))] = doubleMultiplyAdd(v__19260, v__19251, v__19250[(v_l_id_19243 + (256 * v_wg_id_19242))], v__19252); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19249",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19251",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19252",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19259",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__19265",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}