{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9170, const global float* restrict v__9171, const global float* restrict v__9172, const global float* restrict v__9173, float v__9174, float v__9175, global float* v__9193, global int* v__9177, local float* v__9188, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9179; \n  float v__9181; \n  float v__3017; \n  /* Private Memory */\n  float v__9183_0;\n  \n  float v__9185_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_658 = v__9177; \n    local int v_w_id_9163; \n    if (get_local_id(0) == 0) {\n      v_w_id_9163 = atomic_inc(v_work_idx_658); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_9163 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_656; \n        v_work_idx_656 = 0; \n        int v_l_id_9164 = atomic_inc(&(v_work_idx_656)); \n        while((v_l_id_9164 < v_MWidthC_1)){\n          float v_tmp_9244 = 0.0f; \n          v__9179 = v_tmp_9244; \n          /* reduce_seq */\n          for (int v_i_9165 = 0; v_i_9165 < 16; v_i_9165 = (1 + v_i_9165)) {\n            float v_tmp_9245 = 0.0f; \n            v__9181 = v_tmp_9245; \n            int v_index_9246 = v__9170[(v_l_id_9164 + (16 * v_MWidthC_1 * v_w_id_9163) + (v_MWidthC_1 * v_i_9165))]; \n            if (v_index_9246 < 0) {\n              v__9183_0 = v__9181; \n            } else {\n              if (v_index_9246 >= v_VLength_3) {\n                v__9183_0 = v__9181; \n              } else {\n                v__9183_0 = v__9172[v_index_9246]; \n              }\n            }\n            v__9185_0 = mult(v__9183_0, v__9171[(v_l_id_9164 + (16 * v_MWidthC_1 * v_w_id_9163) + (v_MWidthC_1 * v_i_9165))]); \n            v__9179 = add(v__9185_0, v__9179); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9166 = 0; \n            v__9188[v_l_id_9164] = id(v__9179); \n          }\n          /* end map_seq */\n          v_l_id_9164 = atomic_inc(&(v_work_idx_656)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_651; \n        v_work_idx_651 = 0; \n        int v_l_id_9167 = atomic_inc(&(v_work_idx_651)); \n        while((v_l_id_9167 < 1)){\n          float v_tmp_9249 = 0.0f; \n          v__3017 = v_tmp_9249; \n          /* reduce_seq */\n          for (int v_i_9168 = 0; v_i_9168 < v_MWidthC_1; v_i_9168 = (1 + v_i_9168)) {\n            v__3017 = add(v__3017, v__9188[v_i_9168]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_9169 = 0; \n            v__9193[v_w_id_9163] = doubleMultiplyAdd(v__3017, v__9174, v__9173[v_w_id_9163], v__9175); \n          }\n          /* end map_seq */\n          v_l_id_9167 = atomic_inc(&(v_work_idx_651)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_9163 = atomic_inc(v_work_idx_658); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__9170",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9171",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9172",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9173",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9174",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9175",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9177",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9188",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}