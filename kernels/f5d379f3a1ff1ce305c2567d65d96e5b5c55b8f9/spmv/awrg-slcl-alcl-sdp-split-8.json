{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4969, const global float* restrict v__4970, const global float* restrict v__4971, const global float* restrict v__4972, float v__4973, float v__4974, global float* v__4992, global float* v__4982, global int* v__4976, local float* v__4987, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4978; \n  float v__4983; \n  float v__3017; \n  /* Private Memory */\n  float v__4980_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_250 = v__4976; \n    local int v_w_id_4961; \n    if (get_local_id(0) == 0) {\n      v_w_id_4961 = atomic_inc(v_work_idx_250); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4961 < v_MHeight_2)){\n      for (int v_l_id_4962 = get_local_id(0); v_l_id_4962 < v_MWidthC_1; v_l_id_4962 = (v_l_id_4962 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_4963 = 0; v_i_4963 < 8; v_i_4963 = (1 + v_i_4963)) {\n          float v_tmp_5048 = 0.0f; \n          v__4978 = v_tmp_5048; \n          int v_index_5049 = v__4969[(v_l_id_4962 + (8 * v_MWidthC_1 * v_w_id_4961) + (v_MWidthC_1 * v_i_4963))]; \n          if (v_index_5049 < 0) {\n            v__4980_0 = v__4978; \n          } else {\n            if (v_index_5049 >= v_VLength_3) {\n              v__4980_0 = v__4978; \n            } else {\n              v__4980_0 = v__4971[v_index_5049]; \n            }\n          }\n          v__4982[(7 + (8 * v_MWidthC_1 * v_w_id_4961) + (-1 * v_i_4963) + (8 * v_l_id_4962))] = mult(v__4980_0, v__4970[(v_l_id_4962 + (8 * v_MWidthC_1 * v_w_id_4961) + (v_MWidthC_1 * v_i_4963))]); \n        }\n        /* end map_seq */\n        float v_tmp_5050 = 0.0f; \n        v__4983 = v_tmp_5050; \n        /* reduce_seq */\n        for (int v_i_4964 = 0; v_i_4964 < 8; v_i_4964 = (1 + v_i_4964)) {\n          v__4983 = add(v__4983, v__4982[(v_i_4964 + (8 * v_MWidthC_1 * v_w_id_4961) + (8 * v_l_id_4962))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4965 = 0; \n          v__4987[v_l_id_4962] = id(v__4983); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_243; \n        v_work_idx_243 = 0; \n        int v_l_id_4966 = atomic_inc(&(v_work_idx_243)); \n        while((v_l_id_4966 < 1)){\n          float v_tmp_5053 = 0.0f; \n          v__3017 = v_tmp_5053; \n          /* reduce_seq */\n          for (int v_i_4967 = 0; v_i_4967 < v_MWidthC_1; v_i_4967 = (1 + v_i_4967)) {\n            v__3017 = add(v__3017, v__4987[v_i_4967]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_4968 = 0; \n            v__4992[v_w_id_4961] = doubleMultiplyAdd(v__3017, v__4973, v__4972[v_w_id_4961], v__4974); \n          }\n          /* end map_seq */\n          v_l_id_4966 = atomic_inc(&(v_work_idx_243)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_4961 = atomic_inc(v_work_idx_250); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__4969",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4970",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4971",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4973",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4974",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4982",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4976",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__4992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__4987",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}