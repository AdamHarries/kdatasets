{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__12559, const global float* restrict v__12560, const global float* restrict v__12561, const global float* restrict v__12562, float v__12563, float v__12564, global float* v__12584, global int* v__12566, local float* v__12579, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12568; \n  float v__12570; \n  float v__3017; \n  /* Private Memory */\n  float v__12572_0;\n  \n  float v__12574_0;\n  \n  int v__12578_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_981 = v__12566; \n    local int v_w_id_12552; \n    if (get_local_id(0) == 0) {\n      v_w_id_12552 = atomic_inc(v_work_idx_981); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12552 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_979; \n        v_work_idx_979 = 0; \n        int v_l_id_12553 = atomic_inc(&(v_work_idx_979)); \n        while((v_l_id_12553 < v_MWidthC_1)){\n          float v_tmp_12638 = 0.0f; \n          v__12568 = v_tmp_12638; \n          /* reduce_while_seq */\n          for (int v_i_12554 = 0; v_i_12554 < 32; v_i_12554 = (1 + v_i_12554)) {\n            v__12578_0 = check(v__12568, v__12559[(v_l_id_12553 + (32 * v_MWidthC_1 * v_w_id_12552) + (v_MWidthC_1 * v_i_12554))]); \n            if (v__12578_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12639 = 0.0f; \n            v__12570 = v_tmp_12639; \n            int v_index_12640 = v__12559[(v_l_id_12553 + (32 * v_MWidthC_1 * v_w_id_12552) + (v_MWidthC_1 * v_i_12554))]; \n            if (v_index_12640 < 0) {\n              v__12572_0 = v__12570; \n            } else {\n              if (v_index_12640 >= v_VLength_3) {\n                v__12572_0 = v__12570; \n              } else {\n                v__12572_0 = v__12561[v_index_12640]; \n              }\n            }\n            v__12574_0 = mult(v__12572_0, v__12560[(v_l_id_12553 + (32 * v_MWidthC_1 * v_w_id_12552) + (v_MWidthC_1 * v_i_12554))]); \n            v__12568 = add(v__12574_0, v__12568); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12555 = 0; \n            v__12579[v_l_id_12553] = id(v__12568); \n          }\n          /* end map_seq */\n          v_l_id_12553 = atomic_inc(&(v_work_idx_979)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_974; \n        v_work_idx_974 = 0; \n        int v_l_id_12556 = atomic_inc(&(v_work_idx_974)); \n        while((v_l_id_12556 < 1)){\n          float v_tmp_12643 = 0.0f; \n          v__3017 = v_tmp_12643; \n          /* reduce_seq */\n          for (int v_i_12557 = 0; v_i_12557 < v_MWidthC_1; v_i_12557 = (1 + v_i_12557)) {\n            v__3017 = add(v__3017, v__12579[v_i_12557]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12558 = 0; \n            v__12584[v_w_id_12552] = doubleMultiplyAdd(v__3017, v__12563, v__12562[v_w_id_12552], v__12564); \n          }\n          /* end map_seq */\n          v_l_id_12556 = atomic_inc(&(v_work_idx_974)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12552 = atomic_inc(v_work_idx_981); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12559",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12560",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12561",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12563",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12564",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12566",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12579",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}