{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17421, const global float* restrict v__17422, const global float* restrict v__17423, const global float* restrict v__17424, float v__17425, float v__17426, global float* v__17443, local float* v__17438, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17429; \n  float v__17431; \n  float v__3017; \n  /* Private Memory */\n  float v__17433_0;\n  \n  float v__17435_0;\n  \n  for (int v_wg_id_17414 = get_group_id(0); v_wg_id_17414 < v_MHeight_2; v_wg_id_17414 = (v_wg_id_17414 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1429; \n      v_work_idx_1429 = 0; \n      int v_l_id_17415 = atomic_inc(&(v_work_idx_1429)); \n      while((v_l_id_17415 < v_MWidthC_1)){\n        float v_tmp_17497 = 0.0f; \n        v__17429 = v_tmp_17497; \n        /* reduce_seq */\n        for (int v_i_17416 = 0; v_i_17416 < 128; v_i_17416 = (1 + v_i_17416)) {\n          float v_tmp_17498 = 0.0f; \n          v__17431 = v_tmp_17498; \n          int v_index_17499 = v__17421[(v_l_id_17415 + (128 * v_MWidthC_1 * v_wg_id_17414) + (v_MWidthC_1 * v_i_17416))]; \n          if (v_index_17499 < 0) {\n            v__17433_0 = v__17431; \n          } else {\n            if (v_index_17499 >= v_VLength_3) {\n              v__17433_0 = v__17431; \n            } else {\n              v__17433_0 = v__17423[v_index_17499]; \n            }\n          }\n          v__17435_0 = mult(v__17433_0, v__17422[(v_l_id_17415 + (128 * v_MWidthC_1 * v_wg_id_17414) + (v_MWidthC_1 * v_i_17416))]); \n          v__17429 = add(v__17435_0, v__17429); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17417 = 0; \n          v__17438[v_l_id_17415] = id(v__17429); \n        }\n        /* end map_seq */\n        v_l_id_17415 = atomic_inc(&(v_work_idx_1429)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1424; \n      v_work_idx_1424 = 0; \n      int v_l_id_17418 = atomic_inc(&(v_work_idx_1424)); \n      while((v_l_id_17418 < 1)){\n        float v_tmp_17502 = 0.0f; \n        v__3017 = v_tmp_17502; \n        /* reduce_seq */\n        for (int v_i_17419 = 0; v_i_17419 < v_MWidthC_1; v_i_17419 = (1 + v_i_17419)) {\n          v__3017 = add(v__3017, v__17438[v_i_17419]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17420 = 0; \n          v__17443[v_wg_id_17414] = doubleMultiplyAdd(v__3017, v__17425, v__17424[v_wg_id_17414], v__17426); \n        }\n        /* end map_seq */\n        v_l_id_17418 = atomic_inc(&(v_work_idx_1424)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17421",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17422",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17423",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17425",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17426",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17438",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}