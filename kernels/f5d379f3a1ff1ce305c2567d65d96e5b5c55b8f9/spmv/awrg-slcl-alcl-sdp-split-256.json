{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21449, const global float* restrict v__21450, const global float* restrict v__21451, const global float* restrict v__21452, float v__21453, float v__21454, global float* v__21472, global float* v__21462, global int* v__21456, local float* v__21467, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21458; \n  float v__21463; \n  float v__3017; \n  /* Private Memory */\n  float v__21460_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1810 = v__21456; \n    local int v_w_id_21441; \n    if (get_local_id(0) == 0) {\n      v_w_id_21441 = atomic_inc(v_work_idx_1810); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21441 < v_MHeight_2)){\n      for (int v_l_id_21442 = get_local_id(0); v_l_id_21442 < v_MWidthC_1; v_l_id_21442 = (v_l_id_21442 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_21443 = 0; v_i_21443 < 256; v_i_21443 = (1 + v_i_21443)) {\n          float v_tmp_21528 = 0.0f; \n          v__21458 = v_tmp_21528; \n          int v_index_21529 = v__21449[(v_l_id_21442 + (256 * v_MWidthC_1 * v_w_id_21441) + (v_MWidthC_1 * v_i_21443))]; \n          if (v_index_21529 < 0) {\n            v__21460_0 = v__21458; \n          } else {\n            if (v_index_21529 >= v_VLength_3) {\n              v__21460_0 = v__21458; \n            } else {\n              v__21460_0 = v__21451[v_index_21529]; \n            }\n          }\n          v__21462[(255 + (256 * v_MWidthC_1 * v_w_id_21441) + (-1 * v_i_21443) + (256 * v_l_id_21442))] = mult(v__21460_0, v__21450[(v_l_id_21442 + (256 * v_MWidthC_1 * v_w_id_21441) + (v_MWidthC_1 * v_i_21443))]); \n        }\n        /* end map_seq */\n        float v_tmp_21530 = 0.0f; \n        v__21463 = v_tmp_21530; \n        /* reduce_seq */\n        for (int v_i_21444 = 0; v_i_21444 < 256; v_i_21444 = (1 + v_i_21444)) {\n          v__21463 = add(v__21463, v__21462[(v_i_21444 + (256 * v_MWidthC_1 * v_w_id_21441) + (256 * v_l_id_21442))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21445 = 0; \n          v__21467[v_l_id_21442] = id(v__21463); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1803; \n        v_work_idx_1803 = 0; \n        int v_l_id_21446 = atomic_inc(&(v_work_idx_1803)); \n        while((v_l_id_21446 < 1)){\n          float v_tmp_21533 = 0.0f; \n          v__3017 = v_tmp_21533; \n          /* reduce_seq */\n          for (int v_i_21447 = 0; v_i_21447 < v_MWidthC_1; v_i_21447 = (1 + v_i_21447)) {\n            v__3017 = add(v__3017, v__21467[v_i_21447]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21448 = 0; \n            v__21472[v_w_id_21441] = doubleMultiplyAdd(v__3017, v__21453, v__21452[v_w_id_21441], v__21454); \n          }\n          /* end map_seq */\n          v_l_id_21446 = atomic_inc(&(v_work_idx_1803)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21441 = atomic_inc(v_work_idx_1810); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__21449",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21450",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21451",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21452",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21453",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21454",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21462",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21456",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21467",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}