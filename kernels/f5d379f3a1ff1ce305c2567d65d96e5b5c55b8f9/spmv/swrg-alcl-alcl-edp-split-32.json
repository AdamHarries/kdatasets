{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__10924, const global float* restrict v__10925, const global float* restrict v__10926, const global float* restrict v__10927, float v__10928, float v__10929, global float* v__10948, local float* v__10943, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10932; \n  float v__10934; \n  float v__3017; \n  /* Private Memory */\n  float v__10936_0;\n  \n  float v__10938_0;\n  \n  int v__10942_0;\n  \n  for (int v_wg_id_10917 = get_group_id(0); v_wg_id_10917 < v_MHeight_2; v_wg_id_10917 = (v_wg_id_10917 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_815; \n      v_work_idx_815 = 0; \n      int v_l_id_10918 = atomic_inc(&(v_work_idx_815)); \n      while((v_l_id_10918 < v_MWidthC_1)){\n        float v_tmp_11005 = 0.0f; \n        v__10932 = v_tmp_11005; \n        /* reduce_while_seq */\n        for (int v_i_10919 = 0; v_i_10919 < 32; v_i_10919 = (1 + v_i_10919)) {\n          v__10942_0 = check(v__10932, v__10924[(v_l_id_10918 + (32 * v_MWidthC_1 * v_wg_id_10917) + (v_MWidthC_1 * v_i_10919))]); \n          if (v__10942_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11006 = 0.0f; \n          v__10934 = v_tmp_11006; \n          int v_index_11007 = v__10924[(v_l_id_10918 + (32 * v_MWidthC_1 * v_wg_id_10917) + (v_MWidthC_1 * v_i_10919))]; \n          if (v_index_11007 < 0) {\n            v__10936_0 = v__10934; \n          } else {\n            if (v_index_11007 >= v_VLength_3) {\n              v__10936_0 = v__10934; \n            } else {\n              v__10936_0 = v__10926[v_index_11007]; \n            }\n          }\n          v__10938_0 = mult(v__10936_0, v__10925[(v_l_id_10918 + (32 * v_MWidthC_1 * v_wg_id_10917) + (v_MWidthC_1 * v_i_10919))]); \n          v__10932 = add(v__10938_0, v__10932); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10920 = 0; \n          v__10943[v_l_id_10918] = id(v__10932); \n        }\n        /* end map_seq */\n        v_l_id_10918 = atomic_inc(&(v_work_idx_815)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_810; \n      v_work_idx_810 = 0; \n      int v_l_id_10921 = atomic_inc(&(v_work_idx_810)); \n      while((v_l_id_10921 < 1)){\n        float v_tmp_11010 = 0.0f; \n        v__3017 = v_tmp_11010; \n        /* reduce_seq */\n        for (int v_i_10922 = 0; v_i_10922 < v_MWidthC_1; v_i_10922 = (1 + v_i_10922)) {\n          v__3017 = add(v__3017, v__10943[v_i_10922]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10923 = 0; \n          v__10948[v_wg_id_10917] = doubleMultiplyAdd(v__3017, v__10928, v__10927[v_wg_id_10917], v__10929); \n        }\n        /* end map_seq */\n        v_l_id_10921 = atomic_inc(&(v_work_idx_810)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10924",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10925",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10926",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10927",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10928",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10929",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10948",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10943",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}