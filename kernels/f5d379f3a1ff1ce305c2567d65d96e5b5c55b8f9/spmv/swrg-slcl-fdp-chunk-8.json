{
  "name" : "swrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2841, const global float* restrict v__2842, const global float* restrict v__2843, const global float* restrict v__2844, float v__2845, float v__2846, global float* v__2859, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2849; \n  float v__2851; \n  /* Private Memory */\n  float v__2853_0;\n  \n  float v__2855_0;\n  \n  for (int v_wg_id_2837 = get_group_id(0); v_wg_id_2837 < ((v_MHeight_2)/(8)); v_wg_id_2837 = (v_wg_id_2837 + get_num_groups(0))) {\n    for (int v_l_id_2838 = get_local_id(0); v_l_id_2838 < 8; v_l_id_2838 = (v_l_id_2838 + get_local_size(0))) {\n      float v_tmp_2901 = 0.0f; \n      v__2849 = v_tmp_2901; \n      /* reduce_seq */\n      for (int v_i_2839 = 0; v_i_2839 < v_MWidthC_1; v_i_2839 = (1 + v_i_2839)) {\n        float v_tmp_2902 = 0.0f; \n        v__2851 = v_tmp_2902; \n        int v_index_2903 = v__2841[(v_i_2839 + (8 * v_MWidthC_1 * v_wg_id_2837) + (v_MWidthC_1 * v_l_id_2838))]; \n        if (v_index_2903 < 0) {\n          v__2853_0 = v__2851; \n        } else {\n          if (v_index_2903 >= v_VLength_3) {\n            v__2853_0 = v__2851; \n          } else {\n            v__2853_0 = v__2843[v_index_2903]; \n          }\n        }\n        v__2855_0 = mult(v__2853_0, v__2842[(v_i_2839 + (8 * v_MWidthC_1 * v_wg_id_2837) + (v_MWidthC_1 * v_l_id_2838))]); \n        v__2849 = add(v__2855_0, v__2849); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_2840 = 0; \n        v__2859[(v_l_id_2838 + (8 * v_wg_id_2837))] = doubleMultiplyAdd(v__2849, v__2845, v__2844[(v_l_id_2838 + (8 * v_wg_id_2837))], v__2846); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__2841",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2843",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2844",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2845",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2846",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__2859",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}