{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__13403, const global float* restrict v__13404, const global float* restrict v__13405, const global float* restrict v__13406, float v__13407, float v__13408, global float* v__13427, local float* v__13422, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13411; \n  float v__13413; \n  float v__3017; \n  /* Private Memory */\n  float v__13415_0;\n  \n  float v__13417_0;\n  \n  int v__13421_0;\n  \n  for (int v_wg_id_13396 = get_group_id(0); v_wg_id_13396 < v_MHeight_2; v_wg_id_13396 = (v_wg_id_13396 + get_num_groups(0))) {\n    for (int v_l_id_13397 = get_local_id(0); v_l_id_13397 < v_MWidthC_1; v_l_id_13397 = (v_l_id_13397 + get_local_size(0))) {\n      float v_tmp_13489 = 0.0f; \n      v__13411 = v_tmp_13489; \n      /* reduce_while_seq */\n      for (int v_i_13398 = 0; v_i_13398 < 64; v_i_13398 = (1 + v_i_13398)) {\n        v__13421_0 = check(v__13411, v__13403[(v_l_id_13397 + (64 * v_MWidthC_1 * v_wg_id_13396) + (v_MWidthC_1 * v_i_13398))]); \n        if (v__13421_0) {\n        } else {\n          break;\n        }\n        float v_tmp_13490 = 0.0f; \n        v__13413 = v_tmp_13490; \n        int v_index_13491 = v__13403[(v_l_id_13397 + (64 * v_MWidthC_1 * v_wg_id_13396) + (v_MWidthC_1 * v_i_13398))]; \n        if (v_index_13491 < 0) {\n          v__13415_0 = v__13413; \n        } else {\n          if (v_index_13491 >= v_VLength_3) {\n            v__13415_0 = v__13413; \n          } else {\n            v__13415_0 = v__13405[v_index_13491]; \n          }\n        }\n        v__13417_0 = mult(v__13415_0, v__13404[(v_l_id_13397 + (64 * v_MWidthC_1 * v_wg_id_13396) + (v_MWidthC_1 * v_i_13398))]); \n        v__13411 = add(v__13417_0, v__13411); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13399 = 0; \n        v__13422[v_l_id_13397] = id(v__13411); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1045; \n      v_work_idx_1045 = 0; \n      int v_l_id_13400 = atomic_inc(&(v_work_idx_1045)); \n      while((v_l_id_13400 < 1)){\n        float v_tmp_13494 = 0.0f; \n        v__3017 = v_tmp_13494; \n        /* reduce_seq */\n        for (int v_i_13401 = 0; v_i_13401 < v_MWidthC_1; v_i_13401 = (1 + v_i_13401)) {\n          v__3017 = add(v__3017, v__13422[v_i_13401]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13402 = 0; \n          v__13427[v_wg_id_13396] = doubleMultiplyAdd(v__3017, v__13407, v__13406[v_wg_id_13396], v__13408); \n        }\n        /* end map_seq */\n        v_l_id_13400 = atomic_inc(&(v_work_idx_1045)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__13403",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13404",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13405",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13407",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13408",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13427",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13422",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}