{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11659, const global float* restrict v__11660, const global float* restrict v__11661, const global float* restrict v__11662, float v__11663, float v__11664, global float* v__11682, global int* v__11666, local float* v__11677, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11668; \n  float v__11670; \n  float v__3017; \n  /* Private Memory */\n  float v__11672_0;\n  \n  float v__11674_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_884 = v__11666; \n    local int v_w_id_11652; \n    if (get_local_id(0) == 0) {\n      v_w_id_11652 = atomic_inc(v_work_idx_884); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11652 < v_MHeight_2)){\n      for (int v_l_id_11653 = get_local_id(0); v_l_id_11653 < v_MWidthC_1; v_l_id_11653 = (v_l_id_11653 + get_local_size(0))) {\n        float v_tmp_11738 = 0.0f; \n        v__11668 = v_tmp_11738; \n        /* reduce_seq */\n        for (int v_i_11654 = 0; v_i_11654 < 32; v_i_11654 = (1 + v_i_11654)) {\n          float v_tmp_11739 = 0.0f; \n          v__11670 = v_tmp_11739; \n          int v_index_11740 = v__11659[(v_l_id_11653 + (32 * v_MWidthC_1 * v_w_id_11652) + (v_MWidthC_1 * v_i_11654))]; \n          if (v_index_11740 < 0) {\n            v__11672_0 = v__11670; \n          } else {\n            if (v_index_11740 >= v_VLength_3) {\n              v__11672_0 = v__11670; \n            } else {\n              v__11672_0 = v__11661[v_index_11740]; \n            }\n          }\n          v__11674_0 = mult(v__11672_0, v__11660[(v_l_id_11653 + (32 * v_MWidthC_1 * v_w_id_11652) + (v_MWidthC_1 * v_i_11654))]); \n          v__11668 = add(v__11674_0, v__11668); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11655 = 0; \n          v__11677[v_l_id_11653] = id(v__11668); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_878; \n        v_work_idx_878 = 0; \n        int v_l_id_11656 = atomic_inc(&(v_work_idx_878)); \n        while((v_l_id_11656 < 1)){\n          float v_tmp_11743 = 0.0f; \n          v__3017 = v_tmp_11743; \n          /* reduce_seq */\n          for (int v_i_11657 = 0; v_i_11657 < v_MWidthC_1; v_i_11657 = (1 + v_i_11657)) {\n            v__3017 = add(v__3017, v__11677[v_i_11657]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_11658 = 0; \n            v__11682[v_w_id_11652] = doubleMultiplyAdd(v__3017, v__11663, v__11662[v_w_id_11652], v__11664); \n          }\n          /* end map_seq */\n          v_l_id_11656 = atomic_inc(&(v_work_idx_878)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11652 = atomic_inc(v_work_idx_884); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11659",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11660",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11661",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11663",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11664",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11666",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11682",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11677",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}