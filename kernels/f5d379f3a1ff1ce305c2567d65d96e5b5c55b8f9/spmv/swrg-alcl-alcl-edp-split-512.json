{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__24108, const global float* restrict v__24109, const global float* restrict v__24110, const global float* restrict v__24111, float v__24112, float v__24113, global float* v__24132, local float* v__24127, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24116; \n  float v__24118; \n  float v__3017; \n  /* Private Memory */\n  float v__24120_0;\n  \n  float v__24122_0;\n  \n  int v__24126_0;\n  \n  for (int v_wg_id_24101 = get_group_id(0); v_wg_id_24101 < v_MHeight_2; v_wg_id_24101 = (v_wg_id_24101 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2063; \n      v_work_idx_2063 = 0; \n      int v_l_id_24102 = atomic_inc(&(v_work_idx_2063)); \n      while((v_l_id_24102 < v_MWidthC_1)){\n        float v_tmp_24189 = 0.0f; \n        v__24116 = v_tmp_24189; \n        /* reduce_while_seq */\n        for (int v_i_24103 = 0; v_i_24103 < 512; v_i_24103 = (1 + v_i_24103)) {\n          v__24126_0 = check(v__24116, v__24108[(v_l_id_24102 + (512 * v_MWidthC_1 * v_wg_id_24101) + (v_MWidthC_1 * v_i_24103))]); \n          if (v__24126_0) {\n          } else {\n            break;\n          }\n          float v_tmp_24190 = 0.0f; \n          v__24118 = v_tmp_24190; \n          int v_index_24191 = v__24108[(v_l_id_24102 + (512 * v_MWidthC_1 * v_wg_id_24101) + (v_MWidthC_1 * v_i_24103))]; \n          if (v_index_24191 < 0) {\n            v__24120_0 = v__24118; \n          } else {\n            if (v_index_24191 >= v_VLength_3) {\n              v__24120_0 = v__24118; \n            } else {\n              v__24120_0 = v__24110[v_index_24191]; \n            }\n          }\n          v__24122_0 = mult(v__24120_0, v__24109[(v_l_id_24102 + (512 * v_MWidthC_1 * v_wg_id_24101) + (v_MWidthC_1 * v_i_24103))]); \n          v__24116 = add(v__24122_0, v__24116); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24104 = 0; \n          v__24127[v_l_id_24102] = id(v__24116); \n        }\n        /* end map_seq */\n        v_l_id_24102 = atomic_inc(&(v_work_idx_2063)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2058; \n      v_work_idx_2058 = 0; \n      int v_l_id_24105 = atomic_inc(&(v_work_idx_2058)); \n      while((v_l_id_24105 < 1)){\n        float v_tmp_24194 = 0.0f; \n        v__3017 = v_tmp_24194; \n        /* reduce_seq */\n        for (int v_i_24106 = 0; v_i_24106 < v_MWidthC_1; v_i_24106 = (1 + v_i_24106)) {\n          v__3017 = add(v__3017, v__24127[v_i_24106]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24107 = 0; \n          v__24132[v_wg_id_24101] = doubleMultiplyAdd(v__3017, v__24112, v__24111[v_wg_id_24101], v__24113); \n        }\n        /* end map_seq */\n        v_l_id_24105 = atomic_inc(&(v_work_idx_2058)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__24108",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24109",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24110",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24112",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24113",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__24132",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24127",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}