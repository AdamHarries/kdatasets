{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25650, const global float* restrict v__25651, const global float* restrict v__25652, const global float* restrict v__25653, float v__25654, float v__25655, global float* v__25673, global int* v__25657, local float* v__25668, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25659; \n  float v__25661; \n  float v__3017; \n  /* Private Memory */\n  float v__25663_0;\n  \n  float v__25665_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2218 = v__25657; \n    local int v_w_id_25643; \n    if (get_local_id(0) == 0) {\n      v_w_id_25643 = atomic_inc(v_work_idx_2218); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25643 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2216; \n        v_work_idx_2216 = 0; \n        int v_l_id_25644 = atomic_inc(&(v_work_idx_2216)); \n        while((v_l_id_25644 < v_MWidthC_1)){\n          float v_tmp_25724 = 0.0f; \n          v__25659 = v_tmp_25724; \n          /* reduce_seq */\n          for (int v_i_25645 = 0; v_i_25645 < 512; v_i_25645 = (1 + v_i_25645)) {\n            float v_tmp_25725 = 0.0f; \n            v__25661 = v_tmp_25725; \n            int v_index_25726 = v__25650[(v_l_id_25644 + (512 * v_MWidthC_1 * v_w_id_25643) + (v_MWidthC_1 * v_i_25645))]; \n            if (v_index_25726 < 0) {\n              v__25663_0 = v__25661; \n            } else {\n              if (v_index_25726 >= v_VLength_3) {\n                v__25663_0 = v__25661; \n              } else {\n                v__25663_0 = v__25652[v_index_25726]; \n              }\n            }\n            v__25665_0 = mult(v__25663_0, v__25651[(v_l_id_25644 + (512 * v_MWidthC_1 * v_w_id_25643) + (v_MWidthC_1 * v_i_25645))]); \n            v__25659 = add(v__25665_0, v__25659); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25646 = 0; \n            v__25668[v_l_id_25644] = id(v__25659); \n          }\n          /* end map_seq */\n          v_l_id_25644 = atomic_inc(&(v_work_idx_2216)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2211; \n        v_work_idx_2211 = 0; \n        int v_l_id_25647 = atomic_inc(&(v_work_idx_2211)); \n        while((v_l_id_25647 < 1)){\n          float v_tmp_25729 = 0.0f; \n          v__3017 = v_tmp_25729; \n          /* reduce_seq */\n          for (int v_i_25648 = 0; v_i_25648 < v_MWidthC_1; v_i_25648 = (1 + v_i_25648)) {\n            v__3017 = add(v__3017, v__25668[v_i_25648]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25649 = 0; \n            v__25673[v_w_id_25643] = doubleMultiplyAdd(v__3017, v__25654, v__25653[v_w_id_25643], v__25655); \n          }\n          /* end map_seq */\n          v_l_id_25647 = atomic_inc(&(v_work_idx_2211)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25643 = atomic_inc(v_work_idx_2218); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25650",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25651",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25652",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25654",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25655",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25657",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25668",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}