{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__21342, const global float* restrict v__21343, const global float* restrict v__21344, const global float* restrict v__21345, float v__21346, float v__21347, global float* v__21367, global int* v__21349, local float* v__21362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21351; \n  float v__21353; \n  float v__3017; \n  /* Private Memory */\n  float v__21355_0;\n  \n  float v__21357_0;\n  \n  int v__21361_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1799 = v__21349; \n    local int v_w_id_21335; \n    if (get_local_id(0) == 0) {\n      v_w_id_21335 = atomic_inc(v_work_idx_1799); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21335 < v_MHeight_2)){\n      for (int v_l_id_21336 = get_local_id(0); v_l_id_21336 < v_MWidthC_1; v_l_id_21336 = (v_l_id_21336 + get_local_size(0))) {\n        float v_tmp_21429 = 0.0f; \n        v__21351 = v_tmp_21429; \n        /* reduce_while_seq */\n        for (int v_i_21337 = 0; v_i_21337 < 256; v_i_21337 = (1 + v_i_21337)) {\n          v__21361_0 = check(v__21351, v__21342[(v_l_id_21336 + (256 * v_MWidthC_1 * v_w_id_21335) + (v_MWidthC_1 * v_i_21337))]); \n          if (v__21361_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21430 = 0.0f; \n          v__21353 = v_tmp_21430; \n          int v_index_21431 = v__21342[(v_l_id_21336 + (256 * v_MWidthC_1 * v_w_id_21335) + (v_MWidthC_1 * v_i_21337))]; \n          if (v_index_21431 < 0) {\n            v__21355_0 = v__21353; \n          } else {\n            if (v_index_21431 >= v_VLength_3) {\n              v__21355_0 = v__21353; \n            } else {\n              v__21355_0 = v__21344[v_index_21431]; \n            }\n          }\n          v__21357_0 = mult(v__21355_0, v__21343[(v_l_id_21336 + (256 * v_MWidthC_1 * v_w_id_21335) + (v_MWidthC_1 * v_i_21337))]); \n          v__21351 = add(v__21357_0, v__21351); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21338 = 0; \n          v__21362[v_l_id_21336] = id(v__21351); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_21339 = get_local_id(0); \n        float v_tmp_21434 = 0.0f; \n        v__3017 = v_tmp_21434; \n        /* reduce_seq */\n        for (int v_i_21340 = 0; v_i_21340 < v_MWidthC_1; v_i_21340 = (1 + v_i_21340)) {\n          v__3017 = add(v__3017, v__21362[(v_i_21340 + (v_MWidthC_1 * v_l_id_21339))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21341 = 0; \n          v__21367[v_w_id_21335] = doubleMultiplyAdd(v__3017, v__21346, v__21345[v_w_id_21335], v__21347); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21335 = atomic_inc(v_work_idx_1799); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21342",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21343",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21344",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21346",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21347",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21349",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21362",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}