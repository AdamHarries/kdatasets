{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16874, const global float* restrict v__16875, const global float* restrict v__16876, const global float* restrict v__16877, float v__16878, float v__16879, global float* v__16892, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16882; \n  float v__16884; \n  /* Private Memory */\n  float v__16886_0;\n  \n  float v__16888_0;\n  \n  for (int v_wg_id_16870 = get_group_id(0); v_wg_id_16870 < ((v_MHeight_2)/(128)); v_wg_id_16870 = (v_wg_id_16870 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1374; \n      v_work_idx_1374 = 0; \n      int v_l_id_16871 = atomic_inc(&(v_work_idx_1374)); \n      while((v_l_id_16871 < 128)){\n        float v_tmp_16931 = 0.0f; \n        v__16882 = v_tmp_16931; \n        /* reduce_seq */\n        for (int v_i_16872 = 0; v_i_16872 < v_MWidthC_1; v_i_16872 = (1 + v_i_16872)) {\n          float v_tmp_16932 = 0.0f; \n          v__16884 = v_tmp_16932; \n          int v_index_16933 = v__16874[(v_i_16872 + (128 * v_MWidthC_1 * v_wg_id_16870) + (v_MWidthC_1 * v_l_id_16871))]; \n          if (v_index_16933 < 0) {\n            v__16886_0 = v__16884; \n          } else {\n            if (v_index_16933 >= v_VLength_3) {\n              v__16886_0 = v__16884; \n            } else {\n              v__16886_0 = v__16876[v_index_16933]; \n            }\n          }\n          v__16888_0 = mult(v__16886_0, v__16875[(v_i_16872 + (128 * v_MWidthC_1 * v_wg_id_16870) + (v_MWidthC_1 * v_l_id_16871))]); \n          v__16882 = add(v__16888_0, v__16882); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16873 = 0; \n          v__16892[(v_l_id_16871 + (128 * v_wg_id_16870))] = doubleMultiplyAdd(v__16882, v__16878, v__16877[(v_l_id_16871 + (128 * v_wg_id_16870))], v__16879); \n        }\n        /* end map_seq */\n        v_l_id_16871 = atomic_inc(&(v_work_idx_1374)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__16874",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16875",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16876",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16877",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16878",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16879",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}