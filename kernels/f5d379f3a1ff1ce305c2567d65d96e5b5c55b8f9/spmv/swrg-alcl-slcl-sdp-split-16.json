{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__7138, const global float* restrict v__7139, const global float* restrict v__7140, const global float* restrict v__7141, float v__7142, float v__7143, global float* v__7160, global float* v__7150, local float* v__7155, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__7146; \n  float v__7151; \n  float v__3017; \n  /* Private Memory */\n  float v__7148_0;\n  \n  for (int v_wg_id_7130 = get_group_id(0); v_wg_id_7130 < v_MHeight_2; v_wg_id_7130 = (v_wg_id_7130 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_454; \n      v_work_idx_454 = 0; \n      int v_l_id_7131 = atomic_inc(&(v_work_idx_454)); \n      while((v_l_id_7131 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_7132 = 0; v_i_7132 < 16; v_i_7132 = (1 + v_i_7132)) {\n          float v_tmp_7217 = 0.0f; \n          v__7146 = v_tmp_7217; \n          int v_index_7218 = v__7138[(v_l_id_7131 + (16 * v_MWidthC_1 * v_wg_id_7130) + (v_MWidthC_1 * v_i_7132))]; \n          if (v_index_7218 < 0) {\n            v__7148_0 = v__7146; \n          } else {\n            if (v_index_7218 >= v_VLength_3) {\n              v__7148_0 = v__7146; \n            } else {\n              v__7148_0 = v__7140[v_index_7218]; \n            }\n          }\n          v__7150[(15 + (16 * v_MWidthC_1 * v_wg_id_7130) + (-1 * v_i_7132) + (16 * v_l_id_7131))] = mult(v__7148_0, v__7139[(v_l_id_7131 + (16 * v_MWidthC_1 * v_wg_id_7130) + (v_MWidthC_1 * v_i_7132))]); \n        }\n        /* end map_seq */\n        float v_tmp_7219 = 0.0f; \n        v__7151 = v_tmp_7219; \n        /* reduce_seq */\n        for (int v_i_7133 = 0; v_i_7133 < 16; v_i_7133 = (1 + v_i_7133)) {\n          v__7151 = add(v__7151, v__7150[(v_i_7133 + (16 * v_MWidthC_1 * v_wg_id_7130) + (16 * v_l_id_7131))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_7134 = 0; \n          v__7155[v_l_id_7131] = id(v__7151); \n        }\n        /* end map_seq */\n        v_l_id_7131 = atomic_inc(&(v_work_idx_454)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_7135 = get_local_id(0); \n      float v_tmp_7222 = 0.0f; \n      v__3017 = v_tmp_7222; \n      /* reduce_seq */\n      for (int v_i_7136 = 0; v_i_7136 < v_MWidthC_1; v_i_7136 = (1 + v_i_7136)) {\n        v__3017 = add(v__3017, v__7155[(v_i_7136 + (v_MWidthC_1 * v_l_id_7135))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_7137 = 0; \n        v__7160[v_wg_id_7130] = doubleMultiplyAdd(v__3017, v__7142, v__7141[v_wg_id_7130], v__7143); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__7138",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7139",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__7140",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__7141",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__7142",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__7143",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__7150",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__7160",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__7155",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}