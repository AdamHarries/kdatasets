{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__3618, const global float* restrict v__3619, const global float* restrict v__3620, const global float* restrict v__3621, float v__3622, float v__3623, global float* v__3636, global float* v__3630, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__3626; \n  float v__3631; \n  /* Private Memory */\n  float v__3628_0;\n  \n  for (int v_wg_id_3613 = get_group_id(0); v_wg_id_3613 < ((v_MHeight_2)/(8)); v_wg_id_3613 = (v_wg_id_3613 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_120; \n      v_work_idx_120 = 0; \n      int v_l_id_3614 = atomic_inc(&(v_work_idx_120)); \n      while((v_l_id_3614 < 8)){\n        /* map_seq */\n        for (int v_i_3615 = 0; v_i_3615 < v_MWidthC_1; v_i_3615 = (1 + v_i_3615)) {\n          float v_tmp_3677 = 0.0f; \n          v__3626 = v_tmp_3677; \n          int v_index_3678 = v__3618[(v_i_3615 + (8 * v_MWidthC_1 * v_wg_id_3613) + (v_MWidthC_1 * v_l_id_3614))]; \n          if (v_index_3678 < 0) {\n            v__3628_0 = v__3626; \n          } else {\n            if (v_index_3678 >= v_VLength_3) {\n              v__3628_0 = v__3626; \n            } else {\n              v__3628_0 = v__3620[v_index_3678]; \n            }\n          }\n          v__3630[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_3613) + (-1 * v_i_3615) + (v_MWidthC_1 * v_l_id_3614))] = mult(v__3628_0, v__3619[(v_i_3615 + (8 * v_MWidthC_1 * v_wg_id_3613) + (v_MWidthC_1 * v_l_id_3614))]); \n        }\n        /* end map_seq */\n        float v_tmp_3679 = 0.0f; \n        v__3631 = v_tmp_3679; \n        /* reduce_seq */\n        for (int v_i_3616 = 0; v_i_3616 < v_MWidthC_1; v_i_3616 = (1 + v_i_3616)) {\n          v__3631 = add(v__3631, v__3630[(v_i_3616 + (8 * v_MWidthC_1 * v_wg_id_3613) + (v_MWidthC_1 * v_l_id_3614))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_3617 = 0; \n          v__3636[(v_l_id_3614 + (8 * v_wg_id_3613))] = doubleMultiplyAdd(v__3631, v__3622, v__3621[(v_l_id_3614 + (8 * v_wg_id_3613))], v__3623); \n        }\n        /* end map_seq */\n        v_l_id_3614 = atomic_inc(&(v_work_idx_120)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__3618",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3619",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__3620",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__3621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__3622",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__3623",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__3630",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__3636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}