{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11353, const global float* restrict v__11354, const global float* restrict v__11355, const global float* restrict v__11356, float v__11357, float v__11358, global float* v__11376, global int* v__11360, local float* v__11371, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11362; \n  float v__11364; \n  float v__3017; \n  /* Private Memory */\n  float v__11366_0;\n  \n  float v__11368_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_854 = v__11360; \n    local int v_w_id_11346; \n    if (get_local_id(0) == 0) {\n      v_w_id_11346 = atomic_inc(v_work_idx_854); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11346 < v_MHeight_2)){\n      for (int v_l_id_11347 = get_local_id(0); v_l_id_11347 < v_MWidthC_1; v_l_id_11347 = (v_l_id_11347 + get_local_size(0))) {\n        float v_tmp_11435 = 0.0f; \n        v__11362 = v_tmp_11435; \n        /* reduce_seq */\n        for (int v_i_11348 = 0; v_i_11348 < 32; v_i_11348 = (1 + v_i_11348)) {\n          float v_tmp_11436 = 0.0f; \n          v__11364 = v_tmp_11436; \n          int v_index_11437 = v__11353[(v_l_id_11347 + (32 * v_MWidthC_1 * v_w_id_11346) + (v_MWidthC_1 * v_i_11348))]; \n          if (v_index_11437 < 0) {\n            v__11366_0 = v__11364; \n          } else {\n            if (v_index_11437 >= v_VLength_3) {\n              v__11366_0 = v__11364; \n            } else {\n              v__11366_0 = v__11355[v_index_11437]; \n            }\n          }\n          v__11368_0 = mult(v__11366_0, v__11354[(v_l_id_11347 + (32 * v_MWidthC_1 * v_w_id_11346) + (v_MWidthC_1 * v_i_11348))]); \n          v__11362 = add(v__11368_0, v__11362); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11349 = 0; \n          v__11371[v_l_id_11347] = id(v__11362); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_11350 = get_local_id(0); \n        float v_tmp_11440 = 0.0f; \n        v__3017 = v_tmp_11440; \n        /* reduce_seq */\n        for (int v_i_11351 = 0; v_i_11351 < v_MWidthC_1; v_i_11351 = (1 + v_i_11351)) {\n          v__3017 = add(v__3017, v__11371[(v_i_11351 + (v_MWidthC_1 * v_l_id_11350))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11352 = 0; \n          v__11376[v_w_id_11346] = doubleMultiplyAdd(v__3017, v__11357, v__11356[v_w_id_11346], v__11358); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11346 = atomic_inc(v_work_idx_854); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11353",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11354",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11355",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11356",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11357",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11358",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11360",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11376",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11371",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}