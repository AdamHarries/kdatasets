{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__14750, const global float* restrict v__14751, const global float* restrict v__14752, const global float* restrict v__14753, float v__14754, float v__14755, global float* v__14775, global int* v__14757, local float* v__14770, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14759; \n  float v__14761; \n  float v__3017; \n  /* Private Memory */\n  float v__14763_0;\n  \n  float v__14765_0;\n  \n  int v__14769_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1175 = v__14757; \n    local int v_w_id_14743; \n    if (get_local_id(0) == 0) {\n      v_w_id_14743 = atomic_inc(v_work_idx_1175); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14743 < v_MHeight_2)){\n      for (int v_l_id_14744 = get_local_id(0); v_l_id_14744 < v_MWidthC_1; v_l_id_14744 = (v_l_id_14744 + get_local_size(0))) {\n        float v_tmp_14837 = 0.0f; \n        v__14759 = v_tmp_14837; \n        /* reduce_while_seq */\n        for (int v_i_14745 = 0; v_i_14745 < 64; v_i_14745 = (1 + v_i_14745)) {\n          v__14769_0 = check(v__14759, v__14750[(v_l_id_14744 + (64 * v_MWidthC_1 * v_w_id_14743) + (v_MWidthC_1 * v_i_14745))]); \n          if (v__14769_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14838 = 0.0f; \n          v__14761 = v_tmp_14838; \n          int v_index_14839 = v__14750[(v_l_id_14744 + (64 * v_MWidthC_1 * v_w_id_14743) + (v_MWidthC_1 * v_i_14745))]; \n          if (v_index_14839 < 0) {\n            v__14763_0 = v__14761; \n          } else {\n            if (v_index_14839 >= v_VLength_3) {\n              v__14763_0 = v__14761; \n            } else {\n              v__14763_0 = v__14752[v_index_14839]; \n            }\n          }\n          v__14765_0 = mult(v__14763_0, v__14751[(v_l_id_14744 + (64 * v_MWidthC_1 * v_w_id_14743) + (v_MWidthC_1 * v_i_14745))]); \n          v__14759 = add(v__14765_0, v__14759); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14746 = 0; \n          v__14770[v_l_id_14744] = id(v__14759); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14747 = get_local_id(0); \n        float v_tmp_14842 = 0.0f; \n        v__3017 = v_tmp_14842; \n        /* reduce_seq */\n        for (int v_i_14748 = 0; v_i_14748 < v_MWidthC_1; v_i_14748 = (1 + v_i_14748)) {\n          v__3017 = add(v__3017, v__14770[(v_i_14748 + (v_MWidthC_1 * v_l_id_14747))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14749 = 0; \n          v__14775[v_w_id_14743] = doubleMultiplyAdd(v__3017, v__14754, v__14753[v_w_id_14743], v__14755); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14743 = atomic_inc(v_work_idx_1175); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14750",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14751",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14752",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14754",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14755",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14757",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14770",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}