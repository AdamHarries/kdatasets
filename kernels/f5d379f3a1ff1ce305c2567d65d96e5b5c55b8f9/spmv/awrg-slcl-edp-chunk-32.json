{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11168, const global float* restrict v__11169, const global float* restrict v__11170, const global float* restrict v__11171, float v__11172, float v__11173, global float* v__11189, global int* v__11175, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11176; \n  float v__11179; \n  /* Private Memory */\n  float v__11181_0;\n  \n  float v__11183_0;\n  \n  int v__11187_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_835 = v__11175; \n    local int v_w_id_11164; \n    if (get_local_id(0) == 0) {\n      v_w_id_11164 = atomic_inc(v_work_idx_835); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11164 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_11165 = get_local_id(0); v_l_id_11165 < 32; v_l_id_11165 = (v_l_id_11165 + get_local_size(0))) {\n        float v_tmp_11235 = 0.0f; \n        v__11176 = v_tmp_11235; \n        /* reduce_while_seq */\n        for (int v_i_11166 = 0; v_i_11166 < v_MWidthC_1; v_i_11166 = (1 + v_i_11166)) {\n          v__11187_0 = check(v__11176, v__11168[(v_i_11166 + (32 * v_MWidthC_1 * v_w_id_11164) + (v_MWidthC_1 * v_l_id_11165))]); \n          if (v__11187_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11236 = 0.0f; \n          v__11179 = v_tmp_11236; \n          int v_index_11237 = v__11168[(v_i_11166 + (32 * v_MWidthC_1 * v_w_id_11164) + (v_MWidthC_1 * v_l_id_11165))]; \n          if (v_index_11237 < 0) {\n            v__11181_0 = v__11179; \n          } else {\n            if (v_index_11237 >= v_VLength_3) {\n              v__11181_0 = v__11179; \n            } else {\n              v__11181_0 = v__11170[v_index_11237]; \n            }\n          }\n          v__11183_0 = mult(v__11181_0, v__11169[(v_i_11166 + (32 * v_MWidthC_1 * v_w_id_11164) + (v_MWidthC_1 * v_l_id_11165))]); \n          v__11176 = add(v__11183_0, v__11176); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11167 = 0; \n          v__11189[(v_l_id_11165 + (32 * v_w_id_11164))] = doubleMultiplyAdd(v__11176, v__11172, v__11171[(v_l_id_11165 + (32 * v_w_id_11164))], v__11173); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_11164 = atomic_inc(v_work_idx_835); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__11168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11169",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11170",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11171",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11172",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11173",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11175",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}