{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12373, const global float* restrict v__12374, const global float* restrict v__12375, const global float* restrict v__12376, float v__12377, float v__12378, global float* v__12396, global float* v__12386, global int* v__12380, local float* v__12391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12382; \n  float v__12387; \n  float v__3017; \n  /* Private Memory */\n  float v__12384_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_959 = v__12380; \n    local int v_w_id_12365; \n    if (get_local_id(0) == 0) {\n      v_w_id_12365 = atomic_inc(v_work_idx_959); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12365 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_957; \n        v_work_idx_957 = 0; \n        int v_l_id_12366 = atomic_inc(&(v_work_idx_957)); \n        while((v_l_id_12366 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_12367 = 0; v_i_12367 < 32; v_i_12367 = (1 + v_i_12367)) {\n            float v_tmp_12447 = 0.0f; \n            v__12382 = v_tmp_12447; \n            int v_index_12448 = v__12373[(v_l_id_12366 + (32 * v_MWidthC_1 * v_w_id_12365) + (v_MWidthC_1 * v_i_12367))]; \n            if (v_index_12448 < 0) {\n              v__12384_0 = v__12382; \n            } else {\n              if (v_index_12448 >= v_VLength_3) {\n                v__12384_0 = v__12382; \n              } else {\n                v__12384_0 = v__12375[v_index_12448]; \n              }\n            }\n            v__12386[(31 + (32 * v_MWidthC_1 * v_w_id_12365) + (-1 * v_i_12367) + (32 * v_l_id_12366))] = mult(v__12384_0, v__12374[(v_l_id_12366 + (32 * v_MWidthC_1 * v_w_id_12365) + (v_MWidthC_1 * v_i_12367))]); \n          }\n          /* end map_seq */\n          float v_tmp_12449 = 0.0f; \n          v__12387 = v_tmp_12449; \n          /* reduce_seq */\n          for (int v_i_12368 = 0; v_i_12368 < 32; v_i_12368 = (1 + v_i_12368)) {\n            v__12387 = add(v__12387, v__12386[(v_i_12368 + (32 * v_MWidthC_1 * v_w_id_12365) + (32 * v_l_id_12366))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12369 = 0; \n            v__12391[v_l_id_12366] = id(v__12387); \n          }\n          /* end map_seq */\n          v_l_id_12366 = atomic_inc(&(v_work_idx_957)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_951; \n        v_work_idx_951 = 0; \n        int v_l_id_12370 = atomic_inc(&(v_work_idx_951)); \n        while((v_l_id_12370 < 1)){\n          float v_tmp_12452 = 0.0f; \n          v__3017 = v_tmp_12452; \n          /* reduce_seq */\n          for (int v_i_12371 = 0; v_i_12371 < v_MWidthC_1; v_i_12371 = (1 + v_i_12371)) {\n            v__3017 = add(v__3017, v__12391[v_i_12371]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12372 = 0; \n            v__12396[v_w_id_12365] = doubleMultiplyAdd(v__3017, v__12377, v__12376[v_w_id_12365], v__12378); \n          }\n          /* end map_seq */\n          v_l_id_12370 = atomic_inc(&(v_work_idx_951)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12365 = atomic_inc(v_work_idx_959); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12373",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12374",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12375",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12376",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12377",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12378",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12386",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12380",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}