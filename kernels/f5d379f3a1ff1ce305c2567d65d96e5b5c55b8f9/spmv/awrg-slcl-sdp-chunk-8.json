{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__4430, const global float* restrict v__4431, const global float* restrict v__4432, const global float* restrict v__4433, float v__4434, float v__4435, global float* v__4449, global float* v__4443, global int* v__4437, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__4439; \n  float v__4444; \n  /* Private Memory */\n  float v__4441_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_199 = v__4437; \n    local int v_w_id_4425; \n    if (get_local_id(0) == 0) {\n      v_w_id_4425 = atomic_inc(v_work_idx_199); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_4425 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_4426 = get_local_id(0); v_l_id_4426 < 8; v_l_id_4426 = (v_l_id_4426 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_4427 = 0; v_i_4427 < v_MWidthC_1; v_i_4427 = (1 + v_i_4427)) {\n          float v_tmp_4491 = 0.0f; \n          v__4439 = v_tmp_4491; \n          int v_index_4492 = v__4430[(v_i_4427 + (8 * v_MWidthC_1 * v_w_id_4425) + (v_MWidthC_1 * v_l_id_4426))]; \n          if (v_index_4492 < 0) {\n            v__4441_0 = v__4439; \n          } else {\n            if (v_index_4492 >= v_VLength_3) {\n              v__4441_0 = v__4439; \n            } else {\n              v__4441_0 = v__4432[v_index_4492]; \n            }\n          }\n          v__4443[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_4425) + (-1 * v_i_4427) + (v_MWidthC_1 * v_l_id_4426))] = mult(v__4441_0, v__4431[(v_i_4427 + (8 * v_MWidthC_1 * v_w_id_4425) + (v_MWidthC_1 * v_l_id_4426))]); \n        }\n        /* end map_seq */\n        float v_tmp_4493 = 0.0f; \n        v__4444 = v_tmp_4493; \n        /* reduce_seq */\n        for (int v_i_4428 = 0; v_i_4428 < v_MWidthC_1; v_i_4428 = (1 + v_i_4428)) {\n          v__4444 = add(v__4444, v__4443[(v_i_4428 + (8 * v_MWidthC_1 * v_w_id_4425) + (v_MWidthC_1 * v_l_id_4426))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_4429 = 0; \n          v__4449[(v_l_id_4426 + (8 * v_w_id_4425))] = doubleMultiplyAdd(v__4444, v__4434, v__4433[(v_l_id_4426 + (8 * v_w_id_4425))], v__4435); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_4425 = atomic_inc(v_work_idx_199); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__4430",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4431",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4432",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__4433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__4434",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__4435",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__4443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__4437",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__4449",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}