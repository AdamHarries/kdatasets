{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__19151, const global float* restrict v__19152, const global float* restrict v__19153, const global float* restrict v__19154, float v__19155, float v__19156, global float* v__19176, global int* v__19158, local float* v__19171, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19160; \n  float v__19162; \n  float v__3017; \n  /* Private Memory */\n  float v__19164_0;\n  \n  float v__19166_0;\n  \n  int v__19170_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1605 = v__19158; \n    local int v_w_id_19144; \n    if (get_local_id(0) == 0) {\n      v_w_id_19144 = atomic_inc(v_work_idx_1605); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19144 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1603; \n        v_work_idx_1603 = 0; \n        int v_l_id_19145 = atomic_inc(&(v_work_idx_1603)); \n        while((v_l_id_19145 < v_MWidthC_1)){\n          float v_tmp_19230 = 0.0f; \n          v__19160 = v_tmp_19230; \n          /* reduce_while_seq */\n          for (int v_i_19146 = 0; v_i_19146 < 128; v_i_19146 = (1 + v_i_19146)) {\n            v__19170_0 = check(v__19160, v__19151[(v_l_id_19145 + (128 * v_MWidthC_1 * v_w_id_19144) + (v_MWidthC_1 * v_i_19146))]); \n            if (v__19170_0) {\n            } else {\n              break;\n            }\n            float v_tmp_19231 = 0.0f; \n            v__19162 = v_tmp_19231; \n            int v_index_19232 = v__19151[(v_l_id_19145 + (128 * v_MWidthC_1 * v_w_id_19144) + (v_MWidthC_1 * v_i_19146))]; \n            if (v_index_19232 < 0) {\n              v__19164_0 = v__19162; \n            } else {\n              if (v_index_19232 >= v_VLength_3) {\n                v__19164_0 = v__19162; \n              } else {\n                v__19164_0 = v__19153[v_index_19232]; \n              }\n            }\n            v__19166_0 = mult(v__19164_0, v__19152[(v_l_id_19145 + (128 * v_MWidthC_1 * v_w_id_19144) + (v_MWidthC_1 * v_i_19146))]); \n            v__19160 = add(v__19166_0, v__19160); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19147 = 0; \n            v__19171[v_l_id_19145] = id(v__19160); \n          }\n          /* end map_seq */\n          v_l_id_19145 = atomic_inc(&(v_work_idx_1603)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1598; \n        v_work_idx_1598 = 0; \n        int v_l_id_19148 = atomic_inc(&(v_work_idx_1598)); \n        while((v_l_id_19148 < 1)){\n          float v_tmp_19235 = 0.0f; \n          v__3017 = v_tmp_19235; \n          /* reduce_seq */\n          for (int v_i_19149 = 0; v_i_19149 < v_MWidthC_1; v_i_19149 = (1 + v_i_19149)) {\n            v__3017 = add(v__3017, v__19171[v_i_19149]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19150 = 0; \n            v__19176[v_w_id_19144] = doubleMultiplyAdd(v__3017, v__19155, v__19154[v_w_id_19144], v__19156); \n          }\n          /* end map_seq */\n          v_l_id_19148 = atomic_inc(&(v_work_idx_1598)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19144 = atomic_inc(v_work_idx_1605); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19151",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19152",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19153",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19154",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19155",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19156",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19158",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19176",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19171",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}