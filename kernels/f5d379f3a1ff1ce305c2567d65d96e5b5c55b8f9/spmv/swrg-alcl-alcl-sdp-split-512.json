{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23918, const global float* restrict v__23919, const global float* restrict v__23920, const global float* restrict v__23921, float v__23922, float v__23923, global float* v__23940, global float* v__23930, local float* v__23935, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23926; \n  float v__23931; \n  float v__3017; \n  /* Private Memory */\n  float v__23928_0;\n  \n  for (int v_wg_id_23910 = get_group_id(0); v_wg_id_23910 < v_MHeight_2; v_wg_id_23910 = (v_wg_id_23910 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2043; \n      v_work_idx_2043 = 0; \n      int v_l_id_23911 = atomic_inc(&(v_work_idx_2043)); \n      while((v_l_id_23911 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_23912 = 0; v_i_23912 < 512; v_i_23912 = (1 + v_i_23912)) {\n          float v_tmp_23994 = 0.0f; \n          v__23926 = v_tmp_23994; \n          int v_index_23995 = v__23918[(v_l_id_23911 + (512 * v_MWidthC_1 * v_wg_id_23910) + (v_MWidthC_1 * v_i_23912))]; \n          if (v_index_23995 < 0) {\n            v__23928_0 = v__23926; \n          } else {\n            if (v_index_23995 >= v_VLength_3) {\n              v__23928_0 = v__23926; \n            } else {\n              v__23928_0 = v__23920[v_index_23995]; \n            }\n          }\n          v__23930[(511 + (512 * v_MWidthC_1 * v_wg_id_23910) + (-1 * v_i_23912) + (512 * v_l_id_23911))] = mult(v__23928_0, v__23919[(v_l_id_23911 + (512 * v_MWidthC_1 * v_wg_id_23910) + (v_MWidthC_1 * v_i_23912))]); \n        }\n        /* end map_seq */\n        float v_tmp_23996 = 0.0f; \n        v__23931 = v_tmp_23996; \n        /* reduce_seq */\n        for (int v_i_23913 = 0; v_i_23913 < 512; v_i_23913 = (1 + v_i_23913)) {\n          v__23931 = add(v__23931, v__23930[(v_i_23913 + (512 * v_MWidthC_1 * v_wg_id_23910) + (512 * v_l_id_23911))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23914 = 0; \n          v__23935[v_l_id_23911] = id(v__23931); \n        }\n        /* end map_seq */\n        v_l_id_23911 = atomic_inc(&(v_work_idx_2043)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2037; \n      v_work_idx_2037 = 0; \n      int v_l_id_23915 = atomic_inc(&(v_work_idx_2037)); \n      while((v_l_id_23915 < 1)){\n        float v_tmp_23999 = 0.0f; \n        v__3017 = v_tmp_23999; \n        /* reduce_seq */\n        for (int v_i_23916 = 0; v_i_23916 < v_MWidthC_1; v_i_23916 = (1 + v_i_23916)) {\n          v__3017 = add(v__3017, v__23935[v_i_23916]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23917 = 0; \n          v__23940[v_wg_id_23910] = doubleMultiplyAdd(v__3017, v__23922, v__23921[v_wg_id_23910], v__23923); \n        }\n        /* end map_seq */\n        v_l_id_23915 = atomic_inc(&(v_work_idx_2037)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23918",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23919",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23920",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23921",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23922",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23923",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23930",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23940",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23935",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}