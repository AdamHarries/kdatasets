{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9907, const global float* restrict v__9908, const global float* restrict v__9909, const global float* restrict v__9910, float v__9911, float v__9912, global float* v__9929, global float* v__9919, local float* v__9924, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9915; \n  float v__9920; \n  float v__3017; \n  /* Private Memory */\n  float v__9917_0;\n  \n  for (int v_wg_id_9899 = get_group_id(0); v_wg_id_9899 < v_MHeight_2; v_wg_id_9899 = (v_wg_id_9899 + get_num_groups(0))) {\n    for (int v_l_id_9900 = get_local_id(0); v_l_id_9900 < v_MWidthC_1; v_l_id_9900 = (v_l_id_9900 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_9901 = 0; v_i_9901 < 32; v_i_9901 = (1 + v_i_9901)) {\n        float v_tmp_9988 = 0.0f; \n        v__9915 = v_tmp_9988; \n        int v_index_9989 = v__9907[(v_l_id_9900 + (32 * v_MWidthC_1 * v_wg_id_9899) + (v_MWidthC_1 * v_i_9901))]; \n        if (v_index_9989 < 0) {\n          v__9917_0 = v__9915; \n        } else {\n          if (v_index_9989 >= v_VLength_3) {\n            v__9917_0 = v__9915; \n          } else {\n            v__9917_0 = v__9909[v_index_9989]; \n          }\n        }\n        v__9919[(31 + (32 * v_MWidthC_1 * v_wg_id_9899) + (-1 * v_i_9901) + (32 * v_l_id_9900))] = mult(v__9917_0, v__9908[(v_l_id_9900 + (32 * v_MWidthC_1 * v_wg_id_9899) + (v_MWidthC_1 * v_i_9901))]); \n      }\n      /* end map_seq */\n      float v_tmp_9990 = 0.0f; \n      v__9920 = v_tmp_9990; \n      /* reduce_seq */\n      for (int v_i_9902 = 0; v_i_9902 < 32; v_i_9902 = (1 + v_i_9902)) {\n        v__9920 = add(v__9920, v__9919[(v_i_9902 + (32 * v_MWidthC_1 * v_wg_id_9899) + (32 * v_l_id_9900))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9903 = 0; \n        v__9924[v_l_id_9900] = id(v__9920); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_714; \n      v_work_idx_714 = 0; \n      int v_l_id_9904 = atomic_inc(&(v_work_idx_714)); \n      while((v_l_id_9904 < 1)){\n        float v_tmp_9993 = 0.0f; \n        v__3017 = v_tmp_9993; \n        /* reduce_seq */\n        for (int v_i_9905 = 0; v_i_9905 < v_MWidthC_1; v_i_9905 = (1 + v_i_9905)) {\n          v__3017 = add(v__3017, v__9924[v_i_9905]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_9906 = 0; \n          v__9929[v_wg_id_9899] = doubleMultiplyAdd(v__3017, v__9911, v__9910[v_wg_id_9899], v__9912); \n        }\n        /* end map_seq */\n        v_l_id_9904 = atomic_inc(&(v_work_idx_714)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__9907",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9908",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9909",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9911",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9912",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9919",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__9929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9924",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}