{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__56099, const global int* restrict v__56100, const global int* restrict v__56101, const global int* restrict v__56102, int v__56103, int v__56104, global int* v__56124, global int* v__56106, local int* v__56119, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56108; \n  int v__56110; \n  int v__33398; \n  /* Private Memory */\n  int v__56112_0;\n  \n  int v__56114_0;\n  \n  int v__56118_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4414 = v__56106; \n    local int v_w_id_56092; \n    if (get_local_id(0) == 0) {\n      v_w_id_56092 = atomic_inc(v_work_idx_4414); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56092 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4412; \n        v_work_idx_4412 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_56093 = atomic_inc(&(v_work_idx_4412)); \n        while((v_l_id_56093 < v_MWidthC_1)){\n          int v_tmp_56182 = 0; \n          v__56108 = v_tmp_56182; \n          /* reduce_while_seq */\n          for (int v_i_56094 = 0; v_i_56094 < 512; v_i_56094 = (1 + v_i_56094)) {\n            v__56118_0 = check(v__56108, v__56099[(v_l_id_56093 + (512 * v_MWidthC_1 * v_w_id_56092) + (v_MWidthC_1 * v_i_56094))]); \n            if (v__56118_0) {\n            } else {\n              break;\n            }\n            int v_tmp_56183 = 0; \n            v__56110 = v_tmp_56183; \n            int v_index_56184 = v__56099[(v_l_id_56093 + (512 * v_MWidthC_1 * v_w_id_56092) + (v_MWidthC_1 * v_i_56094))]; \n            if (v_index_56184 < 0) {\n              v__56112_0 = v__56110; \n            } else {\n              if (v_index_56184 >= v_VLength_3) {\n                v__56112_0 = v__56110; \n              } else {\n                v__56112_0 = v__56101[v_index_56184]; \n              }\n            }\n            v__56114_0 = bool_and(v__56112_0, v__56100[(v_l_id_56093 + (512 * v_MWidthC_1 * v_w_id_56092) + (v_MWidthC_1 * v_i_56094))]); \n            v__56108 = bool_or(v__56114_0, v__56108); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56095 = 0; \n            v__56119[v_l_id_56093] = id(v__56108); \n          }\n          /* end map_seq */\n          v_l_id_56093 = atomic_inc(&(v_work_idx_4412)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_56096 = get_local_id(0); \n        int v_tmp_56187 = 0; \n        v__33398 = v_tmp_56187; \n        /* reduce_seq */\n        for (int v_i_56097 = 0; v_i_56097 < v_MWidthC_1; v_i_56097 = (1 + v_i_56097)) {\n          v__33398 = bool_or(v__33398, v__56119[(v_i_56097 + (v_MWidthC_1 * v_l_id_56096))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_56098 = 0; \n          v__56124[v_w_id_56092] = doubleAndOr(v__33398, v__56103, v__56102[v_w_id_56092], v__56104); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56092 = atomic_inc(v_work_idx_4414); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__56099",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56100",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56106",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56124",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__56119",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}