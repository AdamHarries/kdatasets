{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38810, const global int* restrict v__38811, const global int* restrict v__38812, const global int* restrict v__38813, int v__38814, int v__38815, global int* v__38833, global int* v__38817, local int* v__38828, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38819; \n  int v__38821; \n  int v__33398; \n  /* Private Memory */\n  int v__38823_0;\n  \n  int v__38825_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2791 = v__38817; \n    local int v_w_id_38803; \n    if (get_local_id(0) == 0) {\n      v_w_id_38803 = atomic_inc(v_work_idx_2791); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38803 < v_MHeight_2)){\n      for (int v_l_id_38804 = get_local_id(0); v_l_id_38804 < v_MWidthC_1; v_l_id_38804 = (v_l_id_38804 + get_local_size(0))) {\n        int v_tmp_38892 = 0; \n        v__38819 = v_tmp_38892; \n        /* reduce_seq */\n        for (int v_i_38805 = 0; v_i_38805 < 16; v_i_38805 = (1 + v_i_38805)) {\n          int v_tmp_38893 = 0; \n          v__38821 = v_tmp_38893; \n          int v_index_38894 = v__38810[(v_l_id_38804 + (16 * v_MWidthC_1 * v_w_id_38803) + (v_MWidthC_1 * v_i_38805))]; \n          if (v_index_38894 < 0) {\n            v__38823_0 = v__38821; \n          } else {\n            if (v_index_38894 >= v_VLength_3) {\n              v__38823_0 = v__38821; \n            } else {\n              v__38823_0 = v__38812[v_index_38894]; \n            }\n          }\n          v__38825_0 = bool_and(v__38823_0, v__38811[(v_l_id_38804 + (16 * v_MWidthC_1 * v_w_id_38803) + (v_MWidthC_1 * v_i_38805))]); \n          v__38819 = bool_or(v__38825_0, v__38819); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38806 = 0; \n          v__38828[v_l_id_38804] = id(v__38819); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2785; \n        v_work_idx_2785 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_38807 = atomic_inc(&(v_work_idx_2785)); \n        while((v_l_id_38807 < 1)){\n          int v_tmp_38897 = 0; \n          v__33398 = v_tmp_38897; \n          /* reduce_seq */\n          for (int v_i_38808 = 0; v_i_38808 < v_MWidthC_1; v_i_38808 = (1 + v_i_38808)) {\n            v__33398 = bool_or(v__33398, v__38828[(v_i_38808 + (v_MWidthC_1 * v_l_id_38807))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38809 = 0; \n            v__38833[v_w_id_38803] = doubleAndOr(v__33398, v__38814, v__38813[v_w_id_38803], v__38815); \n          }\n          /* end map_seq */\n          v_l_id_38807 = atomic_inc(&(v_work_idx_2785)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38803 = atomic_inc(v_work_idx_2791); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38810",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38811",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38812",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38814",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38815",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38817",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38828",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}