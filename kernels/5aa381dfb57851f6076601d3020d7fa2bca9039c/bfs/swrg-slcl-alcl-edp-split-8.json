{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__33909, const global int* restrict v__33910, const global int* restrict v__33911, const global int* restrict v__33912, int v__33913, int v__33914, global int* v__33933, local int* v__33928, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33917; \n  int v__33919; \n  int v__33398; \n  /* Private Memory */\n  int v__33921_0;\n  \n  int v__33923_0;\n  \n  int v__33927_0;\n  \n  for (int v_wg_id_33902 = get_group_id(0); v_wg_id_33902 < v_MHeight_2; v_wg_id_33902 = (v_wg_id_33902 + get_num_groups(0))) {\n    for (int v_l_id_33903 = get_local_id(0); v_l_id_33903 < v_MWidthC_1; v_l_id_33903 = (v_l_id_33903 + get_local_size(0))) {\n      int v_tmp_33997 = 0; \n      v__33917 = v_tmp_33997; \n      /* reduce_while_seq */\n      for (int v_i_33904 = 0; v_i_33904 < 8; v_i_33904 = (1 + v_i_33904)) {\n        v__33927_0 = check(v__33917, v__33909[(v_l_id_33903 + (8 * v_MWidthC_1 * v_wg_id_33902) + (v_MWidthC_1 * v_i_33904))]); \n        if (v__33927_0) {\n        } else {\n          break;\n        }\n        int v_tmp_33998 = 0; \n        v__33919 = v_tmp_33998; \n        int v_index_33999 = v__33909[(v_l_id_33903 + (8 * v_MWidthC_1 * v_wg_id_33902) + (v_MWidthC_1 * v_i_33904))]; \n        if (v_index_33999 < 0) {\n          v__33921_0 = v__33919; \n        } else {\n          if (v_index_33999 >= v_VLength_3) {\n            v__33921_0 = v__33919; \n          } else {\n            v__33921_0 = v__33911[v_index_33999]; \n          }\n        }\n        v__33923_0 = bool_and(v__33921_0, v__33910[(v_l_id_33903 + (8 * v_MWidthC_1 * v_wg_id_33902) + (v_MWidthC_1 * v_i_33904))]); \n        v__33917 = bool_or(v__33923_0, v__33917); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33905 = 0; \n        v__33928[v_l_id_33903] = id(v__33917); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2328; \n      v_work_idx_2328 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_33906 = atomic_inc(&(v_work_idx_2328)); \n      while((v_l_id_33906 < 1)){\n        int v_tmp_34002 = 0; \n        v__33398 = v_tmp_34002; \n        /* reduce_seq */\n        for (int v_i_33907 = 0; v_i_33907 < v_MWidthC_1; v_i_33907 = (1 + v_i_33907)) {\n          v__33398 = bool_or(v__33398, v__33928[(v_i_33907 + (v_MWidthC_1 * v_l_id_33906))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33908 = 0; \n          v__33933[v_wg_id_33902] = doubleAndOr(v__33398, v__33913, v__33912[v_wg_id_33902], v__33914); \n        }\n        /* end map_seq */\n        v_l_id_33906 = atomic_inc(&(v_work_idx_2328)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__33909",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33910",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33911",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33912",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33913",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33914",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33933",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33928",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}