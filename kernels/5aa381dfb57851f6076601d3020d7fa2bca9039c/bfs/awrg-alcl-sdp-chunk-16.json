{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39015, const global int* restrict v__39016, const global int* restrict v__39017, const global int* restrict v__39018, int v__39019, int v__39020, global int* v__39034, global int* v__39022, global int* v__39028, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39024; \n  int v__39029; \n  /* Private Memory */\n  int v__39026_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2809 = v__39022; \n    local int v_w_id_39010; \n    if (get_local_id(0) == 0) {\n      v_w_id_39010 = atomic_inc(v_work_idx_2809); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39010 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2807; \n        v_work_idx_2807 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_39011 = atomic_inc(&(v_work_idx_2807)); \n        while((v_l_id_39011 < 16)){\n          /* map_seq */\n          for (int v_i_39012 = 0; v_i_39012 < v_MWidthC_1; v_i_39012 = (1 + v_i_39012)) {\n            int v_tmp_39072 = 0; \n            v__39024 = v_tmp_39072; \n            int v_index_39073 = v__39015[(v_i_39012 + (16 * v_MWidthC_1 * v_w_id_39010) + (v_MWidthC_1 * v_l_id_39011))]; \n            if (v_index_39073 < 0) {\n              v__39026_0 = v__39024; \n            } else {\n              if (v_index_39073 >= v_VLength_3) {\n                v__39026_0 = v__39024; \n              } else {\n                v__39026_0 = v__39017[v_index_39073]; \n              }\n            }\n            v__39028[(v_i_39012 + (16 * v_MWidthC_1 * v_w_id_39010) + (v_MWidthC_1 * v_l_id_39011))] = bool_and(v__39026_0, v__39016[(v_i_39012 + (16 * v_MWidthC_1 * v_w_id_39010) + (v_MWidthC_1 * v_l_id_39011))]); \n          }\n          /* end map_seq */\n          int v_tmp_39074 = 0; \n          v__39029 = v_tmp_39074; \n          /* reduce_seq */\n          for (int v_i_39013 = 0; v_i_39013 < v_MWidthC_1; v_i_39013 = (1 + v_i_39013)) {\n            v__39029 = bool_or(v__39029, v__39028[(v_i_39013 + (16 * v_MWidthC_1 * v_w_id_39010) + (v_MWidthC_1 * v_l_id_39011))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39014 = 0; \n            v__39034[(v_l_id_39011 + (16 * v_w_id_39010))] = doubleAndOr(v__39029, v__39019, v__39018[(v_l_id_39011 + (16 * v_w_id_39010))], v__39020); \n          }\n          /* end map_seq */\n          v_l_id_39011 = atomic_inc(&(v_work_idx_2807)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39010 = atomic_inc(v_work_idx_2809); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39015",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39016",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39017",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39018",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__39019",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39020",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39022",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__39028",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__39034",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}