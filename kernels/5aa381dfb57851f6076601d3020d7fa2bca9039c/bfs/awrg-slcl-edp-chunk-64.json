{
  "name" : "awrg-slcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44971, const global int* restrict v__44972, const global int* restrict v__44973, const global int* restrict v__44974, int v__44975, int v__44976, global int* v__44992, global int* v__44978, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44979; \n  int v__44982; \n  /* Private Memory */\n  int v__44984_0;\n  \n  int v__44986_0;\n  \n  int v__44990_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3366 = v__44978; \n    local int v_w_id_44967; \n    if (get_local_id(0) == 0) {\n      v_w_id_44967 = atomic_inc(v_work_idx_3366); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_44967 < v_MHeight_2)){\n      for (int v_l_id_44968 = get_local_id(0); v_l_id_44968 < 64; v_l_id_44968 = (v_l_id_44968 + get_local_size(0))) {\n        int v_tmp_45039 = 0; \n        v__44979 = v_tmp_45039; \n        /* reduce_while_seq */\n        for (int v_i_44969 = 0; v_i_44969 < v_MWidthC_1; v_i_44969 = (1 + v_i_44969)) {\n          v__44990_0 = check(v__44979, v__44971[(v_i_44969 + (64 * v_MWidthC_1 * v_w_id_44967) + (v_MWidthC_1 * v_l_id_44968))]); \n          if (v__44990_0) {\n          } else {\n            break;\n          }\n          int v_tmp_45040 = 0; \n          v__44982 = v_tmp_45040; \n          int v_index_45041 = v__44971[(v_i_44969 + (64 * v_MWidthC_1 * v_w_id_44967) + (v_MWidthC_1 * v_l_id_44968))]; \n          if (v_index_45041 < 0) {\n            v__44984_0 = v__44982; \n          } else {\n            if (v_index_45041 >= v_VLength_3) {\n              v__44984_0 = v__44982; \n            } else {\n              v__44984_0 = v__44973[v_index_45041]; \n            }\n          }\n          v__44986_0 = bool_and(v__44984_0, v__44972[(v_i_44969 + (64 * v_MWidthC_1 * v_w_id_44967) + (v_MWidthC_1 * v_l_id_44968))]); \n          v__44979 = bool_or(v__44986_0, v__44979); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44970 = 0; \n          v__44992[(v_l_id_44968 + (64 * v_w_id_44967))] = doubleAndOr(v__44979, v__44975, v__44974[(v_l_id_44968 + (64 * v_w_id_44967))], v__44976); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_44967 = atomic_inc(v_work_idx_3366); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__44971",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44972",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44973",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44974",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__44975",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44976",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44978",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__44992",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}