{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35998, const global int* restrict v__35999, const global int* restrict v__36000, const global int* restrict v__36001, int v__36002, int v__36003, global int* v__36021, global int* v__36005, local int* v__36016, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36007; \n  int v__36009; \n  int v__33398; \n  /* Private Memory */\n  int v__36011_0;\n  \n  int v__36013_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2532 = v__36005; \n    local int v_w_id_35991; \n    if (get_local_id(0) == 0) {\n      v_w_id_35991 = atomic_inc(v_work_idx_2532); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35991 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2530; \n        v_work_idx_2530 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_35992 = atomic_inc(&(v_work_idx_2530)); \n        while((v_l_id_35992 < v_MWidthC_1)){\n          int v_tmp_36076 = 0; \n          v__36007 = v_tmp_36076; \n          /* reduce_seq */\n          for (int v_i_35993 = 0; v_i_35993 < 8; v_i_35993 = (1 + v_i_35993)) {\n            int v_tmp_36077 = 0; \n            v__36009 = v_tmp_36077; \n            int v_index_36078 = v__35998[(v_l_id_35992 + (8 * v_MWidthC_1 * v_w_id_35991) + (v_MWidthC_1 * v_i_35993))]; \n            if (v_index_36078 < 0) {\n              v__36011_0 = v__36009; \n            } else {\n              if (v_index_36078 >= v_VLength_3) {\n                v__36011_0 = v__36009; \n              } else {\n                v__36011_0 = v__36000[v_index_36078]; \n              }\n            }\n            v__36013_0 = bool_and(v__36011_0, v__35999[(v_l_id_35992 + (8 * v_MWidthC_1 * v_w_id_35991) + (v_MWidthC_1 * v_i_35993))]); \n            v__36007 = bool_or(v__36013_0, v__36007); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35994 = 0; \n            v__36016[v_l_id_35992] = id(v__36007); \n          }\n          /* end map_seq */\n          v_l_id_35992 = atomic_inc(&(v_work_idx_2530)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_35995 = get_local_id(0); \n        int v_tmp_36081 = 0; \n        v__33398 = v_tmp_36081; \n        /* reduce_seq */\n        for (int v_i_35996 = 0; v_i_35996 < v_MWidthC_1; v_i_35996 = (1 + v_i_35996)) {\n          v__33398 = bool_or(v__33398, v__36016[(v_i_35996 + (v_MWidthC_1 * v_l_id_35995))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35997 = 0; \n          v__36021[v_w_id_35991] = doubleAndOr(v__33398, v__36002, v__36001[v_w_id_35991], v__36003); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35991 = atomic_inc(v_work_idx_2532); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__35998",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35999",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36000",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36002",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36003",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36005",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__36021",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36016",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}