{
  "name" : "swrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__43595, const global int* restrict v__43596, const global int* restrict v__43597, const global int* restrict v__43598, int v__43599, int v__43600, global int* v__43619, local int* v__43614, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43603; \n  int v__43605; \n  int v__33398; \n  /* Private Memory */\n  int v__43607_0;\n  \n  int v__43609_0;\n  \n  int v__43613_0;\n  \n  for (int v_wg_id_43588 = get_group_id(0); v_wg_id_43588 < v_MHeight_2; v_wg_id_43588 = (v_wg_id_43588 + get_num_groups(0))) {\n    for (int v_l_id_43589 = get_local_id(0); v_l_id_43589 < v_MWidthC_1; v_l_id_43589 = (v_l_id_43589 + get_local_size(0))) {\n      int v_tmp_43687 = 0; \n      v__43603 = v_tmp_43687; \n      /* reduce_while_seq */\n      for (int v_i_43590 = 0; v_i_43590 < 64; v_i_43590 = (1 + v_i_43590)) {\n        v__43613_0 = check(v__43603, v__43595[(v_l_id_43589 + (64 * v_MWidthC_1 * v_wg_id_43588) + (v_MWidthC_1 * v_i_43590))]); \n        if (v__43613_0) {\n        } else {\n          break;\n        }\n        int v_tmp_43688 = 0; \n        v__43605 = v_tmp_43688; \n        int v_index_43689 = v__43595[(v_l_id_43589 + (64 * v_MWidthC_1 * v_wg_id_43588) + (v_MWidthC_1 * v_i_43590))]; \n        if (v_index_43689 < 0) {\n          v__43607_0 = v__43605; \n        } else {\n          if (v_index_43689 >= v_VLength_3) {\n            v__43607_0 = v__43605; \n          } else {\n            v__43607_0 = v__43597[v_index_43689]; \n          }\n        }\n        v__43609_0 = bool_and(v__43607_0, v__43596[(v_l_id_43589 + (64 * v_MWidthC_1 * v_wg_id_43588) + (v_MWidthC_1 * v_i_43590))]); \n        v__43603 = bool_or(v__43609_0, v__43603); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43591 = 0; \n        v__43614[v_l_id_43589] = id(v__43603); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_43592 = get_local_id(0); \n      int v_tmp_43692 = 0; \n      v__33398 = v_tmp_43692; \n      /* reduce_seq */\n      for (int v_i_43593 = 0; v_i_43593 < v_MWidthC_1; v_i_43593 = (1 + v_i_43593)) {\n        v__33398 = bool_or(v__33398, v__43614[(v_i_43593 + (v_MWidthC_1 * v_l_id_43592))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43594 = 0; \n        v__43619[v_wg_id_43588] = doubleAndOr(v__33398, v__43599, v__43598[v_wg_id_43588], v__43600); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__43595",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43596",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43597",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43599",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43600",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__43619",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43614",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}