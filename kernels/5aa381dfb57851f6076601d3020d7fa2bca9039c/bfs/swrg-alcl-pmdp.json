{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33021, const global int* restrict v__33022, const global int* restrict v__33023, const global int* restrict v__33024, int v__33025, int v__33026, global int* v__33039, global int* v__33033, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33029; \n  int v__33034; \n  /* Private Memory */\n  int v__33031_0;\n  \n  for (int v_wg_id_33017 = get_group_id(0); v_wg_id_33017 < v_MHeight_2; v_wg_id_33017 = (v_wg_id_33017 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_2255; \n      v_l_id_2255 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_33018 = atomic_inc(&(v_l_id_2255)); \n      while((v_l_id_33018 < v_MWidthC_1)){\n        int v_tmp_33070 = 0; \n        v__33029 = v_tmp_33070; \n        int v_index_33071 = v__33021[(v_l_id_33018 + (v_MWidthC_1 * v_wg_id_33017))]; \n        if (v_index_33071 < 0) {\n          v__33031_0 = v__33029; \n        } else {\n          if (v_index_33071 >= v_VLength_3) {\n            v__33031_0 = v__33029; \n          } else {\n            v__33031_0 = v__33023[v_index_33071]; \n          }\n        }\n        v__33033[(v_l_id_33018 + (v_MWidthC_1 * v_wg_id_33017))] = bool_and(v__33031_0, v__33022[(v_l_id_33018 + (v_MWidthC_1 * v_wg_id_33017))]); \n        v_l_id_33018 = atomic_inc(&(v_l_id_2255)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    int v_tmp_33072 = 0; \n    v__33034 = v_tmp_33072; \n    /* reduce_seq */\n    for (int v_i_33019 = 0; v_i_33019 < v_MWidthC_1; v_i_33019 = (1 + v_i_33019)) {\n      v__33034 = bool_or(v__33034, v__33033[(v_i_33019 + (v_MWidthC_1 * v_wg_id_33017))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_33020 = 0; \n      v__33039[v_wg_id_33017] = doubleAndOr(v__33034, v__33025, v__33024[v_wg_id_33017], v__33026); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__33021",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33023",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33025",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33026",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33033",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}