{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48390, const global int* restrict v__48391, const global int* restrict v__48392, const global int* restrict v__48393, int v__48394, int v__48395, global int* v__48413, global int* v__48397, global int* v__48403, local int* v__48408, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48399; \n  int v__48404; \n  int v__33398; \n  /* Private Memory */\n  int v__48401_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3688 = v__48397; \n    local int v_w_id_48382; \n    if (get_local_id(0) == 0) {\n      v_w_id_48382 = atomic_inc(v_work_idx_3688); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48382 < v_MHeight_2)){\n      for (int v_l_id_48383 = get_local_id(0); v_l_id_48383 < v_MWidthC_1; v_l_id_48383 = (v_l_id_48383 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_48384 = 0; v_i_48384 < 128; v_i_48384 = (1 + v_i_48384)) {\n          int v_tmp_48476 = 0; \n          v__48399 = v_tmp_48476; \n          int v_index_48477 = v__48390[(v_l_id_48383 + (128 * v_MWidthC_1 * v_w_id_48382) + (v_MWidthC_1 * v_i_48384))]; \n          if (v_index_48477 < 0) {\n            v__48401_0 = v__48399; \n          } else {\n            if (v_index_48477 >= v_VLength_3) {\n              v__48401_0 = v__48399; \n            } else {\n              v__48401_0 = v__48392[v_index_48477]; \n            }\n          }\n          v__48403[(v_i_48384 + (128 * v_MWidthC_1 * v_w_id_48382) + (128 * v_l_id_48383))] = bool_and(v__48401_0, v__48391[(v_l_id_48383 + (128 * v_MWidthC_1 * v_w_id_48382) + (v_MWidthC_1 * v_i_48384))]); \n        }\n        /* end map_seq */\n        int v_tmp_48478 = 0; \n        v__48404 = v_tmp_48478; \n        /* reduce_seq */\n        for (int v_i_48385 = 0; v_i_48385 < 128; v_i_48385 = (1 + v_i_48385)) {\n          v__48404 = bool_or(v__48404, v__48403[(v_i_48385 + (128 * v_MWidthC_1 * v_w_id_48382) + (128 * v_l_id_48383))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48386 = 0; \n          v__48408[v_l_id_48383] = id(v__48404); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_48387 = get_local_id(0); \n        int v_tmp_48481 = 0; \n        v__33398 = v_tmp_48481; \n        /* reduce_seq */\n        for (int v_i_48388 = 0; v_i_48388 < v_MWidthC_1; v_i_48388 = (1 + v_i_48388)) {\n          v__33398 = bool_or(v__33398, v__48408[(v_i_48388 + (v_MWidthC_1 * v_l_id_48387))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48389 = 0; \n          v__48413[v_w_id_48382] = doubleAndOr(v__33398, v__48394, v__48393[v_w_id_48382], v__48395); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48382 = atomic_inc(v_work_idx_3688); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48390",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48391",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48392",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48393",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48394",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48395",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48397",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__48403",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__48413",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48408",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}