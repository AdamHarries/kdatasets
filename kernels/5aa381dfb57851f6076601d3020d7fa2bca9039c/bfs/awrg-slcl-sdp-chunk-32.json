{
  "name" : "awrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41490, const global int* restrict v__41491, const global int* restrict v__41492, const global int* restrict v__41493, int v__41494, int v__41495, global int* v__41509, global int* v__41497, global int* v__41503, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41499; \n  int v__41504; \n  /* Private Memory */\n  int v__41501_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3042 = v__41497; \n    local int v_w_id_41485; \n    if (get_local_id(0) == 0) {\n      v_w_id_41485 = atomic_inc(v_work_idx_3042); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_41485 < v_MHeight_2)){\n      for (int v_l_id_41486 = get_local_id(0); v_l_id_41486 < 32; v_l_id_41486 = (v_l_id_41486 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_41487 = 0; v_i_41487 < v_MWidthC_1; v_i_41487 = (1 + v_i_41487)) {\n          int v_tmp_41551 = 0; \n          v__41499 = v_tmp_41551; \n          int v_index_41552 = v__41490[(v_i_41487 + (32 * v_MWidthC_1 * v_w_id_41485) + (v_MWidthC_1 * v_l_id_41486))]; \n          if (v_index_41552 < 0) {\n            v__41501_0 = v__41499; \n          } else {\n            if (v_index_41552 >= v_VLength_3) {\n              v__41501_0 = v__41499; \n            } else {\n              v__41501_0 = v__41492[v_index_41552]; \n            }\n          }\n          v__41503[(v_i_41487 + (32 * v_MWidthC_1 * v_w_id_41485) + (v_MWidthC_1 * v_l_id_41486))] = bool_and(v__41501_0, v__41491[(v_i_41487 + (32 * v_MWidthC_1 * v_w_id_41485) + (v_MWidthC_1 * v_l_id_41486))]); \n        }\n        /* end map_seq */\n        int v_tmp_41553 = 0; \n        v__41504 = v_tmp_41553; \n        /* reduce_seq */\n        for (int v_i_41488 = 0; v_i_41488 < v_MWidthC_1; v_i_41488 = (1 + v_i_41488)) {\n          v__41504 = bool_or(v__41504, v__41503[(v_i_41488 + (32 * v_MWidthC_1 * v_w_id_41485) + (v_MWidthC_1 * v_l_id_41486))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41489 = 0; \n          v__41509[(v_l_id_41486 + (32 * v_w_id_41485))] = doubleAndOr(v__41504, v__41494, v__41493[(v_l_id_41486 + (32 * v_w_id_41485))], v__41495); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_41485 = atomic_inc(v_work_idx_3042); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41490",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41491",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41492",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41493",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__41494",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41495",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41497",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__41503",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41509",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}