{
  "name" : "swrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__40577, const global int* restrict v__40578, const global int* restrict v__40579, const global int* restrict v__40580, int v__40581, int v__40582, global int* v__40601, local int* v__40596, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__40585; \n  int v__40587; \n  int v__33398; \n  /* Private Memory */\n  int v__40589_0;\n  \n  int v__40591_0;\n  \n  int v__40595_0;\n  \n  for (int v_wg_id_40570 = get_group_id(0); v_wg_id_40570 < v_MHeight_2; v_wg_id_40570 = (v_wg_id_40570 + get_num_groups(0))) {\n    for (int v_l_id_40571 = get_local_id(0); v_l_id_40571 < v_MWidthC_1; v_l_id_40571 = (v_l_id_40571 + get_local_size(0))) {\n      int v_tmp_40665 = 0; \n      v__40585 = v_tmp_40665; \n      /* reduce_while_seq */\n      for (int v_i_40572 = 0; v_i_40572 < 32; v_i_40572 = (1 + v_i_40572)) {\n        v__40595_0 = check(v__40585, v__40577[(v_l_id_40571 + (32 * v_MWidthC_1 * v_wg_id_40570) + (v_MWidthC_1 * v_i_40572))]); \n        if (v__40595_0) {\n        } else {\n          break;\n        }\n        int v_tmp_40666 = 0; \n        v__40587 = v_tmp_40666; \n        int v_index_40667 = v__40577[(v_l_id_40571 + (32 * v_MWidthC_1 * v_wg_id_40570) + (v_MWidthC_1 * v_i_40572))]; \n        if (v_index_40667 < 0) {\n          v__40589_0 = v__40587; \n        } else {\n          if (v_index_40667 >= v_VLength_3) {\n            v__40589_0 = v__40587; \n          } else {\n            v__40589_0 = v__40579[v_index_40667]; \n          }\n        }\n        v__40591_0 = bool_and(v__40589_0, v__40578[(v_l_id_40571 + (32 * v_MWidthC_1 * v_wg_id_40570) + (v_MWidthC_1 * v_i_40572))]); \n        v__40585 = bool_or(v__40591_0, v__40585); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40573 = 0; \n        v__40596[v_l_id_40571] = id(v__40585); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2952; \n      v_work_idx_2952 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_40574 = atomic_inc(&(v_work_idx_2952)); \n      while((v_l_id_40574 < 1)){\n        int v_tmp_40670 = 0; \n        v__33398 = v_tmp_40670; \n        /* reduce_seq */\n        for (int v_i_40575 = 0; v_i_40575 < v_MWidthC_1; v_i_40575 = (1 + v_i_40575)) {\n          v__33398 = bool_or(v__33398, v__40596[(v_i_40575 + (v_MWidthC_1 * v_l_id_40574))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_40576 = 0; \n          v__40601[v_wg_id_40570] = doubleAndOr(v__33398, v__40581, v__40580[v_wg_id_40570], v__40582); \n        }\n        /* end map_seq */\n        v_l_id_40574 = atomic_inc(&(v_work_idx_2952)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__40577",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40578",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40579",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40581",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40582",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__40601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__40596",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}