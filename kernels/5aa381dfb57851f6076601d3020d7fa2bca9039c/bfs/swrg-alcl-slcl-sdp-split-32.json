{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__40905, const global int* restrict v__40906, const global int* restrict v__40907, const global int* restrict v__40908, int v__40909, int v__40910, global int* v__40927, global int* v__40917, local int* v__40922, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__40913; \n  int v__40918; \n  int v__33398; \n  /* Private Memory */\n  int v__40915_0;\n  \n  for (int v_wg_id_40897 = get_group_id(0); v_wg_id_40897 < v_MHeight_2; v_wg_id_40897 = (v_wg_id_40897 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2985; \n      v_work_idx_2985 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_40898 = atomic_inc(&(v_work_idx_2985)); \n      while((v_l_id_40898 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_40899 = 0; v_i_40899 < 32; v_i_40899 = (1 + v_i_40899)) {\n          int v_tmp_40984 = 0; \n          v__40913 = v_tmp_40984; \n          int v_index_40985 = v__40905[(v_l_id_40898 + (32 * v_MWidthC_1 * v_wg_id_40897) + (v_MWidthC_1 * v_i_40899))]; \n          if (v_index_40985 < 0) {\n            v__40915_0 = v__40913; \n          } else {\n            if (v_index_40985 >= v_VLength_3) {\n              v__40915_0 = v__40913; \n            } else {\n              v__40915_0 = v__40907[v_index_40985]; \n            }\n          }\n          v__40917[(v_i_40899 + (32 * v_MWidthC_1 * v_wg_id_40897) + (32 * v_l_id_40898))] = bool_and(v__40915_0, v__40906[(v_l_id_40898 + (32 * v_MWidthC_1 * v_wg_id_40897) + (v_MWidthC_1 * v_i_40899))]); \n        }\n        /* end map_seq */\n        int v_tmp_40986 = 0; \n        v__40918 = v_tmp_40986; \n        /* reduce_seq */\n        for (int v_i_40900 = 0; v_i_40900 < 32; v_i_40900 = (1 + v_i_40900)) {\n          v__40918 = bool_or(v__40918, v__40917[(v_i_40900 + (32 * v_MWidthC_1 * v_wg_id_40897) + (32 * v_l_id_40898))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_40901 = 0; \n          v__40922[v_l_id_40898] = id(v__40918); \n        }\n        /* end map_seq */\n        v_l_id_40898 = atomic_inc(&(v_work_idx_2985)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_40902 = get_local_id(0); \n      int v_tmp_40989 = 0; \n      v__33398 = v_tmp_40989; \n      /* reduce_seq */\n      for (int v_i_40903 = 0; v_i_40903 < v_MWidthC_1; v_i_40903 = (1 + v_i_40903)) {\n        v__33398 = bool_or(v__33398, v__40922[(v_i_40903 + (v_MWidthC_1 * v_l_id_40902))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40904 = 0; \n        v__40927[v_wg_id_40897] = doubleAndOr(v__33398, v__40909, v__40908[v_wg_id_40897], v__40910); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__40905",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40906",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40907",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40908",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40909",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40910",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__40917",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__40927",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__40922",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}