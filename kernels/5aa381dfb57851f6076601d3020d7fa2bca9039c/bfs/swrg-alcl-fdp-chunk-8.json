{
  "name" : "swrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34085, const global int* restrict v__34086, const global int* restrict v__34087, const global int* restrict v__34088, int v__34089, int v__34090, global int* v__34103, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34093; \n  int v__34095; \n  /* Private Memory */\n  int v__34097_0;\n  \n  int v__34099_0;\n  \n  for (int v_wg_id_34081 = get_group_id(0); v_wg_id_34081 < v_MHeight_2; v_wg_id_34081 = (v_wg_id_34081 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2345; \n      v_work_idx_2345 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_34082 = atomic_inc(&(v_work_idx_2345)); \n      while((v_l_id_34082 < 8)){\n        int v_tmp_34142 = 0; \n        v__34093 = v_tmp_34142; \n        /* reduce_seq */\n        for (int v_i_34083 = 0; v_i_34083 < v_MWidthC_1; v_i_34083 = (1 + v_i_34083)) {\n          int v_tmp_34143 = 0; \n          v__34095 = v_tmp_34143; \n          int v_index_34144 = v__34085[(v_i_34083 + (8 * v_MWidthC_1 * v_wg_id_34081) + (v_MWidthC_1 * v_l_id_34082))]; \n          if (v_index_34144 < 0) {\n            v__34097_0 = v__34095; \n          } else {\n            if (v_index_34144 >= v_VLength_3) {\n              v__34097_0 = v__34095; \n            } else {\n              v__34097_0 = v__34087[v_index_34144]; \n            }\n          }\n          v__34099_0 = bool_and(v__34097_0, v__34086[(v_i_34083 + (8 * v_MWidthC_1 * v_wg_id_34081) + (v_MWidthC_1 * v_l_id_34082))]); \n          v__34093 = bool_or(v__34099_0, v__34093); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34084 = 0; \n          v__34103[(v_l_id_34082 + (8 * v_wg_id_34081))] = doubleAndOr(v__34093, v__34089, v__34088[(v_l_id_34082 + (8 * v_wg_id_34081))], v__34090); \n        }\n        /* end map_seq */\n        v_l_id_34082 = atomic_inc(&(v_work_idx_2345)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__34085",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34086",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34087",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34088",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__34089",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34090",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__34103",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}