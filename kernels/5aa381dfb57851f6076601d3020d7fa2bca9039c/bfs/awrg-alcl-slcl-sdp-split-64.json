{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45903, const global int* restrict v__45904, const global int* restrict v__45905, const global int* restrict v__45906, int v__45907, int v__45908, global int* v__45926, global int* v__45910, global int* v__45916, local int* v__45921, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45912; \n  int v__45917; \n  int v__33398; \n  /* Private Memory */\n  int v__45914_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3458 = v__45910; \n    local int v_w_id_45895; \n    if (get_local_id(0) == 0) {\n      v_w_id_45895 = atomic_inc(v_work_idx_3458); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45895 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3456; \n        v_work_idx_3456 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_45896 = atomic_inc(&(v_work_idx_3456)); \n        while((v_l_id_45896 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_45897 = 0; v_i_45897 < 64; v_i_45897 = (1 + v_i_45897)) {\n            int v_tmp_45981 = 0; \n            v__45912 = v_tmp_45981; \n            int v_index_45982 = v__45903[(v_l_id_45896 + (64 * v_MWidthC_1 * v_w_id_45895) + (v_MWidthC_1 * v_i_45897))]; \n            if (v_index_45982 < 0) {\n              v__45914_0 = v__45912; \n            } else {\n              if (v_index_45982 >= v_VLength_3) {\n                v__45914_0 = v__45912; \n              } else {\n                v__45914_0 = v__45905[v_index_45982]; \n              }\n            }\n            v__45916[(v_i_45897 + (64 * v_MWidthC_1 * v_w_id_45895) + (64 * v_l_id_45896))] = bool_and(v__45914_0, v__45904[(v_l_id_45896 + (64 * v_MWidthC_1 * v_w_id_45895) + (v_MWidthC_1 * v_i_45897))]); \n          }\n          /* end map_seq */\n          int v_tmp_45983 = 0; \n          v__45917 = v_tmp_45983; \n          /* reduce_seq */\n          for (int v_i_45898 = 0; v_i_45898 < 64; v_i_45898 = (1 + v_i_45898)) {\n            v__45917 = bool_or(v__45917, v__45916[(v_i_45898 + (64 * v_MWidthC_1 * v_w_id_45895) + (64 * v_l_id_45896))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_45899 = 0; \n            v__45921[v_l_id_45896] = id(v__45917); \n          }\n          /* end map_seq */\n          v_l_id_45896 = atomic_inc(&(v_work_idx_3456)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45900 = get_local_id(0); \n        int v_tmp_45986 = 0; \n        v__33398 = v_tmp_45986; \n        /* reduce_seq */\n        for (int v_i_45901 = 0; v_i_45901 < v_MWidthC_1; v_i_45901 = (1 + v_i_45901)) {\n          v__33398 = bool_or(v__33398, v__45921[(v_i_45901 + (v_MWidthC_1 * v_l_id_45900))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45902 = 0; \n          v__45926[v_w_id_45895] = doubleAndOr(v__33398, v__45907, v__45906[v_w_id_45895], v__45908); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45895 = atomic_inc(v_work_idx_3458); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__45903",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45904",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45905",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45907",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45908",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45910",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__45916",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__45926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45921",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}