{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32952, const global int* restrict v__32953, const global int* restrict v__32954, const global int* restrict v__32955, int v__32956, int v__32957, global int* v__32971, global int* v__32959, global int* v__32965, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__32961; \n  int v__32966; \n  /* Private Memory */\n  int v__32963_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2249 = v__32959; \n    local int v_w_id_32948; \n    if (get_local_id(0) == 0) {\n      v_w_id_32948 = atomic_inc(v_work_idx_2249); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32948 < v_MHeight_2)){\n      for (int v_l_id_32949 = get_local_id(0); v_l_id_32949 < v_MWidthC_1; v_l_id_32949 = (v_l_id_32949 + get_local_size(0))) {\n        int v_tmp_33008 = 0; \n        v__32961 = v_tmp_33008; \n        int v_index_33009 = v__32952[(v_l_id_32949 + (v_MWidthC_1 * v_w_id_32948))]; \n        if (v_index_33009 < 0) {\n          v__32963_0 = v__32961; \n        } else {\n          if (v_index_33009 >= v_VLength_3) {\n            v__32963_0 = v__32961; \n          } else {\n            v__32963_0 = v__32954[v_index_33009]; \n          }\n        }\n        v__32965[(v_l_id_32949 + (v_MWidthC_1 * v_w_id_32948))] = bool_and(v__32963_0, v__32953[(v_l_id_32949 + (v_MWidthC_1 * v_w_id_32948))]); \n      }\n      int v_tmp_33010 = 0; \n      v__32966 = v_tmp_33010; \n      /* reduce_seq */\n      for (int v_i_32950 = 0; v_i_32950 < v_MWidthC_1; v_i_32950 = (1 + v_i_32950)) {\n        v__32966 = bool_or(v__32966, v__32965[(v_i_32950 + (v_MWidthC_1 * v_w_id_32948))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_32951 = 0; \n        v__32971[v_w_id_32948] = doubleAndOr(v__32966, v__32956, v__32955[v_w_id_32948], v__32957); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_32948 = atomic_inc(v_work_idx_2249); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__32952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32953",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32954",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32955",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32956",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32957",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32959",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__32965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__32971",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}