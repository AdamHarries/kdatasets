{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46293, const global int* restrict v__46294, const global int* restrict v__46295, const global int* restrict v__46296, int v__46297, int v__46298, global int* v__46316, global int* v__46300, local int* v__46311, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46302; \n  int v__46304; \n  int v__33398; \n  /* Private Memory */\n  int v__46306_0;\n  \n  int v__46308_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3501 = v__46300; \n    local int v_w_id_46286; \n    if (get_local_id(0) == 0) {\n      v_w_id_46286 = atomic_inc(v_work_idx_3501); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_46286 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3499; \n        v_work_idx_3499 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_46287 = atomic_inc(&(v_work_idx_3499)); \n        while((v_l_id_46287 < v_MWidthC_1)){\n          int v_tmp_46367 = 0; \n          v__46302 = v_tmp_46367; \n          /* reduce_seq */\n          for (int v_i_46288 = 0; v_i_46288 < 64; v_i_46288 = (1 + v_i_46288)) {\n            int v_tmp_46368 = 0; \n            v__46304 = v_tmp_46368; \n            int v_index_46369 = v__46293[(v_l_id_46287 + (64 * v_MWidthC_1 * v_w_id_46286) + (v_MWidthC_1 * v_i_46288))]; \n            if (v_index_46369 < 0) {\n              v__46306_0 = v__46304; \n            } else {\n              if (v_index_46369 >= v_VLength_3) {\n                v__46306_0 = v__46304; \n              } else {\n                v__46306_0 = v__46295[v_index_46369]; \n              }\n            }\n            v__46308_0 = bool_and(v__46306_0, v__46294[(v_l_id_46287 + (64 * v_MWidthC_1 * v_w_id_46286) + (v_MWidthC_1 * v_i_46288))]); \n            v__46302 = bool_or(v__46308_0, v__46302); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46289 = 0; \n            v__46311[v_l_id_46287] = id(v__46302); \n          }\n          /* end map_seq */\n          v_l_id_46287 = atomic_inc(&(v_work_idx_3499)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3494; \n        v_work_idx_3494 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_46290 = atomic_inc(&(v_work_idx_3494)); \n        while((v_l_id_46290 < 1)){\n          int v_tmp_46372 = 0; \n          v__33398 = v_tmp_46372; \n          /* reduce_seq */\n          for (int v_i_46291 = 0; v_i_46291 < v_MWidthC_1; v_i_46291 = (1 + v_i_46291)) {\n            v__33398 = bool_or(v__33398, v__46311[(v_i_46291 + (v_MWidthC_1 * v_l_id_46290))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46292 = 0; \n            v__46316[v_w_id_46286] = doubleAndOr(v__33398, v__46297, v__46296[v_w_id_46286], v__46298); \n          }\n          /* end map_seq */\n          v_l_id_46290 = atomic_inc(&(v_work_idx_3494)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_46286 = atomic_inc(v_work_idx_3501); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__46293",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46294",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46295",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46297",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46298",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46300",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46316",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46311",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}