{
  "name" : "awrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45683, const global int* restrict v__45684, const global int* restrict v__45685, const global int* restrict v__45686, int v__45687, int v__45688, global int* v__45702, global int* v__45690, global int* v__45696, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45692; \n  int v__45697; \n  /* Private Memory */\n  int v__45694_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3433 = v__45690; \n    local int v_w_id_45678; \n    if (get_local_id(0) == 0) {\n      v_w_id_45678 = atomic_inc(v_work_idx_3433); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45678 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3431; \n        v_work_idx_3431 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_45679 = atomic_inc(&(v_work_idx_3431)); \n        while((v_l_id_45679 < 64)){\n          /* map_seq */\n          for (int v_i_45680 = 0; v_i_45680 < v_MWidthC_1; v_i_45680 = (1 + v_i_45680)) {\n            int v_tmp_45740 = 0; \n            v__45692 = v_tmp_45740; \n            int v_index_45741 = v__45683[(v_i_45680 + (64 * v_MWidthC_1 * v_w_id_45678) + (v_MWidthC_1 * v_l_id_45679))]; \n            if (v_index_45741 < 0) {\n              v__45694_0 = v__45692; \n            } else {\n              if (v_index_45741 >= v_VLength_3) {\n                v__45694_0 = v__45692; \n              } else {\n                v__45694_0 = v__45685[v_index_45741]; \n              }\n            }\n            v__45696[(v_i_45680 + (64 * v_MWidthC_1 * v_w_id_45678) + (v_MWidthC_1 * v_l_id_45679))] = bool_and(v__45694_0, v__45684[(v_i_45680 + (64 * v_MWidthC_1 * v_w_id_45678) + (v_MWidthC_1 * v_l_id_45679))]); \n          }\n          /* end map_seq */\n          int v_tmp_45742 = 0; \n          v__45697 = v_tmp_45742; \n          /* reduce_seq */\n          for (int v_i_45681 = 0; v_i_45681 < v_MWidthC_1; v_i_45681 = (1 + v_i_45681)) {\n            v__45697 = bool_or(v__45697, v__45696[(v_i_45681 + (64 * v_MWidthC_1 * v_w_id_45678) + (v_MWidthC_1 * v_l_id_45679))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_45682 = 0; \n            v__45702[(v_l_id_45679 + (64 * v_w_id_45678))] = doubleAndOr(v__45697, v__45687, v__45686[(v_l_id_45679 + (64 * v_w_id_45678))], v__45688); \n          }\n          /* end map_seq */\n          v_l_id_45679 = atomic_inc(&(v_work_idx_3431)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45678 = atomic_inc(v_work_idx_3433); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__45683",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45684",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45685",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45686",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__45687",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45688",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45690",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__45696",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__45702",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}