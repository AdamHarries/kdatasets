{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38388, const global int* restrict v__38389, const global int* restrict v__38390, const global int* restrict v__38391, int v__38392, int v__38393, global int* v__38411, global int* v__38395, global int* v__38401, local int* v__38406, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38397; \n  int v__38402; \n  int v__33398; \n  /* Private Memory */\n  int v__38399_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2752 = v__38395; \n    local int v_w_id_38380; \n    if (get_local_id(0) == 0) {\n      v_w_id_38380 = atomic_inc(v_work_idx_2752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38380 < v_MHeight_2)){\n      for (int v_l_id_38381 = get_local_id(0); v_l_id_38381 < v_MWidthC_1; v_l_id_38381 = (v_l_id_38381 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_38382 = 0; v_i_38382 < 16; v_i_38382 = (1 + v_i_38382)) {\n          int v_tmp_38474 = 0; \n          v__38397 = v_tmp_38474; \n          int v_index_38475 = v__38388[(v_l_id_38381 + (16 * v_MWidthC_1 * v_w_id_38380) + (v_MWidthC_1 * v_i_38382))]; \n          if (v_index_38475 < 0) {\n            v__38399_0 = v__38397; \n          } else {\n            if (v_index_38475 >= v_VLength_3) {\n              v__38399_0 = v__38397; \n            } else {\n              v__38399_0 = v__38390[v_index_38475]; \n            }\n          }\n          v__38401[(v_i_38382 + (16 * v_MWidthC_1 * v_w_id_38380) + (16 * v_l_id_38381))] = bool_and(v__38399_0, v__38389[(v_l_id_38381 + (16 * v_MWidthC_1 * v_w_id_38380) + (v_MWidthC_1 * v_i_38382))]); \n        }\n        /* end map_seq */\n        int v_tmp_38476 = 0; \n        v__38402 = v_tmp_38476; \n        /* reduce_seq */\n        for (int v_i_38383 = 0; v_i_38383 < 16; v_i_38383 = (1 + v_i_38383)) {\n          v__38402 = bool_or(v__38402, v__38401[(v_i_38383 + (16 * v_MWidthC_1 * v_w_id_38380) + (16 * v_l_id_38381))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38384 = 0; \n          v__38406[v_l_id_38381] = id(v__38402); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_38385 = get_local_id(0); \n        int v_tmp_38479 = 0; \n        v__33398 = v_tmp_38479; \n        /* reduce_seq */\n        for (int v_i_38386 = 0; v_i_38386 < v_MWidthC_1; v_i_38386 = (1 + v_i_38386)) {\n          v__33398 = bool_or(v__33398, v__38406[(v_i_38386 + (v_MWidthC_1 * v_l_id_38385))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38387 = 0; \n          v__38411[v_w_id_38380] = doubleAndOr(v__33398, v__38392, v__38391[v_w_id_38380], v__38393); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38380 = atomic_inc(v_work_idx_2752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__38388",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38389",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38390",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38392",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38393",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38395",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__38401",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__38411",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38406",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}