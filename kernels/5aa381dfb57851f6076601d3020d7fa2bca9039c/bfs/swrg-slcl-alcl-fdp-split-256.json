{
  "name" : "swrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50477, const global int* restrict v__50478, const global int* restrict v__50479, const global int* restrict v__50480, int v__50481, int v__50482, global int* v__50499, local int* v__50494, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50485; \n  int v__50487; \n  int v__33398; \n  /* Private Memory */\n  int v__50489_0;\n  \n  int v__50491_0;\n  \n  for (int v_wg_id_50470 = get_group_id(0); v_wg_id_50470 < v_MHeight_2; v_wg_id_50470 = (v_wg_id_50470 + get_num_groups(0))) {\n    for (int v_l_id_50471 = get_local_id(0); v_l_id_50471 < v_MWidthC_1; v_l_id_50471 = (v_l_id_50471 + get_local_size(0))) {\n      int v_tmp_50560 = 0; \n      v__50485 = v_tmp_50560; \n      /* reduce_seq */\n      for (int v_i_50472 = 0; v_i_50472 < 256; v_i_50472 = (1 + v_i_50472)) {\n        int v_tmp_50561 = 0; \n        v__50487 = v_tmp_50561; \n        int v_index_50562 = v__50477[(v_l_id_50471 + (256 * v_MWidthC_1 * v_wg_id_50470) + (v_MWidthC_1 * v_i_50472))]; \n        if (v_index_50562 < 0) {\n          v__50489_0 = v__50487; \n        } else {\n          if (v_index_50562 >= v_VLength_3) {\n            v__50489_0 = v__50487; \n          } else {\n            v__50489_0 = v__50479[v_index_50562]; \n          }\n        }\n        v__50491_0 = bool_and(v__50489_0, v__50478[(v_l_id_50471 + (256 * v_MWidthC_1 * v_wg_id_50470) + (v_MWidthC_1 * v_i_50472))]); \n        v__50485 = bool_or(v__50491_0, v__50485); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_50473 = 0; \n        v__50494[v_l_id_50471] = id(v__50485); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3879; \n      v_work_idx_3879 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_50474 = atomic_inc(&(v_work_idx_3879)); \n      while((v_l_id_50474 < 1)){\n        int v_tmp_50565 = 0; \n        v__33398 = v_tmp_50565; \n        /* reduce_seq */\n        for (int v_i_50475 = 0; v_i_50475 < v_MWidthC_1; v_i_50475 = (1 + v_i_50475)) {\n          v__33398 = bool_or(v__33398, v__50494[(v_i_50475 + (v_MWidthC_1 * v_l_id_50474))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50476 = 0; \n          v__50499[v_wg_id_50470] = doubleAndOr(v__33398, v__50481, v__50480[v_wg_id_50470], v__50482); \n        }\n        /* end map_seq */\n        v_l_id_50474 = atomic_inc(&(v_work_idx_3879)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__50477",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50478",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50479",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50481",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50482",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__50499",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__50494",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}