{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__47769, const global int* restrict v__47770, const global int* restrict v__47771, const global int* restrict v__47772, int v__47773, int v__47774, global int* v__47793, local int* v__47788, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47777; \n  int v__47779; \n  int v__33398; \n  /* Private Memory */\n  int v__47781_0;\n  \n  int v__47783_0;\n  \n  int v__47787_0;\n  \n  for (int v_wg_id_47762 = get_group_id(0); v_wg_id_47762 < v_MHeight_2; v_wg_id_47762 = (v_wg_id_47762 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3627; \n      v_work_idx_3627 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_47763 = atomic_inc(&(v_work_idx_3627)); \n      while((v_l_id_47763 < v_MWidthC_1)){\n        int v_tmp_47853 = 0; \n        v__47777 = v_tmp_47853; \n        /* reduce_while_seq */\n        for (int v_i_47764 = 0; v_i_47764 < 128; v_i_47764 = (1 + v_i_47764)) {\n          v__47787_0 = check(v__47777, v__47769[(v_l_id_47763 + (128 * v_MWidthC_1 * v_wg_id_47762) + (v_MWidthC_1 * v_i_47764))]); \n          if (v__47787_0) {\n          } else {\n            break;\n          }\n          int v_tmp_47854 = 0; \n          v__47779 = v_tmp_47854; \n          int v_index_47855 = v__47769[(v_l_id_47763 + (128 * v_MWidthC_1 * v_wg_id_47762) + (v_MWidthC_1 * v_i_47764))]; \n          if (v_index_47855 < 0) {\n            v__47781_0 = v__47779; \n          } else {\n            if (v_index_47855 >= v_VLength_3) {\n              v__47781_0 = v__47779; \n            } else {\n              v__47781_0 = v__47771[v_index_47855]; \n            }\n          }\n          v__47783_0 = bool_and(v__47781_0, v__47770[(v_l_id_47763 + (128 * v_MWidthC_1 * v_wg_id_47762) + (v_MWidthC_1 * v_i_47764))]); \n          v__47777 = bool_or(v__47783_0, v__47777); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47765 = 0; \n          v__47788[v_l_id_47763] = id(v__47777); \n        }\n        /* end map_seq */\n        v_l_id_47763 = atomic_inc(&(v_work_idx_3627)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_47766 = get_local_id(0); \n      int v_tmp_47858 = 0; \n      v__33398 = v_tmp_47858; \n      /* reduce_seq */\n      for (int v_i_47767 = 0; v_i_47767 < v_MWidthC_1; v_i_47767 = (1 + v_i_47767)) {\n        v__33398 = bool_or(v__33398, v__47788[(v_i_47767 + (v_MWidthC_1 * v_l_id_47766))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_47768 = 0; \n        v__47793[v_wg_id_47762] = doubleAndOr(v__33398, v__47773, v__47772[v_wg_id_47762], v__47774); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47769",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47770",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47771",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47773",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47774",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__47793",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47788",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}