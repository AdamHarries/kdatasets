{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47350, const global int* restrict v__47351, const global int* restrict v__47352, const global int* restrict v__47353, int v__47354, int v__47355, global int* v__47368, global int* v__47362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47358; \n  int v__47363; \n  /* Private Memory */\n  int v__47360_0;\n  \n  for (int v_wg_id_47345 = get_group_id(0); v_wg_id_47345 < v_MHeight_2; v_wg_id_47345 = (v_wg_id_47345 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3587; \n      v_work_idx_3587 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_47346 = atomic_inc(&(v_work_idx_3587)); \n      while((v_l_id_47346 < 128)){\n        /* map_seq */\n        for (int v_i_47347 = 0; v_i_47347 < v_MWidthC_1; v_i_47347 = (1 + v_i_47347)) {\n          int v_tmp_47408 = 0; \n          v__47358 = v_tmp_47408; \n          int v_index_47409 = v__47350[(v_i_47347 + (128 * v_MWidthC_1 * v_wg_id_47345) + (v_MWidthC_1 * v_l_id_47346))]; \n          if (v_index_47409 < 0) {\n            v__47360_0 = v__47358; \n          } else {\n            if (v_index_47409 >= v_VLength_3) {\n              v__47360_0 = v__47358; \n            } else {\n              v__47360_0 = v__47352[v_index_47409]; \n            }\n          }\n          v__47362[(v_i_47347 + (128 * v_MWidthC_1 * v_wg_id_47345) + (v_MWidthC_1 * v_l_id_47346))] = bool_and(v__47360_0, v__47351[(v_i_47347 + (128 * v_MWidthC_1 * v_wg_id_47345) + (v_MWidthC_1 * v_l_id_47346))]); \n        }\n        /* end map_seq */\n        int v_tmp_47410 = 0; \n        v__47363 = v_tmp_47410; \n        /* reduce_seq */\n        for (int v_i_47348 = 0; v_i_47348 < v_MWidthC_1; v_i_47348 = (1 + v_i_47348)) {\n          v__47363 = bool_or(v__47363, v__47362[(v_i_47348 + (128 * v_MWidthC_1 * v_wg_id_47345) + (v_MWidthC_1 * v_l_id_47346))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47349 = 0; \n          v__47368[(v_l_id_47346 + (128 * v_wg_id_47345))] = doubleAndOr(v__47363, v__47354, v__47353[(v_l_id_47346 + (128 * v_wg_id_47345))], v__47355); \n        }\n        /* end map_seq */\n        v_l_id_47346 = atomic_inc(&(v_work_idx_3587)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47350",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47351",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47352",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47353",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__47354",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47355",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47362",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__47368",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}