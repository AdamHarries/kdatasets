{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52571, const global int* restrict v__52572, const global int* restrict v__52573, const global int* restrict v__52574, int v__52575, int v__52576, global int* v__52594, global int* v__52578, global int* v__52584, local int* v__52589, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52580; \n  int v__52585; \n  int v__33398; \n  /* Private Memory */\n  int v__52582_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4082 = v__52578; \n    local int v_w_id_52563; \n    if (get_local_id(0) == 0) {\n      v_w_id_52563 = atomic_inc(v_work_idx_4082); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52563 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4080; \n        v_work_idx_4080 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_52564 = atomic_inc(&(v_work_idx_4080)); \n        while((v_l_id_52564 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_52565 = 0; v_i_52565 < 256; v_i_52565 = (1 + v_i_52565)) {\n            int v_tmp_52649 = 0; \n            v__52580 = v_tmp_52649; \n            int v_index_52650 = v__52571[(v_l_id_52564 + (256 * v_MWidthC_1 * v_w_id_52563) + (v_MWidthC_1 * v_i_52565))]; \n            if (v_index_52650 < 0) {\n              v__52582_0 = v__52580; \n            } else {\n              if (v_index_52650 >= v_VLength_3) {\n                v__52582_0 = v__52580; \n              } else {\n                v__52582_0 = v__52573[v_index_52650]; \n              }\n            }\n            v__52584[(v_i_52565 + (256 * v_MWidthC_1 * v_w_id_52563) + (256 * v_l_id_52564))] = bool_and(v__52582_0, v__52572[(v_l_id_52564 + (256 * v_MWidthC_1 * v_w_id_52563) + (v_MWidthC_1 * v_i_52565))]); \n          }\n          /* end map_seq */\n          int v_tmp_52651 = 0; \n          v__52585 = v_tmp_52651; \n          /* reduce_seq */\n          for (int v_i_52566 = 0; v_i_52566 < 256; v_i_52566 = (1 + v_i_52566)) {\n            v__52585 = bool_or(v__52585, v__52584[(v_i_52566 + (256 * v_MWidthC_1 * v_w_id_52563) + (256 * v_l_id_52564))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52567 = 0; \n            v__52589[v_l_id_52564] = id(v__52585); \n          }\n          /* end map_seq */\n          v_l_id_52564 = atomic_inc(&(v_work_idx_4080)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52568 = get_local_id(0); \n        int v_tmp_52654 = 0; \n        v__33398 = v_tmp_52654; \n        /* reduce_seq */\n        for (int v_i_52569 = 0; v_i_52569 < v_MWidthC_1; v_i_52569 = (1 + v_i_52569)) {\n          v__33398 = bool_or(v__33398, v__52589[(v_i_52569 + (v_MWidthC_1 * v_l_id_52568))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52570 = 0; \n          v__52594[v_w_id_52563] = doubleAndOr(v__33398, v__52575, v__52574[v_w_id_52563], v__52576); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52563 = atomic_inc(v_work_idx_4082); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52571",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52572",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52573",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52575",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52576",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52578",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__52584",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__52594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52589",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}