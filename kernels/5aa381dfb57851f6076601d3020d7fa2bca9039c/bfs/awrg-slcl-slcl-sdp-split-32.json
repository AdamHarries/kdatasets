{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41722, const global int* restrict v__41723, const global int* restrict v__41724, const global int* restrict v__41725, int v__41726, int v__41727, global int* v__41745, global int* v__41729, global int* v__41735, local int* v__41740, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41731; \n  int v__41736; \n  int v__33398; \n  /* Private Memory */\n  int v__41733_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3064 = v__41729; \n    local int v_w_id_41714; \n    if (get_local_id(0) == 0) {\n      v_w_id_41714 = atomic_inc(v_work_idx_3064); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_41714 < v_MHeight_2)){\n      for (int v_l_id_41715 = get_local_id(0); v_l_id_41715 < v_MWidthC_1; v_l_id_41715 = (v_l_id_41715 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_41716 = 0; v_i_41716 < 32; v_i_41716 = (1 + v_i_41716)) {\n          int v_tmp_41808 = 0; \n          v__41731 = v_tmp_41808; \n          int v_index_41809 = v__41722[(v_l_id_41715 + (32 * v_MWidthC_1 * v_w_id_41714) + (v_MWidthC_1 * v_i_41716))]; \n          if (v_index_41809 < 0) {\n            v__41733_0 = v__41731; \n          } else {\n            if (v_index_41809 >= v_VLength_3) {\n              v__41733_0 = v__41731; \n            } else {\n              v__41733_0 = v__41724[v_index_41809]; \n            }\n          }\n          v__41735[(v_i_41716 + (32 * v_MWidthC_1 * v_w_id_41714) + (32 * v_l_id_41715))] = bool_and(v__41733_0, v__41723[(v_l_id_41715 + (32 * v_MWidthC_1 * v_w_id_41714) + (v_MWidthC_1 * v_i_41716))]); \n        }\n        /* end map_seq */\n        int v_tmp_41810 = 0; \n        v__41736 = v_tmp_41810; \n        /* reduce_seq */\n        for (int v_i_41717 = 0; v_i_41717 < 32; v_i_41717 = (1 + v_i_41717)) {\n          v__41736 = bool_or(v__41736, v__41735[(v_i_41717 + (32 * v_MWidthC_1 * v_w_id_41714) + (32 * v_l_id_41715))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41718 = 0; \n          v__41740[v_l_id_41715] = id(v__41736); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_41719 = get_local_id(0); \n        int v_tmp_41813 = 0; \n        v__33398 = v_tmp_41813; \n        /* reduce_seq */\n        for (int v_i_41720 = 0; v_i_41720 < v_MWidthC_1; v_i_41720 = (1 + v_i_41720)) {\n          v__33398 = bool_or(v__33398, v__41740[(v_i_41720 + (v_MWidthC_1 * v_l_id_41719))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41721 = 0; \n          v__41745[v_w_id_41714] = doubleAndOr(v__33398, v__41726, v__41725[v_w_id_41714], v__41727); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_41714 = atomic_inc(v_work_idx_3064); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41722",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41723",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41724",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41726",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41727",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41729",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__41735",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41740",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}