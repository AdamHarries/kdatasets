{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41205, const global int* restrict v__41206, const global int* restrict v__41207, const global int* restrict v__41208, int v__41209, int v__41210, global int* v__41227, global int* v__41217, local int* v__41222, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41213; \n  int v__41218; \n  int v__33398; \n  /* Private Memory */\n  int v__41215_0;\n  \n  for (int v_wg_id_41197 = get_group_id(0); v_wg_id_41197 < v_MHeight_2; v_wg_id_41197 = (v_wg_id_41197 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3014; \n      v_work_idx_3014 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_41198 = atomic_inc(&(v_work_idx_3014)); \n      while((v_l_id_41198 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_41199 = 0; v_i_41199 < 32; v_i_41199 = (1 + v_i_41199)) {\n          int v_tmp_41280 = 0; \n          v__41213 = v_tmp_41280; \n          int v_index_41281 = v__41205[(v_l_id_41198 + (32 * v_MWidthC_1 * v_wg_id_41197) + (v_MWidthC_1 * v_i_41199))]; \n          if (v_index_41281 < 0) {\n            v__41215_0 = v__41213; \n          } else {\n            if (v_index_41281 >= v_VLength_3) {\n              v__41215_0 = v__41213; \n            } else {\n              v__41215_0 = v__41207[v_index_41281]; \n            }\n          }\n          v__41217[(v_i_41199 + (32 * v_MWidthC_1 * v_wg_id_41197) + (32 * v_l_id_41198))] = bool_and(v__41215_0, v__41206[(v_l_id_41198 + (32 * v_MWidthC_1 * v_wg_id_41197) + (v_MWidthC_1 * v_i_41199))]); \n        }\n        /* end map_seq */\n        int v_tmp_41282 = 0; \n        v__41218 = v_tmp_41282; \n        /* reduce_seq */\n        for (int v_i_41200 = 0; v_i_41200 < 32; v_i_41200 = (1 + v_i_41200)) {\n          v__41218 = bool_or(v__41218, v__41217[(v_i_41200 + (32 * v_MWidthC_1 * v_wg_id_41197) + (32 * v_l_id_41198))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41201 = 0; \n          v__41222[v_l_id_41198] = id(v__41218); \n        }\n        /* end map_seq */\n        v_l_id_41198 = atomic_inc(&(v_work_idx_3014)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3008; \n      v_work_idx_3008 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_41202 = atomic_inc(&(v_work_idx_3008)); \n      while((v_l_id_41202 < 1)){\n        int v_tmp_41285 = 0; \n        v__33398 = v_tmp_41285; \n        /* reduce_seq */\n        for (int v_i_41203 = 0; v_i_41203 < v_MWidthC_1; v_i_41203 = (1 + v_i_41203)) {\n          v__33398 = bool_or(v__33398, v__41222[(v_i_41203 + (v_MWidthC_1 * v_l_id_41202))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41204 = 0; \n          v__41227[v_wg_id_41197] = doubleAndOr(v__33398, v__41209, v__41208[v_wg_id_41197], v__41210); \n        }\n        /* end map_seq */\n        v_l_id_41202 = atomic_inc(&(v_work_idx_3008)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41205",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41206",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41217",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41222",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}