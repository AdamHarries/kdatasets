{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37348, const global int* restrict v__37349, const global int* restrict v__37350, const global int* restrict v__37351, int v__37352, int v__37353, global int* v__37366, global int* v__37360, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37356; \n  int v__37361; \n  /* Private Memory */\n  int v__37358_0;\n  \n  for (int v_wg_id_37343 = get_group_id(0); v_wg_id_37343 < v_MHeight_2; v_wg_id_37343 = (v_wg_id_37343 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2651; \n      v_work_idx_2651 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37344 = atomic_inc(&(v_work_idx_2651)); \n      while((v_l_id_37344 < 16)){\n        /* map_seq */\n        for (int v_i_37345 = 0; v_i_37345 < v_MWidthC_1; v_i_37345 = (1 + v_i_37345)) {\n          int v_tmp_37406 = 0; \n          v__37356 = v_tmp_37406; \n          int v_index_37407 = v__37348[(v_i_37345 + (16 * v_MWidthC_1 * v_wg_id_37343) + (v_MWidthC_1 * v_l_id_37344))]; \n          if (v_index_37407 < 0) {\n            v__37358_0 = v__37356; \n          } else {\n            if (v_index_37407 >= v_VLength_3) {\n              v__37358_0 = v__37356; \n            } else {\n              v__37358_0 = v__37350[v_index_37407]; \n            }\n          }\n          v__37360[(v_i_37345 + (16 * v_MWidthC_1 * v_wg_id_37343) + (v_MWidthC_1 * v_l_id_37344))] = bool_and(v__37358_0, v__37349[(v_i_37345 + (16 * v_MWidthC_1 * v_wg_id_37343) + (v_MWidthC_1 * v_l_id_37344))]); \n        }\n        /* end map_seq */\n        int v_tmp_37408 = 0; \n        v__37361 = v_tmp_37408; \n        /* reduce_seq */\n        for (int v_i_37346 = 0; v_i_37346 < v_MWidthC_1; v_i_37346 = (1 + v_i_37346)) {\n          v__37361 = bool_or(v__37361, v__37360[(v_i_37346 + (16 * v_MWidthC_1 * v_wg_id_37343) + (v_MWidthC_1 * v_l_id_37344))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37347 = 0; \n          v__37366[(v_l_id_37344 + (16 * v_wg_id_37343))] = doubleAndOr(v__37361, v__37352, v__37351[(v_l_id_37344 + (16 * v_wg_id_37343))], v__37353); \n        }\n        /* end map_seq */\n        v_l_id_37344 = atomic_inc(&(v_work_idx_2651)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37348",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37349",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37350",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37351",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__37352",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37353",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37360",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37366",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}