{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56295, const global int* restrict v__56296, const global int* restrict v__56297, const global int* restrict v__56298, int v__56299, int v__56300, global int* v__56318, global int* v__56302, local int* v__56313, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56304; \n  int v__56306; \n  int v__33398; \n  /* Private Memory */\n  int v__56308_0;\n  \n  int v__56310_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4437 = v__56302; \n    local int v_w_id_56288; \n    if (get_local_id(0) == 0) {\n      v_w_id_56288 = atomic_inc(v_work_idx_4437); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56288 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4435; \n        v_work_idx_4435 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_56289 = atomic_inc(&(v_work_idx_4435)); \n        while((v_l_id_56289 < v_MWidthC_1)){\n          int v_tmp_56369 = 0; \n          v__56304 = v_tmp_56369; \n          /* reduce_seq */\n          for (int v_i_56290 = 0; v_i_56290 < 512; v_i_56290 = (1 + v_i_56290)) {\n            int v_tmp_56370 = 0; \n            v__56306 = v_tmp_56370; \n            int v_index_56371 = v__56295[(v_l_id_56289 + (512 * v_MWidthC_1 * v_w_id_56288) + (v_MWidthC_1 * v_i_56290))]; \n            if (v_index_56371 < 0) {\n              v__56308_0 = v__56306; \n            } else {\n              if (v_index_56371 >= v_VLength_3) {\n                v__56308_0 = v__56306; \n              } else {\n                v__56308_0 = v__56297[v_index_56371]; \n              }\n            }\n            v__56310_0 = bool_and(v__56308_0, v__56296[(v_l_id_56289 + (512 * v_MWidthC_1 * v_w_id_56288) + (v_MWidthC_1 * v_i_56290))]); \n            v__56304 = bool_or(v__56310_0, v__56304); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56291 = 0; \n            v__56313[v_l_id_56289] = id(v__56304); \n          }\n          /* end map_seq */\n          v_l_id_56289 = atomic_inc(&(v_work_idx_4435)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4430; \n        v_work_idx_4430 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_56292 = atomic_inc(&(v_work_idx_4430)); \n        while((v_l_id_56292 < 1)){\n          int v_tmp_56374 = 0; \n          v__33398 = v_tmp_56374; \n          /* reduce_seq */\n          for (int v_i_56293 = 0; v_i_56293 < v_MWidthC_1; v_i_56293 = (1 + v_i_56293)) {\n            v__33398 = bool_or(v__33398, v__56313[(v_i_56293 + (v_MWidthC_1 * v_l_id_56292))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56294 = 0; \n            v__56318[v_w_id_56288] = doubleAndOr(v__33398, v__56299, v__56298[v_w_id_56288], v__56300); \n          }\n          /* end map_seq */\n          v_l_id_56292 = atomic_inc(&(v_work_idx_4430)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56288 = atomic_inc(v_work_idx_4437); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__56295",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56296",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56297",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56298",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56299",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56300",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56302",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__56313",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}