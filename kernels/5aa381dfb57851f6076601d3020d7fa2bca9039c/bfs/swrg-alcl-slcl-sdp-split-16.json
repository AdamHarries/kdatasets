{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37571, const global int* restrict v__37572, const global int* restrict v__37573, const global int* restrict v__37574, int v__37575, int v__37576, global int* v__37593, global int* v__37583, local int* v__37588, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37579; \n  int v__37584; \n  int v__33398; \n  /* Private Memory */\n  int v__37581_0;\n  \n  for (int v_wg_id_37563 = get_group_id(0); v_wg_id_37563 < v_MHeight_2; v_wg_id_37563 = (v_wg_id_37563 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2673; \n      v_work_idx_2673 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37564 = atomic_inc(&(v_work_idx_2673)); \n      while((v_l_id_37564 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_37565 = 0; v_i_37565 < 16; v_i_37565 = (1 + v_i_37565)) {\n          int v_tmp_37650 = 0; \n          v__37579 = v_tmp_37650; \n          int v_index_37651 = v__37571[(v_l_id_37564 + (16 * v_MWidthC_1 * v_wg_id_37563) + (v_MWidthC_1 * v_i_37565))]; \n          if (v_index_37651 < 0) {\n            v__37581_0 = v__37579; \n          } else {\n            if (v_index_37651 >= v_VLength_3) {\n              v__37581_0 = v__37579; \n            } else {\n              v__37581_0 = v__37573[v_index_37651]; \n            }\n          }\n          v__37583[(v_i_37565 + (16 * v_MWidthC_1 * v_wg_id_37563) + (16 * v_l_id_37564))] = bool_and(v__37581_0, v__37572[(v_l_id_37564 + (16 * v_MWidthC_1 * v_wg_id_37563) + (v_MWidthC_1 * v_i_37565))]); \n        }\n        /* end map_seq */\n        int v_tmp_37652 = 0; \n        v__37584 = v_tmp_37652; \n        /* reduce_seq */\n        for (int v_i_37566 = 0; v_i_37566 < 16; v_i_37566 = (1 + v_i_37566)) {\n          v__37584 = bool_or(v__37584, v__37583[(v_i_37566 + (16 * v_MWidthC_1 * v_wg_id_37563) + (16 * v_l_id_37564))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37567 = 0; \n          v__37588[v_l_id_37564] = id(v__37584); \n        }\n        /* end map_seq */\n        v_l_id_37564 = atomic_inc(&(v_work_idx_2673)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_37568 = get_local_id(0); \n      int v_tmp_37655 = 0; \n      v__33398 = v_tmp_37655; \n      /* reduce_seq */\n      for (int v_i_37569 = 0; v_i_37569 < v_MWidthC_1; v_i_37569 = (1 + v_i_37569)) {\n        v__33398 = bool_or(v__33398, v__37588[(v_i_37569 + (v_MWidthC_1 * v_l_id_37568))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37570 = 0; \n        v__37593[v_wg_id_37563] = doubleAndOr(v__33398, v__37575, v__37574[v_wg_id_37563], v__37576); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37571",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37572",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37573",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37575",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37576",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37583",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37588",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}