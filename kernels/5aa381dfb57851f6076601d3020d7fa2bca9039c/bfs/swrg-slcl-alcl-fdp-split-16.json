{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37141, const global int* restrict v__37142, const global int* restrict v__37143, const global int* restrict v__37144, int v__37145, int v__37146, global int* v__37163, local int* v__37158, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37149; \n  int v__37151; \n  int v__33398; \n  /* Private Memory */\n  int v__37153_0;\n  \n  int v__37155_0;\n  \n  for (int v_wg_id_37134 = get_group_id(0); v_wg_id_37134 < v_MHeight_2; v_wg_id_37134 = (v_wg_id_37134 + get_num_groups(0))) {\n    for (int v_l_id_37135 = get_local_id(0); v_l_id_37135 < v_MWidthC_1; v_l_id_37135 = (v_l_id_37135 + get_local_size(0))) {\n      int v_tmp_37224 = 0; \n      v__37149 = v_tmp_37224; \n      /* reduce_seq */\n      for (int v_i_37136 = 0; v_i_37136 < 16; v_i_37136 = (1 + v_i_37136)) {\n        int v_tmp_37225 = 0; \n        v__37151 = v_tmp_37225; \n        int v_index_37226 = v__37141[(v_l_id_37135 + (16 * v_MWidthC_1 * v_wg_id_37134) + (v_MWidthC_1 * v_i_37136))]; \n        if (v_index_37226 < 0) {\n          v__37153_0 = v__37151; \n        } else {\n          if (v_index_37226 >= v_VLength_3) {\n            v__37153_0 = v__37151; \n          } else {\n            v__37153_0 = v__37143[v_index_37226]; \n          }\n        }\n        v__37155_0 = bool_and(v__37153_0, v__37142[(v_l_id_37135 + (16 * v_MWidthC_1 * v_wg_id_37134) + (v_MWidthC_1 * v_i_37136))]); \n        v__37149 = bool_or(v__37155_0, v__37149); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37137 = 0; \n        v__37158[v_l_id_37135] = id(v__37149); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2631; \n      v_work_idx_2631 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37138 = atomic_inc(&(v_work_idx_2631)); \n      while((v_l_id_37138 < 1)){\n        int v_tmp_37229 = 0; \n        v__33398 = v_tmp_37229; \n        /* reduce_seq */\n        for (int v_i_37139 = 0; v_i_37139 < v_MWidthC_1; v_i_37139 = (1 + v_i_37139)) {\n          v__33398 = bool_or(v__33398, v__37158[(v_i_37139 + (v_MWidthC_1 * v_l_id_37138))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37140 = 0; \n          v__37163[v_wg_id_37134] = doubleAndOr(v__33398, v__37145, v__37144[v_wg_id_37134], v__37146); \n        }\n        /* end map_seq */\n        v_l_id_37138 = atomic_inc(&(v_work_idx_2631)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__37141",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37142",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37143",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37144",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37145",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37146",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__37163",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37158",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}