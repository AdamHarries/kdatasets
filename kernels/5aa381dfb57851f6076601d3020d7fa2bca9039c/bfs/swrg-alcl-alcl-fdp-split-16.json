{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37965, const global int* restrict v__37966, const global int* restrict v__37967, const global int* restrict v__37968, int v__37969, int v__37970, global int* v__37987, local int* v__37982, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37973; \n  int v__37975; \n  int v__33398; \n  /* Private Memory */\n  int v__37977_0;\n  \n  int v__37979_0;\n  \n  for (int v_wg_id_37958 = get_group_id(0); v_wg_id_37958 < v_MHeight_2; v_wg_id_37958 = (v_wg_id_37958 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2712; \n      v_work_idx_2712 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37959 = atomic_inc(&(v_work_idx_2712)); \n      while((v_l_id_37959 < v_MWidthC_1)){\n        int v_tmp_38040 = 0; \n        v__37973 = v_tmp_38040; \n        /* reduce_seq */\n        for (int v_i_37960 = 0; v_i_37960 < 16; v_i_37960 = (1 + v_i_37960)) {\n          int v_tmp_38041 = 0; \n          v__37975 = v_tmp_38041; \n          int v_index_38042 = v__37965[(v_l_id_37959 + (16 * v_MWidthC_1 * v_wg_id_37958) + (v_MWidthC_1 * v_i_37960))]; \n          if (v_index_38042 < 0) {\n            v__37977_0 = v__37975; \n          } else {\n            if (v_index_38042 >= v_VLength_3) {\n              v__37977_0 = v__37975; \n            } else {\n              v__37977_0 = v__37967[v_index_38042]; \n            }\n          }\n          v__37979_0 = bool_and(v__37977_0, v__37966[(v_l_id_37959 + (16 * v_MWidthC_1 * v_wg_id_37958) + (v_MWidthC_1 * v_i_37960))]); \n          v__37973 = bool_or(v__37979_0, v__37973); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37961 = 0; \n          v__37982[v_l_id_37959] = id(v__37973); \n        }\n        /* end map_seq */\n        v_l_id_37959 = atomic_inc(&(v_work_idx_2712)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2707; \n      v_work_idx_2707 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37962 = atomic_inc(&(v_work_idx_2707)); \n      while((v_l_id_37962 < 1)){\n        int v_tmp_38045 = 0; \n        v__33398 = v_tmp_38045; \n        /* reduce_seq */\n        for (int v_i_37963 = 0; v_i_37963 < v_MWidthC_1; v_i_37963 = (1 + v_i_37963)) {\n          v__33398 = bool_or(v__33398, v__37982[(v_i_37963 + (v_MWidthC_1 * v_l_id_37962))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37964 = 0; \n          v__37987[v_wg_id_37958] = doubleAndOr(v__33398, v__37969, v__37968[v_wg_id_37958], v__37970); \n        }\n        /* end map_seq */\n        v_l_id_37962 = atomic_inc(&(v_work_idx_2707)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__37965",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37966",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37967",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37969",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37970",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__37987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37982",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}