{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54541, const global int* restrict v__54542, const global int* restrict v__54543, const global int* restrict v__54544, int v__54545, int v__54546, global int* v__54563, global int* v__54553, local int* v__54558, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54549; \n  int v__54554; \n  int v__33398; \n  /* Private Memory */\n  int v__54551_0;\n  \n  for (int v_wg_id_54533 = get_group_id(0); v_wg_id_54533 < v_MHeight_2; v_wg_id_54533 = (v_wg_id_54533 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4262; \n      v_work_idx_4262 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_54534 = atomic_inc(&(v_work_idx_4262)); \n      while((v_l_id_54534 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_54535 = 0; v_i_54535 < 512; v_i_54535 = (1 + v_i_54535)) {\n          int v_tmp_54616 = 0; \n          v__54549 = v_tmp_54616; \n          int v_index_54617 = v__54541[(v_l_id_54534 + (512 * v_MWidthC_1 * v_wg_id_54533) + (v_MWidthC_1 * v_i_54535))]; \n          if (v_index_54617 < 0) {\n            v__54551_0 = v__54549; \n          } else {\n            if (v_index_54617 >= v_VLength_3) {\n              v__54551_0 = v__54549; \n            } else {\n              v__54551_0 = v__54543[v_index_54617]; \n            }\n          }\n          v__54553[(v_i_54535 + (512 * v_MWidthC_1 * v_wg_id_54533) + (512 * v_l_id_54534))] = bool_and(v__54551_0, v__54542[(v_l_id_54534 + (512 * v_MWidthC_1 * v_wg_id_54533) + (v_MWidthC_1 * v_i_54535))]); \n        }\n        /* end map_seq */\n        int v_tmp_54618 = 0; \n        v__54554 = v_tmp_54618; \n        /* reduce_seq */\n        for (int v_i_54536 = 0; v_i_54536 < 512; v_i_54536 = (1 + v_i_54536)) {\n          v__54554 = bool_or(v__54554, v__54553[(v_i_54536 + (512 * v_MWidthC_1 * v_wg_id_54533) + (512 * v_l_id_54534))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54537 = 0; \n          v__54558[v_l_id_54534] = id(v__54554); \n        }\n        /* end map_seq */\n        v_l_id_54534 = atomic_inc(&(v_work_idx_4262)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4256; \n      v_work_idx_4256 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_54538 = atomic_inc(&(v_work_idx_4256)); \n      while((v_l_id_54538 < 1)){\n        int v_tmp_54621 = 0; \n        v__33398 = v_tmp_54621; \n        /* reduce_seq */\n        for (int v_i_54539 = 0; v_i_54539 < v_MWidthC_1; v_i_54539 = (1 + v_i_54539)) {\n          v__33398 = bool_or(v__33398, v__54558[(v_i_54539 + (v_MWidthC_1 * v_l_id_54538))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54540 = 0; \n          v__54563[v_wg_id_54533] = doubleAndOr(v__33398, v__54545, v__54544[v_wg_id_54533], v__54546); \n        }\n        /* end map_seq */\n        v_l_id_54538 = atomic_inc(&(v_work_idx_4256)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54541",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54542",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54543",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54545",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54546",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54553",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54558",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}