{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__47245, const global int* restrict v__47246, const global int* restrict v__47247, const global int* restrict v__47248, int v__47249, int v__47250, global int* v__47269, local int* v__47264, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47253; \n  int v__47255; \n  int v__33398; \n  /* Private Memory */\n  int v__47257_0;\n  \n  int v__47259_0;\n  \n  int v__47263_0;\n  \n  for (int v_wg_id_47238 = get_group_id(0); v_wg_id_47238 < v_MHeight_2; v_wg_id_47238 = (v_wg_id_47238 + get_num_groups(0))) {\n    for (int v_l_id_47239 = get_local_id(0); v_l_id_47239 < v_MWidthC_1; v_l_id_47239 = (v_l_id_47239 + get_local_size(0))) {\n      int v_tmp_47333 = 0; \n      v__47253 = v_tmp_47333; \n      /* reduce_while_seq */\n      for (int v_i_47240 = 0; v_i_47240 < 128; v_i_47240 = (1 + v_i_47240)) {\n        v__47263_0 = check(v__47253, v__47245[(v_l_id_47239 + (128 * v_MWidthC_1 * v_wg_id_47238) + (v_MWidthC_1 * v_i_47240))]); \n        if (v__47263_0) {\n        } else {\n          break;\n        }\n        int v_tmp_47334 = 0; \n        v__47255 = v_tmp_47334; \n        int v_index_47335 = v__47245[(v_l_id_47239 + (128 * v_MWidthC_1 * v_wg_id_47238) + (v_MWidthC_1 * v_i_47240))]; \n        if (v_index_47335 < 0) {\n          v__47257_0 = v__47255; \n        } else {\n          if (v_index_47335 >= v_VLength_3) {\n            v__47257_0 = v__47255; \n          } else {\n            v__47257_0 = v__47247[v_index_47335]; \n          }\n        }\n        v__47259_0 = bool_and(v__47257_0, v__47246[(v_l_id_47239 + (128 * v_MWidthC_1 * v_wg_id_47238) + (v_MWidthC_1 * v_i_47240))]); \n        v__47253 = bool_or(v__47259_0, v__47253); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_47241 = 0; \n        v__47264[v_l_id_47239] = id(v__47253); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3576; \n      v_work_idx_3576 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_47242 = atomic_inc(&(v_work_idx_3576)); \n      while((v_l_id_47242 < 1)){\n        int v_tmp_47338 = 0; \n        v__33398 = v_tmp_47338; \n        /* reduce_seq */\n        for (int v_i_47243 = 0; v_i_47243 < v_MWidthC_1; v_i_47243 = (1 + v_i_47243)) {\n          v__33398 = bool_or(v__33398, v__47264[(v_i_47243 + (v_MWidthC_1 * v_l_id_47242))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47244 = 0; \n          v__47269[v_wg_id_47238] = doubleAndOr(v__33398, v__47249, v__47248[v_wg_id_47238], v__47250); \n        }\n        /* end map_seq */\n        v_l_id_47242 = atomic_inc(&(v_work_idx_3576)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47245",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47246",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47247",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47249",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47250",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__47269",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47264",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}