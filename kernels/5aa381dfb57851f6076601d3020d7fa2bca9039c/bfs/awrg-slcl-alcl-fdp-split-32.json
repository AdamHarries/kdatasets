{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42144, const global int* restrict v__42145, const global int* restrict v__42146, const global int* restrict v__42147, int v__42148, int v__42149, global int* v__42167, global int* v__42151, local int* v__42162, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42153; \n  int v__42155; \n  int v__33398; \n  /* Private Memory */\n  int v__42157_0;\n  \n  int v__42159_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3103 = v__42151; \n    local int v_w_id_42137; \n    if (get_local_id(0) == 0) {\n      v_w_id_42137 = atomic_inc(v_work_idx_3103); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42137 < v_MHeight_2)){\n      for (int v_l_id_42138 = get_local_id(0); v_l_id_42138 < v_MWidthC_1; v_l_id_42138 = (v_l_id_42138 + get_local_size(0))) {\n        int v_tmp_42226 = 0; \n        v__42153 = v_tmp_42226; \n        /* reduce_seq */\n        for (int v_i_42139 = 0; v_i_42139 < 32; v_i_42139 = (1 + v_i_42139)) {\n          int v_tmp_42227 = 0; \n          v__42155 = v_tmp_42227; \n          int v_index_42228 = v__42144[(v_l_id_42138 + (32 * v_MWidthC_1 * v_w_id_42137) + (v_MWidthC_1 * v_i_42139))]; \n          if (v_index_42228 < 0) {\n            v__42157_0 = v__42155; \n          } else {\n            if (v_index_42228 >= v_VLength_3) {\n              v__42157_0 = v__42155; \n            } else {\n              v__42157_0 = v__42146[v_index_42228]; \n            }\n          }\n          v__42159_0 = bool_and(v__42157_0, v__42145[(v_l_id_42138 + (32 * v_MWidthC_1 * v_w_id_42137) + (v_MWidthC_1 * v_i_42139))]); \n          v__42153 = bool_or(v__42159_0, v__42153); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42140 = 0; \n          v__42162[v_l_id_42138] = id(v__42153); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3097; \n        v_work_idx_3097 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_42141 = atomic_inc(&(v_work_idx_3097)); \n        while((v_l_id_42141 < 1)){\n          int v_tmp_42231 = 0; \n          v__33398 = v_tmp_42231; \n          /* reduce_seq */\n          for (int v_i_42142 = 0; v_i_42142 < v_MWidthC_1; v_i_42142 = (1 + v_i_42142)) {\n            v__33398 = bool_or(v__33398, v__42162[(v_i_42142 + (v_MWidthC_1 * v_l_id_42141))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42143 = 0; \n            v__42167[v_w_id_42137] = doubleAndOr(v__33398, v__42148, v__42147[v_w_id_42137], v__42149); \n          }\n          /* end map_seq */\n          v_l_id_42141 = atomic_inc(&(v_work_idx_3097)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42137 = atomic_inc(v_work_idx_3103); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__42144",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42145",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42146",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42147",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42148",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42149",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42151",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42167",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42162",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}