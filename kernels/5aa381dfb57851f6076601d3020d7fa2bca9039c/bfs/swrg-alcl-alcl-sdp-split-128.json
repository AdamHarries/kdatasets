{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47873, const global int* restrict v__47874, const global int* restrict v__47875, const global int* restrict v__47876, int v__47877, int v__47878, global int* v__47895, global int* v__47885, local int* v__47890, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47881; \n  int v__47886; \n  int v__33398; \n  /* Private Memory */\n  int v__47883_0;\n  \n  for (int v_wg_id_47865 = get_group_id(0); v_wg_id_47865 < v_MHeight_2; v_wg_id_47865 = (v_wg_id_47865 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3638; \n      v_work_idx_3638 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_47866 = atomic_inc(&(v_work_idx_3638)); \n      while((v_l_id_47866 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_47867 = 0; v_i_47867 < 128; v_i_47867 = (1 + v_i_47867)) {\n          int v_tmp_47948 = 0; \n          v__47881 = v_tmp_47948; \n          int v_index_47949 = v__47873[(v_l_id_47866 + (128 * v_MWidthC_1 * v_wg_id_47865) + (v_MWidthC_1 * v_i_47867))]; \n          if (v_index_47949 < 0) {\n            v__47883_0 = v__47881; \n          } else {\n            if (v_index_47949 >= v_VLength_3) {\n              v__47883_0 = v__47881; \n            } else {\n              v__47883_0 = v__47875[v_index_47949]; \n            }\n          }\n          v__47885[(v_i_47867 + (128 * v_MWidthC_1 * v_wg_id_47865) + (128 * v_l_id_47866))] = bool_and(v__47883_0, v__47874[(v_l_id_47866 + (128 * v_MWidthC_1 * v_wg_id_47865) + (v_MWidthC_1 * v_i_47867))]); \n        }\n        /* end map_seq */\n        int v_tmp_47950 = 0; \n        v__47886 = v_tmp_47950; \n        /* reduce_seq */\n        for (int v_i_47868 = 0; v_i_47868 < 128; v_i_47868 = (1 + v_i_47868)) {\n          v__47886 = bool_or(v__47886, v__47885[(v_i_47868 + (128 * v_MWidthC_1 * v_wg_id_47865) + (128 * v_l_id_47866))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47869 = 0; \n          v__47890[v_l_id_47866] = id(v__47886); \n        }\n        /* end map_seq */\n        v_l_id_47866 = atomic_inc(&(v_work_idx_3638)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3632; \n      v_work_idx_3632 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_47870 = atomic_inc(&(v_work_idx_3632)); \n      while((v_l_id_47870 < 1)){\n        int v_tmp_47953 = 0; \n        v__33398 = v_tmp_47953; \n        /* reduce_seq */\n        for (int v_i_47871 = 0; v_i_47871 < v_MWidthC_1; v_i_47871 = (1 + v_i_47871)) {\n          v__33398 = bool_or(v__33398, v__47890[(v_i_47871 + (v_MWidthC_1 * v_l_id_47870))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47872 = 0; \n          v__47895[v_wg_id_47865] = doubleAndOr(v__33398, v__47877, v__47876[v_wg_id_47865], v__47878); \n        }\n        /* end map_seq */\n        v_l_id_47870 = atomic_inc(&(v_work_idx_3632)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47873",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47874",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47875",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47876",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47877",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47878",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47885",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__47895",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47890",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}