{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48711, const global int* restrict v__48712, const global int* restrict v__48713, const global int* restrict v__48714, int v__48715, int v__48716, global int* v__48734, global int* v__48718, global int* v__48724, local int* v__48729, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48720; \n  int v__48725; \n  int v__33398; \n  /* Private Memory */\n  int v__48722_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3717 = v__48718; \n    local int v_w_id_48703; \n    if (get_local_id(0) == 0) {\n      v_w_id_48703 = atomic_inc(v_work_idx_3717); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48703 < v_MHeight_2)){\n      for (int v_l_id_48704 = get_local_id(0); v_l_id_48704 < v_MWidthC_1; v_l_id_48704 = (v_l_id_48704 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_48705 = 0; v_i_48705 < 128; v_i_48705 = (1 + v_i_48705)) {\n          int v_tmp_48793 = 0; \n          v__48720 = v_tmp_48793; \n          int v_index_48794 = v__48711[(v_l_id_48704 + (128 * v_MWidthC_1 * v_w_id_48703) + (v_MWidthC_1 * v_i_48705))]; \n          if (v_index_48794 < 0) {\n            v__48722_0 = v__48720; \n          } else {\n            if (v_index_48794 >= v_VLength_3) {\n              v__48722_0 = v__48720; \n            } else {\n              v__48722_0 = v__48713[v_index_48794]; \n            }\n          }\n          v__48724[(v_i_48705 + (128 * v_MWidthC_1 * v_w_id_48703) + (128 * v_l_id_48704))] = bool_and(v__48722_0, v__48712[(v_l_id_48704 + (128 * v_MWidthC_1 * v_w_id_48703) + (v_MWidthC_1 * v_i_48705))]); \n        }\n        /* end map_seq */\n        int v_tmp_48795 = 0; \n        v__48725 = v_tmp_48795; \n        /* reduce_seq */\n        for (int v_i_48706 = 0; v_i_48706 < 128; v_i_48706 = (1 + v_i_48706)) {\n          v__48725 = bool_or(v__48725, v__48724[(v_i_48706 + (128 * v_MWidthC_1 * v_w_id_48703) + (128 * v_l_id_48704))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48707 = 0; \n          v__48729[v_l_id_48704] = id(v__48725); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3710; \n        v_work_idx_3710 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_48708 = atomic_inc(&(v_work_idx_3710)); \n        while((v_l_id_48708 < 1)){\n          int v_tmp_48798 = 0; \n          v__33398 = v_tmp_48798; \n          /* reduce_seq */\n          for (int v_i_48709 = 0; v_i_48709 < v_MWidthC_1; v_i_48709 = (1 + v_i_48709)) {\n            v__33398 = bool_or(v__33398, v__48729[(v_i_48709 + (v_MWidthC_1 * v_l_id_48708))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48710 = 0; \n            v__48734[v_w_id_48703] = doubleAndOr(v__33398, v__48715, v__48714[v_w_id_48703], v__48716); \n          }\n          /* end map_seq */\n          v_l_id_48708 = atomic_inc(&(v_work_idx_3710)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48703 = atomic_inc(v_work_idx_3717); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48711",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48712",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48713",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48715",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48716",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48718",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__48724",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__48734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48729",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}