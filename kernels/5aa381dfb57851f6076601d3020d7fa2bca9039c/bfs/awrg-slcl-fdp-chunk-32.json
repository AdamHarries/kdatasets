{
  "name" : "awrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41564, const global int* restrict v__41565, const global int* restrict v__41566, const global int* restrict v__41567, int v__41568, int v__41569, global int* v__41583, global int* v__41571, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41573; \n  int v__41575; \n  /* Private Memory */\n  int v__41577_0;\n  \n  int v__41579_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3048 = v__41571; \n    local int v_w_id_41560; \n    if (get_local_id(0) == 0) {\n      v_w_id_41560 = atomic_inc(v_work_idx_3048); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_41560 < v_MHeight_2)){\n      for (int v_l_id_41561 = get_local_id(0); v_l_id_41561 < 32; v_l_id_41561 = (v_l_id_41561 + get_local_size(0))) {\n        int v_tmp_41624 = 0; \n        v__41573 = v_tmp_41624; \n        /* reduce_seq */\n        for (int v_i_41562 = 0; v_i_41562 < v_MWidthC_1; v_i_41562 = (1 + v_i_41562)) {\n          int v_tmp_41625 = 0; \n          v__41575 = v_tmp_41625; \n          int v_index_41626 = v__41564[(v_i_41562 + (32 * v_MWidthC_1 * v_w_id_41560) + (v_MWidthC_1 * v_l_id_41561))]; \n          if (v_index_41626 < 0) {\n            v__41577_0 = v__41575; \n          } else {\n            if (v_index_41626 >= v_VLength_3) {\n              v__41577_0 = v__41575; \n            } else {\n              v__41577_0 = v__41566[v_index_41626]; \n            }\n          }\n          v__41579_0 = bool_and(v__41577_0, v__41565[(v_i_41562 + (32 * v_MWidthC_1 * v_w_id_41560) + (v_MWidthC_1 * v_l_id_41561))]); \n          v__41573 = bool_or(v__41579_0, v__41573); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41563 = 0; \n          v__41583[(v_l_id_41561 + (32 * v_w_id_41560))] = doubleAndOr(v__41573, v__41568, v__41567[(v_l_id_41561 + (32 * v_w_id_41560))], v__41569); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_41560 = atomic_inc(v_work_idx_3048); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__41564",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41565",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41566",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41567",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__41568",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41569",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41571",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__41583",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}