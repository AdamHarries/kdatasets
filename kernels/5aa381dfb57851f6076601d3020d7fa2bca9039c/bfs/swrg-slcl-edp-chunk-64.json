{
  "name" : "swrg-slcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43297, const global int* restrict v__43298, const global int* restrict v__43299, const global int* restrict v__43300, int v__43301, int v__43302, global int* v__43317, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43304; \n  int v__43307; \n  /* Private Memory */\n  int v__43309_0;\n  \n  int v__43311_0;\n  \n  int v__43315_0;\n  \n  for (int v_wg_id_43293 = get_group_id(0); v_wg_id_43293 < v_MHeight_2; v_wg_id_43293 = (v_wg_id_43293 + get_num_groups(0))) {\n    for (int v_l_id_43294 = get_local_id(0); v_l_id_43294 < 64; v_l_id_43294 = (v_l_id_43294 + get_local_size(0))) {\n      int v_tmp_43366 = 0; \n      v__43304 = v_tmp_43366; \n      /* reduce_while_seq */\n      for (int v_i_43295 = 0; v_i_43295 < v_MWidthC_1; v_i_43295 = (1 + v_i_43295)) {\n        v__43315_0 = check(v__43304, v__43297[(v_i_43295 + (64 * v_MWidthC_1 * v_wg_id_43293) + (v_MWidthC_1 * v_l_id_43294))]); \n        if (v__43315_0) {\n        } else {\n          break;\n        }\n        int v_tmp_43367 = 0; \n        v__43307 = v_tmp_43367; \n        int v_index_43368 = v__43297[(v_i_43295 + (64 * v_MWidthC_1 * v_wg_id_43293) + (v_MWidthC_1 * v_l_id_43294))]; \n        if (v_index_43368 < 0) {\n          v__43309_0 = v__43307; \n        } else {\n          if (v_index_43368 >= v_VLength_3) {\n            v__43309_0 = v__43307; \n          } else {\n            v__43309_0 = v__43299[v_index_43368]; \n          }\n        }\n        v__43311_0 = bool_and(v__43309_0, v__43298[(v_i_43295 + (64 * v_MWidthC_1 * v_wg_id_43293) + (v_MWidthC_1 * v_l_id_43294))]); \n        v__43304 = bool_or(v__43311_0, v__43304); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43296 = 0; \n        v__43317[(v_l_id_43294 + (64 * v_wg_id_43293))] = doubleAndOr(v__43304, v__43301, v__43300[(v_l_id_43294 + (64 * v_wg_id_43293))], v__43302); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__43297",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43298",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43299",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43300",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__43301",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43302",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__43317",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}