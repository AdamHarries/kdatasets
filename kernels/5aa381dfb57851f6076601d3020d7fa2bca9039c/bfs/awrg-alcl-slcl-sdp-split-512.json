{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55905, const global int* restrict v__55906, const global int* restrict v__55907, const global int* restrict v__55908, int v__55909, int v__55910, global int* v__55928, global int* v__55912, global int* v__55918, local int* v__55923, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55914; \n  int v__55919; \n  int v__33398; \n  /* Private Memory */\n  int v__55916_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4394 = v__55912; \n    local int v_w_id_55897; \n    if (get_local_id(0) == 0) {\n      v_w_id_55897 = atomic_inc(v_work_idx_4394); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55897 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4392; \n        v_work_idx_4392 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_55898 = atomic_inc(&(v_work_idx_4392)); \n        while((v_l_id_55898 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_55899 = 0; v_i_55899 < 512; v_i_55899 = (1 + v_i_55899)) {\n            int v_tmp_55983 = 0; \n            v__55914 = v_tmp_55983; \n            int v_index_55984 = v__55905[(v_l_id_55898 + (512 * v_MWidthC_1 * v_w_id_55897) + (v_MWidthC_1 * v_i_55899))]; \n            if (v_index_55984 < 0) {\n              v__55916_0 = v__55914; \n            } else {\n              if (v_index_55984 >= v_VLength_3) {\n                v__55916_0 = v__55914; \n              } else {\n                v__55916_0 = v__55907[v_index_55984]; \n              }\n            }\n            v__55918[(v_i_55899 + (512 * v_MWidthC_1 * v_w_id_55897) + (512 * v_l_id_55898))] = bool_and(v__55916_0, v__55906[(v_l_id_55898 + (512 * v_MWidthC_1 * v_w_id_55897) + (v_MWidthC_1 * v_i_55899))]); \n          }\n          /* end map_seq */\n          int v_tmp_55985 = 0; \n          v__55919 = v_tmp_55985; \n          /* reduce_seq */\n          for (int v_i_55900 = 0; v_i_55900 < 512; v_i_55900 = (1 + v_i_55900)) {\n            v__55919 = bool_or(v__55919, v__55918[(v_i_55900 + (512 * v_MWidthC_1 * v_w_id_55897) + (512 * v_l_id_55898))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_55901 = 0; \n            v__55923[v_l_id_55898] = id(v__55919); \n          }\n          /* end map_seq */\n          v_l_id_55898 = atomic_inc(&(v_work_idx_4392)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_55902 = get_local_id(0); \n        int v_tmp_55988 = 0; \n        v__33398 = v_tmp_55988; \n        /* reduce_seq */\n        for (int v_i_55903 = 0; v_i_55903 < v_MWidthC_1; v_i_55903 = (1 + v_i_55903)) {\n          v__33398 = bool_or(v__33398, v__55923[(v_i_55903 + (v_MWidthC_1 * v_l_id_55902))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55904 = 0; \n          v__55928[v_w_id_55897] = doubleAndOr(v__33398, v__55909, v__55908[v_w_id_55897], v__55910); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55897 = atomic_inc(v_work_idx_4394); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__55905",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55906",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55907",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55908",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55909",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55910",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55912",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__55918",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__55928",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55923",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}