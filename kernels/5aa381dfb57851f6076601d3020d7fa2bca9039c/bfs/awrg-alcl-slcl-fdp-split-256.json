{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52668, const global int* restrict v__52669, const global int* restrict v__52670, const global int* restrict v__52671, int v__52672, int v__52673, global int* v__52691, global int* v__52675, local int* v__52686, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52677; \n  int v__52679; \n  int v__33398; \n  /* Private Memory */\n  int v__52681_0;\n  \n  int v__52683_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4092 = v__52675; \n    local int v_w_id_52661; \n    if (get_local_id(0) == 0) {\n      v_w_id_52661 = atomic_inc(v_work_idx_4092); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52661 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4090; \n        v_work_idx_4090 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_52662 = atomic_inc(&(v_work_idx_4090)); \n        while((v_l_id_52662 < v_MWidthC_1)){\n          int v_tmp_52746 = 0; \n          v__52677 = v_tmp_52746; \n          /* reduce_seq */\n          for (int v_i_52663 = 0; v_i_52663 < 256; v_i_52663 = (1 + v_i_52663)) {\n            int v_tmp_52747 = 0; \n            v__52679 = v_tmp_52747; \n            int v_index_52748 = v__52668[(v_l_id_52662 + (256 * v_MWidthC_1 * v_w_id_52661) + (v_MWidthC_1 * v_i_52663))]; \n            if (v_index_52748 < 0) {\n              v__52681_0 = v__52679; \n            } else {\n              if (v_index_52748 >= v_VLength_3) {\n                v__52681_0 = v__52679; \n              } else {\n                v__52681_0 = v__52670[v_index_52748]; \n              }\n            }\n            v__52683_0 = bool_and(v__52681_0, v__52669[(v_l_id_52662 + (256 * v_MWidthC_1 * v_w_id_52661) + (v_MWidthC_1 * v_i_52663))]); \n            v__52677 = bool_or(v__52683_0, v__52677); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52664 = 0; \n            v__52686[v_l_id_52662] = id(v__52677); \n          }\n          /* end map_seq */\n          v_l_id_52662 = atomic_inc(&(v_work_idx_4090)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52665 = get_local_id(0); \n        int v_tmp_52751 = 0; \n        v__33398 = v_tmp_52751; \n        /* reduce_seq */\n        for (int v_i_52666 = 0; v_i_52666 < v_MWidthC_1; v_i_52666 = (1 + v_i_52666)) {\n          v__33398 = bool_or(v__33398, v__52686[(v_i_52666 + (v_MWidthC_1 * v_l_id_52665))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52667 = 0; \n          v__52691[v_w_id_52661] = doubleAndOr(v__33398, v__52672, v__52671[v_w_id_52661], v__52673); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52661 = atomic_inc(v_work_idx_4092); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__52668",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52669",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52670",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52671",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52672",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52673",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52675",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52691",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52686",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}