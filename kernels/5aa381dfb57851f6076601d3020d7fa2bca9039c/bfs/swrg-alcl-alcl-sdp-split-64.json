{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44539, const global int* restrict v__44540, const global int* restrict v__44541, const global int* restrict v__44542, int v__44543, int v__44544, global int* v__44561, global int* v__44551, local int* v__44556, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44547; \n  int v__44552; \n  int v__33398; \n  /* Private Memory */\n  int v__44549_0;\n  \n  for (int v_wg_id_44531 = get_group_id(0); v_wg_id_44531 < v_MHeight_2; v_wg_id_44531 = (v_wg_id_44531 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3326; \n      v_work_idx_3326 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_44532 = atomic_inc(&(v_work_idx_3326)); \n      while((v_l_id_44532 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_44533 = 0; v_i_44533 < 64; v_i_44533 = (1 + v_i_44533)) {\n          int v_tmp_44614 = 0; \n          v__44547 = v_tmp_44614; \n          int v_index_44615 = v__44539[(v_l_id_44532 + (64 * v_MWidthC_1 * v_wg_id_44531) + (v_MWidthC_1 * v_i_44533))]; \n          if (v_index_44615 < 0) {\n            v__44549_0 = v__44547; \n          } else {\n            if (v_index_44615 >= v_VLength_3) {\n              v__44549_0 = v__44547; \n            } else {\n              v__44549_0 = v__44541[v_index_44615]; \n            }\n          }\n          v__44551[(v_i_44533 + (64 * v_MWidthC_1 * v_wg_id_44531) + (64 * v_l_id_44532))] = bool_and(v__44549_0, v__44540[(v_l_id_44532 + (64 * v_MWidthC_1 * v_wg_id_44531) + (v_MWidthC_1 * v_i_44533))]); \n        }\n        /* end map_seq */\n        int v_tmp_44616 = 0; \n        v__44552 = v_tmp_44616; \n        /* reduce_seq */\n        for (int v_i_44534 = 0; v_i_44534 < 64; v_i_44534 = (1 + v_i_44534)) {\n          v__44552 = bool_or(v__44552, v__44551[(v_i_44534 + (64 * v_MWidthC_1 * v_wg_id_44531) + (64 * v_l_id_44532))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44535 = 0; \n          v__44556[v_l_id_44532] = id(v__44552); \n        }\n        /* end map_seq */\n        v_l_id_44532 = atomic_inc(&(v_work_idx_3326)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3320; \n      v_work_idx_3320 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_44536 = atomic_inc(&(v_work_idx_3320)); \n      while((v_l_id_44536 < 1)){\n        int v_tmp_44619 = 0; \n        v__33398 = v_tmp_44619; \n        /* reduce_seq */\n        for (int v_i_44537 = 0; v_i_44537 < v_MWidthC_1; v_i_44537 = (1 + v_i_44537)) {\n          v__33398 = bool_or(v__33398, v__44556[(v_i_44537 + (v_MWidthC_1 * v_l_id_44536))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44538 = 0; \n          v__44561[v_wg_id_44531] = doubleAndOr(v__33398, v__44543, v__44542[v_wg_id_44531], v__44544); \n        }\n        /* end map_seq */\n        v_l_id_44536 = atomic_inc(&(v_work_idx_3320)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__44539",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44540",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44541",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44542",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44543",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44544",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44551",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__44561",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44556",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}