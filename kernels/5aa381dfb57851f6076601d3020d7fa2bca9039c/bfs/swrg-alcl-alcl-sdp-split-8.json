{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34537, const global int* restrict v__34538, const global int* restrict v__34539, const global int* restrict v__34540, int v__34541, int v__34542, global int* v__34559, global int* v__34549, local int* v__34554, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34545; \n  int v__34550; \n  int v__33398; \n  /* Private Memory */\n  int v__34547_0;\n  \n  for (int v_wg_id_34529 = get_group_id(0); v_wg_id_34529 < v_MHeight_2; v_wg_id_34529 = (v_wg_id_34529 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2390; \n      v_work_idx_2390 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_34530 = atomic_inc(&(v_work_idx_2390)); \n      while((v_l_id_34530 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_34531 = 0; v_i_34531 < 8; v_i_34531 = (1 + v_i_34531)) {\n          int v_tmp_34612 = 0; \n          v__34545 = v_tmp_34612; \n          int v_index_34613 = v__34537[(v_l_id_34530 + (8 * v_MWidthC_1 * v_wg_id_34529) + (v_MWidthC_1 * v_i_34531))]; \n          if (v_index_34613 < 0) {\n            v__34547_0 = v__34545; \n          } else {\n            if (v_index_34613 >= v_VLength_3) {\n              v__34547_0 = v__34545; \n            } else {\n              v__34547_0 = v__34539[v_index_34613]; \n            }\n          }\n          v__34549[(v_i_34531 + (8 * v_MWidthC_1 * v_wg_id_34529) + (8 * v_l_id_34530))] = bool_and(v__34547_0, v__34538[(v_l_id_34530 + (8 * v_MWidthC_1 * v_wg_id_34529) + (v_MWidthC_1 * v_i_34531))]); \n        }\n        /* end map_seq */\n        int v_tmp_34614 = 0; \n        v__34550 = v_tmp_34614; \n        /* reduce_seq */\n        for (int v_i_34532 = 0; v_i_34532 < 8; v_i_34532 = (1 + v_i_34532)) {\n          v__34550 = bool_or(v__34550, v__34549[(v_i_34532 + (8 * v_MWidthC_1 * v_wg_id_34529) + (8 * v_l_id_34530))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34533 = 0; \n          v__34554[v_l_id_34530] = id(v__34550); \n        }\n        /* end map_seq */\n        v_l_id_34530 = atomic_inc(&(v_work_idx_2390)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2384; \n      v_work_idx_2384 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_34534 = atomic_inc(&(v_work_idx_2384)); \n      while((v_l_id_34534 < 1)){\n        int v_tmp_34617 = 0; \n        v__33398 = v_tmp_34617; \n        /* reduce_seq */\n        for (int v_i_34535 = 0; v_i_34535 < v_MWidthC_1; v_i_34535 = (1 + v_i_34535)) {\n          v__33398 = bool_or(v__33398, v__34554[(v_i_34535 + (v_MWidthC_1 * v_l_id_34534))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34536 = 0; \n          v__34559[v_wg_id_34529] = doubleAndOr(v__33398, v__34541, v__34540[v_wg_id_34529], v__34542); \n        }\n        /* end map_seq */\n        v_l_id_34534 = atomic_inc(&(v_work_idx_2384)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34537",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34538",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34539",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34541",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34542",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34549",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__34559",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34554",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}