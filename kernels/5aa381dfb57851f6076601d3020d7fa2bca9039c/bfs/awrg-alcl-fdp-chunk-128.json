{
  "name" : "awrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49087, const global int* restrict v__49088, const global int* restrict v__49089, const global int* restrict v__49090, int v__49091, int v__49092, global int* v__49106, global int* v__49094, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49096; \n  int v__49098; \n  /* Private Memory */\n  int v__49100_0;\n  \n  int v__49102_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3752 = v__49094; \n    local int v_w_id_49083; \n    if (get_local_id(0) == 0) {\n      v_w_id_49083 = atomic_inc(v_work_idx_3752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_49083 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3750; \n        v_work_idx_3750 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_49084 = atomic_inc(&(v_work_idx_3750)); \n        while((v_l_id_49084 < 128)){\n          int v_tmp_49143 = 0; \n          v__49096 = v_tmp_49143; \n          /* reduce_seq */\n          for (int v_i_49085 = 0; v_i_49085 < v_MWidthC_1; v_i_49085 = (1 + v_i_49085)) {\n            int v_tmp_49144 = 0; \n            v__49098 = v_tmp_49144; \n            int v_index_49145 = v__49087[(v_i_49085 + (128 * v_MWidthC_1 * v_w_id_49083) + (v_MWidthC_1 * v_l_id_49084))]; \n            if (v_index_49145 < 0) {\n              v__49100_0 = v__49098; \n            } else {\n              if (v_index_49145 >= v_VLength_3) {\n                v__49100_0 = v__49098; \n              } else {\n                v__49100_0 = v__49089[v_index_49145]; \n              }\n            }\n            v__49102_0 = bool_and(v__49100_0, v__49088[(v_i_49085 + (128 * v_MWidthC_1 * v_w_id_49083) + (v_MWidthC_1 * v_l_id_49084))]); \n            v__49096 = bool_or(v__49102_0, v__49096); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_49086 = 0; \n            v__49106[(v_l_id_49084 + (128 * v_w_id_49083))] = doubleAndOr(v__49096, v__49091, v__49090[(v_l_id_49084 + (128 * v_w_id_49083))], v__49092); \n          }\n          /* end map_seq */\n          v_l_id_49084 = atomic_inc(&(v_work_idx_3750)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_49083 = atomic_inc(v_work_idx_3752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__49087",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49088",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49089",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49090",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__49091",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49092",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49094",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__49106",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}