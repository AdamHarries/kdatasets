{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__42245, const global int* restrict v__42246, const global int* restrict v__42247, const global int* restrict v__42248, int v__42249, int v__42250, global int* v__42270, global int* v__42252, local int* v__42265, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42254; \n  int v__42256; \n  int v__33398; \n  /* Private Memory */\n  int v__42258_0;\n  \n  int v__42260_0;\n  \n  int v__42264_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3113 = v__42252; \n    local int v_w_id_42238; \n    if (get_local_id(0) == 0) {\n      v_w_id_42238 = atomic_inc(v_work_idx_3113); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42238 < v_MHeight_2)){\n      for (int v_l_id_42239 = get_local_id(0); v_l_id_42239 < v_MWidthC_1; v_l_id_42239 = (v_l_id_42239 + get_local_size(0))) {\n        int v_tmp_42332 = 0; \n        v__42254 = v_tmp_42332; \n        /* reduce_while_seq */\n        for (int v_i_42240 = 0; v_i_42240 < 32; v_i_42240 = (1 + v_i_42240)) {\n          v__42264_0 = check(v__42254, v__42245[(v_l_id_42239 + (32 * v_MWidthC_1 * v_w_id_42238) + (v_MWidthC_1 * v_i_42240))]); \n          if (v__42264_0) {\n          } else {\n            break;\n          }\n          int v_tmp_42333 = 0; \n          v__42256 = v_tmp_42333; \n          int v_index_42334 = v__42245[(v_l_id_42239 + (32 * v_MWidthC_1 * v_w_id_42238) + (v_MWidthC_1 * v_i_42240))]; \n          if (v_index_42334 < 0) {\n            v__42258_0 = v__42256; \n          } else {\n            if (v_index_42334 >= v_VLength_3) {\n              v__42258_0 = v__42256; \n            } else {\n              v__42258_0 = v__42247[v_index_42334]; \n            }\n          }\n          v__42260_0 = bool_and(v__42258_0, v__42246[(v_l_id_42239 + (32 * v_MWidthC_1 * v_w_id_42238) + (v_MWidthC_1 * v_i_42240))]); \n          v__42254 = bool_or(v__42260_0, v__42254); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42241 = 0; \n          v__42265[v_l_id_42239] = id(v__42254); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3107; \n        v_work_idx_3107 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_42242 = atomic_inc(&(v_work_idx_3107)); \n        while((v_l_id_42242 < 1)){\n          int v_tmp_42337 = 0; \n          v__33398 = v_tmp_42337; \n          /* reduce_seq */\n          for (int v_i_42243 = 0; v_i_42243 < v_MWidthC_1; v_i_42243 = (1 + v_i_42243)) {\n            v__33398 = bool_or(v__33398, v__42265[(v_i_42243 + (v_MWidthC_1 * v_l_id_42242))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42244 = 0; \n            v__42270[v_w_id_42238] = doubleAndOr(v__33398, v__42249, v__42248[v_w_id_42238], v__42250); \n          }\n          /* end map_seq */\n          v_l_id_42242 = atomic_inc(&(v_work_idx_3107)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42238 = atomic_inc(v_work_idx_3113); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__42245",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42246",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42247",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42249",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42250",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42252",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42270",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42265",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}