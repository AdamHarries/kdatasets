{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43489, const global int* restrict v__43490, const global int* restrict v__43491, const global int* restrict v__43492, int v__43493, int v__43494, global int* v__43511, local int* v__43506, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43497; \n  int v__43499; \n  int v__33398; \n  /* Private Memory */\n  int v__43501_0;\n  \n  int v__43503_0;\n  \n  for (int v_wg_id_43482 = get_group_id(0); v_wg_id_43482 < v_MHeight_2; v_wg_id_43482 = (v_wg_id_43482 + get_num_groups(0))) {\n    for (int v_l_id_43483 = get_local_id(0); v_l_id_43483 < v_MWidthC_1; v_l_id_43483 = (v_l_id_43483 + get_local_size(0))) {\n      int v_tmp_43576 = 0; \n      v__43497 = v_tmp_43576; \n      /* reduce_seq */\n      for (int v_i_43484 = 0; v_i_43484 < 64; v_i_43484 = (1 + v_i_43484)) {\n        int v_tmp_43577 = 0; \n        v__43499 = v_tmp_43577; \n        int v_index_43578 = v__43489[(v_l_id_43483 + (64 * v_MWidthC_1 * v_wg_id_43482) + (v_MWidthC_1 * v_i_43484))]; \n        if (v_index_43578 < 0) {\n          v__43501_0 = v__43499; \n        } else {\n          if (v_index_43578 >= v_VLength_3) {\n            v__43501_0 = v__43499; \n          } else {\n            v__43501_0 = v__43491[v_index_43578]; \n          }\n        }\n        v__43503_0 = bool_and(v__43501_0, v__43490[(v_l_id_43483 + (64 * v_MWidthC_1 * v_wg_id_43482) + (v_MWidthC_1 * v_i_43484))]); \n        v__43497 = bool_or(v__43503_0, v__43497); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43485 = 0; \n        v__43506[v_l_id_43483] = id(v__43497); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_43486 = get_local_id(0); \n      int v_tmp_43581 = 0; \n      v__33398 = v_tmp_43581; \n      /* reduce_seq */\n      for (int v_i_43487 = 0; v_i_43487 < v_MWidthC_1; v_i_43487 = (1 + v_i_43487)) {\n        v__33398 = bool_or(v__33398, v__43506[(v_i_43487 + (v_MWidthC_1 * v_l_id_43486))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43488 = 0; \n        v__43511[v_wg_id_43482] = doubleAndOr(v__33398, v__43493, v__43492[v_wg_id_43482], v__43494); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__43489",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43490",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43491",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43492",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43493",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43494",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__43511",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43506",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}