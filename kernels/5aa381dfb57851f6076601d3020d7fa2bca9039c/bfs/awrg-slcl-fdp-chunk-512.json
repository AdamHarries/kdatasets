{
  "name" : "awrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54900, const global int* restrict v__54901, const global int* restrict v__54902, const global int* restrict v__54903, int v__54904, int v__54905, global int* v__54919, global int* v__54907, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54909; \n  int v__54911; \n  /* Private Memory */\n  int v__54913_0;\n  \n  int v__54915_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4296 = v__54907; \n    local int v_w_id_54896; \n    if (get_local_id(0) == 0) {\n      v_w_id_54896 = atomic_inc(v_work_idx_4296); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_54896 < v_MHeight_2)){\n      for (int v_l_id_54897 = get_local_id(0); v_l_id_54897 < 512; v_l_id_54897 = (v_l_id_54897 + get_local_size(0))) {\n        int v_tmp_54960 = 0; \n        v__54909 = v_tmp_54960; \n        /* reduce_seq */\n        for (int v_i_54898 = 0; v_i_54898 < v_MWidthC_1; v_i_54898 = (1 + v_i_54898)) {\n          int v_tmp_54961 = 0; \n          v__54911 = v_tmp_54961; \n          int v_index_54962 = v__54900[(v_i_54898 + (512 * v_MWidthC_1 * v_w_id_54896) + (v_MWidthC_1 * v_l_id_54897))]; \n          if (v_index_54962 < 0) {\n            v__54913_0 = v__54911; \n          } else {\n            if (v_index_54962 >= v_VLength_3) {\n              v__54913_0 = v__54911; \n            } else {\n              v__54913_0 = v__54902[v_index_54962]; \n            }\n          }\n          v__54915_0 = bool_and(v__54913_0, v__54901[(v_i_54898 + (512 * v_MWidthC_1 * v_w_id_54896) + (v_MWidthC_1 * v_l_id_54897))]); \n          v__54909 = bool_or(v__54915_0, v__54909); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54899 = 0; \n          v__54919[(v_l_id_54897 + (512 * v_w_id_54896))] = doubleAndOr(v__54909, v__54904, v__54903[(v_l_id_54897 + (512 * v_w_id_54896))], v__54905); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_54896 = atomic_inc(v_work_idx_4296); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__54900",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54901",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54902",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54903",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__54904",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54905",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54907",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__54919",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}