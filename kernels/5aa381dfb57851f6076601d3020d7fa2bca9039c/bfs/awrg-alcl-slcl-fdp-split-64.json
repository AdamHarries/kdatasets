{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46000, const global int* restrict v__46001, const global int* restrict v__46002, const global int* restrict v__46003, int v__46004, int v__46005, global int* v__46023, global int* v__46007, local int* v__46018, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46009; \n  int v__46011; \n  int v__33398; \n  /* Private Memory */\n  int v__46013_0;\n  \n  int v__46015_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3468 = v__46007; \n    local int v_w_id_45993; \n    if (get_local_id(0) == 0) {\n      v_w_id_45993 = atomic_inc(v_work_idx_3468); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45993 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3466; \n        v_work_idx_3466 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_45994 = atomic_inc(&(v_work_idx_3466)); \n        while((v_l_id_45994 < v_MWidthC_1)){\n          int v_tmp_46078 = 0; \n          v__46009 = v_tmp_46078; \n          /* reduce_seq */\n          for (int v_i_45995 = 0; v_i_45995 < 64; v_i_45995 = (1 + v_i_45995)) {\n            int v_tmp_46079 = 0; \n            v__46011 = v_tmp_46079; \n            int v_index_46080 = v__46000[(v_l_id_45994 + (64 * v_MWidthC_1 * v_w_id_45993) + (v_MWidthC_1 * v_i_45995))]; \n            if (v_index_46080 < 0) {\n              v__46013_0 = v__46011; \n            } else {\n              if (v_index_46080 >= v_VLength_3) {\n                v__46013_0 = v__46011; \n              } else {\n                v__46013_0 = v__46002[v_index_46080]; \n              }\n            }\n            v__46015_0 = bool_and(v__46013_0, v__46001[(v_l_id_45994 + (64 * v_MWidthC_1 * v_w_id_45993) + (v_MWidthC_1 * v_i_45995))]); \n            v__46009 = bool_or(v__46015_0, v__46009); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_45996 = 0; \n            v__46018[v_l_id_45994] = id(v__46009); \n          }\n          /* end map_seq */\n          v_l_id_45994 = atomic_inc(&(v_work_idx_3466)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45997 = get_local_id(0); \n        int v_tmp_46083 = 0; \n        v__33398 = v_tmp_46083; \n        /* reduce_seq */\n        for (int v_i_45998 = 0; v_i_45998 < v_MWidthC_1; v_i_45998 = (1 + v_i_45998)) {\n          v__33398 = bool_or(v__33398, v__46018[(v_i_45998 + (v_MWidthC_1 * v_l_id_45997))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45999 = 0; \n          v__46023[v_w_id_45993] = doubleAndOr(v__33398, v__46004, v__46003[v_w_id_45993], v__46005); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45993 = atomic_inc(v_work_idx_3468); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__46000",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46001",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46002",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46003",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46004",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46005",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46007",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46023",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46018",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}