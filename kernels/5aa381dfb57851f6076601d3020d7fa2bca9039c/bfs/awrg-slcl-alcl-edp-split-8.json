{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__35577, const global int* restrict v__35578, const global int* restrict v__35579, const global int* restrict v__35580, int v__35581, int v__35582, global int* v__35602, global int* v__35584, local int* v__35597, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35586; \n  int v__35588; \n  int v__33398; \n  /* Private Memory */\n  int v__35590_0;\n  \n  int v__35592_0;\n  \n  int v__35596_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2489 = v__35584; \n    local int v_w_id_35570; \n    if (get_local_id(0) == 0) {\n      v_w_id_35570 = atomic_inc(v_work_idx_2489); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35570 < v_MHeight_2)){\n      for (int v_l_id_35571 = get_local_id(0); v_l_id_35571 < v_MWidthC_1; v_l_id_35571 = (v_l_id_35571 + get_local_size(0))) {\n        int v_tmp_35664 = 0; \n        v__35586 = v_tmp_35664; \n        /* reduce_while_seq */\n        for (int v_i_35572 = 0; v_i_35572 < 8; v_i_35572 = (1 + v_i_35572)) {\n          v__35596_0 = check(v__35586, v__35577[(v_l_id_35571 + (8 * v_MWidthC_1 * v_w_id_35570) + (v_MWidthC_1 * v_i_35572))]); \n          if (v__35596_0) {\n          } else {\n            break;\n          }\n          int v_tmp_35665 = 0; \n          v__35588 = v_tmp_35665; \n          int v_index_35666 = v__35577[(v_l_id_35571 + (8 * v_MWidthC_1 * v_w_id_35570) + (v_MWidthC_1 * v_i_35572))]; \n          if (v_index_35666 < 0) {\n            v__35590_0 = v__35588; \n          } else {\n            if (v_index_35666 >= v_VLength_3) {\n              v__35590_0 = v__35588; \n            } else {\n              v__35590_0 = v__35579[v_index_35666]; \n            }\n          }\n          v__35592_0 = bool_and(v__35590_0, v__35578[(v_l_id_35571 + (8 * v_MWidthC_1 * v_w_id_35570) + (v_MWidthC_1 * v_i_35572))]); \n          v__35586 = bool_or(v__35592_0, v__35586); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35573 = 0; \n          v__35597[v_l_id_35571] = id(v__35586); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2483; \n        v_work_idx_2483 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_35574 = atomic_inc(&(v_work_idx_2483)); \n        while((v_l_id_35574 < 1)){\n          int v_tmp_35669 = 0; \n          v__33398 = v_tmp_35669; \n          /* reduce_seq */\n          for (int v_i_35575 = 0; v_i_35575 < v_MWidthC_1; v_i_35575 = (1 + v_i_35575)) {\n            v__33398 = bool_or(v__33398, v__35597[(v_i_35575 + (v_MWidthC_1 * v_l_id_35574))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35576 = 0; \n            v__35602[v_w_id_35570] = doubleAndOr(v__33398, v__35581, v__35580[v_w_id_35570], v__35582); \n          }\n          /* end map_seq */\n          v_l_id_35574 = atomic_inc(&(v_work_idx_2483)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35570 = atomic_inc(v_work_idx_2489); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__35577",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35578",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35579",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35581",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35582",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35584",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35597",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}