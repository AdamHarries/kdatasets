{
  "name" : "awrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55824, const global int* restrict v__55825, const global int* restrict v__55826, const global int* restrict v__55827, int v__55828, int v__55829, global int* v__55845, global int* v__55831, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55832; \n  int v__55835; \n  /* Private Memory */\n  int v__55837_0;\n  \n  int v__55839_0;\n  \n  int v__55843_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4383 = v__55831; \n    local int v_w_id_55820; \n    if (get_local_id(0) == 0) {\n      v_w_id_55820 = atomic_inc(v_work_idx_4383); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55820 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4381; \n        v_work_idx_4381 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_55821 = atomic_inc(&(v_work_idx_4381)); \n        while((v_l_id_55821 < 512)){\n          int v_tmp_55888 = 0; \n          v__55832 = v_tmp_55888; \n          /* reduce_while_seq */\n          for (int v_i_55822 = 0; v_i_55822 < v_MWidthC_1; v_i_55822 = (1 + v_i_55822)) {\n            v__55843_0 = check(v__55832, v__55824[(v_i_55822 + (512 * v_MWidthC_1 * v_w_id_55820) + (v_MWidthC_1 * v_l_id_55821))]); \n            if (v__55843_0) {\n            } else {\n              break;\n            }\n            int v_tmp_55889 = 0; \n            v__55835 = v_tmp_55889; \n            int v_index_55890 = v__55824[(v_i_55822 + (512 * v_MWidthC_1 * v_w_id_55820) + (v_MWidthC_1 * v_l_id_55821))]; \n            if (v_index_55890 < 0) {\n              v__55837_0 = v__55835; \n            } else {\n              if (v_index_55890 >= v_VLength_3) {\n                v__55837_0 = v__55835; \n              } else {\n                v__55837_0 = v__55826[v_index_55890]; \n              }\n            }\n            v__55839_0 = bool_and(v__55837_0, v__55825[(v_i_55822 + (512 * v_MWidthC_1 * v_w_id_55820) + (v_MWidthC_1 * v_l_id_55821))]); \n            v__55832 = bool_or(v__55839_0, v__55832); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_55823 = 0; \n            v__55845[(v_l_id_55821 + (512 * v_w_id_55820))] = doubleAndOr(v__55832, v__55828, v__55827[(v_l_id_55821 + (512 * v_w_id_55820))], v__55829); \n          }\n          /* end map_seq */\n          v_l_id_55821 = atomic_inc(&(v_work_idx_4381)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55820 = atomic_inc(v_work_idx_4383); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__55824",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55825",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55826",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55827",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__55828",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55829",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55831",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55845",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}