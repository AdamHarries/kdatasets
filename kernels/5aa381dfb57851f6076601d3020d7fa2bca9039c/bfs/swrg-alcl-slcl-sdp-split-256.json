{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50907, const global int* restrict v__50908, const global int* restrict v__50909, const global int* restrict v__50910, int v__50911, int v__50912, global int* v__50929, global int* v__50919, local int* v__50924, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50915; \n  int v__50920; \n  int v__33398; \n  /* Private Memory */\n  int v__50917_0;\n  \n  for (int v_wg_id_50899 = get_group_id(0); v_wg_id_50899 < v_MHeight_2; v_wg_id_50899 = (v_wg_id_50899 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3921; \n      v_work_idx_3921 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_50900 = atomic_inc(&(v_work_idx_3921)); \n      while((v_l_id_50900 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_50901 = 0; v_i_50901 < 256; v_i_50901 = (1 + v_i_50901)) {\n          int v_tmp_50986 = 0; \n          v__50915 = v_tmp_50986; \n          int v_index_50987 = v__50907[(v_l_id_50900 + (256 * v_MWidthC_1 * v_wg_id_50899) + (v_MWidthC_1 * v_i_50901))]; \n          if (v_index_50987 < 0) {\n            v__50917_0 = v__50915; \n          } else {\n            if (v_index_50987 >= v_VLength_3) {\n              v__50917_0 = v__50915; \n            } else {\n              v__50917_0 = v__50909[v_index_50987]; \n            }\n          }\n          v__50919[(v_i_50901 + (256 * v_MWidthC_1 * v_wg_id_50899) + (256 * v_l_id_50900))] = bool_and(v__50917_0, v__50908[(v_l_id_50900 + (256 * v_MWidthC_1 * v_wg_id_50899) + (v_MWidthC_1 * v_i_50901))]); \n        }\n        /* end map_seq */\n        int v_tmp_50988 = 0; \n        v__50920 = v_tmp_50988; \n        /* reduce_seq */\n        for (int v_i_50902 = 0; v_i_50902 < 256; v_i_50902 = (1 + v_i_50902)) {\n          v__50920 = bool_or(v__50920, v__50919[(v_i_50902 + (256 * v_MWidthC_1 * v_wg_id_50899) + (256 * v_l_id_50900))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50903 = 0; \n          v__50924[v_l_id_50900] = id(v__50920); \n        }\n        /* end map_seq */\n        v_l_id_50900 = atomic_inc(&(v_work_idx_3921)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_50904 = get_local_id(0); \n      int v_tmp_50991 = 0; \n      v__33398 = v_tmp_50991; \n      /* reduce_seq */\n      for (int v_i_50905 = 0; v_i_50905 < v_MWidthC_1; v_i_50905 = (1 + v_i_50905)) {\n        v__33398 = bool_or(v__33398, v__50924[(v_i_50905 + (v_MWidthC_1 * v_l_id_50904))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_50906 = 0; \n        v__50929[v_wg_id_50899] = doubleAndOr(v__33398, v__50911, v__50910[v_wg_id_50899], v__50912); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__50907",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50908",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50909",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50911",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50912",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__50919",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__50929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__50924",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}