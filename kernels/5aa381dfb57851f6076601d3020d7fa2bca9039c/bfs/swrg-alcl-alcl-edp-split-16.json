{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__38059, const global int* restrict v__38060, const global int* restrict v__38061, const global int* restrict v__38062, int v__38063, int v__38064, global int* v__38083, local int* v__38078, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38067; \n  int v__38069; \n  int v__33398; \n  /* Private Memory */\n  int v__38071_0;\n  \n  int v__38073_0;\n  \n  int v__38077_0;\n  \n  for (int v_wg_id_38052 = get_group_id(0); v_wg_id_38052 < v_MHeight_2; v_wg_id_38052 = (v_wg_id_38052 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2722; \n      v_work_idx_2722 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_38053 = atomic_inc(&(v_work_idx_2722)); \n      while((v_l_id_38053 < v_MWidthC_1)){\n        int v_tmp_38139 = 0; \n        v__38067 = v_tmp_38139; \n        /* reduce_while_seq */\n        for (int v_i_38054 = 0; v_i_38054 < 16; v_i_38054 = (1 + v_i_38054)) {\n          v__38077_0 = check(v__38067, v__38059[(v_l_id_38053 + (16 * v_MWidthC_1 * v_wg_id_38052) + (v_MWidthC_1 * v_i_38054))]); \n          if (v__38077_0) {\n          } else {\n            break;\n          }\n          int v_tmp_38140 = 0; \n          v__38069 = v_tmp_38140; \n          int v_index_38141 = v__38059[(v_l_id_38053 + (16 * v_MWidthC_1 * v_wg_id_38052) + (v_MWidthC_1 * v_i_38054))]; \n          if (v_index_38141 < 0) {\n            v__38071_0 = v__38069; \n          } else {\n            if (v_index_38141 >= v_VLength_3) {\n              v__38071_0 = v__38069; \n            } else {\n              v__38071_0 = v__38061[v_index_38141]; \n            }\n          }\n          v__38073_0 = bool_and(v__38071_0, v__38060[(v_l_id_38053 + (16 * v_MWidthC_1 * v_wg_id_38052) + (v_MWidthC_1 * v_i_38054))]); \n          v__38067 = bool_or(v__38073_0, v__38067); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38055 = 0; \n          v__38078[v_l_id_38053] = id(v__38067); \n        }\n        /* end map_seq */\n        v_l_id_38053 = atomic_inc(&(v_work_idx_2722)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2717; \n      v_work_idx_2717 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_38056 = atomic_inc(&(v_work_idx_2717)); \n      while((v_l_id_38056 < 1)){\n        int v_tmp_38144 = 0; \n        v__33398 = v_tmp_38144; \n        /* reduce_seq */\n        for (int v_i_38057 = 0; v_i_38057 < v_MWidthC_1; v_i_38057 = (1 + v_i_38057)) {\n          v__33398 = bool_or(v__33398, v__38078[(v_i_38057 + (v_MWidthC_1 * v_l_id_38056))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38058 = 0; \n          v__38083[v_wg_id_38052] = doubleAndOr(v__33398, v__38063, v__38062[v_wg_id_38052], v__38064); \n        }\n        /* end map_seq */\n        v_l_id_38056 = atomic_inc(&(v_work_idx_2717)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__38059",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38060",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38061",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38062",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38063",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38064",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__38083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38078",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}