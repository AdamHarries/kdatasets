{
  "name" : "swrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__40155, const global int* restrict v__40156, const global int* restrict v__40157, const global int* restrict v__40158, int v__40159, int v__40160, global int* v__40177, local int* v__40172, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__40163; \n  int v__40165; \n  int v__33398; \n  /* Private Memory */\n  int v__40167_0;\n  \n  int v__40169_0;\n  \n  for (int v_wg_id_40148 = get_group_id(0); v_wg_id_40148 < v_MHeight_2; v_wg_id_40148 = (v_wg_id_40148 + get_num_groups(0))) {\n    for (int v_l_id_40149 = get_local_id(0); v_l_id_40149 < v_MWidthC_1; v_l_id_40149 = (v_l_id_40149 + get_local_size(0))) {\n      int v_tmp_40242 = 0; \n      v__40163 = v_tmp_40242; \n      /* reduce_seq */\n      for (int v_i_40150 = 0; v_i_40150 < 32; v_i_40150 = (1 + v_i_40150)) {\n        int v_tmp_40243 = 0; \n        v__40165 = v_tmp_40243; \n        int v_index_40244 = v__40155[(v_l_id_40149 + (32 * v_MWidthC_1 * v_wg_id_40148) + (v_MWidthC_1 * v_i_40150))]; \n        if (v_index_40244 < 0) {\n          v__40167_0 = v__40165; \n        } else {\n          if (v_index_40244 >= v_VLength_3) {\n            v__40167_0 = v__40165; \n          } else {\n            v__40167_0 = v__40157[v_index_40244]; \n          }\n        }\n        v__40169_0 = bool_and(v__40167_0, v__40156[(v_l_id_40149 + (32 * v_MWidthC_1 * v_wg_id_40148) + (v_MWidthC_1 * v_i_40150))]); \n        v__40163 = bool_or(v__40169_0, v__40163); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40151 = 0; \n        v__40172[v_l_id_40149] = id(v__40163); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_40152 = get_local_id(0); \n      int v_tmp_40247 = 0; \n      v__33398 = v_tmp_40247; \n      /* reduce_seq */\n      for (int v_i_40153 = 0; v_i_40153 < v_MWidthC_1; v_i_40153 = (1 + v_i_40153)) {\n        v__33398 = bool_or(v__33398, v__40172[(v_i_40153 + (v_MWidthC_1 * v_l_id_40152))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_40154 = 0; \n        v__40177[v_wg_id_40148] = doubleAndOr(v__33398, v__40159, v__40158[v_wg_id_40148], v__40160); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__40155",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40156",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40157",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40159",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40160",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__40177",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__40172",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}