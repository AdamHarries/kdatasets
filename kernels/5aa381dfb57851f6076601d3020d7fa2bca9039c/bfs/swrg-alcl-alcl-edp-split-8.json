{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__34725, const global int* restrict v__34726, const global int* restrict v__34727, const global int* restrict v__34728, int v__34729, int v__34730, global int* v__34749, local int* v__34744, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34733; \n  int v__34735; \n  int v__33398; \n  /* Private Memory */\n  int v__34737_0;\n  \n  int v__34739_0;\n  \n  int v__34743_0;\n  \n  for (int v_wg_id_34718 = get_group_id(0); v_wg_id_34718 < v_MHeight_2; v_wg_id_34718 = (v_wg_id_34718 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2410; \n      v_work_idx_2410 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_34719 = atomic_inc(&(v_work_idx_2410)); \n      while((v_l_id_34719 < v_MWidthC_1)){\n        int v_tmp_34805 = 0; \n        v__34733 = v_tmp_34805; \n        /* reduce_while_seq */\n        for (int v_i_34720 = 0; v_i_34720 < 8; v_i_34720 = (1 + v_i_34720)) {\n          v__34743_0 = check(v__34733, v__34725[(v_l_id_34719 + (8 * v_MWidthC_1 * v_wg_id_34718) + (v_MWidthC_1 * v_i_34720))]); \n          if (v__34743_0) {\n          } else {\n            break;\n          }\n          int v_tmp_34806 = 0; \n          v__34735 = v_tmp_34806; \n          int v_index_34807 = v__34725[(v_l_id_34719 + (8 * v_MWidthC_1 * v_wg_id_34718) + (v_MWidthC_1 * v_i_34720))]; \n          if (v_index_34807 < 0) {\n            v__34737_0 = v__34735; \n          } else {\n            if (v_index_34807 >= v_VLength_3) {\n              v__34737_0 = v__34735; \n            } else {\n              v__34737_0 = v__34727[v_index_34807]; \n            }\n          }\n          v__34739_0 = bool_and(v__34737_0, v__34726[(v_l_id_34719 + (8 * v_MWidthC_1 * v_wg_id_34718) + (v_MWidthC_1 * v_i_34720))]); \n          v__34733 = bool_or(v__34739_0, v__34733); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34721 = 0; \n          v__34744[v_l_id_34719] = id(v__34733); \n        }\n        /* end map_seq */\n        v_l_id_34719 = atomic_inc(&(v_work_idx_2410)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2405; \n      v_work_idx_2405 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_34722 = atomic_inc(&(v_work_idx_2405)); \n      while((v_l_id_34722 < 1)){\n        int v_tmp_34810 = 0; \n        v__33398 = v_tmp_34810; \n        /* reduce_seq */\n        for (int v_i_34723 = 0; v_i_34723 < v_MWidthC_1; v_i_34723 = (1 + v_i_34723)) {\n          v__33398 = bool_or(v__33398, v__34744[(v_i_34723 + (v_MWidthC_1 * v_l_id_34722))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34724 = 0; \n          v__34749[v_wg_id_34718] = doubleAndOr(v__33398, v__34729, v__34728[v_wg_id_34718], v__34730); \n        }\n        /* end map_seq */\n        v_l_id_34722 = atomic_inc(&(v_work_idx_2405)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__34725",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34726",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34727",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34729",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34730",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__34749",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34744",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}