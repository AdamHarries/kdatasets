{
  "name" : "swrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44157, const global int* restrict v__44158, const global int* restrict v__44159, const global int* restrict v__44160, int v__44161, int v__44162, global int* v__44177, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44164; \n  int v__44167; \n  /* Private Memory */\n  int v__44169_0;\n  \n  int v__44171_0;\n  \n  int v__44175_0;\n  \n  for (int v_wg_id_44153 = get_group_id(0); v_wg_id_44153 < v_MHeight_2; v_wg_id_44153 = (v_wg_id_44153 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3287; \n      v_work_idx_3287 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_44154 = atomic_inc(&(v_work_idx_3287)); \n      while((v_l_id_44154 < 64)){\n        int v_tmp_44222 = 0; \n        v__44164 = v_tmp_44222; \n        /* reduce_while_seq */\n        for (int v_i_44155 = 0; v_i_44155 < v_MWidthC_1; v_i_44155 = (1 + v_i_44155)) {\n          v__44175_0 = check(v__44164, v__44157[(v_i_44155 + (64 * v_MWidthC_1 * v_wg_id_44153) + (v_MWidthC_1 * v_l_id_44154))]); \n          if (v__44175_0) {\n          } else {\n            break;\n          }\n          int v_tmp_44223 = 0; \n          v__44167 = v_tmp_44223; \n          int v_index_44224 = v__44157[(v_i_44155 + (64 * v_MWidthC_1 * v_wg_id_44153) + (v_MWidthC_1 * v_l_id_44154))]; \n          if (v_index_44224 < 0) {\n            v__44169_0 = v__44167; \n          } else {\n            if (v_index_44224 >= v_VLength_3) {\n              v__44169_0 = v__44167; \n            } else {\n              v__44169_0 = v__44159[v_index_44224]; \n            }\n          }\n          v__44171_0 = bool_and(v__44169_0, v__44158[(v_i_44155 + (64 * v_MWidthC_1 * v_wg_id_44153) + (v_MWidthC_1 * v_l_id_44154))]); \n          v__44164 = bool_or(v__44171_0, v__44164); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44156 = 0; \n          v__44177[(v_l_id_44154 + (64 * v_wg_id_44153))] = doubleAndOr(v__44164, v__44161, v__44160[(v_l_id_44154 + (64 * v_wg_id_44153))], v__44162); \n        }\n        /* end map_seq */\n        v_l_id_44154 = atomic_inc(&(v_work_idx_3287)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__44157",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44158",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44159",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44160",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__44161",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44162",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44177",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}