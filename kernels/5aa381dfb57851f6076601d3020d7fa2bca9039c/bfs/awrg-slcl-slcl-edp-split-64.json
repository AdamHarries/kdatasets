{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__45266, const global int* restrict v__45267, const global int* restrict v__45268, const global int* restrict v__45269, int v__45270, int v__45271, global int* v__45291, global int* v__45273, local int* v__45286, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45275; \n  int v__45277; \n  int v__33398; \n  /* Private Memory */\n  int v__45279_0;\n  \n  int v__45281_0;\n  \n  int v__45285_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3394 = v__45273; \n    local int v_w_id_45259; \n    if (get_local_id(0) == 0) {\n      v_w_id_45259 = atomic_inc(v_work_idx_3394); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45259 < v_MHeight_2)){\n      for (int v_l_id_45260 = get_local_id(0); v_l_id_45260 < v_MWidthC_1; v_l_id_45260 = (v_l_id_45260 + get_local_size(0))) {\n        int v_tmp_45357 = 0; \n        v__45275 = v_tmp_45357; \n        /* reduce_while_seq */\n        for (int v_i_45261 = 0; v_i_45261 < 64; v_i_45261 = (1 + v_i_45261)) {\n          v__45285_0 = check(v__45275, v__45266[(v_l_id_45260 + (64 * v_MWidthC_1 * v_w_id_45259) + (v_MWidthC_1 * v_i_45261))]); \n          if (v__45285_0) {\n          } else {\n            break;\n          }\n          int v_tmp_45358 = 0; \n          v__45277 = v_tmp_45358; \n          int v_index_45359 = v__45266[(v_l_id_45260 + (64 * v_MWidthC_1 * v_w_id_45259) + (v_MWidthC_1 * v_i_45261))]; \n          if (v_index_45359 < 0) {\n            v__45279_0 = v__45277; \n          } else {\n            if (v_index_45359 >= v_VLength_3) {\n              v__45279_0 = v__45277; \n            } else {\n              v__45279_0 = v__45268[v_index_45359]; \n            }\n          }\n          v__45281_0 = bool_and(v__45279_0, v__45267[(v_l_id_45260 + (64 * v_MWidthC_1 * v_w_id_45259) + (v_MWidthC_1 * v_i_45261))]); \n          v__45275 = bool_or(v__45281_0, v__45275); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45262 = 0; \n          v__45286[v_l_id_45260] = id(v__45275); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45263 = get_local_id(0); \n        int v_tmp_45362 = 0; \n        v__33398 = v_tmp_45362; \n        /* reduce_seq */\n        for (int v_i_45264 = 0; v_i_45264 < v_MWidthC_1; v_i_45264 = (1 + v_i_45264)) {\n          v__33398 = bool_or(v__33398, v__45286[(v_i_45264 + (v_MWidthC_1 * v_l_id_45263))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45265 = 0; \n          v__45291[v_w_id_45259] = doubleAndOr(v__33398, v__45270, v__45269[v_w_id_45259], v__45271); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45259 = atomic_inc(v_work_idx_3394); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__45266",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45267",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45268",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45269",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45270",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45271",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45273",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45286",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}