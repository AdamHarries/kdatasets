{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42419, const global int* restrict v__42420, const global int* restrict v__42421, const global int* restrict v__42422, int v__42423, int v__42424, global int* v__42438, global int* v__42426, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42428; \n  int v__42430; \n  /* Private Memory */\n  int v__42432_0;\n  \n  int v__42434_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3128 = v__42426; \n    local int v_w_id_42415; \n    if (get_local_id(0) == 0) {\n      v_w_id_42415 = atomic_inc(v_work_idx_3128); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42415 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3126; \n        v_work_idx_3126 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_42416 = atomic_inc(&(v_work_idx_3126)); \n        while((v_l_id_42416 < 32)){\n          int v_tmp_42475 = 0; \n          v__42428 = v_tmp_42475; \n          /* reduce_seq */\n          for (int v_i_42417 = 0; v_i_42417 < v_MWidthC_1; v_i_42417 = (1 + v_i_42417)) {\n            int v_tmp_42476 = 0; \n            v__42430 = v_tmp_42476; \n            int v_index_42477 = v__42419[(v_i_42417 + (32 * v_MWidthC_1 * v_w_id_42415) + (v_MWidthC_1 * v_l_id_42416))]; \n            if (v_index_42477 < 0) {\n              v__42432_0 = v__42430; \n            } else {\n              if (v_index_42477 >= v_VLength_3) {\n                v__42432_0 = v__42430; \n              } else {\n                v__42432_0 = v__42421[v_index_42477]; \n              }\n            }\n            v__42434_0 = bool_and(v__42432_0, v__42420[(v_i_42417 + (32 * v_MWidthC_1 * v_w_id_42415) + (v_MWidthC_1 * v_l_id_42416))]); \n            v__42428 = bool_or(v__42434_0, v__42428); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42418 = 0; \n            v__42438[(v_l_id_42416 + (32 * v_w_id_42415))] = doubleAndOr(v__42428, v__42423, v__42422[(v_l_id_42416 + (32 * v_w_id_42415))], v__42424); \n          }\n          /* end map_seq */\n          v_l_id_42416 = atomic_inc(&(v_work_idx_3126)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42415 = atomic_inc(v_work_idx_3128); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__42419",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42420",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42421",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42422",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__42423",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42424",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42426",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42438",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}