{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37039, const global int* restrict v__37040, const global int* restrict v__37041, const global int* restrict v__37042, int v__37043, int v__37044, global int* v__37061, global int* v__37051, local int* v__37056, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37047; \n  int v__37052; \n  int v__33398; \n  /* Private Memory */\n  int v__37049_0;\n  \n  for (int v_wg_id_37031 = get_group_id(0); v_wg_id_37031 < v_MHeight_2; v_wg_id_37031 = (v_wg_id_37031 + get_num_groups(0))) {\n    for (int v_l_id_37032 = get_local_id(0); v_l_id_37032 < v_MWidthC_1; v_l_id_37032 = (v_l_id_37032 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_37033 = 0; v_i_37033 < 16; v_i_37033 = (1 + v_i_37033)) {\n        int v_tmp_37122 = 0; \n        v__37047 = v_tmp_37122; \n        int v_index_37123 = v__37039[(v_l_id_37032 + (16 * v_MWidthC_1 * v_wg_id_37031) + (v_MWidthC_1 * v_i_37033))]; \n        if (v_index_37123 < 0) {\n          v__37049_0 = v__37047; \n        } else {\n          if (v_index_37123 >= v_VLength_3) {\n            v__37049_0 = v__37047; \n          } else {\n            v__37049_0 = v__37041[v_index_37123]; \n          }\n        }\n        v__37051[(v_i_37033 + (16 * v_MWidthC_1 * v_wg_id_37031) + (16 * v_l_id_37032))] = bool_and(v__37049_0, v__37040[(v_l_id_37032 + (16 * v_MWidthC_1 * v_wg_id_37031) + (v_MWidthC_1 * v_i_37033))]); \n      }\n      /* end map_seq */\n      int v_tmp_37124 = 0; \n      v__37052 = v_tmp_37124; \n      /* reduce_seq */\n      for (int v_i_37034 = 0; v_i_37034 < 16; v_i_37034 = (1 + v_i_37034)) {\n        v__37052 = bool_or(v__37052, v__37051[(v_i_37034 + (16 * v_MWidthC_1 * v_wg_id_37031) + (16 * v_l_id_37032))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37035 = 0; \n        v__37056[v_l_id_37032] = id(v__37052); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2621; \n      v_work_idx_2621 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_37036 = atomic_inc(&(v_work_idx_2621)); \n      while((v_l_id_37036 < 1)){\n        int v_tmp_37127 = 0; \n        v__33398 = v_tmp_37127; \n        /* reduce_seq */\n        for (int v_i_37037 = 0; v_i_37037 < v_MWidthC_1; v_i_37037 = (1 + v_i_37037)) {\n          v__33398 = bool_or(v__33398, v__37056[(v_i_37037 + (v_MWidthC_1 * v_l_id_37036))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37038 = 0; \n          v__37061[v_wg_id_37031] = doubleAndOr(v__33398, v__37043, v__37042[v_wg_id_37031], v__37044); \n        }\n        /* end map_seq */\n        v_l_id_37036 = atomic_inc(&(v_work_idx_2621)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37039",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37040",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37041",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37043",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37044",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37051",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37056",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}