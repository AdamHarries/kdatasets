{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34969, const global int* restrict v__34970, const global int* restrict v__34971, const global int* restrict v__34972, int v__34973, int v__34974, global int* v__34990, global int* v__34976, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34977; \n  int v__34980; \n  /* Private Memory */\n  int v__34982_0;\n  \n  int v__34984_0;\n  \n  int v__34988_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2430 = v__34976; \n    local int v_w_id_34965; \n    if (get_local_id(0) == 0) {\n      v_w_id_34965 = atomic_inc(v_work_idx_2430); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_34965 < v_MHeight_2)){\n      for (int v_l_id_34966 = get_local_id(0); v_l_id_34966 < 8; v_l_id_34966 = (v_l_id_34966 + get_local_size(0))) {\n        int v_tmp_35037 = 0; \n        v__34977 = v_tmp_35037; \n        /* reduce_while_seq */\n        for (int v_i_34967 = 0; v_i_34967 < v_MWidthC_1; v_i_34967 = (1 + v_i_34967)) {\n          v__34988_0 = check(v__34977, v__34969[(v_i_34967 + (8 * v_MWidthC_1 * v_w_id_34965) + (v_MWidthC_1 * v_l_id_34966))]); \n          if (v__34988_0) {\n          } else {\n            break;\n          }\n          int v_tmp_35038 = 0; \n          v__34980 = v_tmp_35038; \n          int v_index_35039 = v__34969[(v_i_34967 + (8 * v_MWidthC_1 * v_w_id_34965) + (v_MWidthC_1 * v_l_id_34966))]; \n          if (v_index_35039 < 0) {\n            v__34982_0 = v__34980; \n          } else {\n            if (v_index_35039 >= v_VLength_3) {\n              v__34982_0 = v__34980; \n            } else {\n              v__34982_0 = v__34971[v_index_35039]; \n            }\n          }\n          v__34984_0 = bool_and(v__34982_0, v__34970[(v_i_34967 + (8 * v_MWidthC_1 * v_w_id_34965) + (v_MWidthC_1 * v_l_id_34966))]); \n          v__34977 = bool_or(v__34984_0, v__34977); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34968 = 0; \n          v__34990[(v_l_id_34966 + (8 * v_w_id_34965))] = doubleAndOr(v__34977, v__34973, v__34972[(v_l_id_34966 + (8 * v_w_id_34965))], v__34974); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_34965 = atomic_inc(v_work_idx_2430); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__34969",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34970",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34971",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34972",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__34973",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34974",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34976",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__34990",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}