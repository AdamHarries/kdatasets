{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33705, const global int* restrict v__33706, const global int* restrict v__33707, const global int* restrict v__33708, int v__33709, int v__33710, global int* v__33727, global int* v__33717, local int* v__33722, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33713; \n  int v__33718; \n  int v__33398; \n  /* Private Memory */\n  int v__33715_0;\n  \n  for (int v_wg_id_33697 = get_group_id(0); v_wg_id_33697 < v_MHeight_2; v_wg_id_33697 = (v_wg_id_33697 + get_num_groups(0))) {\n    for (int v_l_id_33698 = get_local_id(0); v_l_id_33698 < v_MWidthC_1; v_l_id_33698 = (v_l_id_33698 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_33699 = 0; v_i_33699 < 8; v_i_33699 = (1 + v_i_33699)) {\n        int v_tmp_33788 = 0; \n        v__33713 = v_tmp_33788; \n        int v_index_33789 = v__33705[(v_l_id_33698 + (8 * v_MWidthC_1 * v_wg_id_33697) + (v_MWidthC_1 * v_i_33699))]; \n        if (v_index_33789 < 0) {\n          v__33715_0 = v__33713; \n        } else {\n          if (v_index_33789 >= v_VLength_3) {\n            v__33715_0 = v__33713; \n          } else {\n            v__33715_0 = v__33707[v_index_33789]; \n          }\n        }\n        v__33717[(v_i_33699 + (8 * v_MWidthC_1 * v_wg_id_33697) + (8 * v_l_id_33698))] = bool_and(v__33715_0, v__33706[(v_l_id_33698 + (8 * v_MWidthC_1 * v_wg_id_33697) + (v_MWidthC_1 * v_i_33699))]); \n      }\n      /* end map_seq */\n      int v_tmp_33790 = 0; \n      v__33718 = v_tmp_33790; \n      /* reduce_seq */\n      for (int v_i_33700 = 0; v_i_33700 < 8; v_i_33700 = (1 + v_i_33700)) {\n        v__33718 = bool_or(v__33718, v__33717[(v_i_33700 + (8 * v_MWidthC_1 * v_wg_id_33697) + (8 * v_l_id_33698))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33701 = 0; \n        v__33722[v_l_id_33698] = id(v__33718); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2309; \n      v_work_idx_2309 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_33702 = atomic_inc(&(v_work_idx_2309)); \n      while((v_l_id_33702 < 1)){\n        int v_tmp_33793 = 0; \n        v__33398 = v_tmp_33793; \n        /* reduce_seq */\n        for (int v_i_33703 = 0; v_i_33703 < v_MWidthC_1; v_i_33703 = (1 + v_i_33703)) {\n          v__33398 = bool_or(v__33398, v__33722[(v_i_33703 + (v_MWidthC_1 * v_l_id_33702))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33704 = 0; \n          v__33727[v_wg_id_33697] = doubleAndOr(v__33398, v__33709, v__33708[v_wg_id_33697], v__33710); \n        }\n        /* end map_seq */\n        v_l_id_33702 = atomic_inc(&(v_work_idx_2309)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__33705",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33706",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33707",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33708",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33709",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33710",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33717",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33722",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}