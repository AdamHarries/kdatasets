{
  "name" : "swrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33380, const global int* restrict v__33381, const global int* restrict v__33382, const global int* restrict v__33383, int v__33384, int v__33385, global int* v__33403, global int* v__33392, local int* v__33397, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33388; \n  int v__33393; \n  int v__33398; \n  /* Private Memory */\n  int v__33390_0;\n  \n  for (int v_wg_id_33372 = get_group_id(0); v_wg_id_33372 < v_MHeight_2; v_wg_id_33372 = (v_wg_id_33372 + get_num_groups(0))) {\n    for (int v_l_id_33373 = get_local_id(0); v_l_id_33373 < v_MWidthC_1; v_l_id_33373 = (v_l_id_33373 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_33374 = 0; v_i_33374 < 8; v_i_33374 = (1 + v_i_33374)) {\n        int v_tmp_33468 = 0; \n        v__33388 = v_tmp_33468; \n        int v_index_33469 = v__33380[(v_l_id_33373 + (8 * v_MWidthC_1 * v_wg_id_33372) + (v_MWidthC_1 * v_i_33374))]; \n        if (v_index_33469 < 0) {\n          v__33390_0 = v__33388; \n        } else {\n          if (v_index_33469 >= v_VLength_3) {\n            v__33390_0 = v__33388; \n          } else {\n            v__33390_0 = v__33382[v_index_33469]; \n          }\n        }\n        v__33392[(v_i_33374 + (8 * v_MWidthC_1 * v_wg_id_33372) + (8 * v_l_id_33373))] = bool_and(v__33390_0, v__33381[(v_l_id_33373 + (8 * v_MWidthC_1 * v_wg_id_33372) + (v_MWidthC_1 * v_i_33374))]); \n      }\n      /* end map_seq */\n      int v_tmp_33470 = 0; \n      v__33393 = v_tmp_33470; \n      /* reduce_seq */\n      for (int v_i_33375 = 0; v_i_33375 < 8; v_i_33375 = (1 + v_i_33375)) {\n        v__33393 = bool_or(v__33393, v__33392[(v_i_33375 + (8 * v_MWidthC_1 * v_wg_id_33372) + (8 * v_l_id_33373))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33376 = 0; \n        v__33397[v_l_id_33373] = id(v__33393); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_33377 = get_local_id(0); \n      int v_tmp_33473 = 0; \n      v__33398 = v_tmp_33473; \n      /* reduce_seq */\n      for (int v_i_33378 = 0; v_i_33378 < v_MWidthC_1; v_i_33378 = (1 + v_i_33378)) {\n        v__33398 = bool_or(v__33398, v__33397[(v_i_33378 + (v_MWidthC_1 * v_l_id_33377))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33379 = 0; \n        v__33403[v_wg_id_33372] = doubleAndOr(v__33398, v__33384, v__33383[v_wg_id_33372], v__33385); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__33380",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33381",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33382",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33383",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33384",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33385",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33392",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33403",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33397",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}