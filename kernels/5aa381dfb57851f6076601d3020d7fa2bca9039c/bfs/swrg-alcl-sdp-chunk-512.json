{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54018, const global int* restrict v__54019, const global int* restrict v__54020, const global int* restrict v__54021, int v__54022, int v__54023, global int* v__54036, global int* v__54030, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54026; \n  int v__54031; \n  /* Private Memory */\n  int v__54028_0;\n  \n  for (int v_wg_id_54013 = get_group_id(0); v_wg_id_54013 < v_MHeight_2; v_wg_id_54013 = (v_wg_id_54013 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4211; \n      v_work_idx_4211 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_54014 = atomic_inc(&(v_work_idx_4211)); \n      while((v_l_id_54014 < 512)){\n        /* map_seq */\n        for (int v_i_54015 = 0; v_i_54015 < v_MWidthC_1; v_i_54015 = (1 + v_i_54015)) {\n          int v_tmp_54076 = 0; \n          v__54026 = v_tmp_54076; \n          int v_index_54077 = v__54018[(v_i_54015 + (512 * v_MWidthC_1 * v_wg_id_54013) + (v_MWidthC_1 * v_l_id_54014))]; \n          if (v_index_54077 < 0) {\n            v__54028_0 = v__54026; \n          } else {\n            if (v_index_54077 >= v_VLength_3) {\n              v__54028_0 = v__54026; \n            } else {\n              v__54028_0 = v__54020[v_index_54077]; \n            }\n          }\n          v__54030[(v_i_54015 + (512 * v_MWidthC_1 * v_wg_id_54013) + (v_MWidthC_1 * v_l_id_54014))] = bool_and(v__54028_0, v__54019[(v_i_54015 + (512 * v_MWidthC_1 * v_wg_id_54013) + (v_MWidthC_1 * v_l_id_54014))]); \n        }\n        /* end map_seq */\n        int v_tmp_54078 = 0; \n        v__54031 = v_tmp_54078; \n        /* reduce_seq */\n        for (int v_i_54016 = 0; v_i_54016 < v_MWidthC_1; v_i_54016 = (1 + v_i_54016)) {\n          v__54031 = bool_or(v__54031, v__54030[(v_i_54016 + (512 * v_MWidthC_1 * v_wg_id_54013) + (v_MWidthC_1 * v_l_id_54014))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54017 = 0; \n          v__54036[(v_l_id_54014 + (512 * v_wg_id_54013))] = doubleAndOr(v__54031, v__54022, v__54021[(v_l_id_54014 + (512 * v_wg_id_54013))], v__54023); \n        }\n        /* end map_seq */\n        v_l_id_54014 = atomic_inc(&(v_work_idx_4211)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54018",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54019",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54020",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54021",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__54022",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54023",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54030",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54036",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}