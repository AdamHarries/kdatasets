{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__48061, const global int* restrict v__48062, const global int* restrict v__48063, const global int* restrict v__48064, int v__48065, int v__48066, global int* v__48085, local int* v__48080, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48069; \n  int v__48071; \n  int v__33398; \n  /* Private Memory */\n  int v__48073_0;\n  \n  int v__48075_0;\n  \n  int v__48079_0;\n  \n  for (int v_wg_id_48054 = get_group_id(0); v_wg_id_48054 < v_MHeight_2; v_wg_id_48054 = (v_wg_id_48054 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3658; \n      v_work_idx_3658 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_48055 = atomic_inc(&(v_work_idx_3658)); \n      while((v_l_id_48055 < v_MWidthC_1)){\n        int v_tmp_48141 = 0; \n        v__48069 = v_tmp_48141; \n        /* reduce_while_seq */\n        for (int v_i_48056 = 0; v_i_48056 < 128; v_i_48056 = (1 + v_i_48056)) {\n          v__48079_0 = check(v__48069, v__48061[(v_l_id_48055 + (128 * v_MWidthC_1 * v_wg_id_48054) + (v_MWidthC_1 * v_i_48056))]); \n          if (v__48079_0) {\n          } else {\n            break;\n          }\n          int v_tmp_48142 = 0; \n          v__48071 = v_tmp_48142; \n          int v_index_48143 = v__48061[(v_l_id_48055 + (128 * v_MWidthC_1 * v_wg_id_48054) + (v_MWidthC_1 * v_i_48056))]; \n          if (v_index_48143 < 0) {\n            v__48073_0 = v__48071; \n          } else {\n            if (v_index_48143 >= v_VLength_3) {\n              v__48073_0 = v__48071; \n            } else {\n              v__48073_0 = v__48063[v_index_48143]; \n            }\n          }\n          v__48075_0 = bool_and(v__48073_0, v__48062[(v_l_id_48055 + (128 * v_MWidthC_1 * v_wg_id_48054) + (v_MWidthC_1 * v_i_48056))]); \n          v__48069 = bool_or(v__48075_0, v__48069); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48057 = 0; \n          v__48080[v_l_id_48055] = id(v__48069); \n        }\n        /* end map_seq */\n        v_l_id_48055 = atomic_inc(&(v_work_idx_3658)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3653; \n      v_work_idx_3653 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_48058 = atomic_inc(&(v_work_idx_3653)); \n      while((v_l_id_48058 < 1)){\n        int v_tmp_48146 = 0; \n        v__33398 = v_tmp_48146; \n        /* reduce_seq */\n        for (int v_i_48059 = 0; v_i_48059 < v_MWidthC_1; v_i_48059 = (1 + v_i_48059)) {\n          v__33398 = bool_or(v__33398, v__48080[(v_i_48059 + (v_MWidthC_1 * v_l_id_48058))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48060 = 0; \n          v__48085[v_wg_id_48054] = doubleAndOr(v__33398, v__48065, v__48064[v_wg_id_48054], v__48066); \n        }\n        /* end map_seq */\n        v_l_id_48058 = atomic_inc(&(v_work_idx_3653)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__48061",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48062",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48063",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48065",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48066",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__48085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48080",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}