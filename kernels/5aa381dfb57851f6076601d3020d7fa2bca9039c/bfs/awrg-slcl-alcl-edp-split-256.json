{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__52247, const global int* restrict v__52248, const global int* restrict v__52249, const global int* restrict v__52250, int v__52251, int v__52252, global int* v__52272, global int* v__52254, local int* v__52267, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52256; \n  int v__52258; \n  int v__33398; \n  /* Private Memory */\n  int v__52260_0;\n  \n  int v__52262_0;\n  \n  int v__52266_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4049 = v__52254; \n    local int v_w_id_52240; \n    if (get_local_id(0) == 0) {\n      v_w_id_52240 = atomic_inc(v_work_idx_4049); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52240 < v_MHeight_2)){\n      for (int v_l_id_52241 = get_local_id(0); v_l_id_52241 < v_MWidthC_1; v_l_id_52241 = (v_l_id_52241 + get_local_size(0))) {\n        int v_tmp_52334 = 0; \n        v__52256 = v_tmp_52334; \n        /* reduce_while_seq */\n        for (int v_i_52242 = 0; v_i_52242 < 256; v_i_52242 = (1 + v_i_52242)) {\n          v__52266_0 = check(v__52256, v__52247[(v_l_id_52241 + (256 * v_MWidthC_1 * v_w_id_52240) + (v_MWidthC_1 * v_i_52242))]); \n          if (v__52266_0) {\n          } else {\n            break;\n          }\n          int v_tmp_52335 = 0; \n          v__52258 = v_tmp_52335; \n          int v_index_52336 = v__52247[(v_l_id_52241 + (256 * v_MWidthC_1 * v_w_id_52240) + (v_MWidthC_1 * v_i_52242))]; \n          if (v_index_52336 < 0) {\n            v__52260_0 = v__52258; \n          } else {\n            if (v_index_52336 >= v_VLength_3) {\n              v__52260_0 = v__52258; \n            } else {\n              v__52260_0 = v__52249[v_index_52336]; \n            }\n          }\n          v__52262_0 = bool_and(v__52260_0, v__52248[(v_l_id_52241 + (256 * v_MWidthC_1 * v_w_id_52240) + (v_MWidthC_1 * v_i_52242))]); \n          v__52256 = bool_or(v__52262_0, v__52256); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52243 = 0; \n          v__52267[v_l_id_52241] = id(v__52256); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4043; \n        v_work_idx_4043 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_52244 = atomic_inc(&(v_work_idx_4043)); \n        while((v_l_id_52244 < 1)){\n          int v_tmp_52339 = 0; \n          v__33398 = v_tmp_52339; \n          /* reduce_seq */\n          for (int v_i_52245 = 0; v_i_52245 < v_MWidthC_1; v_i_52245 = (1 + v_i_52245)) {\n            v__33398 = bool_or(v__33398, v__52267[(v_i_52245 + (v_MWidthC_1 * v_l_id_52244))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52246 = 0; \n            v__52272[v_w_id_52240] = doubleAndOr(v__33398, v__52251, v__52250[v_w_id_52240], v__52252); \n          }\n          /* end map_seq */\n          v_l_id_52244 = atomic_inc(&(v_work_idx_4043)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52240 = atomic_inc(v_work_idx_4049); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__52247",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52248",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52249",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52251",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52252",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52254",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52272",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52267",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}