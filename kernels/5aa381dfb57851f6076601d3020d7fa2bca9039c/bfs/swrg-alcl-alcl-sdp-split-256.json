{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51207, const global int* restrict v__51208, const global int* restrict v__51209, const global int* restrict v__51210, int v__51211, int v__51212, global int* v__51229, global int* v__51219, local int* v__51224, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51215; \n  int v__51220; \n  int v__33398; \n  /* Private Memory */\n  int v__51217_0;\n  \n  for (int v_wg_id_51199 = get_group_id(0); v_wg_id_51199 < v_MHeight_2; v_wg_id_51199 = (v_wg_id_51199 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3950; \n      v_work_idx_3950 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_51200 = atomic_inc(&(v_work_idx_3950)); \n      while((v_l_id_51200 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_51201 = 0; v_i_51201 < 256; v_i_51201 = (1 + v_i_51201)) {\n          int v_tmp_51282 = 0; \n          v__51215 = v_tmp_51282; \n          int v_index_51283 = v__51207[(v_l_id_51200 + (256 * v_MWidthC_1 * v_wg_id_51199) + (v_MWidthC_1 * v_i_51201))]; \n          if (v_index_51283 < 0) {\n            v__51217_0 = v__51215; \n          } else {\n            if (v_index_51283 >= v_VLength_3) {\n              v__51217_0 = v__51215; \n            } else {\n              v__51217_0 = v__51209[v_index_51283]; \n            }\n          }\n          v__51219[(v_i_51201 + (256 * v_MWidthC_1 * v_wg_id_51199) + (256 * v_l_id_51200))] = bool_and(v__51217_0, v__51208[(v_l_id_51200 + (256 * v_MWidthC_1 * v_wg_id_51199) + (v_MWidthC_1 * v_i_51201))]); \n        }\n        /* end map_seq */\n        int v_tmp_51284 = 0; \n        v__51220 = v_tmp_51284; \n        /* reduce_seq */\n        for (int v_i_51202 = 0; v_i_51202 < 256; v_i_51202 = (1 + v_i_51202)) {\n          v__51220 = bool_or(v__51220, v__51219[(v_i_51202 + (256 * v_MWidthC_1 * v_wg_id_51199) + (256 * v_l_id_51200))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51203 = 0; \n          v__51224[v_l_id_51200] = id(v__51220); \n        }\n        /* end map_seq */\n        v_l_id_51200 = atomic_inc(&(v_work_idx_3950)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3944; \n      v_work_idx_3944 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_51204 = atomic_inc(&(v_work_idx_3944)); \n      while((v_l_id_51204 < 1)){\n        int v_tmp_51287 = 0; \n        v__33398 = v_tmp_51287; \n        /* reduce_seq */\n        for (int v_i_51205 = 0; v_i_51205 < v_MWidthC_1; v_i_51205 = (1 + v_i_51205)) {\n          v__33398 = bool_or(v__33398, v__51224[(v_i_51205 + (v_MWidthC_1 * v_l_id_51204))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51206 = 0; \n          v__51229[v_wg_id_51199] = doubleAndOr(v__33398, v__51211, v__51210[v_wg_id_51199], v__51212); \n        }\n        /* end map_seq */\n        v_l_id_51204 = atomic_inc(&(v_work_idx_3944)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__51207",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51208",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51209",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51211",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51212",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51219",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__51229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51224",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}