{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__55581, const global int* restrict v__55582, const global int* restrict v__55583, const global int* restrict v__55584, int v__55585, int v__55586, global int* v__55606, global int* v__55588, local int* v__55601, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55590; \n  int v__55592; \n  int v__33398; \n  /* Private Memory */\n  int v__55594_0;\n  \n  int v__55596_0;\n  \n  int v__55600_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4361 = v__55588; \n    local int v_w_id_55574; \n    if (get_local_id(0) == 0) {\n      v_w_id_55574 = atomic_inc(v_work_idx_4361); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55574 < v_MHeight_2)){\n      for (int v_l_id_55575 = get_local_id(0); v_l_id_55575 < v_MWidthC_1; v_l_id_55575 = (v_l_id_55575 + get_local_size(0))) {\n        int v_tmp_55668 = 0; \n        v__55590 = v_tmp_55668; \n        /* reduce_while_seq */\n        for (int v_i_55576 = 0; v_i_55576 < 512; v_i_55576 = (1 + v_i_55576)) {\n          v__55600_0 = check(v__55590, v__55581[(v_l_id_55575 + (512 * v_MWidthC_1 * v_w_id_55574) + (v_MWidthC_1 * v_i_55576))]); \n          if (v__55600_0) {\n          } else {\n            break;\n          }\n          int v_tmp_55669 = 0; \n          v__55592 = v_tmp_55669; \n          int v_index_55670 = v__55581[(v_l_id_55575 + (512 * v_MWidthC_1 * v_w_id_55574) + (v_MWidthC_1 * v_i_55576))]; \n          if (v_index_55670 < 0) {\n            v__55594_0 = v__55592; \n          } else {\n            if (v_index_55670 >= v_VLength_3) {\n              v__55594_0 = v__55592; \n            } else {\n              v__55594_0 = v__55583[v_index_55670]; \n            }\n          }\n          v__55596_0 = bool_and(v__55594_0, v__55582[(v_l_id_55575 + (512 * v_MWidthC_1 * v_w_id_55574) + (v_MWidthC_1 * v_i_55576))]); \n          v__55590 = bool_or(v__55596_0, v__55590); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55577 = 0; \n          v__55601[v_l_id_55575] = id(v__55590); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4355; \n        v_work_idx_4355 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_55578 = atomic_inc(&(v_work_idx_4355)); \n        while((v_l_id_55578 < 1)){\n          int v_tmp_55673 = 0; \n          v__33398 = v_tmp_55673; \n          /* reduce_seq */\n          for (int v_i_55579 = 0; v_i_55579 < v_MWidthC_1; v_i_55579 = (1 + v_i_55579)) {\n            v__33398 = bool_or(v__33398, v__55601[(v_i_55579 + (v_MWidthC_1 * v_l_id_55578))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_55580 = 0; \n            v__55606[v_w_id_55574] = doubleAndOr(v__33398, v__55585, v__55584[v_w_id_55574], v__55586); \n          }\n          /* end map_seq */\n          v_l_id_55578 = atomic_inc(&(v_work_idx_4355)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55574 = atomic_inc(v_work_idx_4361); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__55581",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55582",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55583",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55585",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55586",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55588",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55606",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55601",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}