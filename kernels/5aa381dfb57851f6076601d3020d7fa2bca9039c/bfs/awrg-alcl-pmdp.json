{
  "name" : "awrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33083, const global int* restrict v__33084, const global int* restrict v__33085, const global int* restrict v__33086, int v__33087, int v__33088, global int* v__33102, global int* v__33090, global int* v__33096, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33092; \n  int v__33097; \n  /* Private Memory */\n  int v__33094_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2264 = v__33090; \n    local int v_w_id_33079; \n    if (get_local_id(0) == 0) {\n      v_w_id_33079 = atomic_inc(v_work_idx_2264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_33079 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_l_id_2262; \n        v_l_id_2262 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_33080 = atomic_inc(&(v_l_id_2262)); \n        while((v_l_id_33080 < v_MWidthC_1)){\n          int v_tmp_33131 = 0; \n          v__33092 = v_tmp_33131; \n          int v_index_33132 = v__33083[(v_l_id_33080 + (v_MWidthC_1 * v_w_id_33079))]; \n          if (v_index_33132 < 0) {\n            v__33094_0 = v__33092; \n          } else {\n            if (v_index_33132 >= v_VLength_3) {\n              v__33094_0 = v__33092; \n            } else {\n              v__33094_0 = v__33085[v_index_33132]; \n            }\n          }\n          v__33096[(v_l_id_33080 + (v_MWidthC_1 * v_w_id_33079))] = bool_and(v__33094_0, v__33084[(v_l_id_33080 + (v_MWidthC_1 * v_w_id_33079))]); \n          v_l_id_33080 = atomic_inc(&(v_l_id_2262)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      int v_tmp_33133 = 0; \n      v__33097 = v_tmp_33133; \n      /* reduce_seq */\n      for (int v_i_33081 = 0; v_i_33081 < v_MWidthC_1; v_i_33081 = (1 + v_i_33081)) {\n        v__33097 = bool_or(v__33097, v__33096[(v_i_33081 + (v_MWidthC_1 * v_w_id_33079))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33082 = 0; \n        v__33102[v_w_id_33079] = doubleAndOr(v__33097, v__33087, v__33086[v_w_id_33079], v__33088); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_33079 = atomic_inc(v_work_idx_2264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__33083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33084",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33085",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33087",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33088",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33090",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__33096",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}