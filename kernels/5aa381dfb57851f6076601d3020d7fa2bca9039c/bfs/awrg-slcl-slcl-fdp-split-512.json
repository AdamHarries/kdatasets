{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55163, const global int* restrict v__55164, const global int* restrict v__55165, const global int* restrict v__55166, int v__55167, int v__55168, global int* v__55186, global int* v__55170, local int* v__55181, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55172; \n  int v__55174; \n  int v__33398; \n  /* Private Memory */\n  int v__55176_0;\n  \n  int v__55178_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4321 = v__55170; \n    local int v_w_id_55156; \n    if (get_local_id(0) == 0) {\n      v_w_id_55156 = atomic_inc(v_work_idx_4321); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55156 < v_MHeight_2)){\n      for (int v_l_id_55157 = get_local_id(0); v_l_id_55157 < v_MWidthC_1; v_l_id_55157 = (v_l_id_55157 + get_local_size(0))) {\n        int v_tmp_55249 = 0; \n        v__55172 = v_tmp_55249; \n        /* reduce_seq */\n        for (int v_i_55158 = 0; v_i_55158 < 512; v_i_55158 = (1 + v_i_55158)) {\n          int v_tmp_55250 = 0; \n          v__55174 = v_tmp_55250; \n          int v_index_55251 = v__55163[(v_l_id_55157 + (512 * v_MWidthC_1 * v_w_id_55156) + (v_MWidthC_1 * v_i_55158))]; \n          if (v_index_55251 < 0) {\n            v__55176_0 = v__55174; \n          } else {\n            if (v_index_55251 >= v_VLength_3) {\n              v__55176_0 = v__55174; \n            } else {\n              v__55176_0 = v__55165[v_index_55251]; \n            }\n          }\n          v__55178_0 = bool_and(v__55176_0, v__55164[(v_l_id_55157 + (512 * v_MWidthC_1 * v_w_id_55156) + (v_MWidthC_1 * v_i_55158))]); \n          v__55172 = bool_or(v__55178_0, v__55172); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55159 = 0; \n          v__55181[v_l_id_55157] = id(v__55172); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_55160 = get_local_id(0); \n        int v_tmp_55254 = 0; \n        v__33398 = v_tmp_55254; \n        /* reduce_seq */\n        for (int v_i_55161 = 0; v_i_55161 < v_MWidthC_1; v_i_55161 = (1 + v_i_55161)) {\n          v__33398 = bool_or(v__33398, v__55181[(v_i_55161 + (v_MWidthC_1 * v_l_id_55160))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55162 = 0; \n          v__55186[v_w_id_55156] = doubleAndOr(v__33398, v__55167, v__55166[v_w_id_55156], v__55168); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55156 = atomic_inc(v_work_idx_4321); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55163",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55164",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55165",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55167",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55168",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55170",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55181",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}