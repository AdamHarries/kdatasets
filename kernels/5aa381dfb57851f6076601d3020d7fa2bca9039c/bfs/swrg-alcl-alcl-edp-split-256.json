{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nkernel void KERNEL(const global int* restrict v__51395, const global int* restrict v__51396, const global int* restrict v__51397, const global int* restrict v__51398, int v__51399, int v__51400, global int* v__51419, local int* v__51414, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51403; \n  int v__51405; \n  int v__33398; \n  /* Private Memory */\n  int v__51407_0;\n  \n  int v__51409_0;\n  \n  int v__51413_0;\n  \n  for (int v_wg_id_51388 = get_group_id(0); v_wg_id_51388 < v_MHeight_2; v_wg_id_51388 = (v_wg_id_51388 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3970; \n      v_work_idx_3970 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_51389 = atomic_inc(&(v_work_idx_3970)); \n      while((v_l_id_51389 < v_MWidthC_1)){\n        int v_tmp_51475 = 0; \n        v__51403 = v_tmp_51475; \n        /* reduce_while_seq */\n        for (int v_i_51390 = 0; v_i_51390 < 256; v_i_51390 = (1 + v_i_51390)) {\n          v__51413_0 = check(v__51403, v__51395[(v_l_id_51389 + (256 * v_MWidthC_1 * v_wg_id_51388) + (v_MWidthC_1 * v_i_51390))]); \n          if (v__51413_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51476 = 0; \n          v__51405 = v_tmp_51476; \n          int v_index_51477 = v__51395[(v_l_id_51389 + (256 * v_MWidthC_1 * v_wg_id_51388) + (v_MWidthC_1 * v_i_51390))]; \n          if (v_index_51477 < 0) {\n            v__51407_0 = v__51405; \n          } else {\n            if (v_index_51477 >= v_VLength_3) {\n              v__51407_0 = v__51405; \n            } else {\n              v__51407_0 = v__51397[v_index_51477]; \n            }\n          }\n          v__51409_0 = bool_and(v__51407_0, v__51396[(v_l_id_51389 + (256 * v_MWidthC_1 * v_wg_id_51388) + (v_MWidthC_1 * v_i_51390))]); \n          v__51403 = bool_or(v__51409_0, v__51403); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51391 = 0; \n          v__51414[v_l_id_51389] = id(v__51403); \n        }\n        /* end map_seq */\n        v_l_id_51389 = atomic_inc(&(v_work_idx_3970)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3965; \n      v_work_idx_3965 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_51392 = atomic_inc(&(v_work_idx_3965)); \n      while((v_l_id_51392 < 1)){\n        int v_tmp_51480 = 0; \n        v__33398 = v_tmp_51480; \n        /* reduce_seq */\n        for (int v_i_51393 = 0; v_i_51393 < v_MWidthC_1; v_i_51393 = (1 + v_i_51393)) {\n          v__33398 = bool_or(v__33398, v__51414[(v_i_51393 + (v_MWidthC_1 * v_l_id_51392))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51394 = 0; \n          v__51419[v_wg_id_51388] = doubleAndOr(v__33398, v__51399, v__51398[v_wg_id_51388], v__51400); \n        }\n        /* end map_seq */\n        v_l_id_51392 = atomic_inc(&(v_work_idx_3965)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__51395",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51396",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51397",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51398",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51399",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51400",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__51419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51414",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}