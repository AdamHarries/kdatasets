{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49816, const global int* restrict v__49817, const global int* restrict v__49818, const global int* restrict v__49819, int v__49820, int v__49821, global int* v__49834, global int* v__49828, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49824; \n  int v__49829; \n  /* Private Memory */\n  int v__49826_0;\n  \n  for (int v_wg_id_49811 = get_group_id(0); v_wg_id_49811 < v_MHeight_2; v_wg_id_49811 = (v_wg_id_49811 + get_num_groups(0))) {\n    for (int v_l_id_49812 = get_local_id(0); v_l_id_49812 < 256; v_l_id_49812 = (v_l_id_49812 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_49813 = 0; v_i_49813 < v_MWidthC_1; v_i_49813 = (1 + v_i_49813)) {\n        int v_tmp_49878 = 0; \n        v__49824 = v_tmp_49878; \n        int v_index_49879 = v__49816[(v_i_49813 + (256 * v_MWidthC_1 * v_wg_id_49811) + (v_MWidthC_1 * v_l_id_49812))]; \n        if (v_index_49879 < 0) {\n          v__49826_0 = v__49824; \n        } else {\n          if (v_index_49879 >= v_VLength_3) {\n            v__49826_0 = v__49824; \n          } else {\n            v__49826_0 = v__49818[v_index_49879]; \n          }\n        }\n        v__49828[(v_i_49813 + (256 * v_MWidthC_1 * v_wg_id_49811) + (v_MWidthC_1 * v_l_id_49812))] = bool_and(v__49826_0, v__49817[(v_i_49813 + (256 * v_MWidthC_1 * v_wg_id_49811) + (v_MWidthC_1 * v_l_id_49812))]); \n      }\n      /* end map_seq */\n      int v_tmp_49880 = 0; \n      v__49829 = v_tmp_49880; \n      /* reduce_seq */\n      for (int v_i_49814 = 0; v_i_49814 < v_MWidthC_1; v_i_49814 = (1 + v_i_49814)) {\n        v__49829 = bool_or(v__49829, v__49828[(v_i_49814 + (256 * v_MWidthC_1 * v_wg_id_49811) + (v_MWidthC_1 * v_l_id_49812))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_49815 = 0; \n        v__49834[(v_l_id_49812 + (256 * v_wg_id_49811))] = doubleAndOr(v__49829, v__49820, v__49819[(v_l_id_49812 + (256 * v_wg_id_49811))], v__49821); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__49816",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49817",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49818",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49819",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__49820",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49821",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49828",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__49834",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}