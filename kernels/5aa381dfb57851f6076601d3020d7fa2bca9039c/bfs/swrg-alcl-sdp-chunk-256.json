{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50684, const global int* restrict v__50685, const global int* restrict v__50686, const global int* restrict v__50687, int v__50688, int v__50689, global int* v__50702, global int* v__50696, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50692; \n  int v__50697; \n  /* Private Memory */\n  int v__50694_0;\n  \n  for (int v_wg_id_50679 = get_group_id(0); v_wg_id_50679 < v_MHeight_2; v_wg_id_50679 = (v_wg_id_50679 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3899; \n      v_work_idx_3899 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_50680 = atomic_inc(&(v_work_idx_3899)); \n      while((v_l_id_50680 < 256)){\n        /* map_seq */\n        for (int v_i_50681 = 0; v_i_50681 < v_MWidthC_1; v_i_50681 = (1 + v_i_50681)) {\n          int v_tmp_50742 = 0; \n          v__50692 = v_tmp_50742; \n          int v_index_50743 = v__50684[(v_i_50681 + (256 * v_MWidthC_1 * v_wg_id_50679) + (v_MWidthC_1 * v_l_id_50680))]; \n          if (v_index_50743 < 0) {\n            v__50694_0 = v__50692; \n          } else {\n            if (v_index_50743 >= v_VLength_3) {\n              v__50694_0 = v__50692; \n            } else {\n              v__50694_0 = v__50686[v_index_50743]; \n            }\n          }\n          v__50696[(v_i_50681 + (256 * v_MWidthC_1 * v_wg_id_50679) + (v_MWidthC_1 * v_l_id_50680))] = bool_and(v__50694_0, v__50685[(v_i_50681 + (256 * v_MWidthC_1 * v_wg_id_50679) + (v_MWidthC_1 * v_l_id_50680))]); \n        }\n        /* end map_seq */\n        int v_tmp_50744 = 0; \n        v__50697 = v_tmp_50744; \n        /* reduce_seq */\n        for (int v_i_50682 = 0; v_i_50682 < v_MWidthC_1; v_i_50682 = (1 + v_i_50682)) {\n          v__50697 = bool_or(v__50697, v__50696[(v_i_50682 + (256 * v_MWidthC_1 * v_wg_id_50679) + (v_MWidthC_1 * v_l_id_50680))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50683 = 0; \n          v__50702[(v_l_id_50680 + (256 * v_wg_id_50679))] = doubleAndOr(v__50697, v__50688, v__50687[(v_l_id_50680 + (256 * v_wg_id_50679))], v__50689); \n        }\n        /* end map_seq */\n        v_l_id_50680 = atomic_inc(&(v_work_idx_3899)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__50684",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50685",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50686",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50687",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__50688",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50689",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__50696",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__50702",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}