{
  "name" : "swrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27037, const global float* restrict v__27038, const global float* restrict v__27039, const global float* restrict v__27040, float v__27041, float v__27042, global float* v__27057, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27044; \n  float v__27047; \n  /* Private Memory */\n  float v__27049_0;\n  \n  float v__27051_0;\n  \n  int v__27055_0;\n  \n  for (int v_wg_id_27033 = get_group_id(0); v_wg_id_27033 < v_MHeight_2; v_wg_id_27033 = (v_wg_id_27033 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1688; \n      v_work_idx_1688 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_27034 = atomic_inc(&(v_work_idx_1688)); \n      while((v_l_id_27034 < 256)){\n        float v_tmp_27102 = 0.0f; \n        v__27044 = v_tmp_27102; \n        /* reduce_while_seq */\n        for (int v_i_27035 = 0; v_i_27035 < v_MWidthC_1; v_i_27035 = (1 + v_i_27035)) {\n          v__27055_0 = check(v__27044, v__27037[(v_i_27035 + (256 * v_MWidthC_1 * v_wg_id_27033) + (v_MWidthC_1 * v_l_id_27034))]); \n          if (v__27055_0) {\n          } else {\n            break;\n          }\n          float v_tmp_27103 = 0.0f; \n          v__27047 = v_tmp_27103; \n          int v_index_27104 = v__27037[(v_i_27035 + (256 * v_MWidthC_1 * v_wg_id_27033) + (v_MWidthC_1 * v_l_id_27034))]; \n          if (v_index_27104 < 0) {\n            v__27049_0 = v__27047; \n          } else {\n            if (v_index_27104 >= v_VLength_3) {\n              v__27049_0 = v__27047; \n            } else {\n              v__27049_0 = v__27039[v_index_27104]; \n            }\n          }\n          v__27051_0 = mult(v__27049_0, v__27038[(v_i_27035 + (256 * v_MWidthC_1 * v_wg_id_27033) + (v_MWidthC_1 * v_l_id_27034))]); \n          v__27044 = add(v__27051_0, v__27044); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27036 = 0; \n          v__27057[(v_l_id_27034 + (256 * v_wg_id_27033))] = doubleMultiplyAdd(v__27044, v__27041, v__27040[(v_l_id_27034 + (256 * v_wg_id_27033))], v__27042); \n        }\n        /* end map_seq */\n        v_l_id_27034 = atomic_inc(&(v_work_idx_1688)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__27037",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27038",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27039",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27040",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__27041",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27042",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__27057",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}