{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25932, const global float* restrict v__25933, const global float* restrict v__25934, const global float* restrict v__25935, float v__25936, float v__25937, global float* v__25957, global int* v__25939, local float* v__25952, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25941; \n  float v__25943; \n  float v__9610; \n  /* Private Memory */\n  float v__25945_0;\n  \n  float v__25947_0;\n  \n  int v__25951_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1601 = v__25939; \n    local int v_w_id_25925; \n    if (get_local_id(0) == 0) {\n      v_w_id_25925 = atomic_inc(v_work_idx_1601); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25925 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1599; \n        v_work_idx_1599 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_25926 = atomic_inc(&(v_work_idx_1599)); \n        while((v_l_id_25926 < v_MWidthC_1)){\n          float v_tmp_26011 = 0.0f; \n          v__25941 = v_tmp_26011; \n          /* reduce_while_seq */\n          for (int v_i_25927 = 0; v_i_25927 < 128; v_i_25927 = (1 + v_i_25927)) {\n            v__25951_0 = check(v__25941, v__25932[(v_l_id_25926 + (128 * v_MWidthC_1 * v_w_id_25925) + (v_MWidthC_1 * v_i_25927))]); \n            if (v__25951_0) {\n            } else {\n              break;\n            }\n            float v_tmp_26012 = 0.0f; \n            v__25943 = v_tmp_26012; \n            int v_index_26013 = v__25932[(v_l_id_25926 + (128 * v_MWidthC_1 * v_w_id_25925) + (v_MWidthC_1 * v_i_25927))]; \n            if (v_index_26013 < 0) {\n              v__25945_0 = v__25943; \n            } else {\n              if (v_index_26013 >= v_VLength_3) {\n                v__25945_0 = v__25943; \n              } else {\n                v__25945_0 = v__25934[v_index_26013]; \n              }\n            }\n            v__25947_0 = mult(v__25945_0, v__25933[(v_l_id_25926 + (128 * v_MWidthC_1 * v_w_id_25925) + (v_MWidthC_1 * v_i_25927))]); \n            v__25941 = add(v__25947_0, v__25941); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25928 = 0; \n            v__25952[v_l_id_25926] = id(v__25941); \n          }\n          /* end map_seq */\n          v_l_id_25926 = atomic_inc(&(v_work_idx_1599)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1594; \n        v_work_idx_1594 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_25929 = atomic_inc(&(v_work_idx_1594)); \n        while((v_l_id_25929 < 1)){\n          float v_tmp_26016 = 0.0f; \n          v__9610 = v_tmp_26016; \n          /* reduce_seq */\n          for (int v_i_25930 = 0; v_i_25930 < v_MWidthC_1; v_i_25930 = (1 + v_i_25930)) {\n            v__9610 = add(v__9610, v__25952[(v_i_25930 + (v_MWidthC_1 * v_l_id_25929))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25931 = 0; \n            v__25957[v_w_id_25925] = doubleMultiplyAdd(v__9610, v__25936, v__25935[v_w_id_25925], v__25937); \n          }\n          /* end map_seq */\n          v_l_id_25929 = atomic_inc(&(v_work_idx_1594)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25925 = atomic_inc(v_work_idx_1601); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__25932",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25933",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25934",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25935",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25936",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25937",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25939",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25957",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25952",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}