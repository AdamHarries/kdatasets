{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12596, const global float* restrict v__12597, const global float* restrict v__12598, const global float* restrict v__12599, float v__12600, float v__12601, global float* v__12621, global int* v__12603, local float* v__12616, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12605; \n  float v__12607; \n  float v__9610; \n  /* Private Memory */\n  float v__12609_0;\n  \n  float v__12611_0;\n  \n  int v__12615_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_353 = v__12603; \n    local int v_w_id_12589; \n    if (get_local_id(0) == 0) {\n      v_w_id_12589 = atomic_inc(v_work_idx_353); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12589 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_351; \n        v_work_idx_351 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_12590 = atomic_inc(&(v_work_idx_351)); \n        while((v_l_id_12590 < v_MWidthC_1)){\n          float v_tmp_12675 = 0.0f; \n          v__12605 = v_tmp_12675; \n          /* reduce_while_seq */\n          for (int v_i_12591 = 0; v_i_12591 < 8; v_i_12591 = (1 + v_i_12591)) {\n            v__12615_0 = check(v__12605, v__12596[(v_l_id_12590 + (8 * v_MWidthC_1 * v_w_id_12589) + (v_MWidthC_1 * v_i_12591))]); \n            if (v__12615_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12676 = 0.0f; \n            v__12607 = v_tmp_12676; \n            int v_index_12677 = v__12596[(v_l_id_12590 + (8 * v_MWidthC_1 * v_w_id_12589) + (v_MWidthC_1 * v_i_12591))]; \n            if (v_index_12677 < 0) {\n              v__12609_0 = v__12607; \n            } else {\n              if (v_index_12677 >= v_VLength_3) {\n                v__12609_0 = v__12607; \n              } else {\n                v__12609_0 = v__12598[v_index_12677]; \n              }\n            }\n            v__12611_0 = mult(v__12609_0, v__12597[(v_l_id_12590 + (8 * v_MWidthC_1 * v_w_id_12589) + (v_MWidthC_1 * v_i_12591))]); \n            v__12605 = add(v__12611_0, v__12605); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12592 = 0; \n            v__12616[v_l_id_12590] = id(v__12605); \n          }\n          /* end map_seq */\n          v_l_id_12590 = atomic_inc(&(v_work_idx_351)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_346; \n        v_work_idx_346 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_12593 = atomic_inc(&(v_work_idx_346)); \n        while((v_l_id_12593 < 1)){\n          float v_tmp_12680 = 0.0f; \n          v__9610 = v_tmp_12680; \n          /* reduce_seq */\n          for (int v_i_12594 = 0; v_i_12594 < v_MWidthC_1; v_i_12594 = (1 + v_i_12594)) {\n            v__9610 = add(v__9610, v__12616[(v_i_12594 + (v_MWidthC_1 * v_l_id_12593))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12595 = 0; \n            v__12621[v_w_id_12589] = doubleMultiplyAdd(v__9610, v__12600, v__12599[v_w_id_12589], v__12601); \n          }\n          /* end map_seq */\n          v_l_id_12593 = atomic_inc(&(v_work_idx_346)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12589 = atomic_inc(v_work_idx_353); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12596",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12597",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12598",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12599",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12600",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12601",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12603",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12616",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}