{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30125, const global float* restrict v__30126, const global float* restrict v__30127, const global float* restrict v__30128, float v__30129, float v__30130, global float* v__30149, local float* v__30144, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30133; \n  float v__30135; \n  float v__9610; \n  /* Private Memory */\n  float v__30137_0;\n  \n  float v__30139_0;\n  \n  int v__30143_0;\n  \n  for (int v_wg_id_30118 = get_group_id(0); v_wg_id_30118 < v_MHeight_2; v_wg_id_30118 = (v_wg_id_30118 + get_num_groups(0))) {\n    for (int v_l_id_30119 = get_local_id(0); v_l_id_30119 < v_MWidthC_1; v_l_id_30119 = (v_l_id_30119 + get_local_size(0))) {\n      float v_tmp_30213 = 0.0f; \n      v__30133 = v_tmp_30213; \n      /* reduce_while_seq */\n      for (int v_i_30120 = 0; v_i_30120 < 512; v_i_30120 = (1 + v_i_30120)) {\n        v__30143_0 = check(v__30133, v__30125[(v_l_id_30119 + (512 * v_MWidthC_1 * v_wg_id_30118) + (v_MWidthC_1 * v_i_30120))]); \n        if (v__30143_0) {\n        } else {\n          break;\n        }\n        float v_tmp_30214 = 0.0f; \n        v__30135 = v_tmp_30214; \n        int v_index_30215 = v__30125[(v_l_id_30119 + (512 * v_MWidthC_1 * v_wg_id_30118) + (v_MWidthC_1 * v_i_30120))]; \n        if (v_index_30215 < 0) {\n          v__30137_0 = v__30135; \n        } else {\n          if (v_index_30215 >= v_VLength_3) {\n            v__30137_0 = v__30135; \n          } else {\n            v__30137_0 = v__30127[v_index_30215]; \n          }\n        }\n        v__30139_0 = mult(v__30137_0, v__30126[(v_l_id_30119 + (512 * v_MWidthC_1 * v_wg_id_30118) + (v_MWidthC_1 * v_i_30120))]); \n        v__30133 = add(v__30139_0, v__30133); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_30121 = 0; \n        v__30144[v_l_id_30119] = id(v__30133); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1977; \n      v_work_idx_1977 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30122 = atomic_inc(&(v_work_idx_1977)); \n      while((v_l_id_30122 < 1)){\n        float v_tmp_30218 = 0.0f; \n        v__9610 = v_tmp_30218; \n        /* reduce_seq */\n        for (int v_i_30123 = 0; v_i_30123 < v_MWidthC_1; v_i_30123 = (1 + v_i_30123)) {\n          v__9610 = add(v__9610, v__30144[(v_i_30123 + (v_MWidthC_1 * v_l_id_30122))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30124 = 0; \n          v__30149[v_wg_id_30118] = doubleMultiplyAdd(v__9610, v__30129, v__30128[v_wg_id_30118], v__30130); \n        }\n        /* end map_seq */\n        v_l_id_30122 = atomic_inc(&(v_work_idx_1977)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30125",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30126",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30127",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30129",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30130",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30149",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30144",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}