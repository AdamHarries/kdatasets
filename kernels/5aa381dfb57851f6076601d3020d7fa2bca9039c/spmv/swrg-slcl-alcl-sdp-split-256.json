{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26587, const global float* restrict v__26588, const global float* restrict v__26589, const global float* restrict v__26590, float v__26591, float v__26592, global float* v__26609, global float* v__26599, local float* v__26604, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26595; \n  float v__26600; \n  float v__9610; \n  /* Private Memory */\n  float v__26597_0;\n  \n  for (int v_wg_id_26579 = get_group_id(0); v_wg_id_26579 < v_MHeight_2; v_wg_id_26579 = (v_wg_id_26579 + get_num_groups(0))) {\n    for (int v_l_id_26580 = get_local_id(0); v_l_id_26580 < v_MWidthC_1; v_l_id_26580 = (v_l_id_26580 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_26581 = 0; v_i_26581 < 256; v_i_26581 = (1 + v_i_26581)) {\n        float v_tmp_26670 = 0.0f; \n        v__26595 = v_tmp_26670; \n        int v_index_26671 = v__26587[(v_l_id_26580 + (256 * v_MWidthC_1 * v_wg_id_26579) + (v_MWidthC_1 * v_i_26581))]; \n        if (v_index_26671 < 0) {\n          v__26597_0 = v__26595; \n        } else {\n          if (v_index_26671 >= v_VLength_3) {\n            v__26597_0 = v__26595; \n          } else {\n            v__26597_0 = v__26589[v_index_26671]; \n          }\n        }\n        v__26599[(v_i_26581 + (256 * v_MWidthC_1 * v_wg_id_26579) + (256 * v_l_id_26580))] = mult(v__26597_0, v__26588[(v_l_id_26580 + (256 * v_MWidthC_1 * v_wg_id_26579) + (v_MWidthC_1 * v_i_26581))]); \n      }\n      /* end map_seq */\n      float v_tmp_26672 = 0.0f; \n      v__26600 = v_tmp_26672; \n      /* reduce_seq */\n      for (int v_i_26582 = 0; v_i_26582 < 256; v_i_26582 = (1 + v_i_26582)) {\n        v__26600 = add(v__26600, v__26599[(v_i_26582 + (256 * v_MWidthC_1 * v_wg_id_26579) + (256 * v_l_id_26580))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26583 = 0; \n        v__26604[v_l_id_26580] = id(v__26600); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1646; \n      v_work_idx_1646 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_26584 = atomic_inc(&(v_work_idx_1646)); \n      while((v_l_id_26584 < 1)){\n        float v_tmp_26675 = 0.0f; \n        v__9610 = v_tmp_26675; \n        /* reduce_seq */\n        for (int v_i_26585 = 0; v_i_26585 < v_MWidthC_1; v_i_26585 = (1 + v_i_26585)) {\n          v__9610 = add(v__9610, v__26604[(v_i_26585 + (v_MWidthC_1 * v_l_id_26584))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26586 = 0; \n          v__26609[v_wg_id_26579] = doubleMultiplyAdd(v__9610, v__26591, v__26590[v_wg_id_26579], v__26592); \n        }\n        /* end map_seq */\n        v_l_id_26584 = atomic_inc(&(v_work_idx_1646)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26587",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26588",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26589",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26590",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26591",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26592",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26599",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__26609",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26604",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}