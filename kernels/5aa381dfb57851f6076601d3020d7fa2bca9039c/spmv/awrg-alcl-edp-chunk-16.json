{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15366, const global float* restrict v__15367, const global float* restrict v__15368, const global float* restrict v__15369, float v__15370, float v__15371, global float* v__15387, global int* v__15373, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15374; \n  float v__15377; \n  /* Private Memory */\n  float v__15379_0;\n  \n  float v__15381_0;\n  \n  int v__15385_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_600 = v__15373; \n    local int v_w_id_15362; \n    if (get_local_id(0) == 0) {\n      v_w_id_15362 = atomic_inc(v_work_idx_600); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15362 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_598; \n        v_work_idx_598 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15363 = atomic_inc(&(v_work_idx_598)); \n        while((v_l_id_15363 < 16)){\n          float v_tmp_15430 = 0.0f; \n          v__15374 = v_tmp_15430; \n          /* reduce_while_seq */\n          for (int v_i_15364 = 0; v_i_15364 < v_MWidthC_1; v_i_15364 = (1 + v_i_15364)) {\n            v__15385_0 = check(v__15374, v__15366[(v_i_15364 + (16 * v_MWidthC_1 * v_w_id_15362) + (v_MWidthC_1 * v_l_id_15363))]); \n            if (v__15385_0) {\n            } else {\n              break;\n            }\n            float v_tmp_15431 = 0.0f; \n            v__15377 = v_tmp_15431; \n            int v_index_15432 = v__15366[(v_i_15364 + (16 * v_MWidthC_1 * v_w_id_15362) + (v_MWidthC_1 * v_l_id_15363))]; \n            if (v_index_15432 < 0) {\n              v__15379_0 = v__15377; \n            } else {\n              if (v_index_15432 >= v_VLength_3) {\n                v__15379_0 = v__15377; \n              } else {\n                v__15379_0 = v__15368[v_index_15432]; \n              }\n            }\n            v__15381_0 = mult(v__15379_0, v__15367[(v_i_15364 + (16 * v_MWidthC_1 * v_w_id_15362) + (v_MWidthC_1 * v_l_id_15363))]); \n            v__15374 = add(v__15381_0, v__15374); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15365 = 0; \n            v__15387[(v_l_id_15363 + (16 * v_w_id_15362))] = doubleMultiplyAdd(v__15374, v__15370, v__15369[(v_l_id_15363 + (16 * v_w_id_15362))], v__15371); \n          }\n          /* end map_seq */\n          v_l_id_15363 = atomic_inc(&(v_work_idx_598)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15362 = atomic_inc(v_work_idx_600); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__15366",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15367",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15369",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__15370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15373",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15387",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}