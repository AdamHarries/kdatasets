{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31375, const global float* restrict v__31376, const global float* restrict v__31377, const global float* restrict v__31378, float v__31379, float v__31380, global float* v__31398, global int* v__31382, local float* v__31393, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31384; \n  float v__31386; \n  float v__9610; \n  /* Private Memory */\n  float v__31388_0;\n  \n  float v__31390_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2098 = v__31382; \n    local int v_w_id_31368; \n    if (get_local_id(0) == 0) {\n      v_w_id_31368 = atomic_inc(v_work_idx_2098); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31368 < v_MHeight_2)){\n      for (int v_l_id_31369 = get_local_id(0); v_l_id_31369 < v_MWidthC_1; v_l_id_31369 = (v_l_id_31369 + get_local_size(0))) {\n        float v_tmp_31461 = 0.0f; \n        v__31384 = v_tmp_31461; \n        /* reduce_seq */\n        for (int v_i_31370 = 0; v_i_31370 < 512; v_i_31370 = (1 + v_i_31370)) {\n          float v_tmp_31462 = 0.0f; \n          v__31386 = v_tmp_31462; \n          int v_index_31463 = v__31375[(v_l_id_31369 + (512 * v_MWidthC_1 * v_w_id_31368) + (v_MWidthC_1 * v_i_31370))]; \n          if (v_index_31463 < 0) {\n            v__31388_0 = v__31386; \n          } else {\n            if (v_index_31463 >= v_VLength_3) {\n              v__31388_0 = v__31386; \n            } else {\n              v__31388_0 = v__31377[v_index_31463]; \n            }\n          }\n          v__31390_0 = mult(v__31388_0, v__31376[(v_l_id_31369 + (512 * v_MWidthC_1 * v_w_id_31368) + (v_MWidthC_1 * v_i_31370))]); \n          v__31384 = add(v__31390_0, v__31384); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31371 = 0; \n          v__31393[v_l_id_31369] = id(v__31384); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_31372 = get_local_id(0); \n        float v_tmp_31466 = 0.0f; \n        v__9610 = v_tmp_31466; \n        /* reduce_seq */\n        for (int v_i_31373 = 0; v_i_31373 < v_MWidthC_1; v_i_31373 = (1 + v_i_31373)) {\n          v__9610 = add(v__9610, v__31393[(v_i_31373 + (v_MWidthC_1 * v_l_id_31372))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31374 = 0; \n          v__31398[v_w_id_31368] = doubleMultiplyAdd(v__9610, v__31379, v__31378[v_w_id_31368], v__31380); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31368 = atomic_inc(v_work_idx_2098); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__31375",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31376",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31377",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31379",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31380",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31382",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31398",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31393",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}