{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11688, const global float* restrict v__11689, const global float* restrict v__11690, const global float* restrict v__11691, float v__11692, float v__11693, global float* v__11711, global int* v__11695, local float* v__11706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11697; \n  float v__11699; \n  float v__9610; \n  /* Private Memory */\n  float v__11701_0;\n  \n  float v__11703_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_256 = v__11695; \n    local int v_w_id_11681; \n    if (get_local_id(0) == 0) {\n      v_w_id_11681 = atomic_inc(v_work_idx_256); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11681 < v_MHeight_2)){\n      for (int v_l_id_11682 = get_local_id(0); v_l_id_11682 < v_MWidthC_1; v_l_id_11682 = (v_l_id_11682 + get_local_size(0))) {\n        float v_tmp_11770 = 0.0f; \n        v__11697 = v_tmp_11770; \n        /* reduce_seq */\n        for (int v_i_11683 = 0; v_i_11683 < 8; v_i_11683 = (1 + v_i_11683)) {\n          float v_tmp_11771 = 0.0f; \n          v__11699 = v_tmp_11771; \n          int v_index_11772 = v__11688[(v_l_id_11682 + (8 * v_MWidthC_1 * v_w_id_11681) + (v_MWidthC_1 * v_i_11683))]; \n          if (v_index_11772 < 0) {\n            v__11701_0 = v__11699; \n          } else {\n            if (v_index_11772 >= v_VLength_3) {\n              v__11701_0 = v__11699; \n            } else {\n              v__11701_0 = v__11690[v_index_11772]; \n            }\n          }\n          v__11703_0 = mult(v__11701_0, v__11689[(v_l_id_11682 + (8 * v_MWidthC_1 * v_w_id_11681) + (v_MWidthC_1 * v_i_11683))]); \n          v__11697 = add(v__11703_0, v__11697); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11684 = 0; \n          v__11706[v_l_id_11682] = id(v__11697); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_250; \n        v_work_idx_250 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_11685 = atomic_inc(&(v_work_idx_250)); \n        while((v_l_id_11685 < 1)){\n          float v_tmp_11775 = 0.0f; \n          v__9610 = v_tmp_11775; \n          /* reduce_seq */\n          for (int v_i_11686 = 0; v_i_11686 < v_MWidthC_1; v_i_11686 = (1 + v_i_11686)) {\n            v__9610 = add(v__9610, v__11706[(v_i_11686 + (v_MWidthC_1 * v_l_id_11685))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_11687 = 0; \n            v__11711[v_w_id_11681] = doubleMultiplyAdd(v__9610, v__11692, v__11691[v_w_id_11681], v__11693); \n          }\n          /* end map_seq */\n          v_l_id_11685 = atomic_inc(&(v_work_idx_250)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11681 = atomic_inc(v_work_idx_256); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11688",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11689",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11690",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11691",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11692",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11693",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11695",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}