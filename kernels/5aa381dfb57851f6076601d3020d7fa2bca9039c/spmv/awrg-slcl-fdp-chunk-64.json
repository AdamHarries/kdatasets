{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21110, const global float* restrict v__21111, const global float* restrict v__21112, const global float* restrict v__21113, float v__21114, float v__21115, global float* v__21129, global int* v__21117, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21119; \n  float v__21121; \n  /* Private Memory */\n  float v__21123_0;\n  \n  float v__21125_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1137 = v__21117; \n    local int v_w_id_21106; \n    if (get_local_id(0) == 0) {\n      v_w_id_21106 = atomic_inc(v_work_idx_1137); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21106 < v_MHeight_2)){\n      for (int v_l_id_21107 = get_local_id(0); v_l_id_21107 < 64; v_l_id_21107 = (v_l_id_21107 + get_local_size(0))) {\n        float v_tmp_21170 = 0.0f; \n        v__21119 = v_tmp_21170; \n        /* reduce_seq */\n        for (int v_i_21108 = 0; v_i_21108 < v_MWidthC_1; v_i_21108 = (1 + v_i_21108)) {\n          float v_tmp_21171 = 0.0f; \n          v__21121 = v_tmp_21171; \n          int v_index_21172 = v__21110[(v_i_21108 + (64 * v_MWidthC_1 * v_w_id_21106) + (v_MWidthC_1 * v_l_id_21107))]; \n          if (v_index_21172 < 0) {\n            v__21123_0 = v__21121; \n          } else {\n            if (v_index_21172 >= v_VLength_3) {\n              v__21123_0 = v__21121; \n            } else {\n              v__21123_0 = v__21112[v_index_21172]; \n            }\n          }\n          v__21125_0 = mult(v__21123_0, v__21111[(v_i_21108 + (64 * v_MWidthC_1 * v_w_id_21106) + (v_MWidthC_1 * v_l_id_21107))]); \n          v__21119 = add(v__21125_0, v__21119); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21109 = 0; \n          v__21129[(v_l_id_21107 + (64 * v_w_id_21106))] = doubleMultiplyAdd(v__21119, v__21114, v__21113[(v_l_id_21107 + (64 * v_w_id_21106))], v__21115); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_21106 = atomic_inc(v_work_idx_1137); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21110",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21111",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21112",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21113",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__21114",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21115",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21117",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21129",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}