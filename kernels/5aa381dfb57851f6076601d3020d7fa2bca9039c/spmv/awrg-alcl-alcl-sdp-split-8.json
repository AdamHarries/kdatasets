{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12410, const global float* restrict v__12411, const global float* restrict v__12412, const global float* restrict v__12413, float v__12414, float v__12415, global float* v__12433, global int* v__12417, global float* v__12423, local float* v__12428, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12419; \n  float v__12424; \n  float v__9610; \n  /* Private Memory */\n  float v__12421_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_331 = v__12417; \n    local int v_w_id_12402; \n    if (get_local_id(0) == 0) {\n      v_w_id_12402 = atomic_inc(v_work_idx_331); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12402 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_329; \n        v_work_idx_329 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_12403 = atomic_inc(&(v_work_idx_329)); \n        while((v_l_id_12403 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_12404 = 0; v_i_12404 < 8; v_i_12404 = (1 + v_i_12404)) {\n            float v_tmp_12484 = 0.0f; \n            v__12419 = v_tmp_12484; \n            int v_index_12485 = v__12410[(v_l_id_12403 + (8 * v_MWidthC_1 * v_w_id_12402) + (v_MWidthC_1 * v_i_12404))]; \n            if (v_index_12485 < 0) {\n              v__12421_0 = v__12419; \n            } else {\n              if (v_index_12485 >= v_VLength_3) {\n                v__12421_0 = v__12419; \n              } else {\n                v__12421_0 = v__12412[v_index_12485]; \n              }\n            }\n            v__12423[(v_i_12404 + (8 * v_MWidthC_1 * v_w_id_12402) + (8 * v_l_id_12403))] = mult(v__12421_0, v__12411[(v_l_id_12403 + (8 * v_MWidthC_1 * v_w_id_12402) + (v_MWidthC_1 * v_i_12404))]); \n          }\n          /* end map_seq */\n          float v_tmp_12486 = 0.0f; \n          v__12424 = v_tmp_12486; \n          /* reduce_seq */\n          for (int v_i_12405 = 0; v_i_12405 < 8; v_i_12405 = (1 + v_i_12405)) {\n            v__12424 = add(v__12424, v__12423[(v_i_12405 + (8 * v_MWidthC_1 * v_w_id_12402) + (8 * v_l_id_12403))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12406 = 0; \n            v__12428[v_l_id_12403] = id(v__12424); \n          }\n          /* end map_seq */\n          v_l_id_12403 = atomic_inc(&(v_work_idx_329)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_323; \n        v_work_idx_323 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_12407 = atomic_inc(&(v_work_idx_323)); \n        while((v_l_id_12407 < 1)){\n          float v_tmp_12489 = 0.0f; \n          v__9610 = v_tmp_12489; \n          /* reduce_seq */\n          for (int v_i_12408 = 0; v_i_12408 < v_MWidthC_1; v_i_12408 = (1 + v_i_12408)) {\n            v__9610 = add(v__9610, v__12428[(v_i_12408 + (v_MWidthC_1 * v_l_id_12407))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12409 = 0; \n            v__12433[v_w_id_12402] = doubleMultiplyAdd(v__9610, v__12414, v__12413[v_w_id_12402], v__12415); \n          }\n          /* end map_seq */\n          v_l_id_12407 = atomic_inc(&(v_work_idx_323)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12402 = atomic_inc(v_work_idx_331); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12410",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12411",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12412",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12413",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12414",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12415",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12417",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__12423",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__12433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12428",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}