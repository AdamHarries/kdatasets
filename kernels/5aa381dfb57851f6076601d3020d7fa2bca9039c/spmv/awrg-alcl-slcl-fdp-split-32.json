{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18878, const global float* restrict v__18879, const global float* restrict v__18880, const global float* restrict v__18881, float v__18882, float v__18883, global float* v__18901, global int* v__18885, local float* v__18896, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18887; \n  float v__18889; \n  float v__9610; \n  /* Private Memory */\n  float v__18891_0;\n  \n  float v__18893_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_933 = v__18885; \n    local int v_w_id_18871; \n    if (get_local_id(0) == 0) {\n      v_w_id_18871 = atomic_inc(v_work_idx_933); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18871 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_931; \n        v_work_idx_931 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_18872 = atomic_inc(&(v_work_idx_931)); \n        while((v_l_id_18872 < v_MWidthC_1)){\n          float v_tmp_18956 = 0.0f; \n          v__18887 = v_tmp_18956; \n          /* reduce_seq */\n          for (int v_i_18873 = 0; v_i_18873 < 32; v_i_18873 = (1 + v_i_18873)) {\n            float v_tmp_18957 = 0.0f; \n            v__18889 = v_tmp_18957; \n            int v_index_18958 = v__18878[(v_l_id_18872 + (32 * v_MWidthC_1 * v_w_id_18871) + (v_MWidthC_1 * v_i_18873))]; \n            if (v_index_18958 < 0) {\n              v__18891_0 = v__18889; \n            } else {\n              if (v_index_18958 >= v_VLength_3) {\n                v__18891_0 = v__18889; \n              } else {\n                v__18891_0 = v__18880[v_index_18958]; \n              }\n            }\n            v__18893_0 = mult(v__18891_0, v__18879[(v_l_id_18872 + (32 * v_MWidthC_1 * v_w_id_18871) + (v_MWidthC_1 * v_i_18873))]); \n            v__18887 = add(v__18893_0, v__18887); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18874 = 0; \n            v__18896[v_l_id_18872] = id(v__18887); \n          }\n          /* end map_seq */\n          v_l_id_18872 = atomic_inc(&(v_work_idx_931)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18875 = get_local_id(0); \n        float v_tmp_18961 = 0.0f; \n        v__9610 = v_tmp_18961; \n        /* reduce_seq */\n        for (int v_i_18876 = 0; v_i_18876 < v_MWidthC_1; v_i_18876 = (1 + v_i_18876)) {\n          v__9610 = add(v__9610, v__18896[(v_i_18876 + (v_MWidthC_1 * v_l_id_18875))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18877 = 0; \n          v__18901[v_w_id_18871] = doubleMultiplyAdd(v__9610, v__18882, v__18881[v_w_id_18871], v__18883); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18871 = atomic_inc(v_work_idx_933); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__18878",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18879",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18880",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18881",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18882",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18883",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18885",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18896",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}