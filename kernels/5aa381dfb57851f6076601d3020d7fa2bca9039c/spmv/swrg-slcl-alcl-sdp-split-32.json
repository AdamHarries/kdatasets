{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16585, const global float* restrict v__16586, const global float* restrict v__16587, const global float* restrict v__16588, float v__16589, float v__16590, global float* v__16607, global float* v__16597, local float* v__16602, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16593; \n  float v__16598; \n  float v__9610; \n  /* Private Memory */\n  float v__16595_0;\n  \n  for (int v_wg_id_16577 = get_group_id(0); v_wg_id_16577 < v_MHeight_2; v_wg_id_16577 = (v_wg_id_16577 + get_num_groups(0))) {\n    for (int v_l_id_16578 = get_local_id(0); v_l_id_16578 < v_MWidthC_1; v_l_id_16578 = (v_l_id_16578 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_16579 = 0; v_i_16579 < 32; v_i_16579 = (1 + v_i_16579)) {\n        float v_tmp_16668 = 0.0f; \n        v__16593 = v_tmp_16668; \n        int v_index_16669 = v__16585[(v_l_id_16578 + (32 * v_MWidthC_1 * v_wg_id_16577) + (v_MWidthC_1 * v_i_16579))]; \n        if (v_index_16669 < 0) {\n          v__16595_0 = v__16593; \n        } else {\n          if (v_index_16669 >= v_VLength_3) {\n            v__16595_0 = v__16593; \n          } else {\n            v__16595_0 = v__16587[v_index_16669]; \n          }\n        }\n        v__16597[(v_i_16579 + (32 * v_MWidthC_1 * v_wg_id_16577) + (32 * v_l_id_16578))] = mult(v__16595_0, v__16586[(v_l_id_16578 + (32 * v_MWidthC_1 * v_wg_id_16577) + (v_MWidthC_1 * v_i_16579))]); \n      }\n      /* end map_seq */\n      float v_tmp_16670 = 0.0f; \n      v__16598 = v_tmp_16670; \n      /* reduce_seq */\n      for (int v_i_16580 = 0; v_i_16580 < 32; v_i_16580 = (1 + v_i_16580)) {\n        v__16598 = add(v__16598, v__16597[(v_i_16580 + (32 * v_MWidthC_1 * v_wg_id_16577) + (32 * v_l_id_16578))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16581 = 0; \n        v__16602[v_l_id_16578] = id(v__16598); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_710; \n      v_work_idx_710 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_16582 = atomic_inc(&(v_work_idx_710)); \n      while((v_l_id_16582 < 1)){\n        float v_tmp_16673 = 0.0f; \n        v__9610 = v_tmp_16673; \n        /* reduce_seq */\n        for (int v_i_16583 = 0; v_i_16583 < v_MWidthC_1; v_i_16583 = (1 + v_i_16583)) {\n          v__9610 = add(v__9610, v__16602[(v_i_16583 + (v_MWidthC_1 * v_l_id_16582))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16584 = 0; \n          v__16607[v_wg_id_16577] = doubleMultiplyAdd(v__9610, v__16589, v__16588[v_wg_id_16577], v__16590); \n        }\n        /* end map_seq */\n        v_l_id_16582 = atomic_inc(&(v_work_idx_710)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16585",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16586",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16587",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16588",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16589",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16590",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16597",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16607",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16602",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}