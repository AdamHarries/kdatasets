{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25839, const global float* restrict v__25840, const global float* restrict v__25841, const global float* restrict v__25842, float v__25843, float v__25844, global float* v__25862, global int* v__25846, local float* v__25857, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25848; \n  float v__25850; \n  float v__9610; \n  /* Private Memory */\n  float v__25852_0;\n  \n  float v__25854_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1590 = v__25846; \n    local int v_w_id_25832; \n    if (get_local_id(0) == 0) {\n      v_w_id_25832 = atomic_inc(v_work_idx_1590); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25832 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1588; \n        v_work_idx_1588 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_25833 = atomic_inc(&(v_work_idx_1588)); \n        while((v_l_id_25833 < v_MWidthC_1)){\n          float v_tmp_25913 = 0.0f; \n          v__25848 = v_tmp_25913; \n          /* reduce_seq */\n          for (int v_i_25834 = 0; v_i_25834 < 128; v_i_25834 = (1 + v_i_25834)) {\n            float v_tmp_25914 = 0.0f; \n            v__25850 = v_tmp_25914; \n            int v_index_25915 = v__25839[(v_l_id_25833 + (128 * v_MWidthC_1 * v_w_id_25832) + (v_MWidthC_1 * v_i_25834))]; \n            if (v_index_25915 < 0) {\n              v__25852_0 = v__25850; \n            } else {\n              if (v_index_25915 >= v_VLength_3) {\n                v__25852_0 = v__25850; \n              } else {\n                v__25852_0 = v__25841[v_index_25915]; \n              }\n            }\n            v__25854_0 = mult(v__25852_0, v__25840[(v_l_id_25833 + (128 * v_MWidthC_1 * v_w_id_25832) + (v_MWidthC_1 * v_i_25834))]); \n            v__25848 = add(v__25854_0, v__25848); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25835 = 0; \n            v__25857[v_l_id_25833] = id(v__25848); \n          }\n          /* end map_seq */\n          v_l_id_25833 = atomic_inc(&(v_work_idx_1588)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1583; \n        v_work_idx_1583 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_25836 = atomic_inc(&(v_work_idx_1583)); \n        while((v_l_id_25836 < 1)){\n          float v_tmp_25918 = 0.0f; \n          v__9610 = v_tmp_25918; \n          /* reduce_seq */\n          for (int v_i_25837 = 0; v_i_25837 < v_MWidthC_1; v_i_25837 = (1 + v_i_25837)) {\n            v__9610 = add(v__9610, v__25857[(v_i_25837 + (v_MWidthC_1 * v_l_id_25836))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25838 = 0; \n            v__25862[v_w_id_25832] = doubleMultiplyAdd(v__9610, v__25843, v__25842[v_w_id_25832], v__25844); \n          }\n          /* end map_seq */\n          v_l_id_25836 = atomic_inc(&(v_work_idx_1583)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25832 = atomic_inc(v_work_idx_1590); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25839",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25840",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25841",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25843",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25844",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25846",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25862",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25857",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}