{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14442, const global float* restrict v__14443, const global float* restrict v__14444, const global float* restrict v__14445, float v__14446, float v__14447, global float* v__14461, global int* v__14449, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14451; \n  float v__14453; \n  /* Private Memory */\n  float v__14455_0;\n  \n  float v__14457_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_513 = v__14449; \n    local int v_w_id_14438; \n    if (get_local_id(0) == 0) {\n      v_w_id_14438 = atomic_inc(v_work_idx_513); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14438 < v_MHeight_2)){\n      for (int v_l_id_14439 = get_local_id(0); v_l_id_14439 < 16; v_l_id_14439 = (v_l_id_14439 + get_local_size(0))) {\n        float v_tmp_14502 = 0.0f; \n        v__14451 = v_tmp_14502; \n        /* reduce_seq */\n        for (int v_i_14440 = 0; v_i_14440 < v_MWidthC_1; v_i_14440 = (1 + v_i_14440)) {\n          float v_tmp_14503 = 0.0f; \n          v__14453 = v_tmp_14503; \n          int v_index_14504 = v__14442[(v_i_14440 + (16 * v_MWidthC_1 * v_w_id_14438) + (v_MWidthC_1 * v_l_id_14439))]; \n          if (v_index_14504 < 0) {\n            v__14455_0 = v__14453; \n          } else {\n            if (v_index_14504 >= v_VLength_3) {\n              v__14455_0 = v__14453; \n            } else {\n              v__14455_0 = v__14444[v_index_14504]; \n            }\n          }\n          v__14457_0 = mult(v__14455_0, v__14443[(v_i_14440 + (16 * v_MWidthC_1 * v_w_id_14438) + (v_MWidthC_1 * v_l_id_14439))]); \n          v__14451 = add(v__14457_0, v__14451); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14441 = 0; \n          v__14461[(v_l_id_14439 + (16 * v_w_id_14438))] = doubleMultiplyAdd(v__14451, v__14446, v__14445[(v_l_id_14439 + (16 * v_w_id_14438))], v__14447); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_14438 = atomic_inc(v_work_idx_513); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__14442",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14443",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14444",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14445",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__14446",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14447",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14449",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14461",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}