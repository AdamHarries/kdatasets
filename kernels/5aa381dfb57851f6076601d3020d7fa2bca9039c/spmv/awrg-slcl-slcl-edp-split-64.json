{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21478, const global float* restrict v__21479, const global float* restrict v__21480, const global float* restrict v__21481, float v__21482, float v__21483, global float* v__21503, global int* v__21485, local float* v__21498, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21487; \n  float v__21489; \n  float v__9610; \n  /* Private Memory */\n  float v__21491_0;\n  \n  float v__21493_0;\n  \n  int v__21497_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1171 = v__21485; \n    local int v_w_id_21471; \n    if (get_local_id(0) == 0) {\n      v_w_id_21471 = atomic_inc(v_work_idx_1171); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21471 < v_MHeight_2)){\n      for (int v_l_id_21472 = get_local_id(0); v_l_id_21472 < v_MWidthC_1; v_l_id_21472 = (v_l_id_21472 + get_local_size(0))) {\n        float v_tmp_21569 = 0.0f; \n        v__21487 = v_tmp_21569; \n        /* reduce_while_seq */\n        for (int v_i_21473 = 0; v_i_21473 < 64; v_i_21473 = (1 + v_i_21473)) {\n          v__21497_0 = check(v__21487, v__21478[(v_l_id_21472 + (64 * v_MWidthC_1 * v_w_id_21471) + (v_MWidthC_1 * v_i_21473))]); \n          if (v__21497_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21570 = 0.0f; \n          v__21489 = v_tmp_21570; \n          int v_index_21571 = v__21478[(v_l_id_21472 + (64 * v_MWidthC_1 * v_w_id_21471) + (v_MWidthC_1 * v_i_21473))]; \n          if (v_index_21571 < 0) {\n            v__21491_0 = v__21489; \n          } else {\n            if (v_index_21571 >= v_VLength_3) {\n              v__21491_0 = v__21489; \n            } else {\n              v__21491_0 = v__21480[v_index_21571]; \n            }\n          }\n          v__21493_0 = mult(v__21491_0, v__21479[(v_l_id_21472 + (64 * v_MWidthC_1 * v_w_id_21471) + (v_MWidthC_1 * v_i_21473))]); \n          v__21487 = add(v__21493_0, v__21487); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21474 = 0; \n          v__21498[v_l_id_21472] = id(v__21487); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_21475 = get_local_id(0); \n        float v_tmp_21574 = 0.0f; \n        v__9610 = v_tmp_21574; \n        /* reduce_seq */\n        for (int v_i_21476 = 0; v_i_21476 < v_MWidthC_1; v_i_21476 = (1 + v_i_21476)) {\n          v__9610 = add(v__9610, v__21498[(v_i_21476 + (v_MWidthC_1 * v_l_id_21475))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21477 = 0; \n          v__21503[v_w_id_21471] = doubleMultiplyAdd(v__9610, v__21482, v__21481[v_w_id_21471], v__21483); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21471 = atomic_inc(v_work_idx_1171); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__21478",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21479",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21480",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21482",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21483",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21485",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21503",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21498",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}