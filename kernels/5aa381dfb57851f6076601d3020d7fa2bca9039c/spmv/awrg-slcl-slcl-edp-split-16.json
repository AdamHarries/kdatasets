{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14810, const global float* restrict v__14811, const global float* restrict v__14812, const global float* restrict v__14813, float v__14814, float v__14815, global float* v__14835, global int* v__14817, local float* v__14830, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14819; \n  float v__14821; \n  float v__9610; \n  /* Private Memory */\n  float v__14823_0;\n  \n  float v__14825_0;\n  \n  int v__14829_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_547 = v__14817; \n    local int v_w_id_14803; \n    if (get_local_id(0) == 0) {\n      v_w_id_14803 = atomic_inc(v_work_idx_547); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14803 < v_MHeight_2)){\n      for (int v_l_id_14804 = get_local_id(0); v_l_id_14804 < v_MWidthC_1; v_l_id_14804 = (v_l_id_14804 + get_local_size(0))) {\n        float v_tmp_14901 = 0.0f; \n        v__14819 = v_tmp_14901; \n        /* reduce_while_seq */\n        for (int v_i_14805 = 0; v_i_14805 < 16; v_i_14805 = (1 + v_i_14805)) {\n          v__14829_0 = check(v__14819, v__14810[(v_l_id_14804 + (16 * v_MWidthC_1 * v_w_id_14803) + (v_MWidthC_1 * v_i_14805))]); \n          if (v__14829_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14902 = 0.0f; \n          v__14821 = v_tmp_14902; \n          int v_index_14903 = v__14810[(v_l_id_14804 + (16 * v_MWidthC_1 * v_w_id_14803) + (v_MWidthC_1 * v_i_14805))]; \n          if (v_index_14903 < 0) {\n            v__14823_0 = v__14821; \n          } else {\n            if (v_index_14903 >= v_VLength_3) {\n              v__14823_0 = v__14821; \n            } else {\n              v__14823_0 = v__14812[v_index_14903]; \n            }\n          }\n          v__14825_0 = mult(v__14823_0, v__14811[(v_l_id_14804 + (16 * v_MWidthC_1 * v_w_id_14803) + (v_MWidthC_1 * v_i_14805))]); \n          v__14819 = add(v__14825_0, v__14819); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14806 = 0; \n          v__14830[v_l_id_14804] = id(v__14819); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14807 = get_local_id(0); \n        float v_tmp_14906 = 0.0f; \n        v__9610 = v_tmp_14906; \n        /* reduce_seq */\n        for (int v_i_14808 = 0; v_i_14808 < v_MWidthC_1; v_i_14808 = (1 + v_i_14808)) {\n          v__9610 = add(v__9610, v__14830[(v_i_14808 + (v_MWidthC_1 * v_l_id_14807))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14809 = 0; \n          v__14835[v_w_id_14803] = doubleMultiplyAdd(v__9610, v__14814, v__14813[v_w_id_14803], v__14815); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14803 = atomic_inc(v_work_idx_547); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14810",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14811",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14812",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14814",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14815",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14817",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14835",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14830",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}