{
  "name" : "swrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19807, const global float* restrict v__19808, const global float* restrict v__19809, const global float* restrict v__19810, float v__19811, float v__19812, global float* v__19831, local float* v__19826, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19815; \n  float v__19817; \n  float v__9610; \n  /* Private Memory */\n  float v__19819_0;\n  \n  float v__19821_0;\n  \n  int v__19825_0;\n  \n  for (int v_wg_id_19800 = get_group_id(0); v_wg_id_19800 < v_MHeight_2; v_wg_id_19800 = (v_wg_id_19800 + get_num_groups(0))) {\n    for (int v_l_id_19801 = get_local_id(0); v_l_id_19801 < v_MWidthC_1; v_l_id_19801 = (v_l_id_19801 + get_local_size(0))) {\n      float v_tmp_19899 = 0.0f; \n      v__19815 = v_tmp_19899; \n      /* reduce_while_seq */\n      for (int v_i_19802 = 0; v_i_19802 < 64; v_i_19802 = (1 + v_i_19802)) {\n        v__19825_0 = check(v__19815, v__19807[(v_l_id_19801 + (64 * v_MWidthC_1 * v_wg_id_19800) + (v_MWidthC_1 * v_i_19802))]); \n        if (v__19825_0) {\n        } else {\n          break;\n        }\n        float v_tmp_19900 = 0.0f; \n        v__19817 = v_tmp_19900; \n        int v_index_19901 = v__19807[(v_l_id_19801 + (64 * v_MWidthC_1 * v_wg_id_19800) + (v_MWidthC_1 * v_i_19802))]; \n        if (v_index_19901 < 0) {\n          v__19819_0 = v__19817; \n        } else {\n          if (v_index_19901 >= v_VLength_3) {\n            v__19819_0 = v__19817; \n          } else {\n            v__19819_0 = v__19809[v_index_19901]; \n          }\n        }\n        v__19821_0 = mult(v__19819_0, v__19808[(v_l_id_19801 + (64 * v_MWidthC_1 * v_wg_id_19800) + (v_MWidthC_1 * v_i_19802))]); \n        v__19815 = add(v__19821_0, v__19815); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19803 = 0; \n        v__19826[v_l_id_19801] = id(v__19815); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_19804 = get_local_id(0); \n      float v_tmp_19904 = 0.0f; \n      v__9610 = v_tmp_19904; \n      /* reduce_seq */\n      for (int v_i_19805 = 0; v_i_19805 < v_MWidthC_1; v_i_19805 = (1 + v_i_19805)) {\n        v__9610 = add(v__9610, v__19826[(v_i_19805 + (v_MWidthC_1 * v_l_id_19804))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19806 = 0; \n        v__19831[v_wg_id_19800] = doubleMultiplyAdd(v__9610, v__19811, v__19810[v_wg_id_19800], v__19812); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19807",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19808",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__19831",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19826",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}