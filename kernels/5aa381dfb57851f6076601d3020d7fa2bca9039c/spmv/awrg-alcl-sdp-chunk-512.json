{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31897, const global float* restrict v__31898, const global float* restrict v__31899, const global float* restrict v__31900, float v__31901, float v__31902, global float* v__31916, global int* v__31904, global float* v__31910, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31906; \n  float v__31911; \n  /* Private Memory */\n  float v__31908_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2146 = v__31904; \n    local int v_w_id_31892; \n    if (get_local_id(0) == 0) {\n      v_w_id_31892 = atomic_inc(v_work_idx_2146); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31892 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2144; \n        v_work_idx_2144 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_31893 = atomic_inc(&(v_work_idx_2144)); \n        while((v_l_id_31893 < 512)){\n          /* map_seq */\n          for (int v_i_31894 = 0; v_i_31894 < v_MWidthC_1; v_i_31894 = (1 + v_i_31894)) {\n            float v_tmp_31954 = 0.0f; \n            v__31906 = v_tmp_31954; \n            int v_index_31955 = v__31897[(v_i_31894 + (512 * v_MWidthC_1 * v_w_id_31892) + (v_MWidthC_1 * v_l_id_31893))]; \n            if (v_index_31955 < 0) {\n              v__31908_0 = v__31906; \n            } else {\n              if (v_index_31955 >= v_VLength_3) {\n                v__31908_0 = v__31906; \n              } else {\n                v__31908_0 = v__31899[v_index_31955]; \n              }\n            }\n            v__31910[(v_i_31894 + (512 * v_MWidthC_1 * v_w_id_31892) + (v_MWidthC_1 * v_l_id_31893))] = mult(v__31908_0, v__31898[(v_i_31894 + (512 * v_MWidthC_1 * v_w_id_31892) + (v_MWidthC_1 * v_l_id_31893))]); \n          }\n          /* end map_seq */\n          float v_tmp_31956 = 0.0f; \n          v__31911 = v_tmp_31956; \n          /* reduce_seq */\n          for (int v_i_31895 = 0; v_i_31895 < v_MWidthC_1; v_i_31895 = (1 + v_i_31895)) {\n            v__31911 = add(v__31911, v__31910[(v_i_31895 + (512 * v_MWidthC_1 * v_w_id_31892) + (v_MWidthC_1 * v_l_id_31893))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31896 = 0; \n            v__31916[(v_l_id_31893 + (512 * v_w_id_31892))] = doubleMultiplyAdd(v__31911, v__31901, v__31900[(v_l_id_31893 + (512 * v_w_id_31892))], v__31902); \n          }\n          /* end map_seq */\n          v_l_id_31893 = atomic_inc(&(v_work_idx_2144)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31892 = atomic_inc(v_work_idx_2146); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__31897",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31898",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31899",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31900",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__31901",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31902",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31904",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__31910",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__31916",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}