{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31967, const global float* restrict v__31968, const global float* restrict v__31969, const global float* restrict v__31970, float v__31971, float v__31972, global float* v__31986, global int* v__31974, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31976; \n  float v__31978; \n  /* Private Memory */\n  float v__31980_0;\n  \n  float v__31982_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2153 = v__31974; \n    local int v_w_id_31963; \n    if (get_local_id(0) == 0) {\n      v_w_id_31963 = atomic_inc(v_work_idx_2153); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31963 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2151; \n        v_work_idx_2151 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_31964 = atomic_inc(&(v_work_idx_2151)); \n        while((v_l_id_31964 < 512)){\n          float v_tmp_32023 = 0.0f; \n          v__31976 = v_tmp_32023; \n          /* reduce_seq */\n          for (int v_i_31965 = 0; v_i_31965 < v_MWidthC_1; v_i_31965 = (1 + v_i_31965)) {\n            float v_tmp_32024 = 0.0f; \n            v__31978 = v_tmp_32024; \n            int v_index_32025 = v__31967[(v_i_31965 + (512 * v_MWidthC_1 * v_w_id_31963) + (v_MWidthC_1 * v_l_id_31964))]; \n            if (v_index_32025 < 0) {\n              v__31980_0 = v__31978; \n            } else {\n              if (v_index_32025 >= v_VLength_3) {\n                v__31980_0 = v__31978; \n              } else {\n                v__31980_0 = v__31969[v_index_32025]; \n              }\n            }\n            v__31982_0 = mult(v__31980_0, v__31968[(v_i_31965 + (512 * v_MWidthC_1 * v_w_id_31963) + (v_MWidthC_1 * v_l_id_31964))]); \n            v__31976 = add(v__31982_0, v__31976); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31966 = 0; \n            v__31986[(v_l_id_31964 + (512 * v_w_id_31963))] = doubleMultiplyAdd(v__31976, v__31971, v__31970[(v_l_id_31964 + (512 * v_w_id_31963))], v__31972); \n          }\n          /* end map_seq */\n          v_l_id_31964 = atomic_inc(&(v_work_idx_2151)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31963 = atomic_inc(v_work_idx_2153); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__31967",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31968",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31969",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31970",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__31971",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31972",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31974",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31986",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}