{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15744, const global float* restrict v__15745, const global float* restrict v__15746, const global float* restrict v__15747, float v__15748, float v__15749, global float* v__15767, global int* v__15751, global float* v__15757, local float* v__15762, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15753; \n  float v__15758; \n  float v__9610; \n  /* Private Memory */\n  float v__15755_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_643 = v__15751; \n    local int v_w_id_15736; \n    if (get_local_id(0) == 0) {\n      v_w_id_15736 = atomic_inc(v_work_idx_643); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15736 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_641; \n        v_work_idx_641 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15737 = atomic_inc(&(v_work_idx_641)); \n        while((v_l_id_15737 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15738 = 0; v_i_15738 < 16; v_i_15738 = (1 + v_i_15738)) {\n            float v_tmp_15818 = 0.0f; \n            v__15753 = v_tmp_15818; \n            int v_index_15819 = v__15744[(v_l_id_15737 + (16 * v_MWidthC_1 * v_w_id_15736) + (v_MWidthC_1 * v_i_15738))]; \n            if (v_index_15819 < 0) {\n              v__15755_0 = v__15753; \n            } else {\n              if (v_index_15819 >= v_VLength_3) {\n                v__15755_0 = v__15753; \n              } else {\n                v__15755_0 = v__15746[v_index_15819]; \n              }\n            }\n            v__15757[(v_i_15738 + (16 * v_MWidthC_1 * v_w_id_15736) + (16 * v_l_id_15737))] = mult(v__15755_0, v__15745[(v_l_id_15737 + (16 * v_MWidthC_1 * v_w_id_15736) + (v_MWidthC_1 * v_i_15738))]); \n          }\n          /* end map_seq */\n          float v_tmp_15820 = 0.0f; \n          v__15758 = v_tmp_15820; \n          /* reduce_seq */\n          for (int v_i_15739 = 0; v_i_15739 < 16; v_i_15739 = (1 + v_i_15739)) {\n            v__15758 = add(v__15758, v__15757[(v_i_15739 + (16 * v_MWidthC_1 * v_w_id_15736) + (16 * v_l_id_15737))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15740 = 0; \n            v__15762[v_l_id_15737] = id(v__15758); \n          }\n          /* end map_seq */\n          v_l_id_15737 = atomic_inc(&(v_work_idx_641)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_635; \n        v_work_idx_635 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15741 = atomic_inc(&(v_work_idx_635)); \n        while((v_l_id_15741 < 1)){\n          float v_tmp_15823 = 0.0f; \n          v__9610 = v_tmp_15823; \n          /* reduce_seq */\n          for (int v_i_15742 = 0; v_i_15742 < v_MWidthC_1; v_i_15742 = (1 + v_i_15742)) {\n            v__9610 = add(v__9610, v__15762[(v_i_15742 + (v_MWidthC_1 * v_l_id_15741))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15743 = 0; \n            v__15767[v_w_id_15736] = doubleMultiplyAdd(v__9610, v__15748, v__15747[v_w_id_15736], v__15749); \n          }\n          /* end map_seq */\n          v_l_id_15741 = atomic_inc(&(v_work_idx_635)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15736 = atomic_inc(v_work_idx_643); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15744",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15745",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15746",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15748",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15749",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15751",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__15757",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__15767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15762",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}