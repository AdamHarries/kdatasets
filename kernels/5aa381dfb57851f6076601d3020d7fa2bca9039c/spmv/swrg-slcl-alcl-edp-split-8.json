{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10121, const global float* restrict v__10122, const global float* restrict v__10123, const global float* restrict v__10124, float v__10125, float v__10126, global float* v__10145, local float* v__10140, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10129; \n  float v__10131; \n  float v__9610; \n  /* Private Memory */\n  float v__10133_0;\n  \n  float v__10135_0;\n  \n  int v__10139_0;\n  \n  for (int v_wg_id_10114 = get_group_id(0); v_wg_id_10114 < v_MHeight_2; v_wg_id_10114 = (v_wg_id_10114 + get_num_groups(0))) {\n    for (int v_l_id_10115 = get_local_id(0); v_l_id_10115 < v_MWidthC_1; v_l_id_10115 = (v_l_id_10115 + get_local_size(0))) {\n      float v_tmp_10209 = 0.0f; \n      v__10129 = v_tmp_10209; \n      /* reduce_while_seq */\n      for (int v_i_10116 = 0; v_i_10116 < 8; v_i_10116 = (1 + v_i_10116)) {\n        v__10139_0 = check(v__10129, v__10121[(v_l_id_10115 + (8 * v_MWidthC_1 * v_wg_id_10114) + (v_MWidthC_1 * v_i_10116))]); \n        if (v__10139_0) {\n        } else {\n          break;\n        }\n        float v_tmp_10210 = 0.0f; \n        v__10131 = v_tmp_10210; \n        int v_index_10211 = v__10121[(v_l_id_10115 + (8 * v_MWidthC_1 * v_wg_id_10114) + (v_MWidthC_1 * v_i_10116))]; \n        if (v_index_10211 < 0) {\n          v__10133_0 = v__10131; \n        } else {\n          if (v_index_10211 >= v_VLength_3) {\n            v__10133_0 = v__10131; \n          } else {\n            v__10133_0 = v__10123[v_index_10211]; \n          }\n        }\n        v__10135_0 = mult(v__10133_0, v__10122[(v_l_id_10115 + (8 * v_MWidthC_1 * v_wg_id_10114) + (v_MWidthC_1 * v_i_10116))]); \n        v__10129 = add(v__10135_0, v__10129); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10117 = 0; \n        v__10140[v_l_id_10115] = id(v__10129); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_105; \n      v_work_idx_105 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10118 = atomic_inc(&(v_work_idx_105)); \n      while((v_l_id_10118 < 1)){\n        float v_tmp_10214 = 0.0f; \n        v__9610 = v_tmp_10214; \n        /* reduce_seq */\n        for (int v_i_10119 = 0; v_i_10119 < v_MWidthC_1; v_i_10119 = (1 + v_i_10119)) {\n          v__9610 = add(v__9610, v__10140[(v_i_10119 + (v_MWidthC_1 * v_l_id_10118))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10120 = 0; \n          v__10145[v_wg_id_10114] = doubleMultiplyAdd(v__9610, v__10125, v__10124[v_wg_id_10114], v__10126); \n        }\n        /* end map_seq */\n        v_l_id_10118 = atomic_inc(&(v_work_idx_105)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10121",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10122",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10123",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10124",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10125",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10126",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10145",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10140",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}