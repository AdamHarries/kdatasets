{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14177, const global float* restrict v__14178, const global float* restrict v__14179, const global float* restrict v__14180, float v__14181, float v__14182, global float* v__14199, local float* v__14194, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14185; \n  float v__14187; \n  float v__9610; \n  /* Private Memory */\n  float v__14189_0;\n  \n  float v__14191_0;\n  \n  for (int v_wg_id_14170 = get_group_id(0); v_wg_id_14170 < v_MHeight_2; v_wg_id_14170 = (v_wg_id_14170 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_489; \n      v_work_idx_489 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_14171 = atomic_inc(&(v_work_idx_489)); \n      while((v_l_id_14171 < v_MWidthC_1)){\n        float v_tmp_14252 = 0.0f; \n        v__14185 = v_tmp_14252; \n        /* reduce_seq */\n        for (int v_i_14172 = 0; v_i_14172 < 16; v_i_14172 = (1 + v_i_14172)) {\n          float v_tmp_14253 = 0.0f; \n          v__14187 = v_tmp_14253; \n          int v_index_14254 = v__14177[(v_l_id_14171 + (16 * v_MWidthC_1 * v_wg_id_14170) + (v_MWidthC_1 * v_i_14172))]; \n          if (v_index_14254 < 0) {\n            v__14189_0 = v__14187; \n          } else {\n            if (v_index_14254 >= v_VLength_3) {\n              v__14189_0 = v__14187; \n            } else {\n              v__14189_0 = v__14179[v_index_14254]; \n            }\n          }\n          v__14191_0 = mult(v__14189_0, v__14178[(v_l_id_14171 + (16 * v_MWidthC_1 * v_wg_id_14170) + (v_MWidthC_1 * v_i_14172))]); \n          v__14185 = add(v__14191_0, v__14185); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14173 = 0; \n          v__14194[v_l_id_14171] = id(v__14185); \n        }\n        /* end map_seq */\n        v_l_id_14171 = atomic_inc(&(v_work_idx_489)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_484; \n      v_work_idx_484 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_14174 = atomic_inc(&(v_work_idx_484)); \n      while((v_l_id_14174 < 1)){\n        float v_tmp_14257 = 0.0f; \n        v__9610 = v_tmp_14257; \n        /* reduce_seq */\n        for (int v_i_14175 = 0; v_i_14175 < v_MWidthC_1; v_i_14175 = (1 + v_i_14175)) {\n          v__9610 = add(v__9610, v__14194[(v_i_14175 + (v_MWidthC_1 * v_l_id_14174))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14176 = 0; \n          v__14199[v_wg_id_14170] = doubleMultiplyAdd(v__9610, v__14181, v__14180[v_wg_id_14170], v__14182); \n        }\n        /* end map_seq */\n        v_l_id_14174 = atomic_inc(&(v_work_idx_484)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__14177",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14178",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14179",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14180",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14181",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14182",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14194",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}