{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28041, const global float* restrict v__28042, const global float* restrict v__28043, const global float* restrict v__28044, float v__28045, float v__28046, global float* v__28064, global int* v__28048, local float* v__28059, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28050; \n  float v__28052; \n  float v__9610; \n  /* Private Memory */\n  float v__28054_0;\n  \n  float v__28056_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1786 = v__28048; \n    local int v_w_id_28034; \n    if (get_local_id(0) == 0) {\n      v_w_id_28034 = atomic_inc(v_work_idx_1786); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28034 < v_MHeight_2)){\n      for (int v_l_id_28035 = get_local_id(0); v_l_id_28035 < v_MWidthC_1; v_l_id_28035 = (v_l_id_28035 + get_local_size(0))) {\n        float v_tmp_28127 = 0.0f; \n        v__28050 = v_tmp_28127; \n        /* reduce_seq */\n        for (int v_i_28036 = 0; v_i_28036 < 256; v_i_28036 = (1 + v_i_28036)) {\n          float v_tmp_28128 = 0.0f; \n          v__28052 = v_tmp_28128; \n          int v_index_28129 = v__28041[(v_l_id_28035 + (256 * v_MWidthC_1 * v_w_id_28034) + (v_MWidthC_1 * v_i_28036))]; \n          if (v_index_28129 < 0) {\n            v__28054_0 = v__28052; \n          } else {\n            if (v_index_28129 >= v_VLength_3) {\n              v__28054_0 = v__28052; \n            } else {\n              v__28054_0 = v__28043[v_index_28129]; \n            }\n          }\n          v__28056_0 = mult(v__28054_0, v__28042[(v_l_id_28035 + (256 * v_MWidthC_1 * v_w_id_28034) + (v_MWidthC_1 * v_i_28036))]); \n          v__28050 = add(v__28056_0, v__28050); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28037 = 0; \n          v__28059[v_l_id_28035] = id(v__28050); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_28038 = get_local_id(0); \n        float v_tmp_28132 = 0.0f; \n        v__9610 = v_tmp_28132; \n        /* reduce_seq */\n        for (int v_i_28039 = 0; v_i_28039 < v_MWidthC_1; v_i_28039 = (1 + v_i_28039)) {\n          v__9610 = add(v__9610, v__28059[(v_i_28039 + (v_MWidthC_1 * v_l_id_28038))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28040 = 0; \n          v__28064[v_w_id_28034] = doubleMultiplyAdd(v__9610, v__28045, v__28044[v_w_id_28034], v__28046); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28034 = atomic_inc(v_work_idx_1786); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28041",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28042",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28043",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28044",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28045",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28046",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28048",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28059",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}