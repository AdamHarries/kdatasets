{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10749, const global float* restrict v__10750, const global float* restrict v__10751, const global float* restrict v__10752, float v__10753, float v__10754, global float* v__10771, global float* v__10761, local float* v__10766, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10757; \n  float v__10762; \n  float v__9610; \n  /* Private Memory */\n  float v__10759_0;\n  \n  for (int v_wg_id_10741 = get_group_id(0); v_wg_id_10741 < v_MHeight_2; v_wg_id_10741 = (v_wg_id_10741 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_167; \n      v_work_idx_167 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10742 = atomic_inc(&(v_work_idx_167)); \n      while((v_l_id_10742 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_10743 = 0; v_i_10743 < 8; v_i_10743 = (1 + v_i_10743)) {\n          float v_tmp_10824 = 0.0f; \n          v__10757 = v_tmp_10824; \n          int v_index_10825 = v__10749[(v_l_id_10742 + (8 * v_MWidthC_1 * v_wg_id_10741) + (v_MWidthC_1 * v_i_10743))]; \n          if (v_index_10825 < 0) {\n            v__10759_0 = v__10757; \n          } else {\n            if (v_index_10825 >= v_VLength_3) {\n              v__10759_0 = v__10757; \n            } else {\n              v__10759_0 = v__10751[v_index_10825]; \n            }\n          }\n          v__10761[(v_i_10743 + (8 * v_MWidthC_1 * v_wg_id_10741) + (8 * v_l_id_10742))] = mult(v__10759_0, v__10750[(v_l_id_10742 + (8 * v_MWidthC_1 * v_wg_id_10741) + (v_MWidthC_1 * v_i_10743))]); \n        }\n        /* end map_seq */\n        float v_tmp_10826 = 0.0f; \n        v__10762 = v_tmp_10826; \n        /* reduce_seq */\n        for (int v_i_10744 = 0; v_i_10744 < 8; v_i_10744 = (1 + v_i_10744)) {\n          v__10762 = add(v__10762, v__10761[(v_i_10744 + (8 * v_MWidthC_1 * v_wg_id_10741) + (8 * v_l_id_10742))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10745 = 0; \n          v__10766[v_l_id_10742] = id(v__10762); \n        }\n        /* end map_seq */\n        v_l_id_10742 = atomic_inc(&(v_work_idx_167)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_161; \n      v_work_idx_161 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10746 = atomic_inc(&(v_work_idx_161)); \n      while((v_l_id_10746 < 1)){\n        float v_tmp_10829 = 0.0f; \n        v__9610 = v_tmp_10829; \n        /* reduce_seq */\n        for (int v_i_10747 = 0; v_i_10747 < v_MWidthC_1; v_i_10747 = (1 + v_i_10747)) {\n          v__9610 = add(v__9610, v__10766[(v_i_10747 + (v_MWidthC_1 * v_l_id_10746))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10748 = 0; \n          v__10771[v_wg_id_10741] = doubleMultiplyAdd(v__9610, v__10753, v__10752[v_wg_id_10741], v__10754); \n        }\n        /* end map_seq */\n        v_l_id_10746 = atomic_inc(&(v_work_idx_161)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10749",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10750",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10751",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10752",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10753",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10754",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10761",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10771",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10766",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}