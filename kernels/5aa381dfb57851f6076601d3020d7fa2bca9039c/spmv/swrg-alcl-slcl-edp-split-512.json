{
  "name" : "swrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30649, const global float* restrict v__30650, const global float* restrict v__30651, const global float* restrict v__30652, float v__30653, float v__30654, global float* v__30673, local float* v__30668, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30657; \n  float v__30659; \n  float v__9610; \n  /* Private Memory */\n  float v__30661_0;\n  \n  float v__30663_0;\n  \n  int v__30667_0;\n  \n  for (int v_wg_id_30642 = get_group_id(0); v_wg_id_30642 < v_MHeight_2; v_wg_id_30642 = (v_wg_id_30642 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2028; \n      v_work_idx_2028 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30643 = atomic_inc(&(v_work_idx_2028)); \n      while((v_l_id_30643 < v_MWidthC_1)){\n        float v_tmp_30733 = 0.0f; \n        v__30657 = v_tmp_30733; \n        /* reduce_while_seq */\n        for (int v_i_30644 = 0; v_i_30644 < 512; v_i_30644 = (1 + v_i_30644)) {\n          v__30667_0 = check(v__30657, v__30649[(v_l_id_30643 + (512 * v_MWidthC_1 * v_wg_id_30642) + (v_MWidthC_1 * v_i_30644))]); \n          if (v__30667_0) {\n          } else {\n            break;\n          }\n          float v_tmp_30734 = 0.0f; \n          v__30659 = v_tmp_30734; \n          int v_index_30735 = v__30649[(v_l_id_30643 + (512 * v_MWidthC_1 * v_wg_id_30642) + (v_MWidthC_1 * v_i_30644))]; \n          if (v_index_30735 < 0) {\n            v__30661_0 = v__30659; \n          } else {\n            if (v_index_30735 >= v_VLength_3) {\n              v__30661_0 = v__30659; \n            } else {\n              v__30661_0 = v__30651[v_index_30735]; \n            }\n          }\n          v__30663_0 = mult(v__30661_0, v__30650[(v_l_id_30643 + (512 * v_MWidthC_1 * v_wg_id_30642) + (v_MWidthC_1 * v_i_30644))]); \n          v__30657 = add(v__30663_0, v__30657); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30645 = 0; \n          v__30668[v_l_id_30643] = id(v__30657); \n        }\n        /* end map_seq */\n        v_l_id_30643 = atomic_inc(&(v_work_idx_2028)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_30646 = get_local_id(0); \n      float v_tmp_30738 = 0.0f; \n      v__9610 = v_tmp_30738; \n      /* reduce_seq */\n      for (int v_i_30647 = 0; v_i_30647 < v_MWidthC_1; v_i_30647 = (1 + v_i_30647)) {\n        v__9610 = add(v__9610, v__30668[(v_i_30647 + (v_MWidthC_1 * v_l_id_30646))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_30648 = 0; \n        v__30673[v_wg_id_30642] = doubleMultiplyAdd(v__9610, v__30653, v__30652[v_wg_id_30642], v__30654); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30649",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30650",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30651",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30653",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30654",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30668",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}