{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13783, const global float* restrict v__13784, const global float* restrict v__13785, const global float* restrict v__13786, float v__13787, float v__13788, global float* v__13805, global float* v__13795, local float* v__13800, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13791; \n  float v__13796; \n  float v__9610; \n  /* Private Memory */\n  float v__13793_0;\n  \n  for (int v_wg_id_13775 = get_group_id(0); v_wg_id_13775 < v_MHeight_2; v_wg_id_13775 = (v_wg_id_13775 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_450; \n      v_work_idx_450 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13776 = atomic_inc(&(v_work_idx_450)); \n      while((v_l_id_13776 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_13777 = 0; v_i_13777 < 16; v_i_13777 = (1 + v_i_13777)) {\n          float v_tmp_13862 = 0.0f; \n          v__13791 = v_tmp_13862; \n          int v_index_13863 = v__13783[(v_l_id_13776 + (16 * v_MWidthC_1 * v_wg_id_13775) + (v_MWidthC_1 * v_i_13777))]; \n          if (v_index_13863 < 0) {\n            v__13793_0 = v__13791; \n          } else {\n            if (v_index_13863 >= v_VLength_3) {\n              v__13793_0 = v__13791; \n            } else {\n              v__13793_0 = v__13785[v_index_13863]; \n            }\n          }\n          v__13795[(v_i_13777 + (16 * v_MWidthC_1 * v_wg_id_13775) + (16 * v_l_id_13776))] = mult(v__13793_0, v__13784[(v_l_id_13776 + (16 * v_MWidthC_1 * v_wg_id_13775) + (v_MWidthC_1 * v_i_13777))]); \n        }\n        /* end map_seq */\n        float v_tmp_13864 = 0.0f; \n        v__13796 = v_tmp_13864; \n        /* reduce_seq */\n        for (int v_i_13778 = 0; v_i_13778 < 16; v_i_13778 = (1 + v_i_13778)) {\n          v__13796 = add(v__13796, v__13795[(v_i_13778 + (16 * v_MWidthC_1 * v_wg_id_13775) + (16 * v_l_id_13776))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13779 = 0; \n          v__13800[v_l_id_13776] = id(v__13796); \n        }\n        /* end map_seq */\n        v_l_id_13776 = atomic_inc(&(v_work_idx_450)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13780 = get_local_id(0); \n      float v_tmp_13867 = 0.0f; \n      v__9610 = v_tmp_13867; \n      /* reduce_seq */\n      for (int v_i_13781 = 0; v_i_13781 < v_MWidthC_1; v_i_13781 = (1 + v_i_13781)) {\n        v__9610 = add(v__9610, v__13800[(v_i_13781 + (v_MWidthC_1 * v_l_id_13780))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13782 = 0; \n        v__13805[v_wg_id_13775] = doubleMultiplyAdd(v__9610, v__13787, v__13786[v_wg_id_13775], v__13788); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13783",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13784",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13785",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13786",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13787",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13788",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13795",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13800",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}