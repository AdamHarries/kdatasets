{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32600, const global float* restrict v__32601, const global float* restrict v__32602, const global float* restrict v__32603, float v__32604, float v__32605, global float* v__32625, global int* v__32607, local float* v__32620, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32609; \n  float v__32611; \n  float v__9610; \n  /* Private Memory */\n  float v__32613_0;\n  \n  float v__32615_0;\n  \n  int v__32619_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2225 = v__32607; \n    local int v_w_id_32593; \n    if (get_local_id(0) == 0) {\n      v_w_id_32593 = atomic_inc(v_work_idx_2225); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32593 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2223; \n        v_work_idx_2223 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_32594 = atomic_inc(&(v_work_idx_2223)); \n        while((v_l_id_32594 < v_MWidthC_1)){\n          float v_tmp_32679 = 0.0f; \n          v__32609 = v_tmp_32679; \n          /* reduce_while_seq */\n          for (int v_i_32595 = 0; v_i_32595 < 512; v_i_32595 = (1 + v_i_32595)) {\n            v__32619_0 = check(v__32609, v__32600[(v_l_id_32594 + (512 * v_MWidthC_1 * v_w_id_32593) + (v_MWidthC_1 * v_i_32595))]); \n            if (v__32619_0) {\n            } else {\n              break;\n            }\n            float v_tmp_32680 = 0.0f; \n            v__32611 = v_tmp_32680; \n            int v_index_32681 = v__32600[(v_l_id_32594 + (512 * v_MWidthC_1 * v_w_id_32593) + (v_MWidthC_1 * v_i_32595))]; \n            if (v_index_32681 < 0) {\n              v__32613_0 = v__32611; \n            } else {\n              if (v_index_32681 >= v_VLength_3) {\n                v__32613_0 = v__32611; \n              } else {\n                v__32613_0 = v__32602[v_index_32681]; \n              }\n            }\n            v__32615_0 = mult(v__32613_0, v__32601[(v_l_id_32594 + (512 * v_MWidthC_1 * v_w_id_32593) + (v_MWidthC_1 * v_i_32595))]); \n            v__32609 = add(v__32615_0, v__32609); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32596 = 0; \n            v__32620[v_l_id_32594] = id(v__32609); \n          }\n          /* end map_seq */\n          v_l_id_32594 = atomic_inc(&(v_work_idx_2223)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2218; \n        v_work_idx_2218 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_32597 = atomic_inc(&(v_work_idx_2218)); \n        while((v_l_id_32597 < 1)){\n          float v_tmp_32684 = 0.0f; \n          v__9610 = v_tmp_32684; \n          /* reduce_seq */\n          for (int v_i_32598 = 0; v_i_32598 < v_MWidthC_1; v_i_32598 = (1 + v_i_32598)) {\n            v__9610 = add(v__9610, v__32620[(v_i_32598 + (v_MWidthC_1 * v_l_id_32597))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32599 = 0; \n            v__32625[v_w_id_32593] = doubleMultiplyAdd(v__9610, v__32604, v__32603[v_w_id_32593], v__32605); \n          }\n          /* end map_seq */\n          v_l_id_32597 = atomic_inc(&(v_work_idx_2218)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32593 = atomic_inc(v_work_idx_2225); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__32600",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32601",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32602",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32603",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32604",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32605",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32607",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32620",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}