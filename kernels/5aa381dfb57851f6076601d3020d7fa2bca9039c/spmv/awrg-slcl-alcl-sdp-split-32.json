{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18255, const global float* restrict v__18256, const global float* restrict v__18257, const global float* restrict v__18258, float v__18259, float v__18260, global float* v__18278, global int* v__18262, global float* v__18268, local float* v__18273, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18264; \n  float v__18269; \n  float v__9610; \n  /* Private Memory */\n  float v__18266_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_870 = v__18262; \n    local int v_w_id_18247; \n    if (get_local_id(0) == 0) {\n      v_w_id_18247 = atomic_inc(v_work_idx_870); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18247 < v_MHeight_2)){\n      for (int v_l_id_18248 = get_local_id(0); v_l_id_18248 < v_MWidthC_1; v_l_id_18248 = (v_l_id_18248 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_18249 = 0; v_i_18249 < 32; v_i_18249 = (1 + v_i_18249)) {\n          float v_tmp_18337 = 0.0f; \n          v__18264 = v_tmp_18337; \n          int v_index_18338 = v__18255[(v_l_id_18248 + (32 * v_MWidthC_1 * v_w_id_18247) + (v_MWidthC_1 * v_i_18249))]; \n          if (v_index_18338 < 0) {\n            v__18266_0 = v__18264; \n          } else {\n            if (v_index_18338 >= v_VLength_3) {\n              v__18266_0 = v__18264; \n            } else {\n              v__18266_0 = v__18257[v_index_18338]; \n            }\n          }\n          v__18268[(v_i_18249 + (32 * v_MWidthC_1 * v_w_id_18247) + (32 * v_l_id_18248))] = mult(v__18266_0, v__18256[(v_l_id_18248 + (32 * v_MWidthC_1 * v_w_id_18247) + (v_MWidthC_1 * v_i_18249))]); \n        }\n        /* end map_seq */\n        float v_tmp_18339 = 0.0f; \n        v__18269 = v_tmp_18339; \n        /* reduce_seq */\n        for (int v_i_18250 = 0; v_i_18250 < 32; v_i_18250 = (1 + v_i_18250)) {\n          v__18269 = add(v__18269, v__18268[(v_i_18250 + (32 * v_MWidthC_1 * v_w_id_18247) + (32 * v_l_id_18248))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18251 = 0; \n          v__18273[v_l_id_18248] = id(v__18269); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_863; \n        v_work_idx_863 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_18252 = atomic_inc(&(v_work_idx_863)); \n        while((v_l_id_18252 < 1)){\n          float v_tmp_18342 = 0.0f; \n          v__9610 = v_tmp_18342; \n          /* reduce_seq */\n          for (int v_i_18253 = 0; v_i_18253 < v_MWidthC_1; v_i_18253 = (1 + v_i_18253)) {\n            v__9610 = add(v__9610, v__18273[(v_i_18253 + (v_MWidthC_1 * v_l_id_18252))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18254 = 0; \n            v__18278[v_w_id_18247] = doubleMultiplyAdd(v__9610, v__18259, v__18258[v_w_id_18247], v__18260); \n          }\n          /* end map_seq */\n          v_l_id_18252 = atomic_inc(&(v_work_idx_863)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18247 = atomic_inc(v_work_idx_870); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__18255",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18256",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18257",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18258",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18259",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18260",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18262",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__18268",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__18278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18273",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}