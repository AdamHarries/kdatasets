{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20451, const global float* restrict v__20452, const global float* restrict v__20453, const global float* restrict v__20454, float v__20455, float v__20456, global float* v__20473, global float* v__20463, local float* v__20468, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20459; \n  float v__20464; \n  float v__9610; \n  /* Private Memory */\n  float v__20461_0;\n  \n  for (int v_wg_id_20443 = get_group_id(0); v_wg_id_20443 < v_MHeight_2; v_wg_id_20443 = (v_wg_id_20443 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1074; \n      v_work_idx_1074 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_20444 = atomic_inc(&(v_work_idx_1074)); \n      while((v_l_id_20444 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20445 = 0; v_i_20445 < 64; v_i_20445 = (1 + v_i_20445)) {\n          float v_tmp_20530 = 0.0f; \n          v__20459 = v_tmp_20530; \n          int v_index_20531 = v__20451[(v_l_id_20444 + (64 * v_MWidthC_1 * v_wg_id_20443) + (v_MWidthC_1 * v_i_20445))]; \n          if (v_index_20531 < 0) {\n            v__20461_0 = v__20459; \n          } else {\n            if (v_index_20531 >= v_VLength_3) {\n              v__20461_0 = v__20459; \n            } else {\n              v__20461_0 = v__20453[v_index_20531]; \n            }\n          }\n          v__20463[(v_i_20445 + (64 * v_MWidthC_1 * v_wg_id_20443) + (64 * v_l_id_20444))] = mult(v__20461_0, v__20452[(v_l_id_20444 + (64 * v_MWidthC_1 * v_wg_id_20443) + (v_MWidthC_1 * v_i_20445))]); \n        }\n        /* end map_seq */\n        float v_tmp_20532 = 0.0f; \n        v__20464 = v_tmp_20532; \n        /* reduce_seq */\n        for (int v_i_20446 = 0; v_i_20446 < 64; v_i_20446 = (1 + v_i_20446)) {\n          v__20464 = add(v__20464, v__20463[(v_i_20446 + (64 * v_MWidthC_1 * v_wg_id_20443) + (64 * v_l_id_20444))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20447 = 0; \n          v__20468[v_l_id_20444] = id(v__20464); \n        }\n        /* end map_seq */\n        v_l_id_20444 = atomic_inc(&(v_work_idx_1074)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_20448 = get_local_id(0); \n      float v_tmp_20535 = 0.0f; \n      v__9610 = v_tmp_20535; \n      /* reduce_seq */\n      for (int v_i_20449 = 0; v_i_20449 < v_MWidthC_1; v_i_20449 = (1 + v_i_20449)) {\n        v__9610 = add(v__9610, v__20468[(v_i_20449 + (v_MWidthC_1 * v_l_id_20448))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20450 = 0; \n        v__20473[v_wg_id_20443] = doubleMultiplyAdd(v__9610, v__20455, v__20454[v_wg_id_20443], v__20456); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20451",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20452",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20453",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20454",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20455",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20456",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20463",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20468",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}