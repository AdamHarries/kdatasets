{
  "name" : "swrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30371, const global float* restrict v__30372, const global float* restrict v__30373, const global float* restrict v__30374, float v__30375, float v__30376, global float* v__30391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30378; \n  float v__30381; \n  /* Private Memory */\n  float v__30383_0;\n  \n  float v__30385_0;\n  \n  int v__30389_0;\n  \n  for (int v_wg_id_30367 = get_group_id(0); v_wg_id_30367 < v_MHeight_2; v_wg_id_30367 = (v_wg_id_30367 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2000; \n      v_work_idx_2000 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30368 = atomic_inc(&(v_work_idx_2000)); \n      while((v_l_id_30368 < 512)){\n        float v_tmp_30436 = 0.0f; \n        v__30378 = v_tmp_30436; \n        /* reduce_while_seq */\n        for (int v_i_30369 = 0; v_i_30369 < v_MWidthC_1; v_i_30369 = (1 + v_i_30369)) {\n          v__30389_0 = check(v__30378, v__30371[(v_i_30369 + (512 * v_MWidthC_1 * v_wg_id_30367) + (v_MWidthC_1 * v_l_id_30368))]); \n          if (v__30389_0) {\n          } else {\n            break;\n          }\n          float v_tmp_30437 = 0.0f; \n          v__30381 = v_tmp_30437; \n          int v_index_30438 = v__30371[(v_i_30369 + (512 * v_MWidthC_1 * v_wg_id_30367) + (v_MWidthC_1 * v_l_id_30368))]; \n          if (v_index_30438 < 0) {\n            v__30383_0 = v__30381; \n          } else {\n            if (v_index_30438 >= v_VLength_3) {\n              v__30383_0 = v__30381; \n            } else {\n              v__30383_0 = v__30373[v_index_30438]; \n            }\n          }\n          v__30385_0 = mult(v__30383_0, v__30372[(v_i_30369 + (512 * v_MWidthC_1 * v_wg_id_30367) + (v_MWidthC_1 * v_l_id_30368))]); \n          v__30378 = add(v__30385_0, v__30378); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30370 = 0; \n          v__30391[(v_l_id_30368 + (512 * v_wg_id_30367))] = doubleMultiplyAdd(v__30378, v__30375, v__30374[(v_l_id_30368 + (512 * v_wg_id_30367))], v__30376); \n        }\n        /* end map_seq */\n        v_l_id_30368 = atomic_inc(&(v_work_idx_2000)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30371",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30372",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30373",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30374",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__30375",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30376",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30391",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}