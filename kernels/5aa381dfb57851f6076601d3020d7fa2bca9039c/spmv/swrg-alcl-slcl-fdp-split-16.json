{
  "name" : "swrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13881, const global float* restrict v__13882, const global float* restrict v__13883, const global float* restrict v__13884, float v__13885, float v__13886, global float* v__13903, local float* v__13898, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13889; \n  float v__13891; \n  float v__9610; \n  /* Private Memory */\n  float v__13893_0;\n  \n  float v__13895_0;\n  \n  for (int v_wg_id_13874 = get_group_id(0); v_wg_id_13874 < v_MHeight_2; v_wg_id_13874 = (v_wg_id_13874 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_459; \n      v_work_idx_459 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13875 = atomic_inc(&(v_work_idx_459)); \n      while((v_l_id_13875 < v_MWidthC_1)){\n        float v_tmp_13960 = 0.0f; \n        v__13889 = v_tmp_13960; \n        /* reduce_seq */\n        for (int v_i_13876 = 0; v_i_13876 < 16; v_i_13876 = (1 + v_i_13876)) {\n          float v_tmp_13961 = 0.0f; \n          v__13891 = v_tmp_13961; \n          int v_index_13962 = v__13881[(v_l_id_13875 + (16 * v_MWidthC_1 * v_wg_id_13874) + (v_MWidthC_1 * v_i_13876))]; \n          if (v_index_13962 < 0) {\n            v__13893_0 = v__13891; \n          } else {\n            if (v_index_13962 >= v_VLength_3) {\n              v__13893_0 = v__13891; \n            } else {\n              v__13893_0 = v__13883[v_index_13962]; \n            }\n          }\n          v__13895_0 = mult(v__13893_0, v__13882[(v_l_id_13875 + (16 * v_MWidthC_1 * v_wg_id_13874) + (v_MWidthC_1 * v_i_13876))]); \n          v__13889 = add(v__13895_0, v__13889); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13877 = 0; \n          v__13898[v_l_id_13875] = id(v__13889); \n        }\n        /* end map_seq */\n        v_l_id_13875 = atomic_inc(&(v_work_idx_459)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13878 = get_local_id(0); \n      float v_tmp_13965 = 0.0f; \n      v__9610 = v_tmp_13965; \n      /* reduce_seq */\n      for (int v_i_13879 = 0; v_i_13879 < v_MWidthC_1; v_i_13879 = (1 + v_i_13879)) {\n        v__9610 = add(v__9610, v__13898[(v_i_13879 + (v_MWidthC_1 * v_l_id_13878))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13880 = 0; \n        v__13903[v_wg_id_13874] = doubleMultiplyAdd(v__9610, v__13885, v__13884[v_wg_id_13874], v__13886); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__13881",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13882",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13883",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13884",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13885",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13886",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13903",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13898",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}