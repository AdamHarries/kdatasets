{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17117, const global float* restrict v__17118, const global float* restrict v__17119, const global float* restrict v__17120, float v__17121, float v__17122, global float* v__17139, global float* v__17129, local float* v__17134, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17125; \n  float v__17130; \n  float v__9610; \n  /* Private Memory */\n  float v__17127_0;\n  \n  for (int v_wg_id_17109 = get_group_id(0); v_wg_id_17109 < v_MHeight_2; v_wg_id_17109 = (v_wg_id_17109 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_762; \n      v_work_idx_762 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_17110 = atomic_inc(&(v_work_idx_762)); \n      while((v_l_id_17110 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_17111 = 0; v_i_17111 < 32; v_i_17111 = (1 + v_i_17111)) {\n          float v_tmp_17196 = 0.0f; \n          v__17125 = v_tmp_17196; \n          int v_index_17197 = v__17117[(v_l_id_17110 + (32 * v_MWidthC_1 * v_wg_id_17109) + (v_MWidthC_1 * v_i_17111))]; \n          if (v_index_17197 < 0) {\n            v__17127_0 = v__17125; \n          } else {\n            if (v_index_17197 >= v_VLength_3) {\n              v__17127_0 = v__17125; \n            } else {\n              v__17127_0 = v__17119[v_index_17197]; \n            }\n          }\n          v__17129[(v_i_17111 + (32 * v_MWidthC_1 * v_wg_id_17109) + (32 * v_l_id_17110))] = mult(v__17127_0, v__17118[(v_l_id_17110 + (32 * v_MWidthC_1 * v_wg_id_17109) + (v_MWidthC_1 * v_i_17111))]); \n        }\n        /* end map_seq */\n        float v_tmp_17198 = 0.0f; \n        v__17130 = v_tmp_17198; \n        /* reduce_seq */\n        for (int v_i_17112 = 0; v_i_17112 < 32; v_i_17112 = (1 + v_i_17112)) {\n          v__17130 = add(v__17130, v__17129[(v_i_17112 + (32 * v_MWidthC_1 * v_wg_id_17109) + (32 * v_l_id_17110))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17113 = 0; \n          v__17134[v_l_id_17110] = id(v__17130); \n        }\n        /* end map_seq */\n        v_l_id_17110 = atomic_inc(&(v_work_idx_762)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_17114 = get_local_id(0); \n      float v_tmp_17201 = 0.0f; \n      v__9610 = v_tmp_17201; \n      /* reduce_seq */\n      for (int v_i_17115 = 0; v_i_17115 < v_MWidthC_1; v_i_17115 = (1 + v_i_17115)) {\n        v__9610 = add(v__9610, v__17134[(v_i_17115 + (v_MWidthC_1 * v_l_id_17114))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_17116 = 0; \n        v__17139[v_wg_id_17109] = doubleMultiplyAdd(v__9610, v__17121, v__17120[v_wg_id_17109], v__17122); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17117",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17118",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17119",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17120",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17121",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17122",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17129",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__17139",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17134",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}