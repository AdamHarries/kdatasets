{
  "name" : "swrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26967, const global float* restrict v__26968, const global float* restrict v__26969, const global float* restrict v__26970, float v__26971, float v__26972, global float* v__26985, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26975; \n  float v__26977; \n  /* Private Memory */\n  float v__26979_0;\n  \n  float v__26981_0;\n  \n  for (int v_wg_id_26963 = get_group_id(0); v_wg_id_26963 < v_MHeight_2; v_wg_id_26963 = (v_wg_id_26963 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1682; \n      v_work_idx_1682 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_26964 = atomic_inc(&(v_work_idx_1682)); \n      while((v_l_id_26964 < 256)){\n        float v_tmp_27024 = 0.0f; \n        v__26975 = v_tmp_27024; \n        /* reduce_seq */\n        for (int v_i_26965 = 0; v_i_26965 < v_MWidthC_1; v_i_26965 = (1 + v_i_26965)) {\n          float v_tmp_27025 = 0.0f; \n          v__26977 = v_tmp_27025; \n          int v_index_27026 = v__26967[(v_i_26965 + (256 * v_MWidthC_1 * v_wg_id_26963) + (v_MWidthC_1 * v_l_id_26964))]; \n          if (v_index_27026 < 0) {\n            v__26979_0 = v__26977; \n          } else {\n            if (v_index_27026 >= v_VLength_3) {\n              v__26979_0 = v__26977; \n            } else {\n              v__26979_0 = v__26969[v_index_27026]; \n            }\n          }\n          v__26981_0 = mult(v__26979_0, v__26968[(v_i_26965 + (256 * v_MWidthC_1 * v_wg_id_26963) + (v_MWidthC_1 * v_l_id_26964))]); \n          v__26975 = add(v__26981_0, v__26975); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26966 = 0; \n          v__26985[(v_l_id_26964 + (256 * v_wg_id_26963))] = doubleMultiplyAdd(v__26975, v__26971, v__26970[(v_l_id_26964 + (256 * v_wg_id_26963))], v__26972); \n        }\n        /* end map_seq */\n        v_l_id_26964 = atomic_inc(&(v_work_idx_1682)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__26967",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26968",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26969",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26970",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__26971",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26972",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__26985",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}