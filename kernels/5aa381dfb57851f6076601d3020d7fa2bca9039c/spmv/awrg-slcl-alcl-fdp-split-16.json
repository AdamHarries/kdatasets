{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15022, const global float* restrict v__15023, const global float* restrict v__15024, const global float* restrict v__15025, float v__15026, float v__15027, global float* v__15045, global int* v__15029, local float* v__15040, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15031; \n  float v__15033; \n  float v__9610; \n  /* Private Memory */\n  float v__15035_0;\n  \n  float v__15037_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_568 = v__15029; \n    local int v_w_id_15015; \n    if (get_local_id(0) == 0) {\n      v_w_id_15015 = atomic_inc(v_work_idx_568); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15015 < v_MHeight_2)){\n      for (int v_l_id_15016 = get_local_id(0); v_l_id_15016 < v_MWidthC_1; v_l_id_15016 = (v_l_id_15016 + get_local_size(0))) {\n        float v_tmp_15104 = 0.0f; \n        v__15031 = v_tmp_15104; \n        /* reduce_seq */\n        for (int v_i_15017 = 0; v_i_15017 < 16; v_i_15017 = (1 + v_i_15017)) {\n          float v_tmp_15105 = 0.0f; \n          v__15033 = v_tmp_15105; \n          int v_index_15106 = v__15022[(v_l_id_15016 + (16 * v_MWidthC_1 * v_w_id_15015) + (v_MWidthC_1 * v_i_15017))]; \n          if (v_index_15106 < 0) {\n            v__15035_0 = v__15033; \n          } else {\n            if (v_index_15106 >= v_VLength_3) {\n              v__15035_0 = v__15033; \n            } else {\n              v__15035_0 = v__15024[v_index_15106]; \n            }\n          }\n          v__15037_0 = mult(v__15035_0, v__15023[(v_l_id_15016 + (16 * v_MWidthC_1 * v_w_id_15015) + (v_MWidthC_1 * v_i_15017))]); \n          v__15031 = add(v__15037_0, v__15031); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15018 = 0; \n          v__15040[v_l_id_15016] = id(v__15031); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_562; \n        v_work_idx_562 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15019 = atomic_inc(&(v_work_idx_562)); \n        while((v_l_id_15019 < 1)){\n          float v_tmp_15109 = 0.0f; \n          v__9610 = v_tmp_15109; \n          /* reduce_seq */\n          for (int v_i_15020 = 0; v_i_15020 < v_MWidthC_1; v_i_15020 = (1 + v_i_15020)) {\n            v__9610 = add(v__9610, v__15040[(v_i_15020 + (v_MWidthC_1 * v_l_id_15019))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15021 = 0; \n            v__15045[v_w_id_15015] = doubleMultiplyAdd(v__9610, v__15026, v__15025[v_w_id_15015], v__15027); \n          }\n          /* end map_seq */\n          v_l_id_15019 = atomic_inc(&(v_work_idx_562)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15015 = atomic_inc(v_work_idx_568); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15022",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15023",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15024",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15025",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15026",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15027",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15029",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15040",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}