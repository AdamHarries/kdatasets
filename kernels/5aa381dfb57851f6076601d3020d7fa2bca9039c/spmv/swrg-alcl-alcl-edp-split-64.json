{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20939, const global float* restrict v__20940, const global float* restrict v__20941, const global float* restrict v__20942, float v__20943, float v__20944, global float* v__20963, local float* v__20958, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20947; \n  float v__20949; \n  float v__9610; \n  /* Private Memory */\n  float v__20951_0;\n  \n  float v__20953_0;\n  \n  int v__20957_0;\n  \n  for (int v_wg_id_20932 = get_group_id(0); v_wg_id_20932 < v_MHeight_2; v_wg_id_20932 = (v_wg_id_20932 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1123; \n      v_work_idx_1123 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_20933 = atomic_inc(&(v_work_idx_1123)); \n      while((v_l_id_20933 < v_MWidthC_1)){\n        float v_tmp_21019 = 0.0f; \n        v__20947 = v_tmp_21019; \n        /* reduce_while_seq */\n        for (int v_i_20934 = 0; v_i_20934 < 64; v_i_20934 = (1 + v_i_20934)) {\n          v__20957_0 = check(v__20947, v__20939[(v_l_id_20933 + (64 * v_MWidthC_1 * v_wg_id_20932) + (v_MWidthC_1 * v_i_20934))]); \n          if (v__20957_0) {\n          } else {\n            break;\n          }\n          float v_tmp_21020 = 0.0f; \n          v__20949 = v_tmp_21020; \n          int v_index_21021 = v__20939[(v_l_id_20933 + (64 * v_MWidthC_1 * v_wg_id_20932) + (v_MWidthC_1 * v_i_20934))]; \n          if (v_index_21021 < 0) {\n            v__20951_0 = v__20949; \n          } else {\n            if (v_index_21021 >= v_VLength_3) {\n              v__20951_0 = v__20949; \n            } else {\n              v__20951_0 = v__20941[v_index_21021]; \n            }\n          }\n          v__20953_0 = mult(v__20951_0, v__20940[(v_l_id_20933 + (64 * v_MWidthC_1 * v_wg_id_20932) + (v_MWidthC_1 * v_i_20934))]); \n          v__20947 = add(v__20953_0, v__20947); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20935 = 0; \n          v__20958[v_l_id_20933] = id(v__20947); \n        }\n        /* end map_seq */\n        v_l_id_20933 = atomic_inc(&(v_work_idx_1123)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1118; \n      v_work_idx_1118 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_20936 = atomic_inc(&(v_work_idx_1118)); \n      while((v_l_id_20936 < 1)){\n        float v_tmp_21024 = 0.0f; \n        v__9610 = v_tmp_21024; \n        /* reduce_seq */\n        for (int v_i_20937 = 0; v_i_20937 < v_MWidthC_1; v_i_20937 = (1 + v_i_20937)) {\n          v__9610 = add(v__9610, v__20958[(v_i_20937 + (v_MWidthC_1 * v_l_id_20936))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20938 = 0; \n          v__20963[v_wg_id_20932] = doubleMultiplyAdd(v__9610, v__20943, v__20942[v_wg_id_20932], v__20944); \n        }\n        /* end map_seq */\n        v_l_id_20936 = atomic_inc(&(v_work_idx_1118)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__20939",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20940",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20941",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20943",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20944",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20963",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20958",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}