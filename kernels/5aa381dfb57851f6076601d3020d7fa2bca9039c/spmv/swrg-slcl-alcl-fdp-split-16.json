{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13353, const global float* restrict v__13354, const global float* restrict v__13355, const global float* restrict v__13356, float v__13357, float v__13358, global float* v__13375, local float* v__13370, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13361; \n  float v__13363; \n  float v__9610; \n  /* Private Memory */\n  float v__13365_0;\n  \n  float v__13367_0;\n  \n  for (int v_wg_id_13346 = get_group_id(0); v_wg_id_13346 < v_MHeight_2; v_wg_id_13346 = (v_wg_id_13346 + get_num_groups(0))) {\n    for (int v_l_id_13347 = get_local_id(0); v_l_id_13347 < v_MWidthC_1; v_l_id_13347 = (v_l_id_13347 + get_local_size(0))) {\n      float v_tmp_13436 = 0.0f; \n      v__13361 = v_tmp_13436; \n      /* reduce_seq */\n      for (int v_i_13348 = 0; v_i_13348 < 16; v_i_13348 = (1 + v_i_13348)) {\n        float v_tmp_13437 = 0.0f; \n        v__13363 = v_tmp_13437; \n        int v_index_13438 = v__13353[(v_l_id_13347 + (16 * v_MWidthC_1 * v_wg_id_13346) + (v_MWidthC_1 * v_i_13348))]; \n        if (v_index_13438 < 0) {\n          v__13365_0 = v__13363; \n        } else {\n          if (v_index_13438 >= v_VLength_3) {\n            v__13365_0 = v__13363; \n          } else {\n            v__13365_0 = v__13355[v_index_13438]; \n          }\n        }\n        v__13367_0 = mult(v__13365_0, v__13354[(v_l_id_13347 + (16 * v_MWidthC_1 * v_wg_id_13346) + (v_MWidthC_1 * v_i_13348))]); \n        v__13361 = add(v__13367_0, v__13361); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13349 = 0; \n        v__13370[v_l_id_13347] = id(v__13361); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_408; \n      v_work_idx_408 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13350 = atomic_inc(&(v_work_idx_408)); \n      while((v_l_id_13350 < 1)){\n        float v_tmp_13441 = 0.0f; \n        v__9610 = v_tmp_13441; \n        /* reduce_seq */\n        for (int v_i_13351 = 0; v_i_13351 < v_MWidthC_1; v_i_13351 = (1 + v_i_13351)) {\n          v__9610 = add(v__9610, v__13370[(v_i_13351 + (v_MWidthC_1 * v_l_id_13350))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13352 = 0; \n          v__13375[v_wg_id_13346] = doubleMultiplyAdd(v__9610, v__13357, v__13356[v_wg_id_13346], v__13358); \n        }\n        /* end map_seq */\n        v_l_id_13350 = atomic_inc(&(v_work_idx_408)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__13353",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13354",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13355",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13356",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13357",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13358",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13370",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}