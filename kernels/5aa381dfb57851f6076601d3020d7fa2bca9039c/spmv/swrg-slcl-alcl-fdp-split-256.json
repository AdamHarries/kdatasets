{
  "name" : "swrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26689, const global float* restrict v__26690, const global float* restrict v__26691, const global float* restrict v__26692, float v__26693, float v__26694, global float* v__26711, local float* v__26706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26697; \n  float v__26699; \n  float v__9610; \n  /* Private Memory */\n  float v__26701_0;\n  \n  float v__26703_0;\n  \n  for (int v_wg_id_26682 = get_group_id(0); v_wg_id_26682 < v_MHeight_2; v_wg_id_26682 = (v_wg_id_26682 + get_num_groups(0))) {\n    for (int v_l_id_26683 = get_local_id(0); v_l_id_26683 < v_MWidthC_1; v_l_id_26683 = (v_l_id_26683 + get_local_size(0))) {\n      float v_tmp_26772 = 0.0f; \n      v__26697 = v_tmp_26772; \n      /* reduce_seq */\n      for (int v_i_26684 = 0; v_i_26684 < 256; v_i_26684 = (1 + v_i_26684)) {\n        float v_tmp_26773 = 0.0f; \n        v__26699 = v_tmp_26773; \n        int v_index_26774 = v__26689[(v_l_id_26683 + (256 * v_MWidthC_1 * v_wg_id_26682) + (v_MWidthC_1 * v_i_26684))]; \n        if (v_index_26774 < 0) {\n          v__26701_0 = v__26699; \n        } else {\n          if (v_index_26774 >= v_VLength_3) {\n            v__26701_0 = v__26699; \n          } else {\n            v__26701_0 = v__26691[v_index_26774]; \n          }\n        }\n        v__26703_0 = mult(v__26701_0, v__26690[(v_l_id_26683 + (256 * v_MWidthC_1 * v_wg_id_26682) + (v_MWidthC_1 * v_i_26684))]); \n        v__26697 = add(v__26703_0, v__26697); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26685 = 0; \n        v__26706[v_l_id_26683] = id(v__26697); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1656; \n      v_work_idx_1656 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_26686 = atomic_inc(&(v_work_idx_1656)); \n      while((v_l_id_26686 < 1)){\n        float v_tmp_26777 = 0.0f; \n        v__9610 = v_tmp_26777; \n        /* reduce_seq */\n        for (int v_i_26687 = 0; v_i_26687 < v_MWidthC_1; v_i_26687 = (1 + v_i_26687)) {\n          v__9610 = add(v__9610, v__26706[(v_i_26687 + (v_MWidthC_1 * v_l_id_26686))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26688 = 0; \n          v__26711[v_wg_id_26682] = doubleMultiplyAdd(v__9610, v__26693, v__26692[v_wg_id_26682], v__26694); \n        }\n        /* end map_seq */\n        v_l_id_26686 = atomic_inc(&(v_work_idx_1656)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__26689",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26690",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26691",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26693",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26694",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__26711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}