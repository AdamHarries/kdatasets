{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22412, const global float* restrict v__22413, const global float* restrict v__22414, const global float* restrict v__22415, float v__22416, float v__22417, global float* v__22435, global int* v__22419, global float* v__22425, local float* v__22430, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22421; \n  float v__22426; \n  float v__9610; \n  /* Private Memory */\n  float v__22423_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1267 = v__22419; \n    local int v_w_id_22404; \n    if (get_local_id(0) == 0) {\n      v_w_id_22404 = atomic_inc(v_work_idx_1267); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22404 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1265; \n        v_work_idx_1265 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22405 = atomic_inc(&(v_work_idx_1265)); \n        while((v_l_id_22405 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22406 = 0; v_i_22406 < 64; v_i_22406 = (1 + v_i_22406)) {\n            float v_tmp_22486 = 0.0f; \n            v__22421 = v_tmp_22486; \n            int v_index_22487 = v__22412[(v_l_id_22405 + (64 * v_MWidthC_1 * v_w_id_22404) + (v_MWidthC_1 * v_i_22406))]; \n            if (v_index_22487 < 0) {\n              v__22423_0 = v__22421; \n            } else {\n              if (v_index_22487 >= v_VLength_3) {\n                v__22423_0 = v__22421; \n              } else {\n                v__22423_0 = v__22414[v_index_22487]; \n              }\n            }\n            v__22425[(v_i_22406 + (64 * v_MWidthC_1 * v_w_id_22404) + (64 * v_l_id_22405))] = mult(v__22423_0, v__22413[(v_l_id_22405 + (64 * v_MWidthC_1 * v_w_id_22404) + (v_MWidthC_1 * v_i_22406))]); \n          }\n          /* end map_seq */\n          float v_tmp_22488 = 0.0f; \n          v__22426 = v_tmp_22488; \n          /* reduce_seq */\n          for (int v_i_22407 = 0; v_i_22407 < 64; v_i_22407 = (1 + v_i_22407)) {\n            v__22426 = add(v__22426, v__22425[(v_i_22407 + (64 * v_MWidthC_1 * v_w_id_22404) + (64 * v_l_id_22405))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22408 = 0; \n            v__22430[v_l_id_22405] = id(v__22426); \n          }\n          /* end map_seq */\n          v_l_id_22405 = atomic_inc(&(v_work_idx_1265)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1259; \n        v_work_idx_1259 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22409 = atomic_inc(&(v_work_idx_1259)); \n        while((v_l_id_22409 < 1)){\n          float v_tmp_22491 = 0.0f; \n          v__9610 = v_tmp_22491; \n          /* reduce_seq */\n          for (int v_i_22410 = 0; v_i_22410 < v_MWidthC_1; v_i_22410 = (1 + v_i_22410)) {\n            v__9610 = add(v__9610, v__22430[(v_i_22410 + (v_MWidthC_1 * v_l_id_22409))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22411 = 0; \n            v__22435[v_w_id_22404] = doubleMultiplyAdd(v__9610, v__22416, v__22415[v_w_id_22404], v__22417); \n          }\n          /* end map_seq */\n          v_l_id_22409 = atomic_inc(&(v_work_idx_1259)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22404 = atomic_inc(v_work_idx_1267); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22412",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22413",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22414",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22415",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22416",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22417",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22419",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__22425",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__22435",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22430",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}