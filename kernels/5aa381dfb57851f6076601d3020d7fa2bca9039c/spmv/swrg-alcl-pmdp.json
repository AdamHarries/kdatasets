{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9233, const global float* restrict v__9234, const global float* restrict v__9235, const global float* restrict v__9236, float v__9237, float v__9238, global float* v__9251, global float* v__9245, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9241; \n  float v__9246; \n  /* Private Memory */\n  float v__9243_0;\n  \n  for (int v_wg_id_9229 = get_group_id(0); v_wg_id_9229 < v_MHeight_2; v_wg_id_9229 = (v_wg_id_9229 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_32; \n      v_l_id_32 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_9230 = atomic_inc(&(v_l_id_32)); \n      while((v_l_id_9230 < v_MWidthC_1)){\n        float v_tmp_9282 = 0.0f; \n        v__9241 = v_tmp_9282; \n        int v_index_9283 = v__9233[(v_l_id_9230 + (v_MWidthC_1 * v_wg_id_9229))]; \n        if (v_index_9283 < 0) {\n          v__9243_0 = v__9241; \n        } else {\n          if (v_index_9283 >= v_VLength_3) {\n            v__9243_0 = v__9241; \n          } else {\n            v__9243_0 = v__9235[v_index_9283]; \n          }\n        }\n        v__9245[(v_l_id_9230 + (v_MWidthC_1 * v_wg_id_9229))] = mult(v__9243_0, v__9234[(v_l_id_9230 + (v_MWidthC_1 * v_wg_id_9229))]); \n        v_l_id_9230 = atomic_inc(&(v_l_id_32)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_9284 = 0.0f; \n    v__9246 = v_tmp_9284; \n    /* reduce_seq */\n    for (int v_i_9231 = 0; v_i_9231 < v_MWidthC_1; v_i_9231 = (1 + v_i_9231)) {\n      v__9246 = add(v__9246, v__9245[(v_i_9231 + (v_MWidthC_1 * v_wg_id_9229))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_9232 = 0; \n      v__9251[v_wg_id_9229] = doubleMultiplyAdd(v__9246, v__9237, v__9236[v_wg_id_9229], v__9238); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__9233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9234",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9235",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9237",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9238",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9245",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__9251",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}