{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24370, const global float* restrict v__24371, const global float* restrict v__24372, const global float* restrict v__24373, float v__24374, float v__24375, global float* v__24389, global int* v__24377, global float* v__24383, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24379; \n  float v__24384; \n  /* Private Memory */\n  float v__24381_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1443 = v__24377; \n    local int v_w_id_24365; \n    if (get_local_id(0) == 0) {\n      v_w_id_24365 = atomic_inc(v_work_idx_1443); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24365 < v_MHeight_2)){\n      for (int v_l_id_24366 = get_local_id(0); v_l_id_24366 < 128; v_l_id_24366 = (v_l_id_24366 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24367 = 0; v_i_24367 < v_MWidthC_1; v_i_24367 = (1 + v_i_24367)) {\n          float v_tmp_24431 = 0.0f; \n          v__24379 = v_tmp_24431; \n          int v_index_24432 = v__24370[(v_i_24367 + (128 * v_MWidthC_1 * v_w_id_24365) + (v_MWidthC_1 * v_l_id_24366))]; \n          if (v_index_24432 < 0) {\n            v__24381_0 = v__24379; \n          } else {\n            if (v_index_24432 >= v_VLength_3) {\n              v__24381_0 = v__24379; \n            } else {\n              v__24381_0 = v__24372[v_index_24432]; \n            }\n          }\n          v__24383[(v_i_24367 + (128 * v_MWidthC_1 * v_w_id_24365) + (v_MWidthC_1 * v_l_id_24366))] = mult(v__24381_0, v__24371[(v_i_24367 + (128 * v_MWidthC_1 * v_w_id_24365) + (v_MWidthC_1 * v_l_id_24366))]); \n        }\n        /* end map_seq */\n        float v_tmp_24433 = 0.0f; \n        v__24384 = v_tmp_24433; \n        /* reduce_seq */\n        for (int v_i_24368 = 0; v_i_24368 < v_MWidthC_1; v_i_24368 = (1 + v_i_24368)) {\n          v__24384 = add(v__24384, v__24383[(v_i_24368 + (128 * v_MWidthC_1 * v_w_id_24365) + (v_MWidthC_1 * v_l_id_24366))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24369 = 0; \n          v__24389[(v_l_id_24366 + (128 * v_w_id_24365))] = doubleMultiplyAdd(v__24384, v__24374, v__24373[(v_l_id_24366 + (128 * v_w_id_24365))], v__24375); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_24365 = atomic_inc(v_work_idx_1443); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24370",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24371",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24372",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24373",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__24374",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24375",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24377",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__24383",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__24389",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}