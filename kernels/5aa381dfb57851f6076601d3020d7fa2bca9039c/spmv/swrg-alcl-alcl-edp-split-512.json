{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30941, const global float* restrict v__30942, const global float* restrict v__30943, const global float* restrict v__30944, float v__30945, float v__30946, global float* v__30965, local float* v__30960, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30949; \n  float v__30951; \n  float v__9610; \n  /* Private Memory */\n  float v__30953_0;\n  \n  float v__30955_0;\n  \n  int v__30959_0;\n  \n  for (int v_wg_id_30934 = get_group_id(0); v_wg_id_30934 < v_MHeight_2; v_wg_id_30934 = (v_wg_id_30934 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2059; \n      v_work_idx_2059 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30935 = atomic_inc(&(v_work_idx_2059)); \n      while((v_l_id_30935 < v_MWidthC_1)){\n        float v_tmp_31021 = 0.0f; \n        v__30949 = v_tmp_31021; \n        /* reduce_while_seq */\n        for (int v_i_30936 = 0; v_i_30936 < 512; v_i_30936 = (1 + v_i_30936)) {\n          v__30959_0 = check(v__30949, v__30941[(v_l_id_30935 + (512 * v_MWidthC_1 * v_wg_id_30934) + (v_MWidthC_1 * v_i_30936))]); \n          if (v__30959_0) {\n          } else {\n            break;\n          }\n          float v_tmp_31022 = 0.0f; \n          v__30951 = v_tmp_31022; \n          int v_index_31023 = v__30941[(v_l_id_30935 + (512 * v_MWidthC_1 * v_wg_id_30934) + (v_MWidthC_1 * v_i_30936))]; \n          if (v_index_31023 < 0) {\n            v__30953_0 = v__30951; \n          } else {\n            if (v_index_31023 >= v_VLength_3) {\n              v__30953_0 = v__30951; \n            } else {\n              v__30953_0 = v__30943[v_index_31023]; \n            }\n          }\n          v__30955_0 = mult(v__30953_0, v__30942[(v_l_id_30935 + (512 * v_MWidthC_1 * v_wg_id_30934) + (v_MWidthC_1 * v_i_30936))]); \n          v__30949 = add(v__30955_0, v__30949); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30937 = 0; \n          v__30960[v_l_id_30935] = id(v__30949); \n        }\n        /* end map_seq */\n        v_l_id_30935 = atomic_inc(&(v_work_idx_2059)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2054; \n      v_work_idx_2054 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30938 = atomic_inc(&(v_work_idx_2054)); \n      while((v_l_id_30938 < 1)){\n        float v_tmp_31026 = 0.0f; \n        v__9610 = v_tmp_31026; \n        /* reduce_seq */\n        for (int v_i_30939 = 0; v_i_30939 < v_MWidthC_1; v_i_30939 = (1 + v_i_30939)) {\n          v__9610 = add(v__9610, v__30960[(v_i_30939 + (v_MWidthC_1 * v_l_id_30938))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30940 = 0; \n          v__30965[v_wg_id_30934] = doubleMultiplyAdd(v__9610, v__30945, v__30944[v_wg_id_30934], v__30946); \n        }\n        /* end map_seq */\n        v_l_id_30938 = atomic_inc(&(v_work_idx_2054)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30941",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30942",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30943",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30945",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30946",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30960",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}