{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22212, const global float* restrict v__22213, const global float* restrict v__22214, const global float* restrict v__22215, float v__22216, float v__22217, global float* v__22235, global int* v__22219, local float* v__22230, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22221; \n  float v__22223; \n  float v__9610; \n  /* Private Memory */\n  float v__22225_0;\n  \n  float v__22227_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1245 = v__22219; \n    local int v_w_id_22205; \n    if (get_local_id(0) == 0) {\n      v_w_id_22205 = atomic_inc(v_work_idx_1245); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22205 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1243; \n        v_work_idx_1243 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22206 = atomic_inc(&(v_work_idx_1243)); \n        while((v_l_id_22206 < v_MWidthC_1)){\n          float v_tmp_22290 = 0.0f; \n          v__22221 = v_tmp_22290; \n          /* reduce_seq */\n          for (int v_i_22207 = 0; v_i_22207 < 64; v_i_22207 = (1 + v_i_22207)) {\n            float v_tmp_22291 = 0.0f; \n            v__22223 = v_tmp_22291; \n            int v_index_22292 = v__22212[(v_l_id_22206 + (64 * v_MWidthC_1 * v_w_id_22205) + (v_MWidthC_1 * v_i_22207))]; \n            if (v_index_22292 < 0) {\n              v__22225_0 = v__22223; \n            } else {\n              if (v_index_22292 >= v_VLength_3) {\n                v__22225_0 = v__22223; \n              } else {\n                v__22225_0 = v__22214[v_index_22292]; \n              }\n            }\n            v__22227_0 = mult(v__22225_0, v__22213[(v_l_id_22206 + (64 * v_MWidthC_1 * v_w_id_22205) + (v_MWidthC_1 * v_i_22207))]); \n            v__22221 = add(v__22227_0, v__22221); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22208 = 0; \n            v__22230[v_l_id_22206] = id(v__22221); \n          }\n          /* end map_seq */\n          v_l_id_22206 = atomic_inc(&(v_work_idx_1243)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_22209 = get_local_id(0); \n        float v_tmp_22295 = 0.0f; \n        v__9610 = v_tmp_22295; \n        /* reduce_seq */\n        for (int v_i_22210 = 0; v_i_22210 < v_MWidthC_1; v_i_22210 = (1 + v_i_22210)) {\n          v__9610 = add(v__9610, v__22230[(v_i_22210 + (v_MWidthC_1 * v_l_id_22209))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_22211 = 0; \n          v__22235[v_w_id_22205] = doubleMultiplyAdd(v__9610, v__22216, v__22215[v_w_id_22205], v__22217); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22205 = atomic_inc(v_work_idx_1245); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22212",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22213",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22219",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22230",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}