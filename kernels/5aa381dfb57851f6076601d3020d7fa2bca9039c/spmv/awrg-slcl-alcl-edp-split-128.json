{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25125, const global float* restrict v__25126, const global float* restrict v__25127, const global float* restrict v__25128, float v__25129, float v__25130, global float* v__25150, global int* v__25132, local float* v__25145, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25134; \n  float v__25136; \n  float v__9610; \n  /* Private Memory */\n  float v__25138_0;\n  \n  float v__25140_0;\n  \n  int v__25144_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1514 = v__25132; \n    local int v_w_id_25118; \n    if (get_local_id(0) == 0) {\n      v_w_id_25118 = atomic_inc(v_work_idx_1514); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25118 < v_MHeight_2)){\n      for (int v_l_id_25119 = get_local_id(0); v_l_id_25119 < v_MWidthC_1; v_l_id_25119 = (v_l_id_25119 + get_local_size(0))) {\n        float v_tmp_25212 = 0.0f; \n        v__25134 = v_tmp_25212; \n        /* reduce_while_seq */\n        for (int v_i_25120 = 0; v_i_25120 < 128; v_i_25120 = (1 + v_i_25120)) {\n          v__25144_0 = check(v__25134, v__25125[(v_l_id_25119 + (128 * v_MWidthC_1 * v_w_id_25118) + (v_MWidthC_1 * v_i_25120))]); \n          if (v__25144_0) {\n          } else {\n            break;\n          }\n          float v_tmp_25213 = 0.0f; \n          v__25136 = v_tmp_25213; \n          int v_index_25214 = v__25125[(v_l_id_25119 + (128 * v_MWidthC_1 * v_w_id_25118) + (v_MWidthC_1 * v_i_25120))]; \n          if (v_index_25214 < 0) {\n            v__25138_0 = v__25136; \n          } else {\n            if (v_index_25214 >= v_VLength_3) {\n              v__25138_0 = v__25136; \n            } else {\n              v__25138_0 = v__25127[v_index_25214]; \n            }\n          }\n          v__25140_0 = mult(v__25138_0, v__25126[(v_l_id_25119 + (128 * v_MWidthC_1 * v_w_id_25118) + (v_MWidthC_1 * v_i_25120))]); \n          v__25134 = add(v__25140_0, v__25134); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25121 = 0; \n          v__25145[v_l_id_25119] = id(v__25134); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1508; \n        v_work_idx_1508 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_25122 = atomic_inc(&(v_work_idx_1508)); \n        while((v_l_id_25122 < 1)){\n          float v_tmp_25217 = 0.0f; \n          v__9610 = v_tmp_25217; \n          /* reduce_seq */\n          for (int v_i_25123 = 0; v_i_25123 < v_MWidthC_1; v_i_25123 = (1 + v_i_25123)) {\n            v__9610 = add(v__9610, v__25145[(v_i_25123 + (v_MWidthC_1 * v_l_id_25122))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25124 = 0; \n            v__25150[v_w_id_25118] = doubleMultiplyAdd(v__9610, v__25129, v__25128[v_w_id_25118], v__25130); \n          }\n          /* end map_seq */\n          v_l_id_25122 = atomic_inc(&(v_work_idx_1508)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25118 = atomic_inc(v_work_idx_1514); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__25125",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25126",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25127",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25129",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25130",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25132",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25145",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}