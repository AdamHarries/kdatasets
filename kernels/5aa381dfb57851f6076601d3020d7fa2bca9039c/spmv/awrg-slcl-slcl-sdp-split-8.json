{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11266, const global float* restrict v__11267, const global float* restrict v__11268, const global float* restrict v__11269, float v__11270, float v__11271, global float* v__11289, global int* v__11273, global float* v__11279, local float* v__11284, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11275; \n  float v__11280; \n  float v__9610; \n  /* Private Memory */\n  float v__11277_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_217 = v__11273; \n    local int v_w_id_11258; \n    if (get_local_id(0) == 0) {\n      v_w_id_11258 = atomic_inc(v_work_idx_217); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11258 < v_MHeight_2)){\n      for (int v_l_id_11259 = get_local_id(0); v_l_id_11259 < v_MWidthC_1; v_l_id_11259 = (v_l_id_11259 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_11260 = 0; v_i_11260 < 8; v_i_11260 = (1 + v_i_11260)) {\n          float v_tmp_11352 = 0.0f; \n          v__11275 = v_tmp_11352; \n          int v_index_11353 = v__11266[(v_l_id_11259 + (8 * v_MWidthC_1 * v_w_id_11258) + (v_MWidthC_1 * v_i_11260))]; \n          if (v_index_11353 < 0) {\n            v__11277_0 = v__11275; \n          } else {\n            if (v_index_11353 >= v_VLength_3) {\n              v__11277_0 = v__11275; \n            } else {\n              v__11277_0 = v__11268[v_index_11353]; \n            }\n          }\n          v__11279[(v_i_11260 + (8 * v_MWidthC_1 * v_w_id_11258) + (8 * v_l_id_11259))] = mult(v__11277_0, v__11267[(v_l_id_11259 + (8 * v_MWidthC_1 * v_w_id_11258) + (v_MWidthC_1 * v_i_11260))]); \n        }\n        /* end map_seq */\n        float v_tmp_11354 = 0.0f; \n        v__11280 = v_tmp_11354; \n        /* reduce_seq */\n        for (int v_i_11261 = 0; v_i_11261 < 8; v_i_11261 = (1 + v_i_11261)) {\n          v__11280 = add(v__11280, v__11279[(v_i_11261 + (8 * v_MWidthC_1 * v_w_id_11258) + (8 * v_l_id_11259))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11262 = 0; \n          v__11284[v_l_id_11259] = id(v__11280); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_11263 = get_local_id(0); \n        float v_tmp_11357 = 0.0f; \n        v__9610 = v_tmp_11357; \n        /* reduce_seq */\n        for (int v_i_11264 = 0; v_i_11264 < v_MWidthC_1; v_i_11264 = (1 + v_i_11264)) {\n          v__9610 = add(v__9610, v__11284[(v_i_11264 + (v_MWidthC_1 * v_l_id_11263))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11265 = 0; \n          v__11289[v_w_id_11258] = doubleMultiplyAdd(v__9610, v__11270, v__11269[v_w_id_11258], v__11271); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11258 = atomic_inc(v_work_idx_217); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__11266",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11267",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11268",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11269",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11270",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11271",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11273",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__11279",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__11289",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11284",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}