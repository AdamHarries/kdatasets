{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22598, const global float* restrict v__22599, const global float* restrict v__22600, const global float* restrict v__22601, float v__22602, float v__22603, global float* v__22623, global int* v__22605, local float* v__22618, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22607; \n  float v__22609; \n  float v__9610; \n  /* Private Memory */\n  float v__22611_0;\n  \n  float v__22613_0;\n  \n  int v__22617_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1289 = v__22605; \n    local int v_w_id_22591; \n    if (get_local_id(0) == 0) {\n      v_w_id_22591 = atomic_inc(v_work_idx_1289); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22591 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1287; \n        v_work_idx_1287 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22592 = atomic_inc(&(v_work_idx_1287)); \n        while((v_l_id_22592 < v_MWidthC_1)){\n          float v_tmp_22677 = 0.0f; \n          v__22607 = v_tmp_22677; \n          /* reduce_while_seq */\n          for (int v_i_22593 = 0; v_i_22593 < 64; v_i_22593 = (1 + v_i_22593)) {\n            v__22617_0 = check(v__22607, v__22598[(v_l_id_22592 + (64 * v_MWidthC_1 * v_w_id_22591) + (v_MWidthC_1 * v_i_22593))]); \n            if (v__22617_0) {\n            } else {\n              break;\n            }\n            float v_tmp_22678 = 0.0f; \n            v__22609 = v_tmp_22678; \n            int v_index_22679 = v__22598[(v_l_id_22592 + (64 * v_MWidthC_1 * v_w_id_22591) + (v_MWidthC_1 * v_i_22593))]; \n            if (v_index_22679 < 0) {\n              v__22611_0 = v__22609; \n            } else {\n              if (v_index_22679 >= v_VLength_3) {\n                v__22611_0 = v__22609; \n              } else {\n                v__22611_0 = v__22600[v_index_22679]; \n              }\n            }\n            v__22613_0 = mult(v__22611_0, v__22599[(v_l_id_22592 + (64 * v_MWidthC_1 * v_w_id_22591) + (v_MWidthC_1 * v_i_22593))]); \n            v__22607 = add(v__22613_0, v__22607); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22594 = 0; \n            v__22618[v_l_id_22592] = id(v__22607); \n          }\n          /* end map_seq */\n          v_l_id_22592 = atomic_inc(&(v_work_idx_1287)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1282; \n        v_work_idx_1282 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22595 = atomic_inc(&(v_work_idx_1282)); \n        while((v_l_id_22595 < 1)){\n          float v_tmp_22682 = 0.0f; \n          v__9610 = v_tmp_22682; \n          /* reduce_seq */\n          for (int v_i_22596 = 0; v_i_22596 < v_MWidthC_1; v_i_22596 = (1 + v_i_22596)) {\n            v__9610 = add(v__9610, v__22618[(v_i_22596 + (v_MWidthC_1 * v_l_id_22595))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22597 = 0; \n            v__22623[v_w_id_22591] = doubleMultiplyAdd(v__9610, v__22602, v__22601[v_w_id_22591], v__22603); \n          }\n          /* end map_seq */\n          v_l_id_22595 = atomic_inc(&(v_work_idx_1282)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22591 = atomic_inc(v_work_idx_1289); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__22598",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22599",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22600",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22602",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22603",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22605",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22618",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}