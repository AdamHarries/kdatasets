{
  "name" : "swrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13701, const global float* restrict v__13702, const global float* restrict v__13703, const global float* restrict v__13704, float v__13705, float v__13706, global float* v__13721, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13708; \n  float v__13711; \n  /* Private Memory */\n  float v__13713_0;\n  \n  float v__13715_0;\n  \n  int v__13719_0;\n  \n  for (int v_wg_id_13697 = get_group_id(0); v_wg_id_13697 < v_MHeight_2; v_wg_id_13697 = (v_wg_id_13697 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_440; \n      v_work_idx_440 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13698 = atomic_inc(&(v_work_idx_440)); \n      while((v_l_id_13698 < 16)){\n        float v_tmp_13766 = 0.0f; \n        v__13708 = v_tmp_13766; \n        /* reduce_while_seq */\n        for (int v_i_13699 = 0; v_i_13699 < v_MWidthC_1; v_i_13699 = (1 + v_i_13699)) {\n          v__13719_0 = check(v__13708, v__13701[(v_i_13699 + (16 * v_MWidthC_1 * v_wg_id_13697) + (v_MWidthC_1 * v_l_id_13698))]); \n          if (v__13719_0) {\n          } else {\n            break;\n          }\n          float v_tmp_13767 = 0.0f; \n          v__13711 = v_tmp_13767; \n          int v_index_13768 = v__13701[(v_i_13699 + (16 * v_MWidthC_1 * v_wg_id_13697) + (v_MWidthC_1 * v_l_id_13698))]; \n          if (v_index_13768 < 0) {\n            v__13713_0 = v__13711; \n          } else {\n            if (v_index_13768 >= v_VLength_3) {\n              v__13713_0 = v__13711; \n            } else {\n              v__13713_0 = v__13703[v_index_13768]; \n            }\n          }\n          v__13715_0 = mult(v__13713_0, v__13702[(v_i_13699 + (16 * v_MWidthC_1 * v_wg_id_13697) + (v_MWidthC_1 * v_l_id_13698))]); \n          v__13708 = add(v__13715_0, v__13708); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13700 = 0; \n          v__13721[(v_l_id_13698 + (16 * v_wg_id_13697))] = doubleMultiplyAdd(v__13708, v__13705, v__13704[(v_l_id_13698 + (16 * v_wg_id_13697))], v__13706); \n        }\n        /* end map_seq */\n        v_l_id_13698 = atomic_inc(&(v_work_idx_440)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__13701",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13702",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13703",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13704",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__13705",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13706",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13721",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}