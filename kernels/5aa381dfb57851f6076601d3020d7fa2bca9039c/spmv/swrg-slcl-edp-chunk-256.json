{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26177, const global float* restrict v__26178, const global float* restrict v__26179, const global float* restrict v__26180, float v__26181, float v__26182, global float* v__26197, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26184; \n  float v__26187; \n  /* Private Memory */\n  float v__26189_0;\n  \n  float v__26191_0;\n  \n  int v__26195_0;\n  \n  for (int v_wg_id_26173 = get_group_id(0); v_wg_id_26173 < v_MHeight_2; v_wg_id_26173 = (v_wg_id_26173 + get_num_groups(0))) {\n    for (int v_l_id_26174 = get_local_id(0); v_l_id_26174 < 256; v_l_id_26174 = (v_l_id_26174 + get_local_size(0))) {\n      float v_tmp_26246 = 0.0f; \n      v__26184 = v_tmp_26246; \n      /* reduce_while_seq */\n      for (int v_i_26175 = 0; v_i_26175 < v_MWidthC_1; v_i_26175 = (1 + v_i_26175)) {\n        v__26195_0 = check(v__26184, v__26177[(v_i_26175 + (256 * v_MWidthC_1 * v_wg_id_26173) + (v_MWidthC_1 * v_l_id_26174))]); \n        if (v__26195_0) {\n        } else {\n          break;\n        }\n        float v_tmp_26247 = 0.0f; \n        v__26187 = v_tmp_26247; \n        int v_index_26248 = v__26177[(v_i_26175 + (256 * v_MWidthC_1 * v_wg_id_26173) + (v_MWidthC_1 * v_l_id_26174))]; \n        if (v_index_26248 < 0) {\n          v__26189_0 = v__26187; \n        } else {\n          if (v_index_26248 >= v_VLength_3) {\n            v__26189_0 = v__26187; \n          } else {\n            v__26189_0 = v__26179[v_index_26248]; \n          }\n        }\n        v__26191_0 = mult(v__26189_0, v__26178[(v_i_26175 + (256 * v_MWidthC_1 * v_wg_id_26173) + (v_MWidthC_1 * v_l_id_26174))]); \n        v__26184 = add(v__26191_0, v__26184); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26176 = 0; \n        v__26197[(v_l_id_26174 + (256 * v_wg_id_26173))] = doubleMultiplyAdd(v__26184, v__26181, v__26180[(v_l_id_26174 + (256 * v_wg_id_26173))], v__26182); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__26177",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26178",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26179",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26180",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__26181",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26182",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__26197",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}