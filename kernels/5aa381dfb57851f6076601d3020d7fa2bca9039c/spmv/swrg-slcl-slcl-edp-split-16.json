{
  "name" : "swrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13139, const global float* restrict v__13140, const global float* restrict v__13141, const global float* restrict v__13142, float v__13143, float v__13144, global float* v__13163, local float* v__13158, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13147; \n  float v__13149; \n  float v__9610; \n  /* Private Memory */\n  float v__13151_0;\n  \n  float v__13153_0;\n  \n  int v__13157_0;\n  \n  for (int v_wg_id_13132 = get_group_id(0); v_wg_id_13132 < v_MHeight_2; v_wg_id_13132 = (v_wg_id_13132 + get_num_groups(0))) {\n    for (int v_l_id_13133 = get_local_id(0); v_l_id_13133 < v_MWidthC_1; v_l_id_13133 = (v_l_id_13133 + get_local_size(0))) {\n      float v_tmp_13231 = 0.0f; \n      v__13147 = v_tmp_13231; \n      /* reduce_while_seq */\n      for (int v_i_13134 = 0; v_i_13134 < 16; v_i_13134 = (1 + v_i_13134)) {\n        v__13157_0 = check(v__13147, v__13139[(v_l_id_13133 + (16 * v_MWidthC_1 * v_wg_id_13132) + (v_MWidthC_1 * v_i_13134))]); \n        if (v__13157_0) {\n        } else {\n          break;\n        }\n        float v_tmp_13232 = 0.0f; \n        v__13149 = v_tmp_13232; \n        int v_index_13233 = v__13139[(v_l_id_13133 + (16 * v_MWidthC_1 * v_wg_id_13132) + (v_MWidthC_1 * v_i_13134))]; \n        if (v_index_13233 < 0) {\n          v__13151_0 = v__13149; \n        } else {\n          if (v_index_13233 >= v_VLength_3) {\n            v__13151_0 = v__13149; \n          } else {\n            v__13151_0 = v__13141[v_index_13233]; \n          }\n        }\n        v__13153_0 = mult(v__13151_0, v__13140[(v_l_id_13133 + (16 * v_MWidthC_1 * v_wg_id_13132) + (v_MWidthC_1 * v_i_13134))]); \n        v__13147 = add(v__13153_0, v__13147); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13135 = 0; \n        v__13158[v_l_id_13133] = id(v__13147); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13136 = get_local_id(0); \n      float v_tmp_13236 = 0.0f; \n      v__9610 = v_tmp_13236; \n      /* reduce_seq */\n      for (int v_i_13137 = 0; v_i_13137 < v_MWidthC_1; v_i_13137 = (1 + v_i_13137)) {\n        v__9610 = add(v__9610, v__13158[(v_i_13137 + (v_MWidthC_1 * v_l_id_13136))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13138 = 0; \n        v__13163[v_wg_id_13132] = doubleMultiplyAdd(v__9610, v__13143, v__13142[v_wg_id_13132], v__13144); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__13139",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13140",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13141",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13142",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13143",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13144",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13163",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13158",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}