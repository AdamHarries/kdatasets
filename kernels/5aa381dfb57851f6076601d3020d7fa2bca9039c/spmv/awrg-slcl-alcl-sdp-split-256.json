{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28257, const global float* restrict v__28258, const global float* restrict v__28259, const global float* restrict v__28260, float v__28261, float v__28262, global float* v__28280, global int* v__28264, global float* v__28270, local float* v__28275, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28266; \n  float v__28271; \n  float v__9610; \n  /* Private Memory */\n  float v__28268_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1806 = v__28264; \n    local int v_w_id_28249; \n    if (get_local_id(0) == 0) {\n      v_w_id_28249 = atomic_inc(v_work_idx_1806); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28249 < v_MHeight_2)){\n      for (int v_l_id_28250 = get_local_id(0); v_l_id_28250 < v_MWidthC_1; v_l_id_28250 = (v_l_id_28250 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_28251 = 0; v_i_28251 < 256; v_i_28251 = (1 + v_i_28251)) {\n          float v_tmp_28339 = 0.0f; \n          v__28266 = v_tmp_28339; \n          int v_index_28340 = v__28257[(v_l_id_28250 + (256 * v_MWidthC_1 * v_w_id_28249) + (v_MWidthC_1 * v_i_28251))]; \n          if (v_index_28340 < 0) {\n            v__28268_0 = v__28266; \n          } else {\n            if (v_index_28340 >= v_VLength_3) {\n              v__28268_0 = v__28266; \n            } else {\n              v__28268_0 = v__28259[v_index_28340]; \n            }\n          }\n          v__28270[(v_i_28251 + (256 * v_MWidthC_1 * v_w_id_28249) + (256 * v_l_id_28250))] = mult(v__28268_0, v__28258[(v_l_id_28250 + (256 * v_MWidthC_1 * v_w_id_28249) + (v_MWidthC_1 * v_i_28251))]); \n        }\n        /* end map_seq */\n        float v_tmp_28341 = 0.0f; \n        v__28271 = v_tmp_28341; \n        /* reduce_seq */\n        for (int v_i_28252 = 0; v_i_28252 < 256; v_i_28252 = (1 + v_i_28252)) {\n          v__28271 = add(v__28271, v__28270[(v_i_28252 + (256 * v_MWidthC_1 * v_w_id_28249) + (256 * v_l_id_28250))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28253 = 0; \n          v__28275[v_l_id_28250] = id(v__28271); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1799; \n        v_work_idx_1799 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_28254 = atomic_inc(&(v_work_idx_1799)); \n        while((v_l_id_28254 < 1)){\n          float v_tmp_28344 = 0.0f; \n          v__9610 = v_tmp_28344; \n          /* reduce_seq */\n          for (int v_i_28255 = 0; v_i_28255 < v_MWidthC_1; v_i_28255 = (1 + v_i_28255)) {\n            v__9610 = add(v__9610, v__28275[(v_i_28255 + (v_MWidthC_1 * v_l_id_28254))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28256 = 0; \n            v__28280[v_w_id_28249] = doubleMultiplyAdd(v__9610, v__28261, v__28260[v_w_id_28249], v__28262); \n          }\n          /* end map_seq */\n          v_l_id_28254 = atomic_inc(&(v_work_idx_1799)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28249 = atomic_inc(v_work_idx_1806); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28257",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28258",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28259",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28260",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28261",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28262",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28264",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__28270",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__28280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28275",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}