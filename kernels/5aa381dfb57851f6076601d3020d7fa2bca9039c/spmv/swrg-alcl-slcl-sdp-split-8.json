{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10449, const global float* restrict v__10450, const global float* restrict v__10451, const global float* restrict v__10452, float v__10453, float v__10454, global float* v__10471, global float* v__10461, local float* v__10466, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10457; \n  float v__10462; \n  float v__9610; \n  /* Private Memory */\n  float v__10459_0;\n  \n  for (int v_wg_id_10441 = get_group_id(0); v_wg_id_10441 < v_MHeight_2; v_wg_id_10441 = (v_wg_id_10441 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_138; \n      v_work_idx_138 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10442 = atomic_inc(&(v_work_idx_138)); \n      while((v_l_id_10442 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_10443 = 0; v_i_10443 < 8; v_i_10443 = (1 + v_i_10443)) {\n          float v_tmp_10528 = 0.0f; \n          v__10457 = v_tmp_10528; \n          int v_index_10529 = v__10449[(v_l_id_10442 + (8 * v_MWidthC_1 * v_wg_id_10441) + (v_MWidthC_1 * v_i_10443))]; \n          if (v_index_10529 < 0) {\n            v__10459_0 = v__10457; \n          } else {\n            if (v_index_10529 >= v_VLength_3) {\n              v__10459_0 = v__10457; \n            } else {\n              v__10459_0 = v__10451[v_index_10529]; \n            }\n          }\n          v__10461[(v_i_10443 + (8 * v_MWidthC_1 * v_wg_id_10441) + (8 * v_l_id_10442))] = mult(v__10459_0, v__10450[(v_l_id_10442 + (8 * v_MWidthC_1 * v_wg_id_10441) + (v_MWidthC_1 * v_i_10443))]); \n        }\n        /* end map_seq */\n        float v_tmp_10530 = 0.0f; \n        v__10462 = v_tmp_10530; \n        /* reduce_seq */\n        for (int v_i_10444 = 0; v_i_10444 < 8; v_i_10444 = (1 + v_i_10444)) {\n          v__10462 = add(v__10462, v__10461[(v_i_10444 + (8 * v_MWidthC_1 * v_wg_id_10441) + (8 * v_l_id_10442))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10445 = 0; \n          v__10466[v_l_id_10442] = id(v__10462); \n        }\n        /* end map_seq */\n        v_l_id_10442 = atomic_inc(&(v_work_idx_138)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_10446 = get_local_id(0); \n      float v_tmp_10533 = 0.0f; \n      v__9610 = v_tmp_10533; \n      /* reduce_seq */\n      for (int v_i_10447 = 0; v_i_10447 < v_MWidthC_1; v_i_10447 = (1 + v_i_10447)) {\n        v__9610 = add(v__9610, v__10466[(v_i_10447 + (v_MWidthC_1 * v_l_id_10446))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10448 = 0; \n        v__10471[v_wg_id_10441] = doubleMultiplyAdd(v__9610, v__10453, v__10452[v_wg_id_10441], v__10454); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10449",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10450",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10451",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10452",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10453",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10454",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10461",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10466",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}