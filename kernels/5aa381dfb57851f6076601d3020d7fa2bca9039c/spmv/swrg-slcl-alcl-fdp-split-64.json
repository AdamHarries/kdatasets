{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20021, const global float* restrict v__20022, const global float* restrict v__20023, const global float* restrict v__20024, float v__20025, float v__20026, global float* v__20043, local float* v__20038, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20029; \n  float v__20031; \n  float v__9610; \n  /* Private Memory */\n  float v__20033_0;\n  \n  float v__20035_0;\n  \n  for (int v_wg_id_20014 = get_group_id(0); v_wg_id_20014 < v_MHeight_2; v_wg_id_20014 = (v_wg_id_20014 + get_num_groups(0))) {\n    for (int v_l_id_20015 = get_local_id(0); v_l_id_20015 < v_MWidthC_1; v_l_id_20015 = (v_l_id_20015 + get_local_size(0))) {\n      float v_tmp_20104 = 0.0f; \n      v__20029 = v_tmp_20104; \n      /* reduce_seq */\n      for (int v_i_20016 = 0; v_i_20016 < 64; v_i_20016 = (1 + v_i_20016)) {\n        float v_tmp_20105 = 0.0f; \n        v__20031 = v_tmp_20105; \n        int v_index_20106 = v__20021[(v_l_id_20015 + (64 * v_MWidthC_1 * v_wg_id_20014) + (v_MWidthC_1 * v_i_20016))]; \n        if (v_index_20106 < 0) {\n          v__20033_0 = v__20031; \n        } else {\n          if (v_index_20106 >= v_VLength_3) {\n            v__20033_0 = v__20031; \n          } else {\n            v__20033_0 = v__20023[v_index_20106]; \n          }\n        }\n        v__20035_0 = mult(v__20033_0, v__20022[(v_l_id_20015 + (64 * v_MWidthC_1 * v_wg_id_20014) + (v_MWidthC_1 * v_i_20016))]); \n        v__20029 = add(v__20035_0, v__20029); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20017 = 0; \n        v__20038[v_l_id_20015] = id(v__20029); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1032; \n      v_work_idx_1032 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_20018 = atomic_inc(&(v_work_idx_1032)); \n      while((v_l_id_20018 < 1)){\n        float v_tmp_20109 = 0.0f; \n        v__9610 = v_tmp_20109; \n        /* reduce_seq */\n        for (int v_i_20019 = 0; v_i_20019 < v_MWidthC_1; v_i_20019 = (1 + v_i_20019)) {\n          v__9610 = add(v__9610, v__20038[(v_i_20019 + (v_MWidthC_1 * v_l_id_20018))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20020 = 0; \n          v__20043[v_wg_id_20014] = doubleMultiplyAdd(v__9610, v__20025, v__20024[v_wg_id_20014], v__20026); \n        }\n        /* end map_seq */\n        v_l_id_20018 = atomic_inc(&(v_work_idx_1032)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__20021",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20022",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20023",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20025",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20026",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20038",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}