{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13251, const global float* restrict v__13252, const global float* restrict v__13253, const global float* restrict v__13254, float v__13255, float v__13256, global float* v__13273, global float* v__13263, local float* v__13268, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13259; \n  float v__13264; \n  float v__9610; \n  /* Private Memory */\n  float v__13261_0;\n  \n  for (int v_wg_id_13243 = get_group_id(0); v_wg_id_13243 < v_MHeight_2; v_wg_id_13243 = (v_wg_id_13243 + get_num_groups(0))) {\n    for (int v_l_id_13244 = get_local_id(0); v_l_id_13244 < v_MWidthC_1; v_l_id_13244 = (v_l_id_13244 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_13245 = 0; v_i_13245 < 16; v_i_13245 = (1 + v_i_13245)) {\n        float v_tmp_13334 = 0.0f; \n        v__13259 = v_tmp_13334; \n        int v_index_13335 = v__13251[(v_l_id_13244 + (16 * v_MWidthC_1 * v_wg_id_13243) + (v_MWidthC_1 * v_i_13245))]; \n        if (v_index_13335 < 0) {\n          v__13261_0 = v__13259; \n        } else {\n          if (v_index_13335 >= v_VLength_3) {\n            v__13261_0 = v__13259; \n          } else {\n            v__13261_0 = v__13253[v_index_13335]; \n          }\n        }\n        v__13263[(v_i_13245 + (16 * v_MWidthC_1 * v_wg_id_13243) + (16 * v_l_id_13244))] = mult(v__13261_0, v__13252[(v_l_id_13244 + (16 * v_MWidthC_1 * v_wg_id_13243) + (v_MWidthC_1 * v_i_13245))]); \n      }\n      /* end map_seq */\n      float v_tmp_13336 = 0.0f; \n      v__13264 = v_tmp_13336; \n      /* reduce_seq */\n      for (int v_i_13246 = 0; v_i_13246 < 16; v_i_13246 = (1 + v_i_13246)) {\n        v__13264 = add(v__13264, v__13263[(v_i_13246 + (16 * v_MWidthC_1 * v_wg_id_13243) + (16 * v_l_id_13244))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13247 = 0; \n        v__13268[v_l_id_13244] = id(v__13264); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_398; \n      v_work_idx_398 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13248 = atomic_inc(&(v_work_idx_398)); \n      while((v_l_id_13248 < 1)){\n        float v_tmp_13339 = 0.0f; \n        v__9610 = v_tmp_13339; \n        /* reduce_seq */\n        for (int v_i_13249 = 0; v_i_13249 < v_MWidthC_1; v_i_13249 = (1 + v_i_13249)) {\n          v__9610 = add(v__9610, v__13268[(v_i_13249 + (v_MWidthC_1 * v_l_id_13248))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13250 = 0; \n          v__13273[v_wg_id_13243] = doubleMultiplyAdd(v__9610, v__13255, v__13254[v_wg_id_13243], v__13256); \n        }\n        /* end map_seq */\n        v_l_id_13248 = atomic_inc(&(v_work_idx_398)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13251",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13252",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13253",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13254",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13255",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13256",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13263",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13268",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}