{
  "name" : "awrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14515, const global float* restrict v__14516, const global float* restrict v__14517, const global float* restrict v__14518, float v__14519, float v__14520, global float* v__14536, global int* v__14522, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14523; \n  float v__14526; \n  /* Private Memory */\n  float v__14528_0;\n  \n  float v__14530_0;\n  \n  int v__14534_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_519 = v__14522; \n    local int v_w_id_14511; \n    if (get_local_id(0) == 0) {\n      v_w_id_14511 = atomic_inc(v_work_idx_519); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14511 < v_MHeight_2)){\n      for (int v_l_id_14512 = get_local_id(0); v_l_id_14512 < 16; v_l_id_14512 = (v_l_id_14512 + get_local_size(0))) {\n        float v_tmp_14583 = 0.0f; \n        v__14523 = v_tmp_14583; \n        /* reduce_while_seq */\n        for (int v_i_14513 = 0; v_i_14513 < v_MWidthC_1; v_i_14513 = (1 + v_i_14513)) {\n          v__14534_0 = check(v__14523, v__14515[(v_i_14513 + (16 * v_MWidthC_1 * v_w_id_14511) + (v_MWidthC_1 * v_l_id_14512))]); \n          if (v__14534_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14584 = 0.0f; \n          v__14526 = v_tmp_14584; \n          int v_index_14585 = v__14515[(v_i_14513 + (16 * v_MWidthC_1 * v_w_id_14511) + (v_MWidthC_1 * v_l_id_14512))]; \n          if (v_index_14585 < 0) {\n            v__14528_0 = v__14526; \n          } else {\n            if (v_index_14585 >= v_VLength_3) {\n              v__14528_0 = v__14526; \n            } else {\n              v__14528_0 = v__14517[v_index_14585]; \n            }\n          }\n          v__14530_0 = mult(v__14528_0, v__14516[(v_i_14513 + (16 * v_MWidthC_1 * v_w_id_14511) + (v_MWidthC_1 * v_l_id_14512))]); \n          v__14523 = add(v__14530_0, v__14523); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14514 = 0; \n          v__14536[(v_l_id_14512 + (16 * v_w_id_14511))] = doubleMultiplyAdd(v__14523, v__14519, v__14518[(v_l_id_14512 + (16 * v_w_id_14511))], v__14520); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_14511 = atomic_inc(v_work_idx_519); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14515",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14516",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14517",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14518",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__14519",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14520",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14522",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14536",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}