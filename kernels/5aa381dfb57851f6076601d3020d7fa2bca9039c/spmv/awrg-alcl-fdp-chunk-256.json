{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28633, const global float* restrict v__28634, const global float* restrict v__28635, const global float* restrict v__28636, float v__28637, float v__28638, global float* v__28652, global int* v__28640, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28642; \n  float v__28644; \n  /* Private Memory */\n  float v__28646_0;\n  \n  float v__28648_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1841 = v__28640; \n    local int v_w_id_28629; \n    if (get_local_id(0) == 0) {\n      v_w_id_28629 = atomic_inc(v_work_idx_1841); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28629 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1839; \n        v_work_idx_1839 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_28630 = atomic_inc(&(v_work_idx_1839)); \n        while((v_l_id_28630 < 256)){\n          float v_tmp_28689 = 0.0f; \n          v__28642 = v_tmp_28689; \n          /* reduce_seq */\n          for (int v_i_28631 = 0; v_i_28631 < v_MWidthC_1; v_i_28631 = (1 + v_i_28631)) {\n            float v_tmp_28690 = 0.0f; \n            v__28644 = v_tmp_28690; \n            int v_index_28691 = v__28633[(v_i_28631 + (256 * v_MWidthC_1 * v_w_id_28629) + (v_MWidthC_1 * v_l_id_28630))]; \n            if (v_index_28691 < 0) {\n              v__28646_0 = v__28644; \n            } else {\n              if (v_index_28691 >= v_VLength_3) {\n                v__28646_0 = v__28644; \n              } else {\n                v__28646_0 = v__28635[v_index_28691]; \n              }\n            }\n            v__28648_0 = mult(v__28646_0, v__28634[(v_i_28631 + (256 * v_MWidthC_1 * v_w_id_28629) + (v_MWidthC_1 * v_l_id_28630))]); \n            v__28642 = add(v__28648_0, v__28642); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28632 = 0; \n            v__28652[(v_l_id_28630 + (256 * v_w_id_28629))] = doubleMultiplyAdd(v__28642, v__28637, v__28636[(v_l_id_28630 + (256 * v_w_id_28629))], v__28638); \n          }\n          /* end map_seq */\n          v_l_id_28630 = atomic_inc(&(v_work_idx_1839)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28629 = atomic_inc(v_work_idx_1841); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28633",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28634",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28635",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28636",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__28637",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28638",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28640",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28652",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}