{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27607, const global float* restrict v__27608, const global float* restrict v__27609, const global float* restrict v__27610, float v__27611, float v__27612, global float* v__27631, local float* v__27626, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27615; \n  float v__27617; \n  float v__9610; \n  /* Private Memory */\n  float v__27619_0;\n  \n  float v__27621_0;\n  \n  int v__27625_0;\n  \n  for (int v_wg_id_27600 = get_group_id(0); v_wg_id_27600 < v_MHeight_2; v_wg_id_27600 = (v_wg_id_27600 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1747; \n      v_work_idx_1747 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_27601 = atomic_inc(&(v_work_idx_1747)); \n      while((v_l_id_27601 < v_MWidthC_1)){\n        float v_tmp_27687 = 0.0f; \n        v__27615 = v_tmp_27687; \n        /* reduce_while_seq */\n        for (int v_i_27602 = 0; v_i_27602 < 256; v_i_27602 = (1 + v_i_27602)) {\n          v__27625_0 = check(v__27615, v__27607[(v_l_id_27601 + (256 * v_MWidthC_1 * v_wg_id_27600) + (v_MWidthC_1 * v_i_27602))]); \n          if (v__27625_0) {\n          } else {\n            break;\n          }\n          float v_tmp_27688 = 0.0f; \n          v__27617 = v_tmp_27688; \n          int v_index_27689 = v__27607[(v_l_id_27601 + (256 * v_MWidthC_1 * v_wg_id_27600) + (v_MWidthC_1 * v_i_27602))]; \n          if (v_index_27689 < 0) {\n            v__27619_0 = v__27617; \n          } else {\n            if (v_index_27689 >= v_VLength_3) {\n              v__27619_0 = v__27617; \n            } else {\n              v__27619_0 = v__27609[v_index_27689]; \n            }\n          }\n          v__27621_0 = mult(v__27619_0, v__27608[(v_l_id_27601 + (256 * v_MWidthC_1 * v_wg_id_27600) + (v_MWidthC_1 * v_i_27602))]); \n          v__27615 = add(v__27621_0, v__27615); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27603 = 0; \n          v__27626[v_l_id_27601] = id(v__27615); \n        }\n        /* end map_seq */\n        v_l_id_27601 = atomic_inc(&(v_work_idx_1747)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1742; \n      v_work_idx_1742 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_27604 = atomic_inc(&(v_work_idx_1742)); \n      while((v_l_id_27604 < 1)){\n        float v_tmp_27692 = 0.0f; \n        v__9610 = v_tmp_27692; \n        /* reduce_seq */\n        for (int v_i_27605 = 0; v_i_27605 < v_MWidthC_1; v_i_27605 = (1 + v_i_27605)) {\n          v__9610 = add(v__9610, v__27626[(v_i_27605 + (v_MWidthC_1 * v_l_id_27604))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27606 = 0; \n          v__27631[v_wg_id_27600] = doubleMultiplyAdd(v__9610, v__27611, v__27610[v_wg_id_27600], v__27612); \n        }\n        /* end map_seq */\n        v_l_id_27604 = atomic_inc(&(v_work_idx_1742)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__27607",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27608",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27609",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27610",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27611",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27612",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__27631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27626",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}