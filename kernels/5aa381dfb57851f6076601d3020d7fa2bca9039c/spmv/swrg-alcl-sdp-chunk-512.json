{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30230, const global float* restrict v__30231, const global float* restrict v__30232, const global float* restrict v__30233, float v__30234, float v__30235, global float* v__30248, global float* v__30242, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30238; \n  float v__30243; \n  /* Private Memory */\n  float v__30240_0;\n  \n  for (int v_wg_id_30225 = get_group_id(0); v_wg_id_30225 < v_MHeight_2; v_wg_id_30225 = (v_wg_id_30225 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1988; \n      v_work_idx_1988 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_30226 = atomic_inc(&(v_work_idx_1988)); \n      while((v_l_id_30226 < 512)){\n        /* map_seq */\n        for (int v_i_30227 = 0; v_i_30227 < v_MWidthC_1; v_i_30227 = (1 + v_i_30227)) {\n          float v_tmp_30288 = 0.0f; \n          v__30238 = v_tmp_30288; \n          int v_index_30289 = v__30230[(v_i_30227 + (512 * v_MWidthC_1 * v_wg_id_30225) + (v_MWidthC_1 * v_l_id_30226))]; \n          if (v_index_30289 < 0) {\n            v__30240_0 = v__30238; \n          } else {\n            if (v_index_30289 >= v_VLength_3) {\n              v__30240_0 = v__30238; \n            } else {\n              v__30240_0 = v__30232[v_index_30289]; \n            }\n          }\n          v__30242[(v_i_30227 + (512 * v_MWidthC_1 * v_wg_id_30225) + (v_MWidthC_1 * v_l_id_30226))] = mult(v__30240_0, v__30231[(v_i_30227 + (512 * v_MWidthC_1 * v_wg_id_30225) + (v_MWidthC_1 * v_l_id_30226))]); \n        }\n        /* end map_seq */\n        float v_tmp_30290 = 0.0f; \n        v__30243 = v_tmp_30290; \n        /* reduce_seq */\n        for (int v_i_30228 = 0; v_i_30228 < v_MWidthC_1; v_i_30228 = (1 + v_i_30228)) {\n          v__30243 = add(v__30243, v__30242[(v_i_30228 + (512 * v_MWidthC_1 * v_wg_id_30225) + (v_MWidthC_1 * v_l_id_30226))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30229 = 0; \n          v__30248[(v_l_id_30226 + (512 * v_wg_id_30225))] = doubleMultiplyAdd(v__30243, v__30234, v__30233[(v_l_id_30226 + (512 * v_wg_id_30225))], v__30235); \n        }\n        /* end map_seq */\n        v_l_id_30226 = atomic_inc(&(v_work_idx_1988)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__30230",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30231",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30232",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30233",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__30234",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30235",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30242",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__30248",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}