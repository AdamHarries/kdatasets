{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11034, const global float* restrict v__11035, const global float* restrict v__11036, const global float* restrict v__11037, float v__11038, float v__11039, global float* v__11053, global int* v__11041, global float* v__11047, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11043; \n  float v__11048; \n  /* Private Memory */\n  float v__11045_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_195 = v__11041; \n    local int v_w_id_11029; \n    if (get_local_id(0) == 0) {\n      v_w_id_11029 = atomic_inc(v_work_idx_195); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11029 < v_MHeight_2)){\n      for (int v_l_id_11030 = get_local_id(0); v_l_id_11030 < 8; v_l_id_11030 = (v_l_id_11030 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_11031 = 0; v_i_11031 < v_MWidthC_1; v_i_11031 = (1 + v_i_11031)) {\n          float v_tmp_11095 = 0.0f; \n          v__11043 = v_tmp_11095; \n          int v_index_11096 = v__11034[(v_i_11031 + (8 * v_MWidthC_1 * v_w_id_11029) + (v_MWidthC_1 * v_l_id_11030))]; \n          if (v_index_11096 < 0) {\n            v__11045_0 = v__11043; \n          } else {\n            if (v_index_11096 >= v_VLength_3) {\n              v__11045_0 = v__11043; \n            } else {\n              v__11045_0 = v__11036[v_index_11096]; \n            }\n          }\n          v__11047[(v_i_11031 + (8 * v_MWidthC_1 * v_w_id_11029) + (v_MWidthC_1 * v_l_id_11030))] = mult(v__11045_0, v__11035[(v_i_11031 + (8 * v_MWidthC_1 * v_w_id_11029) + (v_MWidthC_1 * v_l_id_11030))]); \n        }\n        /* end map_seq */\n        float v_tmp_11097 = 0.0f; \n        v__11048 = v_tmp_11097; \n        /* reduce_seq */\n        for (int v_i_11032 = 0; v_i_11032 < v_MWidthC_1; v_i_11032 = (1 + v_i_11032)) {\n          v__11048 = add(v__11048, v__11047[(v_i_11032 + (8 * v_MWidthC_1 * v_w_id_11029) + (v_MWidthC_1 * v_l_id_11030))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11033 = 0; \n          v__11053[(v_l_id_11030 + (8 * v_w_id_11029))] = doubleMultiplyAdd(v__11048, v__11038, v__11037[(v_l_id_11030 + (8 * v_w_id_11029))], v__11039); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_11029 = atomic_inc(v_work_idx_195); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__11034",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11035",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11036",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11037",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__11038",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11039",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11041",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__11047",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__11053",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}