{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15837, const global float* restrict v__15838, const global float* restrict v__15839, const global float* restrict v__15840, float v__15841, float v__15842, global float* v__15860, global int* v__15844, local float* v__15855, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15846; \n  float v__15848; \n  float v__9610; \n  /* Private Memory */\n  float v__15850_0;\n  \n  float v__15852_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_654 = v__15844; \n    local int v_w_id_15830; \n    if (get_local_id(0) == 0) {\n      v_w_id_15830 = atomic_inc(v_work_idx_654); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15830 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_652; \n        v_work_idx_652 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15831 = atomic_inc(&(v_work_idx_652)); \n        while((v_l_id_15831 < v_MWidthC_1)){\n          float v_tmp_15911 = 0.0f; \n          v__15846 = v_tmp_15911; \n          /* reduce_seq */\n          for (int v_i_15832 = 0; v_i_15832 < 16; v_i_15832 = (1 + v_i_15832)) {\n            float v_tmp_15912 = 0.0f; \n            v__15848 = v_tmp_15912; \n            int v_index_15913 = v__15837[(v_l_id_15831 + (16 * v_MWidthC_1 * v_w_id_15830) + (v_MWidthC_1 * v_i_15832))]; \n            if (v_index_15913 < 0) {\n              v__15850_0 = v__15848; \n            } else {\n              if (v_index_15913 >= v_VLength_3) {\n                v__15850_0 = v__15848; \n              } else {\n                v__15850_0 = v__15839[v_index_15913]; \n              }\n            }\n            v__15852_0 = mult(v__15850_0, v__15838[(v_l_id_15831 + (16 * v_MWidthC_1 * v_w_id_15830) + (v_MWidthC_1 * v_i_15832))]); \n            v__15846 = add(v__15852_0, v__15846); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15833 = 0; \n            v__15855[v_l_id_15831] = id(v__15846); \n          }\n          /* end map_seq */\n          v_l_id_15831 = atomic_inc(&(v_work_idx_652)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_647; \n        v_work_idx_647 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15834 = atomic_inc(&(v_work_idx_647)); \n        while((v_l_id_15834 < 1)){\n          float v_tmp_15916 = 0.0f; \n          v__9610 = v_tmp_15916; \n          /* reduce_seq */\n          for (int v_i_15835 = 0; v_i_15835 < v_MWidthC_1; v_i_15835 = (1 + v_i_15835)) {\n            v__9610 = add(v__9610, v__15855[(v_i_15835 + (v_MWidthC_1 * v_l_id_15834))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15836 = 0; \n            v__15860[v_w_id_15830] = doubleMultiplyAdd(v__9610, v__15841, v__15840[v_w_id_15830], v__15842); \n          }\n          /* end map_seq */\n          v_l_id_15834 = atomic_inc(&(v_work_idx_647)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15830 = atomic_inc(v_work_idx_654); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15837",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15838",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15844",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15860",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15855",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}