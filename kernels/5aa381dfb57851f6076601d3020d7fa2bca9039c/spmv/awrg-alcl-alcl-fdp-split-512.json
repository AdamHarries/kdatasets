{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32507, const global float* restrict v__32508, const global float* restrict v__32509, const global float* restrict v__32510, float v__32511, float v__32512, global float* v__32530, global int* v__32514, local float* v__32525, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32516; \n  float v__32518; \n  float v__9610; \n  /* Private Memory */\n  float v__32520_0;\n  \n  float v__32522_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2214 = v__32514; \n    local int v_w_id_32500; \n    if (get_local_id(0) == 0) {\n      v_w_id_32500 = atomic_inc(v_work_idx_2214); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32500 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2212; \n        v_work_idx_2212 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_32501 = atomic_inc(&(v_work_idx_2212)); \n        while((v_l_id_32501 < v_MWidthC_1)){\n          float v_tmp_32581 = 0.0f; \n          v__32516 = v_tmp_32581; \n          /* reduce_seq */\n          for (int v_i_32502 = 0; v_i_32502 < 512; v_i_32502 = (1 + v_i_32502)) {\n            float v_tmp_32582 = 0.0f; \n            v__32518 = v_tmp_32582; \n            int v_index_32583 = v__32507[(v_l_id_32501 + (512 * v_MWidthC_1 * v_w_id_32500) + (v_MWidthC_1 * v_i_32502))]; \n            if (v_index_32583 < 0) {\n              v__32520_0 = v__32518; \n            } else {\n              if (v_index_32583 >= v_VLength_3) {\n                v__32520_0 = v__32518; \n              } else {\n                v__32520_0 = v__32509[v_index_32583]; \n              }\n            }\n            v__32522_0 = mult(v__32520_0, v__32508[(v_l_id_32501 + (512 * v_MWidthC_1 * v_w_id_32500) + (v_MWidthC_1 * v_i_32502))]); \n            v__32516 = add(v__32522_0, v__32516); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32503 = 0; \n            v__32525[v_l_id_32501] = id(v__32516); \n          }\n          /* end map_seq */\n          v_l_id_32501 = atomic_inc(&(v_work_idx_2212)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2207; \n        v_work_idx_2207 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_32504 = atomic_inc(&(v_work_idx_2207)); \n        while((v_l_id_32504 < 1)){\n          float v_tmp_32586 = 0.0f; \n          v__9610 = v_tmp_32586; \n          /* reduce_seq */\n          for (int v_i_32505 = 0; v_i_32505 < v_MWidthC_1; v_i_32505 = (1 + v_i_32505)) {\n            v__9610 = add(v__9610, v__32525[(v_i_32505 + (v_MWidthC_1 * v_l_id_32504))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32506 = 0; \n            v__32530[v_w_id_32500] = doubleMultiplyAdd(v__9610, v__32511, v__32510[v_w_id_32500], v__32512); \n          }\n          /* end map_seq */\n          v_l_id_32504 = atomic_inc(&(v_work_idx_2207)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32500 = atomic_inc(v_work_idx_2214); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__32507",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32508",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32509",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32510",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32511",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32512",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32514",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32530",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32525",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}