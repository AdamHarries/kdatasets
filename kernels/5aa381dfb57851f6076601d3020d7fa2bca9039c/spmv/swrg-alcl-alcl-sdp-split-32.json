{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17417, const global float* restrict v__17418, const global float* restrict v__17419, const global float* restrict v__17420, float v__17421, float v__17422, global float* v__17439, global float* v__17429, local float* v__17434, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17425; \n  float v__17430; \n  float v__9610; \n  /* Private Memory */\n  float v__17427_0;\n  \n  for (int v_wg_id_17409 = get_group_id(0); v_wg_id_17409 < v_MHeight_2; v_wg_id_17409 = (v_wg_id_17409 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_791; \n      v_work_idx_791 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_17410 = atomic_inc(&(v_work_idx_791)); \n      while((v_l_id_17410 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_17411 = 0; v_i_17411 < 32; v_i_17411 = (1 + v_i_17411)) {\n          float v_tmp_17492 = 0.0f; \n          v__17425 = v_tmp_17492; \n          int v_index_17493 = v__17417[(v_l_id_17410 + (32 * v_MWidthC_1 * v_wg_id_17409) + (v_MWidthC_1 * v_i_17411))]; \n          if (v_index_17493 < 0) {\n            v__17427_0 = v__17425; \n          } else {\n            if (v_index_17493 >= v_VLength_3) {\n              v__17427_0 = v__17425; \n            } else {\n              v__17427_0 = v__17419[v_index_17493]; \n            }\n          }\n          v__17429[(v_i_17411 + (32 * v_MWidthC_1 * v_wg_id_17409) + (32 * v_l_id_17410))] = mult(v__17427_0, v__17418[(v_l_id_17410 + (32 * v_MWidthC_1 * v_wg_id_17409) + (v_MWidthC_1 * v_i_17411))]); \n        }\n        /* end map_seq */\n        float v_tmp_17494 = 0.0f; \n        v__17430 = v_tmp_17494; \n        /* reduce_seq */\n        for (int v_i_17412 = 0; v_i_17412 < 32; v_i_17412 = (1 + v_i_17412)) {\n          v__17430 = add(v__17430, v__17429[(v_i_17412 + (32 * v_MWidthC_1 * v_wg_id_17409) + (32 * v_l_id_17410))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17413 = 0; \n          v__17434[v_l_id_17410] = id(v__17430); \n        }\n        /* end map_seq */\n        v_l_id_17410 = atomic_inc(&(v_work_idx_791)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_785; \n      v_work_idx_785 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_17414 = atomic_inc(&(v_work_idx_785)); \n      while((v_l_id_17414 < 1)){\n        float v_tmp_17497 = 0.0f; \n        v__9610 = v_tmp_17497; \n        /* reduce_seq */\n        for (int v_i_17415 = 0; v_i_17415 < v_MWidthC_1; v_i_17415 = (1 + v_i_17415)) {\n          v__9610 = add(v__9610, v__17434[(v_i_17415 + (v_MWidthC_1 * v_l_id_17414))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17416 = 0; \n          v__17439[v_wg_id_17409] = doubleMultiplyAdd(v__9610, v__17421, v__17420[v_wg_id_17409], v__17422); \n        }\n        /* end map_seq */\n        v_l_id_17414 = atomic_inc(&(v_work_idx_785)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17417",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17418",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17419",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17421",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17422",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17429",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__17439",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17434",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}