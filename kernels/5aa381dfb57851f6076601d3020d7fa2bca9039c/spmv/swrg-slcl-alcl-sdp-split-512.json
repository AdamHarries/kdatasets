{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29921, const global float* restrict v__29922, const global float* restrict v__29923, const global float* restrict v__29924, float v__29925, float v__29926, global float* v__29943, global float* v__29933, local float* v__29938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29929; \n  float v__29934; \n  float v__9610; \n  /* Private Memory */\n  float v__29931_0;\n  \n  for (int v_wg_id_29913 = get_group_id(0); v_wg_id_29913 < v_MHeight_2; v_wg_id_29913 = (v_wg_id_29913 + get_num_groups(0))) {\n    for (int v_l_id_29914 = get_local_id(0); v_l_id_29914 < v_MWidthC_1; v_l_id_29914 = (v_l_id_29914 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_29915 = 0; v_i_29915 < 512; v_i_29915 = (1 + v_i_29915)) {\n        float v_tmp_30004 = 0.0f; \n        v__29929 = v_tmp_30004; \n        int v_index_30005 = v__29921[(v_l_id_29914 + (512 * v_MWidthC_1 * v_wg_id_29913) + (v_MWidthC_1 * v_i_29915))]; \n        if (v_index_30005 < 0) {\n          v__29931_0 = v__29929; \n        } else {\n          if (v_index_30005 >= v_VLength_3) {\n            v__29931_0 = v__29929; \n          } else {\n            v__29931_0 = v__29923[v_index_30005]; \n          }\n        }\n        v__29933[(v_i_29915 + (512 * v_MWidthC_1 * v_wg_id_29913) + (512 * v_l_id_29914))] = mult(v__29931_0, v__29922[(v_l_id_29914 + (512 * v_MWidthC_1 * v_wg_id_29913) + (v_MWidthC_1 * v_i_29915))]); \n      }\n      /* end map_seq */\n      float v_tmp_30006 = 0.0f; \n      v__29934 = v_tmp_30006; \n      /* reduce_seq */\n      for (int v_i_29916 = 0; v_i_29916 < 512; v_i_29916 = (1 + v_i_29916)) {\n        v__29934 = add(v__29934, v__29933[(v_i_29916 + (512 * v_MWidthC_1 * v_wg_id_29913) + (512 * v_l_id_29914))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_29917 = 0; \n        v__29938[v_l_id_29914] = id(v__29934); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1958; \n      v_work_idx_1958 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_29918 = atomic_inc(&(v_work_idx_1958)); \n      while((v_l_id_29918 < 1)){\n        float v_tmp_30009 = 0.0f; \n        v__9610 = v_tmp_30009; \n        /* reduce_seq */\n        for (int v_i_29919 = 0; v_i_29919 < v_MWidthC_1; v_i_29919 = (1 + v_i_29919)) {\n          v__9610 = add(v__9610, v__29938[(v_i_29919 + (v_MWidthC_1 * v_l_id_29918))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29920 = 0; \n          v__29943[v_wg_id_29913] = doubleMultiplyAdd(v__9610, v__29925, v__29924[v_wg_id_29913], v__29926); \n        }\n        /* end map_seq */\n        v_l_id_29918 = atomic_inc(&(v_work_idx_1958)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__29921",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29922",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29923",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29925",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29926",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29933",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__29943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29938",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}