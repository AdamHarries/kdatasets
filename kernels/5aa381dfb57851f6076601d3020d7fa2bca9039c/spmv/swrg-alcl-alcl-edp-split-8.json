{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10937, const global float* restrict v__10938, const global float* restrict v__10939, const global float* restrict v__10940, float v__10941, float v__10942, global float* v__10961, local float* v__10956, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10945; \n  float v__10947; \n  float v__9610; \n  /* Private Memory */\n  float v__10949_0;\n  \n  float v__10951_0;\n  \n  int v__10955_0;\n  \n  for (int v_wg_id_10930 = get_group_id(0); v_wg_id_10930 < v_MHeight_2; v_wg_id_10930 = (v_wg_id_10930 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_187; \n      v_work_idx_187 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10931 = atomic_inc(&(v_work_idx_187)); \n      while((v_l_id_10931 < v_MWidthC_1)){\n        float v_tmp_11017 = 0.0f; \n        v__10945 = v_tmp_11017; \n        /* reduce_while_seq */\n        for (int v_i_10932 = 0; v_i_10932 < 8; v_i_10932 = (1 + v_i_10932)) {\n          v__10955_0 = check(v__10945, v__10937[(v_l_id_10931 + (8 * v_MWidthC_1 * v_wg_id_10930) + (v_MWidthC_1 * v_i_10932))]); \n          if (v__10955_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11018 = 0.0f; \n          v__10947 = v_tmp_11018; \n          int v_index_11019 = v__10937[(v_l_id_10931 + (8 * v_MWidthC_1 * v_wg_id_10930) + (v_MWidthC_1 * v_i_10932))]; \n          if (v_index_11019 < 0) {\n            v__10949_0 = v__10947; \n          } else {\n            if (v_index_11019 >= v_VLength_3) {\n              v__10949_0 = v__10947; \n            } else {\n              v__10949_0 = v__10939[v_index_11019]; \n            }\n          }\n          v__10951_0 = mult(v__10949_0, v__10938[(v_l_id_10931 + (8 * v_MWidthC_1 * v_wg_id_10930) + (v_MWidthC_1 * v_i_10932))]); \n          v__10945 = add(v__10951_0, v__10945); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10933 = 0; \n          v__10956[v_l_id_10931] = id(v__10945); \n        }\n        /* end map_seq */\n        v_l_id_10931 = atomic_inc(&(v_work_idx_187)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_182; \n      v_work_idx_182 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10934 = atomic_inc(&(v_work_idx_182)); \n      while((v_l_id_10934 < 1)){\n        float v_tmp_11022 = 0.0f; \n        v__9610 = v_tmp_11022; \n        /* reduce_seq */\n        for (int v_i_10935 = 0; v_i_10935 < v_MWidthC_1; v_i_10935 = (1 + v_i_10935)) {\n          v__9610 = add(v__9610, v__10956[(v_i_10935 + (v_MWidthC_1 * v_l_id_10934))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10936 = 0; \n          v__10961[v_wg_id_10930] = doubleMultiplyAdd(v__9610, v__10941, v__10940[v_wg_id_10930], v__10942); \n        }\n        /* end map_seq */\n        v_l_id_10934 = atomic_inc(&(v_work_idx_182)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10937",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10938",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10939",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10940",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10941",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10942",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10961",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10956",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}