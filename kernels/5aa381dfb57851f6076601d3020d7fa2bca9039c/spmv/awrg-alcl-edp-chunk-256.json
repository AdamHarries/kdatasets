{
  "name" : "awrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28702, const global float* restrict v__28703, const global float* restrict v__28704, const global float* restrict v__28705, float v__28706, float v__28707, global float* v__28723, global int* v__28709, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28710; \n  float v__28713; \n  /* Private Memory */\n  float v__28715_0;\n  \n  float v__28717_0;\n  \n  int v__28721_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1848 = v__28709; \n    local int v_w_id_28698; \n    if (get_local_id(0) == 0) {\n      v_w_id_28698 = atomic_inc(v_work_idx_1848); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28698 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1846; \n        v_work_idx_1846 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_28699 = atomic_inc(&(v_work_idx_1846)); \n        while((v_l_id_28699 < 256)){\n          float v_tmp_28766 = 0.0f; \n          v__28710 = v_tmp_28766; \n          /* reduce_while_seq */\n          for (int v_i_28700 = 0; v_i_28700 < v_MWidthC_1; v_i_28700 = (1 + v_i_28700)) {\n            v__28721_0 = check(v__28710, v__28702[(v_i_28700 + (256 * v_MWidthC_1 * v_w_id_28698) + (v_MWidthC_1 * v_l_id_28699))]); \n            if (v__28721_0) {\n            } else {\n              break;\n            }\n            float v_tmp_28767 = 0.0f; \n            v__28713 = v_tmp_28767; \n            int v_index_28768 = v__28702[(v_i_28700 + (256 * v_MWidthC_1 * v_w_id_28698) + (v_MWidthC_1 * v_l_id_28699))]; \n            if (v_index_28768 < 0) {\n              v__28715_0 = v__28713; \n            } else {\n              if (v_index_28768 >= v_VLength_3) {\n                v__28715_0 = v__28713; \n              } else {\n                v__28715_0 = v__28704[v_index_28768]; \n              }\n            }\n            v__28717_0 = mult(v__28715_0, v__28703[(v_i_28700 + (256 * v_MWidthC_1 * v_w_id_28698) + (v_MWidthC_1 * v_l_id_28699))]); \n            v__28710 = add(v__28717_0, v__28710); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28701 = 0; \n            v__28723[(v_l_id_28699 + (256 * v_w_id_28698))] = doubleMultiplyAdd(v__28710, v__28706, v__28705[(v_l_id_28699 + (256 * v_w_id_28698))], v__28707); \n          }\n          /* end map_seq */\n          v_l_id_28699 = atomic_inc(&(v_work_idx_1846)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28698 = atomic_inc(v_work_idx_1848); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__28702",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28703",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28704",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28705",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__28706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28709",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28723",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}