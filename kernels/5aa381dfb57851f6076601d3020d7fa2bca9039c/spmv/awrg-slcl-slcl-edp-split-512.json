{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31480, const global float* restrict v__31481, const global float* restrict v__31482, const global float* restrict v__31483, float v__31484, float v__31485, global float* v__31505, global int* v__31487, local float* v__31500, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31489; \n  float v__31491; \n  float v__9610; \n  /* Private Memory */\n  float v__31493_0;\n  \n  float v__31495_0;\n  \n  int v__31499_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2107 = v__31487; \n    local int v_w_id_31473; \n    if (get_local_id(0) == 0) {\n      v_w_id_31473 = atomic_inc(v_work_idx_2107); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31473 < v_MHeight_2)){\n      for (int v_l_id_31474 = get_local_id(0); v_l_id_31474 < v_MWidthC_1; v_l_id_31474 = (v_l_id_31474 + get_local_size(0))) {\n        float v_tmp_31571 = 0.0f; \n        v__31489 = v_tmp_31571; \n        /* reduce_while_seq */\n        for (int v_i_31475 = 0; v_i_31475 < 512; v_i_31475 = (1 + v_i_31475)) {\n          v__31499_0 = check(v__31489, v__31480[(v_l_id_31474 + (512 * v_MWidthC_1 * v_w_id_31473) + (v_MWidthC_1 * v_i_31475))]); \n          if (v__31499_0) {\n          } else {\n            break;\n          }\n          float v_tmp_31572 = 0.0f; \n          v__31491 = v_tmp_31572; \n          int v_index_31573 = v__31480[(v_l_id_31474 + (512 * v_MWidthC_1 * v_w_id_31473) + (v_MWidthC_1 * v_i_31475))]; \n          if (v_index_31573 < 0) {\n            v__31493_0 = v__31491; \n          } else {\n            if (v_index_31573 >= v_VLength_3) {\n              v__31493_0 = v__31491; \n            } else {\n              v__31493_0 = v__31482[v_index_31573]; \n            }\n          }\n          v__31495_0 = mult(v__31493_0, v__31481[(v_l_id_31474 + (512 * v_MWidthC_1 * v_w_id_31473) + (v_MWidthC_1 * v_i_31475))]); \n          v__31489 = add(v__31495_0, v__31489); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31476 = 0; \n          v__31500[v_l_id_31474] = id(v__31489); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_31477 = get_local_id(0); \n        float v_tmp_31576 = 0.0f; \n        v__9610 = v_tmp_31576; \n        /* reduce_seq */\n        for (int v_i_31478 = 0; v_i_31478 < v_MWidthC_1; v_i_31478 = (1 + v_i_31478)) {\n          v__9610 = add(v__9610, v__31500[(v_i_31478 + (v_MWidthC_1 * v_l_id_31477))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31479 = 0; \n          v__31505[v_w_id_31473] = doubleMultiplyAdd(v__9610, v__31484, v__31483[v_w_id_31473], v__31485); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31473 = atomic_inc(v_work_idx_2107); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__31480",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31481",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31482",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31483",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31484",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31485",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31487",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31505",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31500",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}