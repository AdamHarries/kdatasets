{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15297, const global float* restrict v__15298, const global float* restrict v__15299, const global float* restrict v__15300, float v__15301, float v__15302, global float* v__15316, global int* v__15304, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15306; \n  float v__15308; \n  /* Private Memory */\n  float v__15310_0;\n  \n  float v__15312_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_593 = v__15304; \n    local int v_w_id_15293; \n    if (get_local_id(0) == 0) {\n      v_w_id_15293 = atomic_inc(v_work_idx_593); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15293 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_591; \n        v_work_idx_591 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_15294 = atomic_inc(&(v_work_idx_591)); \n        while((v_l_id_15294 < 16)){\n          float v_tmp_15353 = 0.0f; \n          v__15306 = v_tmp_15353; \n          /* reduce_seq */\n          for (int v_i_15295 = 0; v_i_15295 < v_MWidthC_1; v_i_15295 = (1 + v_i_15295)) {\n            float v_tmp_15354 = 0.0f; \n            v__15308 = v_tmp_15354; \n            int v_index_15355 = v__15297[(v_i_15295 + (16 * v_MWidthC_1 * v_w_id_15293) + (v_MWidthC_1 * v_l_id_15294))]; \n            if (v_index_15355 < 0) {\n              v__15310_0 = v__15308; \n            } else {\n              if (v_index_15355 >= v_VLength_3) {\n                v__15310_0 = v__15308; \n              } else {\n                v__15310_0 = v__15299[v_index_15355]; \n              }\n            }\n            v__15312_0 = mult(v__15310_0, v__15298[(v_i_15295 + (16 * v_MWidthC_1 * v_w_id_15293) + (v_MWidthC_1 * v_l_id_15294))]); \n            v__15306 = add(v__15312_0, v__15306); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15296 = 0; \n            v__15316[(v_l_id_15294 + (16 * v_w_id_15293))] = doubleMultiplyAdd(v__15306, v__15301, v__15300[(v_l_id_15294 + (16 * v_w_id_15293))], v__15302); \n          }\n          /* end map_seq */\n          v_l_id_15294 = atomic_inc(&(v_work_idx_591)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15293 = atomic_inc(v_work_idx_593); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15297",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15298",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15299",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15300",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__15301",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15302",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15304",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15316",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}