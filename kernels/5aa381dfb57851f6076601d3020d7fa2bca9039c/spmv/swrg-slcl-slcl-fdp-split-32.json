{
  "name" : "swrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16367, const global float* restrict v__16368, const global float* restrict v__16369, const global float* restrict v__16370, float v__16371, float v__16372, global float* v__16389, local float* v__16384, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16375; \n  float v__16377; \n  float v__9610; \n  /* Private Memory */\n  float v__16379_0;\n  \n  float v__16381_0;\n  \n  for (int v_wg_id_16360 = get_group_id(0); v_wg_id_16360 < v_MHeight_2; v_wg_id_16360 = (v_wg_id_16360 + get_num_groups(0))) {\n    for (int v_l_id_16361 = get_local_id(0); v_l_id_16361 < v_MWidthC_1; v_l_id_16361 = (v_l_id_16361 + get_local_size(0))) {\n      float v_tmp_16454 = 0.0f; \n      v__16375 = v_tmp_16454; \n      /* reduce_seq */\n      for (int v_i_16362 = 0; v_i_16362 < 32; v_i_16362 = (1 + v_i_16362)) {\n        float v_tmp_16455 = 0.0f; \n        v__16377 = v_tmp_16455; \n        int v_index_16456 = v__16367[(v_l_id_16361 + (32 * v_MWidthC_1 * v_wg_id_16360) + (v_MWidthC_1 * v_i_16362))]; \n        if (v_index_16456 < 0) {\n          v__16379_0 = v__16377; \n        } else {\n          if (v_index_16456 >= v_VLength_3) {\n            v__16379_0 = v__16377; \n          } else {\n            v__16379_0 = v__16369[v_index_16456]; \n          }\n        }\n        v__16381_0 = mult(v__16379_0, v__16368[(v_l_id_16361 + (32 * v_MWidthC_1 * v_wg_id_16360) + (v_MWidthC_1 * v_i_16362))]); \n        v__16375 = add(v__16381_0, v__16375); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16363 = 0; \n        v__16384[v_l_id_16361] = id(v__16375); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_16364 = get_local_id(0); \n      float v_tmp_16459 = 0.0f; \n      v__9610 = v_tmp_16459; \n      /* reduce_seq */\n      for (int v_i_16365 = 0; v_i_16365 < v_MWidthC_1; v_i_16365 = (1 + v_i_16365)) {\n        v__9610 = add(v__9610, v__16384[(v_i_16365 + (v_MWidthC_1 * v_l_id_16364))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16366 = 0; \n        v__16389[v_wg_id_16360] = doubleMultiplyAdd(v__9610, v__16371, v__16370[v_wg_id_16360], v__16372); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__16367",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16368",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16369",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16370",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16371",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16372",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16389",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16384",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}