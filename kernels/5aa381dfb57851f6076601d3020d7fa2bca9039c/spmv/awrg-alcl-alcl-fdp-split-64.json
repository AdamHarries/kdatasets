{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22505, const global float* restrict v__22506, const global float* restrict v__22507, const global float* restrict v__22508, float v__22509, float v__22510, global float* v__22528, global int* v__22512, local float* v__22523, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22514; \n  float v__22516; \n  float v__9610; \n  /* Private Memory */\n  float v__22518_0;\n  \n  float v__22520_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1278 = v__22512; \n    local int v_w_id_22498; \n    if (get_local_id(0) == 0) {\n      v_w_id_22498 = atomic_inc(v_work_idx_1278); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22498 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1276; \n        v_work_idx_1276 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22499 = atomic_inc(&(v_work_idx_1276)); \n        while((v_l_id_22499 < v_MWidthC_1)){\n          float v_tmp_22579 = 0.0f; \n          v__22514 = v_tmp_22579; \n          /* reduce_seq */\n          for (int v_i_22500 = 0; v_i_22500 < 64; v_i_22500 = (1 + v_i_22500)) {\n            float v_tmp_22580 = 0.0f; \n            v__22516 = v_tmp_22580; \n            int v_index_22581 = v__22505[(v_l_id_22499 + (64 * v_MWidthC_1 * v_w_id_22498) + (v_MWidthC_1 * v_i_22500))]; \n            if (v_index_22581 < 0) {\n              v__22518_0 = v__22516; \n            } else {\n              if (v_index_22581 >= v_VLength_3) {\n                v__22518_0 = v__22516; \n              } else {\n                v__22518_0 = v__22507[v_index_22581]; \n              }\n            }\n            v__22520_0 = mult(v__22518_0, v__22506[(v_l_id_22499 + (64 * v_MWidthC_1 * v_w_id_22498) + (v_MWidthC_1 * v_i_22500))]); \n            v__22514 = add(v__22520_0, v__22514); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22501 = 0; \n            v__22523[v_l_id_22499] = id(v__22514); \n          }\n          /* end map_seq */\n          v_l_id_22499 = atomic_inc(&(v_work_idx_1276)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1271; \n        v_work_idx_1271 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_22502 = atomic_inc(&(v_work_idx_1271)); \n        while((v_l_id_22502 < 1)){\n          float v_tmp_22584 = 0.0f; \n          v__9610 = v_tmp_22584; \n          /* reduce_seq */\n          for (int v_i_22503 = 0; v_i_22503 < v_MWidthC_1; v_i_22503 = (1 + v_i_22503)) {\n            v__9610 = add(v__9610, v__22523[(v_i_22503 + (v_MWidthC_1 * v_l_id_22502))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22504 = 0; \n            v__22528[v_w_id_22498] = doubleMultiplyAdd(v__9610, v__22509, v__22508[v_w_id_22498], v__22510); \n          }\n          /* end map_seq */\n          v_l_id_22502 = atomic_inc(&(v_work_idx_1271)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22498 = atomic_inc(v_work_idx_1278); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22505",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22506",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22507",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22508",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22509",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22510",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22512",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22528",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22523",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}