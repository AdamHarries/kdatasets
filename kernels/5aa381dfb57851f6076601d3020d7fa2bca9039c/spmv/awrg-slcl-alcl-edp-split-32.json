{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18457, const global float* restrict v__18458, const global float* restrict v__18459, const global float* restrict v__18460, float v__18461, float v__18462, global float* v__18482, global int* v__18464, local float* v__18477, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18466; \n  float v__18468; \n  float v__9610; \n  /* Private Memory */\n  float v__18470_0;\n  \n  float v__18472_0;\n  \n  int v__18476_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_890 = v__18464; \n    local int v_w_id_18450; \n    if (get_local_id(0) == 0) {\n      v_w_id_18450 = atomic_inc(v_work_idx_890); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18450 < v_MHeight_2)){\n      for (int v_l_id_18451 = get_local_id(0); v_l_id_18451 < v_MWidthC_1; v_l_id_18451 = (v_l_id_18451 + get_local_size(0))) {\n        float v_tmp_18544 = 0.0f; \n        v__18466 = v_tmp_18544; \n        /* reduce_while_seq */\n        for (int v_i_18452 = 0; v_i_18452 < 32; v_i_18452 = (1 + v_i_18452)) {\n          v__18476_0 = check(v__18466, v__18457[(v_l_id_18451 + (32 * v_MWidthC_1 * v_w_id_18450) + (v_MWidthC_1 * v_i_18452))]); \n          if (v__18476_0) {\n          } else {\n            break;\n          }\n          float v_tmp_18545 = 0.0f; \n          v__18468 = v_tmp_18545; \n          int v_index_18546 = v__18457[(v_l_id_18451 + (32 * v_MWidthC_1 * v_w_id_18450) + (v_MWidthC_1 * v_i_18452))]; \n          if (v_index_18546 < 0) {\n            v__18470_0 = v__18468; \n          } else {\n            if (v_index_18546 >= v_VLength_3) {\n              v__18470_0 = v__18468; \n            } else {\n              v__18470_0 = v__18459[v_index_18546]; \n            }\n          }\n          v__18472_0 = mult(v__18470_0, v__18458[(v_l_id_18451 + (32 * v_MWidthC_1 * v_w_id_18450) + (v_MWidthC_1 * v_i_18452))]); \n          v__18466 = add(v__18472_0, v__18466); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18453 = 0; \n          v__18477[v_l_id_18451] = id(v__18466); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_884; \n        v_work_idx_884 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_18454 = atomic_inc(&(v_work_idx_884)); \n        while((v_l_id_18454 < 1)){\n          float v_tmp_18549 = 0.0f; \n          v__9610 = v_tmp_18549; \n          /* reduce_seq */\n          for (int v_i_18455 = 0; v_i_18455 < v_MWidthC_1; v_i_18455 = (1 + v_i_18455)) {\n            v__9610 = add(v__9610, v__18477[(v_i_18455 + (v_MWidthC_1 * v_l_id_18454))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18456 = 0; \n            v__18482[v_w_id_18450] = doubleMultiplyAdd(v__9610, v__18461, v__18460[v_w_id_18450], v__18462); \n          }\n          /* end map_seq */\n          v_l_id_18454 = atomic_inc(&(v_work_idx_884)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18450 = atomic_inc(v_work_idx_890); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__18457",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18458",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18459",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18460",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18461",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18462",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18464",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18477",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}