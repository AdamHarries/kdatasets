{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10019, const global float* restrict v__10020, const global float* restrict v__10021, const global float* restrict v__10022, float v__10023, float v__10024, global float* v__10041, local float* v__10036, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10027; \n  float v__10029; \n  float v__9610; \n  /* Private Memory */\n  float v__10031_0;\n  \n  float v__10033_0;\n  \n  for (int v_wg_id_10012 = get_group_id(0); v_wg_id_10012 < v_MHeight_2; v_wg_id_10012 = (v_wg_id_10012 + get_num_groups(0))) {\n    for (int v_l_id_10013 = get_local_id(0); v_l_id_10013 < v_MWidthC_1; v_l_id_10013 = (v_l_id_10013 + get_local_size(0))) {\n      float v_tmp_10102 = 0.0f; \n      v__10027 = v_tmp_10102; \n      /* reduce_seq */\n      for (int v_i_10014 = 0; v_i_10014 < 8; v_i_10014 = (1 + v_i_10014)) {\n        float v_tmp_10103 = 0.0f; \n        v__10029 = v_tmp_10103; \n        int v_index_10104 = v__10019[(v_l_id_10013 + (8 * v_MWidthC_1 * v_wg_id_10012) + (v_MWidthC_1 * v_i_10014))]; \n        if (v_index_10104 < 0) {\n          v__10031_0 = v__10029; \n        } else {\n          if (v_index_10104 >= v_VLength_3) {\n            v__10031_0 = v__10029; \n          } else {\n            v__10031_0 = v__10021[v_index_10104]; \n          }\n        }\n        v__10033_0 = mult(v__10031_0, v__10020[(v_l_id_10013 + (8 * v_MWidthC_1 * v_wg_id_10012) + (v_MWidthC_1 * v_i_10014))]); \n        v__10027 = add(v__10033_0, v__10027); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10015 = 0; \n        v__10036[v_l_id_10013] = id(v__10027); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_96; \n      v_work_idx_96 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_10016 = atomic_inc(&(v_work_idx_96)); \n      while((v_l_id_10016 < 1)){\n        float v_tmp_10107 = 0.0f; \n        v__9610 = v_tmp_10107; \n        /* reduce_seq */\n        for (int v_i_10017 = 0; v_i_10017 < v_MWidthC_1; v_i_10017 = (1 + v_i_10017)) {\n          v__9610 = add(v__9610, v__10036[(v_i_10017 + (v_MWidthC_1 * v_l_id_10016))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10018 = 0; \n          v__10041[v_wg_id_10012] = doubleMultiplyAdd(v__9610, v__10023, v__10022[v_wg_id_10012], v__10024); \n        }\n        /* end map_seq */\n        v_l_id_10016 = atomic_inc(&(v_work_idx_96)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__10019",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10020",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10021",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10023",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10024",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10036",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}