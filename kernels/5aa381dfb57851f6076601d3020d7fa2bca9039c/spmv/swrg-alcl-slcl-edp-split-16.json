{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13979, const global float* restrict v__13980, const global float* restrict v__13981, const global float* restrict v__13982, float v__13983, float v__13984, global float* v__14003, local float* v__13998, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13987; \n  float v__13989; \n  float v__9610; \n  /* Private Memory */\n  float v__13991_0;\n  \n  float v__13993_0;\n  \n  int v__13997_0;\n  \n  for (int v_wg_id_13972 = get_group_id(0); v_wg_id_13972 < v_MHeight_2; v_wg_id_13972 = (v_wg_id_13972 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_468; \n      v_work_idx_468 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_13973 = atomic_inc(&(v_work_idx_468)); \n      while((v_l_id_13973 < v_MWidthC_1)){\n        float v_tmp_14063 = 0.0f; \n        v__13987 = v_tmp_14063; \n        /* reduce_while_seq */\n        for (int v_i_13974 = 0; v_i_13974 < 16; v_i_13974 = (1 + v_i_13974)) {\n          v__13997_0 = check(v__13987, v__13979[(v_l_id_13973 + (16 * v_MWidthC_1 * v_wg_id_13972) + (v_MWidthC_1 * v_i_13974))]); \n          if (v__13997_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14064 = 0.0f; \n          v__13989 = v_tmp_14064; \n          int v_index_14065 = v__13979[(v_l_id_13973 + (16 * v_MWidthC_1 * v_wg_id_13972) + (v_MWidthC_1 * v_i_13974))]; \n          if (v_index_14065 < 0) {\n            v__13991_0 = v__13989; \n          } else {\n            if (v_index_14065 >= v_VLength_3) {\n              v__13991_0 = v__13989; \n            } else {\n              v__13991_0 = v__13981[v_index_14065]; \n            }\n          }\n          v__13993_0 = mult(v__13991_0, v__13980[(v_l_id_13973 + (16 * v_MWidthC_1 * v_wg_id_13972) + (v_MWidthC_1 * v_i_13974))]); \n          v__13987 = add(v__13993_0, v__13987); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13975 = 0; \n          v__13998[v_l_id_13973] = id(v__13987); \n        }\n        /* end map_seq */\n        v_l_id_13973 = atomic_inc(&(v_work_idx_468)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13976 = get_local_id(0); \n      float v_tmp_14068 = 0.0f; \n      v__9610 = v_tmp_14068; \n      /* reduce_seq */\n      for (int v_i_13977 = 0; v_i_13977 < v_MWidthC_1; v_i_13977 = (1 + v_i_13977)) {\n        v__9610 = add(v__9610, v__13998[(v_i_13977 + (v_MWidthC_1 * v_l_id_13976))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13978 = 0; \n        v__14003[v_wg_id_13972] = doubleMultiplyAdd(v__9610, v__13983, v__13982[v_wg_id_13972], v__13984); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__13979",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13980",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13981",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13982",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13983",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13984",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14003",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13998",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}