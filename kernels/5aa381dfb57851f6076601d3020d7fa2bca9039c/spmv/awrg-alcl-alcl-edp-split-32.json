{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19264, const global float* restrict v__19265, const global float* restrict v__19266, const global float* restrict v__19267, float v__19268, float v__19269, global float* v__19289, global int* v__19271, local float* v__19284, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19273; \n  float v__19275; \n  float v__9610; \n  /* Private Memory */\n  float v__19277_0;\n  \n  float v__19279_0;\n  \n  int v__19283_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_977 = v__19271; \n    local int v_w_id_19257; \n    if (get_local_id(0) == 0) {\n      v_w_id_19257 = atomic_inc(v_work_idx_977); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19257 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_975; \n        v_work_idx_975 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_19258 = atomic_inc(&(v_work_idx_975)); \n        while((v_l_id_19258 < v_MWidthC_1)){\n          float v_tmp_19343 = 0.0f; \n          v__19273 = v_tmp_19343; \n          /* reduce_while_seq */\n          for (int v_i_19259 = 0; v_i_19259 < 32; v_i_19259 = (1 + v_i_19259)) {\n            v__19283_0 = check(v__19273, v__19264[(v_l_id_19258 + (32 * v_MWidthC_1 * v_w_id_19257) + (v_MWidthC_1 * v_i_19259))]); \n            if (v__19283_0) {\n            } else {\n              break;\n            }\n            float v_tmp_19344 = 0.0f; \n            v__19275 = v_tmp_19344; \n            int v_index_19345 = v__19264[(v_l_id_19258 + (32 * v_MWidthC_1 * v_w_id_19257) + (v_MWidthC_1 * v_i_19259))]; \n            if (v_index_19345 < 0) {\n              v__19277_0 = v__19275; \n            } else {\n              if (v_index_19345 >= v_VLength_3) {\n                v__19277_0 = v__19275; \n              } else {\n                v__19277_0 = v__19266[v_index_19345]; \n              }\n            }\n            v__19279_0 = mult(v__19277_0, v__19265[(v_l_id_19258 + (32 * v_MWidthC_1 * v_w_id_19257) + (v_MWidthC_1 * v_i_19259))]); \n            v__19273 = add(v__19279_0, v__19273); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19260 = 0; \n            v__19284[v_l_id_19258] = id(v__19273); \n          }\n          /* end map_seq */\n          v_l_id_19258 = atomic_inc(&(v_work_idx_975)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_970; \n        v_work_idx_970 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_19261 = atomic_inc(&(v_work_idx_970)); \n        while((v_l_id_19261 < 1)){\n          float v_tmp_19348 = 0.0f; \n          v__9610 = v_tmp_19348; \n          /* reduce_seq */\n          for (int v_i_19262 = 0; v_i_19262 < v_MWidthC_1; v_i_19262 = (1 + v_i_19262)) {\n            v__9610 = add(v__9610, v__19284[(v_i_19262 + (v_MWidthC_1 * v_l_id_19261))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19263 = 0; \n            v__19289[v_w_id_19257] = doubleMultiplyAdd(v__9610, v__19268, v__19267[v_w_id_19257], v__19269); \n          }\n          /* end map_seq */\n          v_l_id_19261 = atomic_inc(&(v_work_idx_970)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19257 = atomic_inc(v_work_idx_977); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19264",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19265",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19266",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19268",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19269",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19271",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19289",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19284",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}