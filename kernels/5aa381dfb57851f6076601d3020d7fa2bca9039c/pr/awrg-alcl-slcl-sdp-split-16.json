{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86811, const global float* restrict v__86812, const global float* restrict v__86813, const global float* restrict v__86814, float v__86815, float v__86816, global float* v__86834, global int* v__86818, global float* v__86824, local float* v__86829, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86820; \n  float v__86825; \n  float v__80974; \n  /* Private Memory */\n  float v__86822_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7280 = v__86818; \n    local int v_w_id_86803; \n    if (get_local_id(0) == 0) {\n      v_w_id_86803 = atomic_inc(v_work_idx_7280); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86803 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7278; \n        v_work_idx_7278 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_86804 = atomic_inc(&(v_work_idx_7278)); \n        while((v_l_id_86804 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_86805 = 0; v_i_86805 < 16; v_i_86805 = (1 + v_i_86805)) {\n            float v_tmp_86889 = 0.0f; \n            v__86820 = v_tmp_86889; \n            int v_index_86890 = v__86811[(v_l_id_86804 + (16 * v_MWidthC_1 * v_w_id_86803) + (v_MWidthC_1 * v_i_86805))]; \n            if (v_index_86890 < 0) {\n              v__86822_0 = v__86820; \n            } else {\n              if (v_index_86890 >= v_VLength_3) {\n                v__86822_0 = v__86820; \n              } else {\n                v__86822_0 = v__86813[v_index_86890]; \n              }\n            }\n            v__86824[(v_i_86805 + (16 * v_MWidthC_1 * v_w_id_86803) + (16 * v_l_id_86804))] = mult(v__86822_0, v__86812[(v_l_id_86804 + (16 * v_MWidthC_1 * v_w_id_86803) + (v_MWidthC_1 * v_i_86805))]); \n          }\n          /* end map_seq */\n          float v_tmp_86891 = 0.0f; \n          v__86825 = v_tmp_86891; \n          /* reduce_seq */\n          for (int v_i_86806 = 0; v_i_86806 < 16; v_i_86806 = (1 + v_i_86806)) {\n            v__86825 = add(v__86825, v__86824[(v_i_86806 + (16 * v_MWidthC_1 * v_w_id_86803) + (16 * v_l_id_86804))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86807 = 0; \n            v__86829[v_l_id_86804] = id(v__86825); \n          }\n          /* end map_seq */\n          v_l_id_86804 = atomic_inc(&(v_work_idx_7278)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86808 = get_local_id(0); \n        float v_tmp_86894 = 0.0f; \n        v__80974 = v_tmp_86894; \n        /* reduce_seq */\n        for (int v_i_86809 = 0; v_i_86809 < v_MWidthC_1; v_i_86809 = (1 + v_i_86809)) {\n          v__80974 = add(v__80974, v__86829[(v_i_86809 + (v_MWidthC_1 * v_l_id_86808))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86810 = 0; \n          v__86834[v_w_id_86803] = doubleMultiplyAdd(v__80974, v__86815, v__86814[v_w_id_86803], v__86816); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86803 = atomic_inc(v_work_idx_7280); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86811",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86812",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86813",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86814",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86815",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86816",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86818",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__86824",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__86834",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86829",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}