{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91385, const global float* restrict v__91386, const global float* restrict v__91387, const global float* restrict v__91388, float v__91389, float v__91390, global float* v__91407, local float* v__91402, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91393; \n  float v__91395; \n  float v__80974; \n  /* Private Memory */\n  float v__91397_0;\n  \n  float v__91399_0;\n  \n  for (int v_wg_id_91378 = get_group_id(0); v_wg_id_91378 < v_MHeight_2; v_wg_id_91378 = (v_wg_id_91378 + get_num_groups(0))) {\n    for (int v_l_id_91379 = get_local_id(0); v_l_id_91379 < v_MWidthC_1; v_l_id_91379 = (v_l_id_91379 + get_local_size(0))) {\n      float v_tmp_91468 = 0.0f; \n      v__91393 = v_tmp_91468; \n      /* reduce_seq */\n      for (int v_i_91380 = 0; v_i_91380 < 64; v_i_91380 = (1 + v_i_91380)) {\n        float v_tmp_91469 = 0.0f; \n        v__91395 = v_tmp_91469; \n        int v_index_91470 = v__91385[(v_l_id_91379 + (64 * v_MWidthC_1 * v_wg_id_91378) + (v_MWidthC_1 * v_i_91380))]; \n        if (v_index_91470 < 0) {\n          v__91397_0 = v__91395; \n        } else {\n          if (v_index_91470 >= v_VLength_3) {\n            v__91397_0 = v__91395; \n          } else {\n            v__91397_0 = v__91387[v_index_91470]; \n          }\n        }\n        v__91399_0 = mult(v__91397_0, v__91386[(v_l_id_91379 + (64 * v_MWidthC_1 * v_wg_id_91378) + (v_MWidthC_1 * v_i_91380))]); \n        v__91393 = add(v__91399_0, v__91393); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91381 = 0; \n        v__91402[v_l_id_91379] = id(v__91393); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7701; \n      v_work_idx_7701 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_91382 = atomic_inc(&(v_work_idx_7701)); \n      while((v_l_id_91382 < 1)){\n        float v_tmp_91473 = 0.0f; \n        v__80974 = v_tmp_91473; \n        /* reduce_seq */\n        for (int v_i_91383 = 0; v_i_91383 < v_MWidthC_1; v_i_91383 = (1 + v_i_91383)) {\n          v__80974 = add(v__80974, v__91402[(v_i_91383 + (v_MWidthC_1 * v_l_id_91382))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91384 = 0; \n          v__91407[v_wg_id_91378] = doubleMultiplyAdd(v__80974, v__91389, v__91388[v_wg_id_91378], v__91390); \n        }\n        /* end map_seq */\n        v_l_id_91382 = atomic_inc(&(v_work_idx_7701)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91385",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91386",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91387",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91388",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91389",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91390",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91407",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91402",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}