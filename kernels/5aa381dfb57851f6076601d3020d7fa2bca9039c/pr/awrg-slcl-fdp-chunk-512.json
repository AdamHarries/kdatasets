{
  "name" : "awrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102476, const global float* restrict v__102477, const global float* restrict v__102478, const global float* restrict v__102479, float v__102480, float v__102481, global float* v__102495, global int* v__102483, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102485; \n  float v__102487; \n  /* Private Memory */\n  float v__102489_0;\n  \n  float v__102491_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8742 = v__102483; \n    local int v_w_id_102472; \n    if (get_local_id(0) == 0) {\n      v_w_id_102472 = atomic_inc(v_work_idx_8742); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102472 < v_MHeight_2)){\n      for (int v_l_id_102473 = get_local_id(0); v_l_id_102473 < 512; v_l_id_102473 = (v_l_id_102473 + get_local_size(0))) {\n        float v_tmp_102536 = 0.0f; \n        v__102485 = v_tmp_102536; \n        /* reduce_seq */\n        for (int v_i_102474 = 0; v_i_102474 < v_MWidthC_1; v_i_102474 = (1 + v_i_102474)) {\n          float v_tmp_102537 = 0.0f; \n          v__102487 = v_tmp_102537; \n          int v_index_102538 = v__102476[(v_i_102474 + (512 * v_MWidthC_1 * v_w_id_102472) + (v_MWidthC_1 * v_l_id_102473))]; \n          if (v_index_102538 < 0) {\n            v__102489_0 = v__102487; \n          } else {\n            if (v_index_102538 >= v_VLength_3) {\n              v__102489_0 = v__102487; \n            } else {\n              v__102489_0 = v__102478[v_index_102538]; \n            }\n          }\n          v__102491_0 = mult(v__102489_0, v__102477[(v_i_102474 + (512 * v_MWidthC_1 * v_w_id_102472) + (v_MWidthC_1 * v_l_id_102473))]); \n          v__102485 = add(v__102491_0, v__102485); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102475 = 0; \n          v__102495[(v_l_id_102473 + (512 * v_w_id_102472))] = doubleMultiplyAdd(v__102485, v__102480, v__102479[(v_l_id_102473 + (512 * v_w_id_102472))], v__102481); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_102472 = atomic_inc(v_work_idx_8742); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__102476",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102477",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102478",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102479",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__102480",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102481",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102483",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__102495",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}