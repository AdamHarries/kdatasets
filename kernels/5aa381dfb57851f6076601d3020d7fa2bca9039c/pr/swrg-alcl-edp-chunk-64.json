{
  "name" : "swrg-alcl-edp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91733, const global float* restrict v__91734, const global float* restrict v__91735, const global float* restrict v__91736, float v__91737, float v__91738, global float* v__91753, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91740; \n  float v__91743; \n  /* Private Memory */\n  float v__91745_0;\n  \n  float v__91747_0;\n  \n  int v__91751_0;\n  \n  for (int v_wg_id_91729 = get_group_id(0); v_wg_id_91729 < v_MHeight_2; v_wg_id_91729 = (v_wg_id_91729 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7733; \n      v_work_idx_7733 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_91730 = atomic_inc(&(v_work_idx_7733)); \n      while((v_l_id_91730 < 64)){\n        float v_tmp_91798 = 0.0f; \n        v__91740 = v_tmp_91798; \n        /* reduce_while_seq */\n        for (int v_i_91731 = 0; v_i_91731 < v_MWidthC_1; v_i_91731 = (1 + v_i_91731)) {\n          v__91751_0 = check(v__91740, v__91733[(v_i_91731 + (64 * v_MWidthC_1 * v_wg_id_91729) + (v_MWidthC_1 * v_l_id_91730))]); \n          if (v__91751_0) {\n          } else {\n            break;\n          }\n          float v_tmp_91799 = 0.0f; \n          v__91743 = v_tmp_91799; \n          int v_index_91800 = v__91733[(v_i_91731 + (64 * v_MWidthC_1 * v_wg_id_91729) + (v_MWidthC_1 * v_l_id_91730))]; \n          if (v_index_91800 < 0) {\n            v__91745_0 = v__91743; \n          } else {\n            if (v_index_91800 >= v_VLength_3) {\n              v__91745_0 = v__91743; \n            } else {\n              v__91745_0 = v__91735[v_index_91800]; \n            }\n          }\n          v__91747_0 = mult(v__91745_0, v__91734[(v_i_91731 + (64 * v_MWidthC_1 * v_wg_id_91729) + (v_MWidthC_1 * v_l_id_91730))]); \n          v__91740 = add(v__91747_0, v__91740); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91732 = 0; \n          v__91753[(v_l_id_91730 + (64 * v_wg_id_91729))] = doubleMultiplyAdd(v__91740, v__91737, v__91736[(v_l_id_91730 + (64 * v_wg_id_91729))], v__91738); \n        }\n        /* end map_seq */\n        v_l_id_91730 = atomic_inc(&(v_work_idx_7733)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__91733",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91734",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91735",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91736",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__91737",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91738",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91753",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}