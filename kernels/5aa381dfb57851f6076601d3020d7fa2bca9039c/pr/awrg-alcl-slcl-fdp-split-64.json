{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93576, const global float* restrict v__93577, const global float* restrict v__93578, const global float* restrict v__93579, float v__93580, float v__93581, global float* v__93599, global int* v__93583, local float* v__93594, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93585; \n  float v__93587; \n  float v__80974; \n  /* Private Memory */\n  float v__93589_0;\n  \n  float v__93591_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7914 = v__93583; \n    local int v_w_id_93569; \n    if (get_local_id(0) == 0) {\n      v_w_id_93569 = atomic_inc(v_work_idx_7914); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93569 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7912; \n        v_work_idx_7912 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93570 = atomic_inc(&(v_work_idx_7912)); \n        while((v_l_id_93570 < v_MWidthC_1)){\n          float v_tmp_93654 = 0.0f; \n          v__93585 = v_tmp_93654; \n          /* reduce_seq */\n          for (int v_i_93571 = 0; v_i_93571 < 64; v_i_93571 = (1 + v_i_93571)) {\n            float v_tmp_93655 = 0.0f; \n            v__93587 = v_tmp_93655; \n            int v_index_93656 = v__93576[(v_l_id_93570 + (64 * v_MWidthC_1 * v_w_id_93569) + (v_MWidthC_1 * v_i_93571))]; \n            if (v_index_93656 < 0) {\n              v__93589_0 = v__93587; \n            } else {\n              if (v_index_93656 >= v_VLength_3) {\n                v__93589_0 = v__93587; \n              } else {\n                v__93589_0 = v__93578[v_index_93656]; \n              }\n            }\n            v__93591_0 = mult(v__93589_0, v__93577[(v_l_id_93570 + (64 * v_MWidthC_1 * v_w_id_93569) + (v_MWidthC_1 * v_i_93571))]); \n            v__93585 = add(v__93591_0, v__93585); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93572 = 0; \n            v__93594[v_l_id_93570] = id(v__93585); \n          }\n          /* end map_seq */\n          v_l_id_93570 = atomic_inc(&(v_work_idx_7912)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93573 = get_local_id(0); \n        float v_tmp_93659 = 0.0f; \n        v__80974 = v_tmp_93659; \n        /* reduce_seq */\n        for (int v_i_93574 = 0; v_i_93574 < v_MWidthC_1; v_i_93574 = (1 + v_i_93574)) {\n          v__80974 = add(v__80974, v__93594[(v_i_93574 + (v_MWidthC_1 * v_l_id_93573))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93575 = 0; \n          v__93599[v_w_id_93569] = doubleMultiplyAdd(v__80974, v__93580, v__93579[v_w_id_93569], v__93581); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93569 = atomic_inc(v_work_idx_7914); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93576",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93577",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93578",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93580",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93581",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93583",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93599",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93594",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}