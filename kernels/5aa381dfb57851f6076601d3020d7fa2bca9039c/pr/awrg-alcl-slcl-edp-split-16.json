{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__87005, const global float* restrict v__87006, const global float* restrict v__87007, const global float* restrict v__87008, float v__87009, float v__87010, global float* v__87030, global int* v__87012, local float* v__87025, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87014; \n  float v__87016; \n  float v__80974; \n  /* Private Memory */\n  float v__87018_0;\n  \n  float v__87020_0;\n  \n  int v__87024_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7300 = v__87012; \n    local int v_w_id_86998; \n    if (get_local_id(0) == 0) {\n      v_w_id_86998 = atomic_inc(v_work_idx_7300); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86998 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7298; \n        v_work_idx_7298 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_86999 = atomic_inc(&(v_work_idx_7298)); \n        while((v_l_id_86999 < v_MWidthC_1)){\n          float v_tmp_87088 = 0.0f; \n          v__87014 = v_tmp_87088; \n          /* reduce_while_seq */\n          for (int v_i_87000 = 0; v_i_87000 < 16; v_i_87000 = (1 + v_i_87000)) {\n            v__87024_0 = check(v__87014, v__87005[(v_l_id_86999 + (16 * v_MWidthC_1 * v_w_id_86998) + (v_MWidthC_1 * v_i_87000))]); \n            if (v__87024_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87089 = 0.0f; \n            v__87016 = v_tmp_87089; \n            int v_index_87090 = v__87005[(v_l_id_86999 + (16 * v_MWidthC_1 * v_w_id_86998) + (v_MWidthC_1 * v_i_87000))]; \n            if (v_index_87090 < 0) {\n              v__87018_0 = v__87016; \n            } else {\n              if (v_index_87090 >= v_VLength_3) {\n                v__87018_0 = v__87016; \n              } else {\n                v__87018_0 = v__87007[v_index_87090]; \n              }\n            }\n            v__87020_0 = mult(v__87018_0, v__87006[(v_l_id_86999 + (16 * v_MWidthC_1 * v_w_id_86998) + (v_MWidthC_1 * v_i_87000))]); \n            v__87014 = add(v__87020_0, v__87014); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87001 = 0; \n            v__87025[v_l_id_86999] = id(v__87014); \n          }\n          /* end map_seq */\n          v_l_id_86999 = atomic_inc(&(v_work_idx_7298)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_87002 = get_local_id(0); \n        float v_tmp_87093 = 0.0f; \n        v__80974 = v_tmp_87093; \n        /* reduce_seq */\n        for (int v_i_87003 = 0; v_i_87003 < v_MWidthC_1; v_i_87003 = (1 + v_i_87003)) {\n          v__80974 = add(v__80974, v__87025[(v_i_87003 + (v_MWidthC_1 * v_l_id_87002))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_87004 = 0; \n          v__87030[v_w_id_86998] = doubleMultiplyAdd(v__80974, v__87009, v__87008[v_w_id_86998], v__87010); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86998 = atomic_inc(v_work_idx_7300); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87005",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87006",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87007",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87008",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87009",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87010",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87012",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87030",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87025",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}