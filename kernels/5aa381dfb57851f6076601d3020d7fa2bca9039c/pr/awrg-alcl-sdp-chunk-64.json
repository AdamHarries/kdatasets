{
  "name" : "awrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93259, const global float* restrict v__93260, const global float* restrict v__93261, const global float* restrict v__93262, float v__93263, float v__93264, global float* v__93278, global int* v__93266, global float* v__93272, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93268; \n  float v__93273; \n  /* Private Memory */\n  float v__93270_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7879 = v__93266; \n    local int v_w_id_93254; \n    if (get_local_id(0) == 0) {\n      v_w_id_93254 = atomic_inc(v_work_idx_7879); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93254 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7877; \n        v_work_idx_7877 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93255 = atomic_inc(&(v_work_idx_7877)); \n        while((v_l_id_93255 < 64)){\n          /* map_seq */\n          for (int v_i_93256 = 0; v_i_93256 < v_MWidthC_1; v_i_93256 = (1 + v_i_93256)) {\n            float v_tmp_93316 = 0.0f; \n            v__93268 = v_tmp_93316; \n            int v_index_93317 = v__93259[(v_i_93256 + (64 * v_MWidthC_1 * v_w_id_93254) + (v_MWidthC_1 * v_l_id_93255))]; \n            if (v_index_93317 < 0) {\n              v__93270_0 = v__93268; \n            } else {\n              if (v_index_93317 >= v_VLength_3) {\n                v__93270_0 = v__93268; \n              } else {\n                v__93270_0 = v__93261[v_index_93317]; \n              }\n            }\n            v__93272[(v_i_93256 + (64 * v_MWidthC_1 * v_w_id_93254) + (v_MWidthC_1 * v_l_id_93255))] = mult(v__93270_0, v__93260[(v_i_93256 + (64 * v_MWidthC_1 * v_w_id_93254) + (v_MWidthC_1 * v_l_id_93255))]); \n          }\n          /* end map_seq */\n          float v_tmp_93318 = 0.0f; \n          v__93273 = v_tmp_93318; \n          /* reduce_seq */\n          for (int v_i_93257 = 0; v_i_93257 < v_MWidthC_1; v_i_93257 = (1 + v_i_93257)) {\n            v__93273 = add(v__93273, v__93272[(v_i_93257 + (64 * v_MWidthC_1 * v_w_id_93254) + (v_MWidthC_1 * v_l_id_93255))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93258 = 0; \n            v__93278[(v_l_id_93255 + (64 * v_w_id_93254))] = doubleMultiplyAdd(v__93273, v__93263, v__93262[(v_l_id_93255 + (64 * v_w_id_93254))], v__93264); \n          }\n          /* end map_seq */\n          v_l_id_93255 = atomic_inc(&(v_work_idx_7877)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93254 = atomic_inc(v_work_idx_7879); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93259",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93260",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93261",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93262",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__93263",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93264",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93266",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__93272",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__93278",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}