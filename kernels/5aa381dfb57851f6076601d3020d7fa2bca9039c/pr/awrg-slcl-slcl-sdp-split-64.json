{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92632, const global float* restrict v__92633, const global float* restrict v__92634, const global float* restrict v__92635, float v__92636, float v__92637, global float* v__92655, global int* v__92639, global float* v__92645, local float* v__92650, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92641; \n  float v__92646; \n  float v__80974; \n  /* Private Memory */\n  float v__92643_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7822 = v__92639; \n    local int v_w_id_92624; \n    if (get_local_id(0) == 0) {\n      v_w_id_92624 = atomic_inc(v_work_idx_7822); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92624 < v_MHeight_2)){\n      for (int v_l_id_92625 = get_local_id(0); v_l_id_92625 < v_MWidthC_1; v_l_id_92625 = (v_l_id_92625 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_92626 = 0; v_i_92626 < 64; v_i_92626 = (1 + v_i_92626)) {\n          float v_tmp_92718 = 0.0f; \n          v__92641 = v_tmp_92718; \n          int v_index_92719 = v__92632[(v_l_id_92625 + (64 * v_MWidthC_1 * v_w_id_92624) + (v_MWidthC_1 * v_i_92626))]; \n          if (v_index_92719 < 0) {\n            v__92643_0 = v__92641; \n          } else {\n            if (v_index_92719 >= v_VLength_3) {\n              v__92643_0 = v__92641; \n            } else {\n              v__92643_0 = v__92634[v_index_92719]; \n            }\n          }\n          v__92645[(v_i_92626 + (64 * v_MWidthC_1 * v_w_id_92624) + (64 * v_l_id_92625))] = mult(v__92643_0, v__92633[(v_l_id_92625 + (64 * v_MWidthC_1 * v_w_id_92624) + (v_MWidthC_1 * v_i_92626))]); \n        }\n        /* end map_seq */\n        float v_tmp_92720 = 0.0f; \n        v__92646 = v_tmp_92720; \n        /* reduce_seq */\n        for (int v_i_92627 = 0; v_i_92627 < 64; v_i_92627 = (1 + v_i_92627)) {\n          v__92646 = add(v__92646, v__92645[(v_i_92627 + (64 * v_MWidthC_1 * v_w_id_92624) + (64 * v_l_id_92625))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92628 = 0; \n          v__92650[v_l_id_92625] = id(v__92646); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_92629 = get_local_id(0); \n        float v_tmp_92723 = 0.0f; \n        v__80974 = v_tmp_92723; \n        /* reduce_seq */\n        for (int v_i_92630 = 0; v_i_92630 < v_MWidthC_1; v_i_92630 = (1 + v_i_92630)) {\n          v__80974 = add(v__80974, v__92650[(v_i_92630 + (v_MWidthC_1 * v_l_id_92629))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92631 = 0; \n          v__92655[v_w_id_92624] = doubleMultiplyAdd(v__80974, v__92636, v__92635[v_w_id_92624], v__92637); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_92624 = atomic_inc(v_work_idx_7822); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92632",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92633",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92634",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92635",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92636",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92637",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92639",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__92645",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92650",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}