{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97110, const global float* restrict v__97111, const global float* restrict v__97112, const global float* restrict v__97113, float v__97114, float v__97115, global float* v__97133, global int* v__97117, global float* v__97123, local float* v__97128, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97119; \n  float v__97124; \n  float v__80974; \n  /* Private Memory */\n  float v__97121_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8248 = v__97117; \n    local int v_w_id_97102; \n    if (get_local_id(0) == 0) {\n      v_w_id_97102 = atomic_inc(v_work_idx_8248); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97102 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8246; \n        v_work_idx_8246 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97103 = atomic_inc(&(v_work_idx_8246)); \n        while((v_l_id_97103 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_97104 = 0; v_i_97104 < 128; v_i_97104 = (1 + v_i_97104)) {\n            float v_tmp_97184 = 0.0f; \n            v__97119 = v_tmp_97184; \n            int v_index_97185 = v__97110[(v_l_id_97103 + (128 * v_MWidthC_1 * v_w_id_97102) + (v_MWidthC_1 * v_i_97104))]; \n            if (v_index_97185 < 0) {\n              v__97121_0 = v__97119; \n            } else {\n              if (v_index_97185 >= v_VLength_3) {\n                v__97121_0 = v__97119; \n              } else {\n                v__97121_0 = v__97112[v_index_97185]; \n              }\n            }\n            v__97123[(v_i_97104 + (128 * v_MWidthC_1 * v_w_id_97102) + (128 * v_l_id_97103))] = mult(v__97121_0, v__97111[(v_l_id_97103 + (128 * v_MWidthC_1 * v_w_id_97102) + (v_MWidthC_1 * v_i_97104))]); \n          }\n          /* end map_seq */\n          float v_tmp_97186 = 0.0f; \n          v__97124 = v_tmp_97186; \n          /* reduce_seq */\n          for (int v_i_97105 = 0; v_i_97105 < 128; v_i_97105 = (1 + v_i_97105)) {\n            v__97124 = add(v__97124, v__97123[(v_i_97105 + (128 * v_MWidthC_1 * v_w_id_97102) + (128 * v_l_id_97103))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97106 = 0; \n            v__97128[v_l_id_97103] = id(v__97124); \n          }\n          /* end map_seq */\n          v_l_id_97103 = atomic_inc(&(v_work_idx_8246)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8240; \n        v_work_idx_8240 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97107 = atomic_inc(&(v_work_idx_8240)); \n        while((v_l_id_97107 < 1)){\n          float v_tmp_97189 = 0.0f; \n          v__80974 = v_tmp_97189; \n          /* reduce_seq */\n          for (int v_i_97108 = 0; v_i_97108 < v_MWidthC_1; v_i_97108 = (1 + v_i_97108)) {\n            v__80974 = add(v__80974, v__97128[(v_i_97108 + (v_MWidthC_1 * v_l_id_97107))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97109 = 0; \n            v__97133[v_w_id_97102] = doubleMultiplyAdd(v__80974, v__97114, v__97113[v_w_id_97102], v__97115); \n          }\n          /* end map_seq */\n          v_l_id_97107 = atomic_inc(&(v_work_idx_8240)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97102 = atomic_inc(v_work_idx_8248); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97110",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97111",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97112",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97114",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97115",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97117",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__97123",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__97133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97128",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}