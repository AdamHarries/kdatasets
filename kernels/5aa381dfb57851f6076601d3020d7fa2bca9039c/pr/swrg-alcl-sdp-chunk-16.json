{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84924, const global float* restrict v__84925, const global float* restrict v__84926, const global float* restrict v__84927, float v__84928, float v__84929, global float* v__84942, global float* v__84936, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84932; \n  float v__84937; \n  /* Private Memory */\n  float v__84934_0;\n  \n  for (int v_wg_id_84919 = get_group_id(0); v_wg_id_84919 < v_MHeight_2; v_wg_id_84919 = (v_wg_id_84919 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7097; \n      v_work_idx_7097 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_84920 = atomic_inc(&(v_work_idx_7097)); \n      while((v_l_id_84920 < 16)){\n        /* map_seq */\n        for (int v_i_84921 = 0; v_i_84921 < v_MWidthC_1; v_i_84921 = (1 + v_i_84921)) {\n          float v_tmp_84982 = 0.0f; \n          v__84932 = v_tmp_84982; \n          int v_index_84983 = v__84924[(v_i_84921 + (16 * v_MWidthC_1 * v_wg_id_84919) + (v_MWidthC_1 * v_l_id_84920))]; \n          if (v_index_84983 < 0) {\n            v__84934_0 = v__84932; \n          } else {\n            if (v_index_84983 >= v_VLength_3) {\n              v__84934_0 = v__84932; \n            } else {\n              v__84934_0 = v__84926[v_index_84983]; \n            }\n          }\n          v__84936[(v_i_84921 + (16 * v_MWidthC_1 * v_wg_id_84919) + (v_MWidthC_1 * v_l_id_84920))] = mult(v__84934_0, v__84925[(v_i_84921 + (16 * v_MWidthC_1 * v_wg_id_84919) + (v_MWidthC_1 * v_l_id_84920))]); \n        }\n        /* end map_seq */\n        float v_tmp_84984 = 0.0f; \n        v__84937 = v_tmp_84984; \n        /* reduce_seq */\n        for (int v_i_84922 = 0; v_i_84922 < v_MWidthC_1; v_i_84922 = (1 + v_i_84922)) {\n          v__84937 = add(v__84937, v__84936[(v_i_84922 + (16 * v_MWidthC_1 * v_wg_id_84919) + (v_MWidthC_1 * v_l_id_84920))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84923 = 0; \n          v__84942[(v_l_id_84920 + (16 * v_wg_id_84919))] = doubleMultiplyAdd(v__84937, v__84928, v__84927[(v_l_id_84920 + (16 * v_wg_id_84919))], v__84929); \n        }\n        /* end map_seq */\n        v_l_id_84920 = atomic_inc(&(v_work_idx_7097)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84924",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84925",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84926",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84927",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__84928",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84929",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84936",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84942",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}