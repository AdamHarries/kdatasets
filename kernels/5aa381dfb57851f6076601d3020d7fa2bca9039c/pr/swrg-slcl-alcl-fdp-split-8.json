{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81383, const global float* restrict v__81384, const global float* restrict v__81385, const global float* restrict v__81386, float v__81387, float v__81388, global float* v__81405, local float* v__81400, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81391; \n  float v__81393; \n  float v__80974; \n  /* Private Memory */\n  float v__81395_0;\n  \n  float v__81397_0;\n  \n  for (int v_wg_id_81376 = get_group_id(0); v_wg_id_81376 < v_MHeight_2; v_wg_id_81376 = (v_wg_id_81376 + get_num_groups(0))) {\n    for (int v_l_id_81377 = get_local_id(0); v_l_id_81377 < v_MWidthC_1; v_l_id_81377 = (v_l_id_81377 + get_local_size(0))) {\n      float v_tmp_81466 = 0.0f; \n      v__81391 = v_tmp_81466; \n      /* reduce_seq */\n      for (int v_i_81378 = 0; v_i_81378 < 8; v_i_81378 = (1 + v_i_81378)) {\n        float v_tmp_81467 = 0.0f; \n        v__81393 = v_tmp_81467; \n        int v_index_81468 = v__81383[(v_l_id_81377 + (8 * v_MWidthC_1 * v_wg_id_81376) + (v_MWidthC_1 * v_i_81378))]; \n        if (v_index_81468 < 0) {\n          v__81395_0 = v__81393; \n        } else {\n          if (v_index_81468 >= v_VLength_3) {\n            v__81395_0 = v__81393; \n          } else {\n            v__81395_0 = v__81385[v_index_81468]; \n          }\n        }\n        v__81397_0 = mult(v__81395_0, v__81384[(v_l_id_81377 + (8 * v_MWidthC_1 * v_wg_id_81376) + (v_MWidthC_1 * v_i_81378))]); \n        v__81391 = add(v__81397_0, v__81391); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81379 = 0; \n        v__81400[v_l_id_81377] = id(v__81391); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6765; \n      v_work_idx_6765 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_81380 = atomic_inc(&(v_work_idx_6765)); \n      while((v_l_id_81380 < 1)){\n        float v_tmp_81471 = 0.0f; \n        v__80974 = v_tmp_81471; \n        /* reduce_seq */\n        for (int v_i_81381 = 0; v_i_81381 < v_MWidthC_1; v_i_81381 = (1 + v_i_81381)) {\n          v__80974 = add(v__80974, v__81400[(v_i_81381 + (v_MWidthC_1 * v_l_id_81380))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81382 = 0; \n          v__81405[v_wg_id_81376] = doubleMultiplyAdd(v__80974, v__81387, v__81386[v_wg_id_81376], v__81388); \n        }\n        /* end map_seq */\n        v_l_id_81380 = atomic_inc(&(v_work_idx_6765)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__81383",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81384",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81385",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81386",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81387",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81388",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81400",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}