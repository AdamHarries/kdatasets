{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82301, const global float* restrict v__82302, const global float* restrict v__82303, const global float* restrict v__82304, float v__82305, float v__82306, global float* v__82325, local float* v__82320, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82309; \n  float v__82311; \n  float v__80974; \n  /* Private Memory */\n  float v__82313_0;\n  \n  float v__82315_0;\n  \n  int v__82319_0;\n  \n  for (int v_wg_id_82294 = get_group_id(0); v_wg_id_82294 < v_MHeight_2; v_wg_id_82294 = (v_wg_id_82294 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6856; \n      v_work_idx_6856 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_82295 = atomic_inc(&(v_work_idx_6856)); \n      while((v_l_id_82295 < v_MWidthC_1)){\n        float v_tmp_82381 = 0.0f; \n        v__82309 = v_tmp_82381; \n        /* reduce_while_seq */\n        for (int v_i_82296 = 0; v_i_82296 < 8; v_i_82296 = (1 + v_i_82296)) {\n          v__82319_0 = check(v__82309, v__82301[(v_l_id_82295 + (8 * v_MWidthC_1 * v_wg_id_82294) + (v_MWidthC_1 * v_i_82296))]); \n          if (v__82319_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82382 = 0.0f; \n          v__82311 = v_tmp_82382; \n          int v_index_82383 = v__82301[(v_l_id_82295 + (8 * v_MWidthC_1 * v_wg_id_82294) + (v_MWidthC_1 * v_i_82296))]; \n          if (v_index_82383 < 0) {\n            v__82313_0 = v__82311; \n          } else {\n            if (v_index_82383 >= v_VLength_3) {\n              v__82313_0 = v__82311; \n            } else {\n              v__82313_0 = v__82303[v_index_82383]; \n            }\n          }\n          v__82315_0 = mult(v__82313_0, v__82302[(v_l_id_82295 + (8 * v_MWidthC_1 * v_wg_id_82294) + (v_MWidthC_1 * v_i_82296))]); \n          v__82309 = add(v__82315_0, v__82309); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82297 = 0; \n          v__82320[v_l_id_82295] = id(v__82309); \n        }\n        /* end map_seq */\n        v_l_id_82295 = atomic_inc(&(v_work_idx_6856)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6851; \n      v_work_idx_6851 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_82298 = atomic_inc(&(v_work_idx_6851)); \n      while((v_l_id_82298 < 1)){\n        float v_tmp_82386 = 0.0f; \n        v__80974 = v_tmp_82386; \n        /* reduce_seq */\n        for (int v_i_82299 = 0; v_i_82299 < v_MWidthC_1; v_i_82299 = (1 + v_i_82299)) {\n          v__80974 = add(v__80974, v__82320[(v_i_82299 + (v_MWidthC_1 * v_l_id_82298))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82300 = 0; \n          v__82325[v_wg_id_82294] = doubleMultiplyAdd(v__80974, v__82305, v__82304[v_wg_id_82294], v__82306); \n        }\n        /* end map_seq */\n        v_l_id_82298 = atomic_inc(&(v_work_idx_6851)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82301",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82302",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82303",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82304",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82305",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82306",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82320",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}