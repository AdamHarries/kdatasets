{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100244, const global float* restrict v__100245, const global float* restrict v__100246, const global float* restrict v__100247, float v__100248, float v__100249, global float* v__100267, global int* v__100251, local float* v__100262, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100253; \n  float v__100255; \n  float v__80974; \n  /* Private Memory */\n  float v__100257_0;\n  \n  float v__100259_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8538 = v__100251; \n    local int v_w_id_100237; \n    if (get_local_id(0) == 0) {\n      v_w_id_100237 = atomic_inc(v_work_idx_8538); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100237 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8536; \n        v_work_idx_8536 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_100238 = atomic_inc(&(v_work_idx_8536)); \n        while((v_l_id_100238 < v_MWidthC_1)){\n          float v_tmp_100322 = 0.0f; \n          v__100253 = v_tmp_100322; \n          /* reduce_seq */\n          for (int v_i_100239 = 0; v_i_100239 < 256; v_i_100239 = (1 + v_i_100239)) {\n            float v_tmp_100323 = 0.0f; \n            v__100255 = v_tmp_100323; \n            int v_index_100324 = v__100244[(v_l_id_100238 + (256 * v_MWidthC_1 * v_w_id_100237) + (v_MWidthC_1 * v_i_100239))]; \n            if (v_index_100324 < 0) {\n              v__100257_0 = v__100255; \n            } else {\n              if (v_index_100324 >= v_VLength_3) {\n                v__100257_0 = v__100255; \n              } else {\n                v__100257_0 = v__100246[v_index_100324]; \n              }\n            }\n            v__100259_0 = mult(v__100257_0, v__100245[(v_l_id_100238 + (256 * v_MWidthC_1 * v_w_id_100237) + (v_MWidthC_1 * v_i_100239))]); \n            v__100253 = add(v__100259_0, v__100253); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100240 = 0; \n            v__100262[v_l_id_100238] = id(v__100253); \n          }\n          /* end map_seq */\n          v_l_id_100238 = atomic_inc(&(v_work_idx_8536)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100241 = get_local_id(0); \n        float v_tmp_100327 = 0.0f; \n        v__80974 = v_tmp_100327; \n        /* reduce_seq */\n        for (int v_i_100242 = 0; v_i_100242 < v_MWidthC_1; v_i_100242 = (1 + v_i_100242)) {\n          v__80974 = add(v__80974, v__100262[(v_i_100242 + (v_MWidthC_1 * v_l_id_100241))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100243 = 0; \n          v__100267[v_w_id_100237] = doubleMultiplyAdd(v__80974, v__100248, v__100247[v_w_id_100237], v__100249); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100237 = atomic_inc(v_work_idx_8538); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100244",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100245",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100246",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100248",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100249",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100251",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100262",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}