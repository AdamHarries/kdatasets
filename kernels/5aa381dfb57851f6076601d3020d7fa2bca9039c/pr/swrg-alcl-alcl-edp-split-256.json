{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__98971, const global float* restrict v__98972, const global float* restrict v__98973, const global float* restrict v__98974, float v__98975, float v__98976, global float* v__98995, local float* v__98990, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98979; \n  float v__98981; \n  float v__80974; \n  /* Private Memory */\n  float v__98983_0;\n  \n  float v__98985_0;\n  \n  int v__98989_0;\n  \n  for (int v_wg_id_98964 = get_group_id(0); v_wg_id_98964 < v_MHeight_2; v_wg_id_98964 = (v_wg_id_98964 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8416; \n      v_work_idx_8416 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98965 = atomic_inc(&(v_work_idx_8416)); \n      while((v_l_id_98965 < v_MWidthC_1)){\n        float v_tmp_99051 = 0.0f; \n        v__98979 = v_tmp_99051; \n        /* reduce_while_seq */\n        for (int v_i_98966 = 0; v_i_98966 < 256; v_i_98966 = (1 + v_i_98966)) {\n          v__98989_0 = check(v__98979, v__98971[(v_l_id_98965 + (256 * v_MWidthC_1 * v_wg_id_98964) + (v_MWidthC_1 * v_i_98966))]); \n          if (v__98989_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99052 = 0.0f; \n          v__98981 = v_tmp_99052; \n          int v_index_99053 = v__98971[(v_l_id_98965 + (256 * v_MWidthC_1 * v_wg_id_98964) + (v_MWidthC_1 * v_i_98966))]; \n          if (v_index_99053 < 0) {\n            v__98983_0 = v__98981; \n          } else {\n            if (v_index_99053 >= v_VLength_3) {\n              v__98983_0 = v__98981; \n            } else {\n              v__98983_0 = v__98973[v_index_99053]; \n            }\n          }\n          v__98985_0 = mult(v__98983_0, v__98972[(v_l_id_98965 + (256 * v_MWidthC_1 * v_wg_id_98964) + (v_MWidthC_1 * v_i_98966))]); \n          v__98979 = add(v__98985_0, v__98979); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98967 = 0; \n          v__98990[v_l_id_98965] = id(v__98979); \n        }\n        /* end map_seq */\n        v_l_id_98965 = atomic_inc(&(v_work_idx_8416)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8411; \n      v_work_idx_8411 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98968 = atomic_inc(&(v_work_idx_8411)); \n      while((v_l_id_98968 < 1)){\n        float v_tmp_99056 = 0.0f; \n        v__80974 = v_tmp_99056; \n        /* reduce_seq */\n        for (int v_i_98969 = 0; v_i_98969 < v_MWidthC_1; v_i_98969 = (1 + v_i_98969)) {\n          v__80974 = add(v__80974, v__98990[(v_i_98969 + (v_MWidthC_1 * v_l_id_98968))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98970 = 0; \n          v__98995[v_wg_id_98964] = doubleMultiplyAdd(v__80974, v__98975, v__98974[v_wg_id_98964], v__98976); \n        }\n        /* end map_seq */\n        v_l_id_98968 = atomic_inc(&(v_work_idx_8411)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98971",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98972",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98973",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98975",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98976",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98995",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98990",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}