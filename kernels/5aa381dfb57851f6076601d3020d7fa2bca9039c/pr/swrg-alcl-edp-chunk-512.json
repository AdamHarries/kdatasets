{
  "name" : "swrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101735, const global float* restrict v__101736, const global float* restrict v__101737, const global float* restrict v__101738, float v__101739, float v__101740, global float* v__101755, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101742; \n  float v__101745; \n  /* Private Memory */\n  float v__101747_0;\n  \n  float v__101749_0;\n  \n  int v__101753_0;\n  \n  for (int v_wg_id_101731 = get_group_id(0); v_wg_id_101731 < v_MHeight_2; v_wg_id_101731 = (v_wg_id_101731 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8669; \n      v_work_idx_8669 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_101732 = atomic_inc(&(v_work_idx_8669)); \n      while((v_l_id_101732 < 512)){\n        float v_tmp_101800 = 0.0f; \n        v__101742 = v_tmp_101800; \n        /* reduce_while_seq */\n        for (int v_i_101733 = 0; v_i_101733 < v_MWidthC_1; v_i_101733 = (1 + v_i_101733)) {\n          v__101753_0 = check(v__101742, v__101735[(v_i_101733 + (512 * v_MWidthC_1 * v_wg_id_101731) + (v_MWidthC_1 * v_l_id_101732))]); \n          if (v__101753_0) {\n          } else {\n            break;\n          }\n          float v_tmp_101801 = 0.0f; \n          v__101745 = v_tmp_101801; \n          int v_index_101802 = v__101735[(v_i_101733 + (512 * v_MWidthC_1 * v_wg_id_101731) + (v_MWidthC_1 * v_l_id_101732))]; \n          if (v_index_101802 < 0) {\n            v__101747_0 = v__101745; \n          } else {\n            if (v_index_101802 >= v_VLength_3) {\n              v__101747_0 = v__101745; \n            } else {\n              v__101747_0 = v__101737[v_index_101802]; \n            }\n          }\n          v__101749_0 = mult(v__101747_0, v__101736[(v_i_101733 + (512 * v_MWidthC_1 * v_wg_id_101731) + (v_MWidthC_1 * v_l_id_101732))]); \n          v__101742 = add(v__101749_0, v__101742); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101734 = 0; \n          v__101755[(v_l_id_101732 + (512 * v_wg_id_101731))] = doubleMultiplyAdd(v__101742, v__101739, v__101738[(v_l_id_101732 + (512 * v_wg_id_101731))], v__101740); \n        }\n        /* end map_seq */\n        v_l_id_101732 = atomic_inc(&(v_work_idx_8669)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__101735",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101736",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101737",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101738",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__101739",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101740",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101755",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}