{
  "name" : "awrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__100341, const global float* restrict v__100342, const global float* restrict v__100343, const global float* restrict v__100344, float v__100345, float v__100346, global float* v__100366, global int* v__100348, local float* v__100361, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100350; \n  float v__100352; \n  float v__80974; \n  /* Private Memory */\n  float v__100354_0;\n  \n  float v__100356_0;\n  \n  int v__100360_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8548 = v__100348; \n    local int v_w_id_100334; \n    if (get_local_id(0) == 0) {\n      v_w_id_100334 = atomic_inc(v_work_idx_8548); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100334 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8546; \n        v_work_idx_8546 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_100335 = atomic_inc(&(v_work_idx_8546)); \n        while((v_l_id_100335 < v_MWidthC_1)){\n          float v_tmp_100424 = 0.0f; \n          v__100350 = v_tmp_100424; \n          /* reduce_while_seq */\n          for (int v_i_100336 = 0; v_i_100336 < 256; v_i_100336 = (1 + v_i_100336)) {\n            v__100360_0 = check(v__100350, v__100341[(v_l_id_100335 + (256 * v_MWidthC_1 * v_w_id_100334) + (v_MWidthC_1 * v_i_100336))]); \n            if (v__100360_0) {\n            } else {\n              break;\n            }\n            float v_tmp_100425 = 0.0f; \n            v__100352 = v_tmp_100425; \n            int v_index_100426 = v__100341[(v_l_id_100335 + (256 * v_MWidthC_1 * v_w_id_100334) + (v_MWidthC_1 * v_i_100336))]; \n            if (v_index_100426 < 0) {\n              v__100354_0 = v__100352; \n            } else {\n              if (v_index_100426 >= v_VLength_3) {\n                v__100354_0 = v__100352; \n              } else {\n                v__100354_0 = v__100343[v_index_100426]; \n              }\n            }\n            v__100356_0 = mult(v__100354_0, v__100342[(v_l_id_100335 + (256 * v_MWidthC_1 * v_w_id_100334) + (v_MWidthC_1 * v_i_100336))]); \n            v__100350 = add(v__100356_0, v__100350); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100337 = 0; \n            v__100361[v_l_id_100335] = id(v__100350); \n          }\n          /* end map_seq */\n          v_l_id_100335 = atomic_inc(&(v_work_idx_8546)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100338 = get_local_id(0); \n        float v_tmp_100429 = 0.0f; \n        v__80974 = v_tmp_100429; \n        /* reduce_seq */\n        for (int v_i_100339 = 0; v_i_100339 < v_MWidthC_1; v_i_100339 = (1 + v_i_100339)) {\n          v__80974 = add(v__80974, v__100361[(v_i_100339 + (v_MWidthC_1 * v_l_id_100338))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100340 = 0; \n          v__100366[v_w_id_100334] = doubleMultiplyAdd(v__80974, v__100345, v__100344[v_w_id_100334], v__100346); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100334 = atomic_inc(v_work_idx_8548); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100341",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100342",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100343",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100345",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100346",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100348",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100366",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100361",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}