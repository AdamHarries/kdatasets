{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94997, const global float* restrict v__94998, const global float* restrict v__94999, const global float* restrict v__95000, float v__95001, float v__95002, global float* v__95015, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95005; \n  float v__95007; \n  /* Private Memory */\n  float v__95009_0;\n  \n  float v__95011_0;\n  \n  for (int v_wg_id_94993 = get_group_id(0); v_wg_id_94993 < v_MHeight_2; v_wg_id_94993 = (v_wg_id_94993 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8039; \n      v_work_idx_8039 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_94994 = atomic_inc(&(v_work_idx_8039)); \n      while((v_l_id_94994 < 128)){\n        float v_tmp_95054 = 0.0f; \n        v__95005 = v_tmp_95054; \n        /* reduce_seq */\n        for (int v_i_94995 = 0; v_i_94995 < v_MWidthC_1; v_i_94995 = (1 + v_i_94995)) {\n          float v_tmp_95055 = 0.0f; \n          v__95007 = v_tmp_95055; \n          int v_index_95056 = v__94997[(v_i_94995 + (128 * v_MWidthC_1 * v_wg_id_94993) + (v_MWidthC_1 * v_l_id_94994))]; \n          if (v_index_95056 < 0) {\n            v__95009_0 = v__95007; \n          } else {\n            if (v_index_95056 >= v_VLength_3) {\n              v__95009_0 = v__95007; \n            } else {\n              v__95009_0 = v__94999[v_index_95056]; \n            }\n          }\n          v__95011_0 = mult(v__95009_0, v__94998[(v_i_94995 + (128 * v_MWidthC_1 * v_wg_id_94993) + (v_MWidthC_1 * v_l_id_94994))]); \n          v__95005 = add(v__95011_0, v__95005); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94996 = 0; \n          v__95015[(v_l_id_94994 + (128 * v_wg_id_94993))] = doubleMultiplyAdd(v__95005, v__95001, v__95000[(v_l_id_94994 + (128 * v_wg_id_94993))], v__95002); \n        }\n        /* end map_seq */\n        v_l_id_94994 = atomic_inc(&(v_work_idx_8039)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94997",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94998",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94999",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95000",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__95001",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95002",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95015",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}