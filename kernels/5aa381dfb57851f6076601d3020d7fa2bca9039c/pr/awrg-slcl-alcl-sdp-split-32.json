{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89619, const global float* restrict v__89620, const global float* restrict v__89621, const global float* restrict v__89622, float v__89623, float v__89624, global float* v__89642, global int* v__89626, global float* v__89632, local float* v__89637, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89628; \n  float v__89633; \n  float v__80974; \n  /* Private Memory */\n  float v__89630_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7539 = v__89626; \n    local int v_w_id_89611; \n    if (get_local_id(0) == 0) {\n      v_w_id_89611 = atomic_inc(v_work_idx_7539); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89611 < v_MHeight_2)){\n      for (int v_l_id_89612 = get_local_id(0); v_l_id_89612 < v_MWidthC_1; v_l_id_89612 = (v_l_id_89612 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_89613 = 0; v_i_89613 < 32; v_i_89613 = (1 + v_i_89613)) {\n          float v_tmp_89701 = 0.0f; \n          v__89628 = v_tmp_89701; \n          int v_index_89702 = v__89619[(v_l_id_89612 + (32 * v_MWidthC_1 * v_w_id_89611) + (v_MWidthC_1 * v_i_89613))]; \n          if (v_index_89702 < 0) {\n            v__89630_0 = v__89628; \n          } else {\n            if (v_index_89702 >= v_VLength_3) {\n              v__89630_0 = v__89628; \n            } else {\n              v__89630_0 = v__89621[v_index_89702]; \n            }\n          }\n          v__89632[(v_i_89613 + (32 * v_MWidthC_1 * v_w_id_89611) + (32 * v_l_id_89612))] = mult(v__89630_0, v__89620[(v_l_id_89612 + (32 * v_MWidthC_1 * v_w_id_89611) + (v_MWidthC_1 * v_i_89613))]); \n        }\n        /* end map_seq */\n        float v_tmp_89703 = 0.0f; \n        v__89633 = v_tmp_89703; \n        /* reduce_seq */\n        for (int v_i_89614 = 0; v_i_89614 < 32; v_i_89614 = (1 + v_i_89614)) {\n          v__89633 = add(v__89633, v__89632[(v_i_89614 + (32 * v_MWidthC_1 * v_w_id_89611) + (32 * v_l_id_89612))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89615 = 0; \n          v__89637[v_l_id_89612] = id(v__89633); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7532; \n        v_work_idx_7532 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_89616 = atomic_inc(&(v_work_idx_7532)); \n        while((v_l_id_89616 < 1)){\n          float v_tmp_89706 = 0.0f; \n          v__80974 = v_tmp_89706; \n          /* reduce_seq */\n          for (int v_i_89617 = 0; v_i_89617 < v_MWidthC_1; v_i_89617 = (1 + v_i_89617)) {\n            v__80974 = add(v__80974, v__89637[(v_i_89617 + (v_MWidthC_1 * v_l_id_89616))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89618 = 0; \n            v__89642[v_w_id_89611] = doubleMultiplyAdd(v__80974, v__89623, v__89622[v_w_id_89611], v__89624); \n          }\n          /* end map_seq */\n          v_l_id_89616 = atomic_inc(&(v_work_idx_7532)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89611 = atomic_inc(v_work_idx_7539); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89619",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89620",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89621",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89622",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89623",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89624",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89626",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__89632",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__89642",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89637",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}