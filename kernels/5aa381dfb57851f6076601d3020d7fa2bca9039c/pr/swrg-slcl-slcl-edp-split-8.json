{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__81169, const global float* restrict v__81170, const global float* restrict v__81171, const global float* restrict v__81172, float v__81173, float v__81174, global float* v__81193, local float* v__81188, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81177; \n  float v__81179; \n  float v__80974; \n  /* Private Memory */\n  float v__81181_0;\n  \n  float v__81183_0;\n  \n  int v__81187_0;\n  \n  for (int v_wg_id_81162 = get_group_id(0); v_wg_id_81162 < v_MHeight_2; v_wg_id_81162 = (v_wg_id_81162 + get_num_groups(0))) {\n    for (int v_l_id_81163 = get_local_id(0); v_l_id_81163 < v_MWidthC_1; v_l_id_81163 = (v_l_id_81163 + get_local_size(0))) {\n      float v_tmp_81261 = 0.0f; \n      v__81177 = v_tmp_81261; \n      /* reduce_while_seq */\n      for (int v_i_81164 = 0; v_i_81164 < 8; v_i_81164 = (1 + v_i_81164)) {\n        v__81187_0 = check(v__81177, v__81169[(v_l_id_81163 + (8 * v_MWidthC_1 * v_wg_id_81162) + (v_MWidthC_1 * v_i_81164))]); \n        if (v__81187_0) {\n        } else {\n          break;\n        }\n        float v_tmp_81262 = 0.0f; \n        v__81179 = v_tmp_81262; \n        int v_index_81263 = v__81169[(v_l_id_81163 + (8 * v_MWidthC_1 * v_wg_id_81162) + (v_MWidthC_1 * v_i_81164))]; \n        if (v_index_81263 < 0) {\n          v__81181_0 = v__81179; \n        } else {\n          if (v_index_81263 >= v_VLength_3) {\n            v__81181_0 = v__81179; \n          } else {\n            v__81181_0 = v__81171[v_index_81263]; \n          }\n        }\n        v__81183_0 = mult(v__81181_0, v__81170[(v_l_id_81163 + (8 * v_MWidthC_1 * v_wg_id_81162) + (v_MWidthC_1 * v_i_81164))]); \n        v__81177 = add(v__81183_0, v__81177); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81165 = 0; \n        v__81188[v_l_id_81163] = id(v__81177); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81166 = get_local_id(0); \n      float v_tmp_81266 = 0.0f; \n      v__80974 = v_tmp_81266; \n      /* reduce_seq */\n      for (int v_i_81167 = 0; v_i_81167 < v_MWidthC_1; v_i_81167 = (1 + v_i_81167)) {\n        v__80974 = add(v__80974, v__81188[(v_i_81167 + (v_MWidthC_1 * v_l_id_81166))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81168 = 0; \n        v__81193[v_wg_id_81162] = doubleMultiplyAdd(v__80974, v__81173, v__81172[v_wg_id_81162], v__81174); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__81169",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81170",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81171",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81172",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81173",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81174",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81188",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}