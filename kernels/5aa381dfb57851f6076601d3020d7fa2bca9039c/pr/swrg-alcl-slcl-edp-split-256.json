{
  "name" : "swrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__98679, const global float* restrict v__98680, const global float* restrict v__98681, const global float* restrict v__98682, float v__98683, float v__98684, global float* v__98703, local float* v__98698, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98687; \n  float v__98689; \n  float v__80974; \n  /* Private Memory */\n  float v__98691_0;\n  \n  float v__98693_0;\n  \n  int v__98697_0;\n  \n  for (int v_wg_id_98672 = get_group_id(0); v_wg_id_98672 < v_MHeight_2; v_wg_id_98672 = (v_wg_id_98672 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8385; \n      v_work_idx_8385 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98673 = atomic_inc(&(v_work_idx_8385)); \n      while((v_l_id_98673 < v_MWidthC_1)){\n        float v_tmp_98763 = 0.0f; \n        v__98687 = v_tmp_98763; \n        /* reduce_while_seq */\n        for (int v_i_98674 = 0; v_i_98674 < 256; v_i_98674 = (1 + v_i_98674)) {\n          v__98697_0 = check(v__98687, v__98679[(v_l_id_98673 + (256 * v_MWidthC_1 * v_wg_id_98672) + (v_MWidthC_1 * v_i_98674))]); \n          if (v__98697_0) {\n          } else {\n            break;\n          }\n          float v_tmp_98764 = 0.0f; \n          v__98689 = v_tmp_98764; \n          int v_index_98765 = v__98679[(v_l_id_98673 + (256 * v_MWidthC_1 * v_wg_id_98672) + (v_MWidthC_1 * v_i_98674))]; \n          if (v_index_98765 < 0) {\n            v__98691_0 = v__98689; \n          } else {\n            if (v_index_98765 >= v_VLength_3) {\n              v__98691_0 = v__98689; \n            } else {\n              v__98691_0 = v__98681[v_index_98765]; \n            }\n          }\n          v__98693_0 = mult(v__98691_0, v__98680[(v_l_id_98673 + (256 * v_MWidthC_1 * v_wg_id_98672) + (v_MWidthC_1 * v_i_98674))]); \n          v__98687 = add(v__98693_0, v__98687); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98675 = 0; \n          v__98698[v_l_id_98673] = id(v__98687); \n        }\n        /* end map_seq */\n        v_l_id_98673 = atomic_inc(&(v_work_idx_8385)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98676 = get_local_id(0); \n      float v_tmp_98768 = 0.0f; \n      v__80974 = v_tmp_98768; \n      /* reduce_seq */\n      for (int v_i_98677 = 0; v_i_98677 < v_MWidthC_1; v_i_98677 = (1 + v_i_98677)) {\n        v__80974 = add(v__80974, v__98698[(v_i_98677 + (v_MWidthC_1 * v_l_id_98676))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98678 = 0; \n        v__98703[v_wg_id_98672] = doubleMultiplyAdd(v__80974, v__98683, v__98682[v_wg_id_98672], v__98684); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98679",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98680",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98681",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98682",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98683",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98684",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98703",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98698",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}