{
  "name" : "awrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96388, const global float* restrict v__96389, const global float* restrict v__96390, const global float* restrict v__96391, float v__96392, float v__96393, global float* v__96411, global int* v__96395, local float* v__96406, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96397; \n  float v__96399; \n  float v__80974; \n  /* Private Memory */\n  float v__96401_0;\n  \n  float v__96403_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8173 = v__96395; \n    local int v_w_id_96381; \n    if (get_local_id(0) == 0) {\n      v_w_id_96381 = atomic_inc(v_work_idx_8173); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96381 < v_MHeight_2)){\n      for (int v_l_id_96382 = get_local_id(0); v_l_id_96382 < v_MWidthC_1; v_l_id_96382 = (v_l_id_96382 + get_local_size(0))) {\n        float v_tmp_96470 = 0.0f; \n        v__96397 = v_tmp_96470; \n        /* reduce_seq */\n        for (int v_i_96383 = 0; v_i_96383 < 128; v_i_96383 = (1 + v_i_96383)) {\n          float v_tmp_96471 = 0.0f; \n          v__96399 = v_tmp_96471; \n          int v_index_96472 = v__96388[(v_l_id_96382 + (128 * v_MWidthC_1 * v_w_id_96381) + (v_MWidthC_1 * v_i_96383))]; \n          if (v_index_96472 < 0) {\n            v__96401_0 = v__96399; \n          } else {\n            if (v_index_96472 >= v_VLength_3) {\n              v__96401_0 = v__96399; \n            } else {\n              v__96401_0 = v__96390[v_index_96472]; \n            }\n          }\n          v__96403_0 = mult(v__96401_0, v__96389[(v_l_id_96382 + (128 * v_MWidthC_1 * v_w_id_96381) + (v_MWidthC_1 * v_i_96383))]); \n          v__96397 = add(v__96403_0, v__96397); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96384 = 0; \n          v__96406[v_l_id_96382] = id(v__96397); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8167; \n        v_work_idx_8167 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_96385 = atomic_inc(&(v_work_idx_8167)); \n        while((v_l_id_96385 < 1)){\n          float v_tmp_96475 = 0.0f; \n          v__80974 = v_tmp_96475; \n          /* reduce_seq */\n          for (int v_i_96386 = 0; v_i_96386 < v_MWidthC_1; v_i_96386 = (1 + v_i_96386)) {\n            v__80974 = add(v__80974, v__96406[(v_i_96386 + (v_MWidthC_1 * v_l_id_96385))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96387 = 0; \n            v__96411[v_w_id_96381] = doubleMultiplyAdd(v__80974, v__96392, v__96391[v_w_id_96381], v__96393); \n          }\n          /* end map_seq */\n          v_l_id_96385 = atomic_inc(&(v_work_idx_8167)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96381 = atomic_inc(v_work_idx_8173); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__96388",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96389",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96390",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96391",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96392",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96393",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96395",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96411",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96406",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}