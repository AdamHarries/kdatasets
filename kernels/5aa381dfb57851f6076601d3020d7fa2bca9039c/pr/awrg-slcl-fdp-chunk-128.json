{
  "name" : "awrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95808, const global float* restrict v__95809, const global float* restrict v__95810, const global float* restrict v__95811, float v__95812, float v__95813, global float* v__95827, global int* v__95815, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95817; \n  float v__95819; \n  /* Private Memory */\n  float v__95821_0;\n  \n  float v__95823_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8118 = v__95815; \n    local int v_w_id_95804; \n    if (get_local_id(0) == 0) {\n      v_w_id_95804 = atomic_inc(v_work_idx_8118); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_95804 < v_MHeight_2)){\n      for (int v_l_id_95805 = get_local_id(0); v_l_id_95805 < 128; v_l_id_95805 = (v_l_id_95805 + get_local_size(0))) {\n        float v_tmp_95868 = 0.0f; \n        v__95817 = v_tmp_95868; \n        /* reduce_seq */\n        for (int v_i_95806 = 0; v_i_95806 < v_MWidthC_1; v_i_95806 = (1 + v_i_95806)) {\n          float v_tmp_95869 = 0.0f; \n          v__95819 = v_tmp_95869; \n          int v_index_95870 = v__95808[(v_i_95806 + (128 * v_MWidthC_1 * v_w_id_95804) + (v_MWidthC_1 * v_l_id_95805))]; \n          if (v_index_95870 < 0) {\n            v__95821_0 = v__95819; \n          } else {\n            if (v_index_95870 >= v_VLength_3) {\n              v__95821_0 = v__95819; \n            } else {\n              v__95821_0 = v__95810[v_index_95870]; \n            }\n          }\n          v__95823_0 = mult(v__95821_0, v__95809[(v_i_95806 + (128 * v_MWidthC_1 * v_w_id_95804) + (v_MWidthC_1 * v_l_id_95805))]); \n          v__95817 = add(v__95823_0, v__95817); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95807 = 0; \n          v__95827[(v_l_id_95805 + (128 * v_w_id_95804))] = doubleMultiplyAdd(v__95817, v__95812, v__95811[(v_l_id_95805 + (128 * v_w_id_95804))], v__95813); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_95804 = atomic_inc(v_work_idx_8118); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__95808",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95809",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95810",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95811",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__95812",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95813",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95815",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__95827",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}