{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102402, const global float* restrict v__102403, const global float* restrict v__102404, const global float* restrict v__102405, float v__102406, float v__102407, global float* v__102421, global int* v__102409, global float* v__102415, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102411; \n  float v__102416; \n  /* Private Memory */\n  float v__102413_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8736 = v__102409; \n    local int v_w_id_102397; \n    if (get_local_id(0) == 0) {\n      v_w_id_102397 = atomic_inc(v_work_idx_8736); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102397 < v_MHeight_2)){\n      for (int v_l_id_102398 = get_local_id(0); v_l_id_102398 < 512; v_l_id_102398 = (v_l_id_102398 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102399 = 0; v_i_102399 < v_MWidthC_1; v_i_102399 = (1 + v_i_102399)) {\n          float v_tmp_102463 = 0.0f; \n          v__102411 = v_tmp_102463; \n          int v_index_102464 = v__102402[(v_i_102399 + (512 * v_MWidthC_1 * v_w_id_102397) + (v_MWidthC_1 * v_l_id_102398))]; \n          if (v_index_102464 < 0) {\n            v__102413_0 = v__102411; \n          } else {\n            if (v_index_102464 >= v_VLength_3) {\n              v__102413_0 = v__102411; \n            } else {\n              v__102413_0 = v__102404[v_index_102464]; \n            }\n          }\n          v__102415[(v_i_102399 + (512 * v_MWidthC_1 * v_w_id_102397) + (v_MWidthC_1 * v_l_id_102398))] = mult(v__102413_0, v__102403[(v_i_102399 + (512 * v_MWidthC_1 * v_w_id_102397) + (v_MWidthC_1 * v_l_id_102398))]); \n        }\n        /* end map_seq */\n        float v_tmp_102465 = 0.0f; \n        v__102416 = v_tmp_102465; \n        /* reduce_seq */\n        for (int v_i_102400 = 0; v_i_102400 < v_MWidthC_1; v_i_102400 = (1 + v_i_102400)) {\n          v__102416 = add(v__102416, v__102415[(v_i_102400 + (512 * v_MWidthC_1 * v_w_id_102397) + (v_MWidthC_1 * v_l_id_102398))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102401 = 0; \n          v__102421[(v_l_id_102398 + (512 * v_w_id_102397))] = doubleMultiplyAdd(v__102416, v__102406, v__102405[(v_l_id_102398 + (512 * v_w_id_102397))], v__102407); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_102397 = atomic_inc(v_work_idx_8736); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102402",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102403",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102404",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102405",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__102406",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102407",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102409",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__102415",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102421",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}