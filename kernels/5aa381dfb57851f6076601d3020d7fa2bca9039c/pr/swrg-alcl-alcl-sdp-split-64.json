{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92115, const global float* restrict v__92116, const global float* restrict v__92117, const global float* restrict v__92118, float v__92119, float v__92120, global float* v__92137, global float* v__92127, local float* v__92132, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92123; \n  float v__92128; \n  float v__80974; \n  /* Private Memory */\n  float v__92125_0;\n  \n  for (int v_wg_id_92107 = get_group_id(0); v_wg_id_92107 < v_MHeight_2; v_wg_id_92107 = (v_wg_id_92107 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7772; \n      v_work_idx_7772 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_92108 = atomic_inc(&(v_work_idx_7772)); \n      while((v_l_id_92108 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_92109 = 0; v_i_92109 < 64; v_i_92109 = (1 + v_i_92109)) {\n          float v_tmp_92190 = 0.0f; \n          v__92123 = v_tmp_92190; \n          int v_index_92191 = v__92115[(v_l_id_92108 + (64 * v_MWidthC_1 * v_wg_id_92107) + (v_MWidthC_1 * v_i_92109))]; \n          if (v_index_92191 < 0) {\n            v__92125_0 = v__92123; \n          } else {\n            if (v_index_92191 >= v_VLength_3) {\n              v__92125_0 = v__92123; \n            } else {\n              v__92125_0 = v__92117[v_index_92191]; \n            }\n          }\n          v__92127[(v_i_92109 + (64 * v_MWidthC_1 * v_wg_id_92107) + (64 * v_l_id_92108))] = mult(v__92125_0, v__92116[(v_l_id_92108 + (64 * v_MWidthC_1 * v_wg_id_92107) + (v_MWidthC_1 * v_i_92109))]); \n        }\n        /* end map_seq */\n        float v_tmp_92192 = 0.0f; \n        v__92128 = v_tmp_92192; \n        /* reduce_seq */\n        for (int v_i_92110 = 0; v_i_92110 < 64; v_i_92110 = (1 + v_i_92110)) {\n          v__92128 = add(v__92128, v__92127[(v_i_92110 + (64 * v_MWidthC_1 * v_wg_id_92107) + (64 * v_l_id_92108))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92111 = 0; \n          v__92132[v_l_id_92108] = id(v__92128); \n        }\n        /* end map_seq */\n        v_l_id_92108 = atomic_inc(&(v_work_idx_7772)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7766; \n      v_work_idx_7766 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_92112 = atomic_inc(&(v_work_idx_7766)); \n      while((v_l_id_92112 < 1)){\n        float v_tmp_92195 = 0.0f; \n        v__80974 = v_tmp_92195; \n        /* reduce_seq */\n        for (int v_i_92113 = 0; v_i_92113 < v_MWidthC_1; v_i_92113 = (1 + v_i_92113)) {\n          v__80974 = add(v__80974, v__92132[(v_i_92113 + (v_MWidthC_1 * v_l_id_92112))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92114 = 0; \n          v__92137[v_wg_id_92107] = doubleMultiplyAdd(v__80974, v__92119, v__92118[v_wg_id_92107], v__92120); \n        }\n        /* end map_seq */\n        v_l_id_92112 = atomic_inc(&(v_work_idx_7766)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92115",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92116",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92117",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92118",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92119",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92120",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92127",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92132",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}