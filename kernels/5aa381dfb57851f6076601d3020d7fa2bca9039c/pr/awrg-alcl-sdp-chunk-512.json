{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103261, const global float* restrict v__103262, const global float* restrict v__103263, const global float* restrict v__103264, float v__103265, float v__103266, global float* v__103280, global int* v__103268, global float* v__103274, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103270; \n  float v__103275; \n  /* Private Memory */\n  float v__103272_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8815 = v__103268; \n    local int v_w_id_103256; \n    if (get_local_id(0) == 0) {\n      v_w_id_103256 = atomic_inc(v_work_idx_8815); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103256 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8813; \n        v_work_idx_8813 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_103257 = atomic_inc(&(v_work_idx_8813)); \n        while((v_l_id_103257 < 512)){\n          /* map_seq */\n          for (int v_i_103258 = 0; v_i_103258 < v_MWidthC_1; v_i_103258 = (1 + v_i_103258)) {\n            float v_tmp_103318 = 0.0f; \n            v__103270 = v_tmp_103318; \n            int v_index_103319 = v__103261[(v_i_103258 + (512 * v_MWidthC_1 * v_w_id_103256) + (v_MWidthC_1 * v_l_id_103257))]; \n            if (v_index_103319 < 0) {\n              v__103272_0 = v__103270; \n            } else {\n              if (v_index_103319 >= v_VLength_3) {\n                v__103272_0 = v__103270; \n              } else {\n                v__103272_0 = v__103263[v_index_103319]; \n              }\n            }\n            v__103274[(v_i_103258 + (512 * v_MWidthC_1 * v_w_id_103256) + (v_MWidthC_1 * v_l_id_103257))] = mult(v__103272_0, v__103262[(v_i_103258 + (512 * v_MWidthC_1 * v_w_id_103256) + (v_MWidthC_1 * v_l_id_103257))]); \n          }\n          /* end map_seq */\n          float v_tmp_103320 = 0.0f; \n          v__103275 = v_tmp_103320; \n          /* reduce_seq */\n          for (int v_i_103259 = 0; v_i_103259 < v_MWidthC_1; v_i_103259 = (1 + v_i_103259)) {\n            v__103275 = add(v__103275, v__103274[(v_i_103259 + (512 * v_MWidthC_1 * v_w_id_103256) + (v_MWidthC_1 * v_l_id_103257))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103260 = 0; \n            v__103280[(v_l_id_103257 + (512 * v_w_id_103256))] = doubleMultiplyAdd(v__103275, v__103265, v__103264[(v_l_id_103257 + (512 * v_w_id_103256))], v__103266); \n          }\n          /* end map_seq */\n          v_l_id_103257 = atomic_inc(&(v_work_idx_8813)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103256 = atomic_inc(v_work_idx_8815); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103261",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103262",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103263",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103264",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__103265",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103266",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103268",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__103274",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__103280",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}