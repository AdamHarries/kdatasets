{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84615, const global float* restrict v__84616, const global float* restrict v__84617, const global float* restrict v__84618, float v__84619, float v__84620, global float* v__84637, global float* v__84627, local float* v__84632, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84623; \n  float v__84628; \n  float v__80974; \n  /* Private Memory */\n  float v__84625_0;\n  \n  for (int v_wg_id_84607 = get_group_id(0); v_wg_id_84607 < v_MHeight_2; v_wg_id_84607 = (v_wg_id_84607 + get_num_groups(0))) {\n    for (int v_l_id_84608 = get_local_id(0); v_l_id_84608 < v_MWidthC_1; v_l_id_84608 = (v_l_id_84608 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_84609 = 0; v_i_84609 < 16; v_i_84609 = (1 + v_i_84609)) {\n        float v_tmp_84698 = 0.0f; \n        v__84623 = v_tmp_84698; \n        int v_index_84699 = v__84615[(v_l_id_84608 + (16 * v_MWidthC_1 * v_wg_id_84607) + (v_MWidthC_1 * v_i_84609))]; \n        if (v_index_84699 < 0) {\n          v__84625_0 = v__84623; \n        } else {\n          if (v_index_84699 >= v_VLength_3) {\n            v__84625_0 = v__84623; \n          } else {\n            v__84625_0 = v__84617[v_index_84699]; \n          }\n        }\n        v__84627[(v_i_84609 + (16 * v_MWidthC_1 * v_wg_id_84607) + (16 * v_l_id_84608))] = mult(v__84625_0, v__84616[(v_l_id_84608 + (16 * v_MWidthC_1 * v_wg_id_84607) + (v_MWidthC_1 * v_i_84609))]); \n      }\n      /* end map_seq */\n      float v_tmp_84700 = 0.0f; \n      v__84628 = v_tmp_84700; \n      /* reduce_seq */\n      for (int v_i_84610 = 0; v_i_84610 < 16; v_i_84610 = (1 + v_i_84610)) {\n        v__84628 = add(v__84628, v__84627[(v_i_84610 + (16 * v_MWidthC_1 * v_wg_id_84607) + (16 * v_l_id_84608))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84611 = 0; \n        v__84632[v_l_id_84608] = id(v__84628); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7067; \n      v_work_idx_7067 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_84612 = atomic_inc(&(v_work_idx_7067)); \n      while((v_l_id_84612 < 1)){\n        float v_tmp_84703 = 0.0f; \n        v__80974 = v_tmp_84703; \n        /* reduce_seq */\n        for (int v_i_84613 = 0; v_i_84613 < v_MWidthC_1; v_i_84613 = (1 + v_i_84613)) {\n          v__80974 = add(v__80974, v__84632[(v_i_84613 + (v_MWidthC_1 * v_l_id_84612))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84614 = 0; \n          v__84637[v_wg_id_84607] = doubleMultiplyAdd(v__80974, v__84619, v__84618[v_wg_id_84607], v__84620); \n        }\n        /* end map_seq */\n        v_l_id_84612 = atomic_inc(&(v_work_idx_7067)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84615",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84616",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84617",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84618",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84619",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84620",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84627",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84637",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84632",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}