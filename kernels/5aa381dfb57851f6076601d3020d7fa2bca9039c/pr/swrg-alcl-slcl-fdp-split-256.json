{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98581, const global float* restrict v__98582, const global float* restrict v__98583, const global float* restrict v__98584, float v__98585, float v__98586, global float* v__98603, local float* v__98598, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98589; \n  float v__98591; \n  float v__80974; \n  /* Private Memory */\n  float v__98593_0;\n  \n  float v__98595_0;\n  \n  for (int v_wg_id_98574 = get_group_id(0); v_wg_id_98574 < v_MHeight_2; v_wg_id_98574 = (v_wg_id_98574 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8376; \n      v_work_idx_8376 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98575 = atomic_inc(&(v_work_idx_8376)); \n      while((v_l_id_98575 < v_MWidthC_1)){\n        float v_tmp_98660 = 0.0f; \n        v__98589 = v_tmp_98660; \n        /* reduce_seq */\n        for (int v_i_98576 = 0; v_i_98576 < 256; v_i_98576 = (1 + v_i_98576)) {\n          float v_tmp_98661 = 0.0f; \n          v__98591 = v_tmp_98661; \n          int v_index_98662 = v__98581[(v_l_id_98575 + (256 * v_MWidthC_1 * v_wg_id_98574) + (v_MWidthC_1 * v_i_98576))]; \n          if (v_index_98662 < 0) {\n            v__98593_0 = v__98591; \n          } else {\n            if (v_index_98662 >= v_VLength_3) {\n              v__98593_0 = v__98591; \n            } else {\n              v__98593_0 = v__98583[v_index_98662]; \n            }\n          }\n          v__98595_0 = mult(v__98593_0, v__98582[(v_l_id_98575 + (256 * v_MWidthC_1 * v_wg_id_98574) + (v_MWidthC_1 * v_i_98576))]); \n          v__98589 = add(v__98595_0, v__98589); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98577 = 0; \n          v__98598[v_l_id_98575] = id(v__98589); \n        }\n        /* end map_seq */\n        v_l_id_98575 = atomic_inc(&(v_work_idx_8376)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98578 = get_local_id(0); \n      float v_tmp_98665 = 0.0f; \n      v__80974 = v_tmp_98665; \n      /* reduce_seq */\n      for (int v_i_98579 = 0; v_i_98579 < v_MWidthC_1; v_i_98579 = (1 + v_i_98579)) {\n        v__80974 = add(v__80974, v__98598[(v_i_98579 + (v_MWidthC_1 * v_l_id_98578))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98580 = 0; \n        v__98603[v_wg_id_98574] = doubleMultiplyAdd(v__80974, v__98585, v__98584[v_wg_id_98574], v__98586); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98581",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98582",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98583",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98585",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98586",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98603",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98598",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}