{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87108, const global float* restrict v__87109, const global float* restrict v__87110, const global float* restrict v__87111, float v__87112, float v__87113, global float* v__87131, global int* v__87115, global float* v__87121, local float* v__87126, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87117; \n  float v__87122; \n  float v__80974; \n  /* Private Memory */\n  float v__87119_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7312 = v__87115; \n    local int v_w_id_87100; \n    if (get_local_id(0) == 0) {\n      v_w_id_87100 = atomic_inc(v_work_idx_7312); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87100 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7310; \n        v_work_idx_7310 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_87101 = atomic_inc(&(v_work_idx_7310)); \n        while((v_l_id_87101 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_87102 = 0; v_i_87102 < 16; v_i_87102 = (1 + v_i_87102)) {\n            float v_tmp_87182 = 0.0f; \n            v__87117 = v_tmp_87182; \n            int v_index_87183 = v__87108[(v_l_id_87101 + (16 * v_MWidthC_1 * v_w_id_87100) + (v_MWidthC_1 * v_i_87102))]; \n            if (v_index_87183 < 0) {\n              v__87119_0 = v__87117; \n            } else {\n              if (v_index_87183 >= v_VLength_3) {\n                v__87119_0 = v__87117; \n              } else {\n                v__87119_0 = v__87110[v_index_87183]; \n              }\n            }\n            v__87121[(v_i_87102 + (16 * v_MWidthC_1 * v_w_id_87100) + (16 * v_l_id_87101))] = mult(v__87119_0, v__87109[(v_l_id_87101 + (16 * v_MWidthC_1 * v_w_id_87100) + (v_MWidthC_1 * v_i_87102))]); \n          }\n          /* end map_seq */\n          float v_tmp_87184 = 0.0f; \n          v__87122 = v_tmp_87184; \n          /* reduce_seq */\n          for (int v_i_87103 = 0; v_i_87103 < 16; v_i_87103 = (1 + v_i_87103)) {\n            v__87122 = add(v__87122, v__87121[(v_i_87103 + (16 * v_MWidthC_1 * v_w_id_87100) + (16 * v_l_id_87101))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87104 = 0; \n            v__87126[v_l_id_87101] = id(v__87122); \n          }\n          /* end map_seq */\n          v_l_id_87101 = atomic_inc(&(v_work_idx_7310)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7304; \n        v_work_idx_7304 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_87105 = atomic_inc(&(v_work_idx_7304)); \n        while((v_l_id_87105 < 1)){\n          float v_tmp_87187 = 0.0f; \n          v__80974 = v_tmp_87187; \n          /* reduce_seq */\n          for (int v_i_87106 = 0; v_i_87106 < v_MWidthC_1; v_i_87106 = (1 + v_i_87106)) {\n            v__80974 = add(v__80974, v__87126[(v_i_87106 + (v_MWidthC_1 * v_l_id_87105))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87107 = 0; \n            v__87131[v_w_id_87100] = doubleMultiplyAdd(v__80974, v__87112, v__87111[v_w_id_87100], v__87113); \n          }\n          /* end map_seq */\n          v_l_id_87105 = atomic_inc(&(v_work_idx_7304)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87100 = atomic_inc(v_work_idx_7312); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87108",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87109",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87110",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87112",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87113",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87115",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__87121",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__87131",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87126",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}