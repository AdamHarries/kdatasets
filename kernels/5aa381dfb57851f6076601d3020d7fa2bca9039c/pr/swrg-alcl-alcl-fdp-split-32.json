{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88875, const global float* restrict v__88876, const global float* restrict v__88877, const global float* restrict v__88878, float v__88879, float v__88880, global float* v__88897, local float* v__88892, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88883; \n  float v__88885; \n  float v__80974; \n  /* Private Memory */\n  float v__88887_0;\n  \n  float v__88889_0;\n  \n  for (int v_wg_id_88868 = get_group_id(0); v_wg_id_88868 < v_MHeight_2; v_wg_id_88868 = (v_wg_id_88868 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7470; \n      v_work_idx_7470 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88869 = atomic_inc(&(v_work_idx_7470)); \n      while((v_l_id_88869 < v_MWidthC_1)){\n        float v_tmp_88950 = 0.0f; \n        v__88883 = v_tmp_88950; \n        /* reduce_seq */\n        for (int v_i_88870 = 0; v_i_88870 < 32; v_i_88870 = (1 + v_i_88870)) {\n          float v_tmp_88951 = 0.0f; \n          v__88885 = v_tmp_88951; \n          int v_index_88952 = v__88875[(v_l_id_88869 + (32 * v_MWidthC_1 * v_wg_id_88868) + (v_MWidthC_1 * v_i_88870))]; \n          if (v_index_88952 < 0) {\n            v__88887_0 = v__88885; \n          } else {\n            if (v_index_88952 >= v_VLength_3) {\n              v__88887_0 = v__88885; \n            } else {\n              v__88887_0 = v__88877[v_index_88952]; \n            }\n          }\n          v__88889_0 = mult(v__88887_0, v__88876[(v_l_id_88869 + (32 * v_MWidthC_1 * v_wg_id_88868) + (v_MWidthC_1 * v_i_88870))]); \n          v__88883 = add(v__88889_0, v__88883); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88871 = 0; \n          v__88892[v_l_id_88869] = id(v__88883); \n        }\n        /* end map_seq */\n        v_l_id_88869 = atomic_inc(&(v_work_idx_7470)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7465; \n      v_work_idx_7465 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88872 = atomic_inc(&(v_work_idx_7465)); \n      while((v_l_id_88872 < 1)){\n        float v_tmp_88955 = 0.0f; \n        v__80974 = v_tmp_88955; \n        /* reduce_seq */\n        for (int v_i_88873 = 0; v_i_88873 < v_MWidthC_1; v_i_88873 = (1 + v_i_88873)) {\n          v__80974 = add(v__80974, v__88892[(v_i_88873 + (v_MWidthC_1 * v_l_id_88872))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88874 = 0; \n          v__88897[v_wg_id_88868] = doubleMultiplyAdd(v__80974, v__88879, v__88878[v_wg_id_88868], v__88880); \n        }\n        /* end map_seq */\n        v_l_id_88872 = atomic_inc(&(v_work_idx_7465)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__88875",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88876",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88877",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88879",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88880",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88897",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88892",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}