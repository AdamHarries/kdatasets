{
  "name" : "swrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97839, const global float* restrict v__97840, const global float* restrict v__97841, const global float* restrict v__97842, float v__97843, float v__97844, global float* v__97863, local float* v__97858, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97847; \n  float v__97849; \n  float v__80974; \n  /* Private Memory */\n  float v__97851_0;\n  \n  float v__97853_0;\n  \n  int v__97857_0;\n  \n  for (int v_wg_id_97832 = get_group_id(0); v_wg_id_97832 < v_MHeight_2; v_wg_id_97832 = (v_wg_id_97832 + get_num_groups(0))) {\n    for (int v_l_id_97833 = get_local_id(0); v_l_id_97833 < v_MWidthC_1; v_l_id_97833 = (v_l_id_97833 + get_local_size(0))) {\n      float v_tmp_97931 = 0.0f; \n      v__97847 = v_tmp_97931; \n      /* reduce_while_seq */\n      for (int v_i_97834 = 0; v_i_97834 < 256; v_i_97834 = (1 + v_i_97834)) {\n        v__97857_0 = check(v__97847, v__97839[(v_l_id_97833 + (256 * v_MWidthC_1 * v_wg_id_97832) + (v_MWidthC_1 * v_i_97834))]); \n        if (v__97857_0) {\n        } else {\n          break;\n        }\n        float v_tmp_97932 = 0.0f; \n        v__97849 = v_tmp_97932; \n        int v_index_97933 = v__97839[(v_l_id_97833 + (256 * v_MWidthC_1 * v_wg_id_97832) + (v_MWidthC_1 * v_i_97834))]; \n        if (v_index_97933 < 0) {\n          v__97851_0 = v__97849; \n        } else {\n          if (v_index_97933 >= v_VLength_3) {\n            v__97851_0 = v__97849; \n          } else {\n            v__97851_0 = v__97841[v_index_97933]; \n          }\n        }\n        v__97853_0 = mult(v__97851_0, v__97840[(v_l_id_97833 + (256 * v_MWidthC_1 * v_wg_id_97832) + (v_MWidthC_1 * v_i_97834))]); \n        v__97847 = add(v__97853_0, v__97847); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_97835 = 0; \n        v__97858[v_l_id_97833] = id(v__97847); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_97836 = get_local_id(0); \n      float v_tmp_97936 = 0.0f; \n      v__80974 = v_tmp_97936; \n      /* reduce_seq */\n      for (int v_i_97837 = 0; v_i_97837 < v_MWidthC_1; v_i_97837 = (1 + v_i_97837)) {\n        v__80974 = add(v__80974, v__97858[(v_i_97837 + (v_MWidthC_1 * v_l_id_97836))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_97838 = 0; \n        v__97863[v_wg_id_97832] = doubleMultiplyAdd(v__80974, v__97843, v__97842[v_wg_id_97832], v__97844); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97839",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97840",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97841",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97843",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97844",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__97863",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97858",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}