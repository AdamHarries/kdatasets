{
  "name" : "swrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98401, const global float* restrict v__98402, const global float* restrict v__98403, const global float* restrict v__98404, float v__98405, float v__98406, global float* v__98421, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98408; \n  float v__98411; \n  /* Private Memory */\n  float v__98413_0;\n  \n  float v__98415_0;\n  \n  int v__98419_0;\n  \n  for (int v_wg_id_98397 = get_group_id(0); v_wg_id_98397 < v_MHeight_2; v_wg_id_98397 = (v_wg_id_98397 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8357; \n      v_work_idx_8357 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98398 = atomic_inc(&(v_work_idx_8357)); \n      while((v_l_id_98398 < 256)){\n        float v_tmp_98466 = 0.0f; \n        v__98408 = v_tmp_98466; \n        /* reduce_while_seq */\n        for (int v_i_98399 = 0; v_i_98399 < v_MWidthC_1; v_i_98399 = (1 + v_i_98399)) {\n          v__98419_0 = check(v__98408, v__98401[(v_i_98399 + (256 * v_MWidthC_1 * v_wg_id_98397) + (v_MWidthC_1 * v_l_id_98398))]); \n          if (v__98419_0) {\n          } else {\n            break;\n          }\n          float v_tmp_98467 = 0.0f; \n          v__98411 = v_tmp_98467; \n          int v_index_98468 = v__98401[(v_i_98399 + (256 * v_MWidthC_1 * v_wg_id_98397) + (v_MWidthC_1 * v_l_id_98398))]; \n          if (v_index_98468 < 0) {\n            v__98413_0 = v__98411; \n          } else {\n            if (v_index_98468 >= v_VLength_3) {\n              v__98413_0 = v__98411; \n            } else {\n              v__98413_0 = v__98403[v_index_98468]; \n            }\n          }\n          v__98415_0 = mult(v__98413_0, v__98402[(v_i_98399 + (256 * v_MWidthC_1 * v_wg_id_98397) + (v_MWidthC_1 * v_l_id_98398))]); \n          v__98408 = add(v__98415_0, v__98408); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98400 = 0; \n          v__98421[(v_l_id_98398 + (256 * v_wg_id_98397))] = doubleMultiplyAdd(v__98408, v__98405, v__98404[(v_l_id_98398 + (256 * v_wg_id_98397))], v__98406); \n        }\n        /* end map_seq */\n        v_l_id_98398 = atomic_inc(&(v_work_idx_8357)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98401",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98402",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98403",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98404",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__98405",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98406",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98421",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}