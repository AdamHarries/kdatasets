{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__96176, const global float* restrict v__96177, const global float* restrict v__96178, const global float* restrict v__96179, float v__96180, float v__96181, global float* v__96201, global int* v__96183, local float* v__96196, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96185; \n  float v__96187; \n  float v__80974; \n  /* Private Memory */\n  float v__96189_0;\n  \n  float v__96191_0;\n  \n  int v__96195_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8152 = v__96183; \n    local int v_w_id_96169; \n    if (get_local_id(0) == 0) {\n      v_w_id_96169 = atomic_inc(v_work_idx_8152); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96169 < v_MHeight_2)){\n      for (int v_l_id_96170 = get_local_id(0); v_l_id_96170 < v_MWidthC_1; v_l_id_96170 = (v_l_id_96170 + get_local_size(0))) {\n        float v_tmp_96267 = 0.0f; \n        v__96185 = v_tmp_96267; \n        /* reduce_while_seq */\n        for (int v_i_96171 = 0; v_i_96171 < 128; v_i_96171 = (1 + v_i_96171)) {\n          v__96195_0 = check(v__96185, v__96176[(v_l_id_96170 + (128 * v_MWidthC_1 * v_w_id_96169) + (v_MWidthC_1 * v_i_96171))]); \n          if (v__96195_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96268 = 0.0f; \n          v__96187 = v_tmp_96268; \n          int v_index_96269 = v__96176[(v_l_id_96170 + (128 * v_MWidthC_1 * v_w_id_96169) + (v_MWidthC_1 * v_i_96171))]; \n          if (v_index_96269 < 0) {\n            v__96189_0 = v__96187; \n          } else {\n            if (v_index_96269 >= v_VLength_3) {\n              v__96189_0 = v__96187; \n            } else {\n              v__96189_0 = v__96178[v_index_96269]; \n            }\n          }\n          v__96191_0 = mult(v__96189_0, v__96177[(v_l_id_96170 + (128 * v_MWidthC_1 * v_w_id_96169) + (v_MWidthC_1 * v_i_96171))]); \n          v__96185 = add(v__96191_0, v__96185); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96172 = 0; \n          v__96196[v_l_id_96170] = id(v__96185); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96173 = get_local_id(0); \n        float v_tmp_96272 = 0.0f; \n        v__80974 = v_tmp_96272; \n        /* reduce_seq */\n        for (int v_i_96174 = 0; v_i_96174 < v_MWidthC_1; v_i_96174 = (1 + v_i_96174)) {\n          v__80974 = add(v__80974, v__96196[(v_i_96174 + (v_MWidthC_1 * v_l_id_96173))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96175 = 0; \n          v__96201[v_w_id_96169] = doubleMultiplyAdd(v__80974, v__96180, v__96179[v_w_id_96169], v__96181); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96169 = atomic_inc(v_work_idx_8152); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96176",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96177",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96178",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96179",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96180",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96181",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96183",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96196",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}