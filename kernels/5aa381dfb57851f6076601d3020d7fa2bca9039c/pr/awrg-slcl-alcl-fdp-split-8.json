{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83052, const global float* restrict v__83053, const global float* restrict v__83054, const global float* restrict v__83055, float v__83056, float v__83057, global float* v__83075, global int* v__83059, local float* v__83070, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83061; \n  float v__83063; \n  float v__80974; \n  /* Private Memory */\n  float v__83065_0;\n  \n  float v__83067_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6925 = v__83059; \n    local int v_w_id_83045; \n    if (get_local_id(0) == 0) {\n      v_w_id_83045 = atomic_inc(v_work_idx_6925); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83045 < v_MHeight_2)){\n      for (int v_l_id_83046 = get_local_id(0); v_l_id_83046 < v_MWidthC_1; v_l_id_83046 = (v_l_id_83046 + get_local_size(0))) {\n        float v_tmp_83134 = 0.0f; \n        v__83061 = v_tmp_83134; \n        /* reduce_seq */\n        for (int v_i_83047 = 0; v_i_83047 < 8; v_i_83047 = (1 + v_i_83047)) {\n          float v_tmp_83135 = 0.0f; \n          v__83063 = v_tmp_83135; \n          int v_index_83136 = v__83052[(v_l_id_83046 + (8 * v_MWidthC_1 * v_w_id_83045) + (v_MWidthC_1 * v_i_83047))]; \n          if (v_index_83136 < 0) {\n            v__83065_0 = v__83063; \n          } else {\n            if (v_index_83136 >= v_VLength_3) {\n              v__83065_0 = v__83063; \n            } else {\n              v__83065_0 = v__83054[v_index_83136]; \n            }\n          }\n          v__83067_0 = mult(v__83065_0, v__83053[(v_l_id_83046 + (8 * v_MWidthC_1 * v_w_id_83045) + (v_MWidthC_1 * v_i_83047))]); \n          v__83061 = add(v__83067_0, v__83061); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83048 = 0; \n          v__83070[v_l_id_83046] = id(v__83061); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6919; \n        v_work_idx_6919 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_83049 = atomic_inc(&(v_work_idx_6919)); \n        while((v_l_id_83049 < 1)){\n          float v_tmp_83139 = 0.0f; \n          v__80974 = v_tmp_83139; \n          /* reduce_seq */\n          for (int v_i_83050 = 0; v_i_83050 < v_MWidthC_1; v_i_83050 = (1 + v_i_83050)) {\n            v__80974 = add(v__80974, v__83070[(v_i_83050 + (v_MWidthC_1 * v_l_id_83049))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83051 = 0; \n            v__83075[v_w_id_83045] = doubleMultiplyAdd(v__80974, v__83056, v__83055[v_w_id_83045], v__83057); \n          }\n          /* end map_seq */\n          v_l_id_83049 = atomic_inc(&(v_work_idx_6919)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83045 = atomic_inc(v_work_idx_6925); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83052",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83053",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83054",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83055",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83056",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83057",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83059",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83075",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83070",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}