{
  "name" : "awrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80659, const global float* restrict v__80660, const global float* restrict v__80661, const global float* restrict v__80662, float v__80663, float v__80664, global float* v__80678, global int* v__80666, global float* v__80672, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80668; \n  float v__80673; \n  /* Private Memory */\n  float v__80670_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6710 = v__80666; \n    local int v_w_id_80655; \n    if (get_local_id(0) == 0) {\n      v_w_id_80655 = atomic_inc(v_work_idx_6710); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80655 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_l_id_6708; \n        v_l_id_6708 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_80656 = atomic_inc(&(v_l_id_6708)); \n        while((v_l_id_80656 < v_MWidthC_1)){\n          float v_tmp_80707 = 0.0f; \n          v__80668 = v_tmp_80707; \n          int v_index_80708 = v__80659[(v_l_id_80656 + (v_MWidthC_1 * v_w_id_80655))]; \n          if (v_index_80708 < 0) {\n            v__80670_0 = v__80668; \n          } else {\n            if (v_index_80708 >= v_VLength_3) {\n              v__80670_0 = v__80668; \n            } else {\n              v__80670_0 = v__80661[v_index_80708]; \n            }\n          }\n          v__80672[(v_l_id_80656 + (v_MWidthC_1 * v_w_id_80655))] = mult(v__80670_0, v__80660[(v_l_id_80656 + (v_MWidthC_1 * v_w_id_80655))]); \n          v_l_id_80656 = atomic_inc(&(v_l_id_6708)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_80709 = 0.0f; \n      v__80673 = v_tmp_80709; \n      /* reduce_seq */\n      for (int v_i_80657 = 0; v_i_80657 < v_MWidthC_1; v_i_80657 = (1 + v_i_80657)) {\n        v__80673 = add(v__80673, v__80672[(v_i_80657 + (v_MWidthC_1 * v_w_id_80655))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80658 = 0; \n        v__80678[v_w_id_80655] = doubleMultiplyAdd(v__80673, v__80663, v__80662[v_w_id_80655], v__80664); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_80655 = atomic_inc(v_work_idx_6710); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__80659",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80661",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80663",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80664",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80666",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__80672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80678",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}