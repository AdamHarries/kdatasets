{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102634, const global float* restrict v__102635, const global float* restrict v__102636, const global float* restrict v__102637, float v__102638, float v__102639, global float* v__102657, global int* v__102641, global float* v__102647, local float* v__102652, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102643; \n  float v__102648; \n  float v__80974; \n  /* Private Memory */\n  float v__102645_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8758 = v__102641; \n    local int v_w_id_102626; \n    if (get_local_id(0) == 0) {\n      v_w_id_102626 = atomic_inc(v_work_idx_8758); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102626 < v_MHeight_2)){\n      for (int v_l_id_102627 = get_local_id(0); v_l_id_102627 < v_MWidthC_1; v_l_id_102627 = (v_l_id_102627 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102628 = 0; v_i_102628 < 512; v_i_102628 = (1 + v_i_102628)) {\n          float v_tmp_102720 = 0.0f; \n          v__102643 = v_tmp_102720; \n          int v_index_102721 = v__102634[(v_l_id_102627 + (512 * v_MWidthC_1 * v_w_id_102626) + (v_MWidthC_1 * v_i_102628))]; \n          if (v_index_102721 < 0) {\n            v__102645_0 = v__102643; \n          } else {\n            if (v_index_102721 >= v_VLength_3) {\n              v__102645_0 = v__102643; \n            } else {\n              v__102645_0 = v__102636[v_index_102721]; \n            }\n          }\n          v__102647[(v_i_102628 + (512 * v_MWidthC_1 * v_w_id_102626) + (512 * v_l_id_102627))] = mult(v__102645_0, v__102635[(v_l_id_102627 + (512 * v_MWidthC_1 * v_w_id_102626) + (v_MWidthC_1 * v_i_102628))]); \n        }\n        /* end map_seq */\n        float v_tmp_102722 = 0.0f; \n        v__102648 = v_tmp_102722; \n        /* reduce_seq */\n        for (int v_i_102629 = 0; v_i_102629 < 512; v_i_102629 = (1 + v_i_102629)) {\n          v__102648 = add(v__102648, v__102647[(v_i_102629 + (512 * v_MWidthC_1 * v_w_id_102626) + (512 * v_l_id_102627))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102630 = 0; \n          v__102652[v_l_id_102627] = id(v__102648); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_102631 = get_local_id(0); \n        float v_tmp_102725 = 0.0f; \n        v__80974 = v_tmp_102725; \n        /* reduce_seq */\n        for (int v_i_102632 = 0; v_i_102632 < v_MWidthC_1; v_i_102632 = (1 + v_i_102632)) {\n          v__80974 = add(v__80974, v__102652[(v_i_102632 + (v_MWidthC_1 * v_l_id_102631))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102633 = 0; \n          v__102657[v_w_id_102626] = doubleMultiplyAdd(v__80974, v__102638, v__102637[v_w_id_102626], v__102639); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_102626 = atomic_inc(v_work_idx_8758); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102634",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102635",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102636",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102637",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102638",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102639",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102641",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__102647",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102657",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102652",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}