{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102211, const global float* restrict v__102212, const global float* restrict v__102213, const global float* restrict v__102214, float v__102215, float v__102216, global float* v__102233, local float* v__102228, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102219; \n  float v__102221; \n  float v__80974; \n  /* Private Memory */\n  float v__102223_0;\n  \n  float v__102225_0;\n  \n  for (int v_wg_id_102204 = get_group_id(0); v_wg_id_102204 < v_MHeight_2; v_wg_id_102204 = (v_wg_id_102204 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8718; \n      v_work_idx_8718 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_102205 = atomic_inc(&(v_work_idx_8718)); \n      while((v_l_id_102205 < v_MWidthC_1)){\n        float v_tmp_102286 = 0.0f; \n        v__102219 = v_tmp_102286; \n        /* reduce_seq */\n        for (int v_i_102206 = 0; v_i_102206 < 512; v_i_102206 = (1 + v_i_102206)) {\n          float v_tmp_102287 = 0.0f; \n          v__102221 = v_tmp_102287; \n          int v_index_102288 = v__102211[(v_l_id_102205 + (512 * v_MWidthC_1 * v_wg_id_102204) + (v_MWidthC_1 * v_i_102206))]; \n          if (v_index_102288 < 0) {\n            v__102223_0 = v__102221; \n          } else {\n            if (v_index_102288 >= v_VLength_3) {\n              v__102223_0 = v__102221; \n            } else {\n              v__102223_0 = v__102213[v_index_102288]; \n            }\n          }\n          v__102225_0 = mult(v__102223_0, v__102212[(v_l_id_102205 + (512 * v_MWidthC_1 * v_wg_id_102204) + (v_MWidthC_1 * v_i_102206))]); \n          v__102219 = add(v__102225_0, v__102219); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102207 = 0; \n          v__102228[v_l_id_102205] = id(v__102219); \n        }\n        /* end map_seq */\n        v_l_id_102205 = atomic_inc(&(v_work_idx_8718)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8713; \n      v_work_idx_8713 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_102208 = atomic_inc(&(v_work_idx_8713)); \n      while((v_l_id_102208 < 1)){\n        float v_tmp_102291 = 0.0f; \n        v__80974 = v_tmp_102291; \n        /* reduce_seq */\n        for (int v_i_102209 = 0; v_i_102209 < v_MWidthC_1; v_i_102209 = (1 + v_i_102209)) {\n          v__80974 = add(v__80974, v__102228[(v_i_102209 + (v_MWidthC_1 * v_l_id_102208))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102210 = 0; \n          v__102233[v_wg_id_102204] = doubleMultiplyAdd(v__80974, v__102215, v__102214[v_wg_id_102204], v__102216); \n        }\n        /* end map_seq */\n        v_l_id_102208 = atomic_inc(&(v_work_idx_8713)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__102211",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102212",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102213",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102214",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102215",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102216",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__102233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102228",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}