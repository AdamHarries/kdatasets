{
  "name" : "swrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80796, const global float* restrict v__80797, const global float* restrict v__80798, const global float* restrict v__80799, float v__80800, float v__80801, global float* v__80814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80804; \n  float v__80806; \n  /* Private Memory */\n  float v__80808_0;\n  \n  float v__80810_0;\n  \n  for (int v_wg_id_80792 = get_group_id(0); v_wg_id_80792 < v_MHeight_2; v_wg_id_80792 = (v_wg_id_80792 + get_num_groups(0))) {\n    for (int v_l_id_80793 = get_local_id(0); v_l_id_80793 < 8; v_l_id_80793 = (v_l_id_80793 + get_local_size(0))) {\n      float v_tmp_80857 = 0.0f; \n      v__80804 = v_tmp_80857; \n      /* reduce_seq */\n      for (int v_i_80794 = 0; v_i_80794 < v_MWidthC_1; v_i_80794 = (1 + v_i_80794)) {\n        float v_tmp_80858 = 0.0f; \n        v__80806 = v_tmp_80858; \n        int v_index_80859 = v__80796[(v_i_80794 + (8 * v_MWidthC_1 * v_wg_id_80792) + (v_MWidthC_1 * v_l_id_80793))]; \n        if (v_index_80859 < 0) {\n          v__80808_0 = v__80806; \n        } else {\n          if (v_index_80859 >= v_VLength_3) {\n            v__80808_0 = v__80806; \n          } else {\n            v__80808_0 = v__80798[v_index_80859]; \n          }\n        }\n        v__80810_0 = mult(v__80808_0, v__80797[(v_i_80794 + (8 * v_MWidthC_1 * v_wg_id_80792) + (v_MWidthC_1 * v_l_id_80793))]); \n        v__80804 = add(v__80810_0, v__80804); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80795 = 0; \n        v__80814[(v_l_id_80793 + (8 * v_wg_id_80792))] = doubleMultiplyAdd(v__80804, v__80800, v__80799[(v_l_id_80793 + (8 * v_wg_id_80792))], v__80801); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__80796",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80797",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80798",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80799",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__80800",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80801",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__80814",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}