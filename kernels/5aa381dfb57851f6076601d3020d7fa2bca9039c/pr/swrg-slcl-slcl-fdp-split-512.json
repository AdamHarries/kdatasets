{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101067, const global float* restrict v__101068, const global float* restrict v__101069, const global float* restrict v__101070, float v__101071, float v__101072, global float* v__101089, local float* v__101084, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101075; \n  float v__101077; \n  float v__80974; \n  /* Private Memory */\n  float v__101079_0;\n  \n  float v__101081_0;\n  \n  for (int v_wg_id_101060 = get_group_id(0); v_wg_id_101060 < v_MHeight_2; v_wg_id_101060 = (v_wg_id_101060 + get_num_groups(0))) {\n    for (int v_l_id_101061 = get_local_id(0); v_l_id_101061 < v_MWidthC_1; v_l_id_101061 = (v_l_id_101061 + get_local_size(0))) {\n      float v_tmp_101154 = 0.0f; \n      v__101075 = v_tmp_101154; \n      /* reduce_seq */\n      for (int v_i_101062 = 0; v_i_101062 < 512; v_i_101062 = (1 + v_i_101062)) {\n        float v_tmp_101155 = 0.0f; \n        v__101077 = v_tmp_101155; \n        int v_index_101156 = v__101067[(v_l_id_101061 + (512 * v_MWidthC_1 * v_wg_id_101060) + (v_MWidthC_1 * v_i_101062))]; \n        if (v_index_101156 < 0) {\n          v__101079_0 = v__101077; \n        } else {\n          if (v_index_101156 >= v_VLength_3) {\n            v__101079_0 = v__101077; \n          } else {\n            v__101079_0 = v__101069[v_index_101156]; \n          }\n        }\n        v__101081_0 = mult(v__101079_0, v__101068[(v_l_id_101061 + (512 * v_MWidthC_1 * v_wg_id_101060) + (v_MWidthC_1 * v_i_101062))]); \n        v__101075 = add(v__101081_0, v__101075); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101063 = 0; \n        v__101084[v_l_id_101061] = id(v__101075); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101064 = get_local_id(0); \n      float v_tmp_101159 = 0.0f; \n      v__80974 = v_tmp_101159; \n      /* reduce_seq */\n      for (int v_i_101065 = 0; v_i_101065 < v_MWidthC_1; v_i_101065 = (1 + v_i_101065)) {\n        v__80974 = add(v__80974, v__101084[(v_i_101065 + (v_MWidthC_1 * v_l_id_101064))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101066 = 0; \n        v__101089[v_wg_id_101060] = doubleMultiplyAdd(v__80974, v__101071, v__101070[v_wg_id_101060], v__101072); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101067",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101068",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101069",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101070",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101071",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101072",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101089",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101084",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}