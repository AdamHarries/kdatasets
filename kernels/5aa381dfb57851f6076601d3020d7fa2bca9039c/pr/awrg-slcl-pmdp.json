{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80528, const global float* restrict v__80529, const global float* restrict v__80530, const global float* restrict v__80531, float v__80532, float v__80533, global float* v__80547, global int* v__80535, global float* v__80541, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80537; \n  float v__80542; \n  /* Private Memory */\n  float v__80539_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6695 = v__80535; \n    local int v_w_id_80524; \n    if (get_local_id(0) == 0) {\n      v_w_id_80524 = atomic_inc(v_work_idx_6695); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80524 < v_MHeight_2)){\n      for (int v_l_id_80525 = get_local_id(0); v_l_id_80525 < v_MWidthC_1; v_l_id_80525 = (v_l_id_80525 + get_local_size(0))) {\n        float v_tmp_80584 = 0.0f; \n        v__80537 = v_tmp_80584; \n        int v_index_80585 = v__80528[(v_l_id_80525 + (v_MWidthC_1 * v_w_id_80524))]; \n        if (v_index_80585 < 0) {\n          v__80539_0 = v__80537; \n        } else {\n          if (v_index_80585 >= v_VLength_3) {\n            v__80539_0 = v__80537; \n          } else {\n            v__80539_0 = v__80530[v_index_80585]; \n          }\n        }\n        v__80541[(v_l_id_80525 + (v_MWidthC_1 * v_w_id_80524))] = mult(v__80539_0, v__80529[(v_l_id_80525 + (v_MWidthC_1 * v_w_id_80524))]); \n      }\n      float v_tmp_80586 = 0.0f; \n      v__80542 = v_tmp_80586; \n      /* reduce_seq */\n      for (int v_i_80526 = 0; v_i_80526 < v_MWidthC_1; v_i_80526 = (1 + v_i_80526)) {\n        v__80542 = add(v__80542, v__80541[(v_i_80526 + (v_MWidthC_1 * v_w_id_80524))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80527 = 0; \n        v__80547[v_w_id_80524] = doubleMultiplyAdd(v__80542, v__80532, v__80531[v_w_id_80524], v__80533); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_80524 = atomic_inc(v_work_idx_6695); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__80528",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80529",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80530",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80531",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80532",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80533",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80535",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__80541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80547",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}