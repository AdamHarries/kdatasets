{
  "name" : "swrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85245, const global float* restrict v__85246, const global float* restrict v__85247, const global float* restrict v__85248, float v__85249, float v__85250, global float* v__85267, local float* v__85262, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85253; \n  float v__85255; \n  float v__80974; \n  /* Private Memory */\n  float v__85257_0;\n  \n  float v__85259_0;\n  \n  for (int v_wg_id_85238 = get_group_id(0); v_wg_id_85238 < v_MHeight_2; v_wg_id_85238 = (v_wg_id_85238 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7128; \n      v_work_idx_7128 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_85239 = atomic_inc(&(v_work_idx_7128)); \n      while((v_l_id_85239 < v_MWidthC_1)){\n        float v_tmp_85324 = 0.0f; \n        v__85253 = v_tmp_85324; \n        /* reduce_seq */\n        for (int v_i_85240 = 0; v_i_85240 < 16; v_i_85240 = (1 + v_i_85240)) {\n          float v_tmp_85325 = 0.0f; \n          v__85255 = v_tmp_85325; \n          int v_index_85326 = v__85245[(v_l_id_85239 + (16 * v_MWidthC_1 * v_wg_id_85238) + (v_MWidthC_1 * v_i_85240))]; \n          if (v_index_85326 < 0) {\n            v__85257_0 = v__85255; \n          } else {\n            if (v_index_85326 >= v_VLength_3) {\n              v__85257_0 = v__85255; \n            } else {\n              v__85257_0 = v__85247[v_index_85326]; \n            }\n          }\n          v__85259_0 = mult(v__85257_0, v__85246[(v_l_id_85239 + (16 * v_MWidthC_1 * v_wg_id_85238) + (v_MWidthC_1 * v_i_85240))]); \n          v__85253 = add(v__85259_0, v__85253); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85241 = 0; \n          v__85262[v_l_id_85239] = id(v__85253); \n        }\n        /* end map_seq */\n        v_l_id_85239 = atomic_inc(&(v_work_idx_7128)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85242 = get_local_id(0); \n      float v_tmp_85329 = 0.0f; \n      v__80974 = v_tmp_85329; \n      /* reduce_seq */\n      for (int v_i_85243 = 0; v_i_85243 < v_MWidthC_1; v_i_85243 = (1 + v_i_85243)) {\n        v__80974 = add(v__80974, v__85262[(v_i_85243 + (v_MWidthC_1 * v_l_id_85242))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85244 = 0; \n        v__85267[v_wg_id_85238] = doubleMultiplyAdd(v__80974, v__85249, v__85248[v_wg_id_85238], v__85250); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85245",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85246",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85247",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85249",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85250",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85262",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}