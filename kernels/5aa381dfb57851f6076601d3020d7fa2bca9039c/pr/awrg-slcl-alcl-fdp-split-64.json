{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93054, const global float* restrict v__93055, const global float* restrict v__93056, const global float* restrict v__93057, float v__93058, float v__93059, global float* v__93077, global int* v__93061, local float* v__93072, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93063; \n  float v__93065; \n  float v__80974; \n  /* Private Memory */\n  float v__93067_0;\n  \n  float v__93069_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7861 = v__93061; \n    local int v_w_id_93047; \n    if (get_local_id(0) == 0) {\n      v_w_id_93047 = atomic_inc(v_work_idx_7861); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93047 < v_MHeight_2)){\n      for (int v_l_id_93048 = get_local_id(0); v_l_id_93048 < v_MWidthC_1; v_l_id_93048 = (v_l_id_93048 + get_local_size(0))) {\n        float v_tmp_93136 = 0.0f; \n        v__93063 = v_tmp_93136; \n        /* reduce_seq */\n        for (int v_i_93049 = 0; v_i_93049 < 64; v_i_93049 = (1 + v_i_93049)) {\n          float v_tmp_93137 = 0.0f; \n          v__93065 = v_tmp_93137; \n          int v_index_93138 = v__93054[(v_l_id_93048 + (64 * v_MWidthC_1 * v_w_id_93047) + (v_MWidthC_1 * v_i_93049))]; \n          if (v_index_93138 < 0) {\n            v__93067_0 = v__93065; \n          } else {\n            if (v_index_93138 >= v_VLength_3) {\n              v__93067_0 = v__93065; \n            } else {\n              v__93067_0 = v__93056[v_index_93138]; \n            }\n          }\n          v__93069_0 = mult(v__93067_0, v__93055[(v_l_id_93048 + (64 * v_MWidthC_1 * v_w_id_93047) + (v_MWidthC_1 * v_i_93049))]); \n          v__93063 = add(v__93069_0, v__93063); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93050 = 0; \n          v__93072[v_l_id_93048] = id(v__93063); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7855; \n        v_work_idx_7855 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93051 = atomic_inc(&(v_work_idx_7855)); \n        while((v_l_id_93051 < 1)){\n          float v_tmp_93141 = 0.0f; \n          v__80974 = v_tmp_93141; \n          /* reduce_seq */\n          for (int v_i_93052 = 0; v_i_93052 < v_MWidthC_1; v_i_93052 = (1 + v_i_93052)) {\n            v__80974 = add(v__80974, v__93072[(v_i_93052 + (v_MWidthC_1 * v_l_id_93051))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93053 = 0; \n            v__93077[v_w_id_93047] = doubleMultiplyAdd(v__80974, v__93058, v__93057[v_w_id_93047], v__93059); \n          }\n          /* end map_seq */\n          v_l_id_93051 = atomic_inc(&(v_work_idx_7855)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93047 = atomic_inc(v_work_idx_7861); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93054",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93055",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93056",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93058",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93059",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93061",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93077",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93072",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}