{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89213, const global float* restrict v__89214, const global float* restrict v__89215, const global float* restrict v__89216, float v__89217, float v__89218, global float* v__89234, global int* v__89220, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89221; \n  float v__89224; \n  /* Private Memory */\n  float v__89226_0;\n  \n  float v__89228_0;\n  \n  int v__89232_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7500 = v__89220; \n    local int v_w_id_89209; \n    if (get_local_id(0) == 0) {\n      v_w_id_89209 = atomic_inc(v_work_idx_7500); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89209 < v_MHeight_2)){\n      for (int v_l_id_89210 = get_local_id(0); v_l_id_89210 < 32; v_l_id_89210 = (v_l_id_89210 + get_local_size(0))) {\n        float v_tmp_89281 = 0.0f; \n        v__89221 = v_tmp_89281; \n        /* reduce_while_seq */\n        for (int v_i_89211 = 0; v_i_89211 < v_MWidthC_1; v_i_89211 = (1 + v_i_89211)) {\n          v__89232_0 = check(v__89221, v__89213[(v_i_89211 + (32 * v_MWidthC_1 * v_w_id_89209) + (v_MWidthC_1 * v_l_id_89210))]); \n          if (v__89232_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89282 = 0.0f; \n          v__89224 = v_tmp_89282; \n          int v_index_89283 = v__89213[(v_i_89211 + (32 * v_MWidthC_1 * v_w_id_89209) + (v_MWidthC_1 * v_l_id_89210))]; \n          if (v_index_89283 < 0) {\n            v__89226_0 = v__89224; \n          } else {\n            if (v_index_89283 >= v_VLength_3) {\n              v__89226_0 = v__89224; \n            } else {\n              v__89226_0 = v__89215[v_index_89283]; \n            }\n          }\n          v__89228_0 = mult(v__89226_0, v__89214[(v_i_89211 + (32 * v_MWidthC_1 * v_w_id_89209) + (v_MWidthC_1 * v_l_id_89210))]); \n          v__89221 = add(v__89228_0, v__89221); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89212 = 0; \n          v__89234[(v_l_id_89210 + (32 * v_w_id_89209))] = doubleMultiplyAdd(v__89221, v__89217, v__89216[(v_l_id_89210 + (32 * v_w_id_89209))], v__89218); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_89209 = atomic_inc(v_work_idx_7500); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__89213",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89214",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89215",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89216",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__89217",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89218",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89220",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89234",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}