{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__94821, const global float* restrict v__94822, const global float* restrict v__94823, const global float* restrict v__94824, float v__94825, float v__94826, global float* v__94845, local float* v__94840, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94829; \n  float v__94831; \n  float v__80974; \n  /* Private Memory */\n  float v__94833_0;\n  \n  float v__94835_0;\n  \n  int v__94839_0;\n  \n  for (int v_wg_id_94814 = get_group_id(0); v_wg_id_94814 < v_MHeight_2; v_wg_id_94814 = (v_wg_id_94814 + get_num_groups(0))) {\n    for (int v_l_id_94815 = get_local_id(0); v_l_id_94815 < v_MWidthC_1; v_l_id_94815 = (v_l_id_94815 + get_local_size(0))) {\n      float v_tmp_94909 = 0.0f; \n      v__94829 = v_tmp_94909; \n      /* reduce_while_seq */\n      for (int v_i_94816 = 0; v_i_94816 < 128; v_i_94816 = (1 + v_i_94816)) {\n        v__94839_0 = check(v__94829, v__94821[(v_l_id_94815 + (128 * v_MWidthC_1 * v_wg_id_94814) + (v_MWidthC_1 * v_i_94816))]); \n        if (v__94839_0) {\n        } else {\n          break;\n        }\n        float v_tmp_94910 = 0.0f; \n        v__94831 = v_tmp_94910; \n        int v_index_94911 = v__94821[(v_l_id_94815 + (128 * v_MWidthC_1 * v_wg_id_94814) + (v_MWidthC_1 * v_i_94816))]; \n        if (v_index_94911 < 0) {\n          v__94833_0 = v__94831; \n        } else {\n          if (v_index_94911 >= v_VLength_3) {\n            v__94833_0 = v__94831; \n          } else {\n            v__94833_0 = v__94823[v_index_94911]; \n          }\n        }\n        v__94835_0 = mult(v__94833_0, v__94822[(v_l_id_94815 + (128 * v_MWidthC_1 * v_wg_id_94814) + (v_MWidthC_1 * v_i_94816))]); \n        v__94829 = add(v__94835_0, v__94829); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94817 = 0; \n        v__94840[v_l_id_94815] = id(v__94829); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8022; \n      v_work_idx_8022 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_94818 = atomic_inc(&(v_work_idx_8022)); \n      while((v_l_id_94818 < 1)){\n        float v_tmp_94914 = 0.0f; \n        v__80974 = v_tmp_94914; \n        /* reduce_seq */\n        for (int v_i_94819 = 0; v_i_94819 < v_MWidthC_1; v_i_94819 = (1 + v_i_94819)) {\n          v__80974 = add(v__80974, v__94840[(v_i_94819 + (v_MWidthC_1 * v_l_id_94818))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94820 = 0; \n          v__94845[v_wg_id_94814] = doubleMultiplyAdd(v__80974, v__94825, v__94824[v_wg_id_94814], v__94826); \n        }\n        /* end map_seq */\n        v_l_id_94818 = atomic_inc(&(v_work_idx_8022)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94821",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94822",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94823",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94825",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94826",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94840",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}