{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90535, const global float* restrict v__90536, const global float* restrict v__90537, const global float* restrict v__90538, float v__90539, float v__90540, global float* v__90558, global int* v__90542, local float* v__90553, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90544; \n  float v__90546; \n  float v__80974; \n  /* Private Memory */\n  float v__90548_0;\n  \n  float v__90550_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7635 = v__90542; \n    local int v_w_id_90528; \n    if (get_local_id(0) == 0) {\n      v_w_id_90528 = atomic_inc(v_work_idx_7635); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90528 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7633; \n        v_work_idx_7633 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_90529 = atomic_inc(&(v_work_idx_7633)); \n        while((v_l_id_90529 < v_MWidthC_1)){\n          float v_tmp_90609 = 0.0f; \n          v__90544 = v_tmp_90609; \n          /* reduce_seq */\n          for (int v_i_90530 = 0; v_i_90530 < 32; v_i_90530 = (1 + v_i_90530)) {\n            float v_tmp_90610 = 0.0f; \n            v__90546 = v_tmp_90610; \n            int v_index_90611 = v__90535[(v_l_id_90529 + (32 * v_MWidthC_1 * v_w_id_90528) + (v_MWidthC_1 * v_i_90530))]; \n            if (v_index_90611 < 0) {\n              v__90548_0 = v__90546; \n            } else {\n              if (v_index_90611 >= v_VLength_3) {\n                v__90548_0 = v__90546; \n              } else {\n                v__90548_0 = v__90537[v_index_90611]; \n              }\n            }\n            v__90550_0 = mult(v__90548_0, v__90536[(v_l_id_90529 + (32 * v_MWidthC_1 * v_w_id_90528) + (v_MWidthC_1 * v_i_90530))]); \n            v__90544 = add(v__90550_0, v__90544); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90531 = 0; \n            v__90553[v_l_id_90529] = id(v__90544); \n          }\n          /* end map_seq */\n          v_l_id_90529 = atomic_inc(&(v_work_idx_7633)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7628; \n        v_work_idx_7628 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_90532 = atomic_inc(&(v_work_idx_7628)); \n        while((v_l_id_90532 < 1)){\n          float v_tmp_90614 = 0.0f; \n          v__80974 = v_tmp_90614; \n          /* reduce_seq */\n          for (int v_i_90533 = 0; v_i_90533 < v_MWidthC_1; v_i_90533 = (1 + v_i_90533)) {\n            v__80974 = add(v__80974, v__90553[(v_i_90533 + (v_MWidthC_1 * v_l_id_90532))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90534 = 0; \n            v__90558[v_w_id_90528] = doubleMultiplyAdd(v__80974, v__90539, v__90538[v_w_id_90528], v__90540); \n          }\n          /* end map_seq */\n          v_l_id_90532 = atomic_inc(&(v_work_idx_7628)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90528 = atomic_inc(v_work_idx_7635); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90535",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90536",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90537",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90539",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90540",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90542",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90553",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}