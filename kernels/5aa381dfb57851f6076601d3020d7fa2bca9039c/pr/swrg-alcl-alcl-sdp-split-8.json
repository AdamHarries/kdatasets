{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82113, const global float* restrict v__82114, const global float* restrict v__82115, const global float* restrict v__82116, float v__82117, float v__82118, global float* v__82135, global float* v__82125, local float* v__82130, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82121; \n  float v__82126; \n  float v__80974; \n  /* Private Memory */\n  float v__82123_0;\n  \n  for (int v_wg_id_82105 = get_group_id(0); v_wg_id_82105 < v_MHeight_2; v_wg_id_82105 = (v_wg_id_82105 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6836; \n      v_work_idx_6836 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_82106 = atomic_inc(&(v_work_idx_6836)); \n      while((v_l_id_82106 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_82107 = 0; v_i_82107 < 8; v_i_82107 = (1 + v_i_82107)) {\n          float v_tmp_82188 = 0.0f; \n          v__82121 = v_tmp_82188; \n          int v_index_82189 = v__82113[(v_l_id_82106 + (8 * v_MWidthC_1 * v_wg_id_82105) + (v_MWidthC_1 * v_i_82107))]; \n          if (v_index_82189 < 0) {\n            v__82123_0 = v__82121; \n          } else {\n            if (v_index_82189 >= v_VLength_3) {\n              v__82123_0 = v__82121; \n            } else {\n              v__82123_0 = v__82115[v_index_82189]; \n            }\n          }\n          v__82125[(v_i_82107 + (8 * v_MWidthC_1 * v_wg_id_82105) + (8 * v_l_id_82106))] = mult(v__82123_0, v__82114[(v_l_id_82106 + (8 * v_MWidthC_1 * v_wg_id_82105) + (v_MWidthC_1 * v_i_82107))]); \n        }\n        /* end map_seq */\n        float v_tmp_82190 = 0.0f; \n        v__82126 = v_tmp_82190; \n        /* reduce_seq */\n        for (int v_i_82108 = 0; v_i_82108 < 8; v_i_82108 = (1 + v_i_82108)) {\n          v__82126 = add(v__82126, v__82125[(v_i_82108 + (8 * v_MWidthC_1 * v_wg_id_82105) + (8 * v_l_id_82106))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82109 = 0; \n          v__82130[v_l_id_82106] = id(v__82126); \n        }\n        /* end map_seq */\n        v_l_id_82106 = atomic_inc(&(v_work_idx_6836)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6830; \n      v_work_idx_6830 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_82110 = atomic_inc(&(v_work_idx_6830)); \n      while((v_l_id_82110 < 1)){\n        float v_tmp_82193 = 0.0f; \n        v__80974 = v_tmp_82193; \n        /* reduce_seq */\n        for (int v_i_82111 = 0; v_i_82111 < v_MWidthC_1; v_i_82111 = (1 + v_i_82111)) {\n          v__80974 = add(v__80974, v__82130[(v_i_82111 + (v_MWidthC_1 * v_l_id_82110))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82112 = 0; \n          v__82135[v_wg_id_82105] = doubleMultiplyAdd(v__80974, v__82117, v__82116[v_wg_id_82105], v__82118); \n        }\n        /* end map_seq */\n        v_l_id_82110 = atomic_inc(&(v_work_idx_6830)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82113",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82114",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82115",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82117",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82118",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82125",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__82135",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82130",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}