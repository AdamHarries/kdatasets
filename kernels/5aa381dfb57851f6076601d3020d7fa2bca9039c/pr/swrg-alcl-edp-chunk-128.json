{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95067, const global float* restrict v__95068, const global float* restrict v__95069, const global float* restrict v__95070, float v__95071, float v__95072, global float* v__95087, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95074; \n  float v__95077; \n  /* Private Memory */\n  float v__95079_0;\n  \n  float v__95081_0;\n  \n  int v__95085_0;\n  \n  for (int v_wg_id_95063 = get_group_id(0); v_wg_id_95063 < v_MHeight_2; v_wg_id_95063 = (v_wg_id_95063 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8045; \n      v_work_idx_8045 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_95064 = atomic_inc(&(v_work_idx_8045)); \n      while((v_l_id_95064 < 128)){\n        float v_tmp_95132 = 0.0f; \n        v__95074 = v_tmp_95132; \n        /* reduce_while_seq */\n        for (int v_i_95065 = 0; v_i_95065 < v_MWidthC_1; v_i_95065 = (1 + v_i_95065)) {\n          v__95085_0 = check(v__95074, v__95067[(v_i_95065 + (128 * v_MWidthC_1 * v_wg_id_95063) + (v_MWidthC_1 * v_l_id_95064))]); \n          if (v__95085_0) {\n          } else {\n            break;\n          }\n          float v_tmp_95133 = 0.0f; \n          v__95077 = v_tmp_95133; \n          int v_index_95134 = v__95067[(v_i_95065 + (128 * v_MWidthC_1 * v_wg_id_95063) + (v_MWidthC_1 * v_l_id_95064))]; \n          if (v_index_95134 < 0) {\n            v__95079_0 = v__95077; \n          } else {\n            if (v_index_95134 >= v_VLength_3) {\n              v__95079_0 = v__95077; \n            } else {\n              v__95079_0 = v__95069[v_index_95134]; \n            }\n          }\n          v__95081_0 = mult(v__95079_0, v__95068[(v_i_95065 + (128 * v_MWidthC_1 * v_wg_id_95063) + (v_MWidthC_1 * v_l_id_95064))]); \n          v__95074 = add(v__95081_0, v__95074); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95066 = 0; \n          v__95087[(v_l_id_95064 + (128 * v_wg_id_95063))] = doubleMultiplyAdd(v__95074, v__95071, v__95070[(v_l_id_95064 + (128 * v_wg_id_95063))], v__95072); \n        }\n        /* end map_seq */\n        v_l_id_95064 = atomic_inc(&(v_work_idx_8045)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95067",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95068",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95069",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95070",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__95071",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95072",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95087",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}