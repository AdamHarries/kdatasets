{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__103964, const global float* restrict v__103965, const global float* restrict v__103966, const global float* restrict v__103967, float v__103968, float v__103969, global float* v__103989, global int* v__103971, local float* v__103984, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103973; \n  float v__103975; \n  float v__80974; \n  /* Private Memory */\n  float v__103977_0;\n  \n  float v__103979_0;\n  \n  int v__103983_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8894 = v__103971; \n    local int v_w_id_103957; \n    if (get_local_id(0) == 0) {\n      v_w_id_103957 = atomic_inc(v_work_idx_8894); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103957 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8892; \n        v_work_idx_8892 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_103958 = atomic_inc(&(v_work_idx_8892)); \n        while((v_l_id_103958 < v_MWidthC_1)){\n          float v_tmp_104043 = 0.0f; \n          v__103973 = v_tmp_104043; \n          /* reduce_while_seq */\n          for (int v_i_103959 = 0; v_i_103959 < 512; v_i_103959 = (1 + v_i_103959)) {\n            v__103983_0 = check(v__103973, v__103964[(v_l_id_103958 + (512 * v_MWidthC_1 * v_w_id_103957) + (v_MWidthC_1 * v_i_103959))]); \n            if (v__103983_0) {\n            } else {\n              break;\n            }\n            float v_tmp_104044 = 0.0f; \n            v__103975 = v_tmp_104044; \n            int v_index_104045 = v__103964[(v_l_id_103958 + (512 * v_MWidthC_1 * v_w_id_103957) + (v_MWidthC_1 * v_i_103959))]; \n            if (v_index_104045 < 0) {\n              v__103977_0 = v__103975; \n            } else {\n              if (v_index_104045 >= v_VLength_3) {\n                v__103977_0 = v__103975; \n              } else {\n                v__103977_0 = v__103966[v_index_104045]; \n              }\n            }\n            v__103979_0 = mult(v__103977_0, v__103965[(v_l_id_103958 + (512 * v_MWidthC_1 * v_w_id_103957) + (v_MWidthC_1 * v_i_103959))]); \n            v__103973 = add(v__103979_0, v__103973); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103960 = 0; \n            v__103984[v_l_id_103958] = id(v__103973); \n          }\n          /* end map_seq */\n          v_l_id_103958 = atomic_inc(&(v_work_idx_8892)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8887; \n        v_work_idx_8887 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_103961 = atomic_inc(&(v_work_idx_8887)); \n        while((v_l_id_103961 < 1)){\n          float v_tmp_104048 = 0.0f; \n          v__80974 = v_tmp_104048; \n          /* reduce_seq */\n          for (int v_i_103962 = 0; v_i_103962 < v_MWidthC_1; v_i_103962 = (1 + v_i_103962)) {\n            v__80974 = add(v__80974, v__103984[(v_i_103962 + (v_MWidthC_1 * v_l_id_103961))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103963 = 0; \n            v__103989[v_w_id_103957] = doubleMultiplyAdd(v__80974, v__103968, v__103967[v_w_id_103957], v__103969); \n          }\n          /* end map_seq */\n          v_l_id_103961 = atomic_inc(&(v_work_idx_8887)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103957 = atomic_inc(v_work_idx_8894); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__103964",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103965",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103966",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103967",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103968",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103969",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103971",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103984",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}