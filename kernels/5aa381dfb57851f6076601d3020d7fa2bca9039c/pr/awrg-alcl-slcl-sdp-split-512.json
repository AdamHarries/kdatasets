{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103481, const global float* restrict v__103482, const global float* restrict v__103483, const global float* restrict v__103484, float v__103485, float v__103486, global float* v__103504, global int* v__103488, global float* v__103494, local float* v__103499, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103490; \n  float v__103495; \n  float v__80974; \n  /* Private Memory */\n  float v__103492_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8840 = v__103488; \n    local int v_w_id_103473; \n    if (get_local_id(0) == 0) {\n      v_w_id_103473 = atomic_inc(v_work_idx_8840); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103473 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8838; \n        v_work_idx_8838 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_103474 = atomic_inc(&(v_work_idx_8838)); \n        while((v_l_id_103474 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_103475 = 0; v_i_103475 < 512; v_i_103475 = (1 + v_i_103475)) {\n            float v_tmp_103559 = 0.0f; \n            v__103490 = v_tmp_103559; \n            int v_index_103560 = v__103481[(v_l_id_103474 + (512 * v_MWidthC_1 * v_w_id_103473) + (v_MWidthC_1 * v_i_103475))]; \n            if (v_index_103560 < 0) {\n              v__103492_0 = v__103490; \n            } else {\n              if (v_index_103560 >= v_VLength_3) {\n                v__103492_0 = v__103490; \n              } else {\n                v__103492_0 = v__103483[v_index_103560]; \n              }\n            }\n            v__103494[(v_i_103475 + (512 * v_MWidthC_1 * v_w_id_103473) + (512 * v_l_id_103474))] = mult(v__103492_0, v__103482[(v_l_id_103474 + (512 * v_MWidthC_1 * v_w_id_103473) + (v_MWidthC_1 * v_i_103475))]); \n          }\n          /* end map_seq */\n          float v_tmp_103561 = 0.0f; \n          v__103495 = v_tmp_103561; \n          /* reduce_seq */\n          for (int v_i_103476 = 0; v_i_103476 < 512; v_i_103476 = (1 + v_i_103476)) {\n            v__103495 = add(v__103495, v__103494[(v_i_103476 + (512 * v_MWidthC_1 * v_w_id_103473) + (512 * v_l_id_103474))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103477 = 0; \n            v__103499[v_l_id_103474] = id(v__103495); \n          }\n          /* end map_seq */\n          v_l_id_103474 = atomic_inc(&(v_work_idx_8838)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103478 = get_local_id(0); \n        float v_tmp_103564 = 0.0f; \n        v__80974 = v_tmp_103564; \n        /* reduce_seq */\n        for (int v_i_103479 = 0; v_i_103479 < v_MWidthC_1; v_i_103479 = (1 + v_i_103479)) {\n          v__80974 = add(v__80974, v__103499[(v_i_103479 + (v_MWidthC_1 * v_l_id_103478))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103480 = 0; \n          v__103504[v_w_id_103473] = doubleMultiplyAdd(v__80974, v__103485, v__103484[v_w_id_103473], v__103486); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103473 = atomic_inc(v_work_idx_8840); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103481",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103482",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103483",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103485",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103486",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103488",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__103494",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__103504",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103499",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}