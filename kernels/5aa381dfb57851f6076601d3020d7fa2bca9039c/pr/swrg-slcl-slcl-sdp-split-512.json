{
  "name" : "swrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100961, const global float* restrict v__100962, const global float* restrict v__100963, const global float* restrict v__100964, float v__100965, float v__100966, global float* v__100983, global float* v__100973, local float* v__100978, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100969; \n  float v__100974; \n  float v__80974; \n  /* Private Memory */\n  float v__100971_0;\n  \n  for (int v_wg_id_100953 = get_group_id(0); v_wg_id_100953 < v_MHeight_2; v_wg_id_100953 = (v_wg_id_100953 + get_num_groups(0))) {\n    for (int v_l_id_100954 = get_local_id(0); v_l_id_100954 < v_MWidthC_1; v_l_id_100954 = (v_l_id_100954 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_100955 = 0; v_i_100955 < 512; v_i_100955 = (1 + v_i_100955)) {\n        float v_tmp_101048 = 0.0f; \n        v__100969 = v_tmp_101048; \n        int v_index_101049 = v__100961[(v_l_id_100954 + (512 * v_MWidthC_1 * v_wg_id_100953) + (v_MWidthC_1 * v_i_100955))]; \n        if (v_index_101049 < 0) {\n          v__100971_0 = v__100969; \n        } else {\n          if (v_index_101049 >= v_VLength_3) {\n            v__100971_0 = v__100969; \n          } else {\n            v__100971_0 = v__100963[v_index_101049]; \n          }\n        }\n        v__100973[(v_i_100955 + (512 * v_MWidthC_1 * v_wg_id_100953) + (512 * v_l_id_100954))] = mult(v__100971_0, v__100962[(v_l_id_100954 + (512 * v_MWidthC_1 * v_wg_id_100953) + (v_MWidthC_1 * v_i_100955))]); \n      }\n      /* end map_seq */\n      float v_tmp_101050 = 0.0f; \n      v__100974 = v_tmp_101050; \n      /* reduce_seq */\n      for (int v_i_100956 = 0; v_i_100956 < 512; v_i_100956 = (1 + v_i_100956)) {\n        v__100974 = add(v__100974, v__100973[(v_i_100956 + (512 * v_MWidthC_1 * v_wg_id_100953) + (512 * v_l_id_100954))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100957 = 0; \n        v__100978[v_l_id_100954] = id(v__100974); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_100958 = get_local_id(0); \n      float v_tmp_101053 = 0.0f; \n      v__80974 = v_tmp_101053; \n      /* reduce_seq */\n      for (int v_i_100959 = 0; v_i_100959 < v_MWidthC_1; v_i_100959 = (1 + v_i_100959)) {\n        v__80974 = add(v__80974, v__100978[(v_i_100959 + (v_MWidthC_1 * v_l_id_100958))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100960 = 0; \n        v__100983[v_wg_id_100953] = doubleMultiplyAdd(v__80974, v__100965, v__100964[v_wg_id_100953], v__100966); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100961",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100962",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100963",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100964",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100965",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100966",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100973",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__100983",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100978",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}