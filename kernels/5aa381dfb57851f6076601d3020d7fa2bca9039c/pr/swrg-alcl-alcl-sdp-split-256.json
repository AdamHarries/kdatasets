{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98783, const global float* restrict v__98784, const global float* restrict v__98785, const global float* restrict v__98786, float v__98787, float v__98788, global float* v__98805, global float* v__98795, local float* v__98800, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98791; \n  float v__98796; \n  float v__80974; \n  /* Private Memory */\n  float v__98793_0;\n  \n  for (int v_wg_id_98775 = get_group_id(0); v_wg_id_98775 < v_MHeight_2; v_wg_id_98775 = (v_wg_id_98775 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8396; \n      v_work_idx_8396 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98776 = atomic_inc(&(v_work_idx_8396)); \n      while((v_l_id_98776 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_98777 = 0; v_i_98777 < 256; v_i_98777 = (1 + v_i_98777)) {\n          float v_tmp_98858 = 0.0f; \n          v__98791 = v_tmp_98858; \n          int v_index_98859 = v__98783[(v_l_id_98776 + (256 * v_MWidthC_1 * v_wg_id_98775) + (v_MWidthC_1 * v_i_98777))]; \n          if (v_index_98859 < 0) {\n            v__98793_0 = v__98791; \n          } else {\n            if (v_index_98859 >= v_VLength_3) {\n              v__98793_0 = v__98791; \n            } else {\n              v__98793_0 = v__98785[v_index_98859]; \n            }\n          }\n          v__98795[(v_i_98777 + (256 * v_MWidthC_1 * v_wg_id_98775) + (256 * v_l_id_98776))] = mult(v__98793_0, v__98784[(v_l_id_98776 + (256 * v_MWidthC_1 * v_wg_id_98775) + (v_MWidthC_1 * v_i_98777))]); \n        }\n        /* end map_seq */\n        float v_tmp_98860 = 0.0f; \n        v__98796 = v_tmp_98860; \n        /* reduce_seq */\n        for (int v_i_98778 = 0; v_i_98778 < 256; v_i_98778 = (1 + v_i_98778)) {\n          v__98796 = add(v__98796, v__98795[(v_i_98778 + (256 * v_MWidthC_1 * v_wg_id_98775) + (256 * v_l_id_98776))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98779 = 0; \n          v__98800[v_l_id_98776] = id(v__98796); \n        }\n        /* end map_seq */\n        v_l_id_98776 = atomic_inc(&(v_work_idx_8396)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8390; \n      v_work_idx_8390 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98780 = atomic_inc(&(v_work_idx_8390)); \n      while((v_l_id_98780 < 1)){\n        float v_tmp_98863 = 0.0f; \n        v__80974 = v_tmp_98863; \n        /* reduce_seq */\n        for (int v_i_98781 = 0; v_i_98781 < v_MWidthC_1; v_i_98781 = (1 + v_i_98781)) {\n          v__80974 = add(v__80974, v__98800[(v_i_98781 + (v_MWidthC_1 * v_l_id_98780))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98782 = 0; \n          v__98805[v_wg_id_98775] = doubleMultiplyAdd(v__80974, v__98787, v__98786[v_wg_id_98775], v__98788); \n        }\n        /* end map_seq */\n        v_l_id_98780 = atomic_inc(&(v_work_idx_8390)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98783",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98784",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98785",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98786",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98787",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98788",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98795",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98800",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}