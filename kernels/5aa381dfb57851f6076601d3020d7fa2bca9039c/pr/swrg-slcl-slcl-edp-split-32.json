{
  "name" : "swrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__87837, const global float* restrict v__87838, const global float* restrict v__87839, const global float* restrict v__87840, float v__87841, float v__87842, global float* v__87861, local float* v__87856, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87845; \n  float v__87847; \n  float v__80974; \n  /* Private Memory */\n  float v__87849_0;\n  \n  float v__87851_0;\n  \n  int v__87855_0;\n  \n  for (int v_wg_id_87830 = get_group_id(0); v_wg_id_87830 < v_MHeight_2; v_wg_id_87830 = (v_wg_id_87830 + get_num_groups(0))) {\n    for (int v_l_id_87831 = get_local_id(0); v_l_id_87831 < v_MWidthC_1; v_l_id_87831 = (v_l_id_87831 + get_local_size(0))) {\n      float v_tmp_87929 = 0.0f; \n      v__87845 = v_tmp_87929; \n      /* reduce_while_seq */\n      for (int v_i_87832 = 0; v_i_87832 < 32; v_i_87832 = (1 + v_i_87832)) {\n        v__87855_0 = check(v__87845, v__87837[(v_l_id_87831 + (32 * v_MWidthC_1 * v_wg_id_87830) + (v_MWidthC_1 * v_i_87832))]); \n        if (v__87855_0) {\n        } else {\n          break;\n        }\n        float v_tmp_87930 = 0.0f; \n        v__87847 = v_tmp_87930; \n        int v_index_87931 = v__87837[(v_l_id_87831 + (32 * v_MWidthC_1 * v_wg_id_87830) + (v_MWidthC_1 * v_i_87832))]; \n        if (v_index_87931 < 0) {\n          v__87849_0 = v__87847; \n        } else {\n          if (v_index_87931 >= v_VLength_3) {\n            v__87849_0 = v__87847; \n          } else {\n            v__87849_0 = v__87839[v_index_87931]; \n          }\n        }\n        v__87851_0 = mult(v__87849_0, v__87838[(v_l_id_87831 + (32 * v_MWidthC_1 * v_wg_id_87830) + (v_MWidthC_1 * v_i_87832))]); \n        v__87845 = add(v__87851_0, v__87845); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87833 = 0; \n        v__87856[v_l_id_87831] = id(v__87845); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_87834 = get_local_id(0); \n      float v_tmp_87934 = 0.0f; \n      v__80974 = v_tmp_87934; \n      /* reduce_seq */\n      for (int v_i_87835 = 0; v_i_87835 < v_MWidthC_1; v_i_87835 = (1 + v_i_87835)) {\n        v__80974 = add(v__80974, v__87856[(v_i_87835 + (v_MWidthC_1 * v_l_id_87834))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87836 = 0; \n        v__87861[v_wg_id_87830] = doubleMultiplyAdd(v__80974, v__87841, v__87840[v_wg_id_87830], v__87842); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87837",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87838",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__87861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87856",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}