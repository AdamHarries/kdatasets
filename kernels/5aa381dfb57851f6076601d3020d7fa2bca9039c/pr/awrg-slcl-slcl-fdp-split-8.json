{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82735, const global float* restrict v__82736, const global float* restrict v__82737, const global float* restrict v__82738, float v__82739, float v__82740, global float* v__82758, global int* v__82742, local float* v__82753, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82744; \n  float v__82746; \n  float v__80974; \n  /* Private Memory */\n  float v__82748_0;\n  \n  float v__82750_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6895 = v__82742; \n    local int v_w_id_82728; \n    if (get_local_id(0) == 0) {\n      v_w_id_82728 = atomic_inc(v_work_idx_6895); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82728 < v_MHeight_2)){\n      for (int v_l_id_82729 = get_local_id(0); v_l_id_82729 < v_MWidthC_1; v_l_id_82729 = (v_l_id_82729 + get_local_size(0))) {\n        float v_tmp_82821 = 0.0f; \n        v__82744 = v_tmp_82821; \n        /* reduce_seq */\n        for (int v_i_82730 = 0; v_i_82730 < 8; v_i_82730 = (1 + v_i_82730)) {\n          float v_tmp_82822 = 0.0f; \n          v__82746 = v_tmp_82822; \n          int v_index_82823 = v__82735[(v_l_id_82729 + (8 * v_MWidthC_1 * v_w_id_82728) + (v_MWidthC_1 * v_i_82730))]; \n          if (v_index_82823 < 0) {\n            v__82748_0 = v__82746; \n          } else {\n            if (v_index_82823 >= v_VLength_3) {\n              v__82748_0 = v__82746; \n            } else {\n              v__82748_0 = v__82737[v_index_82823]; \n            }\n          }\n          v__82750_0 = mult(v__82748_0, v__82736[(v_l_id_82729 + (8 * v_MWidthC_1 * v_w_id_82728) + (v_MWidthC_1 * v_i_82730))]); \n          v__82744 = add(v__82750_0, v__82744); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82731 = 0; \n          v__82753[v_l_id_82729] = id(v__82744); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_82732 = get_local_id(0); \n        float v_tmp_82826 = 0.0f; \n        v__80974 = v_tmp_82826; \n        /* reduce_seq */\n        for (int v_i_82733 = 0; v_i_82733 < v_MWidthC_1; v_i_82733 = (1 + v_i_82733)) {\n          v__80974 = add(v__80974, v__82753[(v_i_82733 + (v_MWidthC_1 * v_l_id_82732))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82734 = 0; \n          v__82758[v_w_id_82728] = doubleMultiplyAdd(v__80974, v__82739, v__82738[v_w_id_82728], v__82740); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82728 = atomic_inc(v_work_idx_6895); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82735",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82736",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82737",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82738",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82739",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82740",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82742",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82758",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82753",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}