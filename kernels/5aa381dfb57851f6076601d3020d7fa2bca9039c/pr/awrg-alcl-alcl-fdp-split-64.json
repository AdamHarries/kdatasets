{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93869, const global float* restrict v__93870, const global float* restrict v__93871, const global float* restrict v__93872, float v__93873, float v__93874, global float* v__93892, global int* v__93876, local float* v__93887, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93878; \n  float v__93880; \n  float v__80974; \n  /* Private Memory */\n  float v__93882_0;\n  \n  float v__93884_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7947 = v__93876; \n    local int v_w_id_93862; \n    if (get_local_id(0) == 0) {\n      v_w_id_93862 = atomic_inc(v_work_idx_7947); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93862 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7945; \n        v_work_idx_7945 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93863 = atomic_inc(&(v_work_idx_7945)); \n        while((v_l_id_93863 < v_MWidthC_1)){\n          float v_tmp_93943 = 0.0f; \n          v__93878 = v_tmp_93943; \n          /* reduce_seq */\n          for (int v_i_93864 = 0; v_i_93864 < 64; v_i_93864 = (1 + v_i_93864)) {\n            float v_tmp_93944 = 0.0f; \n            v__93880 = v_tmp_93944; \n            int v_index_93945 = v__93869[(v_l_id_93863 + (64 * v_MWidthC_1 * v_w_id_93862) + (v_MWidthC_1 * v_i_93864))]; \n            if (v_index_93945 < 0) {\n              v__93882_0 = v__93880; \n            } else {\n              if (v_index_93945 >= v_VLength_3) {\n                v__93882_0 = v__93880; \n              } else {\n                v__93882_0 = v__93871[v_index_93945]; \n              }\n            }\n            v__93884_0 = mult(v__93882_0, v__93870[(v_l_id_93863 + (64 * v_MWidthC_1 * v_w_id_93862) + (v_MWidthC_1 * v_i_93864))]); \n            v__93878 = add(v__93884_0, v__93878); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93865 = 0; \n            v__93887[v_l_id_93863] = id(v__93878); \n          }\n          /* end map_seq */\n          v_l_id_93863 = atomic_inc(&(v_work_idx_7945)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7940; \n        v_work_idx_7940 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93866 = atomic_inc(&(v_work_idx_7940)); \n        while((v_l_id_93866 < 1)){\n          float v_tmp_93948 = 0.0f; \n          v__80974 = v_tmp_93948; \n          /* reduce_seq */\n          for (int v_i_93867 = 0; v_i_93867 < v_MWidthC_1; v_i_93867 = (1 + v_i_93867)) {\n            v__80974 = add(v__80974, v__93887[(v_i_93867 + (v_MWidthC_1 * v_l_id_93866))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93868 = 0; \n            v__93892[v_w_id_93862] = doubleMultiplyAdd(v__80974, v__93873, v__93872[v_w_id_93862], v__93874); \n          }\n          /* end map_seq */\n          v_l_id_93866 = atomic_inc(&(v_work_idx_7940)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93862 = atomic_inc(v_work_idx_7947); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93869",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93870",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93871",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93873",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93874",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93876",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93887",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}