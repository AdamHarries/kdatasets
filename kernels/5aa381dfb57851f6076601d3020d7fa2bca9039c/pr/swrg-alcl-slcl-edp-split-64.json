{
  "name" : "swrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__92011, const global float* restrict v__92012, const global float* restrict v__92013, const global float* restrict v__92014, float v__92015, float v__92016, global float* v__92035, local float* v__92030, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92019; \n  float v__92021; \n  float v__80974; \n  /* Private Memory */\n  float v__92023_0;\n  \n  float v__92025_0;\n  \n  int v__92029_0;\n  \n  for (int v_wg_id_92004 = get_group_id(0); v_wg_id_92004 < v_MHeight_2; v_wg_id_92004 = (v_wg_id_92004 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7761; \n      v_work_idx_7761 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_92005 = atomic_inc(&(v_work_idx_7761)); \n      while((v_l_id_92005 < v_MWidthC_1)){\n        float v_tmp_92095 = 0.0f; \n        v__92019 = v_tmp_92095; \n        /* reduce_while_seq */\n        for (int v_i_92006 = 0; v_i_92006 < 64; v_i_92006 = (1 + v_i_92006)) {\n          v__92029_0 = check(v__92019, v__92011[(v_l_id_92005 + (64 * v_MWidthC_1 * v_wg_id_92004) + (v_MWidthC_1 * v_i_92006))]); \n          if (v__92029_0) {\n          } else {\n            break;\n          }\n          float v_tmp_92096 = 0.0f; \n          v__92021 = v_tmp_92096; \n          int v_index_92097 = v__92011[(v_l_id_92005 + (64 * v_MWidthC_1 * v_wg_id_92004) + (v_MWidthC_1 * v_i_92006))]; \n          if (v_index_92097 < 0) {\n            v__92023_0 = v__92021; \n          } else {\n            if (v_index_92097 >= v_VLength_3) {\n              v__92023_0 = v__92021; \n            } else {\n              v__92023_0 = v__92013[v_index_92097]; \n            }\n          }\n          v__92025_0 = mult(v__92023_0, v__92012[(v_l_id_92005 + (64 * v_MWidthC_1 * v_wg_id_92004) + (v_MWidthC_1 * v_i_92006))]); \n          v__92019 = add(v__92025_0, v__92019); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92007 = 0; \n          v__92030[v_l_id_92005] = id(v__92019); \n        }\n        /* end map_seq */\n        v_l_id_92005 = atomic_inc(&(v_work_idx_7761)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92008 = get_local_id(0); \n      float v_tmp_92100 = 0.0f; \n      v__80974 = v_tmp_92100; \n      /* reduce_seq */\n      for (int v_i_92009 = 0; v_i_92009 < v_MWidthC_1; v_i_92009 = (1 + v_i_92009)) {\n        v__80974 = add(v__80974, v__92030[(v_i_92009 + (v_MWidthC_1 * v_l_id_92008))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92010 = 0; \n        v__92035[v_wg_id_92004] = doubleMultiplyAdd(v__80974, v__92015, v__92014[v_wg_id_92004], v__92016); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__92011",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92012",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92013",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92014",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92015",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92016",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92035",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92030",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}