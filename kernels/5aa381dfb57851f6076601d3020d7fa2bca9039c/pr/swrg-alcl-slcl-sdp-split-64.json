{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91815, const global float* restrict v__91816, const global float* restrict v__91817, const global float* restrict v__91818, float v__91819, float v__91820, global float* v__91837, global float* v__91827, local float* v__91832, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91823; \n  float v__91828; \n  float v__80974; \n  /* Private Memory */\n  float v__91825_0;\n  \n  for (int v_wg_id_91807 = get_group_id(0); v_wg_id_91807 < v_MHeight_2; v_wg_id_91807 = (v_wg_id_91807 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7743; \n      v_work_idx_7743 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_91808 = atomic_inc(&(v_work_idx_7743)); \n      while((v_l_id_91808 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_91809 = 0; v_i_91809 < 64; v_i_91809 = (1 + v_i_91809)) {\n          float v_tmp_91894 = 0.0f; \n          v__91823 = v_tmp_91894; \n          int v_index_91895 = v__91815[(v_l_id_91808 + (64 * v_MWidthC_1 * v_wg_id_91807) + (v_MWidthC_1 * v_i_91809))]; \n          if (v_index_91895 < 0) {\n            v__91825_0 = v__91823; \n          } else {\n            if (v_index_91895 >= v_VLength_3) {\n              v__91825_0 = v__91823; \n            } else {\n              v__91825_0 = v__91817[v_index_91895]; \n            }\n          }\n          v__91827[(v_i_91809 + (64 * v_MWidthC_1 * v_wg_id_91807) + (64 * v_l_id_91808))] = mult(v__91825_0, v__91816[(v_l_id_91808 + (64 * v_MWidthC_1 * v_wg_id_91807) + (v_MWidthC_1 * v_i_91809))]); \n        }\n        /* end map_seq */\n        float v_tmp_91896 = 0.0f; \n        v__91828 = v_tmp_91896; \n        /* reduce_seq */\n        for (int v_i_91810 = 0; v_i_91810 < 64; v_i_91810 = (1 + v_i_91810)) {\n          v__91828 = add(v__91828, v__91827[(v_i_91810 + (64 * v_MWidthC_1 * v_wg_id_91807) + (64 * v_l_id_91808))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91811 = 0; \n          v__91832[v_l_id_91808] = id(v__91828); \n        }\n        /* end map_seq */\n        v_l_id_91808 = atomic_inc(&(v_work_idx_7743)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_91812 = get_local_id(0); \n      float v_tmp_91899 = 0.0f; \n      v__80974 = v_tmp_91899; \n      /* reduce_seq */\n      for (int v_i_91813 = 0; v_i_91813 < v_MWidthC_1; v_i_91813 = (1 + v_i_91813)) {\n        v__80974 = add(v__80974, v__91832[(v_i_91813 + (v_MWidthC_1 * v_l_id_91812))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91814 = 0; \n        v__91837[v_wg_id_91807] = doubleMultiplyAdd(v__80974, v__91819, v__91818[v_wg_id_91807], v__91820); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__91815",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91816",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91817",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91818",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91819",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91820",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91827",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__91837",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91832",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}