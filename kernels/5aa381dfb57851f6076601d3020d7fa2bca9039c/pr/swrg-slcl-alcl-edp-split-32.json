{
  "name" : "swrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__88153, const global float* restrict v__88154, const global float* restrict v__88155, const global float* restrict v__88156, float v__88157, float v__88158, global float* v__88177, local float* v__88172, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88161; \n  float v__88163; \n  float v__80974; \n  /* Private Memory */\n  float v__88165_0;\n  \n  float v__88167_0;\n  \n  int v__88171_0;\n  \n  for (int v_wg_id_88146 = get_group_id(0); v_wg_id_88146 < v_MHeight_2; v_wg_id_88146 = (v_wg_id_88146 + get_num_groups(0))) {\n    for (int v_l_id_88147 = get_local_id(0); v_l_id_88147 < v_MWidthC_1; v_l_id_88147 = (v_l_id_88147 + get_local_size(0))) {\n      float v_tmp_88241 = 0.0f; \n      v__88161 = v_tmp_88241; \n      /* reduce_while_seq */\n      for (int v_i_88148 = 0; v_i_88148 < 32; v_i_88148 = (1 + v_i_88148)) {\n        v__88171_0 = check(v__88161, v__88153[(v_l_id_88147 + (32 * v_MWidthC_1 * v_wg_id_88146) + (v_MWidthC_1 * v_i_88148))]); \n        if (v__88171_0) {\n        } else {\n          break;\n        }\n        float v_tmp_88242 = 0.0f; \n        v__88163 = v_tmp_88242; \n        int v_index_88243 = v__88153[(v_l_id_88147 + (32 * v_MWidthC_1 * v_wg_id_88146) + (v_MWidthC_1 * v_i_88148))]; \n        if (v_index_88243 < 0) {\n          v__88165_0 = v__88163; \n        } else {\n          if (v_index_88243 >= v_VLength_3) {\n            v__88165_0 = v__88163; \n          } else {\n            v__88165_0 = v__88155[v_index_88243]; \n          }\n        }\n        v__88167_0 = mult(v__88165_0, v__88154[(v_l_id_88147 + (32 * v_MWidthC_1 * v_wg_id_88146) + (v_MWidthC_1 * v_i_88148))]); \n        v__88161 = add(v__88167_0, v__88161); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88149 = 0; \n        v__88172[v_l_id_88147] = id(v__88161); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7398; \n      v_work_idx_7398 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88150 = atomic_inc(&(v_work_idx_7398)); \n      while((v_l_id_88150 < 1)){\n        float v_tmp_88246 = 0.0f; \n        v__80974 = v_tmp_88246; \n        /* reduce_seq */\n        for (int v_i_88151 = 0; v_i_88151 < v_MWidthC_1; v_i_88151 = (1 + v_i_88151)) {\n          v__80974 = add(v__80974, v__88172[(v_i_88151 + (v_MWidthC_1 * v_l_id_88150))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88152 = 0; \n          v__88177[v_wg_id_88146] = doubleMultiplyAdd(v__80974, v__88157, v__88156[v_wg_id_88146], v__88158); \n        }\n        /* end map_seq */\n        v_l_id_88150 = atomic_inc(&(v_work_idx_7398)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88153",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88154",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88177",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88172",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}