{
  "name" : "swrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80956, const global float* restrict v__80957, const global float* restrict v__80958, const global float* restrict v__80959, float v__80960, float v__80961, global float* v__80979, global float* v__80968, local float* v__80973, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80964; \n  float v__80969; \n  float v__80974; \n  /* Private Memory */\n  float v__80966_0;\n  \n  for (int v_wg_id_80948 = get_group_id(0); v_wg_id_80948 < v_MHeight_2; v_wg_id_80948 = (v_wg_id_80948 + get_num_groups(0))) {\n    for (int v_l_id_80949 = get_local_id(0); v_l_id_80949 < v_MWidthC_1; v_l_id_80949 = (v_l_id_80949 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_80950 = 0; v_i_80950 < 8; v_i_80950 = (1 + v_i_80950)) {\n        float v_tmp_81044 = 0.0f; \n        v__80964 = v_tmp_81044; \n        int v_index_81045 = v__80956[(v_l_id_80949 + (8 * v_MWidthC_1 * v_wg_id_80948) + (v_MWidthC_1 * v_i_80950))]; \n        if (v_index_81045 < 0) {\n          v__80966_0 = v__80964; \n        } else {\n          if (v_index_81045 >= v_VLength_3) {\n            v__80966_0 = v__80964; \n          } else {\n            v__80966_0 = v__80958[v_index_81045]; \n          }\n        }\n        v__80968[(v_i_80950 + (8 * v_MWidthC_1 * v_wg_id_80948) + (8 * v_l_id_80949))] = mult(v__80966_0, v__80957[(v_l_id_80949 + (8 * v_MWidthC_1 * v_wg_id_80948) + (v_MWidthC_1 * v_i_80950))]); \n      }\n      /* end map_seq */\n      float v_tmp_81046 = 0.0f; \n      v__80969 = v_tmp_81046; \n      /* reduce_seq */\n      for (int v_i_80951 = 0; v_i_80951 < 8; v_i_80951 = (1 + v_i_80951)) {\n        v__80969 = add(v__80969, v__80968[(v_i_80951 + (8 * v_MWidthC_1 * v_wg_id_80948) + (8 * v_l_id_80949))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80952 = 0; \n        v__80973[v_l_id_80949] = id(v__80969); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_80953 = get_local_id(0); \n      float v_tmp_81049 = 0.0f; \n      v__80974 = v_tmp_81049; \n      /* reduce_seq */\n      for (int v_i_80954 = 0; v_i_80954 < v_MWidthC_1; v_i_80954 = (1 + v_i_80954)) {\n        v__80974 = add(v__80974, v__80973[(v_i_80954 + (v_MWidthC_1 * v_l_id_80953))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80955 = 0; \n        v__80979[v_wg_id_80948] = doubleMultiplyAdd(v__80974, v__80960, v__80959[v_wg_id_80948], v__80961); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80956",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80957",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80958",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80960",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80961",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80968",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80979",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80973",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}