{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99997, const global float* restrict v__99998, const global float* restrict v__99999, const global float* restrict v__100000, float v__100001, float v__100002, global float* v__100016, global int* v__100004, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100006; \n  float v__100008; \n  /* Private Memory */\n  float v__100010_0;\n  \n  float v__100012_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8510 = v__100004; \n    local int v_w_id_99993; \n    if (get_local_id(0) == 0) {\n      v_w_id_99993 = atomic_inc(v_work_idx_8510); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99993 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8508; \n        v_work_idx_8508 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_99994 = atomic_inc(&(v_work_idx_8508)); \n        while((v_l_id_99994 < 256)){\n          float v_tmp_100053 = 0.0f; \n          v__100006 = v_tmp_100053; \n          /* reduce_seq */\n          for (int v_i_99995 = 0; v_i_99995 < v_MWidthC_1; v_i_99995 = (1 + v_i_99995)) {\n            float v_tmp_100054 = 0.0f; \n            v__100008 = v_tmp_100054; \n            int v_index_100055 = v__99997[(v_i_99995 + (256 * v_MWidthC_1 * v_w_id_99993) + (v_MWidthC_1 * v_l_id_99994))]; \n            if (v_index_100055 < 0) {\n              v__100010_0 = v__100008; \n            } else {\n              if (v_index_100055 >= v_VLength_3) {\n                v__100010_0 = v__100008; \n              } else {\n                v__100010_0 = v__99999[v_index_100055]; \n              }\n            }\n            v__100012_0 = mult(v__100010_0, v__99998[(v_i_99995 + (256 * v_MWidthC_1 * v_w_id_99993) + (v_MWidthC_1 * v_l_id_99994))]); \n            v__100006 = add(v__100012_0, v__100006); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99996 = 0; \n            v__100016[(v_l_id_99994 + (256 * v_w_id_99993))] = doubleMultiplyAdd(v__100006, v__100001, v__100000[(v_l_id_99994 + (256 * v_w_id_99993))], v__100002); \n          }\n          /* end map_seq */\n          v_l_id_99994 = atomic_inc(&(v_work_idx_8508)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99993 = atomic_inc(v_work_idx_8510); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99997",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99998",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99999",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100000",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__100001",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100002",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100004",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100016",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}