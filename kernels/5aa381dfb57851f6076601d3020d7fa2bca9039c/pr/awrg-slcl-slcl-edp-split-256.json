{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99510, const global float* restrict v__99511, const global float* restrict v__99512, const global float* restrict v__99513, float v__99514, float v__99515, global float* v__99535, global int* v__99517, local float* v__99530, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99519; \n  float v__99521; \n  float v__80974; \n  /* Private Memory */\n  float v__99523_0;\n  \n  float v__99525_0;\n  \n  int v__99529_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8464 = v__99517; \n    local int v_w_id_99503; \n    if (get_local_id(0) == 0) {\n      v_w_id_99503 = atomic_inc(v_work_idx_8464); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99503 < v_MHeight_2)){\n      for (int v_l_id_99504 = get_local_id(0); v_l_id_99504 < v_MWidthC_1; v_l_id_99504 = (v_l_id_99504 + get_local_size(0))) {\n        float v_tmp_99601 = 0.0f; \n        v__99519 = v_tmp_99601; \n        /* reduce_while_seq */\n        for (int v_i_99505 = 0; v_i_99505 < 256; v_i_99505 = (1 + v_i_99505)) {\n          v__99529_0 = check(v__99519, v__99510[(v_l_id_99504 + (256 * v_MWidthC_1 * v_w_id_99503) + (v_MWidthC_1 * v_i_99505))]); \n          if (v__99529_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99602 = 0.0f; \n          v__99521 = v_tmp_99602; \n          int v_index_99603 = v__99510[(v_l_id_99504 + (256 * v_MWidthC_1 * v_w_id_99503) + (v_MWidthC_1 * v_i_99505))]; \n          if (v_index_99603 < 0) {\n            v__99523_0 = v__99521; \n          } else {\n            if (v_index_99603 >= v_VLength_3) {\n              v__99523_0 = v__99521; \n            } else {\n              v__99523_0 = v__99512[v_index_99603]; \n            }\n          }\n          v__99525_0 = mult(v__99523_0, v__99511[(v_l_id_99504 + (256 * v_MWidthC_1 * v_w_id_99503) + (v_MWidthC_1 * v_i_99505))]); \n          v__99519 = add(v__99525_0, v__99519); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99506 = 0; \n          v__99530[v_l_id_99504] = id(v__99519); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99507 = get_local_id(0); \n        float v_tmp_99606 = 0.0f; \n        v__80974 = v_tmp_99606; \n        /* reduce_seq */\n        for (int v_i_99508 = 0; v_i_99508 < v_MWidthC_1; v_i_99508 = (1 + v_i_99508)) {\n          v__80974 = add(v__80974, v__99530[(v_i_99508 + (v_MWidthC_1 * v_l_id_99507))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99509 = 0; \n          v__99535[v_w_id_99503] = doubleMultiplyAdd(v__80974, v__99514, v__99513[v_w_id_99503], v__99515); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99503 = atomic_inc(v_work_idx_8464); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99510",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99511",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99512",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99513",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99514",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99515",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99517",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99535",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99530",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}