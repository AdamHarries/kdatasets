{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96287, const global float* restrict v__96288, const global float* restrict v__96289, const global float* restrict v__96290, float v__96291, float v__96292, global float* v__96310, global int* v__96294, global float* v__96300, local float* v__96305, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96296; \n  float v__96301; \n  float v__80974; \n  /* Private Memory */\n  float v__96298_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8163 = v__96294; \n    local int v_w_id_96279; \n    if (get_local_id(0) == 0) {\n      v_w_id_96279 = atomic_inc(v_work_idx_8163); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96279 < v_MHeight_2)){\n      for (int v_l_id_96280 = get_local_id(0); v_l_id_96280 < v_MWidthC_1; v_l_id_96280 = (v_l_id_96280 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_96281 = 0; v_i_96281 < 128; v_i_96281 = (1 + v_i_96281)) {\n          float v_tmp_96369 = 0.0f; \n          v__96296 = v_tmp_96369; \n          int v_index_96370 = v__96287[(v_l_id_96280 + (128 * v_MWidthC_1 * v_w_id_96279) + (v_MWidthC_1 * v_i_96281))]; \n          if (v_index_96370 < 0) {\n            v__96298_0 = v__96296; \n          } else {\n            if (v_index_96370 >= v_VLength_3) {\n              v__96298_0 = v__96296; \n            } else {\n              v__96298_0 = v__96289[v_index_96370]; \n            }\n          }\n          v__96300[(v_i_96281 + (128 * v_MWidthC_1 * v_w_id_96279) + (128 * v_l_id_96280))] = mult(v__96298_0, v__96288[(v_l_id_96280 + (128 * v_MWidthC_1 * v_w_id_96279) + (v_MWidthC_1 * v_i_96281))]); \n        }\n        /* end map_seq */\n        float v_tmp_96371 = 0.0f; \n        v__96301 = v_tmp_96371; \n        /* reduce_seq */\n        for (int v_i_96282 = 0; v_i_96282 < 128; v_i_96282 = (1 + v_i_96282)) {\n          v__96301 = add(v__96301, v__96300[(v_i_96282 + (128 * v_MWidthC_1 * v_w_id_96279) + (128 * v_l_id_96280))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96283 = 0; \n          v__96305[v_l_id_96280] = id(v__96301); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8156; \n        v_work_idx_8156 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_96284 = atomic_inc(&(v_work_idx_8156)); \n        while((v_l_id_96284 < 1)){\n          float v_tmp_96374 = 0.0f; \n          v__80974 = v_tmp_96374; \n          /* reduce_seq */\n          for (int v_i_96285 = 0; v_i_96285 < v_MWidthC_1; v_i_96285 = (1 + v_i_96285)) {\n            v__80974 = add(v__80974, v__96305[(v_i_96285 + (v_MWidthC_1 * v_l_id_96284))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96286 = 0; \n            v__96310[v_w_id_96279] = doubleMultiplyAdd(v__80974, v__96291, v__96290[v_w_id_96279], v__96292); \n          }\n          /* end map_seq */\n          v_l_id_96284 = atomic_inc(&(v_work_idx_8156)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96279 = atomic_inc(v_work_idx_8163); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96287",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96288",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96289",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96290",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96291",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96292",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96294",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__96300",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__96310",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96305",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}