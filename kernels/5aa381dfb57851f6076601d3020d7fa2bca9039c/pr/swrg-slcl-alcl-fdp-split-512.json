{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101387, const global float* restrict v__101388, const global float* restrict v__101389, const global float* restrict v__101390, float v__101391, float v__101392, global float* v__101409, local float* v__101404, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101395; \n  float v__101397; \n  float v__80974; \n  /* Private Memory */\n  float v__101399_0;\n  \n  float v__101401_0;\n  \n  for (int v_wg_id_101380 = get_group_id(0); v_wg_id_101380 < v_MHeight_2; v_wg_id_101380 = (v_wg_id_101380 + get_num_groups(0))) {\n    for (int v_l_id_101381 = get_local_id(0); v_l_id_101381 < v_MWidthC_1; v_l_id_101381 = (v_l_id_101381 + get_local_size(0))) {\n      float v_tmp_101470 = 0.0f; \n      v__101395 = v_tmp_101470; \n      /* reduce_seq */\n      for (int v_i_101382 = 0; v_i_101382 < 512; v_i_101382 = (1 + v_i_101382)) {\n        float v_tmp_101471 = 0.0f; \n        v__101397 = v_tmp_101471; \n        int v_index_101472 = v__101387[(v_l_id_101381 + (512 * v_MWidthC_1 * v_wg_id_101380) + (v_MWidthC_1 * v_i_101382))]; \n        if (v_index_101472 < 0) {\n          v__101399_0 = v__101397; \n        } else {\n          if (v_index_101472 >= v_VLength_3) {\n            v__101399_0 = v__101397; \n          } else {\n            v__101399_0 = v__101389[v_index_101472]; \n          }\n        }\n        v__101401_0 = mult(v__101399_0, v__101388[(v_l_id_101381 + (512 * v_MWidthC_1 * v_wg_id_101380) + (v_MWidthC_1 * v_i_101382))]); \n        v__101395 = add(v__101401_0, v__101395); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101383 = 0; \n        v__101404[v_l_id_101381] = id(v__101395); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8637; \n      v_work_idx_8637 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_101384 = atomic_inc(&(v_work_idx_8637)); \n      while((v_l_id_101384 < 1)){\n        float v_tmp_101475 = 0.0f; \n        v__80974 = v_tmp_101475; \n        /* reduce_seq */\n        for (int v_i_101385 = 0; v_i_101385 < v_MWidthC_1; v_i_101385 = (1 + v_i_101385)) {\n          v__80974 = add(v__80974, v__101404[(v_i_101385 + (v_MWidthC_1 * v_l_id_101384))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101386 = 0; \n          v__101409[v_wg_id_101380] = doubleMultiplyAdd(v__80974, v__101391, v__101390[v_wg_id_101380], v__101392); \n        }\n        /* end map_seq */\n        v_l_id_101384 = atomic_inc(&(v_work_idx_8637)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101387",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101388",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101389",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101390",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101391",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101392",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101409",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101404",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}