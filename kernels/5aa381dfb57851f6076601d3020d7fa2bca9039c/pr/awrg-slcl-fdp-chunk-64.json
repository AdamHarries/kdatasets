{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92474, const global float* restrict v__92475, const global float* restrict v__92476, const global float* restrict v__92477, float v__92478, float v__92479, global float* v__92493, global int* v__92481, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92483; \n  float v__92485; \n  /* Private Memory */\n  float v__92487_0;\n  \n  float v__92489_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7806 = v__92481; \n    local int v_w_id_92470; \n    if (get_local_id(0) == 0) {\n      v_w_id_92470 = atomic_inc(v_work_idx_7806); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92470 < v_MHeight_2)){\n      for (int v_l_id_92471 = get_local_id(0); v_l_id_92471 < 64; v_l_id_92471 = (v_l_id_92471 + get_local_size(0))) {\n        float v_tmp_92534 = 0.0f; \n        v__92483 = v_tmp_92534; \n        /* reduce_seq */\n        for (int v_i_92472 = 0; v_i_92472 < v_MWidthC_1; v_i_92472 = (1 + v_i_92472)) {\n          float v_tmp_92535 = 0.0f; \n          v__92485 = v_tmp_92535; \n          int v_index_92536 = v__92474[(v_i_92472 + (64 * v_MWidthC_1 * v_w_id_92470) + (v_MWidthC_1 * v_l_id_92471))]; \n          if (v_index_92536 < 0) {\n            v__92487_0 = v__92485; \n          } else {\n            if (v_index_92536 >= v_VLength_3) {\n              v__92487_0 = v__92485; \n            } else {\n              v__92487_0 = v__92476[v_index_92536]; \n            }\n          }\n          v__92489_0 = mult(v__92487_0, v__92475[(v_i_92472 + (64 * v_MWidthC_1 * v_w_id_92470) + (v_MWidthC_1 * v_l_id_92471))]); \n          v__92483 = add(v__92489_0, v__92483); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92473 = 0; \n          v__92493[(v_l_id_92471 + (64 * v_w_id_92470))] = doubleMultiplyAdd(v__92483, v__92478, v__92477[(v_l_id_92471 + (64 * v_w_id_92470))], v__92479); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_92470 = atomic_inc(v_work_idx_7806); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92474",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92475",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92476",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92477",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__92478",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92479",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92481",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__92493",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}