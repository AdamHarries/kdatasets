{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100537, const global float* restrict v__100538, const global float* restrict v__100539, const global float* restrict v__100540, float v__100541, float v__100542, global float* v__100560, global int* v__100544, local float* v__100555, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100546; \n  float v__100548; \n  float v__80974; \n  /* Private Memory */\n  float v__100550_0;\n  \n  float v__100552_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8571 = v__100544; \n    local int v_w_id_100530; \n    if (get_local_id(0) == 0) {\n      v_w_id_100530 = atomic_inc(v_work_idx_8571); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100530 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8569; \n        v_work_idx_8569 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_100531 = atomic_inc(&(v_work_idx_8569)); \n        while((v_l_id_100531 < v_MWidthC_1)){\n          float v_tmp_100611 = 0.0f; \n          v__100546 = v_tmp_100611; \n          /* reduce_seq */\n          for (int v_i_100532 = 0; v_i_100532 < 256; v_i_100532 = (1 + v_i_100532)) {\n            float v_tmp_100612 = 0.0f; \n            v__100548 = v_tmp_100612; \n            int v_index_100613 = v__100537[(v_l_id_100531 + (256 * v_MWidthC_1 * v_w_id_100530) + (v_MWidthC_1 * v_i_100532))]; \n            if (v_index_100613 < 0) {\n              v__100550_0 = v__100548; \n            } else {\n              if (v_index_100613 >= v_VLength_3) {\n                v__100550_0 = v__100548; \n              } else {\n                v__100550_0 = v__100539[v_index_100613]; \n              }\n            }\n            v__100552_0 = mult(v__100550_0, v__100538[(v_l_id_100531 + (256 * v_MWidthC_1 * v_w_id_100530) + (v_MWidthC_1 * v_i_100532))]); \n            v__100546 = add(v__100552_0, v__100546); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100533 = 0; \n            v__100555[v_l_id_100531] = id(v__100546); \n          }\n          /* end map_seq */\n          v_l_id_100531 = atomic_inc(&(v_work_idx_8569)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8564; \n        v_work_idx_8564 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_100534 = atomic_inc(&(v_work_idx_8564)); \n        while((v_l_id_100534 < 1)){\n          float v_tmp_100616 = 0.0f; \n          v__80974 = v_tmp_100616; \n          /* reduce_seq */\n          for (int v_i_100535 = 0; v_i_100535 < v_MWidthC_1; v_i_100535 = (1 + v_i_100535)) {\n            v__80974 = add(v__80974, v__100555[(v_i_100535 + (v_MWidthC_1 * v_l_id_100534))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100536 = 0; \n            v__100560[v_w_id_100530] = doubleMultiplyAdd(v__80974, v__100541, v__100540[v_w_id_100530], v__100542); \n          }\n          /* end map_seq */\n          v_l_id_100534 = atomic_inc(&(v_work_idx_8564)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100530 = atomic_inc(v_work_idx_8571); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100537",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100538",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100539",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100541",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100542",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100544",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100555",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}