{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95449, const global float* restrict v__95450, const global float* restrict v__95451, const global float* restrict v__95452, float v__95453, float v__95454, global float* v__95471, global float* v__95461, local float* v__95466, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95457; \n  float v__95462; \n  float v__80974; \n  /* Private Memory */\n  float v__95459_0;\n  \n  for (int v_wg_id_95441 = get_group_id(0); v_wg_id_95441 < v_MHeight_2; v_wg_id_95441 = (v_wg_id_95441 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8084; \n      v_work_idx_8084 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_95442 = atomic_inc(&(v_work_idx_8084)); \n      while((v_l_id_95442 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_95443 = 0; v_i_95443 < 128; v_i_95443 = (1 + v_i_95443)) {\n          float v_tmp_95524 = 0.0f; \n          v__95457 = v_tmp_95524; \n          int v_index_95525 = v__95449[(v_l_id_95442 + (128 * v_MWidthC_1 * v_wg_id_95441) + (v_MWidthC_1 * v_i_95443))]; \n          if (v_index_95525 < 0) {\n            v__95459_0 = v__95457; \n          } else {\n            if (v_index_95525 >= v_VLength_3) {\n              v__95459_0 = v__95457; \n            } else {\n              v__95459_0 = v__95451[v_index_95525]; \n            }\n          }\n          v__95461[(v_i_95443 + (128 * v_MWidthC_1 * v_wg_id_95441) + (128 * v_l_id_95442))] = mult(v__95459_0, v__95450[(v_l_id_95442 + (128 * v_MWidthC_1 * v_wg_id_95441) + (v_MWidthC_1 * v_i_95443))]); \n        }\n        /* end map_seq */\n        float v_tmp_95526 = 0.0f; \n        v__95462 = v_tmp_95526; \n        /* reduce_seq */\n        for (int v_i_95444 = 0; v_i_95444 < 128; v_i_95444 = (1 + v_i_95444)) {\n          v__95462 = add(v__95462, v__95461[(v_i_95444 + (128 * v_MWidthC_1 * v_wg_id_95441) + (128 * v_l_id_95442))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95445 = 0; \n          v__95466[v_l_id_95442] = id(v__95462); \n        }\n        /* end map_seq */\n        v_l_id_95442 = atomic_inc(&(v_work_idx_8084)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8078; \n      v_work_idx_8078 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_95446 = atomic_inc(&(v_work_idx_8078)); \n      while((v_l_id_95446 < 1)){\n        float v_tmp_95529 = 0.0f; \n        v__80974 = v_tmp_95529; \n        /* reduce_seq */\n        for (int v_i_95447 = 0; v_i_95447 < v_MWidthC_1; v_i_95447 = (1 + v_i_95447)) {\n          v__80974 = add(v__80974, v__95466[(v_i_95447 + (v_MWidthC_1 * v_l_id_95446))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95448 = 0; \n          v__95471[v_wg_id_95441] = doubleMultiplyAdd(v__80974, v__95453, v__95452[v_wg_id_95441], v__95454); \n        }\n        /* end map_seq */\n        v_l_id_95446 = atomic_inc(&(v_work_idx_8078)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95449",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95450",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95451",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95452",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95453",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95454",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95461",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95466",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}