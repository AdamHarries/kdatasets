{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88399, const global float* restrict v__88400, const global float* restrict v__88401, const global float* restrict v__88402, float v__88403, float v__88404, global float* v__88419, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88406; \n  float v__88409; \n  /* Private Memory */\n  float v__88411_0;\n  \n  float v__88413_0;\n  \n  int v__88417_0;\n  \n  for (int v_wg_id_88395 = get_group_id(0); v_wg_id_88395 < v_MHeight_2; v_wg_id_88395 = (v_wg_id_88395 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7421; \n      v_work_idx_7421 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88396 = atomic_inc(&(v_work_idx_7421)); \n      while((v_l_id_88396 < 32)){\n        float v_tmp_88464 = 0.0f; \n        v__88406 = v_tmp_88464; \n        /* reduce_while_seq */\n        for (int v_i_88397 = 0; v_i_88397 < v_MWidthC_1; v_i_88397 = (1 + v_i_88397)) {\n          v__88417_0 = check(v__88406, v__88399[(v_i_88397 + (32 * v_MWidthC_1 * v_wg_id_88395) + (v_MWidthC_1 * v_l_id_88396))]); \n          if (v__88417_0) {\n          } else {\n            break;\n          }\n          float v_tmp_88465 = 0.0f; \n          v__88409 = v_tmp_88465; \n          int v_index_88466 = v__88399[(v_i_88397 + (32 * v_MWidthC_1 * v_wg_id_88395) + (v_MWidthC_1 * v_l_id_88396))]; \n          if (v_index_88466 < 0) {\n            v__88411_0 = v__88409; \n          } else {\n            if (v_index_88466 >= v_VLength_3) {\n              v__88411_0 = v__88409; \n            } else {\n              v__88411_0 = v__88401[v_index_88466]; \n            }\n          }\n          v__88413_0 = mult(v__88411_0, v__88400[(v_i_88397 + (32 * v_MWidthC_1 * v_wg_id_88395) + (v_MWidthC_1 * v_l_id_88396))]); \n          v__88406 = add(v__88413_0, v__88406); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88398 = 0; \n          v__88419[(v_l_id_88396 + (32 * v_wg_id_88395))] = doubleMultiplyAdd(v__88406, v__88403, v__88402[(v_l_id_88396 + (32 * v_wg_id_88395))], v__88404); \n        }\n        /* end map_seq */\n        v_l_id_88396 = atomic_inc(&(v_work_idx_7421)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88399",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88400",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88401",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88402",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__88403",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88404",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88419",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}