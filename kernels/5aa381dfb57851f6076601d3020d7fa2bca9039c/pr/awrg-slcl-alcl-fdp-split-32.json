{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89720, const global float* restrict v__89721, const global float* restrict v__89722, const global float* restrict v__89723, float v__89724, float v__89725, global float* v__89743, global int* v__89727, local float* v__89738, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89729; \n  float v__89731; \n  float v__80974; \n  /* Private Memory */\n  float v__89733_0;\n  \n  float v__89735_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7549 = v__89727; \n    local int v_w_id_89713; \n    if (get_local_id(0) == 0) {\n      v_w_id_89713 = atomic_inc(v_work_idx_7549); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89713 < v_MHeight_2)){\n      for (int v_l_id_89714 = get_local_id(0); v_l_id_89714 < v_MWidthC_1; v_l_id_89714 = (v_l_id_89714 + get_local_size(0))) {\n        float v_tmp_89802 = 0.0f; \n        v__89729 = v_tmp_89802; \n        /* reduce_seq */\n        for (int v_i_89715 = 0; v_i_89715 < 32; v_i_89715 = (1 + v_i_89715)) {\n          float v_tmp_89803 = 0.0f; \n          v__89731 = v_tmp_89803; \n          int v_index_89804 = v__89720[(v_l_id_89714 + (32 * v_MWidthC_1 * v_w_id_89713) + (v_MWidthC_1 * v_i_89715))]; \n          if (v_index_89804 < 0) {\n            v__89733_0 = v__89731; \n          } else {\n            if (v_index_89804 >= v_VLength_3) {\n              v__89733_0 = v__89731; \n            } else {\n              v__89733_0 = v__89722[v_index_89804]; \n            }\n          }\n          v__89735_0 = mult(v__89733_0, v__89721[(v_l_id_89714 + (32 * v_MWidthC_1 * v_w_id_89713) + (v_MWidthC_1 * v_i_89715))]); \n          v__89729 = add(v__89735_0, v__89729); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89716 = 0; \n          v__89738[v_l_id_89714] = id(v__89729); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7543; \n        v_work_idx_7543 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_89717 = atomic_inc(&(v_work_idx_7543)); \n        while((v_l_id_89717 < 1)){\n          float v_tmp_89807 = 0.0f; \n          v__80974 = v_tmp_89807; \n          /* reduce_seq */\n          for (int v_i_89718 = 0; v_i_89718 < v_MWidthC_1; v_i_89718 = (1 + v_i_89718)) {\n            v__80974 = add(v__80974, v__89738[(v_i_89718 + (v_MWidthC_1 * v_l_id_89717))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89719 = 0; \n            v__89743[v_w_id_89713] = doubleMultiplyAdd(v__80974, v__89724, v__89723[v_w_id_89713], v__89725); \n          }\n          /* end map_seq */\n          v_l_id_89717 = atomic_inc(&(v_work_idx_7543)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89713 = atomic_inc(v_work_idx_7549); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89720",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89721",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89722",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89723",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89724",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89725",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89727",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89738",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}