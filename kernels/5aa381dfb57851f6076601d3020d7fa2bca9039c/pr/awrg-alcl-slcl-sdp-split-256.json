{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100147, const global float* restrict v__100148, const global float* restrict v__100149, const global float* restrict v__100150, float v__100151, float v__100152, global float* v__100170, global int* v__100154, global float* v__100160, local float* v__100165, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100156; \n  float v__100161; \n  float v__80974; \n  /* Private Memory */\n  float v__100158_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8528 = v__100154; \n    local int v_w_id_100139; \n    if (get_local_id(0) == 0) {\n      v_w_id_100139 = atomic_inc(v_work_idx_8528); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100139 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8526; \n        v_work_idx_8526 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_100140 = atomic_inc(&(v_work_idx_8526)); \n        while((v_l_id_100140 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100141 = 0; v_i_100141 < 256; v_i_100141 = (1 + v_i_100141)) {\n            float v_tmp_100225 = 0.0f; \n            v__100156 = v_tmp_100225; \n            int v_index_100226 = v__100147[(v_l_id_100140 + (256 * v_MWidthC_1 * v_w_id_100139) + (v_MWidthC_1 * v_i_100141))]; \n            if (v_index_100226 < 0) {\n              v__100158_0 = v__100156; \n            } else {\n              if (v_index_100226 >= v_VLength_3) {\n                v__100158_0 = v__100156; \n              } else {\n                v__100158_0 = v__100149[v_index_100226]; \n              }\n            }\n            v__100160[(v_i_100141 + (256 * v_MWidthC_1 * v_w_id_100139) + (256 * v_l_id_100140))] = mult(v__100158_0, v__100148[(v_l_id_100140 + (256 * v_MWidthC_1 * v_w_id_100139) + (v_MWidthC_1 * v_i_100141))]); \n          }\n          /* end map_seq */\n          float v_tmp_100227 = 0.0f; \n          v__100161 = v_tmp_100227; \n          /* reduce_seq */\n          for (int v_i_100142 = 0; v_i_100142 < 256; v_i_100142 = (1 + v_i_100142)) {\n            v__100161 = add(v__100161, v__100160[(v_i_100142 + (256 * v_MWidthC_1 * v_w_id_100139) + (256 * v_l_id_100140))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100143 = 0; \n            v__100165[v_l_id_100140] = id(v__100161); \n          }\n          /* end map_seq */\n          v_l_id_100140 = atomic_inc(&(v_work_idx_8526)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100144 = get_local_id(0); \n        float v_tmp_100230 = 0.0f; \n        v__80974 = v_tmp_100230; \n        /* reduce_seq */\n        for (int v_i_100145 = 0; v_i_100145 < v_MWidthC_1; v_i_100145 = (1 + v_i_100145)) {\n          v__80974 = add(v__80974, v__100165[(v_i_100145 + (v_MWidthC_1 * v_l_id_100144))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100146 = 0; \n          v__100170[v_w_id_100139] = doubleMultiplyAdd(v__80974, v__100151, v__100150[v_w_id_100139], v__100152); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100139 = atomic_inc(v_work_idx_8528); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100147",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100148",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100149",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100151",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100152",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100154",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__100160",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__100170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100165",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}