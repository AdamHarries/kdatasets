{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92209, const global float* restrict v__92210, const global float* restrict v__92211, const global float* restrict v__92212, float v__92213, float v__92214, global float* v__92231, local float* v__92226, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92217; \n  float v__92219; \n  float v__80974; \n  /* Private Memory */\n  float v__92221_0;\n  \n  float v__92223_0;\n  \n  for (int v_wg_id_92202 = get_group_id(0); v_wg_id_92202 < v_MHeight_2; v_wg_id_92202 = (v_wg_id_92202 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7782; \n      v_work_idx_7782 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_92203 = atomic_inc(&(v_work_idx_7782)); \n      while((v_l_id_92203 < v_MWidthC_1)){\n        float v_tmp_92284 = 0.0f; \n        v__92217 = v_tmp_92284; \n        /* reduce_seq */\n        for (int v_i_92204 = 0; v_i_92204 < 64; v_i_92204 = (1 + v_i_92204)) {\n          float v_tmp_92285 = 0.0f; \n          v__92219 = v_tmp_92285; \n          int v_index_92286 = v__92209[(v_l_id_92203 + (64 * v_MWidthC_1 * v_wg_id_92202) + (v_MWidthC_1 * v_i_92204))]; \n          if (v_index_92286 < 0) {\n            v__92221_0 = v__92219; \n          } else {\n            if (v_index_92286 >= v_VLength_3) {\n              v__92221_0 = v__92219; \n            } else {\n              v__92221_0 = v__92211[v_index_92286]; \n            }\n          }\n          v__92223_0 = mult(v__92221_0, v__92210[(v_l_id_92203 + (64 * v_MWidthC_1 * v_wg_id_92202) + (v_MWidthC_1 * v_i_92204))]); \n          v__92217 = add(v__92223_0, v__92217); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92205 = 0; \n          v__92226[v_l_id_92203] = id(v__92217); \n        }\n        /* end map_seq */\n        v_l_id_92203 = atomic_inc(&(v_work_idx_7782)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7777; \n      v_work_idx_7777 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_92206 = atomic_inc(&(v_work_idx_7777)); \n      while((v_l_id_92206 < 1)){\n        float v_tmp_92289 = 0.0f; \n        v__80974 = v_tmp_92289; \n        /* reduce_seq */\n        for (int v_i_92207 = 0; v_i_92207 < v_MWidthC_1; v_i_92207 = (1 + v_i_92207)) {\n          v__80974 = add(v__80974, v__92226[(v_i_92207 + (v_MWidthC_1 * v_l_id_92206))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92208 = 0; \n          v__92231[v_wg_id_92202] = doubleMultiplyAdd(v__80974, v__92213, v__92212[v_wg_id_92202], v__92214); \n        }\n        /* end map_seq */\n        v_l_id_92206 = atomic_inc(&(v_work_idx_7777)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92209",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92210",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92226",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}