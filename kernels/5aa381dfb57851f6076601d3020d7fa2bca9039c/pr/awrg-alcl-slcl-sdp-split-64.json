{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93479, const global float* restrict v__93480, const global float* restrict v__93481, const global float* restrict v__93482, float v__93483, float v__93484, global float* v__93502, global int* v__93486, global float* v__93492, local float* v__93497, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93488; \n  float v__93493; \n  float v__80974; \n  /* Private Memory */\n  float v__93490_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7904 = v__93486; \n    local int v_w_id_93471; \n    if (get_local_id(0) == 0) {\n      v_w_id_93471 = atomic_inc(v_work_idx_7904); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93471 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7902; \n        v_work_idx_7902 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93472 = atomic_inc(&(v_work_idx_7902)); \n        while((v_l_id_93472 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_93473 = 0; v_i_93473 < 64; v_i_93473 = (1 + v_i_93473)) {\n            float v_tmp_93557 = 0.0f; \n            v__93488 = v_tmp_93557; \n            int v_index_93558 = v__93479[(v_l_id_93472 + (64 * v_MWidthC_1 * v_w_id_93471) + (v_MWidthC_1 * v_i_93473))]; \n            if (v_index_93558 < 0) {\n              v__93490_0 = v__93488; \n            } else {\n              if (v_index_93558 >= v_VLength_3) {\n                v__93490_0 = v__93488; \n              } else {\n                v__93490_0 = v__93481[v_index_93558]; \n              }\n            }\n            v__93492[(v_i_93473 + (64 * v_MWidthC_1 * v_w_id_93471) + (64 * v_l_id_93472))] = mult(v__93490_0, v__93480[(v_l_id_93472 + (64 * v_MWidthC_1 * v_w_id_93471) + (v_MWidthC_1 * v_i_93473))]); \n          }\n          /* end map_seq */\n          float v_tmp_93559 = 0.0f; \n          v__93493 = v_tmp_93559; \n          /* reduce_seq */\n          for (int v_i_93474 = 0; v_i_93474 < 64; v_i_93474 = (1 + v_i_93474)) {\n            v__93493 = add(v__93493, v__93492[(v_i_93474 + (64 * v_MWidthC_1 * v_w_id_93471) + (64 * v_l_id_93472))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93475 = 0; \n            v__93497[v_l_id_93472] = id(v__93493); \n          }\n          /* end map_seq */\n          v_l_id_93472 = atomic_inc(&(v_work_idx_7902)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93476 = get_local_id(0); \n        float v_tmp_93562 = 0.0f; \n        v__80974 = v_tmp_93562; \n        /* reduce_seq */\n        for (int v_i_93477 = 0; v_i_93477 < v_MWidthC_1; v_i_93477 = (1 + v_i_93477)) {\n          v__80974 = add(v__80974, v__93497[(v_i_93477 + (v_MWidthC_1 * v_l_id_93476))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93478 = 0; \n          v__93502[v_w_id_93471] = doubleMultiplyAdd(v__80974, v__93483, v__93482[v_w_id_93471], v__93484); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93471 = atomic_inc(v_work_idx_7904); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93479",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93480",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93481",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93483",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93484",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93486",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__93492",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__93502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93497",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}