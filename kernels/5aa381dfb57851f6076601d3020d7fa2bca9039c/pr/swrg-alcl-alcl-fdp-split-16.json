{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85541, const global float* restrict v__85542, const global float* restrict v__85543, const global float* restrict v__85544, float v__85545, float v__85546, global float* v__85563, local float* v__85558, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85549; \n  float v__85551; \n  float v__80974; \n  /* Private Memory */\n  float v__85553_0;\n  \n  float v__85555_0;\n  \n  for (int v_wg_id_85534 = get_group_id(0); v_wg_id_85534 < v_MHeight_2; v_wg_id_85534 = (v_wg_id_85534 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7158; \n      v_work_idx_7158 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_85535 = atomic_inc(&(v_work_idx_7158)); \n      while((v_l_id_85535 < v_MWidthC_1)){\n        float v_tmp_85616 = 0.0f; \n        v__85549 = v_tmp_85616; \n        /* reduce_seq */\n        for (int v_i_85536 = 0; v_i_85536 < 16; v_i_85536 = (1 + v_i_85536)) {\n          float v_tmp_85617 = 0.0f; \n          v__85551 = v_tmp_85617; \n          int v_index_85618 = v__85541[(v_l_id_85535 + (16 * v_MWidthC_1 * v_wg_id_85534) + (v_MWidthC_1 * v_i_85536))]; \n          if (v_index_85618 < 0) {\n            v__85553_0 = v__85551; \n          } else {\n            if (v_index_85618 >= v_VLength_3) {\n              v__85553_0 = v__85551; \n            } else {\n              v__85553_0 = v__85543[v_index_85618]; \n            }\n          }\n          v__85555_0 = mult(v__85553_0, v__85542[(v_l_id_85535 + (16 * v_MWidthC_1 * v_wg_id_85534) + (v_MWidthC_1 * v_i_85536))]); \n          v__85549 = add(v__85555_0, v__85549); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85537 = 0; \n          v__85558[v_l_id_85535] = id(v__85549); \n        }\n        /* end map_seq */\n        v_l_id_85535 = atomic_inc(&(v_work_idx_7158)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7153; \n      v_work_idx_7153 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_85538 = atomic_inc(&(v_work_idx_7153)); \n      while((v_l_id_85538 < 1)){\n        float v_tmp_85621 = 0.0f; \n        v__80974 = v_tmp_85621; \n        /* reduce_seq */\n        for (int v_i_85539 = 0; v_i_85539 < v_MWidthC_1; v_i_85539 = (1 + v_i_85539)) {\n          v__80974 = add(v__80974, v__85558[(v_i_85539 + (v_MWidthC_1 * v_l_id_85538))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85540 = 0; \n          v__85563[v_wg_id_85534] = doubleMultiplyAdd(v__80974, v__85545, v__85544[v_wg_id_85534], v__85546); \n        }\n        /* end map_seq */\n        v_l_id_85538 = atomic_inc(&(v_work_idx_7153)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85541",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85542",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85543",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85545",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85546",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85558",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}