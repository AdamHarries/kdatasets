{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83153, const global float* restrict v__83154, const global float* restrict v__83155, const global float* restrict v__83156, float v__83157, float v__83158, global float* v__83178, global int* v__83160, local float* v__83173, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83162; \n  float v__83164; \n  float v__80974; \n  /* Private Memory */\n  float v__83166_0;\n  \n  float v__83168_0;\n  \n  int v__83172_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6935 = v__83160; \n    local int v_w_id_83146; \n    if (get_local_id(0) == 0) {\n      v_w_id_83146 = atomic_inc(v_work_idx_6935); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83146 < v_MHeight_2)){\n      for (int v_l_id_83147 = get_local_id(0); v_l_id_83147 < v_MWidthC_1; v_l_id_83147 = (v_l_id_83147 + get_local_size(0))) {\n        float v_tmp_83240 = 0.0f; \n        v__83162 = v_tmp_83240; \n        /* reduce_while_seq */\n        for (int v_i_83148 = 0; v_i_83148 < 8; v_i_83148 = (1 + v_i_83148)) {\n          v__83172_0 = check(v__83162, v__83153[(v_l_id_83147 + (8 * v_MWidthC_1 * v_w_id_83146) + (v_MWidthC_1 * v_i_83148))]); \n          if (v__83172_0) {\n          } else {\n            break;\n          }\n          float v_tmp_83241 = 0.0f; \n          v__83164 = v_tmp_83241; \n          int v_index_83242 = v__83153[(v_l_id_83147 + (8 * v_MWidthC_1 * v_w_id_83146) + (v_MWidthC_1 * v_i_83148))]; \n          if (v_index_83242 < 0) {\n            v__83166_0 = v__83164; \n          } else {\n            if (v_index_83242 >= v_VLength_3) {\n              v__83166_0 = v__83164; \n            } else {\n              v__83166_0 = v__83155[v_index_83242]; \n            }\n          }\n          v__83168_0 = mult(v__83166_0, v__83154[(v_l_id_83147 + (8 * v_MWidthC_1 * v_w_id_83146) + (v_MWidthC_1 * v_i_83148))]); \n          v__83162 = add(v__83168_0, v__83162); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83149 = 0; \n          v__83173[v_l_id_83147] = id(v__83162); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6929; \n        v_work_idx_6929 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_83150 = atomic_inc(&(v_work_idx_6929)); \n        while((v_l_id_83150 < 1)){\n          float v_tmp_83245 = 0.0f; \n          v__80974 = v_tmp_83245; \n          /* reduce_seq */\n          for (int v_i_83151 = 0; v_i_83151 < v_MWidthC_1; v_i_83151 = (1 + v_i_83151)) {\n            v__80974 = add(v__80974, v__83173[(v_i_83151 + (v_MWidthC_1 * v_l_id_83150))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83152 = 0; \n            v__83178[v_w_id_83146] = doubleMultiplyAdd(v__80974, v__83157, v__83156[v_w_id_83146], v__83158); \n          }\n          /* end map_seq */\n          v_l_id_83150 = atomic_inc(&(v_work_idx_6929)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83146 = atomic_inc(v_work_idx_6935); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83153",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83154",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83160",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83173",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}