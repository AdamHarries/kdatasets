{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90242, const global float* restrict v__90243, const global float* restrict v__90244, const global float* restrict v__90245, float v__90246, float v__90247, global float* v__90265, global int* v__90249, local float* v__90260, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90251; \n  float v__90253; \n  float v__80974; \n  /* Private Memory */\n  float v__90255_0;\n  \n  float v__90257_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7602 = v__90249; \n    local int v_w_id_90235; \n    if (get_local_id(0) == 0) {\n      v_w_id_90235 = atomic_inc(v_work_idx_7602); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90235 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7600; \n        v_work_idx_7600 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_90236 = atomic_inc(&(v_work_idx_7600)); \n        while((v_l_id_90236 < v_MWidthC_1)){\n          float v_tmp_90320 = 0.0f; \n          v__90251 = v_tmp_90320; \n          /* reduce_seq */\n          for (int v_i_90237 = 0; v_i_90237 < 32; v_i_90237 = (1 + v_i_90237)) {\n            float v_tmp_90321 = 0.0f; \n            v__90253 = v_tmp_90321; \n            int v_index_90322 = v__90242[(v_l_id_90236 + (32 * v_MWidthC_1 * v_w_id_90235) + (v_MWidthC_1 * v_i_90237))]; \n            if (v_index_90322 < 0) {\n              v__90255_0 = v__90253; \n            } else {\n              if (v_index_90322 >= v_VLength_3) {\n                v__90255_0 = v__90253; \n              } else {\n                v__90255_0 = v__90244[v_index_90322]; \n              }\n            }\n            v__90257_0 = mult(v__90255_0, v__90243[(v_l_id_90236 + (32 * v_MWidthC_1 * v_w_id_90235) + (v_MWidthC_1 * v_i_90237))]); \n            v__90251 = add(v__90257_0, v__90251); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90238 = 0; \n            v__90260[v_l_id_90236] = id(v__90251); \n          }\n          /* end map_seq */\n          v_l_id_90236 = atomic_inc(&(v_work_idx_7600)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90239 = get_local_id(0); \n        float v_tmp_90325 = 0.0f; \n        v__80974 = v_tmp_90325; \n        /* reduce_seq */\n        for (int v_i_90240 = 0; v_i_90240 < v_MWidthC_1; v_i_90240 = (1 + v_i_90240)) {\n          v__80974 = add(v__80974, v__90260[(v_i_90240 + (v_MWidthC_1 * v_l_id_90239))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90241 = 0; \n          v__90265[v_w_id_90235] = doubleMultiplyAdd(v__80974, v__90246, v__90245[v_w_id_90235], v__90247); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90235 = atomic_inc(v_work_idx_7602); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90242",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90243",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90244",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90245",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90246",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90247",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90249",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90265",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90260",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}