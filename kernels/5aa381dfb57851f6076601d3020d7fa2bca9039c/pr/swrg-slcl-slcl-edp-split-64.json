{
  "name" : "swrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__91171, const global float* restrict v__91172, const global float* restrict v__91173, const global float* restrict v__91174, float v__91175, float v__91176, global float* v__91195, local float* v__91190, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91179; \n  float v__91181; \n  float v__80974; \n  /* Private Memory */\n  float v__91183_0;\n  \n  float v__91185_0;\n  \n  int v__91189_0;\n  \n  for (int v_wg_id_91164 = get_group_id(0); v_wg_id_91164 < v_MHeight_2; v_wg_id_91164 = (v_wg_id_91164 + get_num_groups(0))) {\n    for (int v_l_id_91165 = get_local_id(0); v_l_id_91165 < v_MWidthC_1; v_l_id_91165 = (v_l_id_91165 + get_local_size(0))) {\n      float v_tmp_91263 = 0.0f; \n      v__91179 = v_tmp_91263; \n      /* reduce_while_seq */\n      for (int v_i_91166 = 0; v_i_91166 < 64; v_i_91166 = (1 + v_i_91166)) {\n        v__91189_0 = check(v__91179, v__91171[(v_l_id_91165 + (64 * v_MWidthC_1 * v_wg_id_91164) + (v_MWidthC_1 * v_i_91166))]); \n        if (v__91189_0) {\n        } else {\n          break;\n        }\n        float v_tmp_91264 = 0.0f; \n        v__91181 = v_tmp_91264; \n        int v_index_91265 = v__91171[(v_l_id_91165 + (64 * v_MWidthC_1 * v_wg_id_91164) + (v_MWidthC_1 * v_i_91166))]; \n        if (v_index_91265 < 0) {\n          v__91183_0 = v__91181; \n        } else {\n          if (v_index_91265 >= v_VLength_3) {\n            v__91183_0 = v__91181; \n          } else {\n            v__91183_0 = v__91173[v_index_91265]; \n          }\n        }\n        v__91185_0 = mult(v__91183_0, v__91172[(v_l_id_91165 + (64 * v_MWidthC_1 * v_wg_id_91164) + (v_MWidthC_1 * v_i_91166))]); \n        v__91179 = add(v__91185_0, v__91179); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91167 = 0; \n        v__91190[v_l_id_91165] = id(v__91179); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_91168 = get_local_id(0); \n      float v_tmp_91268 = 0.0f; \n      v__80974 = v_tmp_91268; \n      /* reduce_seq */\n      for (int v_i_91169 = 0; v_i_91169 < v_MWidthC_1; v_i_91169 = (1 + v_i_91169)) {\n        v__80974 = add(v__80974, v__91190[(v_i_91169 + (v_MWidthC_1 * v_l_id_91168))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91170 = 0; \n        v__91195[v_wg_id_91164] = doubleMultiplyAdd(v__80974, v__91175, v__91174[v_wg_id_91164], v__91176); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__91171",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91172",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91173",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91174",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91175",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91176",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91190",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}