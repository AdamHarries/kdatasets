{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82545, const global float* restrict v__82546, const global float* restrict v__82547, const global float* restrict v__82548, float v__82549, float v__82550, global float* v__82566, global int* v__82552, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82553; \n  float v__82556; \n  /* Private Memory */\n  float v__82558_0;\n  \n  float v__82560_0;\n  \n  int v__82564_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6876 = v__82552; \n    local int v_w_id_82541; \n    if (get_local_id(0) == 0) {\n      v_w_id_82541 = atomic_inc(v_work_idx_6876); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82541 < v_MHeight_2)){\n      for (int v_l_id_82542 = get_local_id(0); v_l_id_82542 < 8; v_l_id_82542 = (v_l_id_82542 + get_local_size(0))) {\n        float v_tmp_82613 = 0.0f; \n        v__82553 = v_tmp_82613; \n        /* reduce_while_seq */\n        for (int v_i_82543 = 0; v_i_82543 < v_MWidthC_1; v_i_82543 = (1 + v_i_82543)) {\n          v__82564_0 = check(v__82553, v__82545[(v_i_82543 + (8 * v_MWidthC_1 * v_w_id_82541) + (v_MWidthC_1 * v_l_id_82542))]); \n          if (v__82564_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82614 = 0.0f; \n          v__82556 = v_tmp_82614; \n          int v_index_82615 = v__82545[(v_i_82543 + (8 * v_MWidthC_1 * v_w_id_82541) + (v_MWidthC_1 * v_l_id_82542))]; \n          if (v_index_82615 < 0) {\n            v__82558_0 = v__82556; \n          } else {\n            if (v_index_82615 >= v_VLength_3) {\n              v__82558_0 = v__82556; \n            } else {\n              v__82558_0 = v__82547[v_index_82615]; \n            }\n          }\n          v__82560_0 = mult(v__82558_0, v__82546[(v_i_82543 + (8 * v_MWidthC_1 * v_w_id_82541) + (v_MWidthC_1 * v_l_id_82542))]); \n          v__82553 = add(v__82560_0, v__82553); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82544 = 0; \n          v__82566[(v_l_id_82542 + (8 * v_w_id_82541))] = doubleMultiplyAdd(v__82553, v__82549, v__82548[(v_l_id_82542 + (8 * v_w_id_82541))], v__82550); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_82541 = atomic_inc(v_work_idx_6876); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82545",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82546",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82547",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82548",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__82549",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82550",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82552",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82566",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}