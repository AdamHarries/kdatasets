{
  "name" : "glb-sdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80271, const global float* restrict v__80272, const global float* restrict v__80273, const global float* restrict v__80274, float v__80275, float v__80276, global float* v__80289, global float* v__80283, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80279; \n  float v__80284; \n  /* Private Memory */\n  float v__80281_0;\n  \n  for (int v_gl_id_80267 = get_global_id(0); v_gl_id_80267 < v_MHeight_2; v_gl_id_80267 = (v_gl_id_80267 + get_global_size(0))) {\n    /* map_seq */\n    for (int v_i_80268 = 0; v_i_80268 < v_MWidthC_1; v_i_80268 = (1 + v_i_80268)) {\n      float v_tmp_80320 = 0.0f; \n      v__80279 = v_tmp_80320; \n      int v_index_80321 = v__80271[(v_i_80268 + (v_MWidthC_1 * v_gl_id_80267))]; \n      if (v_index_80321 < 0) {\n        v__80281_0 = v__80279; \n      } else {\n        if (v_index_80321 >= v_VLength_3) {\n          v__80281_0 = v__80279; \n        } else {\n          v__80281_0 = v__80273[v_index_80321]; \n        }\n      }\n      v__80283[(v_i_80268 + (v_MWidthC_1 * v_gl_id_80267))] = mult(v__80281_0, v__80272[(v_i_80268 + (v_MWidthC_1 * v_gl_id_80267))]); \n    }\n    /* end map_seq */\n    float v_tmp_80322 = 0.0f; \n    v__80284 = v_tmp_80322; \n    /* reduce_seq */\n    for (int v_i_80269 = 0; v_i_80269 < v_MWidthC_1; v_i_80269 = (1 + v_i_80269)) {\n      v__80284 = add(v__80284, v__80283[(v_i_80269 + (v_MWidthC_1 * v_gl_id_80267))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_80270 = 0; \n      v__80289[v_gl_id_80267] = doubleMultiplyAdd(v__80284, v__80275, v__80274[v_gl_id_80267], v__80276); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80271",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80272",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80273",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80275",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80276",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80283",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80289",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}