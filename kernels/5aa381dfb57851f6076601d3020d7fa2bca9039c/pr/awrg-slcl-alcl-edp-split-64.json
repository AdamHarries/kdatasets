{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93155, const global float* restrict v__93156, const global float* restrict v__93157, const global float* restrict v__93158, float v__93159, float v__93160, global float* v__93180, global int* v__93162, local float* v__93175, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93164; \n  float v__93166; \n  float v__80974; \n  /* Private Memory */\n  float v__93168_0;\n  \n  float v__93170_0;\n  \n  int v__93174_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7871 = v__93162; \n    local int v_w_id_93148; \n    if (get_local_id(0) == 0) {\n      v_w_id_93148 = atomic_inc(v_work_idx_7871); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93148 < v_MHeight_2)){\n      for (int v_l_id_93149 = get_local_id(0); v_l_id_93149 < v_MWidthC_1; v_l_id_93149 = (v_l_id_93149 + get_local_size(0))) {\n        float v_tmp_93242 = 0.0f; \n        v__93164 = v_tmp_93242; \n        /* reduce_while_seq */\n        for (int v_i_93150 = 0; v_i_93150 < 64; v_i_93150 = (1 + v_i_93150)) {\n          v__93174_0 = check(v__93164, v__93155[(v_l_id_93149 + (64 * v_MWidthC_1 * v_w_id_93148) + (v_MWidthC_1 * v_i_93150))]); \n          if (v__93174_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93243 = 0.0f; \n          v__93166 = v_tmp_93243; \n          int v_index_93244 = v__93155[(v_l_id_93149 + (64 * v_MWidthC_1 * v_w_id_93148) + (v_MWidthC_1 * v_i_93150))]; \n          if (v_index_93244 < 0) {\n            v__93168_0 = v__93166; \n          } else {\n            if (v_index_93244 >= v_VLength_3) {\n              v__93168_0 = v__93166; \n            } else {\n              v__93168_0 = v__93157[v_index_93244]; \n            }\n          }\n          v__93170_0 = mult(v__93168_0, v__93156[(v_l_id_93149 + (64 * v_MWidthC_1 * v_w_id_93148) + (v_MWidthC_1 * v_i_93150))]); \n          v__93164 = add(v__93170_0, v__93164); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93151 = 0; \n          v__93175[v_l_id_93149] = id(v__93164); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7865; \n        v_work_idx_7865 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93152 = atomic_inc(&(v_work_idx_7865)); \n        while((v_l_id_93152 < 1)){\n          float v_tmp_93247 = 0.0f; \n          v__80974 = v_tmp_93247; \n          /* reduce_seq */\n          for (int v_i_93153 = 0; v_i_93153 < v_MWidthC_1; v_i_93153 = (1 + v_i_93153)) {\n            v__80974 = add(v__80974, v__93175[(v_i_93153 + (v_MWidthC_1 * v_l_id_93152))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93154 = 0; \n            v__93180[v_w_id_93148] = doubleMultiplyAdd(v__80974, v__93159, v__93158[v_w_id_93148], v__93160); \n          }\n          /* end map_seq */\n          v_l_id_93152 = atomic_inc(&(v_work_idx_7865)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93148 = atomic_inc(v_work_idx_7871); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93155",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93156",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93157",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93159",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93160",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93162",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93180",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93175",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}