{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98483, const global float* restrict v__98484, const global float* restrict v__98485, const global float* restrict v__98486, float v__98487, float v__98488, global float* v__98505, global float* v__98495, local float* v__98500, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98491; \n  float v__98496; \n  float v__80974; \n  /* Private Memory */\n  float v__98493_0;\n  \n  for (int v_wg_id_98475 = get_group_id(0); v_wg_id_98475 < v_MHeight_2; v_wg_id_98475 = (v_wg_id_98475 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8367; \n      v_work_idx_8367 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98476 = atomic_inc(&(v_work_idx_8367)); \n      while((v_l_id_98476 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_98477 = 0; v_i_98477 < 256; v_i_98477 = (1 + v_i_98477)) {\n          float v_tmp_98562 = 0.0f; \n          v__98491 = v_tmp_98562; \n          int v_index_98563 = v__98483[(v_l_id_98476 + (256 * v_MWidthC_1 * v_wg_id_98475) + (v_MWidthC_1 * v_i_98477))]; \n          if (v_index_98563 < 0) {\n            v__98493_0 = v__98491; \n          } else {\n            if (v_index_98563 >= v_VLength_3) {\n              v__98493_0 = v__98491; \n            } else {\n              v__98493_0 = v__98485[v_index_98563]; \n            }\n          }\n          v__98495[(v_i_98477 + (256 * v_MWidthC_1 * v_wg_id_98475) + (256 * v_l_id_98476))] = mult(v__98493_0, v__98484[(v_l_id_98476 + (256 * v_MWidthC_1 * v_wg_id_98475) + (v_MWidthC_1 * v_i_98477))]); \n        }\n        /* end map_seq */\n        float v_tmp_98564 = 0.0f; \n        v__98496 = v_tmp_98564; \n        /* reduce_seq */\n        for (int v_i_98478 = 0; v_i_98478 < 256; v_i_98478 = (1 + v_i_98478)) {\n          v__98496 = add(v__98496, v__98495[(v_i_98478 + (256 * v_MWidthC_1 * v_wg_id_98475) + (256 * v_l_id_98476))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98479 = 0; \n          v__98500[v_l_id_98476] = id(v__98496); \n        }\n        /* end map_seq */\n        v_l_id_98476 = atomic_inc(&(v_work_idx_8367)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98480 = get_local_id(0); \n      float v_tmp_98567 = 0.0f; \n      v__80974 = v_tmp_98567; \n      /* reduce_seq */\n      for (int v_i_98481 = 0; v_i_98481 < v_MWidthC_1; v_i_98481 = (1 + v_i_98481)) {\n        v__80974 = add(v__80974, v__98500[(v_i_98481 + (v_MWidthC_1 * v_l_id_98480))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98482 = 0; \n        v__98505[v_wg_id_98475] = doubleMultiplyAdd(v__80974, v__98487, v__98486[v_wg_id_98475], v__98488); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98483",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98484",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98485",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98486",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98487",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98488",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98495",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98505",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98500",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}