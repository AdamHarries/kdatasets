{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__85343, const global float* restrict v__85344, const global float* restrict v__85345, const global float* restrict v__85346, float v__85347, float v__85348, global float* v__85367, local float* v__85362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85351; \n  float v__85353; \n  float v__80974; \n  /* Private Memory */\n  float v__85355_0;\n  \n  float v__85357_0;\n  \n  int v__85361_0;\n  \n  for (int v_wg_id_85336 = get_group_id(0); v_wg_id_85336 < v_MHeight_2; v_wg_id_85336 = (v_wg_id_85336 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7137; \n      v_work_idx_7137 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_85337 = atomic_inc(&(v_work_idx_7137)); \n      while((v_l_id_85337 < v_MWidthC_1)){\n        float v_tmp_85427 = 0.0f; \n        v__85351 = v_tmp_85427; \n        /* reduce_while_seq */\n        for (int v_i_85338 = 0; v_i_85338 < 16; v_i_85338 = (1 + v_i_85338)) {\n          v__85361_0 = check(v__85351, v__85343[(v_l_id_85337 + (16 * v_MWidthC_1 * v_wg_id_85336) + (v_MWidthC_1 * v_i_85338))]); \n          if (v__85361_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85428 = 0.0f; \n          v__85353 = v_tmp_85428; \n          int v_index_85429 = v__85343[(v_l_id_85337 + (16 * v_MWidthC_1 * v_wg_id_85336) + (v_MWidthC_1 * v_i_85338))]; \n          if (v_index_85429 < 0) {\n            v__85355_0 = v__85353; \n          } else {\n            if (v_index_85429 >= v_VLength_3) {\n              v__85355_0 = v__85353; \n            } else {\n              v__85355_0 = v__85345[v_index_85429]; \n            }\n          }\n          v__85357_0 = mult(v__85355_0, v__85344[(v_l_id_85337 + (16 * v_MWidthC_1 * v_wg_id_85336) + (v_MWidthC_1 * v_i_85338))]); \n          v__85351 = add(v__85357_0, v__85351); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85339 = 0; \n          v__85362[v_l_id_85337] = id(v__85351); \n        }\n        /* end map_seq */\n        v_l_id_85337 = atomic_inc(&(v_work_idx_7137)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85340 = get_local_id(0); \n      float v_tmp_85432 = 0.0f; \n      v__80974 = v_tmp_85432; \n      /* reduce_seq */\n      for (int v_i_85341 = 0; v_i_85341 < v_MWidthC_1; v_i_85341 = (1 + v_i_85341)) {\n        v__80974 = add(v__80974, v__85362[(v_i_85341 + (v_MWidthC_1 * v_l_id_85340))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85342 = 0; \n        v__85367[v_wg_id_85336] = doubleMultiplyAdd(v__80974, v__85347, v__85346[v_wg_id_85336], v__85348); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85343",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85344",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85345",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85347",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85348",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85362",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}