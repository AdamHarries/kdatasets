{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86730, const global float* restrict v__86731, const global float* restrict v__86732, const global float* restrict v__86733, float v__86734, float v__86735, global float* v__86751, global int* v__86737, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86738; \n  float v__86741; \n  /* Private Memory */\n  float v__86743_0;\n  \n  float v__86745_0;\n  \n  int v__86749_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7269 = v__86737; \n    local int v_w_id_86726; \n    if (get_local_id(0) == 0) {\n      v_w_id_86726 = atomic_inc(v_work_idx_7269); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86726 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7267; \n        v_work_idx_7267 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_86727 = atomic_inc(&(v_work_idx_7267)); \n        while((v_l_id_86727 < 16)){\n          float v_tmp_86794 = 0.0f; \n          v__86738 = v_tmp_86794; \n          /* reduce_while_seq */\n          for (int v_i_86728 = 0; v_i_86728 < v_MWidthC_1; v_i_86728 = (1 + v_i_86728)) {\n            v__86749_0 = check(v__86738, v__86730[(v_i_86728 + (16 * v_MWidthC_1 * v_w_id_86726) + (v_MWidthC_1 * v_l_id_86727))]); \n            if (v__86749_0) {\n            } else {\n              break;\n            }\n            float v_tmp_86795 = 0.0f; \n            v__86741 = v_tmp_86795; \n            int v_index_86796 = v__86730[(v_i_86728 + (16 * v_MWidthC_1 * v_w_id_86726) + (v_MWidthC_1 * v_l_id_86727))]; \n            if (v_index_86796 < 0) {\n              v__86743_0 = v__86741; \n            } else {\n              if (v_index_86796 >= v_VLength_3) {\n                v__86743_0 = v__86741; \n              } else {\n                v__86743_0 = v__86732[v_index_86796]; \n              }\n            }\n            v__86745_0 = mult(v__86743_0, v__86731[(v_i_86728 + (16 * v_MWidthC_1 * v_w_id_86726) + (v_MWidthC_1 * v_l_id_86727))]); \n            v__86738 = add(v__86745_0, v__86738); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86729 = 0; \n            v__86751[(v_l_id_86727 + (16 * v_w_id_86726))] = doubleMultiplyAdd(v__86738, v__86734, v__86733[(v_l_id_86727 + (16 * v_w_id_86726))], v__86735); \n          }\n          /* end map_seq */\n          v_l_id_86727 = atomic_inc(&(v_work_idx_7267)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86726 = atomic_inc(v_work_idx_7269); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86730",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86731",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86732",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86733",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__86734",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86735",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86737",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86751",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}