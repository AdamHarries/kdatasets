{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85806, const global float* restrict v__85807, const global float* restrict v__85808, const global float* restrict v__85809, float v__85810, float v__85811, global float* v__85825, global int* v__85813, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85815; \n  float v__85817; \n  /* Private Memory */\n  float v__85819_0;\n  \n  float v__85821_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7182 = v__85813; \n    local int v_w_id_85802; \n    if (get_local_id(0) == 0) {\n      v_w_id_85802 = atomic_inc(v_work_idx_7182); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_85802 < v_MHeight_2)){\n      for (int v_l_id_85803 = get_local_id(0); v_l_id_85803 < 16; v_l_id_85803 = (v_l_id_85803 + get_local_size(0))) {\n        float v_tmp_85866 = 0.0f; \n        v__85815 = v_tmp_85866; \n        /* reduce_seq */\n        for (int v_i_85804 = 0; v_i_85804 < v_MWidthC_1; v_i_85804 = (1 + v_i_85804)) {\n          float v_tmp_85867 = 0.0f; \n          v__85817 = v_tmp_85867; \n          int v_index_85868 = v__85806[(v_i_85804 + (16 * v_MWidthC_1 * v_w_id_85802) + (v_MWidthC_1 * v_l_id_85803))]; \n          if (v_index_85868 < 0) {\n            v__85819_0 = v__85817; \n          } else {\n            if (v_index_85868 >= v_VLength_3) {\n              v__85819_0 = v__85817; \n            } else {\n              v__85819_0 = v__85808[v_index_85868]; \n            }\n          }\n          v__85821_0 = mult(v__85819_0, v__85807[(v_i_85804 + (16 * v_MWidthC_1 * v_w_id_85802) + (v_MWidthC_1 * v_l_id_85803))]); \n          v__85815 = add(v__85821_0, v__85815); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85805 = 0; \n          v__85825[(v_l_id_85803 + (16 * v_w_id_85802))] = doubleMultiplyAdd(v__85815, v__85810, v__85809[(v_l_id_85803 + (16 * v_w_id_85802))], v__85811); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_85802 = atomic_inc(v_work_idx_7182); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85806",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85807",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85808",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85809",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__85810",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85811",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85813",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__85825",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}