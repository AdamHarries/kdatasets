{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102955, const global float* restrict v__102956, const global float* restrict v__102957, const global float* restrict v__102958, float v__102959, float v__102960, global float* v__102978, global int* v__102962, global float* v__102968, local float* v__102973, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102964; \n  float v__102969; \n  float v__80974; \n  /* Private Memory */\n  float v__102966_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8787 = v__102962; \n    local int v_w_id_102947; \n    if (get_local_id(0) == 0) {\n      v_w_id_102947 = atomic_inc(v_work_idx_8787); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102947 < v_MHeight_2)){\n      for (int v_l_id_102948 = get_local_id(0); v_l_id_102948 < v_MWidthC_1; v_l_id_102948 = (v_l_id_102948 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102949 = 0; v_i_102949 < 512; v_i_102949 = (1 + v_i_102949)) {\n          float v_tmp_103037 = 0.0f; \n          v__102964 = v_tmp_103037; \n          int v_index_103038 = v__102955[(v_l_id_102948 + (512 * v_MWidthC_1 * v_w_id_102947) + (v_MWidthC_1 * v_i_102949))]; \n          if (v_index_103038 < 0) {\n            v__102966_0 = v__102964; \n          } else {\n            if (v_index_103038 >= v_VLength_3) {\n              v__102966_0 = v__102964; \n            } else {\n              v__102966_0 = v__102957[v_index_103038]; \n            }\n          }\n          v__102968[(v_i_102949 + (512 * v_MWidthC_1 * v_w_id_102947) + (512 * v_l_id_102948))] = mult(v__102966_0, v__102956[(v_l_id_102948 + (512 * v_MWidthC_1 * v_w_id_102947) + (v_MWidthC_1 * v_i_102949))]); \n        }\n        /* end map_seq */\n        float v_tmp_103039 = 0.0f; \n        v__102969 = v_tmp_103039; \n        /* reduce_seq */\n        for (int v_i_102950 = 0; v_i_102950 < 512; v_i_102950 = (1 + v_i_102950)) {\n          v__102969 = add(v__102969, v__102968[(v_i_102950 + (512 * v_MWidthC_1 * v_w_id_102947) + (512 * v_l_id_102948))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102951 = 0; \n          v__102973[v_l_id_102948] = id(v__102969); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8780; \n        v_work_idx_8780 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_102952 = atomic_inc(&(v_work_idx_8780)); \n        while((v_l_id_102952 < 1)){\n          float v_tmp_103042 = 0.0f; \n          v__80974 = v_tmp_103042; \n          /* reduce_seq */\n          for (int v_i_102953 = 0; v_i_102953 < v_MWidthC_1; v_i_102953 = (1 + v_i_102953)) {\n            v__80974 = add(v__80974, v__102973[(v_i_102953 + (v_MWidthC_1 * v_l_id_102952))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_102954 = 0; \n            v__102978[v_w_id_102947] = doubleMultiplyAdd(v__80974, v__102959, v__102958[v_w_id_102947], v__102960); \n          }\n          /* end map_seq */\n          v_l_id_102952 = atomic_inc(&(v_work_idx_8780)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_102947 = atomic_inc(v_work_idx_8787); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102955",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102956",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102957",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102958",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102959",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102960",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102962",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__102968",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102973",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}