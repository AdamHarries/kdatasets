{
  "name" : "swrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88579, const global float* restrict v__88580, const global float* restrict v__88581, const global float* restrict v__88582, float v__88583, float v__88584, global float* v__88601, local float* v__88596, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88587; \n  float v__88589; \n  float v__80974; \n  /* Private Memory */\n  float v__88591_0;\n  \n  float v__88593_0;\n  \n  for (int v_wg_id_88572 = get_group_id(0); v_wg_id_88572 < v_MHeight_2; v_wg_id_88572 = (v_wg_id_88572 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7440; \n      v_work_idx_7440 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88573 = atomic_inc(&(v_work_idx_7440)); \n      while((v_l_id_88573 < v_MWidthC_1)){\n        float v_tmp_88658 = 0.0f; \n        v__88587 = v_tmp_88658; \n        /* reduce_seq */\n        for (int v_i_88574 = 0; v_i_88574 < 32; v_i_88574 = (1 + v_i_88574)) {\n          float v_tmp_88659 = 0.0f; \n          v__88589 = v_tmp_88659; \n          int v_index_88660 = v__88579[(v_l_id_88573 + (32 * v_MWidthC_1 * v_wg_id_88572) + (v_MWidthC_1 * v_i_88574))]; \n          if (v_index_88660 < 0) {\n            v__88591_0 = v__88589; \n          } else {\n            if (v_index_88660 >= v_VLength_3) {\n              v__88591_0 = v__88589; \n            } else {\n              v__88591_0 = v__88581[v_index_88660]; \n            }\n          }\n          v__88593_0 = mult(v__88591_0, v__88580[(v_l_id_88573 + (32 * v_MWidthC_1 * v_wg_id_88572) + (v_MWidthC_1 * v_i_88574))]); \n          v__88587 = add(v__88593_0, v__88587); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88575 = 0; \n          v__88596[v_l_id_88573] = id(v__88587); \n        }\n        /* end map_seq */\n        v_l_id_88573 = atomic_inc(&(v_work_idx_7440)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_88576 = get_local_id(0); \n      float v_tmp_88663 = 0.0f; \n      v__80974 = v_tmp_88663; \n      /* reduce_seq */\n      for (int v_i_88577 = 0; v_i_88577 < v_MWidthC_1; v_i_88577 = (1 + v_i_88577)) {\n        v__80974 = add(v__80974, v__88596[(v_i_88577 + (v_MWidthC_1 * v_l_id_88576))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88578 = 0; \n        v__88601[v_wg_id_88572] = doubleMultiplyAdd(v__80974, v__88583, v__88582[v_wg_id_88572], v__88584); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__88579",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88580",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88581",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88583",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88584",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88596",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}