{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__86487, const global float* restrict v__86488, const global float* restrict v__86489, const global float* restrict v__86490, float v__86491, float v__86492, global float* v__86512, global int* v__86494, local float* v__86507, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86496; \n  float v__86498; \n  float v__80974; \n  /* Private Memory */\n  float v__86500_0;\n  \n  float v__86502_0;\n  \n  int v__86506_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7247 = v__86494; \n    local int v_w_id_86480; \n    if (get_local_id(0) == 0) {\n      v_w_id_86480 = atomic_inc(v_work_idx_7247); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86480 < v_MHeight_2)){\n      for (int v_l_id_86481 = get_local_id(0); v_l_id_86481 < v_MWidthC_1; v_l_id_86481 = (v_l_id_86481 + get_local_size(0))) {\n        float v_tmp_86574 = 0.0f; \n        v__86496 = v_tmp_86574; \n        /* reduce_while_seq */\n        for (int v_i_86482 = 0; v_i_86482 < 16; v_i_86482 = (1 + v_i_86482)) {\n          v__86506_0 = check(v__86496, v__86487[(v_l_id_86481 + (16 * v_MWidthC_1 * v_w_id_86480) + (v_MWidthC_1 * v_i_86482))]); \n          if (v__86506_0) {\n          } else {\n            break;\n          }\n          float v_tmp_86575 = 0.0f; \n          v__86498 = v_tmp_86575; \n          int v_index_86576 = v__86487[(v_l_id_86481 + (16 * v_MWidthC_1 * v_w_id_86480) + (v_MWidthC_1 * v_i_86482))]; \n          if (v_index_86576 < 0) {\n            v__86500_0 = v__86498; \n          } else {\n            if (v_index_86576 >= v_VLength_3) {\n              v__86500_0 = v__86498; \n            } else {\n              v__86500_0 = v__86489[v_index_86576]; \n            }\n          }\n          v__86502_0 = mult(v__86500_0, v__86488[(v_l_id_86481 + (16 * v_MWidthC_1 * v_w_id_86480) + (v_MWidthC_1 * v_i_86482))]); \n          v__86496 = add(v__86502_0, v__86496); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86483 = 0; \n          v__86507[v_l_id_86481] = id(v__86496); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7241; \n        v_work_idx_7241 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_86484 = atomic_inc(&(v_work_idx_7241)); \n        while((v_l_id_86484 < 1)){\n          float v_tmp_86579 = 0.0f; \n          v__80974 = v_tmp_86579; \n          /* reduce_seq */\n          for (int v_i_86485 = 0; v_i_86485 < v_MWidthC_1; v_i_86485 = (1 + v_i_86485)) {\n            v__80974 = add(v__80974, v__86507[(v_i_86485 + (v_MWidthC_1 * v_l_id_86484))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86486 = 0; \n            v__86512[v_w_id_86480] = doubleMultiplyAdd(v__80974, v__86491, v__86490[v_w_id_86480], v__86492); \n          }\n          /* end map_seq */\n          v_l_id_86484 = atomic_inc(&(v_work_idx_7241)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86480 = atomic_inc(v_work_idx_7247); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86487",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86488",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86489",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86490",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86491",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86492",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86494",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86512",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86507",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}