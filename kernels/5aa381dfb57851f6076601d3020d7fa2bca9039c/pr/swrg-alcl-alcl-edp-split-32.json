{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__88969, const global float* restrict v__88970, const global float* restrict v__88971, const global float* restrict v__88972, float v__88973, float v__88974, global float* v__88993, local float* v__88988, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88977; \n  float v__88979; \n  float v__80974; \n  /* Private Memory */\n  float v__88981_0;\n  \n  float v__88983_0;\n  \n  int v__88987_0;\n  \n  for (int v_wg_id_88962 = get_group_id(0); v_wg_id_88962 < v_MHeight_2; v_wg_id_88962 = (v_wg_id_88962 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7480; \n      v_work_idx_7480 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88963 = atomic_inc(&(v_work_idx_7480)); \n      while((v_l_id_88963 < v_MWidthC_1)){\n        float v_tmp_89049 = 0.0f; \n        v__88977 = v_tmp_89049; \n        /* reduce_while_seq */\n        for (int v_i_88964 = 0; v_i_88964 < 32; v_i_88964 = (1 + v_i_88964)) {\n          v__88987_0 = check(v__88977, v__88969[(v_l_id_88963 + (32 * v_MWidthC_1 * v_wg_id_88962) + (v_MWidthC_1 * v_i_88964))]); \n          if (v__88987_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89050 = 0.0f; \n          v__88979 = v_tmp_89050; \n          int v_index_89051 = v__88969[(v_l_id_88963 + (32 * v_MWidthC_1 * v_wg_id_88962) + (v_MWidthC_1 * v_i_88964))]; \n          if (v_index_89051 < 0) {\n            v__88981_0 = v__88979; \n          } else {\n            if (v_index_89051 >= v_VLength_3) {\n              v__88981_0 = v__88979; \n            } else {\n              v__88981_0 = v__88971[v_index_89051]; \n            }\n          }\n          v__88983_0 = mult(v__88981_0, v__88970[(v_l_id_88963 + (32 * v_MWidthC_1 * v_wg_id_88962) + (v_MWidthC_1 * v_i_88964))]); \n          v__88977 = add(v__88983_0, v__88977); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88965 = 0; \n          v__88988[v_l_id_88963] = id(v__88977); \n        }\n        /* end map_seq */\n        v_l_id_88963 = atomic_inc(&(v_work_idx_7480)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7475; \n      v_work_idx_7475 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_88966 = atomic_inc(&(v_work_idx_7475)); \n      while((v_l_id_88966 < 1)){\n        float v_tmp_89054 = 0.0f; \n        v__80974 = v_tmp_89054; \n        /* reduce_seq */\n        for (int v_i_88967 = 0; v_i_88967 < v_MWidthC_1; v_i_88967 = (1 + v_i_88967)) {\n          v__80974 = add(v__80974, v__88988[(v_i_88967 + (v_MWidthC_1 * v_l_id_88966))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88968 = 0; \n          v__88993[v_wg_id_88962] = doubleMultiplyAdd(v__80974, v__88973, v__88972[v_wg_id_88962], v__88974); \n        }\n        /* end map_seq */\n        v_l_id_88966 = atomic_inc(&(v_work_idx_7475)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88969",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88970",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88971",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88973",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88974",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88993",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88988",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}