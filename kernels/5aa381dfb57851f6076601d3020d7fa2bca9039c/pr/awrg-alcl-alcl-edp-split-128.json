{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97296, const global float* restrict v__97297, const global float* restrict v__97298, const global float* restrict v__97299, float v__97300, float v__97301, global float* v__97321, global int* v__97303, local float* v__97316, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97305; \n  float v__97307; \n  float v__80974; \n  /* Private Memory */\n  float v__97309_0;\n  \n  float v__97311_0;\n  \n  int v__97315_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8270 = v__97303; \n    local int v_w_id_97289; \n    if (get_local_id(0) == 0) {\n      v_w_id_97289 = atomic_inc(v_work_idx_8270); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97289 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8268; \n        v_work_idx_8268 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97290 = atomic_inc(&(v_work_idx_8268)); \n        while((v_l_id_97290 < v_MWidthC_1)){\n          float v_tmp_97375 = 0.0f; \n          v__97305 = v_tmp_97375; \n          /* reduce_while_seq */\n          for (int v_i_97291 = 0; v_i_97291 < 128; v_i_97291 = (1 + v_i_97291)) {\n            v__97315_0 = check(v__97305, v__97296[(v_l_id_97290 + (128 * v_MWidthC_1 * v_w_id_97289) + (v_MWidthC_1 * v_i_97291))]); \n            if (v__97315_0) {\n            } else {\n              break;\n            }\n            float v_tmp_97376 = 0.0f; \n            v__97307 = v_tmp_97376; \n            int v_index_97377 = v__97296[(v_l_id_97290 + (128 * v_MWidthC_1 * v_w_id_97289) + (v_MWidthC_1 * v_i_97291))]; \n            if (v_index_97377 < 0) {\n              v__97309_0 = v__97307; \n            } else {\n              if (v_index_97377 >= v_VLength_3) {\n                v__97309_0 = v__97307; \n              } else {\n                v__97309_0 = v__97298[v_index_97377]; \n              }\n            }\n            v__97311_0 = mult(v__97309_0, v__97297[(v_l_id_97290 + (128 * v_MWidthC_1 * v_w_id_97289) + (v_MWidthC_1 * v_i_97291))]); \n            v__97305 = add(v__97311_0, v__97305); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97292 = 0; \n            v__97316[v_l_id_97290] = id(v__97305); \n          }\n          /* end map_seq */\n          v_l_id_97290 = atomic_inc(&(v_work_idx_8268)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8263; \n        v_work_idx_8263 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97293 = atomic_inc(&(v_work_idx_8263)); \n        while((v_l_id_97293 < 1)){\n          float v_tmp_97380 = 0.0f; \n          v__80974 = v_tmp_97380; \n          /* reduce_seq */\n          for (int v_i_97294 = 0; v_i_97294 < v_MWidthC_1; v_i_97294 = (1 + v_i_97294)) {\n            v__80974 = add(v__80974, v__97316[(v_i_97294 + (v_MWidthC_1 * v_l_id_97293))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97295 = 0; \n            v__97321[v_w_id_97289] = doubleMultiplyAdd(v__80974, v__97300, v__97299[v_w_id_97289], v__97301); \n          }\n          /* end map_seq */\n          v_l_id_97293 = atomic_inc(&(v_work_idx_8263)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97289 = atomic_inc(v_work_idx_8270); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97296",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97297",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97298",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97299",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97300",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97301",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97303",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97316",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}