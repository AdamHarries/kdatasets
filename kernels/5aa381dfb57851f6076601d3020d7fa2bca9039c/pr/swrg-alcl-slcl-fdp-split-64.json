{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91913, const global float* restrict v__91914, const global float* restrict v__91915, const global float* restrict v__91916, float v__91917, float v__91918, global float* v__91935, local float* v__91930, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91921; \n  float v__91923; \n  float v__80974; \n  /* Private Memory */\n  float v__91925_0;\n  \n  float v__91927_0;\n  \n  for (int v_wg_id_91906 = get_group_id(0); v_wg_id_91906 < v_MHeight_2; v_wg_id_91906 = (v_wg_id_91906 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7752; \n      v_work_idx_7752 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_91907 = atomic_inc(&(v_work_idx_7752)); \n      while((v_l_id_91907 < v_MWidthC_1)){\n        float v_tmp_91992 = 0.0f; \n        v__91921 = v_tmp_91992; \n        /* reduce_seq */\n        for (int v_i_91908 = 0; v_i_91908 < 64; v_i_91908 = (1 + v_i_91908)) {\n          float v_tmp_91993 = 0.0f; \n          v__91923 = v_tmp_91993; \n          int v_index_91994 = v__91913[(v_l_id_91907 + (64 * v_MWidthC_1 * v_wg_id_91906) + (v_MWidthC_1 * v_i_91908))]; \n          if (v_index_91994 < 0) {\n            v__91925_0 = v__91923; \n          } else {\n            if (v_index_91994 >= v_VLength_3) {\n              v__91925_0 = v__91923; \n            } else {\n              v__91925_0 = v__91915[v_index_91994]; \n            }\n          }\n          v__91927_0 = mult(v__91925_0, v__91914[(v_l_id_91907 + (64 * v_MWidthC_1 * v_wg_id_91906) + (v_MWidthC_1 * v_i_91908))]); \n          v__91921 = add(v__91927_0, v__91921); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91909 = 0; \n          v__91930[v_l_id_91907] = id(v__91921); \n        }\n        /* end map_seq */\n        v_l_id_91907 = atomic_inc(&(v_work_idx_7752)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_91910 = get_local_id(0); \n      float v_tmp_91997 = 0.0f; \n      v__80974 = v_tmp_91997; \n      /* reduce_seq */\n      for (int v_i_91911 = 0; v_i_91911 < v_MWidthC_1; v_i_91911 = (1 + v_i_91911)) {\n        v__80974 = add(v__80974, v__91930[(v_i_91911 + (v_MWidthC_1 * v_l_id_91910))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91912 = 0; \n        v__91935[v_wg_id_91906] = doubleMultiplyAdd(v__80974, v__91917, v__91916[v_wg_id_91906], v__91918); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91913",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91914",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91915",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91916",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91917",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91918",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91935",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91930",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}