{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81813, const global float* restrict v__81814, const global float* restrict v__81815, const global float* restrict v__81816, float v__81817, float v__81818, global float* v__81835, global float* v__81825, local float* v__81830, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81821; \n  float v__81826; \n  float v__80974; \n  /* Private Memory */\n  float v__81823_0;\n  \n  for (int v_wg_id_81805 = get_group_id(0); v_wg_id_81805 < v_MHeight_2; v_wg_id_81805 = (v_wg_id_81805 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6807; \n      v_work_idx_6807 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_81806 = atomic_inc(&(v_work_idx_6807)); \n      while((v_l_id_81806 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_81807 = 0; v_i_81807 < 8; v_i_81807 = (1 + v_i_81807)) {\n          float v_tmp_81892 = 0.0f; \n          v__81821 = v_tmp_81892; \n          int v_index_81893 = v__81813[(v_l_id_81806 + (8 * v_MWidthC_1 * v_wg_id_81805) + (v_MWidthC_1 * v_i_81807))]; \n          if (v_index_81893 < 0) {\n            v__81823_0 = v__81821; \n          } else {\n            if (v_index_81893 >= v_VLength_3) {\n              v__81823_0 = v__81821; \n            } else {\n              v__81823_0 = v__81815[v_index_81893]; \n            }\n          }\n          v__81825[(v_i_81807 + (8 * v_MWidthC_1 * v_wg_id_81805) + (8 * v_l_id_81806))] = mult(v__81823_0, v__81814[(v_l_id_81806 + (8 * v_MWidthC_1 * v_wg_id_81805) + (v_MWidthC_1 * v_i_81807))]); \n        }\n        /* end map_seq */\n        float v_tmp_81894 = 0.0f; \n        v__81826 = v_tmp_81894; \n        /* reduce_seq */\n        for (int v_i_81808 = 0; v_i_81808 < 8; v_i_81808 = (1 + v_i_81808)) {\n          v__81826 = add(v__81826, v__81825[(v_i_81808 + (8 * v_MWidthC_1 * v_wg_id_81805) + (8 * v_l_id_81806))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81809 = 0; \n          v__81830[v_l_id_81806] = id(v__81826); \n        }\n        /* end map_seq */\n        v_l_id_81806 = atomic_inc(&(v_work_idx_6807)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81810 = get_local_id(0); \n      float v_tmp_81897 = 0.0f; \n      v__80974 = v_tmp_81897; \n      /* reduce_seq */\n      for (int v_i_81811 = 0; v_i_81811 < v_MWidthC_1; v_i_81811 = (1 + v_i_81811)) {\n        v__80974 = add(v__80974, v__81830[(v_i_81811 + (v_MWidthC_1 * v_l_id_81810))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81812 = 0; \n        v__81835[v_wg_id_81805] = doubleMultiplyAdd(v__80974, v__81817, v__81816[v_wg_id_81805], v__81818); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81813",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81814",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81815",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81816",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81817",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81818",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81825",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81835",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81830",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}