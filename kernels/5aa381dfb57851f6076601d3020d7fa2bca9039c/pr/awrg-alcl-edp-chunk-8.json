{
  "name" : "awrg-alcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83396, const global float* restrict v__83397, const global float* restrict v__83398, const global float* restrict v__83399, float v__83400, float v__83401, global float* v__83417, global int* v__83403, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83404; \n  float v__83407; \n  /* Private Memory */\n  float v__83409_0;\n  \n  float v__83411_0;\n  \n  int v__83415_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6957 = v__83403; \n    local int v_w_id_83392; \n    if (get_local_id(0) == 0) {\n      v_w_id_83392 = atomic_inc(v_work_idx_6957); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83392 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6955; \n        v_work_idx_6955 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_83393 = atomic_inc(&(v_work_idx_6955)); \n        while((v_l_id_83393 < 8)){\n          float v_tmp_83460 = 0.0f; \n          v__83404 = v_tmp_83460; \n          /* reduce_while_seq */\n          for (int v_i_83394 = 0; v_i_83394 < v_MWidthC_1; v_i_83394 = (1 + v_i_83394)) {\n            v__83415_0 = check(v__83404, v__83396[(v_i_83394 + (8 * v_MWidthC_1 * v_w_id_83392) + (v_MWidthC_1 * v_l_id_83393))]); \n            if (v__83415_0) {\n            } else {\n              break;\n            }\n            float v_tmp_83461 = 0.0f; \n            v__83407 = v_tmp_83461; \n            int v_index_83462 = v__83396[(v_i_83394 + (8 * v_MWidthC_1 * v_w_id_83392) + (v_MWidthC_1 * v_l_id_83393))]; \n            if (v_index_83462 < 0) {\n              v__83409_0 = v__83407; \n            } else {\n              if (v_index_83462 >= v_VLength_3) {\n                v__83409_0 = v__83407; \n              } else {\n                v__83409_0 = v__83398[v_index_83462]; \n              }\n            }\n            v__83411_0 = mult(v__83409_0, v__83397[(v_i_83394 + (8 * v_MWidthC_1 * v_w_id_83392) + (v_MWidthC_1 * v_l_id_83393))]); \n            v__83404 = add(v__83411_0, v__83404); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83395 = 0; \n            v__83417[(v_l_id_83393 + (8 * v_w_id_83392))] = doubleMultiplyAdd(v__83404, v__83400, v__83399[(v_l_id_83393 + (8 * v_w_id_83392))], v__83401); \n          }\n          /* end map_seq */\n          v_l_id_83393 = atomic_inc(&(v_work_idx_6955)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83392 = atomic_inc(v_work_idx_6957); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83396",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83397",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83398",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83399",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__83400",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83401",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83403",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83417",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}