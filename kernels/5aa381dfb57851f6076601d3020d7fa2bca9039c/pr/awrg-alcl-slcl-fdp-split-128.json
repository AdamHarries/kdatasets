{
  "name" : "awrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96910, const global float* restrict v__96911, const global float* restrict v__96912, const global float* restrict v__96913, float v__96914, float v__96915, global float* v__96933, global int* v__96917, local float* v__96928, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96919; \n  float v__96921; \n  float v__80974; \n  /* Private Memory */\n  float v__96923_0;\n  \n  float v__96925_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8226 = v__96917; \n    local int v_w_id_96903; \n    if (get_local_id(0) == 0) {\n      v_w_id_96903 = atomic_inc(v_work_idx_8226); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96903 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8224; \n        v_work_idx_8224 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_96904 = atomic_inc(&(v_work_idx_8224)); \n        while((v_l_id_96904 < v_MWidthC_1)){\n          float v_tmp_96988 = 0.0f; \n          v__96919 = v_tmp_96988; \n          /* reduce_seq */\n          for (int v_i_96905 = 0; v_i_96905 < 128; v_i_96905 = (1 + v_i_96905)) {\n            float v_tmp_96989 = 0.0f; \n            v__96921 = v_tmp_96989; \n            int v_index_96990 = v__96910[(v_l_id_96904 + (128 * v_MWidthC_1 * v_w_id_96903) + (v_MWidthC_1 * v_i_96905))]; \n            if (v_index_96990 < 0) {\n              v__96923_0 = v__96921; \n            } else {\n              if (v_index_96990 >= v_VLength_3) {\n                v__96923_0 = v__96921; \n              } else {\n                v__96923_0 = v__96912[v_index_96990]; \n              }\n            }\n            v__96925_0 = mult(v__96923_0, v__96911[(v_l_id_96904 + (128 * v_MWidthC_1 * v_w_id_96903) + (v_MWidthC_1 * v_i_96905))]); \n            v__96919 = add(v__96925_0, v__96919); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96906 = 0; \n            v__96928[v_l_id_96904] = id(v__96919); \n          }\n          /* end map_seq */\n          v_l_id_96904 = atomic_inc(&(v_work_idx_8224)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96907 = get_local_id(0); \n        float v_tmp_96993 = 0.0f; \n        v__80974 = v_tmp_96993; \n        /* reduce_seq */\n        for (int v_i_96908 = 0; v_i_96908 < v_MWidthC_1; v_i_96908 = (1 + v_i_96908)) {\n          v__80974 = add(v__80974, v__96928[(v_i_96908 + (v_MWidthC_1 * v_l_id_96907))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96909 = 0; \n          v__96933[v_w_id_96903] = doubleMultiplyAdd(v__80974, v__96914, v__96913[v_w_id_96903], v__96915); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96903 = atomic_inc(v_work_idx_8226); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__96910",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96911",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96912",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96913",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96914",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96915",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96917",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96933",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96928",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}