{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96593, const global float* restrict v__96594, const global float* restrict v__96595, const global float* restrict v__96596, float v__96597, float v__96598, global float* v__96612, global int* v__96600, global float* v__96606, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96602; \n  float v__96607; \n  /* Private Memory */\n  float v__96604_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8191 = v__96600; \n    local int v_w_id_96588; \n    if (get_local_id(0) == 0) {\n      v_w_id_96588 = atomic_inc(v_work_idx_8191); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96588 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8189; \n        v_work_idx_8189 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_96589 = atomic_inc(&(v_work_idx_8189)); \n        while((v_l_id_96589 < 128)){\n          /* map_seq */\n          for (int v_i_96590 = 0; v_i_96590 < v_MWidthC_1; v_i_96590 = (1 + v_i_96590)) {\n            float v_tmp_96650 = 0.0f; \n            v__96602 = v_tmp_96650; \n            int v_index_96651 = v__96593[(v_i_96590 + (128 * v_MWidthC_1 * v_w_id_96588) + (v_MWidthC_1 * v_l_id_96589))]; \n            if (v_index_96651 < 0) {\n              v__96604_0 = v__96602; \n            } else {\n              if (v_index_96651 >= v_VLength_3) {\n                v__96604_0 = v__96602; \n              } else {\n                v__96604_0 = v__96595[v_index_96651]; \n              }\n            }\n            v__96606[(v_i_96590 + (128 * v_MWidthC_1 * v_w_id_96588) + (v_MWidthC_1 * v_l_id_96589))] = mult(v__96604_0, v__96594[(v_i_96590 + (128 * v_MWidthC_1 * v_w_id_96588) + (v_MWidthC_1 * v_l_id_96589))]); \n          }\n          /* end map_seq */\n          float v_tmp_96652 = 0.0f; \n          v__96607 = v_tmp_96652; \n          /* reduce_seq */\n          for (int v_i_96591 = 0; v_i_96591 < v_MWidthC_1; v_i_96591 = (1 + v_i_96591)) {\n            v__96607 = add(v__96607, v__96606[(v_i_96591 + (128 * v_MWidthC_1 * v_w_id_96588) + (v_MWidthC_1 * v_l_id_96589))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96592 = 0; \n            v__96612[(v_l_id_96589 + (128 * v_w_id_96588))] = doubleMultiplyAdd(v__96607, v__96597, v__96596[(v_l_id_96589 + (128 * v_w_id_96588))], v__96598); \n          }\n          /* end map_seq */\n          v_l_id_96589 = atomic_inc(&(v_work_idx_8189)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96588 = atomic_inc(v_work_idx_8191); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96593",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96594",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96595",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96596",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__96597",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96598",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96600",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__96606",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__96612",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}