{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97203, const global float* restrict v__97204, const global float* restrict v__97205, const global float* restrict v__97206, float v__97207, float v__97208, global float* v__97226, global int* v__97210, local float* v__97221, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97212; \n  float v__97214; \n  float v__80974; \n  /* Private Memory */\n  float v__97216_0;\n  \n  float v__97218_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8259 = v__97210; \n    local int v_w_id_97196; \n    if (get_local_id(0) == 0) {\n      v_w_id_97196 = atomic_inc(v_work_idx_8259); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97196 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8257; \n        v_work_idx_8257 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97197 = atomic_inc(&(v_work_idx_8257)); \n        while((v_l_id_97197 < v_MWidthC_1)){\n          float v_tmp_97277 = 0.0f; \n          v__97212 = v_tmp_97277; \n          /* reduce_seq */\n          for (int v_i_97198 = 0; v_i_97198 < 128; v_i_97198 = (1 + v_i_97198)) {\n            float v_tmp_97278 = 0.0f; \n            v__97214 = v_tmp_97278; \n            int v_index_97279 = v__97203[(v_l_id_97197 + (128 * v_MWidthC_1 * v_w_id_97196) + (v_MWidthC_1 * v_i_97198))]; \n            if (v_index_97279 < 0) {\n              v__97216_0 = v__97214; \n            } else {\n              if (v_index_97279 >= v_VLength_3) {\n                v__97216_0 = v__97214; \n              } else {\n                v__97216_0 = v__97205[v_index_97279]; \n              }\n            }\n            v__97218_0 = mult(v__97216_0, v__97204[(v_l_id_97197 + (128 * v_MWidthC_1 * v_w_id_97196) + (v_MWidthC_1 * v_i_97198))]); \n            v__97212 = add(v__97218_0, v__97212); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97199 = 0; \n            v__97221[v_l_id_97197] = id(v__97212); \n          }\n          /* end map_seq */\n          v_l_id_97197 = atomic_inc(&(v_work_idx_8257)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8252; \n        v_work_idx_8252 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_97200 = atomic_inc(&(v_work_idx_8252)); \n        while((v_l_id_97200 < 1)){\n          float v_tmp_97282 = 0.0f; \n          v__80974 = v_tmp_97282; \n          /* reduce_seq */\n          for (int v_i_97201 = 0; v_i_97201 < v_MWidthC_1; v_i_97201 = (1 + v_i_97201)) {\n            v__80974 = add(v__80974, v__97221[(v_i_97201 + (v_MWidthC_1 * v_l_id_97200))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97202 = 0; \n            v__97226[v_w_id_97196] = doubleMultiplyAdd(v__80974, v__97207, v__97206[v_w_id_97196], v__97208); \n          }\n          /* end map_seq */\n          v_l_id_97200 = atomic_inc(&(v_work_idx_8252)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97196 = atomic_inc(v_work_idx_8259); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__97203",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97204",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97205",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97207",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97208",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97210",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97221",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}