{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98260, const global float* restrict v__98261, const global float* restrict v__98262, const global float* restrict v__98263, float v__98264, float v__98265, global float* v__98278, global float* v__98272, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98268; \n  float v__98273; \n  /* Private Memory */\n  float v__98270_0;\n  \n  for (int v_wg_id_98255 = get_group_id(0); v_wg_id_98255 < v_MHeight_2; v_wg_id_98255 = (v_wg_id_98255 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8345; \n      v_work_idx_8345 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98256 = atomic_inc(&(v_work_idx_8345)); \n      while((v_l_id_98256 < 256)){\n        /* map_seq */\n        for (int v_i_98257 = 0; v_i_98257 < v_MWidthC_1; v_i_98257 = (1 + v_i_98257)) {\n          float v_tmp_98318 = 0.0f; \n          v__98268 = v_tmp_98318; \n          int v_index_98319 = v__98260[(v_i_98257 + (256 * v_MWidthC_1 * v_wg_id_98255) + (v_MWidthC_1 * v_l_id_98256))]; \n          if (v_index_98319 < 0) {\n            v__98270_0 = v__98268; \n          } else {\n            if (v_index_98319 >= v_VLength_3) {\n              v__98270_0 = v__98268; \n            } else {\n              v__98270_0 = v__98262[v_index_98319]; \n            }\n          }\n          v__98272[(v_i_98257 + (256 * v_MWidthC_1 * v_wg_id_98255) + (v_MWidthC_1 * v_l_id_98256))] = mult(v__98270_0, v__98261[(v_i_98257 + (256 * v_MWidthC_1 * v_wg_id_98255) + (v_MWidthC_1 * v_l_id_98256))]); \n        }\n        /* end map_seq */\n        float v_tmp_98320 = 0.0f; \n        v__98273 = v_tmp_98320; \n        /* reduce_seq */\n        for (int v_i_98258 = 0; v_i_98258 < v_MWidthC_1; v_i_98258 = (1 + v_i_98258)) {\n          v__98273 = add(v__98273, v__98272[(v_i_98258 + (256 * v_MWidthC_1 * v_wg_id_98255) + (v_MWidthC_1 * v_l_id_98256))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98259 = 0; \n          v__98278[(v_l_id_98256 + (256 * v_wg_id_98255))] = doubleMultiplyAdd(v__98273, v__98264, v__98263[(v_l_id_98256 + (256 * v_wg_id_98255))], v__98265); \n        }\n        /* end map_seq */\n        v_l_id_98256 = atomic_inc(&(v_work_idx_8345)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98260",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98261",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98262",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98263",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__98264",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98265",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98272",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98278",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}