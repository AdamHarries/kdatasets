{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90628, const global float* restrict v__90629, const global float* restrict v__90630, const global float* restrict v__90631, float v__90632, float v__90633, global float* v__90653, global int* v__90635, local float* v__90648, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90637; \n  float v__90639; \n  float v__80974; \n  /* Private Memory */\n  float v__90641_0;\n  \n  float v__90643_0;\n  \n  int v__90647_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7646 = v__90635; \n    local int v_w_id_90621; \n    if (get_local_id(0) == 0) {\n      v_w_id_90621 = atomic_inc(v_work_idx_7646); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90621 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7644; \n        v_work_idx_7644 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_90622 = atomic_inc(&(v_work_idx_7644)); \n        while((v_l_id_90622 < v_MWidthC_1)){\n          float v_tmp_90707 = 0.0f; \n          v__90637 = v_tmp_90707; \n          /* reduce_while_seq */\n          for (int v_i_90623 = 0; v_i_90623 < 32; v_i_90623 = (1 + v_i_90623)) {\n            v__90647_0 = check(v__90637, v__90628[(v_l_id_90622 + (32 * v_MWidthC_1 * v_w_id_90621) + (v_MWidthC_1 * v_i_90623))]); \n            if (v__90647_0) {\n            } else {\n              break;\n            }\n            float v_tmp_90708 = 0.0f; \n            v__90639 = v_tmp_90708; \n            int v_index_90709 = v__90628[(v_l_id_90622 + (32 * v_MWidthC_1 * v_w_id_90621) + (v_MWidthC_1 * v_i_90623))]; \n            if (v_index_90709 < 0) {\n              v__90641_0 = v__90639; \n            } else {\n              if (v_index_90709 >= v_VLength_3) {\n                v__90641_0 = v__90639; \n              } else {\n                v__90641_0 = v__90630[v_index_90709]; \n              }\n            }\n            v__90643_0 = mult(v__90641_0, v__90629[(v_l_id_90622 + (32 * v_MWidthC_1 * v_w_id_90621) + (v_MWidthC_1 * v_i_90623))]); \n            v__90637 = add(v__90643_0, v__90637); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90624 = 0; \n            v__90648[v_l_id_90622] = id(v__90637); \n          }\n          /* end map_seq */\n          v_l_id_90622 = atomic_inc(&(v_work_idx_7644)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7639; \n        v_work_idx_7639 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_90625 = atomic_inc(&(v_work_idx_7639)); \n        while((v_l_id_90625 < 1)){\n          float v_tmp_90712 = 0.0f; \n          v__80974 = v_tmp_90712; \n          /* reduce_seq */\n          for (int v_i_90626 = 0; v_i_90626 < v_MWidthC_1; v_i_90626 = (1 + v_i_90626)) {\n            v__80974 = add(v__80974, v__90648[(v_i_90626 + (v_MWidthC_1 * v_l_id_90625))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90627 = 0; \n            v__90653[v_w_id_90621] = doubleMultiplyAdd(v__80974, v__90632, v__90631[v_w_id_90621], v__90633); \n          }\n          /* end map_seq */\n          v_l_id_90625 = atomic_inc(&(v_work_idx_7639)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90621 = atomic_inc(v_work_idx_7646); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90628",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90629",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90630",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90632",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90633",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90635",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90648",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}