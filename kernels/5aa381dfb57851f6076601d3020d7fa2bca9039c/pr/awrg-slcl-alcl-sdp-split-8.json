{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82951, const global float* restrict v__82952, const global float* restrict v__82953, const global float* restrict v__82954, float v__82955, float v__82956, global float* v__82974, global int* v__82958, global float* v__82964, local float* v__82969, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82960; \n  float v__82965; \n  float v__80974; \n  /* Private Memory */\n  float v__82962_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6915 = v__82958; \n    local int v_w_id_82943; \n    if (get_local_id(0) == 0) {\n      v_w_id_82943 = atomic_inc(v_work_idx_6915); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82943 < v_MHeight_2)){\n      for (int v_l_id_82944 = get_local_id(0); v_l_id_82944 < v_MWidthC_1; v_l_id_82944 = (v_l_id_82944 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_82945 = 0; v_i_82945 < 8; v_i_82945 = (1 + v_i_82945)) {\n          float v_tmp_83033 = 0.0f; \n          v__82960 = v_tmp_83033; \n          int v_index_83034 = v__82951[(v_l_id_82944 + (8 * v_MWidthC_1 * v_w_id_82943) + (v_MWidthC_1 * v_i_82945))]; \n          if (v_index_83034 < 0) {\n            v__82962_0 = v__82960; \n          } else {\n            if (v_index_83034 >= v_VLength_3) {\n              v__82962_0 = v__82960; \n            } else {\n              v__82962_0 = v__82953[v_index_83034]; \n            }\n          }\n          v__82964[(v_i_82945 + (8 * v_MWidthC_1 * v_w_id_82943) + (8 * v_l_id_82944))] = mult(v__82962_0, v__82952[(v_l_id_82944 + (8 * v_MWidthC_1 * v_w_id_82943) + (v_MWidthC_1 * v_i_82945))]); \n        }\n        /* end map_seq */\n        float v_tmp_83035 = 0.0f; \n        v__82965 = v_tmp_83035; \n        /* reduce_seq */\n        for (int v_i_82946 = 0; v_i_82946 < 8; v_i_82946 = (1 + v_i_82946)) {\n          v__82965 = add(v__82965, v__82964[(v_i_82946 + (8 * v_MWidthC_1 * v_w_id_82943) + (8 * v_l_id_82944))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82947 = 0; \n          v__82969[v_l_id_82944] = id(v__82965); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6908; \n        v_work_idx_6908 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_82948 = atomic_inc(&(v_work_idx_6908)); \n        while((v_l_id_82948 < 1)){\n          float v_tmp_83038 = 0.0f; \n          v__80974 = v_tmp_83038; \n          /* reduce_seq */\n          for (int v_i_82949 = 0; v_i_82949 < v_MWidthC_1; v_i_82949 = (1 + v_i_82949)) {\n            v__80974 = add(v__80974, v__82969[(v_i_82949 + (v_MWidthC_1 * v_l_id_82948))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82950 = 0; \n            v__82974[v_w_id_82943] = doubleMultiplyAdd(v__80974, v__82955, v__82954[v_w_id_82943], v__82956); \n          }\n          /* end map_seq */\n          v_l_id_82948 = atomic_inc(&(v_work_idx_6908)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82943 = atomic_inc(v_work_idx_6915); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82951",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82952",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82953",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82954",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82955",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82956",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82958",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__82964",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__82974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82969",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}