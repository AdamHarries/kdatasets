{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89298, const global float* restrict v__89299, const global float* restrict v__89300, const global float* restrict v__89301, float v__89302, float v__89303, global float* v__89321, global int* v__89305, global float* v__89311, local float* v__89316, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89307; \n  float v__89312; \n  float v__80974; \n  /* Private Memory */\n  float v__89309_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7510 = v__89305; \n    local int v_w_id_89290; \n    if (get_local_id(0) == 0) {\n      v_w_id_89290 = atomic_inc(v_work_idx_7510); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89290 < v_MHeight_2)){\n      for (int v_l_id_89291 = get_local_id(0); v_l_id_89291 < v_MWidthC_1; v_l_id_89291 = (v_l_id_89291 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_89292 = 0; v_i_89292 < 32; v_i_89292 = (1 + v_i_89292)) {\n          float v_tmp_89384 = 0.0f; \n          v__89307 = v_tmp_89384; \n          int v_index_89385 = v__89298[(v_l_id_89291 + (32 * v_MWidthC_1 * v_w_id_89290) + (v_MWidthC_1 * v_i_89292))]; \n          if (v_index_89385 < 0) {\n            v__89309_0 = v__89307; \n          } else {\n            if (v_index_89385 >= v_VLength_3) {\n              v__89309_0 = v__89307; \n            } else {\n              v__89309_0 = v__89300[v_index_89385]; \n            }\n          }\n          v__89311[(v_i_89292 + (32 * v_MWidthC_1 * v_w_id_89290) + (32 * v_l_id_89291))] = mult(v__89309_0, v__89299[(v_l_id_89291 + (32 * v_MWidthC_1 * v_w_id_89290) + (v_MWidthC_1 * v_i_89292))]); \n        }\n        /* end map_seq */\n        float v_tmp_89386 = 0.0f; \n        v__89312 = v_tmp_89386; \n        /* reduce_seq */\n        for (int v_i_89293 = 0; v_i_89293 < 32; v_i_89293 = (1 + v_i_89293)) {\n          v__89312 = add(v__89312, v__89311[(v_i_89293 + (32 * v_MWidthC_1 * v_w_id_89290) + (32 * v_l_id_89291))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89294 = 0; \n          v__89316[v_l_id_89291] = id(v__89312); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_89295 = get_local_id(0); \n        float v_tmp_89389 = 0.0f; \n        v__80974 = v_tmp_89389; \n        /* reduce_seq */\n        for (int v_i_89296 = 0; v_i_89296 < v_MWidthC_1; v_i_89296 = (1 + v_i_89296)) {\n          v__80974 = add(v__80974, v__89316[(v_i_89296 + (v_MWidthC_1 * v_l_id_89295))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89297 = 0; \n          v__89321[v_w_id_89290] = doubleMultiplyAdd(v__80974, v__89302, v__89301[v_w_id_89290], v__89303); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89290 = atomic_inc(v_work_idx_7510); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89298",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89299",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89300",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89302",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89303",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89305",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__89311",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__89321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89316",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}