{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93673, const global float* restrict v__93674, const global float* restrict v__93675, const global float* restrict v__93676, float v__93677, float v__93678, global float* v__93698, global int* v__93680, local float* v__93693, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93682; \n  float v__93684; \n  float v__80974; \n  /* Private Memory */\n  float v__93686_0;\n  \n  float v__93688_0;\n  \n  int v__93692_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7924 = v__93680; \n    local int v_w_id_93666; \n    if (get_local_id(0) == 0) {\n      v_w_id_93666 = atomic_inc(v_work_idx_7924); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93666 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7922; \n        v_work_idx_7922 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_93667 = atomic_inc(&(v_work_idx_7922)); \n        while((v_l_id_93667 < v_MWidthC_1)){\n          float v_tmp_93756 = 0.0f; \n          v__93682 = v_tmp_93756; \n          /* reduce_while_seq */\n          for (int v_i_93668 = 0; v_i_93668 < 64; v_i_93668 = (1 + v_i_93668)) {\n            v__93692_0 = check(v__93682, v__93673[(v_l_id_93667 + (64 * v_MWidthC_1 * v_w_id_93666) + (v_MWidthC_1 * v_i_93668))]); \n            if (v__93692_0) {\n            } else {\n              break;\n            }\n            float v_tmp_93757 = 0.0f; \n            v__93684 = v_tmp_93757; \n            int v_index_93758 = v__93673[(v_l_id_93667 + (64 * v_MWidthC_1 * v_w_id_93666) + (v_MWidthC_1 * v_i_93668))]; \n            if (v_index_93758 < 0) {\n              v__93686_0 = v__93684; \n            } else {\n              if (v_index_93758 >= v_VLength_3) {\n                v__93686_0 = v__93684; \n              } else {\n                v__93686_0 = v__93675[v_index_93758]; \n              }\n            }\n            v__93688_0 = mult(v__93686_0, v__93674[(v_l_id_93667 + (64 * v_MWidthC_1 * v_w_id_93666) + (v_MWidthC_1 * v_i_93668))]); \n            v__93682 = add(v__93688_0, v__93682); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93669 = 0; \n            v__93693[v_l_id_93667] = id(v__93682); \n          }\n          /* end map_seq */\n          v_l_id_93667 = atomic_inc(&(v_work_idx_7922)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93670 = get_local_id(0); \n        float v_tmp_93761 = 0.0f; \n        v__80974 = v_tmp_93761; \n        /* reduce_seq */\n        for (int v_i_93671 = 0; v_i_93671 < v_MWidthC_1; v_i_93671 = (1 + v_i_93671)) {\n          v__80974 = add(v__80974, v__93693[(v_i_93671 + (v_MWidthC_1 * v_l_id_93670))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93672 = 0; \n          v__93698[v_w_id_93666] = doubleMultiplyAdd(v__80974, v__93677, v__93676[v_w_id_93666], v__93678); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93666 = atomic_inc(v_work_idx_7924); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93673",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93674",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93675",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93677",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93678",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93680",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93698",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93693",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}