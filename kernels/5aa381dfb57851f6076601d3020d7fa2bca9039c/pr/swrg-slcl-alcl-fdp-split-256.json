{
  "name" : "swrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98053, const global float* restrict v__98054, const global float* restrict v__98055, const global float* restrict v__98056, float v__98057, float v__98058, global float* v__98075, local float* v__98070, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98061; \n  float v__98063; \n  float v__80974; \n  /* Private Memory */\n  float v__98065_0;\n  \n  float v__98067_0;\n  \n  for (int v_wg_id_98046 = get_group_id(0); v_wg_id_98046 < v_MHeight_2; v_wg_id_98046 = (v_wg_id_98046 + get_num_groups(0))) {\n    for (int v_l_id_98047 = get_local_id(0); v_l_id_98047 < v_MWidthC_1; v_l_id_98047 = (v_l_id_98047 + get_local_size(0))) {\n      float v_tmp_98136 = 0.0f; \n      v__98061 = v_tmp_98136; \n      /* reduce_seq */\n      for (int v_i_98048 = 0; v_i_98048 < 256; v_i_98048 = (1 + v_i_98048)) {\n        float v_tmp_98137 = 0.0f; \n        v__98063 = v_tmp_98137; \n        int v_index_98138 = v__98053[(v_l_id_98047 + (256 * v_MWidthC_1 * v_wg_id_98046) + (v_MWidthC_1 * v_i_98048))]; \n        if (v_index_98138 < 0) {\n          v__98065_0 = v__98063; \n        } else {\n          if (v_index_98138 >= v_VLength_3) {\n            v__98065_0 = v__98063; \n          } else {\n            v__98065_0 = v__98055[v_index_98138]; \n          }\n        }\n        v__98067_0 = mult(v__98065_0, v__98054[(v_l_id_98047 + (256 * v_MWidthC_1 * v_wg_id_98046) + (v_MWidthC_1 * v_i_98048))]); \n        v__98061 = add(v__98067_0, v__98061); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98049 = 0; \n        v__98070[v_l_id_98047] = id(v__98061); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8325; \n      v_work_idx_8325 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_98050 = atomic_inc(&(v_work_idx_8325)); \n      while((v_l_id_98050 < 1)){\n        float v_tmp_98141 = 0.0f; \n        v__80974 = v_tmp_98141; \n        /* reduce_seq */\n        for (int v_i_98051 = 0; v_i_98051 < v_MWidthC_1; v_i_98051 = (1 + v_i_98051)) {\n          v__80974 = add(v__80974, v__98070[(v_i_98051 + (v_MWidthC_1 * v_l_id_98050))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98052 = 0; \n          v__98075[v_wg_id_98046] = doubleMultiplyAdd(v__80974, v__98057, v__98056[v_wg_id_98046], v__98058); \n        }\n        /* end map_seq */\n        v_l_id_98050 = atomic_inc(&(v_work_idx_8325)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98053",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98054",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98055",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98057",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98058",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98075",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98070",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}