{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97951, const global float* restrict v__97952, const global float* restrict v__97953, const global float* restrict v__97954, float v__97955, float v__97956, global float* v__97973, global float* v__97963, local float* v__97968, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97959; \n  float v__97964; \n  float v__80974; \n  /* Private Memory */\n  float v__97961_0;\n  \n  for (int v_wg_id_97943 = get_group_id(0); v_wg_id_97943 < v_MHeight_2; v_wg_id_97943 = (v_wg_id_97943 + get_num_groups(0))) {\n    for (int v_l_id_97944 = get_local_id(0); v_l_id_97944 < v_MWidthC_1; v_l_id_97944 = (v_l_id_97944 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_97945 = 0; v_i_97945 < 256; v_i_97945 = (1 + v_i_97945)) {\n        float v_tmp_98034 = 0.0f; \n        v__97959 = v_tmp_98034; \n        int v_index_98035 = v__97951[(v_l_id_97944 + (256 * v_MWidthC_1 * v_wg_id_97943) + (v_MWidthC_1 * v_i_97945))]; \n        if (v_index_98035 < 0) {\n          v__97961_0 = v__97959; \n        } else {\n          if (v_index_98035 >= v_VLength_3) {\n            v__97961_0 = v__97959; \n          } else {\n            v__97961_0 = v__97953[v_index_98035]; \n          }\n        }\n        v__97963[(v_i_97945 + (256 * v_MWidthC_1 * v_wg_id_97943) + (256 * v_l_id_97944))] = mult(v__97961_0, v__97952[(v_l_id_97944 + (256 * v_MWidthC_1 * v_wg_id_97943) + (v_MWidthC_1 * v_i_97945))]); \n      }\n      /* end map_seq */\n      float v_tmp_98036 = 0.0f; \n      v__97964 = v_tmp_98036; \n      /* reduce_seq */\n      for (int v_i_97946 = 0; v_i_97946 < 256; v_i_97946 = (1 + v_i_97946)) {\n        v__97964 = add(v__97964, v__97963[(v_i_97946 + (256 * v_MWidthC_1 * v_wg_id_97943) + (256 * v_l_id_97944))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_97947 = 0; \n        v__97968[v_l_id_97944] = id(v__97964); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8315; \n      v_work_idx_8315 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_97948 = atomic_inc(&(v_work_idx_8315)); \n      while((v_l_id_97948 < 1)){\n        float v_tmp_98039 = 0.0f; \n        v__80974 = v_tmp_98039; \n        /* reduce_seq */\n        for (int v_i_97949 = 0; v_i_97949 < v_MWidthC_1; v_i_97949 = (1 + v_i_97949)) {\n          v__80974 = add(v__80974, v__97968[(v_i_97949 + (v_MWidthC_1 * v_l_id_97948))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97950 = 0; \n          v__97973[v_wg_id_97943] = doubleMultiplyAdd(v__80974, v__97955, v__97954[v_wg_id_97943], v__97956); \n        }\n        /* end map_seq */\n        v_l_id_97948 = atomic_inc(&(v_work_idx_8315)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97951",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97952",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97953",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97954",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97955",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97956",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97963",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__97973",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97968",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}