{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94926, const global float* restrict v__94927, const global float* restrict v__94928, const global float* restrict v__94929, float v__94930, float v__94931, global float* v__94944, global float* v__94938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94934; \n  float v__94939; \n  /* Private Memory */\n  float v__94936_0;\n  \n  for (int v_wg_id_94921 = get_group_id(0); v_wg_id_94921 < v_MHeight_2; v_wg_id_94921 = (v_wg_id_94921 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8033; \n      v_work_idx_8033 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_94922 = atomic_inc(&(v_work_idx_8033)); \n      while((v_l_id_94922 < 128)){\n        /* map_seq */\n        for (int v_i_94923 = 0; v_i_94923 < v_MWidthC_1; v_i_94923 = (1 + v_i_94923)) {\n          float v_tmp_94984 = 0.0f; \n          v__94934 = v_tmp_94984; \n          int v_index_94985 = v__94926[(v_i_94923 + (128 * v_MWidthC_1 * v_wg_id_94921) + (v_MWidthC_1 * v_l_id_94922))]; \n          if (v_index_94985 < 0) {\n            v__94936_0 = v__94934; \n          } else {\n            if (v_index_94985 >= v_VLength_3) {\n              v__94936_0 = v__94934; \n            } else {\n              v__94936_0 = v__94928[v_index_94985]; \n            }\n          }\n          v__94938[(v_i_94923 + (128 * v_MWidthC_1 * v_wg_id_94921) + (v_MWidthC_1 * v_l_id_94922))] = mult(v__94936_0, v__94927[(v_i_94923 + (128 * v_MWidthC_1 * v_wg_id_94921) + (v_MWidthC_1 * v_l_id_94922))]); \n        }\n        /* end map_seq */\n        float v_tmp_94986 = 0.0f; \n        v__94939 = v_tmp_94986; \n        /* reduce_seq */\n        for (int v_i_94924 = 0; v_i_94924 < v_MWidthC_1; v_i_94924 = (1 + v_i_94924)) {\n          v__94939 = add(v__94939, v__94938[(v_i_94924 + (128 * v_MWidthC_1 * v_wg_id_94921) + (v_MWidthC_1 * v_l_id_94922))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94925 = 0; \n          v__94944[(v_l_id_94922 + (128 * v_wg_id_94921))] = doubleMultiplyAdd(v__94939, v__94930, v__94929[(v_l_id_94922 + (128 * v_wg_id_94921))], v__94931); \n        }\n        /* end map_seq */\n        v_l_id_94922 = atomic_inc(&(v_work_idx_8033)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94926",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94927",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94928",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94929",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__94930",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94931",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94938",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__94944",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}