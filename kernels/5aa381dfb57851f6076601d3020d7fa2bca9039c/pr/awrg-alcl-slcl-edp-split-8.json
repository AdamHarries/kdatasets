{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83671, const global float* restrict v__83672, const global float* restrict v__83673, const global float* restrict v__83674, float v__83675, float v__83676, global float* v__83696, global int* v__83678, local float* v__83691, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83680; \n  float v__83682; \n  float v__80974; \n  /* Private Memory */\n  float v__83684_0;\n  \n  float v__83686_0;\n  \n  int v__83690_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6988 = v__83678; \n    local int v_w_id_83664; \n    if (get_local_id(0) == 0) {\n      v_w_id_83664 = atomic_inc(v_work_idx_6988); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83664 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6986; \n        v_work_idx_6986 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_83665 = atomic_inc(&(v_work_idx_6986)); \n        while((v_l_id_83665 < v_MWidthC_1)){\n          float v_tmp_83754 = 0.0f; \n          v__83680 = v_tmp_83754; \n          /* reduce_while_seq */\n          for (int v_i_83666 = 0; v_i_83666 < 8; v_i_83666 = (1 + v_i_83666)) {\n            v__83690_0 = check(v__83680, v__83671[(v_l_id_83665 + (8 * v_MWidthC_1 * v_w_id_83664) + (v_MWidthC_1 * v_i_83666))]); \n            if (v__83690_0) {\n            } else {\n              break;\n            }\n            float v_tmp_83755 = 0.0f; \n            v__83682 = v_tmp_83755; \n            int v_index_83756 = v__83671[(v_l_id_83665 + (8 * v_MWidthC_1 * v_w_id_83664) + (v_MWidthC_1 * v_i_83666))]; \n            if (v_index_83756 < 0) {\n              v__83684_0 = v__83682; \n            } else {\n              if (v_index_83756 >= v_VLength_3) {\n                v__83684_0 = v__83682; \n              } else {\n                v__83684_0 = v__83673[v_index_83756]; \n              }\n            }\n            v__83686_0 = mult(v__83684_0, v__83672[(v_l_id_83665 + (8 * v_MWidthC_1 * v_w_id_83664) + (v_MWidthC_1 * v_i_83666))]); \n            v__83680 = add(v__83686_0, v__83680); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83667 = 0; \n            v__83691[v_l_id_83665] = id(v__83680); \n          }\n          /* end map_seq */\n          v_l_id_83665 = atomic_inc(&(v_work_idx_6986)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83668 = get_local_id(0); \n        float v_tmp_83759 = 0.0f; \n        v__80974 = v_tmp_83759; \n        /* reduce_seq */\n        for (int v_i_83669 = 0; v_i_83669 < v_MWidthC_1; v_i_83669 = (1 + v_i_83669)) {\n          v__80974 = add(v__80974, v__83691[(v_i_83669 + (v_MWidthC_1 * v_l_id_83668))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83670 = 0; \n          v__83696[v_w_id_83664] = doubleMultiplyAdd(v__80974, v__83675, v__83674[v_w_id_83664], v__83676); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83664 = atomic_inc(v_work_idx_6988); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83671",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83672",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83673",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83674",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83675",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83676",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83678",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83691",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}