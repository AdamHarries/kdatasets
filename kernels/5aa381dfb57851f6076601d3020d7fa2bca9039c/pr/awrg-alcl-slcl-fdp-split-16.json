{
  "name" : "awrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86908, const global float* restrict v__86909, const global float* restrict v__86910, const global float* restrict v__86911, float v__86912, float v__86913, global float* v__86931, global int* v__86915, local float* v__86926, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86917; \n  float v__86919; \n  float v__80974; \n  /* Private Memory */\n  float v__86921_0;\n  \n  float v__86923_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7290 = v__86915; \n    local int v_w_id_86901; \n    if (get_local_id(0) == 0) {\n      v_w_id_86901 = atomic_inc(v_work_idx_7290); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86901 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7288; \n        v_work_idx_7288 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_86902 = atomic_inc(&(v_work_idx_7288)); \n        while((v_l_id_86902 < v_MWidthC_1)){\n          float v_tmp_86986 = 0.0f; \n          v__86917 = v_tmp_86986; \n          /* reduce_seq */\n          for (int v_i_86903 = 0; v_i_86903 < 16; v_i_86903 = (1 + v_i_86903)) {\n            float v_tmp_86987 = 0.0f; \n            v__86919 = v_tmp_86987; \n            int v_index_86988 = v__86908[(v_l_id_86902 + (16 * v_MWidthC_1 * v_w_id_86901) + (v_MWidthC_1 * v_i_86903))]; \n            if (v_index_86988 < 0) {\n              v__86921_0 = v__86919; \n            } else {\n              if (v_index_86988 >= v_VLength_3) {\n                v__86921_0 = v__86919; \n              } else {\n                v__86921_0 = v__86910[v_index_86988]; \n              }\n            }\n            v__86923_0 = mult(v__86921_0, v__86909[(v_l_id_86902 + (16 * v_MWidthC_1 * v_w_id_86901) + (v_MWidthC_1 * v_i_86903))]); \n            v__86917 = add(v__86923_0, v__86917); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86904 = 0; \n            v__86926[v_l_id_86902] = id(v__86917); \n          }\n          /* end map_seq */\n          v_l_id_86902 = atomic_inc(&(v_work_idx_7288)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86905 = get_local_id(0); \n        float v_tmp_86991 = 0.0f; \n        v__80974 = v_tmp_86991; \n        /* reduce_seq */\n        for (int v_i_86906 = 0; v_i_86906 < v_MWidthC_1; v_i_86906 = (1 + v_i_86906)) {\n          v__80974 = add(v__80974, v__86926[(v_i_86906 + (v_MWidthC_1 * v_l_id_86905))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86907 = 0; \n          v__86931[v_w_id_86901] = doubleMultiplyAdd(v__80974, v__86912, v__86911[v_w_id_86901], v__86913); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86901 = atomic_inc(v_work_idx_7290); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86908",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86909",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86910",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86911",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86912",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86913",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86915",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86931",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86926",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}