{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68686, const global float* restrict v__68687, const global float* restrict v__68688, const global float* restrict v__68689, float v__68690, float v__68691, global float* v__68705, global int* v__68693, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68695; \n  float v__68697; \n  /* Private Memory */\n  float v__68699_0;\n  \n  float v__68701_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5583 = v__68693; \n    local int v_w_id_68682; \n    if (get_local_id(0) == 0) {\n      v_w_id_68682 = atomic_inc(v_work_idx_5583); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68682 < v_MHeight_2)){\n      for (int v_l_id_68683 = get_local_id(0); v_l_id_68683 < 64; v_l_id_68683 = (v_l_id_68683 + get_local_size(0))) {\n        float v_tmp_68746 = 3.4028235E38f; \n        v__68695 = v_tmp_68746; \n        /* reduce_seq */\n        for (int v_i_68684 = 0; v_i_68684 < v_MWidthC_1; v_i_68684 = (1 + v_i_68684)) {\n          float v_tmp_68747 = 3.4028235E38f; \n          v__68697 = v_tmp_68747; \n          int v_index_68748 = v__68686[(v_i_68684 + (64 * v_MWidthC_1 * v_w_id_68682) + (v_MWidthC_1 * v_l_id_68683))]; \n          if (v_index_68748 < 0) {\n            v__68699_0 = v__68697; \n          } else {\n            if (v_index_68748 >= v_VLength_3) {\n              v__68699_0 = v__68697; \n            } else {\n              v__68699_0 = v__68688[v_index_68748]; \n            }\n          }\n          v__68701_0 = absadd(v__68699_0, v__68687[(v_i_68684 + (64 * v_MWidthC_1 * v_w_id_68682) + (v_MWidthC_1 * v_l_id_68683))]); \n          v__68695 = clmin(v__68701_0, v__68695); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68685 = 0; \n          v__68705[(v_l_id_68683 + (64 * v_w_id_68682))] = doubleMultiplyAdd(v__68695, v__68690, v__68689[(v_l_id_68683 + (64 * v_w_id_68682))], v__68691); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_68682 = atomic_inc(v_work_idx_5583); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68686",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68687",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68688",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68689",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__68690",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68691",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68693",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68705",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}