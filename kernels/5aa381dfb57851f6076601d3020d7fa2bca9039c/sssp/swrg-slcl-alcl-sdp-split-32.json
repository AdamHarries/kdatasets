{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64161, const global float* restrict v__64162, const global float* restrict v__64163, const global float* restrict v__64164, float v__64165, float v__64166, global float* v__64183, global float* v__64173, local float* v__64178, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64169; \n  float v__64174; \n  float v__57186; \n  /* Private Memory */\n  float v__64171_0;\n  \n  for (int v_wg_id_64153 = get_group_id(0); v_wg_id_64153 < v_MHeight_2; v_wg_id_64153 = (v_wg_id_64153 + get_num_groups(0))) {\n    for (int v_l_id_64154 = get_local_id(0); v_l_id_64154 < v_MWidthC_1; v_l_id_64154 = (v_l_id_64154 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_64155 = 0; v_i_64155 < 32; v_i_64155 = (1 + v_i_64155)) {\n        float v_tmp_64244 = 3.4028235E38f; \n        v__64169 = v_tmp_64244; \n        int v_index_64245 = v__64161[(v_l_id_64154 + (32 * v_MWidthC_1 * v_wg_id_64153) + (v_MWidthC_1 * v_i_64155))]; \n        if (v_index_64245 < 0) {\n          v__64171_0 = v__64169; \n        } else {\n          if (v_index_64245 >= v_VLength_3) {\n            v__64171_0 = v__64169; \n          } else {\n            v__64171_0 = v__64163[v_index_64245]; \n          }\n        }\n        v__64173[(v_i_64155 + (32 * v_MWidthC_1 * v_wg_id_64153) + (32 * v_l_id_64154))] = absadd(v__64171_0, v__64162[(v_l_id_64154 + (32 * v_MWidthC_1 * v_wg_id_64153) + (v_MWidthC_1 * v_i_64155))]); \n      }\n      /* end map_seq */\n      float v_tmp_64246 = 3.4028235E38f; \n      v__64174 = v_tmp_64246; \n      /* reduce_seq */\n      for (int v_i_64156 = 0; v_i_64156 < 32; v_i_64156 = (1 + v_i_64156)) {\n        v__64174 = clmin(v__64174, v__64173[(v_i_64156 + (32 * v_MWidthC_1 * v_wg_id_64153) + (32 * v_l_id_64154))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64157 = 0; \n        v__64178[v_l_id_64154] = id(v__64174); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5156; \n      v_work_idx_5156 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_64158 = atomic_inc(&(v_work_idx_5156)); \n      while((v_l_id_64158 < 1)){\n        float v_tmp_64249 = 3.4028235E38f; \n        v__57186 = v_tmp_64249; \n        /* reduce_seq */\n        for (int v_i_64159 = 0; v_i_64159 < v_MWidthC_1; v_i_64159 = (1 + v_i_64159)) {\n          v__57186 = clmin(v__57186, v__64178[(v_i_64159 + (v_MWidthC_1 * v_l_id_64158))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64160 = 0; \n          v__64183[v_wg_id_64153] = doubleMultiplyAdd(v__57186, v__64165, v__64164[v_wg_id_64153], v__64166); \n        }\n        /* end map_seq */\n        v_l_id_64158 = atomic_inc(&(v_work_idx_5156)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64161",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64162",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64163",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64165",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64166",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64173",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__64183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64178",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}