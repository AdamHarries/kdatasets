{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71209, const global float* restrict v__71210, const global float* restrict v__71211, const global float* restrict v__71212, float v__71213, float v__71214, global float* v__71227, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71217; \n  float v__71219; \n  /* Private Memory */\n  float v__71221_0;\n  \n  float v__71223_0;\n  \n  for (int v_wg_id_71205 = get_group_id(0); v_wg_id_71205 < v_MHeight_2; v_wg_id_71205 = (v_wg_id_71205 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5816; \n      v_work_idx_5816 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71206 = atomic_inc(&(v_work_idx_5816)); \n      while((v_l_id_71206 < 128)){\n        float v_tmp_71266 = 3.4028235E38f; \n        v__71217 = v_tmp_71266; \n        /* reduce_seq */\n        for (int v_i_71207 = 0; v_i_71207 < v_MWidthC_1; v_i_71207 = (1 + v_i_71207)) {\n          float v_tmp_71267 = 3.4028235E38f; \n          v__71219 = v_tmp_71267; \n          int v_index_71268 = v__71209[(v_i_71207 + (128 * v_MWidthC_1 * v_wg_id_71205) + (v_MWidthC_1 * v_l_id_71206))]; \n          if (v_index_71268 < 0) {\n            v__71221_0 = v__71219; \n          } else {\n            if (v_index_71268 >= v_VLength_3) {\n              v__71221_0 = v__71219; \n            } else {\n              v__71221_0 = v__71211[v_index_71268]; \n            }\n          }\n          v__71223_0 = absadd(v__71221_0, v__71210[(v_i_71207 + (128 * v_MWidthC_1 * v_wg_id_71205) + (v_MWidthC_1 * v_l_id_71206))]); \n          v__71217 = clmin(v__71223_0, v__71217); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71208 = 0; \n          v__71227[(v_l_id_71206 + (128 * v_wg_id_71205))] = doubleMultiplyAdd(v__71217, v__71213, v__71212[(v_l_id_71206 + (128 * v_wg_id_71205))], v__71214); \n        }\n        /* end map_seq */\n        v_l_id_71206 = atomic_inc(&(v_work_idx_5816)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__71209",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71210",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71212",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__71213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71227",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}