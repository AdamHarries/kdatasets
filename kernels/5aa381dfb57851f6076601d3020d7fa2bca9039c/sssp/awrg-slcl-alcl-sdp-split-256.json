{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75833, const global float* restrict v__75834, const global float* restrict v__75835, const global float* restrict v__75836, float v__75837, float v__75838, global float* v__75856, global int* v__75840, global float* v__75846, local float* v__75851, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75842; \n  float v__75847; \n  float v__57186; \n  /* Private Memory */\n  float v__75844_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6252 = v__75840; \n    local int v_w_id_75825; \n    if (get_local_id(0) == 0) {\n      v_w_id_75825 = atomic_inc(v_work_idx_6252); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75825 < v_MHeight_2)){\n      for (int v_l_id_75826 = get_local_id(0); v_l_id_75826 < v_MWidthC_1; v_l_id_75826 = (v_l_id_75826 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_75827 = 0; v_i_75827 < 256; v_i_75827 = (1 + v_i_75827)) {\n          float v_tmp_75915 = 3.4028235E38f; \n          v__75842 = v_tmp_75915; \n          int v_index_75916 = v__75833[(v_l_id_75826 + (256 * v_MWidthC_1 * v_w_id_75825) + (v_MWidthC_1 * v_i_75827))]; \n          if (v_index_75916 < 0) {\n            v__75844_0 = v__75842; \n          } else {\n            if (v_index_75916 >= v_VLength_3) {\n              v__75844_0 = v__75842; \n            } else {\n              v__75844_0 = v__75835[v_index_75916]; \n            }\n          }\n          v__75846[(v_i_75827 + (256 * v_MWidthC_1 * v_w_id_75825) + (256 * v_l_id_75826))] = absadd(v__75844_0, v__75834[(v_l_id_75826 + (256 * v_MWidthC_1 * v_w_id_75825) + (v_MWidthC_1 * v_i_75827))]); \n        }\n        /* end map_seq */\n        float v_tmp_75917 = 3.4028235E38f; \n        v__75847 = v_tmp_75917; \n        /* reduce_seq */\n        for (int v_i_75828 = 0; v_i_75828 < 256; v_i_75828 = (1 + v_i_75828)) {\n          v__75847 = clmin(v__75847, v__75846[(v_i_75828 + (256 * v_MWidthC_1 * v_w_id_75825) + (256 * v_l_id_75826))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75829 = 0; \n          v__75851[v_l_id_75826] = id(v__75847); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6245; \n        v_work_idx_6245 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_75830 = atomic_inc(&(v_work_idx_6245)); \n        while((v_l_id_75830 < 1)){\n          float v_tmp_75920 = 3.4028235E38f; \n          v__57186 = v_tmp_75920; \n          /* reduce_seq */\n          for (int v_i_75831 = 0; v_i_75831 < v_MWidthC_1; v_i_75831 = (1 + v_i_75831)) {\n            v__57186 = clmin(v__57186, v__75851[(v_i_75831 + (v_MWidthC_1 * v_l_id_75830))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_75832 = 0; \n            v__75856[v_w_id_75825] = doubleMultiplyAdd(v__57186, v__75837, v__75836[v_w_id_75825], v__75838); \n          }\n          /* end map_seq */\n          v_l_id_75830 = atomic_inc(&(v_work_idx_6245)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_75825 = atomic_inc(v_work_idx_6252); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__75833",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75834",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75835",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75836",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75837",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75838",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75840",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__75846",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__75856",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75851",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}