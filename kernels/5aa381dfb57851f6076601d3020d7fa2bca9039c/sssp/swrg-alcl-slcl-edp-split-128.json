{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__71557, const global float* restrict v__71558, const global float* restrict v__71559, const global float* restrict v__71560, float v__71561, float v__71562, global float* v__71581, local float* v__71576, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71565; \n  float v__71567; \n  float v__57186; \n  /* Private Memory */\n  float v__71569_0;\n  \n  float v__71571_0;\n  \n  int v__71575_0;\n  \n  for (int v_wg_id_71550 = get_group_id(0); v_wg_id_71550 < v_MHeight_2; v_wg_id_71550 = (v_wg_id_71550 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5850; \n      v_work_idx_5850 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71551 = atomic_inc(&(v_work_idx_5850)); \n      while((v_l_id_71551 < v_MWidthC_1)){\n        float v_tmp_71641 = 3.4028235E38f; \n        v__71565 = v_tmp_71641; \n        /* reduce_while_seq */\n        for (int v_i_71552 = 0; v_i_71552 < 128; v_i_71552 = (1 + v_i_71552)) {\n          v__71575_0 = check(v__71565, v__71557[(v_l_id_71551 + (128 * v_MWidthC_1 * v_wg_id_71550) + (v_MWidthC_1 * v_i_71552))]); \n          if (v__71575_0) {\n          } else {\n            break;\n          }\n          float v_tmp_71642 = 3.4028235E38f; \n          v__71567 = v_tmp_71642; \n          int v_index_71643 = v__71557[(v_l_id_71551 + (128 * v_MWidthC_1 * v_wg_id_71550) + (v_MWidthC_1 * v_i_71552))]; \n          if (v_index_71643 < 0) {\n            v__71569_0 = v__71567; \n          } else {\n            if (v_index_71643 >= v_VLength_3) {\n              v__71569_0 = v__71567; \n            } else {\n              v__71569_0 = v__71559[v_index_71643]; \n            }\n          }\n          v__71571_0 = absadd(v__71569_0, v__71558[(v_l_id_71551 + (128 * v_MWidthC_1 * v_wg_id_71550) + (v_MWidthC_1 * v_i_71552))]); \n          v__71565 = clmin(v__71571_0, v__71565); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71553 = 0; \n          v__71576[v_l_id_71551] = id(v__71565); \n        }\n        /* end map_seq */\n        v_l_id_71551 = atomic_inc(&(v_work_idx_5850)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_71554 = get_local_id(0); \n      float v_tmp_71646 = 3.4028235E38f; \n      v__57186 = v_tmp_71646; \n      /* reduce_seq */\n      for (int v_i_71555 = 0; v_i_71555 < v_MWidthC_1; v_i_71555 = (1 + v_i_71555)) {\n        v__57186 = clmin(v__57186, v__71576[(v_i_71555 + (v_MWidthC_1 * v_l_id_71554))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71556 = 0; \n        v__71581[v_wg_id_71550] = doubleMultiplyAdd(v__57186, v__71561, v__71560[v_wg_id_71550], v__71562); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__71557",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71558",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71559",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71561",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71562",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71576",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}