{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60079, const global float* restrict v__60080, const global float* restrict v__60081, const global float* restrict v__60082, float v__60083, float v__60084, global float* v__60102, global int* v__60086, local float* v__60097, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60088; \n  float v__60090; \n  float v__57186; \n  /* Private Memory */\n  float v__60092_0;\n  \n  float v__60094_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4788 = v__60086; \n    local int v_w_id_60072; \n    if (get_local_id(0) == 0) {\n      v_w_id_60072 = atomic_inc(v_work_idx_4788); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60072 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4786; \n        v_work_idx_4786 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_60073 = atomic_inc(&(v_work_idx_4786)); \n        while((v_l_id_60073 < v_MWidthC_1)){\n          float v_tmp_60153 = 3.4028235E38f; \n          v__60088 = v_tmp_60153; \n          /* reduce_seq */\n          for (int v_i_60074 = 0; v_i_60074 < 8; v_i_60074 = (1 + v_i_60074)) {\n            float v_tmp_60154 = 3.4028235E38f; \n            v__60090 = v_tmp_60154; \n            int v_index_60155 = v__60079[(v_l_id_60073 + (8 * v_MWidthC_1 * v_w_id_60072) + (v_MWidthC_1 * v_i_60074))]; \n            if (v_index_60155 < 0) {\n              v__60092_0 = v__60090; \n            } else {\n              if (v_index_60155 >= v_VLength_3) {\n                v__60092_0 = v__60090; \n              } else {\n                v__60092_0 = v__60081[v_index_60155]; \n              }\n            }\n            v__60094_0 = absadd(v__60092_0, v__60080[(v_l_id_60073 + (8 * v_MWidthC_1 * v_w_id_60072) + (v_MWidthC_1 * v_i_60074))]); \n            v__60088 = clmin(v__60094_0, v__60088); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60075 = 0; \n            v__60097[v_l_id_60073] = id(v__60088); \n          }\n          /* end map_seq */\n          v_l_id_60073 = atomic_inc(&(v_work_idx_4786)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4781; \n        v_work_idx_4781 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_60076 = atomic_inc(&(v_work_idx_4781)); \n        while((v_l_id_60076 < 1)){\n          float v_tmp_60158 = 3.4028235E38f; \n          v__57186 = v_tmp_60158; \n          /* reduce_seq */\n          for (int v_i_60077 = 0; v_i_60077 < v_MWidthC_1; v_i_60077 = (1 + v_i_60077)) {\n            v__57186 = clmin(v__57186, v__60097[(v_i_60077 + (v_MWidthC_1 * v_l_id_60076))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60078 = 0; \n            v__60102[v_w_id_60072] = doubleMultiplyAdd(v__57186, v__60083, v__60082[v_w_id_60072], v__60084); \n          }\n          /* end map_seq */\n          v_l_id_60076 = atomic_inc(&(v_work_idx_4781)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60072 = atomic_inc(v_work_idx_4788); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60079",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60080",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60081",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60083",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60084",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60086",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60097",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}