{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72805, const global float* restrict v__72806, const global float* restrict v__72807, const global float* restrict v__72808, float v__72809, float v__72810, global float* v__72824, global int* v__72812, global float* v__72818, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72814; \n  float v__72819; \n  /* Private Memory */\n  float v__72816_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5968 = v__72812; \n    local int v_w_id_72800; \n    if (get_local_id(0) == 0) {\n      v_w_id_72800 = atomic_inc(v_work_idx_5968); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72800 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5966; \n        v_work_idx_5966 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_72801 = atomic_inc(&(v_work_idx_5966)); \n        while((v_l_id_72801 < 128)){\n          /* map_seq */\n          for (int v_i_72802 = 0; v_i_72802 < v_MWidthC_1; v_i_72802 = (1 + v_i_72802)) {\n            float v_tmp_72862 = 3.4028235E38f; \n            v__72814 = v_tmp_72862; \n            int v_index_72863 = v__72805[(v_i_72802 + (128 * v_MWidthC_1 * v_w_id_72800) + (v_MWidthC_1 * v_l_id_72801))]; \n            if (v_index_72863 < 0) {\n              v__72816_0 = v__72814; \n            } else {\n              if (v_index_72863 >= v_VLength_3) {\n                v__72816_0 = v__72814; \n              } else {\n                v__72816_0 = v__72807[v_index_72863]; \n              }\n            }\n            v__72818[(v_i_72802 + (128 * v_MWidthC_1 * v_w_id_72800) + (v_MWidthC_1 * v_l_id_72801))] = absadd(v__72816_0, v__72806[(v_i_72802 + (128 * v_MWidthC_1 * v_w_id_72800) + (v_MWidthC_1 * v_l_id_72801))]); \n          }\n          /* end map_seq */\n          float v_tmp_72864 = 3.4028235E38f; \n          v__72819 = v_tmp_72864; \n          /* reduce_seq */\n          for (int v_i_72803 = 0; v_i_72803 < v_MWidthC_1; v_i_72803 = (1 + v_i_72803)) {\n            v__72819 = clmin(v__72819, v__72818[(v_i_72803 + (128 * v_MWidthC_1 * v_w_id_72800) + (v_MWidthC_1 * v_l_id_72801))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_72804 = 0; \n            v__72824[(v_l_id_72801 + (128 * v_w_id_72800))] = doubleMultiplyAdd(v__72819, v__72809, v__72808[(v_l_id_72801 + (128 * v_w_id_72800))], v__72810); \n          }\n          /* end map_seq */\n          v_l_id_72801 = atomic_inc(&(v_work_idx_5966)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72800 = atomic_inc(v_work_idx_5968); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72805",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72806",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72807",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72808",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__72809",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72810",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72812",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__72818",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__72824",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}