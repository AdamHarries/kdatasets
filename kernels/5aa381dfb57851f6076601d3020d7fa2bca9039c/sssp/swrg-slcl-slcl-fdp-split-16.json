{
  "name" : "swrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60609, const global float* restrict v__60610, const global float* restrict v__60611, const global float* restrict v__60612, float v__60613, float v__60614, global float* v__60631, local float* v__60626, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60617; \n  float v__60619; \n  float v__57186; \n  /* Private Memory */\n  float v__60621_0;\n  \n  float v__60623_0;\n  \n  for (int v_wg_id_60602 = get_group_id(0); v_wg_id_60602 < v_MHeight_2; v_wg_id_60602 = (v_wg_id_60602 + get_num_groups(0))) {\n    for (int v_l_id_60603 = get_local_id(0); v_l_id_60603 < v_MWidthC_1; v_l_id_60603 = (v_l_id_60603 + get_local_size(0))) {\n      float v_tmp_60696 = 3.4028235E38f; \n      v__60617 = v_tmp_60696; \n      /* reduce_seq */\n      for (int v_i_60604 = 0; v_i_60604 < 16; v_i_60604 = (1 + v_i_60604)) {\n        float v_tmp_60697 = 3.4028235E38f; \n        v__60619 = v_tmp_60697; \n        int v_index_60698 = v__60609[(v_l_id_60603 + (16 * v_MWidthC_1 * v_wg_id_60602) + (v_MWidthC_1 * v_i_60604))]; \n        if (v_index_60698 < 0) {\n          v__60621_0 = v__60619; \n        } else {\n          if (v_index_60698 >= v_VLength_3) {\n            v__60621_0 = v__60619; \n          } else {\n            v__60621_0 = v__60611[v_index_60698]; \n          }\n        }\n        v__60623_0 = absadd(v__60621_0, v__60610[(v_l_id_60603 + (16 * v_MWidthC_1 * v_wg_id_60602) + (v_MWidthC_1 * v_i_60604))]); \n        v__60617 = clmin(v__60623_0, v__60617); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60605 = 0; \n        v__60626[v_l_id_60603] = id(v__60617); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_60606 = get_local_id(0); \n      float v_tmp_60701 = 3.4028235E38f; \n      v__57186 = v_tmp_60701; \n      /* reduce_seq */\n      for (int v_i_60607 = 0; v_i_60607 < v_MWidthC_1; v_i_60607 = (1 + v_i_60607)) {\n        v__57186 = clmin(v__57186, v__60626[(v_i_60607 + (v_MWidthC_1 * v_l_id_60606))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60608 = 0; \n        v__60631[v_wg_id_60602] = doubleMultiplyAdd(v__57186, v__60613, v__60612[v_wg_id_60602], v__60614); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60609",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60610",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60611",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60612",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60613",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60614",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__60631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60626",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}