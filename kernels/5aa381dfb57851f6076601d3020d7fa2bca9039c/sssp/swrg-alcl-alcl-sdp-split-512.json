{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78329, const global float* restrict v__78330, const global float* restrict v__78331, const global float* restrict v__78332, float v__78333, float v__78334, global float* v__78351, global float* v__78341, local float* v__78346, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78337; \n  float v__78342; \n  float v__57186; \n  /* Private Memory */\n  float v__78339_0;\n  \n  for (int v_wg_id_78321 = get_group_id(0); v_wg_id_78321 < v_MHeight_2; v_wg_id_78321 = (v_wg_id_78321 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6485; \n      v_work_idx_6485 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78322 = atomic_inc(&(v_work_idx_6485)); \n      while((v_l_id_78322 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_78323 = 0; v_i_78323 < 512; v_i_78323 = (1 + v_i_78323)) {\n          float v_tmp_78404 = 3.4028235E38f; \n          v__78337 = v_tmp_78404; \n          int v_index_78405 = v__78329[(v_l_id_78322 + (512 * v_MWidthC_1 * v_wg_id_78321) + (v_MWidthC_1 * v_i_78323))]; \n          if (v_index_78405 < 0) {\n            v__78339_0 = v__78337; \n          } else {\n            if (v_index_78405 >= v_VLength_3) {\n              v__78339_0 = v__78337; \n            } else {\n              v__78339_0 = v__78331[v_index_78405]; \n            }\n          }\n          v__78341[(v_i_78323 + (512 * v_MWidthC_1 * v_wg_id_78321) + (512 * v_l_id_78322))] = absadd(v__78339_0, v__78330[(v_l_id_78322 + (512 * v_MWidthC_1 * v_wg_id_78321) + (v_MWidthC_1 * v_i_78323))]); \n        }\n        /* end map_seq */\n        float v_tmp_78406 = 3.4028235E38f; \n        v__78342 = v_tmp_78406; \n        /* reduce_seq */\n        for (int v_i_78324 = 0; v_i_78324 < 512; v_i_78324 = (1 + v_i_78324)) {\n          v__78342 = clmin(v__78342, v__78341[(v_i_78324 + (512 * v_MWidthC_1 * v_wg_id_78321) + (512 * v_l_id_78322))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78325 = 0; \n          v__78346[v_l_id_78322] = id(v__78342); \n        }\n        /* end map_seq */\n        v_l_id_78322 = atomic_inc(&(v_work_idx_6485)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6479; \n      v_work_idx_6479 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78326 = atomic_inc(&(v_work_idx_6479)); \n      while((v_l_id_78326 < 1)){\n        float v_tmp_78409 = 3.4028235E38f; \n        v__57186 = v_tmp_78409; \n        /* reduce_seq */\n        for (int v_i_78327 = 0; v_i_78327 < v_MWidthC_1; v_i_78327 = (1 + v_i_78327)) {\n          v__57186 = clmin(v__57186, v__78346[(v_i_78327 + (v_MWidthC_1 * v_l_id_78326))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78328 = 0; \n          v__78351[v_wg_id_78321] = doubleMultiplyAdd(v__57186, v__78333, v__78332[v_wg_id_78321], v__78334); \n        }\n        /* end map_seq */\n        v_l_id_78326 = atomic_inc(&(v_work_idx_6479)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78329",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78330",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78331",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78333",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78334",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78341",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__78351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78346",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}