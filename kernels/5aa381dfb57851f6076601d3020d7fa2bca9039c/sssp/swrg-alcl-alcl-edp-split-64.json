{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__68515, const global float* restrict v__68516, const global float* restrict v__68517, const global float* restrict v__68518, float v__68519, float v__68520, global float* v__68539, local float* v__68534, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68523; \n  float v__68525; \n  float v__57186; \n  /* Private Memory */\n  float v__68527_0;\n  \n  float v__68529_0;\n  \n  int v__68533_0;\n  \n  for (int v_wg_id_68508 = get_group_id(0); v_wg_id_68508 < v_MHeight_2; v_wg_id_68508 = (v_wg_id_68508 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5569; \n      v_work_idx_5569 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68509 = atomic_inc(&(v_work_idx_5569)); \n      while((v_l_id_68509 < v_MWidthC_1)){\n        float v_tmp_68595 = 3.4028235E38f; \n        v__68523 = v_tmp_68595; \n        /* reduce_while_seq */\n        for (int v_i_68510 = 0; v_i_68510 < 64; v_i_68510 = (1 + v_i_68510)) {\n          v__68533_0 = check(v__68523, v__68515[(v_l_id_68509 + (64 * v_MWidthC_1 * v_wg_id_68508) + (v_MWidthC_1 * v_i_68510))]); \n          if (v__68533_0) {\n          } else {\n            break;\n          }\n          float v_tmp_68596 = 3.4028235E38f; \n          v__68525 = v_tmp_68596; \n          int v_index_68597 = v__68515[(v_l_id_68509 + (64 * v_MWidthC_1 * v_wg_id_68508) + (v_MWidthC_1 * v_i_68510))]; \n          if (v_index_68597 < 0) {\n            v__68527_0 = v__68525; \n          } else {\n            if (v_index_68597 >= v_VLength_3) {\n              v__68527_0 = v__68525; \n            } else {\n              v__68527_0 = v__68517[v_index_68597]; \n            }\n          }\n          v__68529_0 = absadd(v__68527_0, v__68516[(v_l_id_68509 + (64 * v_MWidthC_1 * v_wg_id_68508) + (v_MWidthC_1 * v_i_68510))]); \n          v__68523 = clmin(v__68529_0, v__68523); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68511 = 0; \n          v__68534[v_l_id_68509] = id(v__68523); \n        }\n        /* end map_seq */\n        v_l_id_68509 = atomic_inc(&(v_work_idx_5569)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5564; \n      v_work_idx_5564 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68512 = atomic_inc(&(v_work_idx_5564)); \n      while((v_l_id_68512 < 1)){\n        float v_tmp_68600 = 3.4028235E38f; \n        v__57186 = v_tmp_68600; \n        /* reduce_seq */\n        for (int v_i_68513 = 0; v_i_68513 < v_MWidthC_1; v_i_68513 = (1 + v_i_68513)) {\n          v__57186 = clmin(v__57186, v__68534[(v_i_68513 + (v_MWidthC_1 * v_l_id_68512))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68514 = 0; \n          v__68539[v_wg_id_68508] = doubleMultiplyAdd(v__57186, v__68519, v__68518[v_wg_id_68508], v__68520); \n        }\n        /* end map_seq */\n        v_l_id_68512 = atomic_inc(&(v_work_idx_5564)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__68515",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68516",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68517",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68519",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68520",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68539",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68534",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}