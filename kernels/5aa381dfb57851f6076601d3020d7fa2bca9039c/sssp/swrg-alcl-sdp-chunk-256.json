{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74472, const global float* restrict v__74473, const global float* restrict v__74474, const global float* restrict v__74475, float v__74476, float v__74477, global float* v__74490, global float* v__74484, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74480; \n  float v__74485; \n  /* Private Memory */\n  float v__74482_0;\n  \n  for (int v_wg_id_74467 = get_group_id(0); v_wg_id_74467 < v_MHeight_2; v_wg_id_74467 = (v_wg_id_74467 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6122; \n      v_work_idx_6122 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74468 = atomic_inc(&(v_work_idx_6122)); \n      while((v_l_id_74468 < 256)){\n        /* map_seq */\n        for (int v_i_74469 = 0; v_i_74469 < v_MWidthC_1; v_i_74469 = (1 + v_i_74469)) {\n          float v_tmp_74530 = 3.4028235E38f; \n          v__74480 = v_tmp_74530; \n          int v_index_74531 = v__74472[(v_i_74469 + (256 * v_MWidthC_1 * v_wg_id_74467) + (v_MWidthC_1 * v_l_id_74468))]; \n          if (v_index_74531 < 0) {\n            v__74482_0 = v__74480; \n          } else {\n            if (v_index_74531 >= v_VLength_3) {\n              v__74482_0 = v__74480; \n            } else {\n              v__74482_0 = v__74474[v_index_74531]; \n            }\n          }\n          v__74484[(v_i_74469 + (256 * v_MWidthC_1 * v_wg_id_74467) + (v_MWidthC_1 * v_l_id_74468))] = absadd(v__74482_0, v__74473[(v_i_74469 + (256 * v_MWidthC_1 * v_wg_id_74467) + (v_MWidthC_1 * v_l_id_74468))]); \n        }\n        /* end map_seq */\n        float v_tmp_74532 = 3.4028235E38f; \n        v__74485 = v_tmp_74532; \n        /* reduce_seq */\n        for (int v_i_74470 = 0; v_i_74470 < v_MWidthC_1; v_i_74470 = (1 + v_i_74470)) {\n          v__74485 = clmin(v__74485, v__74484[(v_i_74470 + (256 * v_MWidthC_1 * v_wg_id_74467) + (v_MWidthC_1 * v_l_id_74468))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74471 = 0; \n          v__74490[(v_l_id_74468 + (256 * v_wg_id_74467))] = doubleMultiplyAdd(v__74485, v__74476, v__74475[(v_l_id_74468 + (256 * v_wg_id_74467))], v__74477); \n        }\n        /* end map_seq */\n        v_l_id_74468 = atomic_inc(&(v_work_idx_6122)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74472",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74473",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74474",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74475",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__74476",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74477",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74484",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74490",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}