{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67277, const global float* restrict v__67278, const global float* restrict v__67279, const global float* restrict v__67280, float v__67281, float v__67282, global float* v__67299, local float* v__67294, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67285; \n  float v__67287; \n  float v__57186; \n  /* Private Memory */\n  float v__67289_0;\n  \n  float v__67291_0;\n  \n  for (int v_wg_id_67270 = get_group_id(0); v_wg_id_67270 < v_MHeight_2; v_wg_id_67270 = (v_wg_id_67270 + get_num_groups(0))) {\n    for (int v_l_id_67271 = get_local_id(0); v_l_id_67271 < v_MWidthC_1; v_l_id_67271 = (v_l_id_67271 + get_local_size(0))) {\n      float v_tmp_67364 = 3.4028235E38f; \n      v__67285 = v_tmp_67364; \n      /* reduce_seq */\n      for (int v_i_67272 = 0; v_i_67272 < 64; v_i_67272 = (1 + v_i_67272)) {\n        float v_tmp_67365 = 3.4028235E38f; \n        v__67287 = v_tmp_67365; \n        int v_index_67366 = v__67277[(v_l_id_67271 + (64 * v_MWidthC_1 * v_wg_id_67270) + (v_MWidthC_1 * v_i_67272))]; \n        if (v_index_67366 < 0) {\n          v__67289_0 = v__67287; \n        } else {\n          if (v_index_67366 >= v_VLength_3) {\n            v__67289_0 = v__67287; \n          } else {\n            v__67289_0 = v__67279[v_index_67366]; \n          }\n        }\n        v__67291_0 = absadd(v__67289_0, v__67278[(v_l_id_67271 + (64 * v_MWidthC_1 * v_wg_id_67270) + (v_MWidthC_1 * v_i_67272))]); \n        v__67285 = clmin(v__67291_0, v__67285); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67273 = 0; \n        v__67294[v_l_id_67271] = id(v__67285); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_67274 = get_local_id(0); \n      float v_tmp_67369 = 3.4028235E38f; \n      v__57186 = v_tmp_67369; \n      /* reduce_seq */\n      for (int v_i_67275 = 0; v_i_67275 < v_MWidthC_1; v_i_67275 = (1 + v_i_67275)) {\n        v__57186 = clmin(v__57186, v__67294[(v_i_67275 + (v_MWidthC_1 * v_l_id_67274))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67276 = 0; \n        v__67299[v_wg_id_67270] = doubleMultiplyAdd(v__57186, v__67281, v__67280[v_wg_id_67270], v__67282); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__67277",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67278",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67279",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67281",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67282",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__67299",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67294",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}