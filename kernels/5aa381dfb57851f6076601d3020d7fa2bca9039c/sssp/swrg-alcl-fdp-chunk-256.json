{
  "name" : "swrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74543, const global float* restrict v__74544, const global float* restrict v__74545, const global float* restrict v__74546, float v__74547, float v__74548, global float* v__74561, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74551; \n  float v__74553; \n  /* Private Memory */\n  float v__74555_0;\n  \n  float v__74557_0;\n  \n  for (int v_wg_id_74539 = get_group_id(0); v_wg_id_74539 < v_MHeight_2; v_wg_id_74539 = (v_wg_id_74539 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6128; \n      v_work_idx_6128 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74540 = atomic_inc(&(v_work_idx_6128)); \n      while((v_l_id_74540 < 256)){\n        float v_tmp_74600 = 3.4028235E38f; \n        v__74551 = v_tmp_74600; \n        /* reduce_seq */\n        for (int v_i_74541 = 0; v_i_74541 < v_MWidthC_1; v_i_74541 = (1 + v_i_74541)) {\n          float v_tmp_74601 = 3.4028235E38f; \n          v__74553 = v_tmp_74601; \n          int v_index_74602 = v__74543[(v_i_74541 + (256 * v_MWidthC_1 * v_wg_id_74539) + (v_MWidthC_1 * v_l_id_74540))]; \n          if (v_index_74602 < 0) {\n            v__74555_0 = v__74553; \n          } else {\n            if (v_index_74602 >= v_VLength_3) {\n              v__74555_0 = v__74553; \n            } else {\n              v__74555_0 = v__74545[v_index_74602]; \n            }\n          }\n          v__74557_0 = absadd(v__74555_0, v__74544[(v_i_74541 + (256 * v_MWidthC_1 * v_wg_id_74539) + (v_MWidthC_1 * v_l_id_74540))]); \n          v__74551 = clmin(v__74557_0, v__74551); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74542 = 0; \n          v__74561[(v_l_id_74540 + (256 * v_wg_id_74539))] = doubleMultiplyAdd(v__74551, v__74547, v__74546[(v_l_id_74540 + (256 * v_wg_id_74539))], v__74548); \n        }\n        /* end map_seq */\n        v_l_id_74540 = atomic_inc(&(v_work_idx_6128)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__74543",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74544",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74545",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74546",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__74547",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74548",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__74561",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}