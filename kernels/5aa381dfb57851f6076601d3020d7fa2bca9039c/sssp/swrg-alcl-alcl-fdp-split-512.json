{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78423, const global float* restrict v__78424, const global float* restrict v__78425, const global float* restrict v__78426, float v__78427, float v__78428, global float* v__78445, local float* v__78440, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78431; \n  float v__78433; \n  float v__57186; \n  /* Private Memory */\n  float v__78435_0;\n  \n  float v__78437_0;\n  \n  for (int v_wg_id_78416 = get_group_id(0); v_wg_id_78416 < v_MHeight_2; v_wg_id_78416 = (v_wg_id_78416 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6495; \n      v_work_idx_6495 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78417 = atomic_inc(&(v_work_idx_6495)); \n      while((v_l_id_78417 < v_MWidthC_1)){\n        float v_tmp_78498 = 3.4028235E38f; \n        v__78431 = v_tmp_78498; \n        /* reduce_seq */\n        for (int v_i_78418 = 0; v_i_78418 < 512; v_i_78418 = (1 + v_i_78418)) {\n          float v_tmp_78499 = 3.4028235E38f; \n          v__78433 = v_tmp_78499; \n          int v_index_78500 = v__78423[(v_l_id_78417 + (512 * v_MWidthC_1 * v_wg_id_78416) + (v_MWidthC_1 * v_i_78418))]; \n          if (v_index_78500 < 0) {\n            v__78435_0 = v__78433; \n          } else {\n            if (v_index_78500 >= v_VLength_3) {\n              v__78435_0 = v__78433; \n            } else {\n              v__78435_0 = v__78425[v_index_78500]; \n            }\n          }\n          v__78437_0 = absadd(v__78435_0, v__78424[(v_l_id_78417 + (512 * v_MWidthC_1 * v_wg_id_78416) + (v_MWidthC_1 * v_i_78418))]); \n          v__78431 = clmin(v__78437_0, v__78431); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78419 = 0; \n          v__78440[v_l_id_78417] = id(v__78431); \n        }\n        /* end map_seq */\n        v_l_id_78417 = atomic_inc(&(v_work_idx_6495)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6490; \n      v_work_idx_6490 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78420 = atomic_inc(&(v_work_idx_6490)); \n      while((v_l_id_78420 < 1)){\n        float v_tmp_78503 = 3.4028235E38f; \n        v__57186 = v_tmp_78503; \n        /* reduce_seq */\n        for (int v_i_78421 = 0; v_i_78421 < v_MWidthC_1; v_i_78421 = (1 + v_i_78421)) {\n          v__57186 = clmin(v__57186, v__78440[(v_i_78421 + (v_MWidthC_1 * v_l_id_78420))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78422 = 0; \n          v__78445[v_wg_id_78416] = doubleMultiplyAdd(v__57186, v__78427, v__78426[v_wg_id_78416], v__78428); \n        }\n        /* end map_seq */\n        v_l_id_78420 = atomic_inc(&(v_work_idx_6490)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78423",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78424",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78425",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78426",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78427",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78428",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78440",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}