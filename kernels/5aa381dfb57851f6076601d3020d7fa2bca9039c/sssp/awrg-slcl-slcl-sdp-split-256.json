{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75512, const global float* restrict v__75513, const global float* restrict v__75514, const global float* restrict v__75515, float v__75516, float v__75517, global float* v__75535, global int* v__75519, global float* v__75525, local float* v__75530, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75521; \n  float v__75526; \n  float v__57186; \n  /* Private Memory */\n  float v__75523_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6223 = v__75519; \n    local int v_w_id_75504; \n    if (get_local_id(0) == 0) {\n      v_w_id_75504 = atomic_inc(v_work_idx_6223); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75504 < v_MHeight_2)){\n      for (int v_l_id_75505 = get_local_id(0); v_l_id_75505 < v_MWidthC_1; v_l_id_75505 = (v_l_id_75505 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_75506 = 0; v_i_75506 < 256; v_i_75506 = (1 + v_i_75506)) {\n          float v_tmp_75598 = 3.4028235E38f; \n          v__75521 = v_tmp_75598; \n          int v_index_75599 = v__75512[(v_l_id_75505 + (256 * v_MWidthC_1 * v_w_id_75504) + (v_MWidthC_1 * v_i_75506))]; \n          if (v_index_75599 < 0) {\n            v__75523_0 = v__75521; \n          } else {\n            if (v_index_75599 >= v_VLength_3) {\n              v__75523_0 = v__75521; \n            } else {\n              v__75523_0 = v__75514[v_index_75599]; \n            }\n          }\n          v__75525[(v_i_75506 + (256 * v_MWidthC_1 * v_w_id_75504) + (256 * v_l_id_75505))] = absadd(v__75523_0, v__75513[(v_l_id_75505 + (256 * v_MWidthC_1 * v_w_id_75504) + (v_MWidthC_1 * v_i_75506))]); \n        }\n        /* end map_seq */\n        float v_tmp_75600 = 3.4028235E38f; \n        v__75526 = v_tmp_75600; \n        /* reduce_seq */\n        for (int v_i_75507 = 0; v_i_75507 < 256; v_i_75507 = (1 + v_i_75507)) {\n          v__75526 = clmin(v__75526, v__75525[(v_i_75507 + (256 * v_MWidthC_1 * v_w_id_75504) + (256 * v_l_id_75505))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75508 = 0; \n          v__75530[v_l_id_75505] = id(v__75526); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_75509 = get_local_id(0); \n        float v_tmp_75603 = 3.4028235E38f; \n        v__57186 = v_tmp_75603; \n        /* reduce_seq */\n        for (int v_i_75510 = 0; v_i_75510 < v_MWidthC_1; v_i_75510 = (1 + v_i_75510)) {\n          v__57186 = clmin(v__57186, v__75530[(v_i_75510 + (v_MWidthC_1 * v_l_id_75509))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75511 = 0; \n          v__75535[v_w_id_75504] = doubleMultiplyAdd(v__57186, v__75516, v__75515[v_w_id_75504], v__75517); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_75504 = atomic_inc(v_work_idx_6223); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__75512",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75513",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75514",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75515",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75516",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75517",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75519",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__75525",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__75535",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75530",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}