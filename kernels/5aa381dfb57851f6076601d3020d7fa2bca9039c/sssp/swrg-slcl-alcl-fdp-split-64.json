{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67597, const global float* restrict v__67598, const global float* restrict v__67599, const global float* restrict v__67600, float v__67601, float v__67602, global float* v__67619, local float* v__67614, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67605; \n  float v__67607; \n  float v__57186; \n  /* Private Memory */\n  float v__67609_0;\n  \n  float v__67611_0;\n  \n  for (int v_wg_id_67590 = get_group_id(0); v_wg_id_67590 < v_MHeight_2; v_wg_id_67590 = (v_wg_id_67590 + get_num_groups(0))) {\n    for (int v_l_id_67591 = get_local_id(0); v_l_id_67591 < v_MWidthC_1; v_l_id_67591 = (v_l_id_67591 + get_local_size(0))) {\n      float v_tmp_67680 = 3.4028235E38f; \n      v__67605 = v_tmp_67680; \n      /* reduce_seq */\n      for (int v_i_67592 = 0; v_i_67592 < 64; v_i_67592 = (1 + v_i_67592)) {\n        float v_tmp_67681 = 3.4028235E38f; \n        v__67607 = v_tmp_67681; \n        int v_index_67682 = v__67597[(v_l_id_67591 + (64 * v_MWidthC_1 * v_wg_id_67590) + (v_MWidthC_1 * v_i_67592))]; \n        if (v_index_67682 < 0) {\n          v__67609_0 = v__67607; \n        } else {\n          if (v_index_67682 >= v_VLength_3) {\n            v__67609_0 = v__67607; \n          } else {\n            v__67609_0 = v__67599[v_index_67682]; \n          }\n        }\n        v__67611_0 = absadd(v__67609_0, v__67598[(v_l_id_67591 + (64 * v_MWidthC_1 * v_wg_id_67590) + (v_MWidthC_1 * v_i_67592))]); \n        v__67605 = clmin(v__67611_0, v__67605); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67593 = 0; \n        v__67614[v_l_id_67591] = id(v__67605); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5478; \n      v_work_idx_5478 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_67594 = atomic_inc(&(v_work_idx_5478)); \n      while((v_l_id_67594 < 1)){\n        float v_tmp_67685 = 3.4028235E38f; \n        v__57186 = v_tmp_67685; \n        /* reduce_seq */\n        for (int v_i_67595 = 0; v_i_67595 < v_MWidthC_1; v_i_67595 = (1 + v_i_67595)) {\n          v__57186 = clmin(v__57186, v__67614[(v_i_67595 + (v_MWidthC_1 * v_l_id_67594))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67596 = 0; \n          v__67619[v_wg_id_67590] = doubleMultiplyAdd(v__57186, v__67601, v__67600[v_wg_id_67590], v__67602); \n        }\n        /* end map_seq */\n        v_l_id_67594 = atomic_inc(&(v_work_idx_5478)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__67597",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67598",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67599",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67600",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67601",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67602",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__67619",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67614",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}