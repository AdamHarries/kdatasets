{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73415, const global float* restrict v__73416, const global float* restrict v__73417, const global float* restrict v__73418, float v__73419, float v__73420, global float* v__73438, global int* v__73422, local float* v__73433, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73424; \n  float v__73426; \n  float v__57186; \n  /* Private Memory */\n  float v__73428_0;\n  \n  float v__73430_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6036 = v__73422; \n    local int v_w_id_73408; \n    if (get_local_id(0) == 0) {\n      v_w_id_73408 = atomic_inc(v_work_idx_6036); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73408 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6034; \n        v_work_idx_6034 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73409 = atomic_inc(&(v_work_idx_6034)); \n        while((v_l_id_73409 < v_MWidthC_1)){\n          float v_tmp_73489 = 3.4028235E38f; \n          v__73424 = v_tmp_73489; \n          /* reduce_seq */\n          for (int v_i_73410 = 0; v_i_73410 < 128; v_i_73410 = (1 + v_i_73410)) {\n            float v_tmp_73490 = 3.4028235E38f; \n            v__73426 = v_tmp_73490; \n            int v_index_73491 = v__73415[(v_l_id_73409 + (128 * v_MWidthC_1 * v_w_id_73408) + (v_MWidthC_1 * v_i_73410))]; \n            if (v_index_73491 < 0) {\n              v__73428_0 = v__73426; \n            } else {\n              if (v_index_73491 >= v_VLength_3) {\n                v__73428_0 = v__73426; \n              } else {\n                v__73428_0 = v__73417[v_index_73491]; \n              }\n            }\n            v__73430_0 = absadd(v__73428_0, v__73416[(v_l_id_73409 + (128 * v_MWidthC_1 * v_w_id_73408) + (v_MWidthC_1 * v_i_73410))]); \n            v__73424 = clmin(v__73430_0, v__73424); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73411 = 0; \n            v__73433[v_l_id_73409] = id(v__73424); \n          }\n          /* end map_seq */\n          v_l_id_73409 = atomic_inc(&(v_work_idx_6034)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6029; \n        v_work_idx_6029 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73412 = atomic_inc(&(v_work_idx_6029)); \n        while((v_l_id_73412 < 1)){\n          float v_tmp_73494 = 3.4028235E38f; \n          v__57186 = v_tmp_73494; \n          /* reduce_seq */\n          for (int v_i_73413 = 0; v_i_73413 < v_MWidthC_1; v_i_73413 = (1 + v_i_73413)) {\n            v__57186 = clmin(v__57186, v__73433[(v_i_73413 + (v_MWidthC_1 * v_l_id_73412))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73414 = 0; \n            v__73438[v_w_id_73408] = doubleMultiplyAdd(v__57186, v__73419, v__73418[v_w_id_73408], v__73420); \n          }\n          /* end map_seq */\n          v_l_id_73412 = atomic_inc(&(v_work_idx_6029)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73408 = atomic_inc(v_work_idx_6036); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73415",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73416",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73417",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73418",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73419",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73420",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73422",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73438",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73433",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}