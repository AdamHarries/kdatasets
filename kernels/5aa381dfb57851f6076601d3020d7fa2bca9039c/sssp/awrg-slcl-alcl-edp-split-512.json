{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__79369, const global float* restrict v__79370, const global float* restrict v__79371, const global float* restrict v__79372, float v__79373, float v__79374, global float* v__79394, global int* v__79376, local float* v__79389, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79378; \n  float v__79380; \n  float v__57186; \n  /* Private Memory */\n  float v__79382_0;\n  \n  float v__79384_0;\n  \n  int v__79388_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6584 = v__79376; \n    local int v_w_id_79362; \n    if (get_local_id(0) == 0) {\n      v_w_id_79362 = atomic_inc(v_work_idx_6584); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79362 < v_MHeight_2)){\n      for (int v_l_id_79363 = get_local_id(0); v_l_id_79363 < v_MWidthC_1; v_l_id_79363 = (v_l_id_79363 + get_local_size(0))) {\n        float v_tmp_79456 = 3.4028235E38f; \n        v__79378 = v_tmp_79456; \n        /* reduce_while_seq */\n        for (int v_i_79364 = 0; v_i_79364 < 512; v_i_79364 = (1 + v_i_79364)) {\n          v__79388_0 = check(v__79378, v__79369[(v_l_id_79363 + (512 * v_MWidthC_1 * v_w_id_79362) + (v_MWidthC_1 * v_i_79364))]); \n          if (v__79388_0) {\n          } else {\n            break;\n          }\n          float v_tmp_79457 = 3.4028235E38f; \n          v__79380 = v_tmp_79457; \n          int v_index_79458 = v__79369[(v_l_id_79363 + (512 * v_MWidthC_1 * v_w_id_79362) + (v_MWidthC_1 * v_i_79364))]; \n          if (v_index_79458 < 0) {\n            v__79382_0 = v__79380; \n          } else {\n            if (v_index_79458 >= v_VLength_3) {\n              v__79382_0 = v__79380; \n            } else {\n              v__79382_0 = v__79371[v_index_79458]; \n            }\n          }\n          v__79384_0 = absadd(v__79382_0, v__79370[(v_l_id_79363 + (512 * v_MWidthC_1 * v_w_id_79362) + (v_MWidthC_1 * v_i_79364))]); \n          v__79378 = clmin(v__79384_0, v__79378); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79365 = 0; \n          v__79389[v_l_id_79363] = id(v__79378); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6578; \n        v_work_idx_6578 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_79366 = atomic_inc(&(v_work_idx_6578)); \n        while((v_l_id_79366 < 1)){\n          float v_tmp_79461 = 3.4028235E38f; \n          v__57186 = v_tmp_79461; \n          /* reduce_seq */\n          for (int v_i_79367 = 0; v_i_79367 < v_MWidthC_1; v_i_79367 = (1 + v_i_79367)) {\n            v__57186 = clmin(v__57186, v__79389[(v_i_79367 + (v_MWidthC_1 * v_l_id_79366))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79368 = 0; \n            v__79394[v_w_id_79362] = doubleMultiplyAdd(v__57186, v__79373, v__79372[v_w_id_79362], v__79374); \n          }\n          /* end map_seq */\n          v_l_id_79366 = atomic_inc(&(v_work_idx_6578)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79362 = atomic_inc(v_work_idx_6584); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79369",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79370",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79371",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79372",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79373",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79374",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79376",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79389",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}