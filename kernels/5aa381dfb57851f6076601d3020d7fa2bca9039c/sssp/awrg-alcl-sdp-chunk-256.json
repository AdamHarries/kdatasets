{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76139, const global float* restrict v__76140, const global float* restrict v__76141, const global float* restrict v__76142, float v__76143, float v__76144, global float* v__76158, global int* v__76146, global float* v__76152, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76148; \n  float v__76153; \n  /* Private Memory */\n  float v__76150_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6280 = v__76146; \n    local int v_w_id_76134; \n    if (get_local_id(0) == 0) {\n      v_w_id_76134 = atomic_inc(v_work_idx_6280); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76134 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6278; \n        v_work_idx_6278 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76135 = atomic_inc(&(v_work_idx_6278)); \n        while((v_l_id_76135 < 256)){\n          /* map_seq */\n          for (int v_i_76136 = 0; v_i_76136 < v_MWidthC_1; v_i_76136 = (1 + v_i_76136)) {\n            float v_tmp_76196 = 3.4028235E38f; \n            v__76148 = v_tmp_76196; \n            int v_index_76197 = v__76139[(v_i_76136 + (256 * v_MWidthC_1 * v_w_id_76134) + (v_MWidthC_1 * v_l_id_76135))]; \n            if (v_index_76197 < 0) {\n              v__76150_0 = v__76148; \n            } else {\n              if (v_index_76197 >= v_VLength_3) {\n                v__76150_0 = v__76148; \n              } else {\n                v__76150_0 = v__76141[v_index_76197]; \n              }\n            }\n            v__76152[(v_i_76136 + (256 * v_MWidthC_1 * v_w_id_76134) + (v_MWidthC_1 * v_l_id_76135))] = absadd(v__76150_0, v__76140[(v_i_76136 + (256 * v_MWidthC_1 * v_w_id_76134) + (v_MWidthC_1 * v_l_id_76135))]); \n          }\n          /* end map_seq */\n          float v_tmp_76198 = 3.4028235E38f; \n          v__76153 = v_tmp_76198; \n          /* reduce_seq */\n          for (int v_i_76137 = 0; v_i_76137 < v_MWidthC_1; v_i_76137 = (1 + v_i_76137)) {\n            v__76153 = clmin(v__76153, v__76152[(v_i_76137 + (256 * v_MWidthC_1 * v_w_id_76134) + (v_MWidthC_1 * v_l_id_76135))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76138 = 0; \n            v__76158[(v_l_id_76135 + (256 * v_w_id_76134))] = doubleMultiplyAdd(v__76153, v__76143, v__76142[(v_l_id_76135 + (256 * v_w_id_76134))], v__76144); \n          }\n          /* end map_seq */\n          v_l_id_76135 = atomic_inc(&(v_work_idx_6278)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76134 = atomic_inc(v_work_idx_6280); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76139",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76140",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76141",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76142",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__76143",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76144",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76146",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__76152",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__76158",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}