{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__66033, const global float* restrict v__66034, const global float* restrict v__66035, const global float* restrict v__66036, float v__66037, float v__66038, global float* v__66058, global int* v__66040, local float* v__66053, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66042; \n  float v__66044; \n  float v__57186; \n  /* Private Memory */\n  float v__66046_0;\n  \n  float v__66048_0;\n  \n  int v__66052_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5336 = v__66040; \n    local int v_w_id_66026; \n    if (get_local_id(0) == 0) {\n      v_w_id_66026 = atomic_inc(v_work_idx_5336); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66026 < v_MHeight_2)){\n      for (int v_l_id_66027 = get_local_id(0); v_l_id_66027 < v_MWidthC_1; v_l_id_66027 = (v_l_id_66027 + get_local_size(0))) {\n        float v_tmp_66120 = 3.4028235E38f; \n        v__66042 = v_tmp_66120; \n        /* reduce_while_seq */\n        for (int v_i_66028 = 0; v_i_66028 < 32; v_i_66028 = (1 + v_i_66028)) {\n          v__66052_0 = check(v__66042, v__66033[(v_l_id_66027 + (32 * v_MWidthC_1 * v_w_id_66026) + (v_MWidthC_1 * v_i_66028))]); \n          if (v__66052_0) {\n          } else {\n            break;\n          }\n          float v_tmp_66121 = 3.4028235E38f; \n          v__66044 = v_tmp_66121; \n          int v_index_66122 = v__66033[(v_l_id_66027 + (32 * v_MWidthC_1 * v_w_id_66026) + (v_MWidthC_1 * v_i_66028))]; \n          if (v_index_66122 < 0) {\n            v__66046_0 = v__66044; \n          } else {\n            if (v_index_66122 >= v_VLength_3) {\n              v__66046_0 = v__66044; \n            } else {\n              v__66046_0 = v__66035[v_index_66122]; \n            }\n          }\n          v__66048_0 = absadd(v__66046_0, v__66034[(v_l_id_66027 + (32 * v_MWidthC_1 * v_w_id_66026) + (v_MWidthC_1 * v_i_66028))]); \n          v__66042 = clmin(v__66048_0, v__66042); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66029 = 0; \n          v__66053[v_l_id_66027] = id(v__66042); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5330; \n        v_work_idx_5330 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66030 = atomic_inc(&(v_work_idx_5330)); \n        while((v_l_id_66030 < 1)){\n          float v_tmp_66125 = 3.4028235E38f; \n          v__57186 = v_tmp_66125; \n          /* reduce_seq */\n          for (int v_i_66031 = 0; v_i_66031 < v_MWidthC_1; v_i_66031 = (1 + v_i_66031)) {\n            v__57186 = clmin(v__57186, v__66053[(v_i_66031 + (v_MWidthC_1 * v_l_id_66030))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66032 = 0; \n            v__66058[v_w_id_66026] = doubleMultiplyAdd(v__57186, v__66037, v__66036[v_w_id_66026], v__66038); \n          }\n          /* end map_seq */\n          v_l_id_66030 = atomic_inc(&(v_work_idx_5330)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66026 = atomic_inc(v_work_idx_5336); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66033",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66034",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66035",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66036",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66037",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66038",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66040",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66058",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66053",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}