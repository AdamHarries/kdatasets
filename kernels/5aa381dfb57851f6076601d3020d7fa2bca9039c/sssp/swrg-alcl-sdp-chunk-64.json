{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67804, const global float* restrict v__67805, const global float* restrict v__67806, const global float* restrict v__67807, float v__67808, float v__67809, global float* v__67822, global float* v__67816, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67812; \n  float v__67817; \n  /* Private Memory */\n  float v__67814_0;\n  \n  for (int v_wg_id_67799 = get_group_id(0); v_wg_id_67799 < v_MHeight_2; v_wg_id_67799 = (v_wg_id_67799 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5498; \n      v_work_idx_5498 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_67800 = atomic_inc(&(v_work_idx_5498)); \n      while((v_l_id_67800 < 64)){\n        /* map_seq */\n        for (int v_i_67801 = 0; v_i_67801 < v_MWidthC_1; v_i_67801 = (1 + v_i_67801)) {\n          float v_tmp_67862 = 3.4028235E38f; \n          v__67812 = v_tmp_67862; \n          int v_index_67863 = v__67804[(v_i_67801 + (64 * v_MWidthC_1 * v_wg_id_67799) + (v_MWidthC_1 * v_l_id_67800))]; \n          if (v_index_67863 < 0) {\n            v__67814_0 = v__67812; \n          } else {\n            if (v_index_67863 >= v_VLength_3) {\n              v__67814_0 = v__67812; \n            } else {\n              v__67814_0 = v__67806[v_index_67863]; \n            }\n          }\n          v__67816[(v_i_67801 + (64 * v_MWidthC_1 * v_wg_id_67799) + (v_MWidthC_1 * v_l_id_67800))] = absadd(v__67814_0, v__67805[(v_i_67801 + (64 * v_MWidthC_1 * v_wg_id_67799) + (v_MWidthC_1 * v_l_id_67800))]); \n        }\n        /* end map_seq */\n        float v_tmp_67864 = 3.4028235E38f; \n        v__67817 = v_tmp_67864; \n        /* reduce_seq */\n        for (int v_i_67802 = 0; v_i_67802 < v_MWidthC_1; v_i_67802 = (1 + v_i_67802)) {\n          v__67817 = clmin(v__67817, v__67816[(v_i_67802 + (64 * v_MWidthC_1 * v_wg_id_67799) + (v_MWidthC_1 * v_l_id_67800))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67803 = 0; \n          v__67822[(v_l_id_67800 + (64 * v_wg_id_67799))] = doubleMultiplyAdd(v__67817, v__67808, v__67807[(v_l_id_67800 + (64 * v_wg_id_67799))], v__67809); \n        }\n        /* end map_seq */\n        v_l_id_67800 = atomic_inc(&(v_work_idx_5498)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__67804",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67805",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67806",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67807",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__67808",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67809",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67816",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__67822",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}