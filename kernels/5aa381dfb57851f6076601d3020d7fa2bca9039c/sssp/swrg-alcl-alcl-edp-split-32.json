{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__65181, const global float* restrict v__65182, const global float* restrict v__65183, const global float* restrict v__65184, float v__65185, float v__65186, global float* v__65205, local float* v__65200, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65189; \n  float v__65191; \n  float v__57186; \n  /* Private Memory */\n  float v__65193_0;\n  \n  float v__65195_0;\n  \n  int v__65199_0;\n  \n  for (int v_wg_id_65174 = get_group_id(0); v_wg_id_65174 < v_MHeight_2; v_wg_id_65174 = (v_wg_id_65174 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5257; \n      v_work_idx_5257 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_65175 = atomic_inc(&(v_work_idx_5257)); \n      while((v_l_id_65175 < v_MWidthC_1)){\n        float v_tmp_65261 = 3.4028235E38f; \n        v__65189 = v_tmp_65261; \n        /* reduce_while_seq */\n        for (int v_i_65176 = 0; v_i_65176 < 32; v_i_65176 = (1 + v_i_65176)) {\n          v__65199_0 = check(v__65189, v__65181[(v_l_id_65175 + (32 * v_MWidthC_1 * v_wg_id_65174) + (v_MWidthC_1 * v_i_65176))]); \n          if (v__65199_0) {\n          } else {\n            break;\n          }\n          float v_tmp_65262 = 3.4028235E38f; \n          v__65191 = v_tmp_65262; \n          int v_index_65263 = v__65181[(v_l_id_65175 + (32 * v_MWidthC_1 * v_wg_id_65174) + (v_MWidthC_1 * v_i_65176))]; \n          if (v_index_65263 < 0) {\n            v__65193_0 = v__65191; \n          } else {\n            if (v_index_65263 >= v_VLength_3) {\n              v__65193_0 = v__65191; \n            } else {\n              v__65193_0 = v__65183[v_index_65263]; \n            }\n          }\n          v__65195_0 = absadd(v__65193_0, v__65182[(v_l_id_65175 + (32 * v_MWidthC_1 * v_wg_id_65174) + (v_MWidthC_1 * v_i_65176))]); \n          v__65189 = clmin(v__65195_0, v__65189); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65177 = 0; \n          v__65200[v_l_id_65175] = id(v__65189); \n        }\n        /* end map_seq */\n        v_l_id_65175 = atomic_inc(&(v_work_idx_5257)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5252; \n      v_work_idx_5252 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_65178 = atomic_inc(&(v_work_idx_5252)); \n      while((v_l_id_65178 < 1)){\n        float v_tmp_65266 = 3.4028235E38f; \n        v__57186 = v_tmp_65266; \n        /* reduce_seq */\n        for (int v_i_65179 = 0; v_i_65179 < v_MWidthC_1; v_i_65179 = (1 + v_i_65179)) {\n          v__57186 = clmin(v__57186, v__65200[(v_i_65179 + (v_MWidthC_1 * v_l_id_65178))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65180 = 0; \n          v__65205[v_wg_id_65174] = doubleMultiplyAdd(v__57186, v__65185, v__65184[v_wg_id_65174], v__65186); \n        }\n        /* end map_seq */\n        v_l_id_65178 = atomic_inc(&(v_work_idx_5252)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65181",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65182",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65183",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65185",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65186",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65200",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}