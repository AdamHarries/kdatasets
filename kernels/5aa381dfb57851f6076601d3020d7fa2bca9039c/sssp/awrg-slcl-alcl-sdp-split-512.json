{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79167, const global float* restrict v__79168, const global float* restrict v__79169, const global float* restrict v__79170, float v__79171, float v__79172, global float* v__79190, global int* v__79174, global float* v__79180, local float* v__79185, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79176; \n  float v__79181; \n  float v__57186; \n  /* Private Memory */\n  float v__79178_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6564 = v__79174; \n    local int v_w_id_79159; \n    if (get_local_id(0) == 0) {\n      v_w_id_79159 = atomic_inc(v_work_idx_6564); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79159 < v_MHeight_2)){\n      for (int v_l_id_79160 = get_local_id(0); v_l_id_79160 < v_MWidthC_1; v_l_id_79160 = (v_l_id_79160 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_79161 = 0; v_i_79161 < 512; v_i_79161 = (1 + v_i_79161)) {\n          float v_tmp_79249 = 3.4028235E38f; \n          v__79176 = v_tmp_79249; \n          int v_index_79250 = v__79167[(v_l_id_79160 + (512 * v_MWidthC_1 * v_w_id_79159) + (v_MWidthC_1 * v_i_79161))]; \n          if (v_index_79250 < 0) {\n            v__79178_0 = v__79176; \n          } else {\n            if (v_index_79250 >= v_VLength_3) {\n              v__79178_0 = v__79176; \n            } else {\n              v__79178_0 = v__79169[v_index_79250]; \n            }\n          }\n          v__79180[(v_i_79161 + (512 * v_MWidthC_1 * v_w_id_79159) + (512 * v_l_id_79160))] = absadd(v__79178_0, v__79168[(v_l_id_79160 + (512 * v_MWidthC_1 * v_w_id_79159) + (v_MWidthC_1 * v_i_79161))]); \n        }\n        /* end map_seq */\n        float v_tmp_79251 = 3.4028235E38f; \n        v__79181 = v_tmp_79251; \n        /* reduce_seq */\n        for (int v_i_79162 = 0; v_i_79162 < 512; v_i_79162 = (1 + v_i_79162)) {\n          v__79181 = clmin(v__79181, v__79180[(v_i_79162 + (512 * v_MWidthC_1 * v_w_id_79159) + (512 * v_l_id_79160))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79163 = 0; \n          v__79185[v_l_id_79160] = id(v__79181); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6557; \n        v_work_idx_6557 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_79164 = atomic_inc(&(v_work_idx_6557)); \n        while((v_l_id_79164 < 1)){\n          float v_tmp_79254 = 3.4028235E38f; \n          v__57186 = v_tmp_79254; \n          /* reduce_seq */\n          for (int v_i_79165 = 0; v_i_79165 < v_MWidthC_1; v_i_79165 = (1 + v_i_79165)) {\n            v__57186 = clmin(v__57186, v__79185[(v_i_79165 + (v_MWidthC_1 * v_l_id_79164))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79166 = 0; \n            v__79190[v_w_id_79159] = doubleMultiplyAdd(v__57186, v__79171, v__79170[v_w_id_79159], v__79172); \n          }\n          /* end map_seq */\n          v_l_id_79164 = atomic_inc(&(v_work_idx_6557)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79159 = atomic_inc(v_work_idx_6564); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79167",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79168",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79169",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79171",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79172",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79174",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__79180",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__79190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79185",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}