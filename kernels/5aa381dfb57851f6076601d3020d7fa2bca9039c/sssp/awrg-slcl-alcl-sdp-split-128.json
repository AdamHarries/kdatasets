{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72499, const global float* restrict v__72500, const global float* restrict v__72501, const global float* restrict v__72502, float v__72503, float v__72504, global float* v__72522, global int* v__72506, global float* v__72512, local float* v__72517, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72508; \n  float v__72513; \n  float v__57186; \n  /* Private Memory */\n  float v__72510_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5940 = v__72506; \n    local int v_w_id_72491; \n    if (get_local_id(0) == 0) {\n      v_w_id_72491 = atomic_inc(v_work_idx_5940); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72491 < v_MHeight_2)){\n      for (int v_l_id_72492 = get_local_id(0); v_l_id_72492 < v_MWidthC_1; v_l_id_72492 = (v_l_id_72492 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72493 = 0; v_i_72493 < 128; v_i_72493 = (1 + v_i_72493)) {\n          float v_tmp_72581 = 3.4028235E38f; \n          v__72508 = v_tmp_72581; \n          int v_index_72582 = v__72499[(v_l_id_72492 + (128 * v_MWidthC_1 * v_w_id_72491) + (v_MWidthC_1 * v_i_72493))]; \n          if (v_index_72582 < 0) {\n            v__72510_0 = v__72508; \n          } else {\n            if (v_index_72582 >= v_VLength_3) {\n              v__72510_0 = v__72508; \n            } else {\n              v__72510_0 = v__72501[v_index_72582]; \n            }\n          }\n          v__72512[(v_i_72493 + (128 * v_MWidthC_1 * v_w_id_72491) + (128 * v_l_id_72492))] = absadd(v__72510_0, v__72500[(v_l_id_72492 + (128 * v_MWidthC_1 * v_w_id_72491) + (v_MWidthC_1 * v_i_72493))]); \n        }\n        /* end map_seq */\n        float v_tmp_72583 = 3.4028235E38f; \n        v__72513 = v_tmp_72583; \n        /* reduce_seq */\n        for (int v_i_72494 = 0; v_i_72494 < 128; v_i_72494 = (1 + v_i_72494)) {\n          v__72513 = clmin(v__72513, v__72512[(v_i_72494 + (128 * v_MWidthC_1 * v_w_id_72491) + (128 * v_l_id_72492))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72495 = 0; \n          v__72517[v_l_id_72492] = id(v__72513); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5933; \n        v_work_idx_5933 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_72496 = atomic_inc(&(v_work_idx_5933)); \n        while((v_l_id_72496 < 1)){\n          float v_tmp_72586 = 3.4028235E38f; \n          v__57186 = v_tmp_72586; \n          /* reduce_seq */\n          for (int v_i_72497 = 0; v_i_72497 < v_MWidthC_1; v_i_72497 = (1 + v_i_72497)) {\n            v__57186 = clmin(v__57186, v__72517[(v_i_72497 + (v_MWidthC_1 * v_l_id_72496))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_72498 = 0; \n            v__72522[v_w_id_72491] = doubleMultiplyAdd(v__57186, v__72503, v__72502[v_w_id_72491], v__72504); \n          }\n          /* end map_seq */\n          v_l_id_72496 = atomic_inc(&(v_work_idx_5933)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72491 = atomic_inc(v_work_idx_5940); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72499",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72500",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72501",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72503",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72504",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72506",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__72512",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__72522",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72517",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}