{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58842, const global float* restrict v__58843, const global float* restrict v__58844, const global float* restrict v__58845, float v__58846, float v__58847, global float* v__58865, global int* v__58849, global float* v__58855, local float* v__58860, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58851; \n  float v__58856; \n  float v__57186; \n  /* Private Memory */\n  float v__58853_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4663 = v__58849; \n    local int v_w_id_58834; \n    if (get_local_id(0) == 0) {\n      v_w_id_58834 = atomic_inc(v_work_idx_4663); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_58834 < v_MHeight_2)){\n      for (int v_l_id_58835 = get_local_id(0); v_l_id_58835 < v_MWidthC_1; v_l_id_58835 = (v_l_id_58835 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_58836 = 0; v_i_58836 < 8; v_i_58836 = (1 + v_i_58836)) {\n          float v_tmp_58928 = 3.4028235E38f; \n          v__58851 = v_tmp_58928; \n          int v_index_58929 = v__58842[(v_l_id_58835 + (8 * v_MWidthC_1 * v_w_id_58834) + (v_MWidthC_1 * v_i_58836))]; \n          if (v_index_58929 < 0) {\n            v__58853_0 = v__58851; \n          } else {\n            if (v_index_58929 >= v_VLength_3) {\n              v__58853_0 = v__58851; \n            } else {\n              v__58853_0 = v__58844[v_index_58929]; \n            }\n          }\n          v__58855[(v_i_58836 + (8 * v_MWidthC_1 * v_w_id_58834) + (8 * v_l_id_58835))] = absadd(v__58853_0, v__58843[(v_l_id_58835 + (8 * v_MWidthC_1 * v_w_id_58834) + (v_MWidthC_1 * v_i_58836))]); \n        }\n        /* end map_seq */\n        float v_tmp_58930 = 3.4028235E38f; \n        v__58856 = v_tmp_58930; \n        /* reduce_seq */\n        for (int v_i_58837 = 0; v_i_58837 < 8; v_i_58837 = (1 + v_i_58837)) {\n          v__58856 = clmin(v__58856, v__58855[(v_i_58837 + (8 * v_MWidthC_1 * v_w_id_58834) + (8 * v_l_id_58835))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58838 = 0; \n          v__58860[v_l_id_58835] = id(v__58856); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_58839 = get_local_id(0); \n        float v_tmp_58933 = 3.4028235E38f; \n        v__57186 = v_tmp_58933; \n        /* reduce_seq */\n        for (int v_i_58840 = 0; v_i_58840 < v_MWidthC_1; v_i_58840 = (1 + v_i_58840)) {\n          v__57186 = clmin(v__57186, v__58860[(v_i_58840 + (v_MWidthC_1 * v_l_id_58839))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58841 = 0; \n          v__58865[v_w_id_58834] = doubleMultiplyAdd(v__57186, v__58846, v__58845[v_w_id_58834], v__58847); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_58834 = atomic_inc(v_work_idx_4663); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58842",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58843",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58844",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58846",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58847",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58849",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__58855",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58865",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58860",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}