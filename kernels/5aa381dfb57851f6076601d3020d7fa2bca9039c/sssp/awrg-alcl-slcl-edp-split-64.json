{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__69885, const global float* restrict v__69886, const global float* restrict v__69887, const global float* restrict v__69888, float v__69889, float v__69890, global float* v__69910, global int* v__69892, local float* v__69905, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69894; \n  float v__69896; \n  float v__57186; \n  /* Private Memory */\n  float v__69898_0;\n  \n  float v__69900_0;\n  \n  int v__69904_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5701 = v__69892; \n    local int v_w_id_69878; \n    if (get_local_id(0) == 0) {\n      v_w_id_69878 = atomic_inc(v_work_idx_5701); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69878 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5699; \n        v_work_idx_5699 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_69879 = atomic_inc(&(v_work_idx_5699)); \n        while((v_l_id_69879 < v_MWidthC_1)){\n          float v_tmp_69968 = 3.4028235E38f; \n          v__69894 = v_tmp_69968; \n          /* reduce_while_seq */\n          for (int v_i_69880 = 0; v_i_69880 < 64; v_i_69880 = (1 + v_i_69880)) {\n            v__69904_0 = check(v__69894, v__69885[(v_l_id_69879 + (64 * v_MWidthC_1 * v_w_id_69878) + (v_MWidthC_1 * v_i_69880))]); \n            if (v__69904_0) {\n            } else {\n              break;\n            }\n            float v_tmp_69969 = 3.4028235E38f; \n            v__69896 = v_tmp_69969; \n            int v_index_69970 = v__69885[(v_l_id_69879 + (64 * v_MWidthC_1 * v_w_id_69878) + (v_MWidthC_1 * v_i_69880))]; \n            if (v_index_69970 < 0) {\n              v__69898_0 = v__69896; \n            } else {\n              if (v_index_69970 >= v_VLength_3) {\n                v__69898_0 = v__69896; \n              } else {\n                v__69898_0 = v__69887[v_index_69970]; \n              }\n            }\n            v__69900_0 = absadd(v__69898_0, v__69886[(v_l_id_69879 + (64 * v_MWidthC_1 * v_w_id_69878) + (v_MWidthC_1 * v_i_69880))]); \n            v__69894 = clmin(v__69900_0, v__69894); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69881 = 0; \n            v__69905[v_l_id_69879] = id(v__69894); \n          }\n          /* end map_seq */\n          v_l_id_69879 = atomic_inc(&(v_work_idx_5699)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69882 = get_local_id(0); \n        float v_tmp_69973 = 3.4028235E38f; \n        v__57186 = v_tmp_69973; \n        /* reduce_seq */\n        for (int v_i_69883 = 0; v_i_69883 < v_MWidthC_1; v_i_69883 = (1 + v_i_69883)) {\n          v__57186 = clmin(v__57186, v__69905[(v_i_69883 + (v_MWidthC_1 * v_l_id_69882))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69884 = 0; \n          v__69910[v_w_id_69878] = doubleMultiplyAdd(v__57186, v__69889, v__69888[v_w_id_69878], v__69890); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69878 = atomic_inc(v_work_idx_5701); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__69885",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69886",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69887",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69889",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69890",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69892",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69905",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}