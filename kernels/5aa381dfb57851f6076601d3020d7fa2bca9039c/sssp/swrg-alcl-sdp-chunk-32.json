{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64470, const global float* restrict v__64471, const global float* restrict v__64472, const global float* restrict v__64473, float v__64474, float v__64475, global float* v__64488, global float* v__64482, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64478; \n  float v__64483; \n  /* Private Memory */\n  float v__64480_0;\n  \n  for (int v_wg_id_64465 = get_group_id(0); v_wg_id_64465 < v_MHeight_2; v_wg_id_64465 = (v_wg_id_64465 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5186; \n      v_work_idx_5186 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_64466 = atomic_inc(&(v_work_idx_5186)); \n      while((v_l_id_64466 < 32)){\n        /* map_seq */\n        for (int v_i_64467 = 0; v_i_64467 < v_MWidthC_1; v_i_64467 = (1 + v_i_64467)) {\n          float v_tmp_64528 = 3.4028235E38f; \n          v__64478 = v_tmp_64528; \n          int v_index_64529 = v__64470[(v_i_64467 + (32 * v_MWidthC_1 * v_wg_id_64465) + (v_MWidthC_1 * v_l_id_64466))]; \n          if (v_index_64529 < 0) {\n            v__64480_0 = v__64478; \n          } else {\n            if (v_index_64529 >= v_VLength_3) {\n              v__64480_0 = v__64478; \n            } else {\n              v__64480_0 = v__64472[v_index_64529]; \n            }\n          }\n          v__64482[(v_i_64467 + (32 * v_MWidthC_1 * v_wg_id_64465) + (v_MWidthC_1 * v_l_id_64466))] = absadd(v__64480_0, v__64471[(v_i_64467 + (32 * v_MWidthC_1 * v_wg_id_64465) + (v_MWidthC_1 * v_l_id_64466))]); \n        }\n        /* end map_seq */\n        float v_tmp_64530 = 3.4028235E38f; \n        v__64483 = v_tmp_64530; \n        /* reduce_seq */\n        for (int v_i_64468 = 0; v_i_64468 < v_MWidthC_1; v_i_64468 = (1 + v_i_64468)) {\n          v__64483 = clmin(v__64483, v__64482[(v_i_64468 + (32 * v_MWidthC_1 * v_wg_id_64465) + (v_MWidthC_1 * v_l_id_64466))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64469 = 0; \n          v__64488[(v_l_id_64466 + (32 * v_wg_id_64465))] = doubleMultiplyAdd(v__64483, v__64474, v__64473[(v_l_id_64466 + (32 * v_wg_id_64465))], v__64475); \n        }\n        /* end map_seq */\n        v_l_id_64466 = atomic_inc(&(v_work_idx_5186)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64470",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64471",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64472",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64473",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__64474",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64475",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64482",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__64488",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}