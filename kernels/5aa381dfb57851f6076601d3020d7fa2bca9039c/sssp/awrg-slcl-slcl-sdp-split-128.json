{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72178, const global float* restrict v__72179, const global float* restrict v__72180, const global float* restrict v__72181, float v__72182, float v__72183, global float* v__72201, global int* v__72185, global float* v__72191, local float* v__72196, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72187; \n  float v__72192; \n  float v__57186; \n  /* Private Memory */\n  float v__72189_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5911 = v__72185; \n    local int v_w_id_72170; \n    if (get_local_id(0) == 0) {\n      v_w_id_72170 = atomic_inc(v_work_idx_5911); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72170 < v_MHeight_2)){\n      for (int v_l_id_72171 = get_local_id(0); v_l_id_72171 < v_MWidthC_1; v_l_id_72171 = (v_l_id_72171 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72172 = 0; v_i_72172 < 128; v_i_72172 = (1 + v_i_72172)) {\n          float v_tmp_72264 = 3.4028235E38f; \n          v__72187 = v_tmp_72264; \n          int v_index_72265 = v__72178[(v_l_id_72171 + (128 * v_MWidthC_1 * v_w_id_72170) + (v_MWidthC_1 * v_i_72172))]; \n          if (v_index_72265 < 0) {\n            v__72189_0 = v__72187; \n          } else {\n            if (v_index_72265 >= v_VLength_3) {\n              v__72189_0 = v__72187; \n            } else {\n              v__72189_0 = v__72180[v_index_72265]; \n            }\n          }\n          v__72191[(v_i_72172 + (128 * v_MWidthC_1 * v_w_id_72170) + (128 * v_l_id_72171))] = absadd(v__72189_0, v__72179[(v_l_id_72171 + (128 * v_MWidthC_1 * v_w_id_72170) + (v_MWidthC_1 * v_i_72172))]); \n        }\n        /* end map_seq */\n        float v_tmp_72266 = 3.4028235E38f; \n        v__72192 = v_tmp_72266; \n        /* reduce_seq */\n        for (int v_i_72173 = 0; v_i_72173 < 128; v_i_72173 = (1 + v_i_72173)) {\n          v__72192 = clmin(v__72192, v__72191[(v_i_72173 + (128 * v_MWidthC_1 * v_w_id_72170) + (128 * v_l_id_72171))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72174 = 0; \n          v__72196[v_l_id_72171] = id(v__72192); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72175 = get_local_id(0); \n        float v_tmp_72269 = 3.4028235E38f; \n        v__57186 = v_tmp_72269; \n        /* reduce_seq */\n        for (int v_i_72176 = 0; v_i_72176 < v_MWidthC_1; v_i_72176 = (1 + v_i_72176)) {\n          v__57186 = clmin(v__57186, v__72196[(v_i_72176 + (v_MWidthC_1 * v_l_id_72175))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72177 = 0; \n          v__72201[v_w_id_72170] = doubleMultiplyAdd(v__57186, v__72182, v__72181[v_w_id_72170], v__72183); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72170 = atomic_inc(v_work_idx_5911); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72178",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72179",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72180",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72181",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72182",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72183",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72185",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__72191",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__72201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72196",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}