{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77877, const global float* restrict v__77878, const global float* restrict v__77879, const global float* restrict v__77880, float v__77881, float v__77882, global float* v__77895, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77885; \n  float v__77887; \n  /* Private Memory */\n  float v__77889_0;\n  \n  float v__77891_0;\n  \n  for (int v_wg_id_77873 = get_group_id(0); v_wg_id_77873 < v_MHeight_2; v_wg_id_77873 = (v_wg_id_77873 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6440; \n      v_work_idx_6440 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_77874 = atomic_inc(&(v_work_idx_6440)); \n      while((v_l_id_77874 < 512)){\n        float v_tmp_77934 = 3.4028235E38f; \n        v__77885 = v_tmp_77934; \n        /* reduce_seq */\n        for (int v_i_77875 = 0; v_i_77875 < v_MWidthC_1; v_i_77875 = (1 + v_i_77875)) {\n          float v_tmp_77935 = 3.4028235E38f; \n          v__77887 = v_tmp_77935; \n          int v_index_77936 = v__77877[(v_i_77875 + (512 * v_MWidthC_1 * v_wg_id_77873) + (v_MWidthC_1 * v_l_id_77874))]; \n          if (v_index_77936 < 0) {\n            v__77889_0 = v__77887; \n          } else {\n            if (v_index_77936 >= v_VLength_3) {\n              v__77889_0 = v__77887; \n            } else {\n              v__77889_0 = v__77879[v_index_77936]; \n            }\n          }\n          v__77891_0 = absadd(v__77889_0, v__77878[(v_i_77875 + (512 * v_MWidthC_1 * v_wg_id_77873) + (v_MWidthC_1 * v_l_id_77874))]); \n          v__77885 = clmin(v__77891_0, v__77885); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77876 = 0; \n          v__77895[(v_l_id_77874 + (512 * v_wg_id_77873))] = doubleMultiplyAdd(v__77885, v__77881, v__77880[(v_l_id_77874 + (512 * v_wg_id_77873))], v__77882); \n        }\n        /* end map_seq */\n        v_l_id_77874 = atomic_inc(&(v_work_idx_6440)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__77877",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77878",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77879",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77880",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__77881",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77882",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__77895",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}