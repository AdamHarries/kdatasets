{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68949, const global float* restrict v__68950, const global float* restrict v__68951, const global float* restrict v__68952, float v__68953, float v__68954, global float* v__68972, global int* v__68956, local float* v__68967, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68958; \n  float v__68960; \n  float v__57186; \n  /* Private Memory */\n  float v__68962_0;\n  \n  float v__68964_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5608 = v__68956; \n    local int v_w_id_68942; \n    if (get_local_id(0) == 0) {\n      v_w_id_68942 = atomic_inc(v_work_idx_5608); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68942 < v_MHeight_2)){\n      for (int v_l_id_68943 = get_local_id(0); v_l_id_68943 < v_MWidthC_1; v_l_id_68943 = (v_l_id_68943 + get_local_size(0))) {\n        float v_tmp_69035 = 3.4028235E38f; \n        v__68958 = v_tmp_69035; \n        /* reduce_seq */\n        for (int v_i_68944 = 0; v_i_68944 < 64; v_i_68944 = (1 + v_i_68944)) {\n          float v_tmp_69036 = 3.4028235E38f; \n          v__68960 = v_tmp_69036; \n          int v_index_69037 = v__68949[(v_l_id_68943 + (64 * v_MWidthC_1 * v_w_id_68942) + (v_MWidthC_1 * v_i_68944))]; \n          if (v_index_69037 < 0) {\n            v__68962_0 = v__68960; \n          } else {\n            if (v_index_69037 >= v_VLength_3) {\n              v__68962_0 = v__68960; \n            } else {\n              v__68962_0 = v__68951[v_index_69037]; \n            }\n          }\n          v__68964_0 = absadd(v__68962_0, v__68950[(v_l_id_68943 + (64 * v_MWidthC_1 * v_w_id_68942) + (v_MWidthC_1 * v_i_68944))]); \n          v__68958 = clmin(v__68964_0, v__68958); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68945 = 0; \n          v__68967[v_l_id_68943] = id(v__68958); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_68946 = get_local_id(0); \n        float v_tmp_69040 = 3.4028235E38f; \n        v__57186 = v_tmp_69040; \n        /* reduce_seq */\n        for (int v_i_68947 = 0; v_i_68947 < v_MWidthC_1; v_i_68947 = (1 + v_i_68947)) {\n          v__57186 = clmin(v__57186, v__68967[(v_i_68947 + (v_MWidthC_1 * v_l_id_68946))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68948 = 0; \n          v__68972[v_w_id_68942] = doubleMultiplyAdd(v__57186, v__68953, v__68952[v_w_id_68942], v__68954); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_68942 = atomic_inc(v_work_idx_5608); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68949",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68950",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68951",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68953",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68954",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68956",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__68972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68967",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}