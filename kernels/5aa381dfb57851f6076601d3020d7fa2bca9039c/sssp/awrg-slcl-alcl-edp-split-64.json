{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__69367, const global float* restrict v__69368, const global float* restrict v__69369, const global float* restrict v__69370, float v__69371, float v__69372, global float* v__69392, global int* v__69374, local float* v__69387, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69376; \n  float v__69378; \n  float v__57186; \n  /* Private Memory */\n  float v__69380_0;\n  \n  float v__69382_0;\n  \n  int v__69386_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5648 = v__69374; \n    local int v_w_id_69360; \n    if (get_local_id(0) == 0) {\n      v_w_id_69360 = atomic_inc(v_work_idx_5648); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69360 < v_MHeight_2)){\n      for (int v_l_id_69361 = get_local_id(0); v_l_id_69361 < v_MWidthC_1; v_l_id_69361 = (v_l_id_69361 + get_local_size(0))) {\n        float v_tmp_69454 = 3.4028235E38f; \n        v__69376 = v_tmp_69454; \n        /* reduce_while_seq */\n        for (int v_i_69362 = 0; v_i_69362 < 64; v_i_69362 = (1 + v_i_69362)) {\n          v__69386_0 = check(v__69376, v__69367[(v_l_id_69361 + (64 * v_MWidthC_1 * v_w_id_69360) + (v_MWidthC_1 * v_i_69362))]); \n          if (v__69386_0) {\n          } else {\n            break;\n          }\n          float v_tmp_69455 = 3.4028235E38f; \n          v__69378 = v_tmp_69455; \n          int v_index_69456 = v__69367[(v_l_id_69361 + (64 * v_MWidthC_1 * v_w_id_69360) + (v_MWidthC_1 * v_i_69362))]; \n          if (v_index_69456 < 0) {\n            v__69380_0 = v__69378; \n          } else {\n            if (v_index_69456 >= v_VLength_3) {\n              v__69380_0 = v__69378; \n            } else {\n              v__69380_0 = v__69369[v_index_69456]; \n            }\n          }\n          v__69382_0 = absadd(v__69380_0, v__69368[(v_l_id_69361 + (64 * v_MWidthC_1 * v_w_id_69360) + (v_MWidthC_1 * v_i_69362))]); \n          v__69376 = clmin(v__69382_0, v__69376); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69363 = 0; \n          v__69387[v_l_id_69361] = id(v__69376); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5642; \n        v_work_idx_5642 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_69364 = atomic_inc(&(v_work_idx_5642)); \n        while((v_l_id_69364 < 1)){\n          float v_tmp_69459 = 3.4028235E38f; \n          v__57186 = v_tmp_69459; \n          /* reduce_seq */\n          for (int v_i_69365 = 0; v_i_69365 < v_MWidthC_1; v_i_69365 = (1 + v_i_69365)) {\n            v__57186 = clmin(v__57186, v__69387[(v_i_69365 + (v_MWidthC_1 * v_l_id_69364))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69366 = 0; \n            v__69392[v_w_id_69360] = doubleMultiplyAdd(v__57186, v__69371, v__69370[v_w_id_69360], v__69372); \n          }\n          /* end map_seq */\n          v_l_id_69364 = atomic_inc(&(v_work_idx_5642)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69360 = atomic_inc(v_work_idx_5648); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__69367",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69368",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69369",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69370",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69371",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69372",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69374",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69387",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}