{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62873, const global float* restrict v__62874, const global float* restrict v__62875, const global float* restrict v__62876, float v__62877, float v__62878, global float* v__62892, global int* v__62880, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62882; \n  float v__62884; \n  /* Private Memory */\n  float v__62886_0;\n  \n  float v__62888_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5039 = v__62880; \n    local int v_w_id_62869; \n    if (get_local_id(0) == 0) {\n      v_w_id_62869 = atomic_inc(v_work_idx_5039); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62869 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5037; \n        v_work_idx_5037 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_62870 = atomic_inc(&(v_work_idx_5037)); \n        while((v_l_id_62870 < 16)){\n          float v_tmp_62929 = 3.4028235E38f; \n          v__62882 = v_tmp_62929; \n          /* reduce_seq */\n          for (int v_i_62871 = 0; v_i_62871 < v_MWidthC_1; v_i_62871 = (1 + v_i_62871)) {\n            float v_tmp_62930 = 3.4028235E38f; \n            v__62884 = v_tmp_62930; \n            int v_index_62931 = v__62873[(v_i_62871 + (16 * v_MWidthC_1 * v_w_id_62869) + (v_MWidthC_1 * v_l_id_62870))]; \n            if (v_index_62931 < 0) {\n              v__62886_0 = v__62884; \n            } else {\n              if (v_index_62931 >= v_VLength_3) {\n                v__62886_0 = v__62884; \n              } else {\n                v__62886_0 = v__62875[v_index_62931]; \n              }\n            }\n            v__62888_0 = absadd(v__62886_0, v__62874[(v_i_62871 + (16 * v_MWidthC_1 * v_w_id_62869) + (v_MWidthC_1 * v_l_id_62870))]); \n            v__62882 = clmin(v__62888_0, v__62882); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62872 = 0; \n            v__62892[(v_l_id_62870 + (16 * v_w_id_62869))] = doubleMultiplyAdd(v__62882, v__62877, v__62876[(v_l_id_62870 + (16 * v_w_id_62869))], v__62878); \n          }\n          /* end map_seq */\n          v_l_id_62870 = atomic_inc(&(v_work_idx_5037)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62869 = atomic_inc(v_work_idx_5039); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62873",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62874",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62875",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62876",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__62877",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62878",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62880",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62892",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}