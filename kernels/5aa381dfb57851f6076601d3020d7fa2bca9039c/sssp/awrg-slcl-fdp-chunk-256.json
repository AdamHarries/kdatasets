{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75354, const global float* restrict v__75355, const global float* restrict v__75356, const global float* restrict v__75357, float v__75358, float v__75359, global float* v__75373, global int* v__75361, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75363; \n  float v__75365; \n  /* Private Memory */\n  float v__75367_0;\n  \n  float v__75369_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6207 = v__75361; \n    local int v_w_id_75350; \n    if (get_local_id(0) == 0) {\n      v_w_id_75350 = atomic_inc(v_work_idx_6207); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75350 < v_MHeight_2)){\n      for (int v_l_id_75351 = get_local_id(0); v_l_id_75351 < 256; v_l_id_75351 = (v_l_id_75351 + get_local_size(0))) {\n        float v_tmp_75414 = 3.4028235E38f; \n        v__75363 = v_tmp_75414; \n        /* reduce_seq */\n        for (int v_i_75352 = 0; v_i_75352 < v_MWidthC_1; v_i_75352 = (1 + v_i_75352)) {\n          float v_tmp_75415 = 3.4028235E38f; \n          v__75365 = v_tmp_75415; \n          int v_index_75416 = v__75354[(v_i_75352 + (256 * v_MWidthC_1 * v_w_id_75350) + (v_MWidthC_1 * v_l_id_75351))]; \n          if (v_index_75416 < 0) {\n            v__75367_0 = v__75365; \n          } else {\n            if (v_index_75416 >= v_VLength_3) {\n              v__75367_0 = v__75365; \n            } else {\n              v__75367_0 = v__75356[v_index_75416]; \n            }\n          }\n          v__75369_0 = absadd(v__75367_0, v__75355[(v_i_75352 + (256 * v_MWidthC_1 * v_w_id_75350) + (v_MWidthC_1 * v_l_id_75351))]); \n          v__75363 = clmin(v__75369_0, v__75363); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75353 = 0; \n          v__75373[(v_l_id_75351 + (256 * v_w_id_75350))] = doubleMultiplyAdd(v__75363, v__75358, v__75357[(v_l_id_75351 + (256 * v_w_id_75350))], v__75359); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_75350 = atomic_inc(v_work_idx_6207); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75354",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75355",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75356",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75357",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__75358",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75359",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75361",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__75373",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}