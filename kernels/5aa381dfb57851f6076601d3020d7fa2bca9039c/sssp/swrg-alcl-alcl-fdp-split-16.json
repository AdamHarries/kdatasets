{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61753, const global float* restrict v__61754, const global float* restrict v__61755, const global float* restrict v__61756, float v__61757, float v__61758, global float* v__61775, local float* v__61770, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61761; \n  float v__61763; \n  float v__57186; \n  /* Private Memory */\n  float v__61765_0;\n  \n  float v__61767_0;\n  \n  for (int v_wg_id_61746 = get_group_id(0); v_wg_id_61746 < v_MHeight_2; v_wg_id_61746 = (v_wg_id_61746 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4935; \n      v_work_idx_4935 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_61747 = atomic_inc(&(v_work_idx_4935)); \n      while((v_l_id_61747 < v_MWidthC_1)){\n        float v_tmp_61828 = 3.4028235E38f; \n        v__61761 = v_tmp_61828; \n        /* reduce_seq */\n        for (int v_i_61748 = 0; v_i_61748 < 16; v_i_61748 = (1 + v_i_61748)) {\n          float v_tmp_61829 = 3.4028235E38f; \n          v__61763 = v_tmp_61829; \n          int v_index_61830 = v__61753[(v_l_id_61747 + (16 * v_MWidthC_1 * v_wg_id_61746) + (v_MWidthC_1 * v_i_61748))]; \n          if (v_index_61830 < 0) {\n            v__61765_0 = v__61763; \n          } else {\n            if (v_index_61830 >= v_VLength_3) {\n              v__61765_0 = v__61763; \n            } else {\n              v__61765_0 = v__61755[v_index_61830]; \n            }\n          }\n          v__61767_0 = absadd(v__61765_0, v__61754[(v_l_id_61747 + (16 * v_MWidthC_1 * v_wg_id_61746) + (v_MWidthC_1 * v_i_61748))]); \n          v__61761 = clmin(v__61767_0, v__61761); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61749 = 0; \n          v__61770[v_l_id_61747] = id(v__61761); \n        }\n        /* end map_seq */\n        v_l_id_61747 = atomic_inc(&(v_work_idx_4935)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4930; \n      v_work_idx_4930 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_61750 = atomic_inc(&(v_work_idx_4930)); \n      while((v_l_id_61750 < 1)){\n        float v_tmp_61833 = 3.4028235E38f; \n        v__57186 = v_tmp_61833; \n        /* reduce_seq */\n        for (int v_i_61751 = 0; v_i_61751 < v_MWidthC_1; v_i_61751 = (1 + v_i_61751)) {\n          v__57186 = clmin(v__57186, v__61770[(v_i_61751 + (v_MWidthC_1 * v_l_id_61750))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61752 = 0; \n          v__61775[v_wg_id_61746] = doubleMultiplyAdd(v__57186, v__61757, v__61756[v_wg_id_61746], v__61758); \n        }\n        /* end map_seq */\n        v_l_id_61750 = atomic_inc(&(v_work_idx_4930)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__61753",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61754",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61755",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61756",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61757",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61758",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61770",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}