{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62803, const global float* restrict v__62804, const global float* restrict v__62805, const global float* restrict v__62806, float v__62807, float v__62808, global float* v__62822, global int* v__62810, global float* v__62816, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62812; \n  float v__62817; \n  /* Private Memory */\n  float v__62814_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5032 = v__62810; \n    local int v_w_id_62798; \n    if (get_local_id(0) == 0) {\n      v_w_id_62798 = atomic_inc(v_work_idx_5032); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62798 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5030; \n        v_work_idx_5030 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_62799 = atomic_inc(&(v_work_idx_5030)); \n        while((v_l_id_62799 < 16)){\n          /* map_seq */\n          for (int v_i_62800 = 0; v_i_62800 < v_MWidthC_1; v_i_62800 = (1 + v_i_62800)) {\n            float v_tmp_62860 = 3.4028235E38f; \n            v__62812 = v_tmp_62860; \n            int v_index_62861 = v__62803[(v_i_62800 + (16 * v_MWidthC_1 * v_w_id_62798) + (v_MWidthC_1 * v_l_id_62799))]; \n            if (v_index_62861 < 0) {\n              v__62814_0 = v__62812; \n            } else {\n              if (v_index_62861 >= v_VLength_3) {\n                v__62814_0 = v__62812; \n              } else {\n                v__62814_0 = v__62805[v_index_62861]; \n              }\n            }\n            v__62816[(v_i_62800 + (16 * v_MWidthC_1 * v_w_id_62798) + (v_MWidthC_1 * v_l_id_62799))] = absadd(v__62814_0, v__62804[(v_i_62800 + (16 * v_MWidthC_1 * v_w_id_62798) + (v_MWidthC_1 * v_l_id_62799))]); \n          }\n          /* end map_seq */\n          float v_tmp_62862 = 3.4028235E38f; \n          v__62817 = v_tmp_62862; \n          /* reduce_seq */\n          for (int v_i_62801 = 0; v_i_62801 < v_MWidthC_1; v_i_62801 = (1 + v_i_62801)) {\n            v__62817 = clmin(v__62817, v__62816[(v_i_62801 + (16 * v_MWidthC_1 * v_w_id_62798) + (v_MWidthC_1 * v_l_id_62799))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62802 = 0; \n            v__62822[(v_l_id_62799 + (16 * v_w_id_62798))] = doubleMultiplyAdd(v__62817, v__62807, v__62806[(v_l_id_62799 + (16 * v_w_id_62798))], v__62808); \n          }\n          /* end map_seq */\n          v_l_id_62799 = atomic_inc(&(v_work_idx_5030)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62798 = atomic_inc(v_work_idx_5032); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62803",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62804",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62805",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62806",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__62807",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62808",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62810",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__62816",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__62822",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}