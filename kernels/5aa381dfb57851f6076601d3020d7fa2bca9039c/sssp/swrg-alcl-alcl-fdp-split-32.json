{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65087, const global float* restrict v__65088, const global float* restrict v__65089, const global float* restrict v__65090, float v__65091, float v__65092, global float* v__65109, local float* v__65104, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65095; \n  float v__65097; \n  float v__57186; \n  /* Private Memory */\n  float v__65099_0;\n  \n  float v__65101_0;\n  \n  for (int v_wg_id_65080 = get_group_id(0); v_wg_id_65080 < v_MHeight_2; v_wg_id_65080 = (v_wg_id_65080 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5247; \n      v_work_idx_5247 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_65081 = atomic_inc(&(v_work_idx_5247)); \n      while((v_l_id_65081 < v_MWidthC_1)){\n        float v_tmp_65162 = 3.4028235E38f; \n        v__65095 = v_tmp_65162; \n        /* reduce_seq */\n        for (int v_i_65082 = 0; v_i_65082 < 32; v_i_65082 = (1 + v_i_65082)) {\n          float v_tmp_65163 = 3.4028235E38f; \n          v__65097 = v_tmp_65163; \n          int v_index_65164 = v__65087[(v_l_id_65081 + (32 * v_MWidthC_1 * v_wg_id_65080) + (v_MWidthC_1 * v_i_65082))]; \n          if (v_index_65164 < 0) {\n            v__65099_0 = v__65097; \n          } else {\n            if (v_index_65164 >= v_VLength_3) {\n              v__65099_0 = v__65097; \n            } else {\n              v__65099_0 = v__65089[v_index_65164]; \n            }\n          }\n          v__65101_0 = absadd(v__65099_0, v__65088[(v_l_id_65081 + (32 * v_MWidthC_1 * v_wg_id_65080) + (v_MWidthC_1 * v_i_65082))]); \n          v__65095 = clmin(v__65101_0, v__65095); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65083 = 0; \n          v__65104[v_l_id_65081] = id(v__65095); \n        }\n        /* end map_seq */\n        v_l_id_65081 = atomic_inc(&(v_work_idx_5247)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5242; \n      v_work_idx_5242 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_65084 = atomic_inc(&(v_work_idx_5242)); \n      while((v_l_id_65084 < 1)){\n        float v_tmp_65167 = 3.4028235E38f; \n        v__57186 = v_tmp_65167; \n        /* reduce_seq */\n        for (int v_i_65085 = 0; v_i_65085 < v_MWidthC_1; v_i_65085 = (1 + v_i_65085)) {\n          v__57186 = clmin(v__57186, v__65104[(v_i_65085 + (v_MWidthC_1 * v_l_id_65084))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65086 = 0; \n          v__65109[v_wg_id_65080] = doubleMultiplyAdd(v__57186, v__65091, v__65090[v_wg_id_65080], v__65092); \n        }\n        /* end map_seq */\n        v_l_id_65084 = atomic_inc(&(v_work_idx_5242)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__65087",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65088",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65089",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65090",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65091",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65092",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65109",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65104",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}