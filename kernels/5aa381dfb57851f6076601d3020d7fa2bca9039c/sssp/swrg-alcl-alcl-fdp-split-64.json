{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68421, const global float* restrict v__68422, const global float* restrict v__68423, const global float* restrict v__68424, float v__68425, float v__68426, global float* v__68443, local float* v__68438, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68429; \n  float v__68431; \n  float v__57186; \n  /* Private Memory */\n  float v__68433_0;\n  \n  float v__68435_0;\n  \n  for (int v_wg_id_68414 = get_group_id(0); v_wg_id_68414 < v_MHeight_2; v_wg_id_68414 = (v_wg_id_68414 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5559; \n      v_work_idx_5559 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68415 = atomic_inc(&(v_work_idx_5559)); \n      while((v_l_id_68415 < v_MWidthC_1)){\n        float v_tmp_68496 = 3.4028235E38f; \n        v__68429 = v_tmp_68496; \n        /* reduce_seq */\n        for (int v_i_68416 = 0; v_i_68416 < 64; v_i_68416 = (1 + v_i_68416)) {\n          float v_tmp_68497 = 3.4028235E38f; \n          v__68431 = v_tmp_68497; \n          int v_index_68498 = v__68421[(v_l_id_68415 + (64 * v_MWidthC_1 * v_wg_id_68414) + (v_MWidthC_1 * v_i_68416))]; \n          if (v_index_68498 < 0) {\n            v__68433_0 = v__68431; \n          } else {\n            if (v_index_68498 >= v_VLength_3) {\n              v__68433_0 = v__68431; \n            } else {\n              v__68433_0 = v__68423[v_index_68498]; \n            }\n          }\n          v__68435_0 = absadd(v__68433_0, v__68422[(v_l_id_68415 + (64 * v_MWidthC_1 * v_wg_id_68414) + (v_MWidthC_1 * v_i_68416))]); \n          v__68429 = clmin(v__68435_0, v__68429); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68417 = 0; \n          v__68438[v_l_id_68415] = id(v__68429); \n        }\n        /* end map_seq */\n        v_l_id_68415 = atomic_inc(&(v_work_idx_5559)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5554; \n      v_work_idx_5554 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68418 = atomic_inc(&(v_work_idx_5554)); \n      while((v_l_id_68418 < 1)){\n        float v_tmp_68501 = 3.4028235E38f; \n        v__57186 = v_tmp_68501; \n        /* reduce_seq */\n        for (int v_i_68419 = 0; v_i_68419 < v_MWidthC_1; v_i_68419 = (1 + v_i_68419)) {\n          v__57186 = clmin(v__57186, v__68438[(v_i_68419 + (v_MWidthC_1 * v_l_id_68418))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68420 = 0; \n          v__68443[v_wg_id_68414] = doubleMultiplyAdd(v__57186, v__68425, v__68424[v_wg_id_68414], v__68426); \n        }\n        /* end map_seq */\n        v_l_id_68418 = atomic_inc(&(v_work_idx_5554)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68421",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68422",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68423",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68425",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68426",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68438",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}