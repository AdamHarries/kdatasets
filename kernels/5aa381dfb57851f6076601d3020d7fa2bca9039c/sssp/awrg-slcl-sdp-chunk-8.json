{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58610, const global float* restrict v__58611, const global float* restrict v__58612, const global float* restrict v__58613, float v__58614, float v__58615, global float* v__58629, global int* v__58617, global float* v__58623, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58619; \n  float v__58624; \n  /* Private Memory */\n  float v__58621_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4641 = v__58617; \n    local int v_w_id_58605; \n    if (get_local_id(0) == 0) {\n      v_w_id_58605 = atomic_inc(v_work_idx_4641); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_58605 < v_MHeight_2)){\n      for (int v_l_id_58606 = get_local_id(0); v_l_id_58606 < 8; v_l_id_58606 = (v_l_id_58606 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_58607 = 0; v_i_58607 < v_MWidthC_1; v_i_58607 = (1 + v_i_58607)) {\n          float v_tmp_58671 = 3.4028235E38f; \n          v__58619 = v_tmp_58671; \n          int v_index_58672 = v__58610[(v_i_58607 + (8 * v_MWidthC_1 * v_w_id_58605) + (v_MWidthC_1 * v_l_id_58606))]; \n          if (v_index_58672 < 0) {\n            v__58621_0 = v__58619; \n          } else {\n            if (v_index_58672 >= v_VLength_3) {\n              v__58621_0 = v__58619; \n            } else {\n              v__58621_0 = v__58612[v_index_58672]; \n            }\n          }\n          v__58623[(v_i_58607 + (8 * v_MWidthC_1 * v_w_id_58605) + (v_MWidthC_1 * v_l_id_58606))] = absadd(v__58621_0, v__58611[(v_i_58607 + (8 * v_MWidthC_1 * v_w_id_58605) + (v_MWidthC_1 * v_l_id_58606))]); \n        }\n        /* end map_seq */\n        float v_tmp_58673 = 3.4028235E38f; \n        v__58624 = v_tmp_58673; \n        /* reduce_seq */\n        for (int v_i_58608 = 0; v_i_58608 < v_MWidthC_1; v_i_58608 = (1 + v_i_58608)) {\n          v__58624 = clmin(v__58624, v__58623[(v_i_58608 + (8 * v_MWidthC_1 * v_w_id_58605) + (v_MWidthC_1 * v_l_id_58606))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58609 = 0; \n          v__58629[(v_l_id_58606 + (8 * v_w_id_58605))] = doubleMultiplyAdd(v__58624, v__58614, v__58613[(v_l_id_58606 + (8 * v_w_id_58605))], v__58615); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_58605 = atomic_inc(v_work_idx_4641); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58610",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58611",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58612",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58613",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__58614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58617",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__58623",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58629",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}