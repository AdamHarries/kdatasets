{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79543, const global float* restrict v__79544, const global float* restrict v__79545, const global float* restrict v__79546, float v__79547, float v__79548, global float* v__79562, global int* v__79550, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79552; \n  float v__79554; \n  /* Private Memory */\n  float v__79556_0;\n  \n  float v__79558_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6599 = v__79550; \n    local int v_w_id_79539; \n    if (get_local_id(0) == 0) {\n      v_w_id_79539 = atomic_inc(v_work_idx_6599); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79539 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6597; \n        v_work_idx_6597 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_79540 = atomic_inc(&(v_work_idx_6597)); \n        while((v_l_id_79540 < 512)){\n          float v_tmp_79599 = 3.4028235E38f; \n          v__79552 = v_tmp_79599; \n          /* reduce_seq */\n          for (int v_i_79541 = 0; v_i_79541 < v_MWidthC_1; v_i_79541 = (1 + v_i_79541)) {\n            float v_tmp_79600 = 3.4028235E38f; \n            v__79554 = v_tmp_79600; \n            int v_index_79601 = v__79543[(v_i_79541 + (512 * v_MWidthC_1 * v_w_id_79539) + (v_MWidthC_1 * v_l_id_79540))]; \n            if (v_index_79601 < 0) {\n              v__79556_0 = v__79554; \n            } else {\n              if (v_index_79601 >= v_VLength_3) {\n                v__79556_0 = v__79554; \n              } else {\n                v__79556_0 = v__79545[v_index_79601]; \n              }\n            }\n            v__79558_0 = absadd(v__79556_0, v__79544[(v_i_79541 + (512 * v_MWidthC_1 * v_w_id_79539) + (v_MWidthC_1 * v_l_id_79540))]); \n            v__79552 = clmin(v__79558_0, v__79552); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79542 = 0; \n            v__79562[(v_l_id_79540 + (512 * v_w_id_79539))] = doubleMultiplyAdd(v__79552, v__79547, v__79546[(v_l_id_79540 + (512 * v_w_id_79539))], v__79548); \n          }\n          /* end map_seq */\n          v_l_id_79540 = atomic_inc(&(v_work_idx_6597)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79539 = atomic_inc(v_work_idx_6599); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79543",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79544",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79545",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79546",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__79547",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79548",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79550",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79562",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}