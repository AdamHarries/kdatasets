{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68612, const global float* restrict v__68613, const global float* restrict v__68614, const global float* restrict v__68615, float v__68616, float v__68617, global float* v__68631, global int* v__68619, global float* v__68625, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68621; \n  float v__68626; \n  /* Private Memory */\n  float v__68623_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5577 = v__68619; \n    local int v_w_id_68607; \n    if (get_local_id(0) == 0) {\n      v_w_id_68607 = atomic_inc(v_work_idx_5577); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68607 < v_MHeight_2)){\n      for (int v_l_id_68608 = get_local_id(0); v_l_id_68608 < 64; v_l_id_68608 = (v_l_id_68608 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_68609 = 0; v_i_68609 < v_MWidthC_1; v_i_68609 = (1 + v_i_68609)) {\n          float v_tmp_68673 = 3.4028235E38f; \n          v__68621 = v_tmp_68673; \n          int v_index_68674 = v__68612[(v_i_68609 + (64 * v_MWidthC_1 * v_w_id_68607) + (v_MWidthC_1 * v_l_id_68608))]; \n          if (v_index_68674 < 0) {\n            v__68623_0 = v__68621; \n          } else {\n            if (v_index_68674 >= v_VLength_3) {\n              v__68623_0 = v__68621; \n            } else {\n              v__68623_0 = v__68614[v_index_68674]; \n            }\n          }\n          v__68625[(v_i_68609 + (64 * v_MWidthC_1 * v_w_id_68607) + (v_MWidthC_1 * v_l_id_68608))] = absadd(v__68623_0, v__68613[(v_i_68609 + (64 * v_MWidthC_1 * v_w_id_68607) + (v_MWidthC_1 * v_l_id_68608))]); \n        }\n        /* end map_seq */\n        float v_tmp_68675 = 3.4028235E38f; \n        v__68626 = v_tmp_68675; \n        /* reduce_seq */\n        for (int v_i_68610 = 0; v_i_68610 < v_MWidthC_1; v_i_68610 = (1 + v_i_68610)) {\n          v__68626 = clmin(v__68626, v__68625[(v_i_68610 + (64 * v_MWidthC_1 * v_w_id_68607) + (v_MWidthC_1 * v_l_id_68608))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68611 = 0; \n          v__68631[(v_l_id_68608 + (64 * v_w_id_68607))] = doubleMultiplyAdd(v__68626, v__68616, v__68615[(v_l_id_68608 + (64 * v_w_id_68607))], v__68617); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_68607 = atomic_inc(v_work_idx_5577); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68612",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68613",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68614",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68615",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__68616",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68617",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68619",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__68625",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__68631",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}