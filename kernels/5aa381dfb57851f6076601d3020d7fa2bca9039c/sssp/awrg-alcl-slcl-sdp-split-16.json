{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63023, const global float* restrict v__63024, const global float* restrict v__63025, const global float* restrict v__63026, float v__63027, float v__63028, global float* v__63046, global int* v__63030, global float* v__63036, local float* v__63041, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63032; \n  float v__63037; \n  float v__57186; \n  /* Private Memory */\n  float v__63034_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5057 = v__63030; \n    local int v_w_id_63015; \n    if (get_local_id(0) == 0) {\n      v_w_id_63015 = atomic_inc(v_work_idx_5057); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63015 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5055; \n        v_work_idx_5055 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_63016 = atomic_inc(&(v_work_idx_5055)); \n        while((v_l_id_63016 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_63017 = 0; v_i_63017 < 16; v_i_63017 = (1 + v_i_63017)) {\n            float v_tmp_63101 = 3.4028235E38f; \n            v__63032 = v_tmp_63101; \n            int v_index_63102 = v__63023[(v_l_id_63016 + (16 * v_MWidthC_1 * v_w_id_63015) + (v_MWidthC_1 * v_i_63017))]; \n            if (v_index_63102 < 0) {\n              v__63034_0 = v__63032; \n            } else {\n              if (v_index_63102 >= v_VLength_3) {\n                v__63034_0 = v__63032; \n              } else {\n                v__63034_0 = v__63025[v_index_63102]; \n              }\n            }\n            v__63036[(v_i_63017 + (16 * v_MWidthC_1 * v_w_id_63015) + (16 * v_l_id_63016))] = absadd(v__63034_0, v__63024[(v_l_id_63016 + (16 * v_MWidthC_1 * v_w_id_63015) + (v_MWidthC_1 * v_i_63017))]); \n          }\n          /* end map_seq */\n          float v_tmp_63103 = 3.4028235E38f; \n          v__63037 = v_tmp_63103; \n          /* reduce_seq */\n          for (int v_i_63018 = 0; v_i_63018 < 16; v_i_63018 = (1 + v_i_63018)) {\n            v__63037 = clmin(v__63037, v__63036[(v_i_63018 + (16 * v_MWidthC_1 * v_w_id_63015) + (16 * v_l_id_63016))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63019 = 0; \n            v__63041[v_l_id_63016] = id(v__63037); \n          }\n          /* end map_seq */\n          v_l_id_63016 = atomic_inc(&(v_work_idx_5055)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_63020 = get_local_id(0); \n        float v_tmp_63106 = 3.4028235E38f; \n        v__57186 = v_tmp_63106; \n        /* reduce_seq */\n        for (int v_i_63021 = 0; v_i_63021 < v_MWidthC_1; v_i_63021 = (1 + v_i_63021)) {\n          v__57186 = clmin(v__57186, v__63041[(v_i_63021 + (v_MWidthC_1 * v_l_id_63020))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63022 = 0; \n          v__63046[v_w_id_63015] = doubleMultiplyAdd(v__57186, v__63027, v__63026[v_w_id_63015], v__63028); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63015 = atomic_inc(v_work_idx_5057); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63023",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63024",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63025",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63027",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63028",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63030",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__63036",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__63046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63041",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}