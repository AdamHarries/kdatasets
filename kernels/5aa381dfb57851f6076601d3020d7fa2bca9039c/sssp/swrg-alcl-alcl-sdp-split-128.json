{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71661, const global float* restrict v__71662, const global float* restrict v__71663, const global float* restrict v__71664, float v__71665, float v__71666, global float* v__71683, global float* v__71673, local float* v__71678, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71669; \n  float v__71674; \n  float v__57186; \n  /* Private Memory */\n  float v__71671_0;\n  \n  for (int v_wg_id_71653 = get_group_id(0); v_wg_id_71653 < v_MHeight_2; v_wg_id_71653 = (v_wg_id_71653 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5861; \n      v_work_idx_5861 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71654 = atomic_inc(&(v_work_idx_5861)); \n      while((v_l_id_71654 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_71655 = 0; v_i_71655 < 128; v_i_71655 = (1 + v_i_71655)) {\n          float v_tmp_71736 = 3.4028235E38f; \n          v__71669 = v_tmp_71736; \n          int v_index_71737 = v__71661[(v_l_id_71654 + (128 * v_MWidthC_1 * v_wg_id_71653) + (v_MWidthC_1 * v_i_71655))]; \n          if (v_index_71737 < 0) {\n            v__71671_0 = v__71669; \n          } else {\n            if (v_index_71737 >= v_VLength_3) {\n              v__71671_0 = v__71669; \n            } else {\n              v__71671_0 = v__71663[v_index_71737]; \n            }\n          }\n          v__71673[(v_i_71655 + (128 * v_MWidthC_1 * v_wg_id_71653) + (128 * v_l_id_71654))] = absadd(v__71671_0, v__71662[(v_l_id_71654 + (128 * v_MWidthC_1 * v_wg_id_71653) + (v_MWidthC_1 * v_i_71655))]); \n        }\n        /* end map_seq */\n        float v_tmp_71738 = 3.4028235E38f; \n        v__71674 = v_tmp_71738; \n        /* reduce_seq */\n        for (int v_i_71656 = 0; v_i_71656 < 128; v_i_71656 = (1 + v_i_71656)) {\n          v__71674 = clmin(v__71674, v__71673[(v_i_71656 + (128 * v_MWidthC_1 * v_wg_id_71653) + (128 * v_l_id_71654))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71657 = 0; \n          v__71678[v_l_id_71654] = id(v__71674); \n        }\n        /* end map_seq */\n        v_l_id_71654 = atomic_inc(&(v_work_idx_5861)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5855; \n      v_work_idx_5855 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71658 = atomic_inc(&(v_work_idx_5855)); \n      while((v_l_id_71658 < 1)){\n        float v_tmp_71741 = 3.4028235E38f; \n        v__57186 = v_tmp_71741; \n        /* reduce_seq */\n        for (int v_i_71659 = 0; v_i_71659 < v_MWidthC_1; v_i_71659 = (1 + v_i_71659)) {\n          v__57186 = clmin(v__57186, v__71678[(v_i_71659 + (v_MWidthC_1 * v_l_id_71658))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71660 = 0; \n          v__71683[v_wg_id_71653] = doubleMultiplyAdd(v__57186, v__71665, v__71664[v_wg_id_71653], v__71666); \n        }\n        /* end map_seq */\n        v_l_id_71658 = atomic_inc(&(v_work_idx_5855)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71661",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71662",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71663",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71664",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71665",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71666",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71673",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71683",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71678",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}