{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59986, const global float* restrict v__59987, const global float* restrict v__59988, const global float* restrict v__59989, float v__59990, float v__59991, global float* v__60009, global int* v__59993, global float* v__59999, local float* v__60004, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59995; \n  float v__60000; \n  float v__57186; \n  /* Private Memory */\n  float v__59997_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4777 = v__59993; \n    local int v_w_id_59978; \n    if (get_local_id(0) == 0) {\n      v_w_id_59978 = atomic_inc(v_work_idx_4777); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59978 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4775; \n        v_work_idx_4775 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_59979 = atomic_inc(&(v_work_idx_4775)); \n        while((v_l_id_59979 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_59980 = 0; v_i_59980 < 8; v_i_59980 = (1 + v_i_59980)) {\n            float v_tmp_60060 = 3.4028235E38f; \n            v__59995 = v_tmp_60060; \n            int v_index_60061 = v__59986[(v_l_id_59979 + (8 * v_MWidthC_1 * v_w_id_59978) + (v_MWidthC_1 * v_i_59980))]; \n            if (v_index_60061 < 0) {\n              v__59997_0 = v__59995; \n            } else {\n              if (v_index_60061 >= v_VLength_3) {\n                v__59997_0 = v__59995; \n              } else {\n                v__59997_0 = v__59988[v_index_60061]; \n              }\n            }\n            v__59999[(v_i_59980 + (8 * v_MWidthC_1 * v_w_id_59978) + (8 * v_l_id_59979))] = absadd(v__59997_0, v__59987[(v_l_id_59979 + (8 * v_MWidthC_1 * v_w_id_59978) + (v_MWidthC_1 * v_i_59980))]); \n          }\n          /* end map_seq */\n          float v_tmp_60062 = 3.4028235E38f; \n          v__60000 = v_tmp_60062; \n          /* reduce_seq */\n          for (int v_i_59981 = 0; v_i_59981 < 8; v_i_59981 = (1 + v_i_59981)) {\n            v__60000 = clmin(v__60000, v__59999[(v_i_59981 + (8 * v_MWidthC_1 * v_w_id_59978) + (8 * v_l_id_59979))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59982 = 0; \n            v__60004[v_l_id_59979] = id(v__60000); \n          }\n          /* end map_seq */\n          v_l_id_59979 = atomic_inc(&(v_work_idx_4775)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4769; \n        v_work_idx_4769 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_59983 = atomic_inc(&(v_work_idx_4769)); \n        while((v_l_id_59983 < 1)){\n          float v_tmp_60065 = 3.4028235E38f; \n          v__57186 = v_tmp_60065; \n          /* reduce_seq */\n          for (int v_i_59984 = 0; v_i_59984 < v_MWidthC_1; v_i_59984 = (1 + v_i_59984)) {\n            v__57186 = clmin(v__57186, v__60004[(v_i_59984 + (v_MWidthC_1 * v_l_id_59983))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59985 = 0; \n            v__60009[v_w_id_59978] = doubleMultiplyAdd(v__57186, v__59990, v__59989[v_w_id_59978], v__59991); \n          }\n          /* end map_seq */\n          v_l_id_59983 = atomic_inc(&(v_work_idx_4769)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59978 = atomic_inc(v_work_idx_4777); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59986",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59987",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59988",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59990",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59991",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59993",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__59999",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__60009",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60004",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}