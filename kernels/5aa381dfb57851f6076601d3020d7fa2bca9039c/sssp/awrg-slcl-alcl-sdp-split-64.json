{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69165, const global float* restrict v__69166, const global float* restrict v__69167, const global float* restrict v__69168, float v__69169, float v__69170, global float* v__69188, global int* v__69172, global float* v__69178, local float* v__69183, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69174; \n  float v__69179; \n  float v__57186; \n  /* Private Memory */\n  float v__69176_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5628 = v__69172; \n    local int v_w_id_69157; \n    if (get_local_id(0) == 0) {\n      v_w_id_69157 = atomic_inc(v_work_idx_5628); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69157 < v_MHeight_2)){\n      for (int v_l_id_69158 = get_local_id(0); v_l_id_69158 < v_MWidthC_1; v_l_id_69158 = (v_l_id_69158 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_69159 = 0; v_i_69159 < 64; v_i_69159 = (1 + v_i_69159)) {\n          float v_tmp_69247 = 3.4028235E38f; \n          v__69174 = v_tmp_69247; \n          int v_index_69248 = v__69165[(v_l_id_69158 + (64 * v_MWidthC_1 * v_w_id_69157) + (v_MWidthC_1 * v_i_69159))]; \n          if (v_index_69248 < 0) {\n            v__69176_0 = v__69174; \n          } else {\n            if (v_index_69248 >= v_VLength_3) {\n              v__69176_0 = v__69174; \n            } else {\n              v__69176_0 = v__69167[v_index_69248]; \n            }\n          }\n          v__69178[(v_i_69159 + (64 * v_MWidthC_1 * v_w_id_69157) + (64 * v_l_id_69158))] = absadd(v__69176_0, v__69166[(v_l_id_69158 + (64 * v_MWidthC_1 * v_w_id_69157) + (v_MWidthC_1 * v_i_69159))]); \n        }\n        /* end map_seq */\n        float v_tmp_69249 = 3.4028235E38f; \n        v__69179 = v_tmp_69249; \n        /* reduce_seq */\n        for (int v_i_69160 = 0; v_i_69160 < 64; v_i_69160 = (1 + v_i_69160)) {\n          v__69179 = clmin(v__69179, v__69178[(v_i_69160 + (64 * v_MWidthC_1 * v_w_id_69157) + (64 * v_l_id_69158))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69161 = 0; \n          v__69183[v_l_id_69158] = id(v__69179); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5621; \n        v_work_idx_5621 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_69162 = atomic_inc(&(v_work_idx_5621)); \n        while((v_l_id_69162 < 1)){\n          float v_tmp_69252 = 3.4028235E38f; \n          v__57186 = v_tmp_69252; \n          /* reduce_seq */\n          for (int v_i_69163 = 0; v_i_69163 < v_MWidthC_1; v_i_69163 = (1 + v_i_69163)) {\n            v__57186 = clmin(v__57186, v__69183[(v_i_69163 + (v_MWidthC_1 * v_l_id_69162))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69164 = 0; \n            v__69188[v_w_id_69157] = doubleMultiplyAdd(v__57186, v__69169, v__69168[v_w_id_69157], v__69170); \n          }\n          /* end map_seq */\n          v_l_id_69162 = atomic_inc(&(v_work_idx_5621)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69157 = atomic_inc(v_work_idx_5628); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__69165",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69166",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69167",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69169",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69170",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69172",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__69178",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__69188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69183",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}