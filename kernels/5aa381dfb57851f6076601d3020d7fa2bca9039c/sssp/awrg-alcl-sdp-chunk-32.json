{
  "name" : "awrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66137, const global float* restrict v__66138, const global float* restrict v__66139, const global float* restrict v__66140, float v__66141, float v__66142, global float* v__66156, global int* v__66144, global float* v__66150, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66146; \n  float v__66151; \n  /* Private Memory */\n  float v__66148_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5344 = v__66144; \n    local int v_w_id_66132; \n    if (get_local_id(0) == 0) {\n      v_w_id_66132 = atomic_inc(v_work_idx_5344); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66132 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5342; \n        v_work_idx_5342 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66133 = atomic_inc(&(v_work_idx_5342)); \n        while((v_l_id_66133 < 32)){\n          /* map_seq */\n          for (int v_i_66134 = 0; v_i_66134 < v_MWidthC_1; v_i_66134 = (1 + v_i_66134)) {\n            float v_tmp_66194 = 3.4028235E38f; \n            v__66146 = v_tmp_66194; \n            int v_index_66195 = v__66137[(v_i_66134 + (32 * v_MWidthC_1 * v_w_id_66132) + (v_MWidthC_1 * v_l_id_66133))]; \n            if (v_index_66195 < 0) {\n              v__66148_0 = v__66146; \n            } else {\n              if (v_index_66195 >= v_VLength_3) {\n                v__66148_0 = v__66146; \n              } else {\n                v__66148_0 = v__66139[v_index_66195]; \n              }\n            }\n            v__66150[(v_i_66134 + (32 * v_MWidthC_1 * v_w_id_66132) + (v_MWidthC_1 * v_l_id_66133))] = absadd(v__66148_0, v__66138[(v_i_66134 + (32 * v_MWidthC_1 * v_w_id_66132) + (v_MWidthC_1 * v_l_id_66133))]); \n          }\n          /* end map_seq */\n          float v_tmp_66196 = 3.4028235E38f; \n          v__66151 = v_tmp_66196; \n          /* reduce_seq */\n          for (int v_i_66135 = 0; v_i_66135 < v_MWidthC_1; v_i_66135 = (1 + v_i_66135)) {\n            v__66151 = clmin(v__66151, v__66150[(v_i_66135 + (32 * v_MWidthC_1 * v_w_id_66132) + (v_MWidthC_1 * v_l_id_66133))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66136 = 0; \n            v__66156[(v_l_id_66133 + (32 * v_w_id_66132))] = doubleMultiplyAdd(v__66151, v__66141, v__66140[(v_l_id_66133 + (32 * v_w_id_66132))], v__66142); \n          }\n          /* end map_seq */\n          v_l_id_66133 = atomic_inc(&(v_work_idx_5342)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66132 = atomic_inc(v_work_idx_5344); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66137",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66138",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66139",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66140",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__66141",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66142",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66144",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__66150",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__66156",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}