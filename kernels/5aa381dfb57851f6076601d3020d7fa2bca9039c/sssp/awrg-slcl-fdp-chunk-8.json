{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58684, const global float* restrict v__58685, const global float* restrict v__58686, const global float* restrict v__58687, float v__58688, float v__58689, global float* v__58703, global int* v__58691, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58693; \n  float v__58695; \n  /* Private Memory */\n  float v__58697_0;\n  \n  float v__58699_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4647 = v__58691; \n    local int v_w_id_58680; \n    if (get_local_id(0) == 0) {\n      v_w_id_58680 = atomic_inc(v_work_idx_4647); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_58680 < v_MHeight_2)){\n      for (int v_l_id_58681 = get_local_id(0); v_l_id_58681 < 8; v_l_id_58681 = (v_l_id_58681 + get_local_size(0))) {\n        float v_tmp_58744 = 3.4028235E38f; \n        v__58693 = v_tmp_58744; \n        /* reduce_seq */\n        for (int v_i_58682 = 0; v_i_58682 < v_MWidthC_1; v_i_58682 = (1 + v_i_58682)) {\n          float v_tmp_58745 = 3.4028235E38f; \n          v__58695 = v_tmp_58745; \n          int v_index_58746 = v__58684[(v_i_58682 + (8 * v_MWidthC_1 * v_w_id_58680) + (v_MWidthC_1 * v_l_id_58681))]; \n          if (v_index_58746 < 0) {\n            v__58697_0 = v__58695; \n          } else {\n            if (v_index_58746 >= v_VLength_3) {\n              v__58697_0 = v__58695; \n            } else {\n              v__58697_0 = v__58686[v_index_58746]; \n            }\n          }\n          v__58699_0 = absadd(v__58697_0, v__58685[(v_i_58682 + (8 * v_MWidthC_1 * v_w_id_58680) + (v_MWidthC_1 * v_l_id_58681))]); \n          v__58693 = clmin(v__58699_0, v__58693); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58683 = 0; \n          v__58703[(v_l_id_58681 + (8 * v_w_id_58680))] = doubleMultiplyAdd(v__58693, v__58688, v__58687[(v_l_id_58681 + (8 * v_w_id_58680))], v__58689); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_58680 = atomic_inc(v_work_idx_4647); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58684",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58685",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58686",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58687",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__58688",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58689",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58691",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__58703",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}