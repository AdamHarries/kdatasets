{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__73219, const global float* restrict v__73220, const global float* restrict v__73221, const global float* restrict v__73222, float v__73223, float v__73224, global float* v__73244, global int* v__73226, local float* v__73239, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73228; \n  float v__73230; \n  float v__57186; \n  /* Private Memory */\n  float v__73232_0;\n  \n  float v__73234_0;\n  \n  int v__73238_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6013 = v__73226; \n    local int v_w_id_73212; \n    if (get_local_id(0) == 0) {\n      v_w_id_73212 = atomic_inc(v_work_idx_6013); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73212 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6011; \n        v_work_idx_6011 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73213 = atomic_inc(&(v_work_idx_6011)); \n        while((v_l_id_73213 < v_MWidthC_1)){\n          float v_tmp_73302 = 3.4028235E38f; \n          v__73228 = v_tmp_73302; \n          /* reduce_while_seq */\n          for (int v_i_73214 = 0; v_i_73214 < 128; v_i_73214 = (1 + v_i_73214)) {\n            v__73238_0 = check(v__73228, v__73219[(v_l_id_73213 + (128 * v_MWidthC_1 * v_w_id_73212) + (v_MWidthC_1 * v_i_73214))]); \n            if (v__73238_0) {\n            } else {\n              break;\n            }\n            float v_tmp_73303 = 3.4028235E38f; \n            v__73230 = v_tmp_73303; \n            int v_index_73304 = v__73219[(v_l_id_73213 + (128 * v_MWidthC_1 * v_w_id_73212) + (v_MWidthC_1 * v_i_73214))]; \n            if (v_index_73304 < 0) {\n              v__73232_0 = v__73230; \n            } else {\n              if (v_index_73304 >= v_VLength_3) {\n                v__73232_0 = v__73230; \n              } else {\n                v__73232_0 = v__73221[v_index_73304]; \n              }\n            }\n            v__73234_0 = absadd(v__73232_0, v__73220[(v_l_id_73213 + (128 * v_MWidthC_1 * v_w_id_73212) + (v_MWidthC_1 * v_i_73214))]); \n            v__73228 = clmin(v__73234_0, v__73228); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73215 = 0; \n            v__73239[v_l_id_73213] = id(v__73228); \n          }\n          /* end map_seq */\n          v_l_id_73213 = atomic_inc(&(v_work_idx_6011)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_73216 = get_local_id(0); \n        float v_tmp_73307 = 3.4028235E38f; \n        v__57186 = v_tmp_73307; \n        /* reduce_seq */\n        for (int v_i_73217 = 0; v_i_73217 < v_MWidthC_1; v_i_73217 = (1 + v_i_73217)) {\n          v__57186 = clmin(v__57186, v__73239[(v_i_73217 + (v_MWidthC_1 * v_l_id_73216))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_73218 = 0; \n          v__73244[v_w_id_73212] = doubleMultiplyAdd(v__57186, v__73223, v__73222[v_w_id_73212], v__73224); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73212 = atomic_inc(v_work_idx_6013); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__73219",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73220",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73221",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73223",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73224",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73226",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73244",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73239",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}