{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70931, const global float* restrict v__70932, const global float* restrict v__70933, const global float* restrict v__70934, float v__70935, float v__70936, global float* v__70953, local float* v__70948, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70939; \n  float v__70941; \n  float v__57186; \n  /* Private Memory */\n  float v__70943_0;\n  \n  float v__70945_0;\n  \n  for (int v_wg_id_70924 = get_group_id(0); v_wg_id_70924 < v_MHeight_2; v_wg_id_70924 = (v_wg_id_70924 + get_num_groups(0))) {\n    for (int v_l_id_70925 = get_local_id(0); v_l_id_70925 < v_MWidthC_1; v_l_id_70925 = (v_l_id_70925 + get_local_size(0))) {\n      float v_tmp_71014 = 3.4028235E38f; \n      v__70939 = v_tmp_71014; \n      /* reduce_seq */\n      for (int v_i_70926 = 0; v_i_70926 < 128; v_i_70926 = (1 + v_i_70926)) {\n        float v_tmp_71015 = 3.4028235E38f; \n        v__70941 = v_tmp_71015; \n        int v_index_71016 = v__70931[(v_l_id_70925 + (128 * v_MWidthC_1 * v_wg_id_70924) + (v_MWidthC_1 * v_i_70926))]; \n        if (v_index_71016 < 0) {\n          v__70943_0 = v__70941; \n        } else {\n          if (v_index_71016 >= v_VLength_3) {\n            v__70943_0 = v__70941; \n          } else {\n            v__70943_0 = v__70933[v_index_71016]; \n          }\n        }\n        v__70945_0 = absadd(v__70943_0, v__70932[(v_l_id_70925 + (128 * v_MWidthC_1 * v_wg_id_70924) + (v_MWidthC_1 * v_i_70926))]); \n        v__70939 = clmin(v__70945_0, v__70939); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70927 = 0; \n        v__70948[v_l_id_70925] = id(v__70939); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5790; \n      v_work_idx_5790 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_70928 = atomic_inc(&(v_work_idx_5790)); \n      while((v_l_id_70928 < 1)){\n        float v_tmp_71019 = 3.4028235E38f; \n        v__57186 = v_tmp_71019; \n        /* reduce_seq */\n        for (int v_i_70929 = 0; v_i_70929 < v_MWidthC_1; v_i_70929 = (1 + v_i_70929)) {\n          v__57186 = clmin(v__57186, v__70948[(v_i_70929 + (v_MWidthC_1 * v_l_id_70928))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_70930 = 0; \n          v__70953[v_wg_id_70924] = doubleMultiplyAdd(v__57186, v__70935, v__70934[v_wg_id_70924], v__70936); \n        }\n        /* end map_seq */\n        v_l_id_70928 = atomic_inc(&(v_work_idx_5790)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__70931",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70932",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70933",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70934",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70935",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70936",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__70953",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70948",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}