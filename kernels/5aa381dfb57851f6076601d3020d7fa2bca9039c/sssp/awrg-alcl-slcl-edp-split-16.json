{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__63217, const global float* restrict v__63218, const global float* restrict v__63219, const global float* restrict v__63220, float v__63221, float v__63222, global float* v__63242, global int* v__63224, local float* v__63237, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63226; \n  float v__63228; \n  float v__57186; \n  /* Private Memory */\n  float v__63230_0;\n  \n  float v__63232_0;\n  \n  int v__63236_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5077 = v__63224; \n    local int v_w_id_63210; \n    if (get_local_id(0) == 0) {\n      v_w_id_63210 = atomic_inc(v_work_idx_5077); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63210 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5075; \n        v_work_idx_5075 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_63211 = atomic_inc(&(v_work_idx_5075)); \n        while((v_l_id_63211 < v_MWidthC_1)){\n          float v_tmp_63300 = 3.4028235E38f; \n          v__63226 = v_tmp_63300; \n          /* reduce_while_seq */\n          for (int v_i_63212 = 0; v_i_63212 < 16; v_i_63212 = (1 + v_i_63212)) {\n            v__63236_0 = check(v__63226, v__63217[(v_l_id_63211 + (16 * v_MWidthC_1 * v_w_id_63210) + (v_MWidthC_1 * v_i_63212))]); \n            if (v__63236_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63301 = 3.4028235E38f; \n            v__63228 = v_tmp_63301; \n            int v_index_63302 = v__63217[(v_l_id_63211 + (16 * v_MWidthC_1 * v_w_id_63210) + (v_MWidthC_1 * v_i_63212))]; \n            if (v_index_63302 < 0) {\n              v__63230_0 = v__63228; \n            } else {\n              if (v_index_63302 >= v_VLength_3) {\n                v__63230_0 = v__63228; \n              } else {\n                v__63230_0 = v__63219[v_index_63302]; \n              }\n            }\n            v__63232_0 = absadd(v__63230_0, v__63218[(v_l_id_63211 + (16 * v_MWidthC_1 * v_w_id_63210) + (v_MWidthC_1 * v_i_63212))]); \n            v__63226 = clmin(v__63232_0, v__63226); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63213 = 0; \n            v__63237[v_l_id_63211] = id(v__63226); \n          }\n          /* end map_seq */\n          v_l_id_63211 = atomic_inc(&(v_work_idx_5075)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_63214 = get_local_id(0); \n        float v_tmp_63305 = 3.4028235E38f; \n        v__57186 = v_tmp_63305; \n        /* reduce_seq */\n        for (int v_i_63215 = 0; v_i_63215 < v_MWidthC_1; v_i_63215 = (1 + v_i_63215)) {\n          v__57186 = clmin(v__57186, v__63237[(v_i_63215 + (v_MWidthC_1 * v_l_id_63214))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63216 = 0; \n          v__63242[v_w_id_63210] = doubleMultiplyAdd(v__57186, v__63221, v__63220[v_w_id_63210], v__63222); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63210 = atomic_inc(v_work_idx_5077); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63217",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63218",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63219",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63220",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63221",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63222",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63224",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63242",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63237",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}