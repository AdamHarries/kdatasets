{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66357, const global float* restrict v__66358, const global float* restrict v__66359, const global float* restrict v__66360, float v__66361, float v__66362, global float* v__66380, global int* v__66364, global float* v__66370, local float* v__66375, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66366; \n  float v__66371; \n  float v__57186; \n  /* Private Memory */\n  float v__66368_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5369 = v__66364; \n    local int v_w_id_66349; \n    if (get_local_id(0) == 0) {\n      v_w_id_66349 = atomic_inc(v_work_idx_5369); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66349 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5367; \n        v_work_idx_5367 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66350 = atomic_inc(&(v_work_idx_5367)); \n        while((v_l_id_66350 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66351 = 0; v_i_66351 < 32; v_i_66351 = (1 + v_i_66351)) {\n            float v_tmp_66435 = 3.4028235E38f; \n            v__66366 = v_tmp_66435; \n            int v_index_66436 = v__66357[(v_l_id_66350 + (32 * v_MWidthC_1 * v_w_id_66349) + (v_MWidthC_1 * v_i_66351))]; \n            if (v_index_66436 < 0) {\n              v__66368_0 = v__66366; \n            } else {\n              if (v_index_66436 >= v_VLength_3) {\n                v__66368_0 = v__66366; \n              } else {\n                v__66368_0 = v__66359[v_index_66436]; \n              }\n            }\n            v__66370[(v_i_66351 + (32 * v_MWidthC_1 * v_w_id_66349) + (32 * v_l_id_66350))] = absadd(v__66368_0, v__66358[(v_l_id_66350 + (32 * v_MWidthC_1 * v_w_id_66349) + (v_MWidthC_1 * v_i_66351))]); \n          }\n          /* end map_seq */\n          float v_tmp_66437 = 3.4028235E38f; \n          v__66371 = v_tmp_66437; \n          /* reduce_seq */\n          for (int v_i_66352 = 0; v_i_66352 < 32; v_i_66352 = (1 + v_i_66352)) {\n            v__66371 = clmin(v__66371, v__66370[(v_i_66352 + (32 * v_MWidthC_1 * v_w_id_66349) + (32 * v_l_id_66350))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66353 = 0; \n            v__66375[v_l_id_66350] = id(v__66371); \n          }\n          /* end map_seq */\n          v_l_id_66350 = atomic_inc(&(v_work_idx_5367)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66354 = get_local_id(0); \n        float v_tmp_66440 = 3.4028235E38f; \n        v__57186 = v_tmp_66440; \n        /* reduce_seq */\n        for (int v_i_66355 = 0; v_i_66355 < v_MWidthC_1; v_i_66355 = (1 + v_i_66355)) {\n          v__57186 = clmin(v__57186, v__66375[(v_i_66355 + (v_MWidthC_1 * v_l_id_66354))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66356 = 0; \n          v__66380[v_w_id_66349] = doubleMultiplyAdd(v__57186, v__66361, v__66360[v_w_id_66349], v__66362); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66349 = atomic_inc(v_work_idx_5369); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66357",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66358",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66359",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66361",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66362",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66364",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__66370",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__66380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66375",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}