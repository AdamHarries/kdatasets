{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78846, const global float* restrict v__78847, const global float* restrict v__78848, const global float* restrict v__78849, float v__78850, float v__78851, global float* v__78869, global int* v__78853, global float* v__78859, local float* v__78864, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78855; \n  float v__78860; \n  float v__57186; \n  /* Private Memory */\n  float v__78857_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6535 = v__78853; \n    local int v_w_id_78838; \n    if (get_local_id(0) == 0) {\n      v_w_id_78838 = atomic_inc(v_work_idx_6535); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78838 < v_MHeight_2)){\n      for (int v_l_id_78839 = get_local_id(0); v_l_id_78839 < v_MWidthC_1; v_l_id_78839 = (v_l_id_78839 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_78840 = 0; v_i_78840 < 512; v_i_78840 = (1 + v_i_78840)) {\n          float v_tmp_78932 = 3.4028235E38f; \n          v__78855 = v_tmp_78932; \n          int v_index_78933 = v__78846[(v_l_id_78839 + (512 * v_MWidthC_1 * v_w_id_78838) + (v_MWidthC_1 * v_i_78840))]; \n          if (v_index_78933 < 0) {\n            v__78857_0 = v__78855; \n          } else {\n            if (v_index_78933 >= v_VLength_3) {\n              v__78857_0 = v__78855; \n            } else {\n              v__78857_0 = v__78848[v_index_78933]; \n            }\n          }\n          v__78859[(v_i_78840 + (512 * v_MWidthC_1 * v_w_id_78838) + (512 * v_l_id_78839))] = absadd(v__78857_0, v__78847[(v_l_id_78839 + (512 * v_MWidthC_1 * v_w_id_78838) + (v_MWidthC_1 * v_i_78840))]); \n        }\n        /* end map_seq */\n        float v_tmp_78934 = 3.4028235E38f; \n        v__78860 = v_tmp_78934; \n        /* reduce_seq */\n        for (int v_i_78841 = 0; v_i_78841 < 512; v_i_78841 = (1 + v_i_78841)) {\n          v__78860 = clmin(v__78860, v__78859[(v_i_78841 + (512 * v_MWidthC_1 * v_w_id_78838) + (512 * v_l_id_78839))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78842 = 0; \n          v__78864[v_l_id_78839] = id(v__78860); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_78843 = get_local_id(0); \n        float v_tmp_78937 = 3.4028235E38f; \n        v__57186 = v_tmp_78937; \n        /* reduce_seq */\n        for (int v_i_78844 = 0; v_i_78844 < v_MWidthC_1; v_i_78844 = (1 + v_i_78844)) {\n          v__57186 = clmin(v__57186, v__78864[(v_i_78844 + (v_MWidthC_1 * v_l_id_78843))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78845 = 0; \n          v__78869[v_w_id_78838] = doubleMultiplyAdd(v__57186, v__78850, v__78849[v_w_id_78838], v__78851); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78838 = atomic_inc(v_work_idx_6535); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78846",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78847",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78848",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78850",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78851",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78853",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__78859",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__78869",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78864",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}