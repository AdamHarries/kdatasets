{
  "name" : "swrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57008, const global float* restrict v__57009, const global float* restrict v__57010, const global float* restrict v__57011, float v__57012, float v__57013, global float* v__57026, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57016; \n  float v__57018; \n  /* Private Memory */\n  float v__57020_0;\n  \n  float v__57022_0;\n  \n  for (int v_wg_id_57004 = get_group_id(0); v_wg_id_57004 < v_MHeight_2; v_wg_id_57004 = (v_wg_id_57004 + get_num_groups(0))) {\n    for (int v_l_id_57005 = get_local_id(0); v_l_id_57005 < 8; v_l_id_57005 = (v_l_id_57005 + get_local_size(0))) {\n      float v_tmp_57069 = 3.4028235E38f; \n      v__57016 = v_tmp_57069; \n      /* reduce_seq */\n      for (int v_i_57006 = 0; v_i_57006 < v_MWidthC_1; v_i_57006 = (1 + v_i_57006)) {\n        float v_tmp_57070 = 3.4028235E38f; \n        v__57018 = v_tmp_57070; \n        int v_index_57071 = v__57008[(v_i_57006 + (8 * v_MWidthC_1 * v_wg_id_57004) + (v_MWidthC_1 * v_l_id_57005))]; \n        if (v_index_57071 < 0) {\n          v__57020_0 = v__57018; \n        } else {\n          if (v_index_57071 >= v_VLength_3) {\n            v__57020_0 = v__57018; \n          } else {\n            v__57020_0 = v__57010[v_index_57071]; \n          }\n        }\n        v__57022_0 = absadd(v__57020_0, v__57009[(v_i_57006 + (8 * v_MWidthC_1 * v_wg_id_57004) + (v_MWidthC_1 * v_l_id_57005))]); \n        v__57016 = clmin(v__57022_0, v__57016); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57007 = 0; \n        v__57026[(v_l_id_57005 + (8 * v_wg_id_57004))] = doubleMultiplyAdd(v__57016, v__57012, v__57011[(v_l_id_57005 + (8 * v_wg_id_57004))], v__57013); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__57008",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57009",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57010",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57011",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__57012",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57013",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__57026",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}