{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65831, const global float* restrict v__65832, const global float* restrict v__65833, const global float* restrict v__65834, float v__65835, float v__65836, global float* v__65854, global int* v__65838, global float* v__65844, local float* v__65849, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65840; \n  float v__65845; \n  float v__57186; \n  /* Private Memory */\n  float v__65842_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5316 = v__65838; \n    local int v_w_id_65823; \n    if (get_local_id(0) == 0) {\n      v_w_id_65823 = atomic_inc(v_work_idx_5316); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65823 < v_MHeight_2)){\n      for (int v_l_id_65824 = get_local_id(0); v_l_id_65824 < v_MWidthC_1; v_l_id_65824 = (v_l_id_65824 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_65825 = 0; v_i_65825 < 32; v_i_65825 = (1 + v_i_65825)) {\n          float v_tmp_65913 = 3.4028235E38f; \n          v__65840 = v_tmp_65913; \n          int v_index_65914 = v__65831[(v_l_id_65824 + (32 * v_MWidthC_1 * v_w_id_65823) + (v_MWidthC_1 * v_i_65825))]; \n          if (v_index_65914 < 0) {\n            v__65842_0 = v__65840; \n          } else {\n            if (v_index_65914 >= v_VLength_3) {\n              v__65842_0 = v__65840; \n            } else {\n              v__65842_0 = v__65833[v_index_65914]; \n            }\n          }\n          v__65844[(v_i_65825 + (32 * v_MWidthC_1 * v_w_id_65823) + (32 * v_l_id_65824))] = absadd(v__65842_0, v__65832[(v_l_id_65824 + (32 * v_MWidthC_1 * v_w_id_65823) + (v_MWidthC_1 * v_i_65825))]); \n        }\n        /* end map_seq */\n        float v_tmp_65915 = 3.4028235E38f; \n        v__65845 = v_tmp_65915; \n        /* reduce_seq */\n        for (int v_i_65826 = 0; v_i_65826 < 32; v_i_65826 = (1 + v_i_65826)) {\n          v__65845 = clmin(v__65845, v__65844[(v_i_65826 + (32 * v_MWidthC_1 * v_w_id_65823) + (32 * v_l_id_65824))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65827 = 0; \n          v__65849[v_l_id_65824] = id(v__65845); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5309; \n        v_work_idx_5309 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_65828 = atomic_inc(&(v_work_idx_5309)); \n        while((v_l_id_65828 < 1)){\n          float v_tmp_65918 = 3.4028235E38f; \n          v__57186 = v_tmp_65918; \n          /* reduce_seq */\n          for (int v_i_65829 = 0; v_i_65829 < v_MWidthC_1; v_i_65829 = (1 + v_i_65829)) {\n            v__57186 = clmin(v__57186, v__65849[(v_i_65829 + (v_MWidthC_1 * v_l_id_65828))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_65830 = 0; \n            v__65854[v_w_id_65823] = doubleMultiplyAdd(v__57186, v__65835, v__65834[v_w_id_65823], v__65836); \n          }\n          /* end map_seq */\n          v_l_id_65828 = atomic_inc(&(v_work_idx_5309)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65823 = atomic_inc(v_work_idx_5316); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65831",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65832",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65833",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65834",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65835",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65836",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65838",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__65844",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__65854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65849",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}