{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61659, const global float* restrict v__61660, const global float* restrict v__61661, const global float* restrict v__61662, float v__61663, float v__61664, global float* v__61681, global float* v__61671, local float* v__61676, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61667; \n  float v__61672; \n  float v__57186; \n  /* Private Memory */\n  float v__61669_0;\n  \n  for (int v_wg_id_61651 = get_group_id(0); v_wg_id_61651 < v_MHeight_2; v_wg_id_61651 = (v_wg_id_61651 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4925; \n      v_work_idx_4925 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_61652 = atomic_inc(&(v_work_idx_4925)); \n      while((v_l_id_61652 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_61653 = 0; v_i_61653 < 16; v_i_61653 = (1 + v_i_61653)) {\n          float v_tmp_61734 = 3.4028235E38f; \n          v__61667 = v_tmp_61734; \n          int v_index_61735 = v__61659[(v_l_id_61652 + (16 * v_MWidthC_1 * v_wg_id_61651) + (v_MWidthC_1 * v_i_61653))]; \n          if (v_index_61735 < 0) {\n            v__61669_0 = v__61667; \n          } else {\n            if (v_index_61735 >= v_VLength_3) {\n              v__61669_0 = v__61667; \n            } else {\n              v__61669_0 = v__61661[v_index_61735]; \n            }\n          }\n          v__61671[(v_i_61653 + (16 * v_MWidthC_1 * v_wg_id_61651) + (16 * v_l_id_61652))] = absadd(v__61669_0, v__61660[(v_l_id_61652 + (16 * v_MWidthC_1 * v_wg_id_61651) + (v_MWidthC_1 * v_i_61653))]); \n        }\n        /* end map_seq */\n        float v_tmp_61736 = 3.4028235E38f; \n        v__61672 = v_tmp_61736; \n        /* reduce_seq */\n        for (int v_i_61654 = 0; v_i_61654 < 16; v_i_61654 = (1 + v_i_61654)) {\n          v__61672 = clmin(v__61672, v__61671[(v_i_61654 + (16 * v_MWidthC_1 * v_wg_id_61651) + (16 * v_l_id_61652))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61655 = 0; \n          v__61676[v_l_id_61652] = id(v__61672); \n        }\n        /* end map_seq */\n        v_l_id_61652 = atomic_inc(&(v_work_idx_4925)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4919; \n      v_work_idx_4919 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_61656 = atomic_inc(&(v_work_idx_4919)); \n      while((v_l_id_61656 < 1)){\n        float v_tmp_61739 = 3.4028235E38f; \n        v__57186 = v_tmp_61739; \n        /* reduce_seq */\n        for (int v_i_61657 = 0; v_i_61657 < v_MWidthC_1; v_i_61657 = (1 + v_i_61657)) {\n          v__57186 = clmin(v__57186, v__61676[(v_i_61657 + (v_MWidthC_1 * v_l_id_61656))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61658 = 0; \n          v__61681[v_wg_id_61651] = doubleMultiplyAdd(v__57186, v__61663, v__61662[v_wg_id_61651], v__61664); \n        }\n        /* end map_seq */\n        v_l_id_61656 = atomic_inc(&(v_work_idx_4919)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61659",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61660",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61661",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61663",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61664",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61671",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61681",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61676",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}