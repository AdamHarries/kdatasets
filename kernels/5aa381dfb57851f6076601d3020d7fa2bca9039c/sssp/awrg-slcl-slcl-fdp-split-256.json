{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75617, const global float* restrict v__75618, const global float* restrict v__75619, const global float* restrict v__75620, float v__75621, float v__75622, global float* v__75640, global int* v__75624, local float* v__75635, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75626; \n  float v__75628; \n  float v__57186; \n  /* Private Memory */\n  float v__75630_0;\n  \n  float v__75632_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6232 = v__75624; \n    local int v_w_id_75610; \n    if (get_local_id(0) == 0) {\n      v_w_id_75610 = atomic_inc(v_work_idx_6232); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75610 < v_MHeight_2)){\n      for (int v_l_id_75611 = get_local_id(0); v_l_id_75611 < v_MWidthC_1; v_l_id_75611 = (v_l_id_75611 + get_local_size(0))) {\n        float v_tmp_75703 = 3.4028235E38f; \n        v__75626 = v_tmp_75703; \n        /* reduce_seq */\n        for (int v_i_75612 = 0; v_i_75612 < 256; v_i_75612 = (1 + v_i_75612)) {\n          float v_tmp_75704 = 3.4028235E38f; \n          v__75628 = v_tmp_75704; \n          int v_index_75705 = v__75617[(v_l_id_75611 + (256 * v_MWidthC_1 * v_w_id_75610) + (v_MWidthC_1 * v_i_75612))]; \n          if (v_index_75705 < 0) {\n            v__75630_0 = v__75628; \n          } else {\n            if (v_index_75705 >= v_VLength_3) {\n              v__75630_0 = v__75628; \n            } else {\n              v__75630_0 = v__75619[v_index_75705]; \n            }\n          }\n          v__75632_0 = absadd(v__75630_0, v__75618[(v_l_id_75611 + (256 * v_MWidthC_1 * v_w_id_75610) + (v_MWidthC_1 * v_i_75612))]); \n          v__75626 = clmin(v__75632_0, v__75626); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75613 = 0; \n          v__75635[v_l_id_75611] = id(v__75626); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_75614 = get_local_id(0); \n        float v_tmp_75708 = 3.4028235E38f; \n        v__57186 = v_tmp_75708; \n        /* reduce_seq */\n        for (int v_i_75615 = 0; v_i_75615 < v_MWidthC_1; v_i_75615 = (1 + v_i_75615)) {\n          v__57186 = clmin(v__57186, v__75635[(v_i_75615 + (v_MWidthC_1 * v_l_id_75614))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75616 = 0; \n          v__75640[v_w_id_75610] = doubleMultiplyAdd(v__57186, v__75621, v__75620[v_w_id_75610], v__75622); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_75610 = atomic_inc(v_work_idx_6232); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75617",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75618",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75619",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75620",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75621",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75622",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75624",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__75640",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75635",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}