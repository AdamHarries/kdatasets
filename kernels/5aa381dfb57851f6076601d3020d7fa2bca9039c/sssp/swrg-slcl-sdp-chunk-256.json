{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73604, const global float* restrict v__73605, const global float* restrict v__73606, const global float* restrict v__73607, float v__73608, float v__73609, global float* v__73622, global float* v__73616, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73612; \n  float v__73617; \n  /* Private Memory */\n  float v__73614_0;\n  \n  for (int v_wg_id_73599 = get_group_id(0); v_wg_id_73599 < v_MHeight_2; v_wg_id_73599 = (v_wg_id_73599 + get_num_groups(0))) {\n    for (int v_l_id_73600 = get_local_id(0); v_l_id_73600 < 256; v_l_id_73600 = (v_l_id_73600 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_73601 = 0; v_i_73601 < v_MWidthC_1; v_i_73601 = (1 + v_i_73601)) {\n        float v_tmp_73666 = 3.4028235E38f; \n        v__73612 = v_tmp_73666; \n        int v_index_73667 = v__73604[(v_i_73601 + (256 * v_MWidthC_1 * v_wg_id_73599) + (v_MWidthC_1 * v_l_id_73600))]; \n        if (v_index_73667 < 0) {\n          v__73614_0 = v__73612; \n        } else {\n          if (v_index_73667 >= v_VLength_3) {\n            v__73614_0 = v__73612; \n          } else {\n            v__73614_0 = v__73606[v_index_73667]; \n          }\n        }\n        v__73616[(v_i_73601 + (256 * v_MWidthC_1 * v_wg_id_73599) + (v_MWidthC_1 * v_l_id_73600))] = absadd(v__73614_0, v__73605[(v_i_73601 + (256 * v_MWidthC_1 * v_wg_id_73599) + (v_MWidthC_1 * v_l_id_73600))]); \n      }\n      /* end map_seq */\n      float v_tmp_73668 = 3.4028235E38f; \n      v__73617 = v_tmp_73668; \n      /* reduce_seq */\n      for (int v_i_73602 = 0; v_i_73602 < v_MWidthC_1; v_i_73602 = (1 + v_i_73602)) {\n        v__73617 = clmin(v__73617, v__73616[(v_i_73602 + (256 * v_MWidthC_1 * v_wg_id_73599) + (v_MWidthC_1 * v_l_id_73600))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_73603 = 0; \n        v__73622[(v_l_id_73600 + (256 * v_wg_id_73599))] = doubleMultiplyAdd(v__73617, v__73608, v__73607[(v_l_id_73600 + (256 * v_wg_id_73599))], v__73609); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73604",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73605",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73606",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73607",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__73608",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73609",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73616",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__73622",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}