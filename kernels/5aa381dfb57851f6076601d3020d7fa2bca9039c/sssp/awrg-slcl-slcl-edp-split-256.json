{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__75722, const global float* restrict v__75723, const global float* restrict v__75724, const global float* restrict v__75725, float v__75726, float v__75727, global float* v__75747, global int* v__75729, local float* v__75742, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75731; \n  float v__75733; \n  float v__57186; \n  /* Private Memory */\n  float v__75735_0;\n  \n  float v__75737_0;\n  \n  int v__75741_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6241 = v__75729; \n    local int v_w_id_75715; \n    if (get_local_id(0) == 0) {\n      v_w_id_75715 = atomic_inc(v_work_idx_6241); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75715 < v_MHeight_2)){\n      for (int v_l_id_75716 = get_local_id(0); v_l_id_75716 < v_MWidthC_1; v_l_id_75716 = (v_l_id_75716 + get_local_size(0))) {\n        float v_tmp_75813 = 3.4028235E38f; \n        v__75731 = v_tmp_75813; \n        /* reduce_while_seq */\n        for (int v_i_75717 = 0; v_i_75717 < 256; v_i_75717 = (1 + v_i_75717)) {\n          v__75741_0 = check(v__75731, v__75722[(v_l_id_75716 + (256 * v_MWidthC_1 * v_w_id_75715) + (v_MWidthC_1 * v_i_75717))]); \n          if (v__75741_0) {\n          } else {\n            break;\n          }\n          float v_tmp_75814 = 3.4028235E38f; \n          v__75733 = v_tmp_75814; \n          int v_index_75815 = v__75722[(v_l_id_75716 + (256 * v_MWidthC_1 * v_w_id_75715) + (v_MWidthC_1 * v_i_75717))]; \n          if (v_index_75815 < 0) {\n            v__75735_0 = v__75733; \n          } else {\n            if (v_index_75815 >= v_VLength_3) {\n              v__75735_0 = v__75733; \n            } else {\n              v__75735_0 = v__75724[v_index_75815]; \n            }\n          }\n          v__75737_0 = absadd(v__75735_0, v__75723[(v_l_id_75716 + (256 * v_MWidthC_1 * v_w_id_75715) + (v_MWidthC_1 * v_i_75717))]); \n          v__75731 = clmin(v__75737_0, v__75731); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75718 = 0; \n          v__75742[v_l_id_75716] = id(v__75731); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_75719 = get_local_id(0); \n        float v_tmp_75818 = 3.4028235E38f; \n        v__57186 = v_tmp_75818; \n        /* reduce_seq */\n        for (int v_i_75720 = 0; v_i_75720 < v_MWidthC_1; v_i_75720 = (1 + v_i_75720)) {\n          v__57186 = clmin(v__57186, v__75742[(v_i_75720 + (v_MWidthC_1 * v_l_id_75719))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75721 = 0; \n          v__75747[v_w_id_75715] = doubleMultiplyAdd(v__57186, v__75726, v__75725[v_w_id_75715], v__75727); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_75715 = atomic_inc(v_work_idx_6241); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__75722",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75723",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75724",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75726",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75727",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75729",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__75747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75742",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}