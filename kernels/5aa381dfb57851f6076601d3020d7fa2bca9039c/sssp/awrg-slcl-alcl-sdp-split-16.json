{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62497, const global float* restrict v__62498, const global float* restrict v__62499, const global float* restrict v__62500, float v__62501, float v__62502, global float* v__62520, global int* v__62504, global float* v__62510, local float* v__62515, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62506; \n  float v__62511; \n  float v__57186; \n  /* Private Memory */\n  float v__62508_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5004 = v__62504; \n    local int v_w_id_62489; \n    if (get_local_id(0) == 0) {\n      v_w_id_62489 = atomic_inc(v_work_idx_5004); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62489 < v_MHeight_2)){\n      for (int v_l_id_62490 = get_local_id(0); v_l_id_62490 < v_MWidthC_1; v_l_id_62490 = (v_l_id_62490 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_62491 = 0; v_i_62491 < 16; v_i_62491 = (1 + v_i_62491)) {\n          float v_tmp_62579 = 3.4028235E38f; \n          v__62506 = v_tmp_62579; \n          int v_index_62580 = v__62497[(v_l_id_62490 + (16 * v_MWidthC_1 * v_w_id_62489) + (v_MWidthC_1 * v_i_62491))]; \n          if (v_index_62580 < 0) {\n            v__62508_0 = v__62506; \n          } else {\n            if (v_index_62580 >= v_VLength_3) {\n              v__62508_0 = v__62506; \n            } else {\n              v__62508_0 = v__62499[v_index_62580]; \n            }\n          }\n          v__62510[(v_i_62491 + (16 * v_MWidthC_1 * v_w_id_62489) + (16 * v_l_id_62490))] = absadd(v__62508_0, v__62498[(v_l_id_62490 + (16 * v_MWidthC_1 * v_w_id_62489) + (v_MWidthC_1 * v_i_62491))]); \n        }\n        /* end map_seq */\n        float v_tmp_62581 = 3.4028235E38f; \n        v__62511 = v_tmp_62581; \n        /* reduce_seq */\n        for (int v_i_62492 = 0; v_i_62492 < 16; v_i_62492 = (1 + v_i_62492)) {\n          v__62511 = clmin(v__62511, v__62510[(v_i_62492 + (16 * v_MWidthC_1 * v_w_id_62489) + (16 * v_l_id_62490))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62493 = 0; \n          v__62515[v_l_id_62490] = id(v__62511); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4997; \n        v_work_idx_4997 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_62494 = atomic_inc(&(v_work_idx_4997)); \n        while((v_l_id_62494 < 1)){\n          float v_tmp_62584 = 3.4028235E38f; \n          v__57186 = v_tmp_62584; \n          /* reduce_seq */\n          for (int v_i_62495 = 0; v_i_62495 < v_MWidthC_1; v_i_62495 = (1 + v_i_62495)) {\n            v__57186 = clmin(v__57186, v__62515[(v_i_62495 + (v_MWidthC_1 * v_l_id_62494))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62496 = 0; \n            v__62520[v_w_id_62489] = doubleMultiplyAdd(v__57186, v__62501, v__62500[v_w_id_62489], v__62502); \n          }\n          /* end map_seq */\n          v_l_id_62494 = atomic_inc(&(v_work_idx_4997)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62489 = atomic_inc(v_work_idx_5004); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62497",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62498",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62499",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62500",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62501",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62502",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62504",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__62510",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__62520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62515",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}