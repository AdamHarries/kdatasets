{
  "name" : "swrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64263, const global float* restrict v__64264, const global float* restrict v__64265, const global float* restrict v__64266, float v__64267, float v__64268, global float* v__64285, local float* v__64280, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64271; \n  float v__64273; \n  float v__57186; \n  /* Private Memory */\n  float v__64275_0;\n  \n  float v__64277_0;\n  \n  for (int v_wg_id_64256 = get_group_id(0); v_wg_id_64256 < v_MHeight_2; v_wg_id_64256 = (v_wg_id_64256 + get_num_groups(0))) {\n    for (int v_l_id_64257 = get_local_id(0); v_l_id_64257 < v_MWidthC_1; v_l_id_64257 = (v_l_id_64257 + get_local_size(0))) {\n      float v_tmp_64346 = 3.4028235E38f; \n      v__64271 = v_tmp_64346; \n      /* reduce_seq */\n      for (int v_i_64258 = 0; v_i_64258 < 32; v_i_64258 = (1 + v_i_64258)) {\n        float v_tmp_64347 = 3.4028235E38f; \n        v__64273 = v_tmp_64347; \n        int v_index_64348 = v__64263[(v_l_id_64257 + (32 * v_MWidthC_1 * v_wg_id_64256) + (v_MWidthC_1 * v_i_64258))]; \n        if (v_index_64348 < 0) {\n          v__64275_0 = v__64273; \n        } else {\n          if (v_index_64348 >= v_VLength_3) {\n            v__64275_0 = v__64273; \n          } else {\n            v__64275_0 = v__64265[v_index_64348]; \n          }\n        }\n        v__64277_0 = absadd(v__64275_0, v__64264[(v_l_id_64257 + (32 * v_MWidthC_1 * v_wg_id_64256) + (v_MWidthC_1 * v_i_64258))]); \n        v__64271 = clmin(v__64277_0, v__64271); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64259 = 0; \n        v__64280[v_l_id_64257] = id(v__64271); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5166; \n      v_work_idx_5166 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_64260 = atomic_inc(&(v_work_idx_5166)); \n      while((v_l_id_64260 < 1)){\n        float v_tmp_64351 = 3.4028235E38f; \n        v__57186 = v_tmp_64351; \n        /* reduce_seq */\n        for (int v_i_64261 = 0; v_i_64261 < v_MWidthC_1; v_i_64261 = (1 + v_i_64261)) {\n          v__57186 = clmin(v__57186, v__64280[(v_i_64261 + (v_MWidthC_1 * v_l_id_64260))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64262 = 0; \n          v__64285[v_wg_id_64256] = doubleMultiplyAdd(v__57186, v__64267, v__64266[v_wg_id_64256], v__64268); \n        }\n        /* end map_seq */\n        v_l_id_64260 = atomic_inc(&(v_work_idx_5166)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__64263",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64264",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64265",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64266",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64267",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64268",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__64285",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64280",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}