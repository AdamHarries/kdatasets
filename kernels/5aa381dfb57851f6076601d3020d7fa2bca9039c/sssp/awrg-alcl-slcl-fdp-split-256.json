{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76456, const global float* restrict v__76457, const global float* restrict v__76458, const global float* restrict v__76459, float v__76460, float v__76461, global float* v__76479, global int* v__76463, local float* v__76474, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76465; \n  float v__76467; \n  float v__57186; \n  /* Private Memory */\n  float v__76469_0;\n  \n  float v__76471_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6315 = v__76463; \n    local int v_w_id_76449; \n    if (get_local_id(0) == 0) {\n      v_w_id_76449 = atomic_inc(v_work_idx_6315); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76449 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6313; \n        v_work_idx_6313 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76450 = atomic_inc(&(v_work_idx_6313)); \n        while((v_l_id_76450 < v_MWidthC_1)){\n          float v_tmp_76534 = 3.4028235E38f; \n          v__76465 = v_tmp_76534; \n          /* reduce_seq */\n          for (int v_i_76451 = 0; v_i_76451 < 256; v_i_76451 = (1 + v_i_76451)) {\n            float v_tmp_76535 = 3.4028235E38f; \n            v__76467 = v_tmp_76535; \n            int v_index_76536 = v__76456[(v_l_id_76450 + (256 * v_MWidthC_1 * v_w_id_76449) + (v_MWidthC_1 * v_i_76451))]; \n            if (v_index_76536 < 0) {\n              v__76469_0 = v__76467; \n            } else {\n              if (v_index_76536 >= v_VLength_3) {\n                v__76469_0 = v__76467; \n              } else {\n                v__76469_0 = v__76458[v_index_76536]; \n              }\n            }\n            v__76471_0 = absadd(v__76469_0, v__76457[(v_l_id_76450 + (256 * v_MWidthC_1 * v_w_id_76449) + (v_MWidthC_1 * v_i_76451))]); \n            v__76465 = clmin(v__76471_0, v__76465); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76452 = 0; \n            v__76474[v_l_id_76450] = id(v__76465); \n          }\n          /* end map_seq */\n          v_l_id_76450 = atomic_inc(&(v_work_idx_6313)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_76453 = get_local_id(0); \n        float v_tmp_76539 = 3.4028235E38f; \n        v__57186 = v_tmp_76539; \n        /* reduce_seq */\n        for (int v_i_76454 = 0; v_i_76454 < v_MWidthC_1; v_i_76454 = (1 + v_i_76454)) {\n          v__57186 = clmin(v__57186, v__76474[(v_i_76454 + (v_MWidthC_1 * v_l_id_76453))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76455 = 0; \n          v__76479[v_w_id_76449] = doubleMultiplyAdd(v__57186, v__76460, v__76459[v_w_id_76449], v__76461); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76449 = atomic_inc(v_work_idx_6315); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76456",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76457",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76458",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76460",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76461",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76463",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76479",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76474",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}