{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74793, const global float* restrict v__74794, const global float* restrict v__74795, const global float* restrict v__74796, float v__74797, float v__74798, global float* v__74815, local float* v__74810, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74801; \n  float v__74803; \n  float v__57186; \n  /* Private Memory */\n  float v__74805_0;\n  \n  float v__74807_0;\n  \n  for (int v_wg_id_74786 = get_group_id(0); v_wg_id_74786 < v_MHeight_2; v_wg_id_74786 = (v_wg_id_74786 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6153; \n      v_work_idx_6153 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74787 = atomic_inc(&(v_work_idx_6153)); \n      while((v_l_id_74787 < v_MWidthC_1)){\n        float v_tmp_74872 = 3.4028235E38f; \n        v__74801 = v_tmp_74872; \n        /* reduce_seq */\n        for (int v_i_74788 = 0; v_i_74788 < 256; v_i_74788 = (1 + v_i_74788)) {\n          float v_tmp_74873 = 3.4028235E38f; \n          v__74803 = v_tmp_74873; \n          int v_index_74874 = v__74793[(v_l_id_74787 + (256 * v_MWidthC_1 * v_wg_id_74786) + (v_MWidthC_1 * v_i_74788))]; \n          if (v_index_74874 < 0) {\n            v__74805_0 = v__74803; \n          } else {\n            if (v_index_74874 >= v_VLength_3) {\n              v__74805_0 = v__74803; \n            } else {\n              v__74805_0 = v__74795[v_index_74874]; \n            }\n          }\n          v__74807_0 = absadd(v__74805_0, v__74794[(v_l_id_74787 + (256 * v_MWidthC_1 * v_wg_id_74786) + (v_MWidthC_1 * v_i_74788))]); \n          v__74801 = clmin(v__74807_0, v__74801); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74789 = 0; \n          v__74810[v_l_id_74787] = id(v__74801); \n        }\n        /* end map_seq */\n        v_l_id_74787 = atomic_inc(&(v_work_idx_6153)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_74790 = get_local_id(0); \n      float v_tmp_74877 = 3.4028235E38f; \n      v__57186 = v_tmp_74877; \n      /* reduce_seq */\n      for (int v_i_74791 = 0; v_i_74791 < v_MWidthC_1; v_i_74791 = (1 + v_i_74791)) {\n        v__57186 = clmin(v__57186, v__74810[(v_i_74791 + (v_MWidthC_1 * v_l_id_74790))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74792 = 0; \n        v__74815[v_wg_id_74786] = doubleMultiplyAdd(v__57186, v__74797, v__74796[v_wg_id_74786], v__74798); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__74793",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74794",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74795",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74796",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74797",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74798",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__74815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74810",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}