{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65510, const global float* restrict v__65511, const global float* restrict v__65512, const global float* restrict v__65513, float v__65514, float v__65515, global float* v__65533, global int* v__65517, global float* v__65523, local float* v__65528, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65519; \n  float v__65524; \n  float v__57186; \n  /* Private Memory */\n  float v__65521_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5287 = v__65517; \n    local int v_w_id_65502; \n    if (get_local_id(0) == 0) {\n      v_w_id_65502 = atomic_inc(v_work_idx_5287); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65502 < v_MHeight_2)){\n      for (int v_l_id_65503 = get_local_id(0); v_l_id_65503 < v_MWidthC_1; v_l_id_65503 = (v_l_id_65503 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_65504 = 0; v_i_65504 < 32; v_i_65504 = (1 + v_i_65504)) {\n          float v_tmp_65596 = 3.4028235E38f; \n          v__65519 = v_tmp_65596; \n          int v_index_65597 = v__65510[(v_l_id_65503 + (32 * v_MWidthC_1 * v_w_id_65502) + (v_MWidthC_1 * v_i_65504))]; \n          if (v_index_65597 < 0) {\n            v__65521_0 = v__65519; \n          } else {\n            if (v_index_65597 >= v_VLength_3) {\n              v__65521_0 = v__65519; \n            } else {\n              v__65521_0 = v__65512[v_index_65597]; \n            }\n          }\n          v__65523[(v_i_65504 + (32 * v_MWidthC_1 * v_w_id_65502) + (32 * v_l_id_65503))] = absadd(v__65521_0, v__65511[(v_l_id_65503 + (32 * v_MWidthC_1 * v_w_id_65502) + (v_MWidthC_1 * v_i_65504))]); \n        }\n        /* end map_seq */\n        float v_tmp_65598 = 3.4028235E38f; \n        v__65524 = v_tmp_65598; \n        /* reduce_seq */\n        for (int v_i_65505 = 0; v_i_65505 < 32; v_i_65505 = (1 + v_i_65505)) {\n          v__65524 = clmin(v__65524, v__65523[(v_i_65505 + (32 * v_MWidthC_1 * v_w_id_65502) + (32 * v_l_id_65503))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65506 = 0; \n          v__65528[v_l_id_65503] = id(v__65524); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65507 = get_local_id(0); \n        float v_tmp_65601 = 3.4028235E38f; \n        v__57186 = v_tmp_65601; \n        /* reduce_seq */\n        for (int v_i_65508 = 0; v_i_65508 < v_MWidthC_1; v_i_65508 = (1 + v_i_65508)) {\n          v__57186 = clmin(v__57186, v__65528[(v_i_65508 + (v_MWidthC_1 * v_l_id_65507))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65509 = 0; \n          v__65533[v_w_id_65502] = doubleMultiplyAdd(v__57186, v__65514, v__65513[v_w_id_65502], v__65515); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65502 = atomic_inc(v_work_idx_5287); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65510",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65511",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65512",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65513",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65514",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65515",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65517",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__65523",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__65533",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65528",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}