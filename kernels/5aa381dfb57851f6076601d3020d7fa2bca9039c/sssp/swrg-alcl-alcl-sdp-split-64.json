{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68327, const global float* restrict v__68328, const global float* restrict v__68329, const global float* restrict v__68330, float v__68331, float v__68332, global float* v__68349, global float* v__68339, local float* v__68344, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68335; \n  float v__68340; \n  float v__57186; \n  /* Private Memory */\n  float v__68337_0;\n  \n  for (int v_wg_id_68319 = get_group_id(0); v_wg_id_68319 < v_MHeight_2; v_wg_id_68319 = (v_wg_id_68319 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5549; \n      v_work_idx_5549 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68320 = atomic_inc(&(v_work_idx_5549)); \n      while((v_l_id_68320 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_68321 = 0; v_i_68321 < 64; v_i_68321 = (1 + v_i_68321)) {\n          float v_tmp_68402 = 3.4028235E38f; \n          v__68335 = v_tmp_68402; \n          int v_index_68403 = v__68327[(v_l_id_68320 + (64 * v_MWidthC_1 * v_wg_id_68319) + (v_MWidthC_1 * v_i_68321))]; \n          if (v_index_68403 < 0) {\n            v__68337_0 = v__68335; \n          } else {\n            if (v_index_68403 >= v_VLength_3) {\n              v__68337_0 = v__68335; \n            } else {\n              v__68337_0 = v__68329[v_index_68403]; \n            }\n          }\n          v__68339[(v_i_68321 + (64 * v_MWidthC_1 * v_wg_id_68319) + (64 * v_l_id_68320))] = absadd(v__68337_0, v__68328[(v_l_id_68320 + (64 * v_MWidthC_1 * v_wg_id_68319) + (v_MWidthC_1 * v_i_68321))]); \n        }\n        /* end map_seq */\n        float v_tmp_68404 = 3.4028235E38f; \n        v__68340 = v_tmp_68404; \n        /* reduce_seq */\n        for (int v_i_68322 = 0; v_i_68322 < 64; v_i_68322 = (1 + v_i_68322)) {\n          v__68340 = clmin(v__68340, v__68339[(v_i_68322 + (64 * v_MWidthC_1 * v_wg_id_68319) + (64 * v_l_id_68320))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68323 = 0; \n          v__68344[v_l_id_68320] = id(v__68340); \n        }\n        /* end map_seq */\n        v_l_id_68320 = atomic_inc(&(v_work_idx_5549)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5543; \n      v_work_idx_5543 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68324 = atomic_inc(&(v_work_idx_5543)); \n      while((v_l_id_68324 < 1)){\n        float v_tmp_68407 = 3.4028235E38f; \n        v__57186 = v_tmp_68407; \n        /* reduce_seq */\n        for (int v_i_68325 = 0; v_i_68325 < v_MWidthC_1; v_i_68325 = (1 + v_i_68325)) {\n          v__57186 = clmin(v__57186, v__68344[(v_i_68325 + (v_MWidthC_1 * v_l_id_68324))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68326 = 0; \n          v__68349[v_wg_id_68319] = doubleMultiplyAdd(v__57186, v__68331, v__68330[v_wg_id_68319], v__68332); \n        }\n        /* end map_seq */\n        v_l_id_68324 = atomic_inc(&(v_work_idx_5543)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68327",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68328",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68329",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68331",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68332",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68339",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__68349",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68344",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}