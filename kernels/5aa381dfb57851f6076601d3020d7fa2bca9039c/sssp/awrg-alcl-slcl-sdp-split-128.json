{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73025, const global float* restrict v__73026, const global float* restrict v__73027, const global float* restrict v__73028, float v__73029, float v__73030, global float* v__73048, global int* v__73032, global float* v__73038, local float* v__73043, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73034; \n  float v__73039; \n  float v__57186; \n  /* Private Memory */\n  float v__73036_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5993 = v__73032; \n    local int v_w_id_73017; \n    if (get_local_id(0) == 0) {\n      v_w_id_73017 = atomic_inc(v_work_idx_5993); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73017 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5991; \n        v_work_idx_5991 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73018 = atomic_inc(&(v_work_idx_5991)); \n        while((v_l_id_73018 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_73019 = 0; v_i_73019 < 128; v_i_73019 = (1 + v_i_73019)) {\n            float v_tmp_73103 = 3.4028235E38f; \n            v__73034 = v_tmp_73103; \n            int v_index_73104 = v__73025[(v_l_id_73018 + (128 * v_MWidthC_1 * v_w_id_73017) + (v_MWidthC_1 * v_i_73019))]; \n            if (v_index_73104 < 0) {\n              v__73036_0 = v__73034; \n            } else {\n              if (v_index_73104 >= v_VLength_3) {\n                v__73036_0 = v__73034; \n              } else {\n                v__73036_0 = v__73027[v_index_73104]; \n              }\n            }\n            v__73038[(v_i_73019 + (128 * v_MWidthC_1 * v_w_id_73017) + (128 * v_l_id_73018))] = absadd(v__73036_0, v__73026[(v_l_id_73018 + (128 * v_MWidthC_1 * v_w_id_73017) + (v_MWidthC_1 * v_i_73019))]); \n          }\n          /* end map_seq */\n          float v_tmp_73105 = 3.4028235E38f; \n          v__73039 = v_tmp_73105; \n          /* reduce_seq */\n          for (int v_i_73020 = 0; v_i_73020 < 128; v_i_73020 = (1 + v_i_73020)) {\n            v__73039 = clmin(v__73039, v__73038[(v_i_73020 + (128 * v_MWidthC_1 * v_w_id_73017) + (128 * v_l_id_73018))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73021 = 0; \n            v__73043[v_l_id_73018] = id(v__73039); \n          }\n          /* end map_seq */\n          v_l_id_73018 = atomic_inc(&(v_work_idx_5991)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_73022 = get_local_id(0); \n        float v_tmp_73108 = 3.4028235E38f; \n        v__57186 = v_tmp_73108; \n        /* reduce_seq */\n        for (int v_i_73023 = 0; v_i_73023 < v_MWidthC_1; v_i_73023 = (1 + v_i_73023)) {\n          v__57186 = clmin(v__57186, v__73043[(v_i_73023 + (v_MWidthC_1 * v_l_id_73022))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_73024 = 0; \n          v__73048[v_w_id_73017] = doubleMultiplyAdd(v__57186, v__73029, v__73028[v_w_id_73017], v__73030); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73017 = atomic_inc(v_work_idx_5993); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73025",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73026",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73027",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73029",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73030",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73032",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__73038",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__73048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73043",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}