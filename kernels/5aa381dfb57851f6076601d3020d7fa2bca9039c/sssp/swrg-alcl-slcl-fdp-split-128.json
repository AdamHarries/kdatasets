{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71459, const global float* restrict v__71460, const global float* restrict v__71461, const global float* restrict v__71462, float v__71463, float v__71464, global float* v__71481, local float* v__71476, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71467; \n  float v__71469; \n  float v__57186; \n  /* Private Memory */\n  float v__71471_0;\n  \n  float v__71473_0;\n  \n  for (int v_wg_id_71452 = get_group_id(0); v_wg_id_71452 < v_MHeight_2; v_wg_id_71452 = (v_wg_id_71452 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5841; \n      v_work_idx_5841 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71453 = atomic_inc(&(v_work_idx_5841)); \n      while((v_l_id_71453 < v_MWidthC_1)){\n        float v_tmp_71538 = 3.4028235E38f; \n        v__71467 = v_tmp_71538; \n        /* reduce_seq */\n        for (int v_i_71454 = 0; v_i_71454 < 128; v_i_71454 = (1 + v_i_71454)) {\n          float v_tmp_71539 = 3.4028235E38f; \n          v__71469 = v_tmp_71539; \n          int v_index_71540 = v__71459[(v_l_id_71453 + (128 * v_MWidthC_1 * v_wg_id_71452) + (v_MWidthC_1 * v_i_71454))]; \n          if (v_index_71540 < 0) {\n            v__71471_0 = v__71469; \n          } else {\n            if (v_index_71540 >= v_VLength_3) {\n              v__71471_0 = v__71469; \n            } else {\n              v__71471_0 = v__71461[v_index_71540]; \n            }\n          }\n          v__71473_0 = absadd(v__71471_0, v__71460[(v_l_id_71453 + (128 * v_MWidthC_1 * v_wg_id_71452) + (v_MWidthC_1 * v_i_71454))]); \n          v__71467 = clmin(v__71473_0, v__71467); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71455 = 0; \n          v__71476[v_l_id_71453] = id(v__71467); \n        }\n        /* end map_seq */\n        v_l_id_71453 = atomic_inc(&(v_work_idx_5841)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_71456 = get_local_id(0); \n      float v_tmp_71543 = 3.4028235E38f; \n      v__57186 = v_tmp_71543; \n      /* reduce_seq */\n      for (int v_i_71457 = 0; v_i_71457 < v_MWidthC_1; v_i_71457 = (1 + v_i_71457)) {\n        v__57186 = clmin(v__57186, v__71476[(v_i_71457 + (v_MWidthC_1 * v_l_id_71456))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71458 = 0; \n        v__71481[v_wg_id_71452] = doubleMultiplyAdd(v__57186, v__71463, v__71462[v_wg_id_71452], v__71464); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__71459",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71460",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71461",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71462",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71463",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71464",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71476",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}