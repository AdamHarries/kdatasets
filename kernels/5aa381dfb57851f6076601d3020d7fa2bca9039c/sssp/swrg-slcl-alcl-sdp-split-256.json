{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74163, const global float* restrict v__74164, const global float* restrict v__74165, const global float* restrict v__74166, float v__74167, float v__74168, global float* v__74185, global float* v__74175, local float* v__74180, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74171; \n  float v__74176; \n  float v__57186; \n  /* Private Memory */\n  float v__74173_0;\n  \n  for (int v_wg_id_74155 = get_group_id(0); v_wg_id_74155 < v_MHeight_2; v_wg_id_74155 = (v_wg_id_74155 + get_num_groups(0))) {\n    for (int v_l_id_74156 = get_local_id(0); v_l_id_74156 < v_MWidthC_1; v_l_id_74156 = (v_l_id_74156 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_74157 = 0; v_i_74157 < 256; v_i_74157 = (1 + v_i_74157)) {\n        float v_tmp_74246 = 3.4028235E38f; \n        v__74171 = v_tmp_74246; \n        int v_index_74247 = v__74163[(v_l_id_74156 + (256 * v_MWidthC_1 * v_wg_id_74155) + (v_MWidthC_1 * v_i_74157))]; \n        if (v_index_74247 < 0) {\n          v__74173_0 = v__74171; \n        } else {\n          if (v_index_74247 >= v_VLength_3) {\n            v__74173_0 = v__74171; \n          } else {\n            v__74173_0 = v__74165[v_index_74247]; \n          }\n        }\n        v__74175[(v_i_74157 + (256 * v_MWidthC_1 * v_wg_id_74155) + (256 * v_l_id_74156))] = absadd(v__74173_0, v__74164[(v_l_id_74156 + (256 * v_MWidthC_1 * v_wg_id_74155) + (v_MWidthC_1 * v_i_74157))]); \n      }\n      /* end map_seq */\n      float v_tmp_74248 = 3.4028235E38f; \n      v__74176 = v_tmp_74248; \n      /* reduce_seq */\n      for (int v_i_74158 = 0; v_i_74158 < 256; v_i_74158 = (1 + v_i_74158)) {\n        v__74176 = clmin(v__74176, v__74175[(v_i_74158 + (256 * v_MWidthC_1 * v_wg_id_74155) + (256 * v_l_id_74156))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74159 = 0; \n        v__74180[v_l_id_74156] = id(v__74176); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6092; \n      v_work_idx_6092 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74160 = atomic_inc(&(v_work_idx_6092)); \n      while((v_l_id_74160 < 1)){\n        float v_tmp_74251 = 3.4028235E38f; \n        v__57186 = v_tmp_74251; \n        /* reduce_seq */\n        for (int v_i_74161 = 0; v_i_74161 < v_MWidthC_1; v_i_74161 = (1 + v_i_74161)) {\n          v__57186 = clmin(v__57186, v__74180[(v_i_74161 + (v_MWidthC_1 * v_l_id_74160))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74162 = 0; \n          v__74185[v_wg_id_74155] = doubleMultiplyAdd(v__57186, v__74167, v__74166[v_wg_id_74155], v__74168); \n        }\n        /* end map_seq */\n        v_l_id_74160 = atomic_inc(&(v_work_idx_6092)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74163",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74164",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74165",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74167",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74168",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74175",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74180",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}