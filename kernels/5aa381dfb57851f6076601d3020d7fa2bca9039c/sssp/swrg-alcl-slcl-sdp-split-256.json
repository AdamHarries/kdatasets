{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74695, const global float* restrict v__74696, const global float* restrict v__74697, const global float* restrict v__74698, float v__74699, float v__74700, global float* v__74717, global float* v__74707, local float* v__74712, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74703; \n  float v__74708; \n  float v__57186; \n  /* Private Memory */\n  float v__74705_0;\n  \n  for (int v_wg_id_74687 = get_group_id(0); v_wg_id_74687 < v_MHeight_2; v_wg_id_74687 = (v_wg_id_74687 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6144; \n      v_work_idx_6144 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74688 = atomic_inc(&(v_work_idx_6144)); \n      while((v_l_id_74688 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_74689 = 0; v_i_74689 < 256; v_i_74689 = (1 + v_i_74689)) {\n          float v_tmp_74774 = 3.4028235E38f; \n          v__74703 = v_tmp_74774; \n          int v_index_74775 = v__74695[(v_l_id_74688 + (256 * v_MWidthC_1 * v_wg_id_74687) + (v_MWidthC_1 * v_i_74689))]; \n          if (v_index_74775 < 0) {\n            v__74705_0 = v__74703; \n          } else {\n            if (v_index_74775 >= v_VLength_3) {\n              v__74705_0 = v__74703; \n            } else {\n              v__74705_0 = v__74697[v_index_74775]; \n            }\n          }\n          v__74707[(v_i_74689 + (256 * v_MWidthC_1 * v_wg_id_74687) + (256 * v_l_id_74688))] = absadd(v__74705_0, v__74696[(v_l_id_74688 + (256 * v_MWidthC_1 * v_wg_id_74687) + (v_MWidthC_1 * v_i_74689))]); \n        }\n        /* end map_seq */\n        float v_tmp_74776 = 3.4028235E38f; \n        v__74708 = v_tmp_74776; \n        /* reduce_seq */\n        for (int v_i_74690 = 0; v_i_74690 < 256; v_i_74690 = (1 + v_i_74690)) {\n          v__74708 = clmin(v__74708, v__74707[(v_i_74690 + (256 * v_MWidthC_1 * v_wg_id_74687) + (256 * v_l_id_74688))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74691 = 0; \n          v__74712[v_l_id_74688] = id(v__74708); \n        }\n        /* end map_seq */\n        v_l_id_74688 = atomic_inc(&(v_work_idx_6144)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_74692 = get_local_id(0); \n      float v_tmp_74779 = 3.4028235E38f; \n      v__57186 = v_tmp_74779; \n      /* reduce_seq */\n      for (int v_i_74693 = 0; v_i_74693 < v_MWidthC_1; v_i_74693 = (1 + v_i_74693)) {\n        v__57186 = clmin(v__57186, v__74712[(v_i_74693 + (v_MWidthC_1 * v_l_id_74692))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74694 = 0; \n        v__74717[v_wg_id_74687] = doubleMultiplyAdd(v__57186, v__74699, v__74698[v_wg_id_74687], v__74700); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74695",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74696",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74697",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74698",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74699",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74700",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74707",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74712",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}