{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64993, const global float* restrict v__64994, const global float* restrict v__64995, const global float* restrict v__64996, float v__64997, float v__64998, global float* v__65015, global float* v__65005, local float* v__65010, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65001; \n  float v__65006; \n  float v__57186; \n  /* Private Memory */\n  float v__65003_0;\n  \n  for (int v_wg_id_64985 = get_group_id(0); v_wg_id_64985 < v_MHeight_2; v_wg_id_64985 = (v_wg_id_64985 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5237; \n      v_work_idx_5237 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_64986 = atomic_inc(&(v_work_idx_5237)); \n      while((v_l_id_64986 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_64987 = 0; v_i_64987 < 32; v_i_64987 = (1 + v_i_64987)) {\n          float v_tmp_65068 = 3.4028235E38f; \n          v__65001 = v_tmp_65068; \n          int v_index_65069 = v__64993[(v_l_id_64986 + (32 * v_MWidthC_1 * v_wg_id_64985) + (v_MWidthC_1 * v_i_64987))]; \n          if (v_index_65069 < 0) {\n            v__65003_0 = v__65001; \n          } else {\n            if (v_index_65069 >= v_VLength_3) {\n              v__65003_0 = v__65001; \n            } else {\n              v__65003_0 = v__64995[v_index_65069]; \n            }\n          }\n          v__65005[(v_i_64987 + (32 * v_MWidthC_1 * v_wg_id_64985) + (32 * v_l_id_64986))] = absadd(v__65003_0, v__64994[(v_l_id_64986 + (32 * v_MWidthC_1 * v_wg_id_64985) + (v_MWidthC_1 * v_i_64987))]); \n        }\n        /* end map_seq */\n        float v_tmp_65070 = 3.4028235E38f; \n        v__65006 = v_tmp_65070; \n        /* reduce_seq */\n        for (int v_i_64988 = 0; v_i_64988 < 32; v_i_64988 = (1 + v_i_64988)) {\n          v__65006 = clmin(v__65006, v__65005[(v_i_64988 + (32 * v_MWidthC_1 * v_wg_id_64985) + (32 * v_l_id_64986))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64989 = 0; \n          v__65010[v_l_id_64986] = id(v__65006); \n        }\n        /* end map_seq */\n        v_l_id_64986 = atomic_inc(&(v_work_idx_5237)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5231; \n      v_work_idx_5231 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_64990 = atomic_inc(&(v_work_idx_5231)); \n      while((v_l_id_64990 < 1)){\n        float v_tmp_65073 = 3.4028235E38f; \n        v__57186 = v_tmp_65073; \n        /* reduce_seq */\n        for (int v_i_64991 = 0; v_i_64991 < v_MWidthC_1; v_i_64991 = (1 + v_i_64991)) {\n          v__57186 = clmin(v__57186, v__65010[(v_i_64991 + (v_MWidthC_1 * v_l_id_64990))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64992 = 0; \n          v__65015[v_wg_id_64985] = doubleMultiplyAdd(v__57186, v__64997, v__64996[v_wg_id_64985], v__64998); \n        }\n        /* end map_seq */\n        v_l_id_64990 = atomic_inc(&(v_work_idx_5231)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64993",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64994",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64995",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64997",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64998",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65005",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__65015",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65010",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}