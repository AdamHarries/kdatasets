{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79693, const global float* restrict v__79694, const global float* restrict v__79695, const global float* restrict v__79696, float v__79697, float v__79698, global float* v__79716, global int* v__79700, global float* v__79706, local float* v__79711, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79702; \n  float v__79707; \n  float v__57186; \n  /* Private Memory */\n  float v__79704_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6617 = v__79700; \n    local int v_w_id_79685; \n    if (get_local_id(0) == 0) {\n      v_w_id_79685 = atomic_inc(v_work_idx_6617); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79685 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6615; \n        v_work_idx_6615 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_79686 = atomic_inc(&(v_work_idx_6615)); \n        while((v_l_id_79686 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_79687 = 0; v_i_79687 < 512; v_i_79687 = (1 + v_i_79687)) {\n            float v_tmp_79771 = 3.4028235E38f; \n            v__79702 = v_tmp_79771; \n            int v_index_79772 = v__79693[(v_l_id_79686 + (512 * v_MWidthC_1 * v_w_id_79685) + (v_MWidthC_1 * v_i_79687))]; \n            if (v_index_79772 < 0) {\n              v__79704_0 = v__79702; \n            } else {\n              if (v_index_79772 >= v_VLength_3) {\n                v__79704_0 = v__79702; \n              } else {\n                v__79704_0 = v__79695[v_index_79772]; \n              }\n            }\n            v__79706[(v_i_79687 + (512 * v_MWidthC_1 * v_w_id_79685) + (512 * v_l_id_79686))] = absadd(v__79704_0, v__79694[(v_l_id_79686 + (512 * v_MWidthC_1 * v_w_id_79685) + (v_MWidthC_1 * v_i_79687))]); \n          }\n          /* end map_seq */\n          float v_tmp_79773 = 3.4028235E38f; \n          v__79707 = v_tmp_79773; \n          /* reduce_seq */\n          for (int v_i_79688 = 0; v_i_79688 < 512; v_i_79688 = (1 + v_i_79688)) {\n            v__79707 = clmin(v__79707, v__79706[(v_i_79688 + (512 * v_MWidthC_1 * v_w_id_79685) + (512 * v_l_id_79686))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79689 = 0; \n            v__79711[v_l_id_79686] = id(v__79707); \n          }\n          /* end map_seq */\n          v_l_id_79686 = atomic_inc(&(v_work_idx_6615)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79690 = get_local_id(0); \n        float v_tmp_79776 = 3.4028235E38f; \n        v__57186 = v_tmp_79776; \n        /* reduce_seq */\n        for (int v_i_79691 = 0; v_i_79691 < v_MWidthC_1; v_i_79691 = (1 + v_i_79691)) {\n          v__57186 = clmin(v__57186, v__79711[(v_i_79691 + (v_MWidthC_1 * v_l_id_79690))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79692 = 0; \n          v__79716[v_w_id_79685] = doubleMultiplyAdd(v__57186, v__79697, v__79696[v_w_id_79685], v__79698); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79685 = atomic_inc(v_work_idx_6617); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79693",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79694",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79695",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79697",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79698",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79700",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__79706",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__79716",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79711",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}