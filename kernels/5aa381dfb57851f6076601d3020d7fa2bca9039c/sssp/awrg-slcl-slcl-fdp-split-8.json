{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58947, const global float* restrict v__58948, const global float* restrict v__58949, const global float* restrict v__58950, float v__58951, float v__58952, global float* v__58970, global int* v__58954, local float* v__58965, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58956; \n  float v__58958; \n  float v__57186; \n  /* Private Memory */\n  float v__58960_0;\n  \n  float v__58962_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4672 = v__58954; \n    local int v_w_id_58940; \n    if (get_local_id(0) == 0) {\n      v_w_id_58940 = atomic_inc(v_work_idx_4672); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_58940 < v_MHeight_2)){\n      for (int v_l_id_58941 = get_local_id(0); v_l_id_58941 < v_MWidthC_1; v_l_id_58941 = (v_l_id_58941 + get_local_size(0))) {\n        float v_tmp_59033 = 3.4028235E38f; \n        v__58956 = v_tmp_59033; \n        /* reduce_seq */\n        for (int v_i_58942 = 0; v_i_58942 < 8; v_i_58942 = (1 + v_i_58942)) {\n          float v_tmp_59034 = 3.4028235E38f; \n          v__58958 = v_tmp_59034; \n          int v_index_59035 = v__58947[(v_l_id_58941 + (8 * v_MWidthC_1 * v_w_id_58940) + (v_MWidthC_1 * v_i_58942))]; \n          if (v_index_59035 < 0) {\n            v__58960_0 = v__58958; \n          } else {\n            if (v_index_59035 >= v_VLength_3) {\n              v__58960_0 = v__58958; \n            } else {\n              v__58960_0 = v__58949[v_index_59035]; \n            }\n          }\n          v__58962_0 = absadd(v__58960_0, v__58948[(v_l_id_58941 + (8 * v_MWidthC_1 * v_w_id_58940) + (v_MWidthC_1 * v_i_58942))]); \n          v__58956 = clmin(v__58962_0, v__58956); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58943 = 0; \n          v__58965[v_l_id_58941] = id(v__58956); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_58944 = get_local_id(0); \n        float v_tmp_59038 = 3.4028235E38f; \n        v__57186 = v_tmp_59038; \n        /* reduce_seq */\n        for (int v_i_58945 = 0; v_i_58945 < v_MWidthC_1; v_i_58945 = (1 + v_i_58945)) {\n          v__57186 = clmin(v__57186, v__58965[(v_i_58945 + (v_MWidthC_1 * v_l_id_58944))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58946 = 0; \n          v__58970[v_w_id_58940] = doubleMultiplyAdd(v__57186, v__58951, v__58950[v_w_id_58940], v__58952); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_58940 = atomic_inc(v_work_idx_4672); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58947",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58948",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58949",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58951",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58952",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58954",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__58970",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58965",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}