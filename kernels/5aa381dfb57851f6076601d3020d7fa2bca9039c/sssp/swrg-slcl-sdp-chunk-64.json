{
  "name" : "swrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66936, const global float* restrict v__66937, const global float* restrict v__66938, const global float* restrict v__66939, float v__66940, float v__66941, global float* v__66954, global float* v__66948, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66944; \n  float v__66949; \n  /* Private Memory */\n  float v__66946_0;\n  \n  for (int v_wg_id_66931 = get_group_id(0); v_wg_id_66931 < v_MHeight_2; v_wg_id_66931 = (v_wg_id_66931 + get_num_groups(0))) {\n    for (int v_l_id_66932 = get_local_id(0); v_l_id_66932 < 64; v_l_id_66932 = (v_l_id_66932 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_66933 = 0; v_i_66933 < v_MWidthC_1; v_i_66933 = (1 + v_i_66933)) {\n        float v_tmp_66998 = 3.4028235E38f; \n        v__66944 = v_tmp_66998; \n        int v_index_66999 = v__66936[(v_i_66933 + (64 * v_MWidthC_1 * v_wg_id_66931) + (v_MWidthC_1 * v_l_id_66932))]; \n        if (v_index_66999 < 0) {\n          v__66946_0 = v__66944; \n        } else {\n          if (v_index_66999 >= v_VLength_3) {\n            v__66946_0 = v__66944; \n          } else {\n            v__66946_0 = v__66938[v_index_66999]; \n          }\n        }\n        v__66948[(v_i_66933 + (64 * v_MWidthC_1 * v_wg_id_66931) + (v_MWidthC_1 * v_l_id_66932))] = absadd(v__66946_0, v__66937[(v_i_66933 + (64 * v_MWidthC_1 * v_wg_id_66931) + (v_MWidthC_1 * v_l_id_66932))]); \n      }\n      /* end map_seq */\n      float v_tmp_67000 = 3.4028235E38f; \n      v__66949 = v_tmp_67000; \n      /* reduce_seq */\n      for (int v_i_66934 = 0; v_i_66934 < v_MWidthC_1; v_i_66934 = (1 + v_i_66934)) {\n        v__66949 = clmin(v__66949, v__66948[(v_i_66934 + (64 * v_MWidthC_1 * v_wg_id_66931) + (v_MWidthC_1 * v_l_id_66932))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_66935 = 0; \n        v__66954[(v_l_id_66932 + (64 * v_wg_id_66931))] = doubleMultiplyAdd(v__66949, v__66940, v__66939[(v_l_id_66932 + (64 * v_wg_id_66931))], v__66941); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66936",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66937",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66938",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66939",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__66940",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66941",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66948",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__66954",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}