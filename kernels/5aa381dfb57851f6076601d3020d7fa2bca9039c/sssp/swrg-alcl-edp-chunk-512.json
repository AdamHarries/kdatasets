{
  "name" : "swrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77947, const global float* restrict v__77948, const global float* restrict v__77949, const global float* restrict v__77950, float v__77951, float v__77952, global float* v__77967, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77954; \n  float v__77957; \n  /* Private Memory */\n  float v__77959_0;\n  \n  float v__77961_0;\n  \n  int v__77965_0;\n  \n  for (int v_wg_id_77943 = get_group_id(0); v_wg_id_77943 < v_MHeight_2; v_wg_id_77943 = (v_wg_id_77943 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6446; \n      v_work_idx_6446 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_77944 = atomic_inc(&(v_work_idx_6446)); \n      while((v_l_id_77944 < 512)){\n        float v_tmp_78012 = 3.4028235E38f; \n        v__77954 = v_tmp_78012; \n        /* reduce_while_seq */\n        for (int v_i_77945 = 0; v_i_77945 < v_MWidthC_1; v_i_77945 = (1 + v_i_77945)) {\n          v__77965_0 = check(v__77954, v__77947[(v_i_77945 + (512 * v_MWidthC_1 * v_wg_id_77943) + (v_MWidthC_1 * v_l_id_77944))]); \n          if (v__77965_0) {\n          } else {\n            break;\n          }\n          float v_tmp_78013 = 3.4028235E38f; \n          v__77957 = v_tmp_78013; \n          int v_index_78014 = v__77947[(v_i_77945 + (512 * v_MWidthC_1 * v_wg_id_77943) + (v_MWidthC_1 * v_l_id_77944))]; \n          if (v_index_78014 < 0) {\n            v__77959_0 = v__77957; \n          } else {\n            if (v_index_78014 >= v_VLength_3) {\n              v__77959_0 = v__77957; \n            } else {\n              v__77959_0 = v__77949[v_index_78014]; \n            }\n          }\n          v__77961_0 = absadd(v__77959_0, v__77948[(v_i_77945 + (512 * v_MWidthC_1 * v_wg_id_77943) + (v_MWidthC_1 * v_l_id_77944))]); \n          v__77954 = clmin(v__77961_0, v__77954); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77946 = 0; \n          v__77967[(v_l_id_77944 + (512 * v_wg_id_77943))] = doubleMultiplyAdd(v__77954, v__77951, v__77950[(v_l_id_77944 + (512 * v_wg_id_77943))], v__77952); \n        }\n        /* end map_seq */\n        v_l_id_77944 = atomic_inc(&(v_work_idx_6446)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__77947",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77948",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77949",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77950",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  }, {
    "variable" : "v__77951",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77952",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__77967",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}