{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__71849, const global float* restrict v__71850, const global float* restrict v__71851, const global float* restrict v__71852, float v__71853, float v__71854, global float* v__71873, local float* v__71868, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71857; \n  float v__71859; \n  float v__57186; \n  /* Private Memory */\n  float v__71861_0;\n  \n  float v__71863_0;\n  \n  int v__71867_0;\n  \n  for (int v_wg_id_71842 = get_group_id(0); v_wg_id_71842 < v_MHeight_2; v_wg_id_71842 = (v_wg_id_71842 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5881; \n      v_work_idx_5881 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71843 = atomic_inc(&(v_work_idx_5881)); \n      while((v_l_id_71843 < v_MWidthC_1)){\n        float v_tmp_71929 = 3.4028235E38f; \n        v__71857 = v_tmp_71929; \n        /* reduce_while_seq */\n        for (int v_i_71844 = 0; v_i_71844 < 128; v_i_71844 = (1 + v_i_71844)) {\n          v__71867_0 = check(v__71857, v__71849[(v_l_id_71843 + (128 * v_MWidthC_1 * v_wg_id_71842) + (v_MWidthC_1 * v_i_71844))]); \n          if (v__71867_0) {\n          } else {\n            break;\n          }\n          float v_tmp_71930 = 3.4028235E38f; \n          v__71859 = v_tmp_71930; \n          int v_index_71931 = v__71849[(v_l_id_71843 + (128 * v_MWidthC_1 * v_wg_id_71842) + (v_MWidthC_1 * v_i_71844))]; \n          if (v_index_71931 < 0) {\n            v__71861_0 = v__71859; \n          } else {\n            if (v_index_71931 >= v_VLength_3) {\n              v__71861_0 = v__71859; \n            } else {\n              v__71861_0 = v__71851[v_index_71931]; \n            }\n          }\n          v__71863_0 = absadd(v__71861_0, v__71850[(v_l_id_71843 + (128 * v_MWidthC_1 * v_wg_id_71842) + (v_MWidthC_1 * v_i_71844))]); \n          v__71857 = clmin(v__71863_0, v__71857); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71845 = 0; \n          v__71868[v_l_id_71843] = id(v__71857); \n        }\n        /* end map_seq */\n        v_l_id_71843 = atomic_inc(&(v_work_idx_5881)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5876; \n      v_work_idx_5876 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71846 = atomic_inc(&(v_work_idx_5876)); \n      while((v_l_id_71846 < 1)){\n        float v_tmp_71934 = 3.4028235E38f; \n        v__57186 = v_tmp_71934; \n        /* reduce_seq */\n        for (int v_i_71847 = 0; v_i_71847 < v_MWidthC_1; v_i_71847 = (1 + v_i_71847)) {\n          v__57186 = clmin(v__57186, v__71868[(v_i_71847 + (v_MWidthC_1 * v_l_id_71846))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71848 = 0; \n          v__71873[v_wg_id_71842] = doubleMultiplyAdd(v__57186, v__71853, v__71852[v_wg_id_71842], v__71854); \n        }\n        /* end map_seq */\n        v_l_id_71846 = atomic_inc(&(v_work_idx_5876)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__71849",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71850",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71851",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71852",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71853",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71854",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71873",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71868",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}