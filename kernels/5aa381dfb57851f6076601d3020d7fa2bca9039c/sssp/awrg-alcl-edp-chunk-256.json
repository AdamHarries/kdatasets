{
  "name" : "awrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76278, const global float* restrict v__76279, const global float* restrict v__76280, const global float* restrict v__76281, float v__76282, float v__76283, global float* v__76299, global int* v__76285, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76286; \n  float v__76289; \n  /* Private Memory */\n  float v__76291_0;\n  \n  float v__76293_0;\n  \n  int v__76297_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6294 = v__76285; \n    local int v_w_id_76274; \n    if (get_local_id(0) == 0) {\n      v_w_id_76274 = atomic_inc(v_work_idx_6294); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76274 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6292; \n        v_work_idx_6292 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76275 = atomic_inc(&(v_work_idx_6292)); \n        while((v_l_id_76275 < 256)){\n          float v_tmp_76342 = 3.4028235E38f; \n          v__76286 = v_tmp_76342; \n          /* reduce_while_seq */\n          for (int v_i_76276 = 0; v_i_76276 < v_MWidthC_1; v_i_76276 = (1 + v_i_76276)) {\n            v__76297_0 = check(v__76286, v__76278[(v_i_76276 + (256 * v_MWidthC_1 * v_w_id_76274) + (v_MWidthC_1 * v_l_id_76275))]); \n            if (v__76297_0) {\n            } else {\n              break;\n            }\n            float v_tmp_76343 = 3.4028235E38f; \n            v__76289 = v_tmp_76343; \n            int v_index_76344 = v__76278[(v_i_76276 + (256 * v_MWidthC_1 * v_w_id_76274) + (v_MWidthC_1 * v_l_id_76275))]; \n            if (v_index_76344 < 0) {\n              v__76291_0 = v__76289; \n            } else {\n              if (v_index_76344 >= v_VLength_3) {\n                v__76291_0 = v__76289; \n              } else {\n                v__76291_0 = v__76280[v_index_76344]; \n              }\n            }\n            v__76293_0 = absadd(v__76291_0, v__76279[(v_i_76276 + (256 * v_MWidthC_1 * v_w_id_76274) + (v_MWidthC_1 * v_l_id_76275))]); \n            v__76286 = clmin(v__76293_0, v__76286); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76277 = 0; \n            v__76299[(v_l_id_76275 + (256 * v_w_id_76274))] = doubleMultiplyAdd(v__76286, v__76282, v__76281[(v_l_id_76275 + (256 * v_w_id_76274))], v__76283); \n          }\n          /* end map_seq */\n          v_l_id_76275 = atomic_inc(&(v_work_idx_6292)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76274 = atomic_inc(v_work_idx_6294); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76278",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76279",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76280",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76281",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__76282",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76283",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76285",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76299",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}