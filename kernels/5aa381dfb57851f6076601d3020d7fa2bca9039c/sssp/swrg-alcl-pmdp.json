{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56809, const global float* restrict v__56810, const global float* restrict v__56811, const global float* restrict v__56812, float v__56813, float v__56814, global float* v__56827, global float* v__56821, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__56817; \n  float v__56822; \n  /* Private Memory */\n  float v__56819_0;\n  \n  for (int v_wg_id_56805 = get_group_id(0); v_wg_id_56805 < v_MHeight_2; v_wg_id_56805 = (v_wg_id_56805 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_4478; \n      v_l_id_4478 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_56806 = atomic_inc(&(v_l_id_4478)); \n      while((v_l_id_56806 < v_MWidthC_1)){\n        float v_tmp_56858 = 3.4028235E38f; \n        v__56817 = v_tmp_56858; \n        int v_index_56859 = v__56809[(v_l_id_56806 + (v_MWidthC_1 * v_wg_id_56805))]; \n        if (v_index_56859 < 0) {\n          v__56819_0 = v__56817; \n        } else {\n          if (v_index_56859 >= v_VLength_3) {\n            v__56819_0 = v__56817; \n          } else {\n            v__56819_0 = v__56811[v_index_56859]; \n          }\n        }\n        v__56821[(v_l_id_56806 + (v_MWidthC_1 * v_wg_id_56805))] = absadd(v__56819_0, v__56810[(v_l_id_56806 + (v_MWidthC_1 * v_wg_id_56805))]); \n        v_l_id_56806 = atomic_inc(&(v_l_id_4478)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_56860 = 3.4028235E38f; \n    v__56822 = v_tmp_56860; \n    /* reduce_seq */\n    for (int v_i_56807 = 0; v_i_56807 < v_MWidthC_1; v_i_56807 = (1 + v_i_56807)) {\n      v__56822 = clmin(v__56822, v__56821[(v_i_56807 + (v_MWidthC_1 * v_wg_id_56805))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_56808 = 0; \n      v__56827[v_wg_id_56805] = doubleMultiplyAdd(v__56822, v__56813, v__56812[v_wg_id_56805], v__56814); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__56809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56811",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56812",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56813",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56814",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56821",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__56827",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}