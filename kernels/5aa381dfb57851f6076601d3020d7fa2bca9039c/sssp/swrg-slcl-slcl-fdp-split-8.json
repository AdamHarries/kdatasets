{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57275, const global float* restrict v__57276, const global float* restrict v__57277, const global float* restrict v__57278, float v__57279, float v__57280, global float* v__57297, local float* v__57292, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57283; \n  float v__57285; \n  float v__57186; \n  /* Private Memory */\n  float v__57287_0;\n  \n  float v__57289_0;\n  \n  for (int v_wg_id_57268 = get_group_id(0); v_wg_id_57268 < v_MHeight_2; v_wg_id_57268 = (v_wg_id_57268 + get_num_groups(0))) {\n    for (int v_l_id_57269 = get_local_id(0); v_l_id_57269 < v_MWidthC_1; v_l_id_57269 = (v_l_id_57269 + get_local_size(0))) {\n      float v_tmp_57362 = 3.4028235E38f; \n      v__57283 = v_tmp_57362; \n      /* reduce_seq */\n      for (int v_i_57270 = 0; v_i_57270 < 8; v_i_57270 = (1 + v_i_57270)) {\n        float v_tmp_57363 = 3.4028235E38f; \n        v__57285 = v_tmp_57363; \n        int v_index_57364 = v__57275[(v_l_id_57269 + (8 * v_MWidthC_1 * v_wg_id_57268) + (v_MWidthC_1 * v_i_57270))]; \n        if (v_index_57364 < 0) {\n          v__57287_0 = v__57285; \n        } else {\n          if (v_index_57364 >= v_VLength_3) {\n            v__57287_0 = v__57285; \n          } else {\n            v__57287_0 = v__57277[v_index_57364]; \n          }\n        }\n        v__57289_0 = absadd(v__57287_0, v__57276[(v_l_id_57269 + (8 * v_MWidthC_1 * v_wg_id_57268) + (v_MWidthC_1 * v_i_57270))]); \n        v__57283 = clmin(v__57289_0, v__57283); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57271 = 0; \n        v__57292[v_l_id_57269] = id(v__57283); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_57272 = get_local_id(0); \n      float v_tmp_57367 = 3.4028235E38f; \n      v__57186 = v_tmp_57367; \n      /* reduce_seq */\n      for (int v_i_57273 = 0; v_i_57273 < v_MWidthC_1; v_i_57273 = (1 + v_i_57273)) {\n        v__57186 = clmin(v__57186, v__57292[(v_i_57273 + (v_MWidthC_1 * v_l_id_57272))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57274 = 0; \n        v__57297[v_wg_id_57268] = doubleMultiplyAdd(v__57186, v__57279, v__57278[v_wg_id_57268], v__57280); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__57275",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57276",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57277",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57279",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57280",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__57297",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__57292",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}