{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66454, const global float* restrict v__66455, const global float* restrict v__66456, const global float* restrict v__66457, float v__66458, float v__66459, global float* v__66477, global int* v__66461, local float* v__66472, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66463; \n  float v__66465; \n  float v__57186; \n  /* Private Memory */\n  float v__66467_0;\n  \n  float v__66469_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5379 = v__66461; \n    local int v_w_id_66447; \n    if (get_local_id(0) == 0) {\n      v_w_id_66447 = atomic_inc(v_work_idx_5379); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66447 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5377; \n        v_work_idx_5377 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66448 = atomic_inc(&(v_work_idx_5377)); \n        while((v_l_id_66448 < v_MWidthC_1)){\n          float v_tmp_66532 = 3.4028235E38f; \n          v__66463 = v_tmp_66532; \n          /* reduce_seq */\n          for (int v_i_66449 = 0; v_i_66449 < 32; v_i_66449 = (1 + v_i_66449)) {\n            float v_tmp_66533 = 3.4028235E38f; \n            v__66465 = v_tmp_66533; \n            int v_index_66534 = v__66454[(v_l_id_66448 + (32 * v_MWidthC_1 * v_w_id_66447) + (v_MWidthC_1 * v_i_66449))]; \n            if (v_index_66534 < 0) {\n              v__66467_0 = v__66465; \n            } else {\n              if (v_index_66534 >= v_VLength_3) {\n                v__66467_0 = v__66465; \n              } else {\n                v__66467_0 = v__66456[v_index_66534]; \n              }\n            }\n            v__66469_0 = absadd(v__66467_0, v__66455[(v_l_id_66448 + (32 * v_MWidthC_1 * v_w_id_66447) + (v_MWidthC_1 * v_i_66449))]); \n            v__66463 = clmin(v__66469_0, v__66463); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66450 = 0; \n            v__66472[v_l_id_66448] = id(v__66463); \n          }\n          /* end map_seq */\n          v_l_id_66448 = atomic_inc(&(v_work_idx_5377)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66451 = get_local_id(0); \n        float v_tmp_66537 = 3.4028235E38f; \n        v__57186 = v_tmp_66537; \n        /* reduce_seq */\n        for (int v_i_66452 = 0; v_i_66452 < v_MWidthC_1; v_i_66452 = (1 + v_i_66452)) {\n          v__57186 = clmin(v__57186, v__66472[(v_i_66452 + (v_MWidthC_1 * v_l_id_66451))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66453 = 0; \n          v__66477[v_w_id_66447] = doubleMultiplyAdd(v__57186, v__66458, v__66457[v_w_id_66447], v__66459); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66447 = atomic_inc(v_work_idx_5379); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66454",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66455",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66456",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66457",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66458",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66459",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66461",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66477",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66472",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}