{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__76035, const global float* restrict v__76036, const global float* restrict v__76037, const global float* restrict v__76038, float v__76039, float v__76040, global float* v__76060, global int* v__76042, local float* v__76055, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76044; \n  float v__76046; \n  float v__57186; \n  /* Private Memory */\n  float v__76048_0;\n  \n  float v__76050_0;\n  \n  int v__76054_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6272 = v__76042; \n    local int v_w_id_76028; \n    if (get_local_id(0) == 0) {\n      v_w_id_76028 = atomic_inc(v_work_idx_6272); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76028 < v_MHeight_2)){\n      for (int v_l_id_76029 = get_local_id(0); v_l_id_76029 < v_MWidthC_1; v_l_id_76029 = (v_l_id_76029 + get_local_size(0))) {\n        float v_tmp_76122 = 3.4028235E38f; \n        v__76044 = v_tmp_76122; \n        /* reduce_while_seq */\n        for (int v_i_76030 = 0; v_i_76030 < 256; v_i_76030 = (1 + v_i_76030)) {\n          v__76054_0 = check(v__76044, v__76035[(v_l_id_76029 + (256 * v_MWidthC_1 * v_w_id_76028) + (v_MWidthC_1 * v_i_76030))]); \n          if (v__76054_0) {\n          } else {\n            break;\n          }\n          float v_tmp_76123 = 3.4028235E38f; \n          v__76046 = v_tmp_76123; \n          int v_index_76124 = v__76035[(v_l_id_76029 + (256 * v_MWidthC_1 * v_w_id_76028) + (v_MWidthC_1 * v_i_76030))]; \n          if (v_index_76124 < 0) {\n            v__76048_0 = v__76046; \n          } else {\n            if (v_index_76124 >= v_VLength_3) {\n              v__76048_0 = v__76046; \n            } else {\n              v__76048_0 = v__76037[v_index_76124]; \n            }\n          }\n          v__76050_0 = absadd(v__76048_0, v__76036[(v_l_id_76029 + (256 * v_MWidthC_1 * v_w_id_76028) + (v_MWidthC_1 * v_i_76030))]); \n          v__76044 = clmin(v__76050_0, v__76044); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76031 = 0; \n          v__76055[v_l_id_76029] = id(v__76044); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6266; \n        v_work_idx_6266 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76032 = atomic_inc(&(v_work_idx_6266)); \n        while((v_l_id_76032 < 1)){\n          float v_tmp_76127 = 3.4028235E38f; \n          v__57186 = v_tmp_76127; \n          /* reduce_seq */\n          for (int v_i_76033 = 0; v_i_76033 < v_MWidthC_1; v_i_76033 = (1 + v_i_76033)) {\n            v__57186 = clmin(v__57186, v__76055[(v_i_76033 + (v_MWidthC_1 * v_l_id_76032))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76034 = 0; \n            v__76060[v_w_id_76028] = doubleMultiplyAdd(v__57186, v__76039, v__76038[v_w_id_76028], v__76040); \n          }\n          /* end map_seq */\n          v_l_id_76032 = atomic_inc(&(v_work_idx_6266)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76028 = atomic_inc(v_work_idx_6272); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76035",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76036",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76037",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76038",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76039",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76040",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76042",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76055",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}