{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66747, const global float* restrict v__66748, const global float* restrict v__66749, const global float* restrict v__66750, float v__66751, float v__66752, global float* v__66770, global int* v__66754, local float* v__66765, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66756; \n  float v__66758; \n  float v__57186; \n  /* Private Memory */\n  float v__66760_0;\n  \n  float v__66762_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5412 = v__66754; \n    local int v_w_id_66740; \n    if (get_local_id(0) == 0) {\n      v_w_id_66740 = atomic_inc(v_work_idx_5412); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66740 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5410; \n        v_work_idx_5410 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66741 = atomic_inc(&(v_work_idx_5410)); \n        while((v_l_id_66741 < v_MWidthC_1)){\n          float v_tmp_66821 = 3.4028235E38f; \n          v__66756 = v_tmp_66821; \n          /* reduce_seq */\n          for (int v_i_66742 = 0; v_i_66742 < 32; v_i_66742 = (1 + v_i_66742)) {\n            float v_tmp_66822 = 3.4028235E38f; \n            v__66758 = v_tmp_66822; \n            int v_index_66823 = v__66747[(v_l_id_66741 + (32 * v_MWidthC_1 * v_w_id_66740) + (v_MWidthC_1 * v_i_66742))]; \n            if (v_index_66823 < 0) {\n              v__66760_0 = v__66758; \n            } else {\n              if (v_index_66823 >= v_VLength_3) {\n                v__66760_0 = v__66758; \n              } else {\n                v__66760_0 = v__66749[v_index_66823]; \n              }\n            }\n            v__66762_0 = absadd(v__66760_0, v__66748[(v_l_id_66741 + (32 * v_MWidthC_1 * v_w_id_66740) + (v_MWidthC_1 * v_i_66742))]); \n            v__66756 = clmin(v__66762_0, v__66756); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66743 = 0; \n            v__66765[v_l_id_66741] = id(v__66756); \n          }\n          /* end map_seq */\n          v_l_id_66741 = atomic_inc(&(v_work_idx_5410)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5405; \n        v_work_idx_5405 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66744 = atomic_inc(&(v_work_idx_5405)); \n        while((v_l_id_66744 < 1)){\n          float v_tmp_66826 = 3.4028235E38f; \n          v__57186 = v_tmp_66826; \n          /* reduce_seq */\n          for (int v_i_66745 = 0; v_i_66745 < v_MWidthC_1; v_i_66745 = (1 + v_i_66745)) {\n            v__57186 = clmin(v__57186, v__66765[(v_i_66745 + (v_MWidthC_1 * v_l_id_66744))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66746 = 0; \n            v__66770[v_w_id_66740] = doubleMultiplyAdd(v__57186, v__66751, v__66750[v_w_id_66740], v__66752); \n          }\n          /* end map_seq */\n          v_l_id_66744 = atomic_inc(&(v_work_idx_5405)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66740 = atomic_inc(v_work_idx_5412); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66747",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66748",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66749",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66750",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66751",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66752",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66754",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66770",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66765",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}