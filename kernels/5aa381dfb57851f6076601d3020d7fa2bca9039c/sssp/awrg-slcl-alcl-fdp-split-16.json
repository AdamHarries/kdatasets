{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62598, const global float* restrict v__62599, const global float* restrict v__62600, const global float* restrict v__62601, float v__62602, float v__62603, global float* v__62621, global int* v__62605, local float* v__62616, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62607; \n  float v__62609; \n  float v__57186; \n  /* Private Memory */\n  float v__62611_0;\n  \n  float v__62613_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5014 = v__62605; \n    local int v_w_id_62591; \n    if (get_local_id(0) == 0) {\n      v_w_id_62591 = atomic_inc(v_work_idx_5014); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62591 < v_MHeight_2)){\n      for (int v_l_id_62592 = get_local_id(0); v_l_id_62592 < v_MWidthC_1; v_l_id_62592 = (v_l_id_62592 + get_local_size(0))) {\n        float v_tmp_62680 = 3.4028235E38f; \n        v__62607 = v_tmp_62680; \n        /* reduce_seq */\n        for (int v_i_62593 = 0; v_i_62593 < 16; v_i_62593 = (1 + v_i_62593)) {\n          float v_tmp_62681 = 3.4028235E38f; \n          v__62609 = v_tmp_62681; \n          int v_index_62682 = v__62598[(v_l_id_62592 + (16 * v_MWidthC_1 * v_w_id_62591) + (v_MWidthC_1 * v_i_62593))]; \n          if (v_index_62682 < 0) {\n            v__62611_0 = v__62609; \n          } else {\n            if (v_index_62682 >= v_VLength_3) {\n              v__62611_0 = v__62609; \n            } else {\n              v__62611_0 = v__62600[v_index_62682]; \n            }\n          }\n          v__62613_0 = absadd(v__62611_0, v__62599[(v_l_id_62592 + (16 * v_MWidthC_1 * v_w_id_62591) + (v_MWidthC_1 * v_i_62593))]); \n          v__62607 = clmin(v__62613_0, v__62607); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62594 = 0; \n          v__62616[v_l_id_62592] = id(v__62607); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5008; \n        v_work_idx_5008 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_62595 = atomic_inc(&(v_work_idx_5008)); \n        while((v_l_id_62595 < 1)){\n          float v_tmp_62685 = 3.4028235E38f; \n          v__57186 = v_tmp_62685; \n          /* reduce_seq */\n          for (int v_i_62596 = 0; v_i_62596 < v_MWidthC_1; v_i_62596 = (1 + v_i_62596)) {\n            v__57186 = clmin(v__57186, v__62616[(v_i_62596 + (v_MWidthC_1 * v_l_id_62595))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62597 = 0; \n            v__62621[v_w_id_62591] = doubleMultiplyAdd(v__57186, v__62602, v__62601[v_w_id_62591], v__62603); \n          }\n          /* end map_seq */\n          v_l_id_62595 = atomic_inc(&(v_work_idx_5008)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62591 = atomic_inc(v_work_idx_5014); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62598",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62599",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62600",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62602",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62603",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62605",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62621",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62616",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}