{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76209, const global float* restrict v__76210, const global float* restrict v__76211, const global float* restrict v__76212, float v__76213, float v__76214, global float* v__76228, global int* v__76216, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76218; \n  float v__76220; \n  /* Private Memory */\n  float v__76222_0;\n  \n  float v__76224_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6287 = v__76216; \n    local int v_w_id_76205; \n    if (get_local_id(0) == 0) {\n      v_w_id_76205 = atomic_inc(v_work_idx_6287); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76205 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6285; \n        v_work_idx_6285 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76206 = atomic_inc(&(v_work_idx_6285)); \n        while((v_l_id_76206 < 256)){\n          float v_tmp_76265 = 3.4028235E38f; \n          v__76218 = v_tmp_76265; \n          /* reduce_seq */\n          for (int v_i_76207 = 0; v_i_76207 < v_MWidthC_1; v_i_76207 = (1 + v_i_76207)) {\n            float v_tmp_76266 = 3.4028235E38f; \n            v__76220 = v_tmp_76266; \n            int v_index_76267 = v__76209[(v_i_76207 + (256 * v_MWidthC_1 * v_w_id_76205) + (v_MWidthC_1 * v_l_id_76206))]; \n            if (v_index_76267 < 0) {\n              v__76222_0 = v__76220; \n            } else {\n              if (v_index_76267 >= v_VLength_3) {\n                v__76222_0 = v__76220; \n              } else {\n                v__76222_0 = v__76211[v_index_76267]; \n              }\n            }\n            v__76224_0 = absadd(v__76222_0, v__76210[(v_i_76207 + (256 * v_MWidthC_1 * v_w_id_76205) + (v_MWidthC_1 * v_l_id_76206))]); \n            v__76218 = clmin(v__76224_0, v__76218); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76208 = 0; \n            v__76228[(v_l_id_76206 + (256 * v_w_id_76205))] = doubleMultiplyAdd(v__76218, v__76213, v__76212[(v_l_id_76206 + (256 * v_w_id_76205))], v__76214); \n          }\n          /* end map_seq */\n          v_l_id_76206 = atomic_inc(&(v_work_idx_6285)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76205 = atomic_inc(v_work_idx_6287); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76209",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76210",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76212",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  }, {
    "variable" : "v__76213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76216",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76228",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}