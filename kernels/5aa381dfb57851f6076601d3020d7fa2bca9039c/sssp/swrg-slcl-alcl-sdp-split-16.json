{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60827, const global float* restrict v__60828, const global float* restrict v__60829, const global float* restrict v__60830, float v__60831, float v__60832, global float* v__60849, global float* v__60839, local float* v__60844, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60835; \n  float v__60840; \n  float v__57186; \n  /* Private Memory */\n  float v__60837_0;\n  \n  for (int v_wg_id_60819 = get_group_id(0); v_wg_id_60819 < v_MHeight_2; v_wg_id_60819 = (v_wg_id_60819 + get_num_groups(0))) {\n    for (int v_l_id_60820 = get_local_id(0); v_l_id_60820 < v_MWidthC_1; v_l_id_60820 = (v_l_id_60820 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_60821 = 0; v_i_60821 < 16; v_i_60821 = (1 + v_i_60821)) {\n        float v_tmp_60910 = 3.4028235E38f; \n        v__60835 = v_tmp_60910; \n        int v_index_60911 = v__60827[(v_l_id_60820 + (16 * v_MWidthC_1 * v_wg_id_60819) + (v_MWidthC_1 * v_i_60821))]; \n        if (v_index_60911 < 0) {\n          v__60837_0 = v__60835; \n        } else {\n          if (v_index_60911 >= v_VLength_3) {\n            v__60837_0 = v__60835; \n          } else {\n            v__60837_0 = v__60829[v_index_60911]; \n          }\n        }\n        v__60839[(v_i_60821 + (16 * v_MWidthC_1 * v_wg_id_60819) + (16 * v_l_id_60820))] = absadd(v__60837_0, v__60828[(v_l_id_60820 + (16 * v_MWidthC_1 * v_wg_id_60819) + (v_MWidthC_1 * v_i_60821))]); \n      }\n      /* end map_seq */\n      float v_tmp_60912 = 3.4028235E38f; \n      v__60840 = v_tmp_60912; \n      /* reduce_seq */\n      for (int v_i_60822 = 0; v_i_60822 < 16; v_i_60822 = (1 + v_i_60822)) {\n        v__60840 = clmin(v__60840, v__60839[(v_i_60822 + (16 * v_MWidthC_1 * v_wg_id_60819) + (16 * v_l_id_60820))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60823 = 0; \n        v__60844[v_l_id_60820] = id(v__60840); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4844; \n      v_work_idx_4844 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_60824 = atomic_inc(&(v_work_idx_4844)); \n      while((v_l_id_60824 < 1)){\n        float v_tmp_60915 = 3.4028235E38f; \n        v__57186 = v_tmp_60915; \n        /* reduce_seq */\n        for (int v_i_60825 = 0; v_i_60825 < v_MWidthC_1; v_i_60825 = (1 + v_i_60825)) {\n          v__57186 = clmin(v__57186, v__60844[(v_i_60825 + (v_MWidthC_1 * v_l_id_60824))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60826 = 0; \n          v__60849[v_wg_id_60819] = doubleMultiplyAdd(v__57186, v__60831, v__60830[v_wg_id_60819], v__60832); \n        }\n        /* end map_seq */\n        v_l_id_60824 = atomic_inc(&(v_work_idx_4844)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__60827",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60828",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60829",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60831",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60832",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60839",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__60849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60844",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}