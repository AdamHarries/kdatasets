{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66654, const global float* restrict v__66655, const global float* restrict v__66656, const global float* restrict v__66657, float v__66658, float v__66659, global float* v__66677, global int* v__66661, global float* v__66667, local float* v__66672, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66663; \n  float v__66668; \n  float v__57186; \n  /* Private Memory */\n  float v__66665_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5401 = v__66661; \n    local int v_w_id_66646; \n    if (get_local_id(0) == 0) {\n      v_w_id_66646 = atomic_inc(v_work_idx_5401); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66646 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5399; \n        v_work_idx_5399 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66647 = atomic_inc(&(v_work_idx_5399)); \n        while((v_l_id_66647 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66648 = 0; v_i_66648 < 32; v_i_66648 = (1 + v_i_66648)) {\n            float v_tmp_66728 = 3.4028235E38f; \n            v__66663 = v_tmp_66728; \n            int v_index_66729 = v__66654[(v_l_id_66647 + (32 * v_MWidthC_1 * v_w_id_66646) + (v_MWidthC_1 * v_i_66648))]; \n            if (v_index_66729 < 0) {\n              v__66665_0 = v__66663; \n            } else {\n              if (v_index_66729 >= v_VLength_3) {\n                v__66665_0 = v__66663; \n              } else {\n                v__66665_0 = v__66656[v_index_66729]; \n              }\n            }\n            v__66667[(v_i_66648 + (32 * v_MWidthC_1 * v_w_id_66646) + (32 * v_l_id_66647))] = absadd(v__66665_0, v__66655[(v_l_id_66647 + (32 * v_MWidthC_1 * v_w_id_66646) + (v_MWidthC_1 * v_i_66648))]); \n          }\n          /* end map_seq */\n          float v_tmp_66730 = 3.4028235E38f; \n          v__66668 = v_tmp_66730; \n          /* reduce_seq */\n          for (int v_i_66649 = 0; v_i_66649 < 32; v_i_66649 = (1 + v_i_66649)) {\n            v__66668 = clmin(v__66668, v__66667[(v_i_66649 + (32 * v_MWidthC_1 * v_w_id_66646) + (32 * v_l_id_66647))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66650 = 0; \n            v__66672[v_l_id_66647] = id(v__66668); \n          }\n          /* end map_seq */\n          v_l_id_66647 = atomic_inc(&(v_work_idx_5399)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5393; \n        v_work_idx_5393 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66651 = atomic_inc(&(v_work_idx_5393)); \n        while((v_l_id_66651 < 1)){\n          float v_tmp_66733 = 3.4028235E38f; \n          v__57186 = v_tmp_66733; \n          /* reduce_seq */\n          for (int v_i_66652 = 0; v_i_66652 < v_MWidthC_1; v_i_66652 = (1 + v_i_66652)) {\n            v__57186 = clmin(v__57186, v__66672[(v_i_66652 + (v_MWidthC_1 * v_l_id_66651))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66653 = 0; \n            v__66677[v_w_id_66646] = doubleMultiplyAdd(v__57186, v__66658, v__66657[v_w_id_66646], v__66659); \n          }\n          /* end map_seq */\n          v_l_id_66651 = atomic_inc(&(v_work_idx_5393)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66646 = atomic_inc(v_work_idx_5401); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66654",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66655",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66656",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66657",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66658",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66659",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66661",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__66667",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__66677",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66672",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}