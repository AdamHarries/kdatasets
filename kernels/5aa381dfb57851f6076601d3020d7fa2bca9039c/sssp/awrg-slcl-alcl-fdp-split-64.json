{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69266, const global float* restrict v__69267, const global float* restrict v__69268, const global float* restrict v__69269, float v__69270, float v__69271, global float* v__69289, global int* v__69273, local float* v__69284, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69275; \n  float v__69277; \n  float v__57186; \n  /* Private Memory */\n  float v__69279_0;\n  \n  float v__69281_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5638 = v__69273; \n    local int v_w_id_69259; \n    if (get_local_id(0) == 0) {\n      v_w_id_69259 = atomic_inc(v_work_idx_5638); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69259 < v_MHeight_2)){\n      for (int v_l_id_69260 = get_local_id(0); v_l_id_69260 < v_MWidthC_1; v_l_id_69260 = (v_l_id_69260 + get_local_size(0))) {\n        float v_tmp_69348 = 3.4028235E38f; \n        v__69275 = v_tmp_69348; \n        /* reduce_seq */\n        for (int v_i_69261 = 0; v_i_69261 < 64; v_i_69261 = (1 + v_i_69261)) {\n          float v_tmp_69349 = 3.4028235E38f; \n          v__69277 = v_tmp_69349; \n          int v_index_69350 = v__69266[(v_l_id_69260 + (64 * v_MWidthC_1 * v_w_id_69259) + (v_MWidthC_1 * v_i_69261))]; \n          if (v_index_69350 < 0) {\n            v__69279_0 = v__69277; \n          } else {\n            if (v_index_69350 >= v_VLength_3) {\n              v__69279_0 = v__69277; \n            } else {\n              v__69279_0 = v__69268[v_index_69350]; \n            }\n          }\n          v__69281_0 = absadd(v__69279_0, v__69267[(v_l_id_69260 + (64 * v_MWidthC_1 * v_w_id_69259) + (v_MWidthC_1 * v_i_69261))]); \n          v__69275 = clmin(v__69281_0, v__69275); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69262 = 0; \n          v__69284[v_l_id_69260] = id(v__69275); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5632; \n        v_work_idx_5632 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_69263 = atomic_inc(&(v_work_idx_5632)); \n        while((v_l_id_69263 < 1)){\n          float v_tmp_69353 = 3.4028235E38f; \n          v__57186 = v_tmp_69353; \n          /* reduce_seq */\n          for (int v_i_69264 = 0; v_i_69264 < v_MWidthC_1; v_i_69264 = (1 + v_i_69264)) {\n            v__57186 = clmin(v__57186, v__69284[(v_i_69264 + (v_MWidthC_1 * v_l_id_69263))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69265 = 0; \n            v__69289[v_w_id_69259] = doubleMultiplyAdd(v__57186, v__69270, v__69269[v_w_id_69259], v__69271); \n          }\n          /* end map_seq */\n          v_l_id_69263 = atomic_inc(&(v_work_idx_5632)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69259 = atomic_inc(v_work_idx_5638); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69266",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69267",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69268",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69269",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69270",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69271",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69273",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69289",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69284",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}