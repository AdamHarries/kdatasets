{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62942, const global float* restrict v__62943, const global float* restrict v__62944, const global float* restrict v__62945, float v__62946, float v__62947, global float* v__62963, global int* v__62949, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62950; \n  float v__62953; \n  /* Private Memory */\n  float v__62955_0;\n  \n  float v__62957_0;\n  \n  int v__62961_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5046 = v__62949; \n    local int v_w_id_62938; \n    if (get_local_id(0) == 0) {\n      v_w_id_62938 = atomic_inc(v_work_idx_5046); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62938 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5044; \n        v_work_idx_5044 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_62939 = atomic_inc(&(v_work_idx_5044)); \n        while((v_l_id_62939 < 16)){\n          float v_tmp_63006 = 3.4028235E38f; \n          v__62950 = v_tmp_63006; \n          /* reduce_while_seq */\n          for (int v_i_62940 = 0; v_i_62940 < v_MWidthC_1; v_i_62940 = (1 + v_i_62940)) {\n            v__62961_0 = check(v__62950, v__62942[(v_i_62940 + (16 * v_MWidthC_1 * v_w_id_62938) + (v_MWidthC_1 * v_l_id_62939))]); \n            if (v__62961_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63007 = 3.4028235E38f; \n            v__62953 = v_tmp_63007; \n            int v_index_63008 = v__62942[(v_i_62940 + (16 * v_MWidthC_1 * v_w_id_62938) + (v_MWidthC_1 * v_l_id_62939))]; \n            if (v_index_63008 < 0) {\n              v__62955_0 = v__62953; \n            } else {\n              if (v_index_63008 >= v_VLength_3) {\n                v__62955_0 = v__62953; \n              } else {\n                v__62955_0 = v__62944[v_index_63008]; \n              }\n            }\n            v__62957_0 = absadd(v__62955_0, v__62943[(v_i_62940 + (16 * v_MWidthC_1 * v_w_id_62938) + (v_MWidthC_1 * v_l_id_62939))]); \n            v__62950 = clmin(v__62957_0, v__62950); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62941 = 0; \n            v__62963[(v_l_id_62939 + (16 * v_w_id_62938))] = doubleMultiplyAdd(v__62950, v__62946, v__62945[(v_l_id_62939 + (16 * v_w_id_62938))], v__62947); \n          }\n          /* end map_seq */\n          v_l_id_62939 = atomic_inc(&(v_work_idx_5044)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62938 = atomic_inc(v_work_idx_5046); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62942",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62943",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62944",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62945",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  }, {
    "variable" : "v__62946",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62947",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62949",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62963",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}