{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80083, const global float* restrict v__80084, const global float* restrict v__80085, const global float* restrict v__80086, float v__80087, float v__80088, global float* v__80106, global int* v__80090, local float* v__80101, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80092; \n  float v__80094; \n  float v__57186; \n  /* Private Memory */\n  float v__80096_0;\n  \n  float v__80098_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6660 = v__80090; \n    local int v_w_id_80076; \n    if (get_local_id(0) == 0) {\n      v_w_id_80076 = atomic_inc(v_work_idx_6660); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80076 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6658; \n        v_work_idx_6658 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_80077 = atomic_inc(&(v_work_idx_6658)); \n        while((v_l_id_80077 < v_MWidthC_1)){\n          float v_tmp_80157 = 3.4028235E38f; \n          v__80092 = v_tmp_80157; \n          /* reduce_seq */\n          for (int v_i_80078 = 0; v_i_80078 < 512; v_i_80078 = (1 + v_i_80078)) {\n            float v_tmp_80158 = 3.4028235E38f; \n            v__80094 = v_tmp_80158; \n            int v_index_80159 = v__80083[(v_l_id_80077 + (512 * v_MWidthC_1 * v_w_id_80076) + (v_MWidthC_1 * v_i_80078))]; \n            if (v_index_80159 < 0) {\n              v__80096_0 = v__80094; \n            } else {\n              if (v_index_80159 >= v_VLength_3) {\n                v__80096_0 = v__80094; \n              } else {\n                v__80096_0 = v__80085[v_index_80159]; \n              }\n            }\n            v__80098_0 = absadd(v__80096_0, v__80084[(v_l_id_80077 + (512 * v_MWidthC_1 * v_w_id_80076) + (v_MWidthC_1 * v_i_80078))]); \n            v__80092 = clmin(v__80098_0, v__80092); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80079 = 0; \n            v__80101[v_l_id_80077] = id(v__80092); \n          }\n          /* end map_seq */\n          v_l_id_80077 = atomic_inc(&(v_work_idx_6658)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6653; \n        v_work_idx_6653 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_80080 = atomic_inc(&(v_work_idx_6653)); \n        while((v_l_id_80080 < 1)){\n          float v_tmp_80162 = 3.4028235E38f; \n          v__57186 = v_tmp_80162; \n          /* reduce_seq */\n          for (int v_i_80081 = 0; v_i_80081 < v_MWidthC_1; v_i_80081 = (1 + v_i_80081)) {\n            v__57186 = clmin(v__57186, v__80101[(v_i_80081 + (v_MWidthC_1 * v_l_id_80080))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80082 = 0; \n            v__80106[v_w_id_80076] = doubleMultiplyAdd(v__57186, v__80087, v__80086[v_w_id_80076], v__80088); \n          }\n          /* end map_seq */\n          v_l_id_80080 = atomic_inc(&(v_work_idx_6653)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80076 = atomic_inc(v_work_idx_6660); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__80083",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80084",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80085",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80087",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80088",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80090",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80106",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80101",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}