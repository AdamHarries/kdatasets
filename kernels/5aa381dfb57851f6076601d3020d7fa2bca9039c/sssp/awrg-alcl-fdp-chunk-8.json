{
  "name" : "awrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59539, const global float* restrict v__59540, const global float* restrict v__59541, const global float* restrict v__59542, float v__59543, float v__59544, global float* v__59558, global int* v__59546, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59548; \n  float v__59550; \n  /* Private Memory */\n  float v__59552_0;\n  \n  float v__59554_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4727 = v__59546; \n    local int v_w_id_59535; \n    if (get_local_id(0) == 0) {\n      v_w_id_59535 = atomic_inc(v_work_idx_4727); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59535 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4725; \n        v_work_idx_4725 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_59536 = atomic_inc(&(v_work_idx_4725)); \n        while((v_l_id_59536 < 8)){\n          float v_tmp_59595 = 3.4028235E38f; \n          v__59548 = v_tmp_59595; \n          /* reduce_seq */\n          for (int v_i_59537 = 0; v_i_59537 < v_MWidthC_1; v_i_59537 = (1 + v_i_59537)) {\n            float v_tmp_59596 = 3.4028235E38f; \n            v__59550 = v_tmp_59596; \n            int v_index_59597 = v__59539[(v_i_59537 + (8 * v_MWidthC_1 * v_w_id_59535) + (v_MWidthC_1 * v_l_id_59536))]; \n            if (v_index_59597 < 0) {\n              v__59552_0 = v__59550; \n            } else {\n              if (v_index_59597 >= v_VLength_3) {\n                v__59552_0 = v__59550; \n              } else {\n                v__59552_0 = v__59541[v_index_59597]; \n              }\n            }\n            v__59554_0 = absadd(v__59552_0, v__59540[(v_i_59537 + (8 * v_MWidthC_1 * v_w_id_59535) + (v_MWidthC_1 * v_l_id_59536))]); \n            v__59548 = clmin(v__59554_0, v__59548); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59538 = 0; \n            v__59558[(v_l_id_59536 + (8 * v_w_id_59535))] = doubleMultiplyAdd(v__59548, v__59543, v__59542[(v_l_id_59536 + (8 * v_w_id_59535))], v__59544); \n          }\n          /* end map_seq */\n          v_l_id_59536 = atomic_inc(&(v_work_idx_4725)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59535 = atomic_inc(v_work_idx_4727); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__59539",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59540",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59541",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59542",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__59543",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59544",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59546",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59558",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}