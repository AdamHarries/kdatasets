{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__78517, const global float* restrict v__78518, const global float* restrict v__78519, const global float* restrict v__78520, float v__78521, float v__78522, global float* v__78541, local float* v__78536, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78525; \n  float v__78527; \n  float v__57186; \n  /* Private Memory */\n  float v__78529_0;\n  \n  float v__78531_0;\n  \n  int v__78535_0;\n  \n  for (int v_wg_id_78510 = get_group_id(0); v_wg_id_78510 < v_MHeight_2; v_wg_id_78510 = (v_wg_id_78510 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6505; \n      v_work_idx_6505 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78511 = atomic_inc(&(v_work_idx_6505)); \n      while((v_l_id_78511 < v_MWidthC_1)){\n        float v_tmp_78597 = 3.4028235E38f; \n        v__78525 = v_tmp_78597; \n        /* reduce_while_seq */\n        for (int v_i_78512 = 0; v_i_78512 < 512; v_i_78512 = (1 + v_i_78512)) {\n          v__78535_0 = check(v__78525, v__78517[(v_l_id_78511 + (512 * v_MWidthC_1 * v_wg_id_78510) + (v_MWidthC_1 * v_i_78512))]); \n          if (v__78535_0) {\n          } else {\n            break;\n          }\n          float v_tmp_78598 = 3.4028235E38f; \n          v__78527 = v_tmp_78598; \n          int v_index_78599 = v__78517[(v_l_id_78511 + (512 * v_MWidthC_1 * v_wg_id_78510) + (v_MWidthC_1 * v_i_78512))]; \n          if (v_index_78599 < 0) {\n            v__78529_0 = v__78527; \n          } else {\n            if (v_index_78599 >= v_VLength_3) {\n              v__78529_0 = v__78527; \n            } else {\n              v__78529_0 = v__78519[v_index_78599]; \n            }\n          }\n          v__78531_0 = absadd(v__78529_0, v__78518[(v_l_id_78511 + (512 * v_MWidthC_1 * v_wg_id_78510) + (v_MWidthC_1 * v_i_78512))]); \n          v__78525 = clmin(v__78531_0, v__78525); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78513 = 0; \n          v__78536[v_l_id_78511] = id(v__78525); \n        }\n        /* end map_seq */\n        v_l_id_78511 = atomic_inc(&(v_work_idx_6505)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6500; \n      v_work_idx_6500 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_78514 = atomic_inc(&(v_work_idx_6500)); \n      while((v_l_id_78514 < 1)){\n        float v_tmp_78602 = 3.4028235E38f; \n        v__57186 = v_tmp_78602; \n        /* reduce_seq */\n        for (int v_i_78515 = 0; v_i_78515 < v_MWidthC_1; v_i_78515 = (1 + v_i_78515)) {\n          v__57186 = clmin(v__57186, v__78536[(v_i_78515 + (v_MWidthC_1 * v_l_id_78514))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78516 = 0; \n          v__78541[v_wg_id_78510] = doubleMultiplyAdd(v__57186, v__78521, v__78520[v_wg_id_78510], v__78522); \n        }\n        /* end map_seq */\n        v_l_id_78514 = atomic_inc(&(v_work_idx_6500)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__78517",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78518",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78519",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78521",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78522",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78536",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}