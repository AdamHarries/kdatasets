{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73322, const global float* restrict v__73323, const global float* restrict v__73324, const global float* restrict v__73325, float v__73326, float v__73327, global float* v__73345, global int* v__73329, global float* v__73335, local float* v__73340, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73331; \n  float v__73336; \n  float v__57186; \n  /* Private Memory */\n  float v__73333_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6025 = v__73329; \n    local int v_w_id_73314; \n    if (get_local_id(0) == 0) {\n      v_w_id_73314 = atomic_inc(v_work_idx_6025); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73314 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6023; \n        v_work_idx_6023 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73315 = atomic_inc(&(v_work_idx_6023)); \n        while((v_l_id_73315 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_73316 = 0; v_i_73316 < 128; v_i_73316 = (1 + v_i_73316)) {\n            float v_tmp_73396 = 3.4028235E38f; \n            v__73331 = v_tmp_73396; \n            int v_index_73397 = v__73322[(v_l_id_73315 + (128 * v_MWidthC_1 * v_w_id_73314) + (v_MWidthC_1 * v_i_73316))]; \n            if (v_index_73397 < 0) {\n              v__73333_0 = v__73331; \n            } else {\n              if (v_index_73397 >= v_VLength_3) {\n                v__73333_0 = v__73331; \n              } else {\n                v__73333_0 = v__73324[v_index_73397]; \n              }\n            }\n            v__73335[(v_i_73316 + (128 * v_MWidthC_1 * v_w_id_73314) + (128 * v_l_id_73315))] = absadd(v__73333_0, v__73323[(v_l_id_73315 + (128 * v_MWidthC_1 * v_w_id_73314) + (v_MWidthC_1 * v_i_73316))]); \n          }\n          /* end map_seq */\n          float v_tmp_73398 = 3.4028235E38f; \n          v__73336 = v_tmp_73398; \n          /* reduce_seq */\n          for (int v_i_73317 = 0; v_i_73317 < 128; v_i_73317 = (1 + v_i_73317)) {\n            v__73336 = clmin(v__73336, v__73335[(v_i_73317 + (128 * v_MWidthC_1 * v_w_id_73314) + (128 * v_l_id_73315))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73318 = 0; \n            v__73340[v_l_id_73315] = id(v__73336); \n          }\n          /* end map_seq */\n          v_l_id_73315 = atomic_inc(&(v_work_idx_6023)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6017; \n        v_work_idx_6017 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_73319 = atomic_inc(&(v_work_idx_6017)); \n        while((v_l_id_73319 < 1)){\n          float v_tmp_73401 = 3.4028235E38f; \n          v__57186 = v_tmp_73401; \n          /* reduce_seq */\n          for (int v_i_73320 = 0; v_i_73320 < v_MWidthC_1; v_i_73320 = (1 + v_i_73320)) {\n            v__57186 = clmin(v__57186, v__73340[(v_i_73320 + (v_MWidthC_1 * v_l_id_73319))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73321 = 0; \n            v__73345[v_w_id_73314] = doubleMultiplyAdd(v__57186, v__73326, v__73325[v_w_id_73314], v__73327); \n          }\n          /* end map_seq */\n          v_l_id_73319 = atomic_inc(&(v_work_idx_6017)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73314 = atomic_inc(v_work_idx_6025); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73322",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73323",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73324",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73326",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73327",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73329",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__73335",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__73345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73340",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}