{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63413, const global float* restrict v__63414, const global float* restrict v__63415, const global float* restrict v__63416, float v__63417, float v__63418, global float* v__63436, global int* v__63420, local float* v__63431, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63422; \n  float v__63424; \n  float v__57186; \n  /* Private Memory */\n  float v__63426_0;\n  \n  float v__63428_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5100 = v__63420; \n    local int v_w_id_63406; \n    if (get_local_id(0) == 0) {\n      v_w_id_63406 = atomic_inc(v_work_idx_5100); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63406 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5098; \n        v_work_idx_5098 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_63407 = atomic_inc(&(v_work_idx_5098)); \n        while((v_l_id_63407 < v_MWidthC_1)){\n          float v_tmp_63487 = 3.4028235E38f; \n          v__63422 = v_tmp_63487; \n          /* reduce_seq */\n          for (int v_i_63408 = 0; v_i_63408 < 16; v_i_63408 = (1 + v_i_63408)) {\n            float v_tmp_63488 = 3.4028235E38f; \n            v__63424 = v_tmp_63488; \n            int v_index_63489 = v__63413[(v_l_id_63407 + (16 * v_MWidthC_1 * v_w_id_63406) + (v_MWidthC_1 * v_i_63408))]; \n            if (v_index_63489 < 0) {\n              v__63426_0 = v__63424; \n            } else {\n              if (v_index_63489 >= v_VLength_3) {\n                v__63426_0 = v__63424; \n              } else {\n                v__63426_0 = v__63415[v_index_63489]; \n              }\n            }\n            v__63428_0 = absadd(v__63426_0, v__63414[(v_l_id_63407 + (16 * v_MWidthC_1 * v_w_id_63406) + (v_MWidthC_1 * v_i_63408))]); \n            v__63422 = clmin(v__63428_0, v__63422); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63409 = 0; \n            v__63431[v_l_id_63407] = id(v__63422); \n          }\n          /* end map_seq */\n          v_l_id_63407 = atomic_inc(&(v_work_idx_5098)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5093; \n        v_work_idx_5093 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_63410 = atomic_inc(&(v_work_idx_5093)); \n        while((v_l_id_63410 < 1)){\n          float v_tmp_63492 = 3.4028235E38f; \n          v__57186 = v_tmp_63492; \n          /* reduce_seq */\n          for (int v_i_63411 = 0; v_i_63411 < v_MWidthC_1; v_i_63411 = (1 + v_i_63411)) {\n            v__57186 = clmin(v__57186, v__63431[(v_i_63411 + (v_MWidthC_1 * v_l_id_63410))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63412 = 0; \n            v__63436[v_w_id_63406] = doubleMultiplyAdd(v__57186, v__63417, v__63416[v_w_id_63406], v__63418); \n          }\n          /* end map_seq */\n          v_l_id_63410 = atomic_inc(&(v_work_idx_5093)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63406 = atomic_inc(v_work_idx_5100); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63413",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63414",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63415",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63416",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63417",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63418",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63420",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63431",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}