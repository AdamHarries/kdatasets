{
  "name" : "awrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72875, const global float* restrict v__72876, const global float* restrict v__72877, const global float* restrict v__72878, float v__72879, float v__72880, global float* v__72894, global int* v__72882, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72884; \n  float v__72886; \n  /* Private Memory */\n  float v__72888_0;\n  \n  float v__72890_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5975 = v__72882; \n    local int v_w_id_72871; \n    if (get_local_id(0) == 0) {\n      v_w_id_72871 = atomic_inc(v_work_idx_5975); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72871 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5973; \n        v_work_idx_5973 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_72872 = atomic_inc(&(v_work_idx_5973)); \n        while((v_l_id_72872 < 128)){\n          float v_tmp_72931 = 3.4028235E38f; \n          v__72884 = v_tmp_72931; \n          /* reduce_seq */\n          for (int v_i_72873 = 0; v_i_72873 < v_MWidthC_1; v_i_72873 = (1 + v_i_72873)) {\n            float v_tmp_72932 = 3.4028235E38f; \n            v__72886 = v_tmp_72932; \n            int v_index_72933 = v__72875[(v_i_72873 + (128 * v_MWidthC_1 * v_w_id_72871) + (v_MWidthC_1 * v_l_id_72872))]; \n            if (v_index_72933 < 0) {\n              v__72888_0 = v__72886; \n            } else {\n              if (v_index_72933 >= v_VLength_3) {\n                v__72888_0 = v__72886; \n              } else {\n                v__72888_0 = v__72877[v_index_72933]; \n              }\n            }\n            v__72890_0 = absadd(v__72888_0, v__72876[(v_i_72873 + (128 * v_MWidthC_1 * v_w_id_72871) + (v_MWidthC_1 * v_l_id_72872))]); \n            v__72884 = clmin(v__72890_0, v__72884); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_72874 = 0; \n            v__72894[(v_l_id_72872 + (128 * v_w_id_72871))] = doubleMultiplyAdd(v__72884, v__72879, v__72878[(v_l_id_72872 + (128 * v_w_id_72871))], v__72880); \n          }\n          /* end map_seq */\n          v_l_id_72872 = atomic_inc(&(v_work_idx_5973)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72871 = atomic_inc(v_work_idx_5975); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__72875",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72876",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72877",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72878",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__72879",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72880",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72882",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72894",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}