{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72283, const global float* restrict v__72284, const global float* restrict v__72285, const global float* restrict v__72286, float v__72287, float v__72288, global float* v__72306, global int* v__72290, local float* v__72301, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72292; \n  float v__72294; \n  float v__57186; \n  /* Private Memory */\n  float v__72296_0;\n  \n  float v__72298_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5920 = v__72290; \n    local int v_w_id_72276; \n    if (get_local_id(0) == 0) {\n      v_w_id_72276 = atomic_inc(v_work_idx_5920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72276 < v_MHeight_2)){\n      for (int v_l_id_72277 = get_local_id(0); v_l_id_72277 < v_MWidthC_1; v_l_id_72277 = (v_l_id_72277 + get_local_size(0))) {\n        float v_tmp_72369 = 3.4028235E38f; \n        v__72292 = v_tmp_72369; \n        /* reduce_seq */\n        for (int v_i_72278 = 0; v_i_72278 < 128; v_i_72278 = (1 + v_i_72278)) {\n          float v_tmp_72370 = 3.4028235E38f; \n          v__72294 = v_tmp_72370; \n          int v_index_72371 = v__72283[(v_l_id_72277 + (128 * v_MWidthC_1 * v_w_id_72276) + (v_MWidthC_1 * v_i_72278))]; \n          if (v_index_72371 < 0) {\n            v__72296_0 = v__72294; \n          } else {\n            if (v_index_72371 >= v_VLength_3) {\n              v__72296_0 = v__72294; \n            } else {\n              v__72296_0 = v__72285[v_index_72371]; \n            }\n          }\n          v__72298_0 = absadd(v__72296_0, v__72284[(v_l_id_72277 + (128 * v_MWidthC_1 * v_w_id_72276) + (v_MWidthC_1 * v_i_72278))]); \n          v__72292 = clmin(v__72298_0, v__72292); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72279 = 0; \n          v__72301[v_l_id_72277] = id(v__72292); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72280 = get_local_id(0); \n        float v_tmp_72374 = 3.4028235E38f; \n        v__57186 = v_tmp_72374; \n        /* reduce_seq */\n        for (int v_i_72281 = 0; v_i_72281 < v_MWidthC_1; v_i_72281 = (1 + v_i_72281)) {\n          v__57186 = clmin(v__57186, v__72301[(v_i_72281 + (v_MWidthC_1 * v_l_id_72280))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72282 = 0; \n          v__72306[v_w_id_72276] = doubleMultiplyAdd(v__57186, v__72287, v__72286[v_w_id_72276], v__72288); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72276 = atomic_inc(v_work_idx_5920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__72283",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72284",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72285",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72286",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72287",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72288",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72290",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72306",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72301",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}