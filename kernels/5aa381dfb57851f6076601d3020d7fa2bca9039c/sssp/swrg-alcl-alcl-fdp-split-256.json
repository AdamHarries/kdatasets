{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75089, const global float* restrict v__75090, const global float* restrict v__75091, const global float* restrict v__75092, float v__75093, float v__75094, global float* v__75111, local float* v__75106, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75097; \n  float v__75099; \n  float v__57186; \n  /* Private Memory */\n  float v__75101_0;\n  \n  float v__75103_0;\n  \n  for (int v_wg_id_75082 = get_group_id(0); v_wg_id_75082 < v_MHeight_2; v_wg_id_75082 = (v_wg_id_75082 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6183; \n      v_work_idx_6183 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_75083 = atomic_inc(&(v_work_idx_6183)); \n      while((v_l_id_75083 < v_MWidthC_1)){\n        float v_tmp_75164 = 3.4028235E38f; \n        v__75097 = v_tmp_75164; \n        /* reduce_seq */\n        for (int v_i_75084 = 0; v_i_75084 < 256; v_i_75084 = (1 + v_i_75084)) {\n          float v_tmp_75165 = 3.4028235E38f; \n          v__75099 = v_tmp_75165; \n          int v_index_75166 = v__75089[(v_l_id_75083 + (256 * v_MWidthC_1 * v_wg_id_75082) + (v_MWidthC_1 * v_i_75084))]; \n          if (v_index_75166 < 0) {\n            v__75101_0 = v__75099; \n          } else {\n            if (v_index_75166 >= v_VLength_3) {\n              v__75101_0 = v__75099; \n            } else {\n              v__75101_0 = v__75091[v_index_75166]; \n            }\n          }\n          v__75103_0 = absadd(v__75101_0, v__75090[(v_l_id_75083 + (256 * v_MWidthC_1 * v_wg_id_75082) + (v_MWidthC_1 * v_i_75084))]); \n          v__75097 = clmin(v__75103_0, v__75097); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75085 = 0; \n          v__75106[v_l_id_75083] = id(v__75097); \n        }\n        /* end map_seq */\n        v_l_id_75083 = atomic_inc(&(v_work_idx_6183)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6178; \n      v_work_idx_6178 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_75086 = atomic_inc(&(v_work_idx_6178)); \n      while((v_l_id_75086 < 1)){\n        float v_tmp_75169 = 3.4028235E38f; \n        v__57186 = v_tmp_75169; \n        /* reduce_seq */\n        for (int v_i_75087 = 0; v_i_75087 < v_MWidthC_1; v_i_75087 = (1 + v_i_75087)) {\n          v__57186 = clmin(v__57186, v__75106[(v_i_75087 + (v_MWidthC_1 * v_l_id_75086))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75088 = 0; \n          v__75111[v_wg_id_75082] = doubleMultiplyAdd(v__57186, v__75093, v__75092[v_wg_id_75082], v__75094); \n        }\n        /* end map_seq */\n        v_l_id_75086 = atomic_inc(&(v_work_idx_6178)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75089",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75090",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75091",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75092",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75093",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75094",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75106",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}