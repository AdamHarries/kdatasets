{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59689, const global float* restrict v__59690, const global float* restrict v__59691, const global float* restrict v__59692, float v__59693, float v__59694, global float* v__59712, global int* v__59696, global float* v__59702, local float* v__59707, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59698; \n  float v__59703; \n  float v__57186; \n  /* Private Memory */\n  float v__59700_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4745 = v__59696; \n    local int v_w_id_59681; \n    if (get_local_id(0) == 0) {\n      v_w_id_59681 = atomic_inc(v_work_idx_4745); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59681 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4743; \n        v_work_idx_4743 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_59682 = atomic_inc(&(v_work_idx_4743)); \n        while((v_l_id_59682 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_59683 = 0; v_i_59683 < 8; v_i_59683 = (1 + v_i_59683)) {\n            float v_tmp_59767 = 3.4028235E38f; \n            v__59698 = v_tmp_59767; \n            int v_index_59768 = v__59689[(v_l_id_59682 + (8 * v_MWidthC_1 * v_w_id_59681) + (v_MWidthC_1 * v_i_59683))]; \n            if (v_index_59768 < 0) {\n              v__59700_0 = v__59698; \n            } else {\n              if (v_index_59768 >= v_VLength_3) {\n                v__59700_0 = v__59698; \n              } else {\n                v__59700_0 = v__59691[v_index_59768]; \n              }\n            }\n            v__59702[(v_i_59683 + (8 * v_MWidthC_1 * v_w_id_59681) + (8 * v_l_id_59682))] = absadd(v__59700_0, v__59690[(v_l_id_59682 + (8 * v_MWidthC_1 * v_w_id_59681) + (v_MWidthC_1 * v_i_59683))]); \n          }\n          /* end map_seq */\n          float v_tmp_59769 = 3.4028235E38f; \n          v__59703 = v_tmp_59769; \n          /* reduce_seq */\n          for (int v_i_59684 = 0; v_i_59684 < 8; v_i_59684 = (1 + v_i_59684)) {\n            v__59703 = clmin(v__59703, v__59702[(v_i_59684 + (8 * v_MWidthC_1 * v_w_id_59681) + (8 * v_l_id_59682))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59685 = 0; \n            v__59707[v_l_id_59682] = id(v__59703); \n          }\n          /* end map_seq */\n          v_l_id_59682 = atomic_inc(&(v_work_idx_4743)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59686 = get_local_id(0); \n        float v_tmp_59772 = 3.4028235E38f; \n        v__57186 = v_tmp_59772; \n        /* reduce_seq */\n        for (int v_i_59687 = 0; v_i_59687 < v_MWidthC_1; v_i_59687 = (1 + v_i_59687)) {\n          v__57186 = clmin(v__57186, v__59707[(v_i_59687 + (v_MWidthC_1 * v_l_id_59686))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59688 = 0; \n          v__59712[v_w_id_59681] = doubleMultiplyAdd(v__57186, v__59693, v__59692[v_w_id_59681], v__59694); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59681 = atomic_inc(v_work_idx_4745); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59689",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59690",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59691",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59693",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59694",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59696",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__59702",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__59712",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59707",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}