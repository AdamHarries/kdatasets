{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68844, const global float* restrict v__68845, const global float* restrict v__68846, const global float* restrict v__68847, float v__68848, float v__68849, global float* v__68867, global int* v__68851, global float* v__68857, local float* v__68862, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68853; \n  float v__68858; \n  float v__57186; \n  /* Private Memory */\n  float v__68855_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5599 = v__68851; \n    local int v_w_id_68836; \n    if (get_local_id(0) == 0) {\n      v_w_id_68836 = atomic_inc(v_work_idx_5599); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_68836 < v_MHeight_2)){\n      for (int v_l_id_68837 = get_local_id(0); v_l_id_68837 < v_MWidthC_1; v_l_id_68837 = (v_l_id_68837 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_68838 = 0; v_i_68838 < 64; v_i_68838 = (1 + v_i_68838)) {\n          float v_tmp_68930 = 3.4028235E38f; \n          v__68853 = v_tmp_68930; \n          int v_index_68931 = v__68844[(v_l_id_68837 + (64 * v_MWidthC_1 * v_w_id_68836) + (v_MWidthC_1 * v_i_68838))]; \n          if (v_index_68931 < 0) {\n            v__68855_0 = v__68853; \n          } else {\n            if (v_index_68931 >= v_VLength_3) {\n              v__68855_0 = v__68853; \n            } else {\n              v__68855_0 = v__68846[v_index_68931]; \n            }\n          }\n          v__68857[(v_i_68838 + (64 * v_MWidthC_1 * v_w_id_68836) + (64 * v_l_id_68837))] = absadd(v__68855_0, v__68845[(v_l_id_68837 + (64 * v_MWidthC_1 * v_w_id_68836) + (v_MWidthC_1 * v_i_68838))]); \n        }\n        /* end map_seq */\n        float v_tmp_68932 = 3.4028235E38f; \n        v__68858 = v_tmp_68932; \n        /* reduce_seq */\n        for (int v_i_68839 = 0; v_i_68839 < 64; v_i_68839 = (1 + v_i_68839)) {\n          v__68858 = clmin(v__68858, v__68857[(v_i_68839 + (64 * v_MWidthC_1 * v_w_id_68836) + (64 * v_l_id_68837))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68840 = 0; \n          v__68862[v_l_id_68837] = id(v__68858); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_68841 = get_local_id(0); \n        float v_tmp_68935 = 3.4028235E38f; \n        v__57186 = v_tmp_68935; \n        /* reduce_seq */\n        for (int v_i_68842 = 0; v_i_68842 < v_MWidthC_1; v_i_68842 = (1 + v_i_68842)) {\n          v__57186 = clmin(v__57186, v__68862[(v_i_68842 + (v_MWidthC_1 * v_l_id_68841))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68843 = 0; \n          v__68867[v_w_id_68836] = doubleMultiplyAdd(v__57186, v__68848, v__68847[v_w_id_68836], v__68849); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_68836 = atomic_inc(v_work_idx_5599); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68844",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68845",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68846",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68848",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68849",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68851",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__68857",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__68867",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68862",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}