{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71138, const global float* restrict v__71139, const global float* restrict v__71140, const global float* restrict v__71141, float v__71142, float v__71143, global float* v__71156, global float* v__71150, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71146; \n  float v__71151; \n  /* Private Memory */\n  float v__71148_0;\n  \n  for (int v_wg_id_71133 = get_group_id(0); v_wg_id_71133 < v_MHeight_2; v_wg_id_71133 = (v_wg_id_71133 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5810; \n      v_work_idx_5810 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_71134 = atomic_inc(&(v_work_idx_5810)); \n      while((v_l_id_71134 < 128)){\n        /* map_seq */\n        for (int v_i_71135 = 0; v_i_71135 < v_MWidthC_1; v_i_71135 = (1 + v_i_71135)) {\n          float v_tmp_71196 = 3.4028235E38f; \n          v__71146 = v_tmp_71196; \n          int v_index_71197 = v__71138[(v_i_71135 + (128 * v_MWidthC_1 * v_wg_id_71133) + (v_MWidthC_1 * v_l_id_71134))]; \n          if (v_index_71197 < 0) {\n            v__71148_0 = v__71146; \n          } else {\n            if (v_index_71197 >= v_VLength_3) {\n              v__71148_0 = v__71146; \n            } else {\n              v__71148_0 = v__71140[v_index_71197]; \n            }\n          }\n          v__71150[(v_i_71135 + (128 * v_MWidthC_1 * v_wg_id_71133) + (v_MWidthC_1 * v_l_id_71134))] = absadd(v__71148_0, v__71139[(v_i_71135 + (128 * v_MWidthC_1 * v_wg_id_71133) + (v_MWidthC_1 * v_l_id_71134))]); \n        }\n        /* end map_seq */\n        float v_tmp_71198 = 3.4028235E38f; \n        v__71151 = v_tmp_71198; \n        /* reduce_seq */\n        for (int v_i_71136 = 0; v_i_71136 < v_MWidthC_1; v_i_71136 = (1 + v_i_71136)) {\n          v__71151 = clmin(v__71151, v__71150[(v_i_71136 + (128 * v_MWidthC_1 * v_wg_id_71133) + (v_MWidthC_1 * v_l_id_71134))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71137 = 0; \n          v__71156[(v_l_id_71134 + (128 * v_wg_id_71133))] = doubleMultiplyAdd(v__71151, v__71142, v__71141[(v_l_id_71134 + (128 * v_wg_id_71133))], v__71143); \n        }\n        /* end map_seq */\n        v_l_id_71134 = atomic_inc(&(v_work_idx_5810)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71138",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71139",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71140",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71141",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  }, {
    "variable" : "v__71142",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71143",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71150",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71156",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}