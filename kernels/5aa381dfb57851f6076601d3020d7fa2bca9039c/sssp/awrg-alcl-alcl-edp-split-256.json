{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__76842, const global float* restrict v__76843, const global float* restrict v__76844, const global float* restrict v__76845, float v__76846, float v__76847, global float* v__76867, global int* v__76849, local float* v__76862, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76851; \n  float v__76853; \n  float v__57186; \n  /* Private Memory */\n  float v__76855_0;\n  \n  float v__76857_0;\n  \n  int v__76861_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6359 = v__76849; \n    local int v_w_id_76835; \n    if (get_local_id(0) == 0) {\n      v_w_id_76835 = atomic_inc(v_work_idx_6359); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76835 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6357; \n        v_work_idx_6357 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76836 = atomic_inc(&(v_work_idx_6357)); \n        while((v_l_id_76836 < v_MWidthC_1)){\n          float v_tmp_76921 = 3.4028235E38f; \n          v__76851 = v_tmp_76921; \n          /* reduce_while_seq */\n          for (int v_i_76837 = 0; v_i_76837 < 256; v_i_76837 = (1 + v_i_76837)) {\n            v__76861_0 = check(v__76851, v__76842[(v_l_id_76836 + (256 * v_MWidthC_1 * v_w_id_76835) + (v_MWidthC_1 * v_i_76837))]); \n            if (v__76861_0) {\n            } else {\n              break;\n            }\n            float v_tmp_76922 = 3.4028235E38f; \n            v__76853 = v_tmp_76922; \n            int v_index_76923 = v__76842[(v_l_id_76836 + (256 * v_MWidthC_1 * v_w_id_76835) + (v_MWidthC_1 * v_i_76837))]; \n            if (v_index_76923 < 0) {\n              v__76855_0 = v__76853; \n            } else {\n              if (v_index_76923 >= v_VLength_3) {\n                v__76855_0 = v__76853; \n              } else {\n                v__76855_0 = v__76844[v_index_76923]; \n              }\n            }\n            v__76857_0 = absadd(v__76855_0, v__76843[(v_l_id_76836 + (256 * v_MWidthC_1 * v_w_id_76835) + (v_MWidthC_1 * v_i_76837))]); \n            v__76851 = clmin(v__76857_0, v__76851); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76838 = 0; \n            v__76862[v_l_id_76836] = id(v__76851); \n          }\n          /* end map_seq */\n          v_l_id_76836 = atomic_inc(&(v_work_idx_6357)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6352; \n        v_work_idx_6352 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76839 = atomic_inc(&(v_work_idx_6352)); \n        while((v_l_id_76839 < 1)){\n          float v_tmp_76926 = 3.4028235E38f; \n          v__57186 = v_tmp_76926; \n          /* reduce_seq */\n          for (int v_i_76840 = 0; v_i_76840 < v_MWidthC_1; v_i_76840 = (1 + v_i_76840)) {\n            v__57186 = clmin(v__57186, v__76862[(v_i_76840 + (v_MWidthC_1 * v_l_id_76839))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76841 = 0; \n            v__76867[v_w_id_76835] = doubleMultiplyAdd(v__57186, v__76846, v__76845[v_w_id_76835], v__76847); \n          }\n          /* end map_seq */\n          v_l_id_76839 = atomic_inc(&(v_work_idx_6352)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76835 = atomic_inc(v_work_idx_6359); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76842",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76843",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76844",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76846",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76847",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76849",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76867",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76862",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}