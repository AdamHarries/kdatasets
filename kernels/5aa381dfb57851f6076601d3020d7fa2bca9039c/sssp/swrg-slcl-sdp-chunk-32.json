{
  "name" : "swrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63602, const global float* restrict v__63603, const global float* restrict v__63604, const global float* restrict v__63605, float v__63606, float v__63607, global float* v__63620, global float* v__63614, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63610; \n  float v__63615; \n  /* Private Memory */\n  float v__63612_0;\n  \n  for (int v_wg_id_63597 = get_group_id(0); v_wg_id_63597 < v_MHeight_2; v_wg_id_63597 = (v_wg_id_63597 + get_num_groups(0))) {\n    for (int v_l_id_63598 = get_local_id(0); v_l_id_63598 < 32; v_l_id_63598 = (v_l_id_63598 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_63599 = 0; v_i_63599 < v_MWidthC_1; v_i_63599 = (1 + v_i_63599)) {\n        float v_tmp_63664 = 3.4028235E38f; \n        v__63610 = v_tmp_63664; \n        int v_index_63665 = v__63602[(v_i_63599 + (32 * v_MWidthC_1 * v_wg_id_63597) + (v_MWidthC_1 * v_l_id_63598))]; \n        if (v_index_63665 < 0) {\n          v__63612_0 = v__63610; \n        } else {\n          if (v_index_63665 >= v_VLength_3) {\n            v__63612_0 = v__63610; \n          } else {\n            v__63612_0 = v__63604[v_index_63665]; \n          }\n        }\n        v__63614[(v_i_63599 + (32 * v_MWidthC_1 * v_wg_id_63597) + (v_MWidthC_1 * v_l_id_63598))] = absadd(v__63612_0, v__63603[(v_i_63599 + (32 * v_MWidthC_1 * v_wg_id_63597) + (v_MWidthC_1 * v_l_id_63598))]); \n      }\n      /* end map_seq */\n      float v_tmp_63666 = 3.4028235E38f; \n      v__63615 = v_tmp_63666; \n      /* reduce_seq */\n      for (int v_i_63600 = 0; v_i_63600 < v_MWidthC_1; v_i_63600 = (1 + v_i_63600)) {\n        v__63615 = clmin(v__63615, v__63614[(v_i_63600 + (32 * v_MWidthC_1 * v_wg_id_63597) + (v_MWidthC_1 * v_l_id_63598))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_63601 = 0; \n        v__63620[(v_l_id_63598 + (32 * v_wg_id_63597))] = doubleMultiplyAdd(v__63615, v__63606, v__63605[(v_l_id_63598 + (32 * v_wg_id_63597))], v__63607); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63602",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63603",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63604",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63605",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__63606",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63607",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63614",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__63620",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}