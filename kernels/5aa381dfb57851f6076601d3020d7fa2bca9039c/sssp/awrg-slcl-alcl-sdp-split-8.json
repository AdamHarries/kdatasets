{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59163, const global float* restrict v__59164, const global float* restrict v__59165, const global float* restrict v__59166, float v__59167, float v__59168, global float* v__59186, global int* v__59170, global float* v__59176, local float* v__59181, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59172; \n  float v__59177; \n  float v__57186; \n  /* Private Memory */\n  float v__59174_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4692 = v__59170; \n    local int v_w_id_59155; \n    if (get_local_id(0) == 0) {\n      v_w_id_59155 = atomic_inc(v_work_idx_4692); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59155 < v_MHeight_2)){\n      for (int v_l_id_59156 = get_local_id(0); v_l_id_59156 < v_MWidthC_1; v_l_id_59156 = (v_l_id_59156 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59157 = 0; v_i_59157 < 8; v_i_59157 = (1 + v_i_59157)) {\n          float v_tmp_59245 = 3.4028235E38f; \n          v__59172 = v_tmp_59245; \n          int v_index_59246 = v__59163[(v_l_id_59156 + (8 * v_MWidthC_1 * v_w_id_59155) + (v_MWidthC_1 * v_i_59157))]; \n          if (v_index_59246 < 0) {\n            v__59174_0 = v__59172; \n          } else {\n            if (v_index_59246 >= v_VLength_3) {\n              v__59174_0 = v__59172; \n            } else {\n              v__59174_0 = v__59165[v_index_59246]; \n            }\n          }\n          v__59176[(v_i_59157 + (8 * v_MWidthC_1 * v_w_id_59155) + (8 * v_l_id_59156))] = absadd(v__59174_0, v__59164[(v_l_id_59156 + (8 * v_MWidthC_1 * v_w_id_59155) + (v_MWidthC_1 * v_i_59157))]); \n        }\n        /* end map_seq */\n        float v_tmp_59247 = 3.4028235E38f; \n        v__59177 = v_tmp_59247; \n        /* reduce_seq */\n        for (int v_i_59158 = 0; v_i_59158 < 8; v_i_59158 = (1 + v_i_59158)) {\n          v__59177 = clmin(v__59177, v__59176[(v_i_59158 + (8 * v_MWidthC_1 * v_w_id_59155) + (8 * v_l_id_59156))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59159 = 0; \n          v__59181[v_l_id_59156] = id(v__59177); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4685; \n        v_work_idx_4685 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_59160 = atomic_inc(&(v_work_idx_4685)); \n        while((v_l_id_59160 < 1)){\n          float v_tmp_59250 = 3.4028235E38f; \n          v__57186 = v_tmp_59250; \n          /* reduce_seq */\n          for (int v_i_59161 = 0; v_i_59161 < v_MWidthC_1; v_i_59161 = (1 + v_i_59161)) {\n            v__57186 = clmin(v__57186, v__59181[(v_i_59161 + (v_MWidthC_1 * v_l_id_59160))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59162 = 0; \n            v__59186[v_w_id_59155] = doubleMultiplyAdd(v__57186, v__59167, v__59166[v_w_id_59155], v__59168); \n          }\n          /* end map_seq */\n          v_l_id_59160 = atomic_inc(&(v_work_idx_4685)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59155 = atomic_inc(v_work_idx_4692); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59163",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59164",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59165",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59167",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59168",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59170",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__59176",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__59186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59181",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}