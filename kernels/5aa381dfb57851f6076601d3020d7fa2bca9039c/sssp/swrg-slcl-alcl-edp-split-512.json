{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__77701, const global float* restrict v__77702, const global float* restrict v__77703, const global float* restrict v__77704, float v__77705, float v__77706, global float* v__77725, local float* v__77720, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77709; \n  float v__77711; \n  float v__57186; \n  /* Private Memory */\n  float v__77713_0;\n  \n  float v__77715_0;\n  \n  int v__77719_0;\n  \n  for (int v_wg_id_77694 = get_group_id(0); v_wg_id_77694 < v_MHeight_2; v_wg_id_77694 = (v_wg_id_77694 + get_num_groups(0))) {\n    for (int v_l_id_77695 = get_local_id(0); v_l_id_77695 < v_MWidthC_1; v_l_id_77695 = (v_l_id_77695 + get_local_size(0))) {\n      float v_tmp_77789 = 3.4028235E38f; \n      v__77709 = v_tmp_77789; \n      /* reduce_while_seq */\n      for (int v_i_77696 = 0; v_i_77696 < 512; v_i_77696 = (1 + v_i_77696)) {\n        v__77719_0 = check(v__77709, v__77701[(v_l_id_77695 + (512 * v_MWidthC_1 * v_wg_id_77694) + (v_MWidthC_1 * v_i_77696))]); \n        if (v__77719_0) {\n        } else {\n          break;\n        }\n        float v_tmp_77790 = 3.4028235E38f; \n        v__77711 = v_tmp_77790; \n        int v_index_77791 = v__77701[(v_l_id_77695 + (512 * v_MWidthC_1 * v_wg_id_77694) + (v_MWidthC_1 * v_i_77696))]; \n        if (v_index_77791 < 0) {\n          v__77713_0 = v__77711; \n        } else {\n          if (v_index_77791 >= v_VLength_3) {\n            v__77713_0 = v__77711; \n          } else {\n            v__77713_0 = v__77703[v_index_77791]; \n          }\n        }\n        v__77715_0 = absadd(v__77713_0, v__77702[(v_l_id_77695 + (512 * v_MWidthC_1 * v_wg_id_77694) + (v_MWidthC_1 * v_i_77696))]); \n        v__77709 = clmin(v__77715_0, v__77709); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_77697 = 0; \n        v__77720[v_l_id_77695] = id(v__77709); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6423; \n      v_work_idx_6423 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_77698 = atomic_inc(&(v_work_idx_6423)); \n      while((v_l_id_77698 < 1)){\n        float v_tmp_77794 = 3.4028235E38f; \n        v__57186 = v_tmp_77794; \n        /* reduce_seq */\n        for (int v_i_77699 = 0; v_i_77699 < v_MWidthC_1; v_i_77699 = (1 + v_i_77699)) {\n          v__57186 = clmin(v__57186, v__77720[(v_i_77699 + (v_MWidthC_1 * v_l_id_77698))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77700 = 0; \n          v__77725[v_wg_id_77694] = doubleMultiplyAdd(v__57186, v__77705, v__77704[v_wg_id_77694], v__77706); \n        }\n        /* end map_seq */\n        v_l_id_77698 = atomic_inc(&(v_work_idx_6423)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__77701",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77702",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77703",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77704",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77705",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77706",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__77725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77720",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}