{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58325, const global float* restrict v__58326, const global float* restrict v__58327, const global float* restrict v__58328, float v__58329, float v__58330, global float* v__58347, global float* v__58337, local float* v__58342, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58333; \n  float v__58338; \n  float v__57186; \n  /* Private Memory */\n  float v__58335_0;\n  \n  for (int v_wg_id_58317 = get_group_id(0); v_wg_id_58317 < v_MHeight_2; v_wg_id_58317 = (v_wg_id_58317 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4613; \n      v_work_idx_4613 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_58318 = atomic_inc(&(v_work_idx_4613)); \n      while((v_l_id_58318 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58319 = 0; v_i_58319 < 8; v_i_58319 = (1 + v_i_58319)) {\n          float v_tmp_58400 = 3.4028235E38f; \n          v__58333 = v_tmp_58400; \n          int v_index_58401 = v__58325[(v_l_id_58318 + (8 * v_MWidthC_1 * v_wg_id_58317) + (v_MWidthC_1 * v_i_58319))]; \n          if (v_index_58401 < 0) {\n            v__58335_0 = v__58333; \n          } else {\n            if (v_index_58401 >= v_VLength_3) {\n              v__58335_0 = v__58333; \n            } else {\n              v__58335_0 = v__58327[v_index_58401]; \n            }\n          }\n          v__58337[(v_i_58319 + (8 * v_MWidthC_1 * v_wg_id_58317) + (8 * v_l_id_58318))] = absadd(v__58335_0, v__58326[(v_l_id_58318 + (8 * v_MWidthC_1 * v_wg_id_58317) + (v_MWidthC_1 * v_i_58319))]); \n        }\n        /* end map_seq */\n        float v_tmp_58402 = 3.4028235E38f; \n        v__58338 = v_tmp_58402; \n        /* reduce_seq */\n        for (int v_i_58320 = 0; v_i_58320 < 8; v_i_58320 = (1 + v_i_58320)) {\n          v__58338 = clmin(v__58338, v__58337[(v_i_58320 + (8 * v_MWidthC_1 * v_wg_id_58317) + (8 * v_l_id_58318))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58321 = 0; \n          v__58342[v_l_id_58318] = id(v__58338); \n        }\n        /* end map_seq */\n        v_l_id_58318 = atomic_inc(&(v_work_idx_4613)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4607; \n      v_work_idx_4607 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_58322 = atomic_inc(&(v_work_idx_4607)); \n      while((v_l_id_58322 < 1)){\n        float v_tmp_58405 = 3.4028235E38f; \n        v__57186 = v_tmp_58405; \n        /* reduce_seq */\n        for (int v_i_58323 = 0; v_i_58323 < v_MWidthC_1; v_i_58323 = (1 + v_i_58323)) {\n          v__57186 = clmin(v__57186, v__58342[(v_i_58323 + (v_MWidthC_1 * v_l_id_58322))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58324 = 0; \n          v__58347[v_wg_id_58317] = doubleMultiplyAdd(v__57186, v__58329, v__58328[v_wg_id_58317], v__58330); \n        }\n        /* end map_seq */\n        v_l_id_58322 = atomic_inc(&(v_work_idx_4607)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58325",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58326",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58327",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58329",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58330",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58337",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58347",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58342",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}