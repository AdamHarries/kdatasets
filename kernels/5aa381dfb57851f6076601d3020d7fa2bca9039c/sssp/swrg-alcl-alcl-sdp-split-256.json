{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74995, const global float* restrict v__74996, const global float* restrict v__74997, const global float* restrict v__74998, float v__74999, float v__75000, global float* v__75017, global float* v__75007, local float* v__75012, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75003; \n  float v__75008; \n  float v__57186; \n  /* Private Memory */\n  float v__75005_0;\n  \n  for (int v_wg_id_74987 = get_group_id(0); v_wg_id_74987 < v_MHeight_2; v_wg_id_74987 = (v_wg_id_74987 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6173; \n      v_work_idx_6173 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74988 = atomic_inc(&(v_work_idx_6173)); \n      while((v_l_id_74988 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_74989 = 0; v_i_74989 < 256; v_i_74989 = (1 + v_i_74989)) {\n          float v_tmp_75070 = 3.4028235E38f; \n          v__75003 = v_tmp_75070; \n          int v_index_75071 = v__74995[(v_l_id_74988 + (256 * v_MWidthC_1 * v_wg_id_74987) + (v_MWidthC_1 * v_i_74989))]; \n          if (v_index_75071 < 0) {\n            v__75005_0 = v__75003; \n          } else {\n            if (v_index_75071 >= v_VLength_3) {\n              v__75005_0 = v__75003; \n            } else {\n              v__75005_0 = v__74997[v_index_75071]; \n            }\n          }\n          v__75007[(v_i_74989 + (256 * v_MWidthC_1 * v_wg_id_74987) + (256 * v_l_id_74988))] = absadd(v__75005_0, v__74996[(v_l_id_74988 + (256 * v_MWidthC_1 * v_wg_id_74987) + (v_MWidthC_1 * v_i_74989))]); \n        }\n        /* end map_seq */\n        float v_tmp_75072 = 3.4028235E38f; \n        v__75008 = v_tmp_75072; \n        /* reduce_seq */\n        for (int v_i_74990 = 0; v_i_74990 < 256; v_i_74990 = (1 + v_i_74990)) {\n          v__75008 = clmin(v__75008, v__75007[(v_i_74990 + (256 * v_MWidthC_1 * v_wg_id_74987) + (256 * v_l_id_74988))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74991 = 0; \n          v__75012[v_l_id_74988] = id(v__75008); \n        }\n        /* end map_seq */\n        v_l_id_74988 = atomic_inc(&(v_work_idx_6173)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6167; \n      v_work_idx_6167 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_74992 = atomic_inc(&(v_work_idx_6167)); \n      while((v_l_id_74992 < 1)){\n        float v_tmp_75075 = 3.4028235E38f; \n        v__57186 = v_tmp_75075; \n        /* reduce_seq */\n        for (int v_i_74993 = 0; v_i_74993 < v_MWidthC_1; v_i_74993 = (1 + v_i_74993)) {\n          v__57186 = clmin(v__57186, v__75012[(v_i_74993 + (v_MWidthC_1 * v_l_id_74992))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74994 = 0; \n          v__75017[v_wg_id_74987] = doubleMultiplyAdd(v__57186, v__74999, v__74998[v_wg_id_74987], v__75000); \n        }\n        /* end map_seq */\n        v_l_id_74992 = atomic_inc(&(v_work_idx_6167)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74995",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74996",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74997",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74999",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75000",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75007",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__75017",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75012",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}