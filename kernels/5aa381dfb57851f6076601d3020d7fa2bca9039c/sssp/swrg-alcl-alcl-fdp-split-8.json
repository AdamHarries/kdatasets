{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58419, const global float* restrict v__58420, const global float* restrict v__58421, const global float* restrict v__58422, float v__58423, float v__58424, global float* v__58441, local float* v__58436, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58427; \n  float v__58429; \n  float v__57186; \n  /* Private Memory */\n  float v__58431_0;\n  \n  float v__58433_0;\n  \n  for (int v_wg_id_58412 = get_group_id(0); v_wg_id_58412 < v_MHeight_2; v_wg_id_58412 = (v_wg_id_58412 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4623; \n      v_work_idx_4623 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_58413 = atomic_inc(&(v_work_idx_4623)); \n      while((v_l_id_58413 < v_MWidthC_1)){\n        float v_tmp_58494 = 3.4028235E38f; \n        v__58427 = v_tmp_58494; \n        /* reduce_seq */\n        for (int v_i_58414 = 0; v_i_58414 < 8; v_i_58414 = (1 + v_i_58414)) {\n          float v_tmp_58495 = 3.4028235E38f; \n          v__58429 = v_tmp_58495; \n          int v_index_58496 = v__58419[(v_l_id_58413 + (8 * v_MWidthC_1 * v_wg_id_58412) + (v_MWidthC_1 * v_i_58414))]; \n          if (v_index_58496 < 0) {\n            v__58431_0 = v__58429; \n          } else {\n            if (v_index_58496 >= v_VLength_3) {\n              v__58431_0 = v__58429; \n            } else {\n              v__58431_0 = v__58421[v_index_58496]; \n            }\n          }\n          v__58433_0 = absadd(v__58431_0, v__58420[(v_l_id_58413 + (8 * v_MWidthC_1 * v_wg_id_58412) + (v_MWidthC_1 * v_i_58414))]); \n          v__58427 = clmin(v__58433_0, v__58427); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58415 = 0; \n          v__58436[v_l_id_58413] = id(v__58427); \n        }\n        /* end map_seq */\n        v_l_id_58413 = atomic_inc(&(v_work_idx_4623)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4618; \n      v_work_idx_4618 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_58416 = atomic_inc(&(v_work_idx_4618)); \n      while((v_l_id_58416 < 1)){\n        float v_tmp_58499 = 3.4028235E38f; \n        v__57186 = v_tmp_58499; \n        /* reduce_seq */\n        for (int v_i_58417 = 0; v_i_58417 < v_MWidthC_1; v_i_58417 = (1 + v_i_58417)) {\n          v__57186 = clmin(v__57186, v__58436[(v_i_58417 + (v_MWidthC_1 * v_l_id_58416))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58418 = 0; \n          v__58441[v_wg_id_58412] = doubleMultiplyAdd(v__57186, v__58423, v__58422[v_wg_id_58412], v__58424); \n        }\n        /* end map_seq */\n        v_l_id_58416 = atomic_inc(&(v_work_idx_4618)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58419",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58420",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58421",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58422",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58423",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58424",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58441",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58436",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}