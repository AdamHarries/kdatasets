{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67875, const global float* restrict v__67876, const global float* restrict v__67877, const global float* restrict v__67878, float v__67879, float v__67880, global float* v__67893, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67883; \n  float v__67885; \n  /* Private Memory */\n  float v__67887_0;\n  \n  float v__67889_0;\n  \n  for (int v_wg_id_67871 = get_group_id(0); v_wg_id_67871 < v_MHeight_2; v_wg_id_67871 = (v_wg_id_67871 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5504; \n      v_work_idx_5504 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_67872 = atomic_inc(&(v_work_idx_5504)); \n      while((v_l_id_67872 < 64)){\n        float v_tmp_67932 = 3.4028235E38f; \n        v__67883 = v_tmp_67932; \n        /* reduce_seq */\n        for (int v_i_67873 = 0; v_i_67873 < v_MWidthC_1; v_i_67873 = (1 + v_i_67873)) {\n          float v_tmp_67933 = 3.4028235E38f; \n          v__67885 = v_tmp_67933; \n          int v_index_67934 = v__67875[(v_i_67873 + (64 * v_MWidthC_1 * v_wg_id_67871) + (v_MWidthC_1 * v_l_id_67872))]; \n          if (v_index_67934 < 0) {\n            v__67887_0 = v__67885; \n          } else {\n            if (v_index_67934 >= v_VLength_3) {\n              v__67887_0 = v__67885; \n            } else {\n              v__67887_0 = v__67877[v_index_67934]; \n            }\n          }\n          v__67889_0 = absadd(v__67887_0, v__67876[(v_i_67873 + (64 * v_MWidthC_1 * v_wg_id_67871) + (v_MWidthC_1 * v_l_id_67872))]); \n          v__67883 = clmin(v__67889_0, v__67883); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67874 = 0; \n          v__67893[(v_l_id_67872 + (64 * v_wg_id_67871))] = doubleMultiplyAdd(v__67883, v__67879, v__67878[(v_l_id_67872 + (64 * v_wg_id_67871))], v__67880); \n        }\n        /* end map_seq */\n        v_l_id_67872 = atomic_inc(&(v_work_idx_5504)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__67875",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67876",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67877",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67878",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__67879",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67880",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__67893",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}