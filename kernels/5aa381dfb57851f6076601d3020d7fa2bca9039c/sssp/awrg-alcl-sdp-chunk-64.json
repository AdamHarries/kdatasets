{
  "name" : "awrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69471, const global float* restrict v__69472, const global float* restrict v__69473, const global float* restrict v__69474, float v__69475, float v__69476, global float* v__69490, global int* v__69478, global float* v__69484, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69480; \n  float v__69485; \n  /* Private Memory */\n  float v__69482_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5656 = v__69478; \n    local int v_w_id_69466; \n    if (get_local_id(0) == 0) {\n      v_w_id_69466 = atomic_inc(v_work_idx_5656); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69466 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5654; \n        v_work_idx_5654 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_69467 = atomic_inc(&(v_work_idx_5654)); \n        while((v_l_id_69467 < 64)){\n          /* map_seq */\n          for (int v_i_69468 = 0; v_i_69468 < v_MWidthC_1; v_i_69468 = (1 + v_i_69468)) {\n            float v_tmp_69528 = 3.4028235E38f; \n            v__69480 = v_tmp_69528; \n            int v_index_69529 = v__69471[(v_i_69468 + (64 * v_MWidthC_1 * v_w_id_69466) + (v_MWidthC_1 * v_l_id_69467))]; \n            if (v_index_69529 < 0) {\n              v__69482_0 = v__69480; \n            } else {\n              if (v_index_69529 >= v_VLength_3) {\n                v__69482_0 = v__69480; \n              } else {\n                v__69482_0 = v__69473[v_index_69529]; \n              }\n            }\n            v__69484[(v_i_69468 + (64 * v_MWidthC_1 * v_w_id_69466) + (v_MWidthC_1 * v_l_id_69467))] = absadd(v__69482_0, v__69472[(v_i_69468 + (64 * v_MWidthC_1 * v_w_id_69466) + (v_MWidthC_1 * v_l_id_69467))]); \n          }\n          /* end map_seq */\n          float v_tmp_69530 = 3.4028235E38f; \n          v__69485 = v_tmp_69530; \n          /* reduce_seq */\n          for (int v_i_69469 = 0; v_i_69469 < v_MWidthC_1; v_i_69469 = (1 + v_i_69469)) {\n            v__69485 = clmin(v__69485, v__69484[(v_i_69469 + (64 * v_MWidthC_1 * v_w_id_69466) + (v_MWidthC_1 * v_l_id_69467))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69470 = 0; \n            v__69490[(v_l_id_69467 + (64 * v_w_id_69466))] = doubleMultiplyAdd(v__69485, v__69475, v__69474[(v_l_id_69467 + (64 * v_w_id_69466))], v__69476); \n          }\n          /* end map_seq */\n          v_l_id_69467 = atomic_inc(&(v_work_idx_5654)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69466 = atomic_inc(v_work_idx_5656); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__69471",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69472",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69473",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69474",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  }, {
    "variable" : "v__69475",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69476",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69478",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__69484",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__69490",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}