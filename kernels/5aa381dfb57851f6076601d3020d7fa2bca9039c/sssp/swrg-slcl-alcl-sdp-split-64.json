{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67495, const global float* restrict v__67496, const global float* restrict v__67497, const global float* restrict v__67498, float v__67499, float v__67500, global float* v__67517, global float* v__67507, local float* v__67512, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67503; \n  float v__67508; \n  float v__57186; \n  /* Private Memory */\n  float v__67505_0;\n  \n  for (int v_wg_id_67487 = get_group_id(0); v_wg_id_67487 < v_MHeight_2; v_wg_id_67487 = (v_wg_id_67487 + get_num_groups(0))) {\n    for (int v_l_id_67488 = get_local_id(0); v_l_id_67488 < v_MWidthC_1; v_l_id_67488 = (v_l_id_67488 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_67489 = 0; v_i_67489 < 64; v_i_67489 = (1 + v_i_67489)) {\n        float v_tmp_67578 = 3.4028235E38f; \n        v__67503 = v_tmp_67578; \n        int v_index_67579 = v__67495[(v_l_id_67488 + (64 * v_MWidthC_1 * v_wg_id_67487) + (v_MWidthC_1 * v_i_67489))]; \n        if (v_index_67579 < 0) {\n          v__67505_0 = v__67503; \n        } else {\n          if (v_index_67579 >= v_VLength_3) {\n            v__67505_0 = v__67503; \n          } else {\n            v__67505_0 = v__67497[v_index_67579]; \n          }\n        }\n        v__67507[(v_i_67489 + (64 * v_MWidthC_1 * v_wg_id_67487) + (64 * v_l_id_67488))] = absadd(v__67505_0, v__67496[(v_l_id_67488 + (64 * v_MWidthC_1 * v_wg_id_67487) + (v_MWidthC_1 * v_i_67489))]); \n      }\n      /* end map_seq */\n      float v_tmp_67580 = 3.4028235E38f; \n      v__67508 = v_tmp_67580; \n      /* reduce_seq */\n      for (int v_i_67490 = 0; v_i_67490 < 64; v_i_67490 = (1 + v_i_67490)) {\n        v__67508 = clmin(v__67508, v__67507[(v_i_67490 + (64 * v_MWidthC_1 * v_wg_id_67487) + (64 * v_l_id_67488))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67491 = 0; \n        v__67512[v_l_id_67488] = id(v__67508); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5468; \n      v_work_idx_5468 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_67492 = atomic_inc(&(v_work_idx_5468)); \n      while((v_l_id_67492 < 1)){\n        float v_tmp_67583 = 3.4028235E38f; \n        v__57186 = v_tmp_67583; \n        /* reduce_seq */\n        for (int v_i_67493 = 0; v_i_67493 < v_MWidthC_1; v_i_67493 = (1 + v_i_67493)) {\n          v__57186 = clmin(v__57186, v__67512[(v_i_67493 + (v_MWidthC_1 * v_l_id_67492))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67494 = 0; \n          v__67517[v_wg_id_67487] = doubleMultiplyAdd(v__57186, v__67499, v__67498[v_wg_id_67487], v__67500); \n        }\n        /* end map_seq */\n        v_l_id_67492 = atomic_inc(&(v_work_idx_5468)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__67495",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67496",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67497",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67499",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67500",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67507",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__67517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67512",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}