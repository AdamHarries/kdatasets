{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76656, const global float* restrict v__76657, const global float* restrict v__76658, const global float* restrict v__76659, float v__76660, float v__76661, global float* v__76679, global int* v__76663, global float* v__76669, local float* v__76674, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76665; \n  float v__76670; \n  float v__57186; \n  /* Private Memory */\n  float v__76667_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6337 = v__76663; \n    local int v_w_id_76648; \n    if (get_local_id(0) == 0) {\n      v_w_id_76648 = atomic_inc(v_work_idx_6337); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76648 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6335; \n        v_work_idx_6335 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76649 = atomic_inc(&(v_work_idx_6335)); \n        while((v_l_id_76649 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_76650 = 0; v_i_76650 < 256; v_i_76650 = (1 + v_i_76650)) {\n            float v_tmp_76730 = 3.4028235E38f; \n            v__76665 = v_tmp_76730; \n            int v_index_76731 = v__76656[(v_l_id_76649 + (256 * v_MWidthC_1 * v_w_id_76648) + (v_MWidthC_1 * v_i_76650))]; \n            if (v_index_76731 < 0) {\n              v__76667_0 = v__76665; \n            } else {\n              if (v_index_76731 >= v_VLength_3) {\n                v__76667_0 = v__76665; \n              } else {\n                v__76667_0 = v__76658[v_index_76731]; \n              }\n            }\n            v__76669[(v_i_76650 + (256 * v_MWidthC_1 * v_w_id_76648) + (256 * v_l_id_76649))] = absadd(v__76667_0, v__76657[(v_l_id_76649 + (256 * v_MWidthC_1 * v_w_id_76648) + (v_MWidthC_1 * v_i_76650))]); \n          }\n          /* end map_seq */\n          float v_tmp_76732 = 3.4028235E38f; \n          v__76670 = v_tmp_76732; \n          /* reduce_seq */\n          for (int v_i_76651 = 0; v_i_76651 < 256; v_i_76651 = (1 + v_i_76651)) {\n            v__76670 = clmin(v__76670, v__76669[(v_i_76651 + (256 * v_MWidthC_1 * v_w_id_76648) + (256 * v_l_id_76649))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76652 = 0; \n            v__76674[v_l_id_76649] = id(v__76670); \n          }\n          /* end map_seq */\n          v_l_id_76649 = atomic_inc(&(v_work_idx_6335)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6329; \n        v_work_idx_6329 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_76653 = atomic_inc(&(v_work_idx_6329)); \n        while((v_l_id_76653 < 1)){\n          float v_tmp_76735 = 3.4028235E38f; \n          v__57186 = v_tmp_76735; \n          /* reduce_seq */\n          for (int v_i_76654 = 0; v_i_76654 < v_MWidthC_1; v_i_76654 = (1 + v_i_76654)) {\n            v__57186 = clmin(v__57186, v__76674[(v_i_76654 + (v_MWidthC_1 * v_l_id_76653))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76655 = 0; \n            v__76679[v_w_id_76648] = doubleMultiplyAdd(v__57186, v__76660, v__76659[v_w_id_76648], v__76661); \n          }\n          /* end map_seq */\n          v_l_id_76653 = atomic_inc(&(v_work_idx_6329)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76648 = atomic_inc(v_work_idx_6337); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76656",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76657",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76658",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76659",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76660",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76661",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76663",
    "addressSpace" : "global",
    "size" : "4"
  }, {
    "variable" : "v__76669",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__76679",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76674",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}