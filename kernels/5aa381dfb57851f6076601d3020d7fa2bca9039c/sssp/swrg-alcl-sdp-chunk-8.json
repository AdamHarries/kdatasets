{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57802, const global float* restrict v__57803, const global float* restrict v__57804, const global float* restrict v__57805, float v__57806, float v__57807, global float* v__57820, global float* v__57814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57810; \n  float v__57815; \n  /* Private Memory */\n  float v__57812_0;\n  \n  for (int v_wg_id_57797 = get_group_id(0); v_wg_id_57797 < v_MHeight_2; v_wg_id_57797 = (v_wg_id_57797 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4562; \n      v_work_idx_4562 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_57798 = atomic_inc(&(v_work_idx_4562)); \n      while((v_l_id_57798 < 8)){\n        /* map_seq */\n        for (int v_i_57799 = 0; v_i_57799 < v_MWidthC_1; v_i_57799 = (1 + v_i_57799)) {\n          float v_tmp_57860 = 3.4028235E38f; \n          v__57810 = v_tmp_57860; \n          int v_index_57861 = v__57802[(v_i_57799 + (8 * v_MWidthC_1 * v_wg_id_57797) + (v_MWidthC_1 * v_l_id_57798))]; \n          if (v_index_57861 < 0) {\n            v__57812_0 = v__57810; \n          } else {\n            if (v_index_57861 >= v_VLength_3) {\n              v__57812_0 = v__57810; \n            } else {\n              v__57812_0 = v__57804[v_index_57861]; \n            }\n          }\n          v__57814[(v_i_57799 + (8 * v_MWidthC_1 * v_wg_id_57797) + (v_MWidthC_1 * v_l_id_57798))] = absadd(v__57812_0, v__57803[(v_i_57799 + (8 * v_MWidthC_1 * v_wg_id_57797) + (v_MWidthC_1 * v_l_id_57798))]); \n        }\n        /* end map_seq */\n        float v_tmp_57862 = 3.4028235E38f; \n        v__57815 = v_tmp_57862; \n        /* reduce_seq */\n        for (int v_i_57800 = 0; v_i_57800 < v_MWidthC_1; v_i_57800 = (1 + v_i_57800)) {\n          v__57815 = clmin(v__57815, v__57814[(v_i_57800 + (8 * v_MWidthC_1 * v_wg_id_57797) + (v_MWidthC_1 * v_l_id_57798))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_57801 = 0; \n          v__57820[(v_l_id_57798 + (8 * v_wg_id_57797))] = doubleMultiplyAdd(v__57815, v__57806, v__57805[(v_l_id_57798 + (8 * v_wg_id_57797))], v__57807); \n        }\n        /* end map_seq */\n        v_l_id_57798 = atomic_inc(&(v_work_idx_4562)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__57802",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57803",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57804",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57805",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  }, {
    "variable" : "v__57806",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57807",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__57814",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__57820",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}