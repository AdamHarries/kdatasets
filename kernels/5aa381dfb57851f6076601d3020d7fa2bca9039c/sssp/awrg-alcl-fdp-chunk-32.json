{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66207, const global float* restrict v__66208, const global float* restrict v__66209, const global float* restrict v__66210, float v__66211, float v__66212, global float* v__66226, global int* v__66214, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66216; \n  float v__66218; \n  /* Private Memory */\n  float v__66220_0;\n  \n  float v__66222_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5351 = v__66214; \n    local int v_w_id_66203; \n    if (get_local_id(0) == 0) {\n      v_w_id_66203 = atomic_inc(v_work_idx_5351); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66203 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5349; \n        v_work_idx_5349 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66204 = atomic_inc(&(v_work_idx_5349)); \n        while((v_l_id_66204 < 32)){\n          float v_tmp_66263 = 3.4028235E38f; \n          v__66216 = v_tmp_66263; \n          /* reduce_seq */\n          for (int v_i_66205 = 0; v_i_66205 < v_MWidthC_1; v_i_66205 = (1 + v_i_66205)) {\n            float v_tmp_66264 = 3.4028235E38f; \n            v__66218 = v_tmp_66264; \n            int v_index_66265 = v__66207[(v_i_66205 + (32 * v_MWidthC_1 * v_w_id_66203) + (v_MWidthC_1 * v_l_id_66204))]; \n            if (v_index_66265 < 0) {\n              v__66220_0 = v__66218; \n            } else {\n              if (v_index_66265 >= v_VLength_3) {\n                v__66220_0 = v__66218; \n              } else {\n                v__66220_0 = v__66209[v_index_66265]; \n              }\n            }\n            v__66222_0 = absadd(v__66220_0, v__66208[(v_i_66205 + (32 * v_MWidthC_1 * v_w_id_66203) + (v_MWidthC_1 * v_l_id_66204))]); \n            v__66216 = clmin(v__66222_0, v__66216); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66206 = 0; \n            v__66226[(v_l_id_66204 + (32 * v_w_id_66203))] = doubleMultiplyAdd(v__66216, v__66211, v__66210[(v_l_id_66204 + (32 * v_w_id_66203))], v__66212); \n          }\n          /* end map_seq */\n          v_l_id_66204 = atomic_inc(&(v_work_idx_5349)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66203 = atomic_inc(v_work_idx_5351); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66207",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66208",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66209",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66210",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  }, {
    "variable" : "v__66211",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66212",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66214",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66226",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}