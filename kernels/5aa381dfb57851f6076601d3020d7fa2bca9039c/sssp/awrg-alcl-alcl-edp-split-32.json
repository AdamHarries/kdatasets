{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__66840, const global float* restrict v__66841, const global float* restrict v__66842, const global float* restrict v__66843, float v__66844, float v__66845, global float* v__66865, global int* v__66847, local float* v__66860, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66849; \n  float v__66851; \n  float v__57186; \n  /* Private Memory */\n  float v__66853_0;\n  \n  float v__66855_0;\n  \n  int v__66859_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5423 = v__66847; \n    local int v_w_id_66833; \n    if (get_local_id(0) == 0) {\n      v_w_id_66833 = atomic_inc(v_work_idx_5423); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66833 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5421; \n        v_work_idx_5421 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66834 = atomic_inc(&(v_work_idx_5421)); \n        while((v_l_id_66834 < v_MWidthC_1)){\n          float v_tmp_66919 = 3.4028235E38f; \n          v__66849 = v_tmp_66919; \n          /* reduce_while_seq */\n          for (int v_i_66835 = 0; v_i_66835 < 32; v_i_66835 = (1 + v_i_66835)) {\n            v__66859_0 = check(v__66849, v__66840[(v_l_id_66834 + (32 * v_MWidthC_1 * v_w_id_66833) + (v_MWidthC_1 * v_i_66835))]); \n            if (v__66859_0) {\n            } else {\n              break;\n            }\n            float v_tmp_66920 = 3.4028235E38f; \n            v__66851 = v_tmp_66920; \n            int v_index_66921 = v__66840[(v_l_id_66834 + (32 * v_MWidthC_1 * v_w_id_66833) + (v_MWidthC_1 * v_i_66835))]; \n            if (v_index_66921 < 0) {\n              v__66853_0 = v__66851; \n            } else {\n              if (v_index_66921 >= v_VLength_3) {\n                v__66853_0 = v__66851; \n              } else {\n                v__66853_0 = v__66842[v_index_66921]; \n              }\n            }\n            v__66855_0 = absadd(v__66853_0, v__66841[(v_l_id_66834 + (32 * v_MWidthC_1 * v_w_id_66833) + (v_MWidthC_1 * v_i_66835))]); \n            v__66849 = clmin(v__66855_0, v__66849); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66836 = 0; \n            v__66860[v_l_id_66834] = id(v__66849); \n          }\n          /* end map_seq */\n          v_l_id_66834 = atomic_inc(&(v_work_idx_5421)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5416; \n        v_work_idx_5416 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_66837 = atomic_inc(&(v_work_idx_5416)); \n        while((v_l_id_66837 < 1)){\n          float v_tmp_66924 = 3.4028235E38f; \n          v__57186 = v_tmp_66924; \n          /* reduce_seq */\n          for (int v_i_66838 = 0; v_i_66838 < v_MWidthC_1; v_i_66838 = (1 + v_i_66838)) {\n            v__57186 = clmin(v__57186, v__66860[(v_i_66838 + (v_MWidthC_1 * v_l_id_66837))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66839 = 0; \n            v__66865[v_w_id_66833] = doubleMultiplyAdd(v__57186, v__66844, v__66843[v_w_id_66833], v__66845); \n          }\n          /* end map_seq */\n          v_l_id_66837 = atomic_inc(&(v_work_idx_5416)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66833 = atomic_inc(v_work_idx_5423); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66840",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66841",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66842",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66843",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66844",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66845",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66847",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66865",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66860",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}