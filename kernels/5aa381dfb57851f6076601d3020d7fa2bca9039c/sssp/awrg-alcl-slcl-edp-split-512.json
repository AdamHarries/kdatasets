{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__79887, const global float* restrict v__79888, const global float* restrict v__79889, const global float* restrict v__79890, float v__79891, float v__79892, global float* v__79912, global int* v__79894, local float* v__79907, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79896; \n  float v__79898; \n  float v__57186; \n  /* Private Memory */\n  float v__79900_0;\n  \n  float v__79902_0;\n  \n  int v__79906_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6637 = v__79894; \n    local int v_w_id_79880; \n    if (get_local_id(0) == 0) {\n      v_w_id_79880 = atomic_inc(v_work_idx_6637); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79880 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6635; \n        v_work_idx_6635 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_79881 = atomic_inc(&(v_work_idx_6635)); \n        while((v_l_id_79881 < v_MWidthC_1)){\n          float v_tmp_79970 = 3.4028235E38f; \n          v__79896 = v_tmp_79970; \n          /* reduce_while_seq */\n          for (int v_i_79882 = 0; v_i_79882 < 512; v_i_79882 = (1 + v_i_79882)) {\n            v__79906_0 = check(v__79896, v__79887[(v_l_id_79881 + (512 * v_MWidthC_1 * v_w_id_79880) + (v_MWidthC_1 * v_i_79882))]); \n            if (v__79906_0) {\n            } else {\n              break;\n            }\n            float v_tmp_79971 = 3.4028235E38f; \n            v__79898 = v_tmp_79971; \n            int v_index_79972 = v__79887[(v_l_id_79881 + (512 * v_MWidthC_1 * v_w_id_79880) + (v_MWidthC_1 * v_i_79882))]; \n            if (v_index_79972 < 0) {\n              v__79900_0 = v__79898; \n            } else {\n              if (v_index_79972 >= v_VLength_3) {\n                v__79900_0 = v__79898; \n              } else {\n                v__79900_0 = v__79889[v_index_79972]; \n              }\n            }\n            v__79902_0 = absadd(v__79900_0, v__79888[(v_l_id_79881 + (512 * v_MWidthC_1 * v_w_id_79880) + (v_MWidthC_1 * v_i_79882))]); \n            v__79896 = clmin(v__79902_0, v__79896); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79883 = 0; \n            v__79907[v_l_id_79881] = id(v__79896); \n          }\n          /* end map_seq */\n          v_l_id_79881 = atomic_inc(&(v_work_idx_6635)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79884 = get_local_id(0); \n        float v_tmp_79975 = 3.4028235E38f; \n        v__57186 = v_tmp_79975; \n        /* reduce_seq */\n        for (int v_i_79885 = 0; v_i_79885 < v_MWidthC_1; v_i_79885 = (1 + v_i_79885)) {\n          v__57186 = clmin(v__57186, v__79907[(v_i_79885 + (v_MWidthC_1 * v_l_id_79884))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79886 = 0; \n          v__79912[v_w_id_79880] = doubleMultiplyAdd(v__57186, v__79891, v__79890[v_w_id_79880], v__79892); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79880 = atomic_inc(v_work_idx_6637); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79887",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79888",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79889",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79890",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79891",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79892",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79894",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79912",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79907",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}