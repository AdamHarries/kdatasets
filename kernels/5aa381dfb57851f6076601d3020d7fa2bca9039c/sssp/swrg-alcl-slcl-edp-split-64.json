{
  "name" : "swrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__68223, const global float* restrict v__68224, const global float* restrict v__68225, const global float* restrict v__68226, float v__68227, float v__68228, global float* v__68247, local float* v__68242, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68231; \n  float v__68233; \n  float v__57186; \n  /* Private Memory */\n  float v__68235_0;\n  \n  float v__68237_0;\n  \n  int v__68241_0;\n  \n  for (int v_wg_id_68216 = get_group_id(0); v_wg_id_68216 < v_MHeight_2; v_wg_id_68216 = (v_wg_id_68216 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5538; \n      v_work_idx_5538 = 0; \n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      int v_l_id_68217 = atomic_inc(&(v_work_idx_5538)); \n      while((v_l_id_68217 < v_MWidthC_1)){\n        float v_tmp_68307 = 3.4028235E38f; \n        v__68231 = v_tmp_68307; \n        /* reduce_while_seq */\n        for (int v_i_68218 = 0; v_i_68218 < 64; v_i_68218 = (1 + v_i_68218)) {\n          v__68241_0 = check(v__68231, v__68223[(v_l_id_68217 + (64 * v_MWidthC_1 * v_wg_id_68216) + (v_MWidthC_1 * v_i_68218))]); \n          if (v__68241_0) {\n          } else {\n            break;\n          }\n          float v_tmp_68308 = 3.4028235E38f; \n          v__68233 = v_tmp_68308; \n          int v_index_68309 = v__68223[(v_l_id_68217 + (64 * v_MWidthC_1 * v_wg_id_68216) + (v_MWidthC_1 * v_i_68218))]; \n          if (v_index_68309 < 0) {\n            v__68235_0 = v__68233; \n          } else {\n            if (v_index_68309 >= v_VLength_3) {\n              v__68235_0 = v__68233; \n            } else {\n              v__68235_0 = v__68225[v_index_68309]; \n            }\n          }\n          v__68237_0 = absadd(v__68235_0, v__68224[(v_l_id_68217 + (64 * v_MWidthC_1 * v_wg_id_68216) + (v_MWidthC_1 * v_i_68218))]); \n          v__68231 = clmin(v__68237_0, v__68231); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68219 = 0; \n          v__68242[v_l_id_68217] = id(v__68231); \n        }\n        /* end map_seq */\n        v_l_id_68217 = atomic_inc(&(v_work_idx_5538)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_68220 = get_local_id(0); \n      float v_tmp_68312 = 3.4028235E38f; \n      v__57186 = v_tmp_68312; \n      /* reduce_seq */\n      for (int v_i_68221 = 0; v_i_68221 < v_MWidthC_1; v_i_68221 = (1 + v_i_68221)) {\n        v__57186 = clmin(v__57186, v__68242[(v_i_68221 + (v_MWidthC_1 * v_l_id_68220))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_68222 = 0; \n        v__68247[v_wg_id_68216] = doubleMultiplyAdd(v__57186, v__68227, v__68226[v_wg_id_68216], v__68228); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__68223",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68224",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68225",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68227",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68228",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68242",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}