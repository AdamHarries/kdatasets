{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18713, const global float* restrict v__18714, const global float* restrict v__18715, const global float* restrict v__18716, float v__18717, float v__18718, global float* v__18732, global int* v__18720, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18722; \n  float v__18724; \n  /* Private Memory */\n  float v__18726_0;\n  \n  float v__18728_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_909 = v__18720; \n    local int v_w_id_18709; \n    if (get_local_id(0) == 0) {\n      v_w_id_18709 = atomic_inc(v_work_idx_909); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18709 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_907; \n        v_work_idx_907 = 0; \n        int v_l_id_18710 = atomic_inc(&(v_work_idx_907)); \n        while((v_l_id_18710 < 32)){\n          float v_tmp_18769 = 0.0f; \n          v__18722 = v_tmp_18769; \n          /* reduce_seq */\n          for (int v_i_18711 = 0; v_i_18711 < v_MWidthC_1; v_i_18711 = (1 + v_i_18711)) {\n            float v_tmp_18770 = 0.0f; \n            v__18724 = v_tmp_18770; \n            int v_index_18771 = v__18713[(v_i_18711 + (32 * v_MWidthC_1 * v_w_id_18709) + (v_MWidthC_1 * v_l_id_18710))]; \n            if (v_index_18771 < 0) {\n              v__18726_0 = v__18724; \n            } else {\n              if (v_index_18771 >= v_VLength_3) {\n                v__18726_0 = v__18724; \n              } else {\n                v__18726_0 = v__18715[v_index_18771]; \n              }\n            }\n            v__18728_0 = mult(v__18726_0, v__18714[(v_i_18711 + (32 * v_MWidthC_1 * v_w_id_18709) + (v_MWidthC_1 * v_l_id_18710))]); \n            v__18722 = add(v__18728_0, v__18722); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18712 = 0; \n            v__18732[(v_l_id_18710 + (32 * v_w_id_18709))] = doubleMultiplyAdd(v__18722, v__18717, v__18716[(v_l_id_18710 + (32 * v_w_id_18709))], v__18718); \n          }\n          /* end map_seq */\n          v_l_id_18710 = atomic_inc(&(v_work_idx_907)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18709 = atomic_inc(v_work_idx_909); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__18713",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18715",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18716",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18717",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18718",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18720",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18732",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}