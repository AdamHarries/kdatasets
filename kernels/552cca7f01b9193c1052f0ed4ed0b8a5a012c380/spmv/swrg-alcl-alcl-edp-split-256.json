{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__27681, const global float* restrict v__27682, const global float* restrict v__27683, const global float* restrict v__27684, float v__27685, float v__27686, global float* v__27705, local float* v__27700, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27689; \n  float v__27691; \n  float v__9384; \n  /* Private Memory */\n  float v__27693_0;\n  \n  float v__27695_0;\n  \n  int v__27699_0;\n  \n  for (int v_wg_id_27674 = get_group_id(0); v_wg_id_27674 < v_MHeight_2; v_wg_id_27674 = (v_wg_id_27674 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1751; \n      v_work_idx_1751 = 0; \n      int v_l_id_27675 = atomic_inc(&(v_work_idx_1751)); \n      while((v_l_id_27675 < v_MWidthC_1)){\n        float v_tmp_27761 = 0.0f; \n        v__27689 = v_tmp_27761; \n        /* reduce_while_seq */\n        for (int v_i_27676 = 0; v_i_27676 < 256; v_i_27676 = (1 + v_i_27676)) {\n          v__27699_0 = check(v__27689, v__27681[(v_l_id_27675 + (256 * v_MWidthC_1 * v_wg_id_27674) + (v_MWidthC_1 * v_i_27676))]); \n          if (v__27699_0) {\n          } else {\n            break;\n          }\n          float v_tmp_27762 = 0.0f; \n          v__27691 = v_tmp_27762; \n          int v_index_27763 = v__27681[(v_l_id_27675 + (256 * v_MWidthC_1 * v_wg_id_27674) + (v_MWidthC_1 * v_i_27676))]; \n          if (v_index_27763 < 0) {\n            v__27693_0 = v__27691; \n          } else {\n            if (v_index_27763 >= v_VLength_3) {\n              v__27693_0 = v__27691; \n            } else {\n              v__27693_0 = v__27683[v_index_27763]; \n            }\n          }\n          v__27695_0 = mult(v__27693_0, v__27682[(v_l_id_27675 + (256 * v_MWidthC_1 * v_wg_id_27674) + (v_MWidthC_1 * v_i_27676))]); \n          v__27689 = add(v__27695_0, v__27689); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27677 = 0; \n          v__27700[v_l_id_27675] = id(v__27689); \n        }\n        /* end map_seq */\n        v_l_id_27675 = atomic_inc(&(v_work_idx_1751)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1746; \n      v_work_idx_1746 = 0; \n      int v_l_id_27678 = atomic_inc(&(v_work_idx_1746)); \n      while((v_l_id_27678 < 1)){\n        float v_tmp_27766 = 0.0f; \n        v__9384 = v_tmp_27766; \n        /* reduce_seq */\n        for (int v_i_27679 = 0; v_i_27679 < v_MWidthC_1; v_i_27679 = (1 + v_i_27679)) {\n          v__9384 = add(v__9384, v__27700[(v_i_27679 + (v_MWidthC_1 * v_l_id_27678))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27680 = 0; \n          v__27705[v_wg_id_27674] = doubleMultiplyAdd(v__9384, v__27685, v__27684[v_wg_id_27674], v__27686); \n        }\n        /* end map_seq */\n        v_l_id_27678 = atomic_inc(&(v_work_idx_1746)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__27681",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27682",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27683",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27685",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27686",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__27705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27700",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}