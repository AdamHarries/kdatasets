{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17116, const global float* restrict v__17117, const global float* restrict v__17118, const global float* restrict v__17119, float v__17120, float v__17121, global float* v__17136, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17123; \n  float v__17126; \n  /* Private Memory */\n  float v__17128_0;\n  \n  float v__17130_0;\n  \n  int v__17134_0;\n  \n  for (int v_wg_id_17112 = get_group_id(0); v_wg_id_17112 < ((v_MHeight_2)/(32)); v_wg_id_17112 = (v_wg_id_17112 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_756; \n      v_work_idx_756 = 0; \n      int v_l_id_17113 = atomic_inc(&(v_work_idx_756)); \n      while((v_l_id_17113 < 32)){\n        float v_tmp_17180 = 0.0f; \n        v__17123 = v_tmp_17180; \n        /* reduce_while_seq */\n        for (int v_i_17114 = 0; v_i_17114 < v_MWidthC_1; v_i_17114 = (1 + v_i_17114)) {\n          v__17134_0 = check(v__17123, v__17116[(v_i_17114 + (32 * v_MWidthC_1 * v_wg_id_17112) + (v_MWidthC_1 * v_l_id_17113))]); \n          if (v__17134_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17181 = 0.0f; \n          v__17126 = v_tmp_17181; \n          int v_index_17182 = v__17116[(v_i_17114 + (32 * v_MWidthC_1 * v_wg_id_17112) + (v_MWidthC_1 * v_l_id_17113))]; \n          if (v_index_17182 < 0) {\n            v__17128_0 = v__17126; \n          } else {\n            if (v_index_17182 >= v_VLength_3) {\n              v__17128_0 = v__17126; \n            } else {\n              v__17128_0 = v__17118[v_index_17182]; \n            }\n          }\n          v__17130_0 = mult(v__17128_0, v__17117[(v_i_17114 + (32 * v_MWidthC_1 * v_wg_id_17112) + (v_MWidthC_1 * v_l_id_17113))]); \n          v__17123 = add(v__17130_0, v__17123); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17115 = 0; \n          v__17136[(v_l_id_17113 + (32 * v_wg_id_17112))] = doubleMultiplyAdd(v__17123, v__17120, v__17119[(v_l_id_17113 + (32 * v_wg_id_17112))], v__17121); \n        }\n        /* end map_seq */\n        v_l_id_17113 = atomic_inc(&(v_work_idx_756)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17117",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17118",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17119",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17120",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17121",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}