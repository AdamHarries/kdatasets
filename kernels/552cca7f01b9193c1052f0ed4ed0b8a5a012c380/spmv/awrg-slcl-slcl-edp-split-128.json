{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__24889, const global float* restrict v__24890, const global float* restrict v__24891, const global float* restrict v__24892, float v__24893, float v__24894, global float* v__24914, global int* v__24896, local float* v__24909, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24898; \n  float v__24900; \n  float v__9384; \n  /* Private Memory */\n  float v__24902_0;\n  \n  float v__24904_0;\n  \n  int v__24908_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1487 = v__24896; \n    local int v_w_id_24882; \n    if (get_local_id(0) == 0) {\n      v_w_id_24882 = atomic_inc(v_work_idx_1487); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24882 < v_MHeight_2)){\n      for (int v_l_id_24883 = get_local_id(0); v_l_id_24883 < v_MWidthC_1; v_l_id_24883 = (v_l_id_24883 + get_local_size(0))) {\n        float v_tmp_24980 = 0.0f; \n        v__24898 = v_tmp_24980; \n        /* reduce_while_seq */\n        for (int v_i_24884 = 0; v_i_24884 < 128; v_i_24884 = (1 + v_i_24884)) {\n          v__24908_0 = check(v__24898, v__24889[(v_l_id_24883 + (128 * v_MWidthC_1 * v_w_id_24882) + (v_MWidthC_1 * v_i_24884))]); \n          if (v__24908_0) {\n          } else {\n            break;\n          }\n          float v_tmp_24981 = 0.0f; \n          v__24900 = v_tmp_24981; \n          int v_index_24982 = v__24889[(v_l_id_24883 + (128 * v_MWidthC_1 * v_w_id_24882) + (v_MWidthC_1 * v_i_24884))]; \n          if (v_index_24982 < 0) {\n            v__24902_0 = v__24900; \n          } else {\n            if (v_index_24982 >= v_VLength_3) {\n              v__24902_0 = v__24900; \n            } else {\n              v__24902_0 = v__24891[v_index_24982]; \n            }\n          }\n          v__24904_0 = mult(v__24902_0, v__24890[(v_l_id_24883 + (128 * v_MWidthC_1 * v_w_id_24882) + (v_MWidthC_1 * v_i_24884))]); \n          v__24898 = add(v__24904_0, v__24898); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24885 = 0; \n          v__24909[v_l_id_24883] = id(v__24898); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_24886 = get_local_id(0); \n        float v_tmp_24985 = 0.0f; \n        v__9384 = v_tmp_24985; \n        /* reduce_seq */\n        for (int v_i_24887 = 0; v_i_24887 < v_MWidthC_1; v_i_24887 = (1 + v_i_24887)) {\n          v__9384 = add(v__9384, v__24909[(v_i_24887 + (v_MWidthC_1 * v_l_id_24886))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24888 = 0; \n          v__24914[v_w_id_24882] = doubleMultiplyAdd(v__9384, v__24893, v__24892[v_w_id_24882], v__24894); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24882 = atomic_inc(v_work_idx_1487); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__24889",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24890",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24891",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24893",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24894",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24896",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24914",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24909",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}