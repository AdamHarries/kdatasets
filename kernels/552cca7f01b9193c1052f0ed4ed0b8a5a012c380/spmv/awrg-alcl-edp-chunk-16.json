{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15450, const global float* restrict v__15451, const global float* restrict v__15452, const global float* restrict v__15453, float v__15454, float v__15455, global float* v__15471, global int* v__15457, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15458; \n  float v__15461; \n  /* Private Memory */\n  float v__15463_0;\n  \n  float v__15465_0;\n  \n  int v__15469_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_604 = v__15457; \n    local int v_w_id_15446; \n    if (get_local_id(0) == 0) {\n      v_w_id_15446 = atomic_inc(v_work_idx_604); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15446 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_602; \n        v_work_idx_602 = 0; \n        int v_l_id_15447 = atomic_inc(&(v_work_idx_602)); \n        while((v_l_id_15447 < 16)){\n          float v_tmp_15514 = 0.0f; \n          v__15458 = v_tmp_15514; \n          /* reduce_while_seq */\n          for (int v_i_15448 = 0; v_i_15448 < v_MWidthC_1; v_i_15448 = (1 + v_i_15448)) {\n            v__15469_0 = check(v__15458, v__15450[(v_i_15448 + (16 * v_MWidthC_1 * v_w_id_15446) + (v_MWidthC_1 * v_l_id_15447))]); \n            if (v__15469_0) {\n            } else {\n              break;\n            }\n            float v_tmp_15515 = 0.0f; \n            v__15461 = v_tmp_15515; \n            int v_index_15516 = v__15450[(v_i_15448 + (16 * v_MWidthC_1 * v_w_id_15446) + (v_MWidthC_1 * v_l_id_15447))]; \n            if (v_index_15516 < 0) {\n              v__15463_0 = v__15461; \n            } else {\n              if (v_index_15516 >= v_VLength_3) {\n                v__15463_0 = v__15461; \n              } else {\n                v__15463_0 = v__15452[v_index_15516]; \n              }\n            }\n            v__15465_0 = mult(v__15463_0, v__15451[(v_i_15448 + (16 * v_MWidthC_1 * v_w_id_15446) + (v_MWidthC_1 * v_l_id_15447))]); \n            v__15458 = add(v__15465_0, v__15458); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15449 = 0; \n            v__15471[(v_l_id_15447 + (16 * v_w_id_15446))] = doubleMultiplyAdd(v__15458, v__15454, v__15453[(v_l_id_15447 + (16 * v_w_id_15446))], v__15455); \n          }\n          /* end map_seq */\n          v_l_id_15447 = atomic_inc(&(v_work_idx_602)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15446 = atomic_inc(v_work_idx_604); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__15450",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15451",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15452",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15454",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15455",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15457",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}