{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14788, const global float* restrict v__14789, const global float* restrict v__14790, const global float* restrict v__14791, float v__14792, float v__14793, global float* v__14811, global int* v__14795, local float* v__14806, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14797; \n  float v__14799; \n  float v__9384; \n  /* Private Memory */\n  float v__14801_0;\n  \n  float v__14803_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_542 = v__14795; \n    local int v_w_id_14781; \n    if (get_local_id(0) == 0) {\n      v_w_id_14781 = atomic_inc(v_work_idx_542); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14781 < v_MHeight_2)){\n      for (int v_l_id_14782 = get_local_id(0); v_l_id_14782 < v_MWidthC_1; v_l_id_14782 = (v_l_id_14782 + get_local_size(0))) {\n        float v_tmp_14874 = 0.0f; \n        v__14797 = v_tmp_14874; \n        /* reduce_seq */\n        for (int v_i_14783 = 0; v_i_14783 < 16; v_i_14783 = (1 + v_i_14783)) {\n          float v_tmp_14875 = 0.0f; \n          v__14799 = v_tmp_14875; \n          int v_index_14876 = v__14788[(v_l_id_14782 + (16 * v_MWidthC_1 * v_w_id_14781) + (v_MWidthC_1 * v_i_14783))]; \n          if (v_index_14876 < 0) {\n            v__14801_0 = v__14799; \n          } else {\n            if (v_index_14876 >= v_VLength_3) {\n              v__14801_0 = v__14799; \n            } else {\n              v__14801_0 = v__14790[v_index_14876]; \n            }\n          }\n          v__14803_0 = mult(v__14801_0, v__14789[(v_l_id_14782 + (16 * v_MWidthC_1 * v_w_id_14781) + (v_MWidthC_1 * v_i_14783))]); \n          v__14797 = add(v__14803_0, v__14797); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14784 = 0; \n          v__14806[v_l_id_14782] = id(v__14797); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14785 = get_local_id(0); \n        float v_tmp_14879 = 0.0f; \n        v__9384 = v_tmp_14879; \n        /* reduce_seq */\n        for (int v_i_14786 = 0; v_i_14786 < v_MWidthC_1; v_i_14786 = (1 + v_i_14786)) {\n          v__9384 = add(v__9384, v__14806[(v_i_14786 + (v_MWidthC_1 * v_l_id_14785))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14787 = 0; \n          v__14811[v_w_id_14781] = doubleMultiplyAdd(v__9384, v__14792, v__14791[v_w_id_14781], v__14793); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14781 = atomic_inc(v_work_idx_542); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__14788",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14789",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14790",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14792",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14793",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14795",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14811",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14806",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}