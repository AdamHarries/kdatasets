{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10105, const global float* restrict v__10106, const global float* restrict v__10107, const global float* restrict v__10108, float v__10109, float v__10110, global float* v__10127, local float* v__10122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10113; \n  float v__10115; \n  float v__9384; \n  /* Private Memory */\n  float v__10117_0;\n  \n  float v__10119_0;\n  \n  for (int v_wg_id_10098 = get_group_id(0); v_wg_id_10098 < v_MHeight_2; v_wg_id_10098 = (v_wg_id_10098 + get_num_groups(0))) {\n    for (int v_l_id_10099 = get_local_id(0); v_l_id_10099 < v_MWidthC_1; v_l_id_10099 = (v_l_id_10099 + get_local_size(0))) {\n      float v_tmp_10188 = 0.0f; \n      v__10113 = v_tmp_10188; \n      /* reduce_seq */\n      for (int v_i_10100 = 0; v_i_10100 < 8; v_i_10100 = (1 + v_i_10100)) {\n        float v_tmp_10189 = 0.0f; \n        v__10115 = v_tmp_10189; \n        int v_index_10190 = v__10105[(v_l_id_10099 + (8 * v_MWidthC_1 * v_wg_id_10098) + (v_MWidthC_1 * v_i_10100))]; \n        if (v_index_10190 < 0) {\n          v__10117_0 = v__10115; \n        } else {\n          if (v_index_10190 >= v_VLength_3) {\n            v__10117_0 = v__10115; \n          } else {\n            v__10117_0 = v__10107[v_index_10190]; \n          }\n        }\n        v__10119_0 = mult(v__10117_0, v__10106[(v_l_id_10099 + (8 * v_MWidthC_1 * v_wg_id_10098) + (v_MWidthC_1 * v_i_10100))]); \n        v__10113 = add(v__10119_0, v__10113); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10101 = 0; \n        v__10122[v_l_id_10099] = id(v__10113); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_100; \n      v_work_idx_100 = 0; \n      int v_l_id_10102 = atomic_inc(&(v_work_idx_100)); \n      while((v_l_id_10102 < 1)){\n        float v_tmp_10193 = 0.0f; \n        v__9384 = v_tmp_10193; \n        /* reduce_seq */\n        for (int v_i_10103 = 0; v_i_10103 < v_MWidthC_1; v_i_10103 = (1 + v_i_10103)) {\n          v__9384 = add(v__9384, v__10122[(v_i_10103 + (v_MWidthC_1 * v_l_id_10102))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10104 = 0; \n          v__10127[v_wg_id_10098] = doubleMultiplyAdd(v__9384, v__10109, v__10108[v_wg_id_10098], v__10110); \n        }\n        /* end map_seq */\n        v_l_id_10102 = atomic_inc(&(v_work_idx_100)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__10105",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10106",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10107",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10109",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10110",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10122",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}