{
  "name" : "swrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16769, const global float* restrict v__16770, const global float* restrict v__16771, const global float* restrict v__16772, float v__16773, float v__16774, global float* v__16791, local float* v__16786, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16777; \n  float v__16779; \n  float v__9384; \n  /* Private Memory */\n  float v__16781_0;\n  \n  float v__16783_0;\n  \n  for (int v_wg_id_16762 = get_group_id(0); v_wg_id_16762 < v_MHeight_2; v_wg_id_16762 = (v_wg_id_16762 + get_num_groups(0))) {\n    for (int v_l_id_16763 = get_local_id(0); v_l_id_16763 < v_MWidthC_1; v_l_id_16763 = (v_l_id_16763 + get_local_size(0))) {\n      float v_tmp_16852 = 0.0f; \n      v__16777 = v_tmp_16852; \n      /* reduce_seq */\n      for (int v_i_16764 = 0; v_i_16764 < 32; v_i_16764 = (1 + v_i_16764)) {\n        float v_tmp_16853 = 0.0f; \n        v__16779 = v_tmp_16853; \n        int v_index_16854 = v__16769[(v_l_id_16763 + (32 * v_MWidthC_1 * v_wg_id_16762) + (v_MWidthC_1 * v_i_16764))]; \n        if (v_index_16854 < 0) {\n          v__16781_0 = v__16779; \n        } else {\n          if (v_index_16854 >= v_VLength_3) {\n            v__16781_0 = v__16779; \n          } else {\n            v__16781_0 = v__16771[v_index_16854]; \n          }\n        }\n        v__16783_0 = mult(v__16781_0, v__16770[(v_l_id_16763 + (32 * v_MWidthC_1 * v_wg_id_16762) + (v_MWidthC_1 * v_i_16764))]); \n        v__16777 = add(v__16783_0, v__16777); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16765 = 0; \n        v__16786[v_l_id_16763] = id(v__16777); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_724; \n      v_work_idx_724 = 0; \n      int v_l_id_16766 = atomic_inc(&(v_work_idx_724)); \n      while((v_l_id_16766 < 1)){\n        float v_tmp_16857 = 0.0f; \n        v__9384 = v_tmp_16857; \n        /* reduce_seq */\n        for (int v_i_16767 = 0; v_i_16767 < v_MWidthC_1; v_i_16767 = (1 + v_i_16767)) {\n          v__9384 = add(v__9384, v__16786[(v_i_16767 + (v_MWidthC_1 * v_l_id_16766))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16768 = 0; \n          v__16791[v_wg_id_16762] = doubleMultiplyAdd(v__9384, v__16773, v__16772[v_wg_id_16762], v__16774); \n        }\n        /* end map_seq */\n        v_l_id_16766 = atomic_inc(&(v_work_idx_724)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__16769",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16770",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16771",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16773",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16774",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__16791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16786",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}