{
  "name" : "swrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16110, const global float* restrict v__16111, const global float* restrict v__16112, const global float* restrict v__16113, float v__16114, float v__16115, global float* v__16128, global float* v__16122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16118; \n  float v__16123; \n  /* Private Memory */\n  float v__16120_0;\n  \n  for (int v_wg_id_16105 = get_group_id(0); v_wg_id_16105 < ((v_MHeight_2)/(32)); v_wg_id_16105 = (v_wg_id_16105 + get_num_groups(0))) {\n    for (int v_l_id_16106 = get_local_id(0); v_l_id_16106 < 32; v_l_id_16106 = (v_l_id_16106 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_16107 = 0; v_i_16107 < v_MWidthC_1; v_i_16107 = (1 + v_i_16107)) {\n        float v_tmp_16172 = 0.0f; \n        v__16118 = v_tmp_16172; \n        int v_index_16173 = v__16110[(v_i_16107 + (32 * v_MWidthC_1 * v_wg_id_16105) + (v_MWidthC_1 * v_l_id_16106))]; \n        if (v_index_16173 < 0) {\n          v__16120_0 = v__16118; \n        } else {\n          if (v_index_16173 >= v_VLength_3) {\n            v__16120_0 = v__16118; \n          } else {\n            v__16120_0 = v__16112[v_index_16173]; \n          }\n        }\n        v__16122[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_16105) + (-1 * v_i_16107) + (v_MWidthC_1 * v_l_id_16106))] = mult(v__16120_0, v__16111[(v_i_16107 + (32 * v_MWidthC_1 * v_wg_id_16105) + (v_MWidthC_1 * v_l_id_16106))]); \n      }\n      /* end map_seq */\n      float v_tmp_16174 = 0.0f; \n      v__16123 = v_tmp_16174; \n      /* reduce_seq */\n      for (int v_i_16108 = 0; v_i_16108 < v_MWidthC_1; v_i_16108 = (1 + v_i_16108)) {\n        v__16123 = add(v__16123, v__16122[(v_i_16108 + (32 * v_MWidthC_1 * v_wg_id_16105) + (v_MWidthC_1 * v_l_id_16106))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16109 = 0; \n        v__16128[(v_l_id_16106 + (32 * v_wg_id_16105))] = doubleMultiplyAdd(v__16123, v__16114, v__16113[(v_l_id_16106 + (32 * v_wg_id_16105))], v__16115); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16112",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16113",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16114",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16115",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16122",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}