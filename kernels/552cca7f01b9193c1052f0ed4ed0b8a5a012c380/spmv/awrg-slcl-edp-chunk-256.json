{
  "name" : "awrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27926, const global float* restrict v__27927, const global float* restrict v__27928, const global float* restrict v__27929, float v__27930, float v__27931, global float* v__27947, global int* v__27933, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27934; \n  float v__27937; \n  /* Private Memory */\n  float v__27939_0;\n  \n  float v__27941_0;\n  \n  int v__27945_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1771 = v__27933; \n    local int v_w_id_27922; \n    if (get_local_id(0) == 0) {\n      v_w_id_27922 = atomic_inc(v_work_idx_1771); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_27922 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_27923 = get_local_id(0); v_l_id_27923 < 256; v_l_id_27923 = (v_l_id_27923 + get_local_size(0))) {\n        float v_tmp_27994 = 0.0f; \n        v__27934 = v_tmp_27994; \n        /* reduce_while_seq */\n        for (int v_i_27924 = 0; v_i_27924 < v_MWidthC_1; v_i_27924 = (1 + v_i_27924)) {\n          v__27945_0 = check(v__27934, v__27926[(v_i_27924 + (256 * v_MWidthC_1 * v_w_id_27922) + (v_MWidthC_1 * v_l_id_27923))]); \n          if (v__27945_0) {\n          } else {\n            break;\n          }\n          float v_tmp_27995 = 0.0f; \n          v__27937 = v_tmp_27995; \n          int v_index_27996 = v__27926[(v_i_27924 + (256 * v_MWidthC_1 * v_w_id_27922) + (v_MWidthC_1 * v_l_id_27923))]; \n          if (v_index_27996 < 0) {\n            v__27939_0 = v__27937; \n          } else {\n            if (v_index_27996 >= v_VLength_3) {\n              v__27939_0 = v__27937; \n            } else {\n              v__27939_0 = v__27928[v_index_27996]; \n            }\n          }\n          v__27941_0 = mult(v__27939_0, v__27927[(v_i_27924 + (256 * v_MWidthC_1 * v_w_id_27922) + (v_MWidthC_1 * v_l_id_27923))]); \n          v__27934 = add(v__27941_0, v__27934); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27925 = 0; \n          v__27947[(v_l_id_27923 + (256 * v_w_id_27922))] = doubleMultiplyAdd(v__27934, v__27930, v__27929[(v_l_id_27923 + (256 * v_w_id_27922))], v__27931); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_27922 = atomic_inc(v_work_idx_1771); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__27926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27927",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27928",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27930",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27931",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__27933",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__27947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}