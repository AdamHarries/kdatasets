{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11193, const global float* restrict v__11194, const global float* restrict v__11195, const global float* restrict v__11196, float v__11197, float v__11198, global float* v__11212, global int* v__11200, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11202; \n  float v__11204; \n  /* Private Memory */\n  float v__11206_0;\n  \n  float v__11208_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_205 = v__11200; \n    local int v_w_id_11189; \n    if (get_local_id(0) == 0) {\n      v_w_id_11189 = atomic_inc(v_work_idx_205); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11189 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_11190 = get_local_id(0); v_l_id_11190 < 8; v_l_id_11190 = (v_l_id_11190 + get_local_size(0))) {\n        float v_tmp_11253 = 0.0f; \n        v__11202 = v_tmp_11253; \n        /* reduce_seq */\n        for (int v_i_11191 = 0; v_i_11191 < v_MWidthC_1; v_i_11191 = (1 + v_i_11191)) {\n          float v_tmp_11254 = 0.0f; \n          v__11204 = v_tmp_11254; \n          int v_index_11255 = v__11193[(v_i_11191 + (8 * v_MWidthC_1 * v_w_id_11189) + (v_MWidthC_1 * v_l_id_11190))]; \n          if (v_index_11255 < 0) {\n            v__11206_0 = v__11204; \n          } else {\n            if (v_index_11255 >= v_VLength_3) {\n              v__11206_0 = v__11204; \n            } else {\n              v__11206_0 = v__11195[v_index_11255]; \n            }\n          }\n          v__11208_0 = mult(v__11206_0, v__11194[(v_i_11191 + (8 * v_MWidthC_1 * v_w_id_11189) + (v_MWidthC_1 * v_l_id_11190))]); \n          v__11202 = add(v__11208_0, v__11202); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11192 = 0; \n          v__11212[(v_l_id_11190 + (8 * v_w_id_11189))] = doubleMultiplyAdd(v__11202, v__11197, v__11196[(v_l_id_11190 + (8 * v_w_id_11189))], v__11198); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_11189 = atomic_inc(v_work_idx_205); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11194",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11195",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11196",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11197",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11198",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11200",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}