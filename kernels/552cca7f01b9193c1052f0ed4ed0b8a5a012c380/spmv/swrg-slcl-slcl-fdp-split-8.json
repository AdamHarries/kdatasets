{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9785, const global float* restrict v__9786, const global float* restrict v__9787, const global float* restrict v__9788, float v__9789, float v__9790, global float* v__9807, local float* v__9802, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9793; \n  float v__9795; \n  float v__9384; \n  /* Private Memory */\n  float v__9797_0;\n  \n  float v__9799_0;\n  \n  for (int v_wg_id_9778 = get_group_id(0); v_wg_id_9778 < v_MHeight_2; v_wg_id_9778 = (v_wg_id_9778 + get_num_groups(0))) {\n    for (int v_l_id_9779 = get_local_id(0); v_l_id_9779 < v_MWidthC_1; v_l_id_9779 = (v_l_id_9779 + get_local_size(0))) {\n      float v_tmp_9872 = 0.0f; \n      v__9793 = v_tmp_9872; \n      /* reduce_seq */\n      for (int v_i_9780 = 0; v_i_9780 < 8; v_i_9780 = (1 + v_i_9780)) {\n        float v_tmp_9873 = 0.0f; \n        v__9795 = v_tmp_9873; \n        int v_index_9874 = v__9785[(v_l_id_9779 + (8 * v_MWidthC_1 * v_wg_id_9778) + (v_MWidthC_1 * v_i_9780))]; \n        if (v_index_9874 < 0) {\n          v__9797_0 = v__9795; \n        } else {\n          if (v_index_9874 >= v_VLength_3) {\n            v__9797_0 = v__9795; \n          } else {\n            v__9797_0 = v__9787[v_index_9874]; \n          }\n        }\n        v__9799_0 = mult(v__9797_0, v__9786[(v_l_id_9779 + (8 * v_MWidthC_1 * v_wg_id_9778) + (v_MWidthC_1 * v_i_9780))]); \n        v__9793 = add(v__9799_0, v__9793); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9781 = 0; \n        v__9802[v_l_id_9779] = id(v__9793); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_9782 = get_local_id(0); \n      float v_tmp_9877 = 0.0f; \n      v__9384 = v_tmp_9877; \n      /* reduce_seq */\n      for (int v_i_9783 = 0; v_i_9783 < v_MWidthC_1; v_i_9783 = (1 + v_i_9783)) {\n        v__9384 = add(v__9384, v__9802[(v_i_9783 + (v_MWidthC_1 * v_l_id_9782))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9784 = 0; \n        v__9807[v_wg_id_9778] = doubleMultiplyAdd(v__9384, v__9789, v__9788[v_wg_id_9778], v__9790); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__9785",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9786",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9787",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9788",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9789",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9790",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__9807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__9802",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}