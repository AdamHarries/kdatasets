{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13865, const global float* restrict v__13866, const global float* restrict v__13867, const global float* restrict v__13868, float v__13869, float v__13870, global float* v__13887, global float* v__13877, local float* v__13882, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13873; \n  float v__13878; \n  float v__9384; \n  /* Private Memory */\n  float v__13875_0;\n  \n  for (int v_wg_id_13857 = get_group_id(0); v_wg_id_13857 < v_MHeight_2; v_wg_id_13857 = (v_wg_id_13857 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_454; \n      v_work_idx_454 = 0; \n      int v_l_id_13858 = atomic_inc(&(v_work_idx_454)); \n      while((v_l_id_13858 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_13859 = 0; v_i_13859 < 16; v_i_13859 = (1 + v_i_13859)) {\n          float v_tmp_13944 = 0.0f; \n          v__13873 = v_tmp_13944; \n          int v_index_13945 = v__13865[(v_l_id_13858 + (16 * v_MWidthC_1 * v_wg_id_13857) + (v_MWidthC_1 * v_i_13859))]; \n          if (v_index_13945 < 0) {\n            v__13875_0 = v__13873; \n          } else {\n            if (v_index_13945 >= v_VLength_3) {\n              v__13875_0 = v__13873; \n            } else {\n              v__13875_0 = v__13867[v_index_13945]; \n            }\n          }\n          v__13877[(15 + (16 * v_MWidthC_1 * v_wg_id_13857) + (-1 * v_i_13859) + (16 * v_l_id_13858))] = mult(v__13875_0, v__13866[(v_l_id_13858 + (16 * v_MWidthC_1 * v_wg_id_13857) + (v_MWidthC_1 * v_i_13859))]); \n        }\n        /* end map_seq */\n        float v_tmp_13946 = 0.0f; \n        v__13878 = v_tmp_13946; \n        /* reduce_seq */\n        for (int v_i_13860 = 0; v_i_13860 < 16; v_i_13860 = (1 + v_i_13860)) {\n          v__13878 = add(v__13878, v__13877[(v_i_13860 + (16 * v_MWidthC_1 * v_wg_id_13857) + (16 * v_l_id_13858))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13861 = 0; \n          v__13882[v_l_id_13858] = id(v__13878); \n        }\n        /* end map_seq */\n        v_l_id_13858 = atomic_inc(&(v_work_idx_454)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13862 = get_local_id(0); \n      float v_tmp_13949 = 0.0f; \n      v__9384 = v_tmp_13949; \n      /* reduce_seq */\n      for (int v_i_13863 = 0; v_i_13863 < v_MWidthC_1; v_i_13863 = (1 + v_i_13863)) {\n        v__9384 = add(v__9384, v__13882[(v_i_13863 + (v_MWidthC_1 * v_l_id_13862))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13864 = 0; \n        v__13887[v_wg_id_13857] = doubleMultiplyAdd(v__9384, v__13869, v__13868[v_wg_id_13857], v__13870); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13865",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13866",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13867",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13868",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13869",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13870",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13877",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13887",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13882",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}