{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25000, const global float* restrict v__25001, const global float* restrict v__25002, const global float* restrict v__25003, float v__25004, float v__25005, global float* v__25023, global float* v__25013, global int* v__25007, local float* v__25018, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25009; \n  float v__25014; \n  float v__9384; \n  /* Private Memory */\n  float v__25011_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1498 = v__25007; \n    local int v_w_id_24992; \n    if (get_local_id(0) == 0) {\n      v_w_id_24992 = atomic_inc(v_work_idx_1498); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24992 < v_MHeight_2)){\n      for (int v_l_id_24993 = get_local_id(0); v_l_id_24993 < v_MWidthC_1; v_l_id_24993 = (v_l_id_24993 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24994 = 0; v_i_24994 < 128; v_i_24994 = (1 + v_i_24994)) {\n          float v_tmp_25082 = 0.0f; \n          v__25009 = v_tmp_25082; \n          int v_index_25083 = v__25000[(v_l_id_24993 + (128 * v_MWidthC_1 * v_w_id_24992) + (v_MWidthC_1 * v_i_24994))]; \n          if (v_index_25083 < 0) {\n            v__25011_0 = v__25009; \n          } else {\n            if (v_index_25083 >= v_VLength_3) {\n              v__25011_0 = v__25009; \n            } else {\n              v__25011_0 = v__25002[v_index_25083]; \n            }\n          }\n          v__25013[(127 + (128 * v_MWidthC_1 * v_w_id_24992) + (-1 * v_i_24994) + (128 * v_l_id_24993))] = mult(v__25011_0, v__25001[(v_l_id_24993 + (128 * v_MWidthC_1 * v_w_id_24992) + (v_MWidthC_1 * v_i_24994))]); \n        }\n        /* end map_seq */\n        float v_tmp_25084 = 0.0f; \n        v__25014 = v_tmp_25084; \n        /* reduce_seq */\n        for (int v_i_24995 = 0; v_i_24995 < 128; v_i_24995 = (1 + v_i_24995)) {\n          v__25014 = add(v__25014, v__25013[(v_i_24995 + (128 * v_MWidthC_1 * v_w_id_24992) + (128 * v_l_id_24993))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24996 = 0; \n          v__25018[v_l_id_24993] = id(v__25014); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1491; \n        v_work_idx_1491 = 0; \n        int v_l_id_24997 = atomic_inc(&(v_work_idx_1491)); \n        while((v_l_id_24997 < 1)){\n          float v_tmp_25087 = 0.0f; \n          v__9384 = v_tmp_25087; \n          /* reduce_seq */\n          for (int v_i_24998 = 0; v_i_24998 < v_MWidthC_1; v_i_24998 = (1 + v_i_24998)) {\n            v__9384 = add(v__9384, v__25018[(v_i_24998 + (v_MWidthC_1 * v_l_id_24997))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_24999 = 0; \n            v__25023[v_w_id_24992] = doubleMultiplyAdd(v__9384, v__25004, v__25003[v_w_id_24992], v__25005); \n          }\n          /* end map_seq */\n          v_l_id_24997 = atomic_inc(&(v_work_idx_1491)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24992 = atomic_inc(v_work_idx_1498); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25000",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25001",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25002",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25003",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25004",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25005",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25013",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25007",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25023",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25018",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}