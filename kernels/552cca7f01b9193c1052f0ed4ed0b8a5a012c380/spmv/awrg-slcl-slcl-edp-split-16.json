{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__14893, const global float* restrict v__14894, const global float* restrict v__14895, const global float* restrict v__14896, float v__14897, float v__14898, global float* v__14918, global int* v__14900, local float* v__14913, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14902; \n  float v__14904; \n  float v__9384; \n  /* Private Memory */\n  float v__14906_0;\n  \n  float v__14908_0;\n  \n  int v__14912_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_551 = v__14900; \n    local int v_w_id_14886; \n    if (get_local_id(0) == 0) {\n      v_w_id_14886 = atomic_inc(v_work_idx_551); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14886 < v_MHeight_2)){\n      for (int v_l_id_14887 = get_local_id(0); v_l_id_14887 < v_MWidthC_1; v_l_id_14887 = (v_l_id_14887 + get_local_size(0))) {\n        float v_tmp_14984 = 0.0f; \n        v__14902 = v_tmp_14984; \n        /* reduce_while_seq */\n        for (int v_i_14888 = 0; v_i_14888 < 16; v_i_14888 = (1 + v_i_14888)) {\n          v__14912_0 = check(v__14902, v__14893[(v_l_id_14887 + (16 * v_MWidthC_1 * v_w_id_14886) + (v_MWidthC_1 * v_i_14888))]); \n          if (v__14912_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14985 = 0.0f; \n          v__14904 = v_tmp_14985; \n          int v_index_14986 = v__14893[(v_l_id_14887 + (16 * v_MWidthC_1 * v_w_id_14886) + (v_MWidthC_1 * v_i_14888))]; \n          if (v_index_14986 < 0) {\n            v__14906_0 = v__14904; \n          } else {\n            if (v_index_14986 >= v_VLength_3) {\n              v__14906_0 = v__14904; \n            } else {\n              v__14906_0 = v__14895[v_index_14986]; \n            }\n          }\n          v__14908_0 = mult(v__14906_0, v__14894[(v_l_id_14887 + (16 * v_MWidthC_1 * v_w_id_14886) + (v_MWidthC_1 * v_i_14888))]); \n          v__14902 = add(v__14908_0, v__14902); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14889 = 0; \n          v__14913[v_l_id_14887] = id(v__14902); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14890 = get_local_id(0); \n        float v_tmp_14989 = 0.0f; \n        v__9384 = v_tmp_14989; \n        /* reduce_seq */\n        for (int v_i_14891 = 0; v_i_14891 < v_MWidthC_1; v_i_14891 = (1 + v_i_14891)) {\n          v__9384 = add(v__9384, v__14913[(v_i_14891 + (v_MWidthC_1 * v_l_id_14890))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14892 = 0; \n          v__14918[v_w_id_14886] = doubleMultiplyAdd(v__9384, v__14897, v__14896[v_w_id_14886], v__14898); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14886 = atomic_inc(v_work_idx_551); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14893",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14894",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14895",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14897",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14898",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14900",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14918",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14913",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}