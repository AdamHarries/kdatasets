{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9182, const global float* restrict v__9183, const global float* restrict v__9184, const global float* restrict v__9185, float v__9186, float v__9187, global float* v__9201, global float* v__9195, global int* v__9189, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9191; \n  float v__9196; \n  /* Private Memory */\n  float v__9193_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_26 = v__9189; \n    local int v_w_id_9178; \n    if (get_local_id(0) == 0) {\n      v_w_id_9178 = atomic_inc(v_work_idx_26); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_9178 < v_MHeight_2)){\n      for (int v_l_id_9179 = get_local_id(0); v_l_id_9179 < v_MWidthC_1; v_l_id_9179 = (v_l_id_9179 + get_local_size(0))) {\n        float v_tmp_9239 = 0.0f; \n        v__9191 = v_tmp_9239; \n        int v_index_9240 = v__9182[(v_l_id_9179 + (v_MWidthC_1 * v_w_id_9178))]; \n        if (v_index_9240 < 0) {\n          v__9193_0 = v__9191; \n        } else {\n          if (v_index_9240 >= v_VLength_3) {\n            v__9193_0 = v__9191; \n          } else {\n            v__9193_0 = v__9184[v_index_9240]; \n          }\n        }\n        v__9195[(-1 + v_MWidthC_1 + (-1 * v_l_id_9179) + (v_MWidthC_1 * v_w_id_9178))] = mult(v__9193_0, v__9183[(v_l_id_9179 + (v_MWidthC_1 * v_w_id_9178))]); \n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_9241 = 0.0f; \n      v__9196 = v_tmp_9241; \n      /* reduce_seq */\n      for (int v_i_9180 = 0; v_i_9180 < v_MWidthC_1; v_i_9180 = (1 + v_i_9180)) {\n        v__9196 = add(v__9196, v__9195[(v_i_9180 + (v_MWidthC_1 * v_w_id_9178))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9181 = 0; \n        v__9201[v_w_id_9178] = doubleMultiplyAdd(v__9196, v__9186, v__9185[v_w_id_9178], v__9187); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_9178 = atomic_inc(v_work_idx_26); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__9182",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9184",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9186",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9187",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9189",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__9201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}