{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20829, const global float* restrict v__20830, const global float* restrict v__20831, const global float* restrict v__20832, float v__20833, float v__20834, global float* v__20851, global float* v__20841, local float* v__20846, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20837; \n  float v__20842; \n  float v__9384; \n  /* Private Memory */\n  float v__20839_0;\n  \n  for (int v_wg_id_20821 = get_group_id(0); v_wg_id_20821 < v_MHeight_2; v_wg_id_20821 = (v_wg_id_20821 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1107; \n      v_work_idx_1107 = 0; \n      int v_l_id_20822 = atomic_inc(&(v_work_idx_1107)); \n      while((v_l_id_20822 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20823 = 0; v_i_20823 < 64; v_i_20823 = (1 + v_i_20823)) {\n          float v_tmp_20904 = 0.0f; \n          v__20837 = v_tmp_20904; \n          int v_index_20905 = v__20829[(v_l_id_20822 + (64 * v_MWidthC_1 * v_wg_id_20821) + (v_MWidthC_1 * v_i_20823))]; \n          if (v_index_20905 < 0) {\n            v__20839_0 = v__20837; \n          } else {\n            if (v_index_20905 >= v_VLength_3) {\n              v__20839_0 = v__20837; \n            } else {\n              v__20839_0 = v__20831[v_index_20905]; \n            }\n          }\n          v__20841[(63 + (64 * v_MWidthC_1 * v_wg_id_20821) + (-1 * v_i_20823) + (64 * v_l_id_20822))] = mult(v__20839_0, v__20830[(v_l_id_20822 + (64 * v_MWidthC_1 * v_wg_id_20821) + (v_MWidthC_1 * v_i_20823))]); \n        }\n        /* end map_seq */\n        float v_tmp_20906 = 0.0f; \n        v__20842 = v_tmp_20906; \n        /* reduce_seq */\n        for (int v_i_20824 = 0; v_i_20824 < 64; v_i_20824 = (1 + v_i_20824)) {\n          v__20842 = add(v__20842, v__20841[(v_i_20824 + (64 * v_MWidthC_1 * v_wg_id_20821) + (64 * v_l_id_20822))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20825 = 0; \n          v__20846[v_l_id_20822] = id(v__20842); \n        }\n        /* end map_seq */\n        v_l_id_20822 = atomic_inc(&(v_work_idx_1107)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1101; \n      v_work_idx_1101 = 0; \n      int v_l_id_20826 = atomic_inc(&(v_work_idx_1101)); \n      while((v_l_id_20826 < 1)){\n        float v_tmp_20909 = 0.0f; \n        v__9384 = v_tmp_20909; \n        /* reduce_seq */\n        for (int v_i_20827 = 0; v_i_20827 < v_MWidthC_1; v_i_20827 = (1 + v_i_20827)) {\n          v__9384 = add(v__9384, v__20846[(v_i_20827 + (v_MWidthC_1 * v_l_id_20826))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20828 = 0; \n          v__20851[v_wg_id_20821] = doubleMultiplyAdd(v__9384, v__20833, v__20832[v_wg_id_20821], v__20834); \n        }\n        /* end map_seq */\n        v_l_id_20826 = atomic_inc(&(v_work_idx_1101)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20829",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20830",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20831",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20832",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20833",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20834",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20841",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20851",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20846",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}