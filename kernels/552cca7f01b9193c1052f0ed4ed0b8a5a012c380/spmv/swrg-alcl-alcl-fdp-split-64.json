{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20923, const global float* restrict v__20924, const global float* restrict v__20925, const global float* restrict v__20926, float v__20927, float v__20928, global float* v__20945, local float* v__20940, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20931; \n  float v__20933; \n  float v__9384; \n  /* Private Memory */\n  float v__20935_0;\n  \n  float v__20937_0;\n  \n  for (int v_wg_id_20916 = get_group_id(0); v_wg_id_20916 < v_MHeight_2; v_wg_id_20916 = (v_wg_id_20916 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1117; \n      v_work_idx_1117 = 0; \n      int v_l_id_20917 = atomic_inc(&(v_work_idx_1117)); \n      while((v_l_id_20917 < v_MWidthC_1)){\n        float v_tmp_20998 = 0.0f; \n        v__20931 = v_tmp_20998; \n        /* reduce_seq */\n        for (int v_i_20918 = 0; v_i_20918 < 64; v_i_20918 = (1 + v_i_20918)) {\n          float v_tmp_20999 = 0.0f; \n          v__20933 = v_tmp_20999; \n          int v_index_21000 = v__20923[(v_l_id_20917 + (64 * v_MWidthC_1 * v_wg_id_20916) + (v_MWidthC_1 * v_i_20918))]; \n          if (v_index_21000 < 0) {\n            v__20935_0 = v__20933; \n          } else {\n            if (v_index_21000 >= v_VLength_3) {\n              v__20935_0 = v__20933; \n            } else {\n              v__20935_0 = v__20925[v_index_21000]; \n            }\n          }\n          v__20937_0 = mult(v__20935_0, v__20924[(v_l_id_20917 + (64 * v_MWidthC_1 * v_wg_id_20916) + (v_MWidthC_1 * v_i_20918))]); \n          v__20931 = add(v__20937_0, v__20931); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20919 = 0; \n          v__20940[v_l_id_20917] = id(v__20931); \n        }\n        /* end map_seq */\n        v_l_id_20917 = atomic_inc(&(v_work_idx_1117)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1112; \n      v_work_idx_1112 = 0; \n      int v_l_id_20920 = atomic_inc(&(v_work_idx_1112)); \n      while((v_l_id_20920 < 1)){\n        float v_tmp_21003 = 0.0f; \n        v__9384 = v_tmp_21003; \n        /* reduce_seq */\n        for (int v_i_20921 = 0; v_i_20921 < v_MWidthC_1; v_i_20921 = (1 + v_i_20921)) {\n          v__9384 = add(v__9384, v__20940[(v_i_20921 + (v_MWidthC_1 * v_l_id_20920))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20922 = 0; \n          v__20945[v_wg_id_20916] = doubleMultiplyAdd(v__9384, v__20927, v__20926[v_wg_id_20916], v__20928); \n        }\n        /* end map_seq */\n        v_l_id_20920 = atomic_inc(&(v_work_idx_1112)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__20923",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20924",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20925",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20927",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20928",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20945",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20940",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}