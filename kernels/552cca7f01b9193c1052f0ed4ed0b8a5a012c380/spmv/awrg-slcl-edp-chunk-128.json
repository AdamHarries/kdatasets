{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24594, const global float* restrict v__24595, const global float* restrict v__24596, const global float* restrict v__24597, float v__24598, float v__24599, global float* v__24615, global int* v__24601, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24602; \n  float v__24605; \n  /* Private Memory */\n  float v__24607_0;\n  \n  float v__24609_0;\n  \n  int v__24613_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1459 = v__24601; \n    local int v_w_id_24590; \n    if (get_local_id(0) == 0) {\n      v_w_id_24590 = atomic_inc(v_work_idx_1459); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24590 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_24591 = get_local_id(0); v_l_id_24591 < 128; v_l_id_24591 = (v_l_id_24591 + get_local_size(0))) {\n        float v_tmp_24662 = 0.0f; \n        v__24602 = v_tmp_24662; \n        /* reduce_while_seq */\n        for (int v_i_24592 = 0; v_i_24592 < v_MWidthC_1; v_i_24592 = (1 + v_i_24592)) {\n          v__24613_0 = check(v__24602, v__24594[(v_i_24592 + (128 * v_MWidthC_1 * v_w_id_24590) + (v_MWidthC_1 * v_l_id_24591))]); \n          if (v__24613_0) {\n          } else {\n            break;\n          }\n          float v_tmp_24663 = 0.0f; \n          v__24605 = v_tmp_24663; \n          int v_index_24664 = v__24594[(v_i_24592 + (128 * v_MWidthC_1 * v_w_id_24590) + (v_MWidthC_1 * v_l_id_24591))]; \n          if (v_index_24664 < 0) {\n            v__24607_0 = v__24605; \n          } else {\n            if (v_index_24664 >= v_VLength_3) {\n              v__24607_0 = v__24605; \n            } else {\n              v__24607_0 = v__24596[v_index_24664]; \n            }\n          }\n          v__24609_0 = mult(v__24607_0, v__24595[(v_i_24592 + (128 * v_MWidthC_1 * v_w_id_24590) + (v_MWidthC_1 * v_l_id_24591))]); \n          v__24602 = add(v__24609_0, v__24602); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24593 = 0; \n          v__24615[(v_l_id_24591 + (128 * v_w_id_24590))] = doubleMultiplyAdd(v__24602, v__24598, v__24597[(v_l_id_24591 + (128 * v_w_id_24590))], v__24599); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_24590 = atomic_inc(v_work_idx_1459); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__24594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24595",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24596",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24597",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24598",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24599",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24601",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24615",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}