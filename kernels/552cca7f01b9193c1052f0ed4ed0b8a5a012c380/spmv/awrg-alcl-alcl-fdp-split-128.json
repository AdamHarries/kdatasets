{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25917, const global float* restrict v__25918, const global float* restrict v__25919, const global float* restrict v__25920, float v__25921, float v__25922, global float* v__25940, global int* v__25924, local float* v__25935, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25926; \n  float v__25928; \n  float v__9384; \n  /* Private Memory */\n  float v__25930_0;\n  \n  float v__25932_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1594 = v__25924; \n    local int v_w_id_25910; \n    if (get_local_id(0) == 0) {\n      v_w_id_25910 = atomic_inc(v_work_idx_1594); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25910 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1592; \n        v_work_idx_1592 = 0; \n        int v_l_id_25911 = atomic_inc(&(v_work_idx_1592)); \n        while((v_l_id_25911 < v_MWidthC_1)){\n          float v_tmp_25991 = 0.0f; \n          v__25926 = v_tmp_25991; \n          /* reduce_seq */\n          for (int v_i_25912 = 0; v_i_25912 < 128; v_i_25912 = (1 + v_i_25912)) {\n            float v_tmp_25992 = 0.0f; \n            v__25928 = v_tmp_25992; \n            int v_index_25993 = v__25917[(v_l_id_25911 + (128 * v_MWidthC_1 * v_w_id_25910) + (v_MWidthC_1 * v_i_25912))]; \n            if (v_index_25993 < 0) {\n              v__25930_0 = v__25928; \n            } else {\n              if (v_index_25993 >= v_VLength_3) {\n                v__25930_0 = v__25928; \n              } else {\n                v__25930_0 = v__25919[v_index_25993]; \n              }\n            }\n            v__25932_0 = mult(v__25930_0, v__25918[(v_l_id_25911 + (128 * v_MWidthC_1 * v_w_id_25910) + (v_MWidthC_1 * v_i_25912))]); \n            v__25926 = add(v__25932_0, v__25926); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25913 = 0; \n            v__25935[v_l_id_25911] = id(v__25926); \n          }\n          /* end map_seq */\n          v_l_id_25911 = atomic_inc(&(v_work_idx_1592)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1587; \n        v_work_idx_1587 = 0; \n        int v_l_id_25914 = atomic_inc(&(v_work_idx_1587)); \n        while((v_l_id_25914 < 1)){\n          float v_tmp_25996 = 0.0f; \n          v__9384 = v_tmp_25996; \n          /* reduce_seq */\n          for (int v_i_25915 = 0; v_i_25915 < v_MWidthC_1; v_i_25915 = (1 + v_i_25915)) {\n            v__9384 = add(v__9384, v__25935[(v_i_25915 + (v_MWidthC_1 * v_l_id_25914))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25916 = 0; \n            v__25940[v_w_id_25910] = doubleMultiplyAdd(v__9384, v__25921, v__25920[v_w_id_25910], v__25922); \n          }\n          /* end map_seq */\n          v_l_id_25914 = atomic_inc(&(v_work_idx_1587)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25910 = atomic_inc(v_work_idx_1594); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__25917",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25918",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25919",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25920",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25921",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25922",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25924",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25940",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25935",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}