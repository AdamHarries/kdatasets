{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15531, const global float* restrict v__15532, const global float* restrict v__15533, const global float* restrict v__15534, float v__15535, float v__15536, global float* v__15554, global float* v__15544, global int* v__15538, local float* v__15549, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15540; \n  float v__15545; \n  float v__9384; \n  /* Private Memory */\n  float v__15542_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_615 = v__15538; \n    local int v_w_id_15523; \n    if (get_local_id(0) == 0) {\n      v_w_id_15523 = atomic_inc(v_work_idx_615); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15523 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_613; \n        v_work_idx_613 = 0; \n        int v_l_id_15524 = atomic_inc(&(v_work_idx_613)); \n        while((v_l_id_15524 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15525 = 0; v_i_15525 < 16; v_i_15525 = (1 + v_i_15525)) {\n            float v_tmp_15609 = 0.0f; \n            v__15540 = v_tmp_15609; \n            int v_index_15610 = v__15531[(v_l_id_15524 + (16 * v_MWidthC_1 * v_w_id_15523) + (v_MWidthC_1 * v_i_15525))]; \n            if (v_index_15610 < 0) {\n              v__15542_0 = v__15540; \n            } else {\n              if (v_index_15610 >= v_VLength_3) {\n                v__15542_0 = v__15540; \n              } else {\n                v__15542_0 = v__15533[v_index_15610]; \n              }\n            }\n            v__15544[(15 + (16 * v_MWidthC_1 * v_w_id_15523) + (-1 * v_i_15525) + (16 * v_l_id_15524))] = mult(v__15542_0, v__15532[(v_l_id_15524 + (16 * v_MWidthC_1 * v_w_id_15523) + (v_MWidthC_1 * v_i_15525))]); \n          }\n          /* end map_seq */\n          float v_tmp_15611 = 0.0f; \n          v__15545 = v_tmp_15611; \n          /* reduce_seq */\n          for (int v_i_15526 = 0; v_i_15526 < 16; v_i_15526 = (1 + v_i_15526)) {\n            v__15545 = add(v__15545, v__15544[(v_i_15526 + (16 * v_MWidthC_1 * v_w_id_15523) + (16 * v_l_id_15524))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15527 = 0; \n            v__15549[v_l_id_15524] = id(v__15545); \n          }\n          /* end map_seq */\n          v_l_id_15524 = atomic_inc(&(v_work_idx_613)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_15528 = get_local_id(0); \n        float v_tmp_15614 = 0.0f; \n        v__9384 = v_tmp_15614; \n        /* reduce_seq */\n        for (int v_i_15529 = 0; v_i_15529 < v_MWidthC_1; v_i_15529 = (1 + v_i_15529)) {\n          v__9384 = add(v__9384, v__15549[(v_i_15529 + (v_MWidthC_1 * v_l_id_15528))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15530 = 0; \n          v__15554[v_w_id_15523] = doubleMultiplyAdd(v__9384, v__15535, v__15534[v_w_id_15523], v__15536); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15523 = atomic_inc(v_work_idx_615); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15531",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15532",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15533",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15534",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15535",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15536",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15544",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15538",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15549",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}