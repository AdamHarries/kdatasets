{
  "name" : "awrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15628, const global float* restrict v__15629, const global float* restrict v__15630, const global float* restrict v__15631, float v__15632, float v__15633, global float* v__15651, global int* v__15635, local float* v__15646, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15637; \n  float v__15639; \n  float v__9384; \n  /* Private Memory */\n  float v__15641_0;\n  \n  float v__15643_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_625 = v__15635; \n    local int v_w_id_15621; \n    if (get_local_id(0) == 0) {\n      v_w_id_15621 = atomic_inc(v_work_idx_625); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15621 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_623; \n        v_work_idx_623 = 0; \n        int v_l_id_15622 = atomic_inc(&(v_work_idx_623)); \n        while((v_l_id_15622 < v_MWidthC_1)){\n          float v_tmp_15706 = 0.0f; \n          v__15637 = v_tmp_15706; \n          /* reduce_seq */\n          for (int v_i_15623 = 0; v_i_15623 < 16; v_i_15623 = (1 + v_i_15623)) {\n            float v_tmp_15707 = 0.0f; \n            v__15639 = v_tmp_15707; \n            int v_index_15708 = v__15628[(v_l_id_15622 + (16 * v_MWidthC_1 * v_w_id_15621) + (v_MWidthC_1 * v_i_15623))]; \n            if (v_index_15708 < 0) {\n              v__15641_0 = v__15639; \n            } else {\n              if (v_index_15708 >= v_VLength_3) {\n                v__15641_0 = v__15639; \n              } else {\n                v__15641_0 = v__15630[v_index_15708]; \n              }\n            }\n            v__15643_0 = mult(v__15641_0, v__15629[(v_l_id_15622 + (16 * v_MWidthC_1 * v_w_id_15621) + (v_MWidthC_1 * v_i_15623))]); \n            v__15637 = add(v__15643_0, v__15637); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15624 = 0; \n            v__15646[v_l_id_15622] = id(v__15637); \n          }\n          /* end map_seq */\n          v_l_id_15622 = atomic_inc(&(v_work_idx_623)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_15625 = get_local_id(0); \n        float v_tmp_15711 = 0.0f; \n        v__9384 = v_tmp_15711; \n        /* reduce_seq */\n        for (int v_i_15626 = 0; v_i_15626 < v_MWidthC_1; v_i_15626 = (1 + v_i_15626)) {\n          v__9384 = add(v__9384, v__15646[(v_i_15626 + (v_MWidthC_1 * v_l_id_15625))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15627 = 0; \n          v__15651[v_w_id_15621] = doubleMultiplyAdd(v__9384, v__15632, v__15631[v_w_id_15621], v__15633); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15621 = atomic_inc(v_work_idx_625); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__15628",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15629",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15630",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15631",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15632",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15633",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15635",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15651",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15646",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}