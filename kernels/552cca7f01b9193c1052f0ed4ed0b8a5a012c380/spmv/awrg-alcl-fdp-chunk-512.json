{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32041, const global float* restrict v__32042, const global float* restrict v__32043, const global float* restrict v__32044, float v__32045, float v__32046, global float* v__32060, global int* v__32048, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32050; \n  float v__32052; \n  /* Private Memory */\n  float v__32054_0;\n  \n  float v__32056_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2157 = v__32048; \n    local int v_w_id_32037; \n    if (get_local_id(0) == 0) {\n      v_w_id_32037 = atomic_inc(v_work_idx_2157); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32037 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2155; \n        v_work_idx_2155 = 0; \n        int v_l_id_32038 = atomic_inc(&(v_work_idx_2155)); \n        while((v_l_id_32038 < 512)){\n          float v_tmp_32097 = 0.0f; \n          v__32050 = v_tmp_32097; \n          /* reduce_seq */\n          for (int v_i_32039 = 0; v_i_32039 < v_MWidthC_1; v_i_32039 = (1 + v_i_32039)) {\n            float v_tmp_32098 = 0.0f; \n            v__32052 = v_tmp_32098; \n            int v_index_32099 = v__32041[(v_i_32039 + (512 * v_MWidthC_1 * v_w_id_32037) + (v_MWidthC_1 * v_l_id_32038))]; \n            if (v_index_32099 < 0) {\n              v__32054_0 = v__32052; \n            } else {\n              if (v_index_32099 >= v_VLength_3) {\n                v__32054_0 = v__32052; \n              } else {\n                v__32054_0 = v__32043[v_index_32099]; \n              }\n            }\n            v__32056_0 = mult(v__32054_0, v__32042[(v_i_32039 + (512 * v_MWidthC_1 * v_w_id_32037) + (v_MWidthC_1 * v_l_id_32038))]); \n            v__32050 = add(v__32056_0, v__32050); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32040 = 0; \n            v__32060[(v_l_id_32038 + (512 * v_w_id_32037))] = doubleMultiplyAdd(v__32050, v__32045, v__32044[(v_l_id_32038 + (512 * v_w_id_32037))], v__32046); \n          }\n          /* end map_seq */\n          v_l_id_32038 = atomic_inc(&(v_work_idx_2155)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32037 = atomic_inc(v_work_idx_2157); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__32041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32043",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32044",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32045",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32046",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32048",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}