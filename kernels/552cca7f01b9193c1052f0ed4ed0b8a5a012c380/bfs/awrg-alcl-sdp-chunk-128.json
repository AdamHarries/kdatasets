{
  "name" : "awrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49147, const global int* restrict v__49148, const global int* restrict v__49149, const global int* restrict v__49150, int v__49151, int v__49152, global int* v__49166, global int* v__49160, global int* v__49154, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49156; \n  int v__49161; \n  /* Private Memory */\n  int v__49158_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3753 = v__49154; \n    local int v_w_id_49142; \n    if (get_local_id(0) == 0) {\n      v_w_id_49142 = atomic_inc(v_work_idx_3753); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_49142 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3751; \n        v_work_idx_3751 = 0; \n        int v_l_id_49143 = atomic_inc(&(v_work_idx_3751)); \n        while((v_l_id_49143 < 128)){\n          /* map_seq */\n          for (int v_i_49144 = 0; v_i_49144 < v_MWidthC_1; v_i_49144 = (1 + v_i_49144)) {\n            int v_tmp_49205 = 0; \n            v__49156 = v_tmp_49205; \n            int v_index_49206 = v__49147[(v_i_49144 + (128 * v_MWidthC_1 * v_w_id_49142) + (v_MWidthC_1 * v_l_id_49143))]; \n            if (v_index_49206 < 0) {\n              v__49158_0 = v__49156; \n            } else {\n              if (v_index_49206 >= v_VLength_3) {\n                v__49158_0 = v__49156; \n              } else {\n                v__49158_0 = v__49149[v_index_49206]; \n              }\n            }\n            v__49160[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_49142) + (-1 * v_i_49144) + (v_MWidthC_1 * v_l_id_49143))] = bool_and(v__49158_0, v__49148[(v_i_49144 + (128 * v_MWidthC_1 * v_w_id_49142) + (v_MWidthC_1 * v_l_id_49143))]); \n          }\n          /* end map_seq */\n          int v_tmp_49207 = 0; \n          v__49161 = v_tmp_49207; \n          /* reduce_seq */\n          for (int v_i_49145 = 0; v_i_49145 < v_MWidthC_1; v_i_49145 = (1 + v_i_49145)) {\n            v__49161 = bool_or(v__49161, v__49160[(v_i_49145 + (128 * v_MWidthC_1 * v_w_id_49142) + (v_MWidthC_1 * v_l_id_49143))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_49146 = 0; \n            v__49166[(v_l_id_49143 + (128 * v_w_id_49142))] = doubleAndOr(v__49161, v__49151, v__49150[(v_l_id_49143 + (128 * v_w_id_49142))], v__49152); \n          }\n          /* end map_seq */\n          v_l_id_49143 = atomic_inc(&(v_work_idx_3751)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_49142 = atomic_inc(v_work_idx_3753); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__49147",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49148",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49149",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49151",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49152",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49160",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49154",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__49166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}