{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33844, const global int* restrict v__33845, const global int* restrict v__33846, const global int* restrict v__33847, int v__33848, int v__33849, global int* v__33866, global int* v__33856, local int* v__33861, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33852; \n  int v__33857; \n  int v__33230; \n  /* Private Memory */\n  int v__33854_0;\n  \n  for (int v_wg_id_33836 = get_group_id(0); v_wg_id_33836 < v_MHeight_2; v_wg_id_33836 = (v_wg_id_33836 + get_num_groups(0))) {\n    for (int v_l_id_33837 = get_local_id(0); v_l_id_33837 < v_MWidthC_1; v_l_id_33837 = (v_l_id_33837 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_33838 = 0; v_i_33838 < 8; v_i_33838 = (1 + v_i_33838)) {\n        int v_tmp_33927 = 0; \n        v__33852 = v_tmp_33927; \n        int v_index_33928 = v__33844[(v_l_id_33837 + (8 * v_MWidthC_1 * v_wg_id_33836) + (v_MWidthC_1 * v_i_33838))]; \n        if (v_index_33928 < 0) {\n          v__33854_0 = v__33852; \n        } else {\n          if (v_index_33928 >= v_VLength_3) {\n            v__33854_0 = v__33852; \n          } else {\n            v__33854_0 = v__33846[v_index_33928]; \n          }\n        }\n        v__33856[(7 + (8 * v_MWidthC_1 * v_wg_id_33836) + (-1 * v_i_33838) + (8 * v_l_id_33837))] = bool_and(v__33854_0, v__33845[(v_l_id_33837 + (8 * v_MWidthC_1 * v_wg_id_33836) + (v_MWidthC_1 * v_i_33838))]); \n      }\n      /* end map_seq */\n      int v_tmp_33929 = 0; \n      v__33857 = v_tmp_33929; \n      /* reduce_seq */\n      for (int v_i_33839 = 0; v_i_33839 < 8; v_i_33839 = (1 + v_i_33839)) {\n        v__33857 = bool_or(v__33857, v__33856[(v_i_33839 + (8 * v_MWidthC_1 * v_wg_id_33836) + (8 * v_l_id_33837))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33840 = 0; \n        v__33861[v_l_id_33837] = id(v__33857); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2317; \n      v_work_idx_2317 = 0; \n      int v_l_id_33841 = atomic_inc(&(v_work_idx_2317)); \n      while((v_l_id_33841 < 1)){\n        int v_tmp_33932 = 0; \n        v__33230 = v_tmp_33932; \n        /* reduce_seq */\n        for (int v_i_33842 = 0; v_i_33842 < v_MWidthC_1; v_i_33842 = (1 + v_i_33842)) {\n          v__33230 = bool_or(v__33230, v__33861[(v_i_33842 + (v_MWidthC_1 * v_l_id_33841))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_33843 = 0; \n          v__33866[v_wg_id_33836] = doubleAndOr(v__33230, v__33848, v__33847[v_wg_id_33836], v__33849); \n        }\n        /* end map_seq */\n        v_l_id_33841 = atomic_inc(&(v_work_idx_2317)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__33844",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33845",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33846",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33847",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33848",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33849",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33856",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33866",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33861",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}