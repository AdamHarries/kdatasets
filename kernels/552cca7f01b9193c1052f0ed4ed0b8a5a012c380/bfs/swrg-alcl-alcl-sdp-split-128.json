{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48002, const global int* restrict v__48003, const global int* restrict v__48004, const global int* restrict v__48005, int v__48006, int v__48007, global int* v__48024, global int* v__48014, local int* v__48019, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48010; \n  int v__48015; \n  int v__33230; \n  /* Private Memory */\n  int v__48012_0;\n  \n  for (int v_wg_id_47994 = get_group_id(0); v_wg_id_47994 < v_MHeight_2; v_wg_id_47994 = (v_wg_id_47994 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3646; \n      v_work_idx_3646 = 0; \n      int v_l_id_47995 = atomic_inc(&(v_work_idx_3646)); \n      while((v_l_id_47995 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_47996 = 0; v_i_47996 < 128; v_i_47996 = (1 + v_i_47996)) {\n          int v_tmp_48077 = 0; \n          v__48010 = v_tmp_48077; \n          int v_index_48078 = v__48002[(v_l_id_47995 + (128 * v_MWidthC_1 * v_wg_id_47994) + (v_MWidthC_1 * v_i_47996))]; \n          if (v_index_48078 < 0) {\n            v__48012_0 = v__48010; \n          } else {\n            if (v_index_48078 >= v_VLength_3) {\n              v__48012_0 = v__48010; \n            } else {\n              v__48012_0 = v__48004[v_index_48078]; \n            }\n          }\n          v__48014[(127 + (128 * v_MWidthC_1 * v_wg_id_47994) + (-1 * v_i_47996) + (128 * v_l_id_47995))] = bool_and(v__48012_0, v__48003[(v_l_id_47995 + (128 * v_MWidthC_1 * v_wg_id_47994) + (v_MWidthC_1 * v_i_47996))]); \n        }\n        /* end map_seq */\n        int v_tmp_48079 = 0; \n        v__48015 = v_tmp_48079; \n        /* reduce_seq */\n        for (int v_i_47997 = 0; v_i_47997 < 128; v_i_47997 = (1 + v_i_47997)) {\n          v__48015 = bool_or(v__48015, v__48014[(v_i_47997 + (128 * v_MWidthC_1 * v_wg_id_47994) + (128 * v_l_id_47995))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47998 = 0; \n          v__48019[v_l_id_47995] = id(v__48015); \n        }\n        /* end map_seq */\n        v_l_id_47995 = atomic_inc(&(v_work_idx_3646)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3640; \n      v_work_idx_3640 = 0; \n      int v_l_id_47999 = atomic_inc(&(v_work_idx_3640)); \n      while((v_l_id_47999 < 1)){\n        int v_tmp_48082 = 0; \n        v__33230 = v_tmp_48082; \n        /* reduce_seq */\n        for (int v_i_48000 = 0; v_i_48000 < v_MWidthC_1; v_i_48000 = (1 + v_i_48000)) {\n          v__33230 = bool_or(v__33230, v__48019[(v_i_48000 + (v_MWidthC_1 * v_l_id_47999))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48001 = 0; \n          v__48024[v_wg_id_47994] = doubleAndOr(v__33230, v__48006, v__48005[v_wg_id_47994], v__48007); \n        }\n        /* end map_seq */\n        v_l_id_47999 = atomic_inc(&(v_work_idx_3640)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48002",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48003",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48004",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48005",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48006",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48007",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48014",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__48024",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48019",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}