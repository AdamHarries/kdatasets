{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52797, const global int* restrict v__52798, const global int* restrict v__52799, const global int* restrict v__52800, int v__52801, int v__52802, global int* v__52820, global int* v__52804, local int* v__52815, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52806; \n  int v__52808; \n  int v__33230; \n  /* Private Memory */\n  int v__52810_0;\n  \n  int v__52812_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4100 = v__52804; \n    local int v_w_id_52790; \n    if (get_local_id(0) == 0) {\n      v_w_id_52790 = atomic_inc(v_work_idx_4100); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52790 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4098; \n        v_work_idx_4098 = 0; \n        int v_l_id_52791 = atomic_inc(&(v_work_idx_4098)); \n        while((v_l_id_52791 < v_MWidthC_1)){\n          int v_tmp_52875 = 0; \n          v__52806 = v_tmp_52875; \n          /* reduce_seq */\n          for (int v_i_52792 = 0; v_i_52792 < 256; v_i_52792 = (1 + v_i_52792)) {\n            int v_tmp_52876 = 0; \n            v__52808 = v_tmp_52876; \n            int v_index_52877 = v__52797[(v_l_id_52791 + (256 * v_MWidthC_1 * v_w_id_52790) + (v_MWidthC_1 * v_i_52792))]; \n            if (v_index_52877 < 0) {\n              v__52810_0 = v__52808; \n            } else {\n              if (v_index_52877 >= v_VLength_3) {\n                v__52810_0 = v__52808; \n              } else {\n                v__52810_0 = v__52799[v_index_52877]; \n              }\n            }\n            v__52812_0 = bool_and(v__52810_0, v__52798[(v_l_id_52791 + (256 * v_MWidthC_1 * v_w_id_52790) + (v_MWidthC_1 * v_i_52792))]); \n            v__52806 = bool_or(v__52812_0, v__52806); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52793 = 0; \n            v__52815[v_l_id_52791] = id(v__52806); \n          }\n          /* end map_seq */\n          v_l_id_52791 = atomic_inc(&(v_work_idx_4098)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52794 = get_local_id(0); \n        int v_tmp_52880 = 0; \n        v__33230 = v_tmp_52880; \n        /* reduce_seq */\n        for (int v_i_52795 = 0; v_i_52795 < v_MWidthC_1; v_i_52795 = (1 + v_i_52795)) {\n          v__33230 = bool_or(v__33230, v__52815[(v_i_52795 + (v_MWidthC_1 * v_l_id_52794))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52796 = 0; \n          v__52820[v_w_id_52790] = doubleAndOr(v__33230, v__52801, v__52800[v_w_id_52790], v__52802); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52790 = atomic_inc(v_work_idx_4100); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__52797",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52798",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52799",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52800",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52801",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52802",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52804",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52815",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}