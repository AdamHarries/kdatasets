{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35715, const global int* restrict v__35716, const global int* restrict v__35717, const global int* restrict v__35718, int v__35719, int v__35720, global int* v__35740, global int* v__35722, local int* v__35735, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35724; \n  int v__35726; \n  int v__33230; \n  /* Private Memory */\n  int v__35728_0;\n  \n  int v__35730_0;\n  \n  int v__35734_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2497 = v__35722; \n    local int v_w_id_35708; \n    if (get_local_id(0) == 0) {\n      v_w_id_35708 = atomic_inc(v_work_idx_2497); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35708 < v_MHeight_2)){\n      for (int v_l_id_35709 = get_local_id(0); v_l_id_35709 < v_MWidthC_1; v_l_id_35709 = (v_l_id_35709 + get_local_size(0))) {\n        int v_tmp_35802 = 0; \n        v__35724 = v_tmp_35802; \n        /* reduce_while_seq */\n        for (int v_i_35710 = 0; v_i_35710 < 8; v_i_35710 = (1 + v_i_35710)) {\n          v__35734_0 = check(v__35724, v__35715[(v_l_id_35709 + (8 * v_MWidthC_1 * v_w_id_35708) + (v_MWidthC_1 * v_i_35710))]); \n          if (v__35734_0) {\n          } else {\n            break;\n          }\n          int v_tmp_35803 = 0; \n          v__35726 = v_tmp_35803; \n          int v_index_35804 = v__35715[(v_l_id_35709 + (8 * v_MWidthC_1 * v_w_id_35708) + (v_MWidthC_1 * v_i_35710))]; \n          if (v_index_35804 < 0) {\n            v__35728_0 = v__35726; \n          } else {\n            if (v_index_35804 >= v_VLength_3) {\n              v__35728_0 = v__35726; \n            } else {\n              v__35728_0 = v__35717[v_index_35804]; \n            }\n          }\n          v__35730_0 = bool_and(v__35728_0, v__35716[(v_l_id_35709 + (8 * v_MWidthC_1 * v_w_id_35708) + (v_MWidthC_1 * v_i_35710))]); \n          v__35724 = bool_or(v__35730_0, v__35724); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35711 = 0; \n          v__35735[v_l_id_35709] = id(v__35724); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2491; \n        v_work_idx_2491 = 0; \n        int v_l_id_35712 = atomic_inc(&(v_work_idx_2491)); \n        while((v_l_id_35712 < 1)){\n          int v_tmp_35807 = 0; \n          v__33230 = v_tmp_35807; \n          /* reduce_seq */\n          for (int v_i_35713 = 0; v_i_35713 < v_MWidthC_1; v_i_35713 = (1 + v_i_35713)) {\n            v__33230 = bool_or(v__33230, v__35735[(v_i_35713 + (v_MWidthC_1 * v_l_id_35712))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35714 = 0; \n            v__35740[v_w_id_35708] = doubleAndOr(v__33230, v__35719, v__35718[v_w_id_35708], v__35720); \n          }\n          /* end map_seq */\n          v_l_id_35712 = atomic_inc(&(v_work_idx_2491)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35708 = atomic_inc(v_work_idx_2497); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__35715",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35716",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35717",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35718",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35719",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35720",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35722",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35740",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35735",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}