{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44220, const global int* restrict v__44221, const global int* restrict v__44222, const global int* restrict v__44223, int v__44224, int v__44225, global int* v__44238, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44228; \n  int v__44230; \n  /* Private Memory */\n  int v__44232_0;\n  \n  int v__44234_0;\n  \n  for (int v_wg_id_44216 = get_group_id(0); v_wg_id_44216 < ((v_MHeight_2)/(64)); v_wg_id_44216 = (v_wg_id_44216 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3289; \n      v_work_idx_3289 = 0; \n      int v_l_id_44217 = atomic_inc(&(v_work_idx_3289)); \n      while((v_l_id_44217 < 64)){\n        int v_tmp_44276 = 0; \n        v__44228 = v_tmp_44276; \n        /* reduce_seq */\n        for (int v_i_44218 = 0; v_i_44218 < v_MWidthC_1; v_i_44218 = (1 + v_i_44218)) {\n          int v_tmp_44277 = 0; \n          v__44230 = v_tmp_44277; \n          int v_index_44278 = v__44220[(v_i_44218 + (64 * v_MWidthC_1 * v_wg_id_44216) + (v_MWidthC_1 * v_l_id_44217))]; \n          if (v_index_44278 < 0) {\n            v__44232_0 = v__44230; \n          } else {\n            if (v_index_44278 >= v_VLength_3) {\n              v__44232_0 = v__44230; \n            } else {\n              v__44232_0 = v__44222[v_index_44278]; \n            }\n          }\n          v__44234_0 = bool_and(v__44232_0, v__44221[(v_i_44218 + (64 * v_MWidthC_1 * v_wg_id_44216) + (v_MWidthC_1 * v_l_id_44217))]); \n          v__44228 = bool_or(v__44234_0, v__44228); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44219 = 0; \n          v__44238[(v_l_id_44217 + (64 * v_wg_id_44216))] = doubleAndOr(v__44228, v__44224, v__44223[(v_l_id_44217 + (64 * v_wg_id_44216))], v__44225); \n        }\n        /* end map_seq */\n        v_l_id_44217 = atomic_inc(&(v_work_idx_3289)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__44220",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44221",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44222",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44223",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44224",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44225",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}