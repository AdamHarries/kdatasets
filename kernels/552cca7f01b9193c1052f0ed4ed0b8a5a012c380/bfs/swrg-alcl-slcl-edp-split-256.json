{
  "name" : "swrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51230, const global int* restrict v__51231, const global int* restrict v__51232, const global int* restrict v__51233, int v__51234, int v__51235, global int* v__51254, local int* v__51249, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51238; \n  int v__51240; \n  int v__33230; \n  /* Private Memory */\n  int v__51242_0;\n  \n  int v__51244_0;\n  \n  int v__51248_0;\n  \n  for (int v_wg_id_51223 = get_group_id(0); v_wg_id_51223 < v_MHeight_2; v_wg_id_51223 = (v_wg_id_51223 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3947; \n      v_work_idx_3947 = 0; \n      int v_l_id_51224 = atomic_inc(&(v_work_idx_3947)); \n      while((v_l_id_51224 < v_MWidthC_1)){\n        int v_tmp_51314 = 0; \n        v__51238 = v_tmp_51314; \n        /* reduce_while_seq */\n        for (int v_i_51225 = 0; v_i_51225 < 256; v_i_51225 = (1 + v_i_51225)) {\n          v__51248_0 = check(v__51238, v__51230[(v_l_id_51224 + (256 * v_MWidthC_1 * v_wg_id_51223) + (v_MWidthC_1 * v_i_51225))]); \n          if (v__51248_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51315 = 0; \n          v__51240 = v_tmp_51315; \n          int v_index_51316 = v__51230[(v_l_id_51224 + (256 * v_MWidthC_1 * v_wg_id_51223) + (v_MWidthC_1 * v_i_51225))]; \n          if (v_index_51316 < 0) {\n            v__51242_0 = v__51240; \n          } else {\n            if (v_index_51316 >= v_VLength_3) {\n              v__51242_0 = v__51240; \n            } else {\n              v__51242_0 = v__51232[v_index_51316]; \n            }\n          }\n          v__51244_0 = bool_and(v__51242_0, v__51231[(v_l_id_51224 + (256 * v_MWidthC_1 * v_wg_id_51223) + (v_MWidthC_1 * v_i_51225))]); \n          v__51238 = bool_or(v__51244_0, v__51238); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51226 = 0; \n          v__51249[v_l_id_51224] = id(v__51238); \n        }\n        /* end map_seq */\n        v_l_id_51224 = atomic_inc(&(v_work_idx_3947)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_51227 = get_local_id(0); \n      int v_tmp_51319 = 0; \n      v__33230 = v_tmp_51319; \n      /* reduce_seq */\n      for (int v_i_51228 = 0; v_i_51228 < v_MWidthC_1; v_i_51228 = (1 + v_i_51228)) {\n        v__33230 = bool_or(v__33230, v__51249[(v_i_51228 + (v_MWidthC_1 * v_l_id_51227))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_51229 = 0; \n        v__51254[v_wg_id_51223] = doubleAndOr(v__33230, v__51234, v__51233[v_wg_id_51223], v__51235); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__51230",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51231",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51232",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51234",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51235",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__51254",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51249",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}