{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51852, const global int* restrict v__51853, const global int* restrict v__51854, const global int* restrict v__51855, int v__51856, int v__51857, global int* v__51875, global int* v__51865, global int* v__51859, local int* v__51870, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51861; \n  int v__51866; \n  int v__33230; \n  /* Private Memory */\n  int v__51863_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4008 = v__51859; \n    local int v_w_id_51844; \n    if (get_local_id(0) == 0) {\n      v_w_id_51844 = atomic_inc(v_work_idx_4008); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_51844 < v_MHeight_2)){\n      for (int v_l_id_51845 = get_local_id(0); v_l_id_51845 < v_MWidthC_1; v_l_id_51845 = (v_l_id_51845 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_51846 = 0; v_i_51846 < 256; v_i_51846 = (1 + v_i_51846)) {\n          int v_tmp_51938 = 0; \n          v__51861 = v_tmp_51938; \n          int v_index_51939 = v__51852[(v_l_id_51845 + (256 * v_MWidthC_1 * v_w_id_51844) + (v_MWidthC_1 * v_i_51846))]; \n          if (v_index_51939 < 0) {\n            v__51863_0 = v__51861; \n          } else {\n            if (v_index_51939 >= v_VLength_3) {\n              v__51863_0 = v__51861; \n            } else {\n              v__51863_0 = v__51854[v_index_51939]; \n            }\n          }\n          v__51865[(255 + (256 * v_MWidthC_1 * v_w_id_51844) + (-1 * v_i_51846) + (256 * v_l_id_51845))] = bool_and(v__51863_0, v__51853[(v_l_id_51845 + (256 * v_MWidthC_1 * v_w_id_51844) + (v_MWidthC_1 * v_i_51846))]); \n        }\n        /* end map_seq */\n        int v_tmp_51940 = 0; \n        v__51866 = v_tmp_51940; \n        /* reduce_seq */\n        for (int v_i_51847 = 0; v_i_51847 < 256; v_i_51847 = (1 + v_i_51847)) {\n          v__51866 = bool_or(v__51866, v__51865[(v_i_51847 + (256 * v_MWidthC_1 * v_w_id_51844) + (256 * v_l_id_51845))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51848 = 0; \n          v__51870[v_l_id_51845] = id(v__51866); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_51849 = get_local_id(0); \n        int v_tmp_51943 = 0; \n        v__33230 = v_tmp_51943; \n        /* reduce_seq */\n        for (int v_i_51850 = 0; v_i_51850 < v_MWidthC_1; v_i_51850 = (1 + v_i_51850)) {\n          v__33230 = bool_or(v__33230, v__51870[(v_i_51850 + (v_MWidthC_1 * v_l_id_51849))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51851 = 0; \n          v__51875[v_w_id_51844] = doubleAndOr(v__33230, v__51856, v__51855[v_w_id_51844], v__51857); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_51844 = atomic_inc(v_work_idx_4008); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__51852",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51853",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51854",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51856",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51857",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51865",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51859",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__51875",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51870",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}