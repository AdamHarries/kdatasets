{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52700, const global int* restrict v__52701, const global int* restrict v__52702, const global int* restrict v__52703, int v__52704, int v__52705, global int* v__52723, global int* v__52713, global int* v__52707, local int* v__52718, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52709; \n  int v__52714; \n  int v__33230; \n  /* Private Memory */\n  int v__52711_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4090 = v__52707; \n    local int v_w_id_52692; \n    if (get_local_id(0) == 0) {\n      v_w_id_52692 = atomic_inc(v_work_idx_4090); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52692 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4088; \n        v_work_idx_4088 = 0; \n        int v_l_id_52693 = atomic_inc(&(v_work_idx_4088)); \n        while((v_l_id_52693 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_52694 = 0; v_i_52694 < 256; v_i_52694 = (1 + v_i_52694)) {\n            int v_tmp_52778 = 0; \n            v__52709 = v_tmp_52778; \n            int v_index_52779 = v__52700[(v_l_id_52693 + (256 * v_MWidthC_1 * v_w_id_52692) + (v_MWidthC_1 * v_i_52694))]; \n            if (v_index_52779 < 0) {\n              v__52711_0 = v__52709; \n            } else {\n              if (v_index_52779 >= v_VLength_3) {\n                v__52711_0 = v__52709; \n              } else {\n                v__52711_0 = v__52702[v_index_52779]; \n              }\n            }\n            v__52713[(255 + (256 * v_MWidthC_1 * v_w_id_52692) + (-1 * v_i_52694) + (256 * v_l_id_52693))] = bool_and(v__52711_0, v__52701[(v_l_id_52693 + (256 * v_MWidthC_1 * v_w_id_52692) + (v_MWidthC_1 * v_i_52694))]); \n          }\n          /* end map_seq */\n          int v_tmp_52780 = 0; \n          v__52714 = v_tmp_52780; \n          /* reduce_seq */\n          for (int v_i_52695 = 0; v_i_52695 < 256; v_i_52695 = (1 + v_i_52695)) {\n            v__52714 = bool_or(v__52714, v__52713[(v_i_52695 + (256 * v_MWidthC_1 * v_w_id_52692) + (256 * v_l_id_52693))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52696 = 0; \n            v__52718[v_l_id_52693] = id(v__52714); \n          }\n          /* end map_seq */\n          v_l_id_52693 = atomic_inc(&(v_work_idx_4088)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52697 = get_local_id(0); \n        int v_tmp_52783 = 0; \n        v__33230 = v_tmp_52783; \n        /* reduce_seq */\n        for (int v_i_52698 = 0; v_i_52698 < v_MWidthC_1; v_i_52698 = (1 + v_i_52698)) {\n          v__33230 = bool_or(v__33230, v__52718[(v_i_52698 + (v_MWidthC_1 * v_l_id_52697))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52699 = 0; \n          v__52723[v_w_id_52692] = doubleAndOr(v__33230, v__52704, v__52703[v_w_id_52692], v__52705); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52692 = atomic_inc(v_work_idx_4090); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52700",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52701",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52702",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52703",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52704",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52705",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52713",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52707",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52723",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52718",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}