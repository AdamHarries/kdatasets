{
  "name" : "swrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44764, const global int* restrict v__44765, const global int* restrict v__44766, const global int* restrict v__44767, int v__44768, int v__44769, global int* v__44786, local int* v__44781, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44772; \n  int v__44774; \n  int v__33230; \n  /* Private Memory */\n  int v__44776_0;\n  \n  int v__44778_0;\n  \n  for (int v_wg_id_44757 = get_group_id(0); v_wg_id_44757 < v_MHeight_2; v_wg_id_44757 = (v_wg_id_44757 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3344; \n      v_work_idx_3344 = 0; \n      int v_l_id_44758 = atomic_inc(&(v_work_idx_3344)); \n      while((v_l_id_44758 < v_MWidthC_1)){\n        int v_tmp_44839 = 0; \n        v__44772 = v_tmp_44839; \n        /* reduce_seq */\n        for (int v_i_44759 = 0; v_i_44759 < 64; v_i_44759 = (1 + v_i_44759)) {\n          int v_tmp_44840 = 0; \n          v__44774 = v_tmp_44840; \n          int v_index_44841 = v__44764[(v_l_id_44758 + (64 * v_MWidthC_1 * v_wg_id_44757) + (v_MWidthC_1 * v_i_44759))]; \n          if (v_index_44841 < 0) {\n            v__44776_0 = v__44774; \n          } else {\n            if (v_index_44841 >= v_VLength_3) {\n              v__44776_0 = v__44774; \n            } else {\n              v__44776_0 = v__44766[v_index_44841]; \n            }\n          }\n          v__44778_0 = bool_and(v__44776_0, v__44765[(v_l_id_44758 + (64 * v_MWidthC_1 * v_wg_id_44757) + (v_MWidthC_1 * v_i_44759))]); \n          v__44772 = bool_or(v__44778_0, v__44772); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44760 = 0; \n          v__44781[v_l_id_44758] = id(v__44772); \n        }\n        /* end map_seq */\n        v_l_id_44758 = atomic_inc(&(v_work_idx_3344)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3339; \n      v_work_idx_3339 = 0; \n      int v_l_id_44761 = atomic_inc(&(v_work_idx_3339)); \n      while((v_l_id_44761 < 1)){\n        int v_tmp_44844 = 0; \n        v__33230 = v_tmp_44844; \n        /* reduce_seq */\n        for (int v_i_44762 = 0; v_i_44762 < v_MWidthC_1; v_i_44762 = (1 + v_i_44762)) {\n          v__33230 = bool_or(v__33230, v__44781[(v_i_44762 + (v_MWidthC_1 * v_l_id_44761))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44763 = 0; \n          v__44786[v_wg_id_44757] = doubleAndOr(v__33230, v__44768, v__44767[v_wg_id_44757], v__44769); \n        }\n        /* end map_seq */\n        v_l_id_44761 = atomic_inc(&(v_work_idx_3339)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__44764",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44765",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44766",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44768",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44769",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44786",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44781",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}