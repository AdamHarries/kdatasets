{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34768, const global int* restrict v__34769, const global int* restrict v__34770, const global int* restrict v__34771, int v__34772, int v__34773, global int* v__34790, local int* v__34785, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34776; \n  int v__34778; \n  int v__33230; \n  /* Private Memory */\n  int v__34780_0;\n  \n  int v__34782_0;\n  \n  for (int v_wg_id_34761 = get_group_id(0); v_wg_id_34761 < v_MHeight_2; v_wg_id_34761 = (v_wg_id_34761 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2408; \n      v_work_idx_2408 = 0; \n      int v_l_id_34762 = atomic_inc(&(v_work_idx_2408)); \n      while((v_l_id_34762 < v_MWidthC_1)){\n        int v_tmp_34843 = 0; \n        v__34776 = v_tmp_34843; \n        /* reduce_seq */\n        for (int v_i_34763 = 0; v_i_34763 < 8; v_i_34763 = (1 + v_i_34763)) {\n          int v_tmp_34844 = 0; \n          v__34778 = v_tmp_34844; \n          int v_index_34845 = v__34768[(v_l_id_34762 + (8 * v_MWidthC_1 * v_wg_id_34761) + (v_MWidthC_1 * v_i_34763))]; \n          if (v_index_34845 < 0) {\n            v__34780_0 = v__34778; \n          } else {\n            if (v_index_34845 >= v_VLength_3) {\n              v__34780_0 = v__34778; \n            } else {\n              v__34780_0 = v__34770[v_index_34845]; \n            }\n          }\n          v__34782_0 = bool_and(v__34780_0, v__34769[(v_l_id_34762 + (8 * v_MWidthC_1 * v_wg_id_34761) + (v_MWidthC_1 * v_i_34763))]); \n          v__34776 = bool_or(v__34782_0, v__34776); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34764 = 0; \n          v__34785[v_l_id_34762] = id(v__34776); \n        }\n        /* end map_seq */\n        v_l_id_34762 = atomic_inc(&(v_work_idx_2408)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2403; \n      v_work_idx_2403 = 0; \n      int v_l_id_34765 = atomic_inc(&(v_work_idx_2403)); \n      while((v_l_id_34765 < 1)){\n        int v_tmp_34848 = 0; \n        v__33230 = v_tmp_34848; \n        /* reduce_seq */\n        for (int v_i_34766 = 0; v_i_34766 < v_MWidthC_1; v_i_34766 = (1 + v_i_34766)) {\n          v__33230 = bool_or(v__33230, v__34785[(v_i_34766 + (v_MWidthC_1 * v_l_id_34765))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34767 = 0; \n          v__34790[v_wg_id_34761] = doubleAndOr(v__33230, v__34772, v__34771[v_wg_id_34761], v__34773); \n        }\n        /* end map_seq */\n        v_l_id_34765 = atomic_inc(&(v_work_idx_2403)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__34768",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34769",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34770",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34771",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34772",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34773",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__34790",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34785",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}