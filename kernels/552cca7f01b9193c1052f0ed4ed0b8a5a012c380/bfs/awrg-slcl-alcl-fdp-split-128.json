{
  "name" : "awrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48942, const global int* restrict v__48943, const global int* restrict v__48944, const global int* restrict v__48945, int v__48946, int v__48947, global int* v__48965, global int* v__48949, local int* v__48960, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48951; \n  int v__48953; \n  int v__33230; \n  /* Private Memory */\n  int v__48955_0;\n  \n  int v__48957_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3735 = v__48949; \n    local int v_w_id_48935; \n    if (get_local_id(0) == 0) {\n      v_w_id_48935 = atomic_inc(v_work_idx_3735); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48935 < v_MHeight_2)){\n      for (int v_l_id_48936 = get_local_id(0); v_l_id_48936 < v_MWidthC_1; v_l_id_48936 = (v_l_id_48936 + get_local_size(0))) {\n        int v_tmp_49024 = 0; \n        v__48951 = v_tmp_49024; \n        /* reduce_seq */\n        for (int v_i_48937 = 0; v_i_48937 < 128; v_i_48937 = (1 + v_i_48937)) {\n          int v_tmp_49025 = 0; \n          v__48953 = v_tmp_49025; \n          int v_index_49026 = v__48942[(v_l_id_48936 + (128 * v_MWidthC_1 * v_w_id_48935) + (v_MWidthC_1 * v_i_48937))]; \n          if (v_index_49026 < 0) {\n            v__48955_0 = v__48953; \n          } else {\n            if (v_index_49026 >= v_VLength_3) {\n              v__48955_0 = v__48953; \n            } else {\n              v__48955_0 = v__48944[v_index_49026]; \n            }\n          }\n          v__48957_0 = bool_and(v__48955_0, v__48943[(v_l_id_48936 + (128 * v_MWidthC_1 * v_w_id_48935) + (v_MWidthC_1 * v_i_48937))]); \n          v__48951 = bool_or(v__48957_0, v__48951); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48938 = 0; \n          v__48960[v_l_id_48936] = id(v__48951); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3729; \n        v_work_idx_3729 = 0; \n        int v_l_id_48939 = atomic_inc(&(v_work_idx_3729)); \n        while((v_l_id_48939 < 1)){\n          int v_tmp_49029 = 0; \n          v__33230 = v_tmp_49029; \n          /* reduce_seq */\n          for (int v_i_48940 = 0; v_i_48940 < v_MWidthC_1; v_i_48940 = (1 + v_i_48940)) {\n            v__33230 = bool_or(v__33230, v__48960[(v_i_48940 + (v_MWidthC_1 * v_l_id_48939))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48941 = 0; \n            v__48965[v_w_id_48935] = doubleAndOr(v__33230, v__48946, v__48945[v_w_id_48935], v__48947); \n          }\n          /* end map_seq */\n          v_l_id_48939 = atomic_inc(&(v_work_idx_3729)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48935 = atomic_inc(v_work_idx_3735); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__48942",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48943",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48944",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48945",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48946",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48947",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48949",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48960",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}