{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48096, const global int* restrict v__48097, const global int* restrict v__48098, const global int* restrict v__48099, int v__48100, int v__48101, global int* v__48118, local int* v__48113, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48104; \n  int v__48106; \n  int v__33230; \n  /* Private Memory */\n  int v__48108_0;\n  \n  int v__48110_0;\n  \n  for (int v_wg_id_48089 = get_group_id(0); v_wg_id_48089 < v_MHeight_2; v_wg_id_48089 = (v_wg_id_48089 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3656; \n      v_work_idx_3656 = 0; \n      int v_l_id_48090 = atomic_inc(&(v_work_idx_3656)); \n      while((v_l_id_48090 < v_MWidthC_1)){\n        int v_tmp_48171 = 0; \n        v__48104 = v_tmp_48171; \n        /* reduce_seq */\n        for (int v_i_48091 = 0; v_i_48091 < 128; v_i_48091 = (1 + v_i_48091)) {\n          int v_tmp_48172 = 0; \n          v__48106 = v_tmp_48172; \n          int v_index_48173 = v__48096[(v_l_id_48090 + (128 * v_MWidthC_1 * v_wg_id_48089) + (v_MWidthC_1 * v_i_48091))]; \n          if (v_index_48173 < 0) {\n            v__48108_0 = v__48106; \n          } else {\n            if (v_index_48173 >= v_VLength_3) {\n              v__48108_0 = v__48106; \n            } else {\n              v__48108_0 = v__48098[v_index_48173]; \n            }\n          }\n          v__48110_0 = bool_and(v__48108_0, v__48097[(v_l_id_48090 + (128 * v_MWidthC_1 * v_wg_id_48089) + (v_MWidthC_1 * v_i_48091))]); \n          v__48104 = bool_or(v__48110_0, v__48104); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48092 = 0; \n          v__48113[v_l_id_48090] = id(v__48104); \n        }\n        /* end map_seq */\n        v_l_id_48090 = atomic_inc(&(v_work_idx_3656)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3651; \n      v_work_idx_3651 = 0; \n      int v_l_id_48093 = atomic_inc(&(v_work_idx_3651)); \n      while((v_l_id_48093 < 1)){\n        int v_tmp_48176 = 0; \n        v__33230 = v_tmp_48176; \n        /* reduce_seq */\n        for (int v_i_48094 = 0; v_i_48094 < v_MWidthC_1; v_i_48094 = (1 + v_i_48094)) {\n          v__33230 = bool_or(v__33230, v__48113[(v_i_48094 + (v_MWidthC_1 * v_l_id_48093))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48095 = 0; \n          v__48118[v_wg_id_48089] = doubleAndOr(v__33230, v__48100, v__48099[v_wg_id_48089], v__48101); \n        }\n        /* end map_seq */\n        v_l_id_48093 = atomic_inc(&(v_work_idx_3651)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__48096",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48097",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48098",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48100",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48101",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__48118",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48113",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}