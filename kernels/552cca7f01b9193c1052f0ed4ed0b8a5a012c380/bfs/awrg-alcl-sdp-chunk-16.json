{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39151, const global int* restrict v__39152, const global int* restrict v__39153, const global int* restrict v__39154, int v__39155, int v__39156, global int* v__39170, global int* v__39164, global int* v__39158, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39160; \n  int v__39165; \n  /* Private Memory */\n  int v__39162_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2817 = v__39158; \n    local int v_w_id_39146; \n    if (get_local_id(0) == 0) {\n      v_w_id_39146 = atomic_inc(v_work_idx_2817); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39146 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2815; \n        v_work_idx_2815 = 0; \n        int v_l_id_39147 = atomic_inc(&(v_work_idx_2815)); \n        while((v_l_id_39147 < 16)){\n          /* map_seq */\n          for (int v_i_39148 = 0; v_i_39148 < v_MWidthC_1; v_i_39148 = (1 + v_i_39148)) {\n            int v_tmp_39209 = 0; \n            v__39160 = v_tmp_39209; \n            int v_index_39210 = v__39151[(v_i_39148 + (16 * v_MWidthC_1 * v_w_id_39146) + (v_MWidthC_1 * v_l_id_39147))]; \n            if (v_index_39210 < 0) {\n              v__39162_0 = v__39160; \n            } else {\n              if (v_index_39210 >= v_VLength_3) {\n                v__39162_0 = v__39160; \n              } else {\n                v__39162_0 = v__39153[v_index_39210]; \n              }\n            }\n            v__39164[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_39146) + (-1 * v_i_39148) + (v_MWidthC_1 * v_l_id_39147))] = bool_and(v__39162_0, v__39152[(v_i_39148 + (16 * v_MWidthC_1 * v_w_id_39146) + (v_MWidthC_1 * v_l_id_39147))]); \n          }\n          /* end map_seq */\n          int v_tmp_39211 = 0; \n          v__39165 = v_tmp_39211; \n          /* reduce_seq */\n          for (int v_i_39149 = 0; v_i_39149 < v_MWidthC_1; v_i_39149 = (1 + v_i_39149)) {\n            v__39165 = bool_or(v__39165, v__39164[(v_i_39149 + (16 * v_MWidthC_1 * v_w_id_39146) + (v_MWidthC_1 * v_l_id_39147))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39150 = 0; \n            v__39170[(v_l_id_39147 + (16 * v_w_id_39146))] = doubleAndOr(v__39165, v__39155, v__39154[(v_l_id_39147 + (16 * v_w_id_39146))], v__39156); \n          }\n          /* end map_seq */\n          v_l_id_39147 = atomic_inc(&(v_work_idx_2815)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39146 = atomic_inc(v_work_idx_2817); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39151",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39153",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39154",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39155",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39156",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39158",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}