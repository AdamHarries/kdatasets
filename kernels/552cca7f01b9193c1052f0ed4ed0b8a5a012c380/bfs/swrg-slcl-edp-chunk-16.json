{
  "name" : "swrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36767, const global int* restrict v__36768, const global int* restrict v__36769, const global int* restrict v__36770, int v__36771, int v__36772, global int* v__36787, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36774; \n  int v__36777; \n  /* Private Memory */\n  int v__36779_0;\n  \n  int v__36781_0;\n  \n  int v__36785_0;\n  \n  for (int v_wg_id_36763 = get_group_id(0); v_wg_id_36763 < ((v_MHeight_2)/(16)); v_wg_id_36763 = (v_wg_id_36763 + get_num_groups(0))) {\n    for (int v_l_id_36764 = get_local_id(0); v_l_id_36764 < 16; v_l_id_36764 = (v_l_id_36764 + get_local_size(0))) {\n      int v_tmp_36835 = 0; \n      v__36774 = v_tmp_36835; \n      /* reduce_while_seq */\n      for (int v_i_36765 = 0; v_i_36765 < v_MWidthC_1; v_i_36765 = (1 + v_i_36765)) {\n        v__36785_0 = check(v__36774, v__36767[(v_i_36765 + (16 * v_MWidthC_1 * v_wg_id_36763) + (v_MWidthC_1 * v_l_id_36764))]); \n        if (v__36785_0) {\n        } else {\n          break;\n        }\n        int v_tmp_36836 = 0; \n        v__36777 = v_tmp_36836; \n        int v_index_36837 = v__36767[(v_i_36765 + (16 * v_MWidthC_1 * v_wg_id_36763) + (v_MWidthC_1 * v_l_id_36764))]; \n        if (v_index_36837 < 0) {\n          v__36779_0 = v__36777; \n        } else {\n          if (v_index_36837 >= v_VLength_3) {\n            v__36779_0 = v__36777; \n          } else {\n            v__36779_0 = v__36769[v_index_36837]; \n          }\n        }\n        v__36781_0 = bool_and(v__36779_0, v__36768[(v_i_36765 + (16 * v_MWidthC_1 * v_wg_id_36763) + (v_MWidthC_1 * v_l_id_36764))]); \n        v__36774 = bool_or(v__36781_0, v__36774); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36766 = 0; \n        v__36787[(v_l_id_36764 + (16 * v_wg_id_36763))] = doubleAndOr(v__36774, v__36771, v__36770[(v_l_id_36764 + (16 * v_wg_id_36763))], v__36772); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__36767",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36768",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36769",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36770",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36771",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36772",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__36787",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}