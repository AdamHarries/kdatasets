{
  "name" : "swrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33362, const global int* restrict v__33363, const global int* restrict v__33364, const global int* restrict v__33365, int v__33366, int v__33367, global int* v__33380, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33370; \n  int v__33372; \n  /* Private Memory */\n  int v__33374_0;\n  \n  int v__33376_0;\n  \n  for (int v_wg_id_33358 = get_group_id(0); v_wg_id_33358 < ((v_MHeight_2)/(8)); v_wg_id_33358 = (v_wg_id_33358 + get_num_groups(0))) {\n    for (int v_l_id_33359 = get_local_id(0); v_l_id_33359 < 8; v_l_id_33359 = (v_l_id_33359 + get_local_size(0))) {\n      int v_tmp_33422 = 0; \n      v__33370 = v_tmp_33422; \n      /* reduce_seq */\n      for (int v_i_33360 = 0; v_i_33360 < v_MWidthC_1; v_i_33360 = (1 + v_i_33360)) {\n        int v_tmp_33423 = 0; \n        v__33372 = v_tmp_33423; \n        int v_index_33424 = v__33362[(v_i_33360 + (8 * v_MWidthC_1 * v_wg_id_33358) + (v_MWidthC_1 * v_l_id_33359))]; \n        if (v_index_33424 < 0) {\n          v__33374_0 = v__33372; \n        } else {\n          if (v_index_33424 >= v_VLength_3) {\n            v__33374_0 = v__33372; \n          } else {\n            v__33374_0 = v__33364[v_index_33424]; \n          }\n        }\n        v__33376_0 = bool_and(v__33374_0, v__33363[(v_i_33360 + (8 * v_MWidthC_1 * v_wg_id_33358) + (v_MWidthC_1 * v_l_id_33359))]); \n        v__33370 = bool_or(v__33376_0, v__33370); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33361 = 0; \n        v__33380[(v_l_id_33359 + (8 * v_wg_id_33358))] = doubleAndOr(v__33370, v__33366, v__33365[(v_l_id_33359 + (8 * v_wg_id_33358))], v__33367); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__33362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33363",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33364",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33365",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33366",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33367",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}