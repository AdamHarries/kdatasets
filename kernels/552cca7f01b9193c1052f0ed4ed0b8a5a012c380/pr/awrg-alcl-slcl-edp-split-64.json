{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93922, const global float* restrict v__93923, const global float* restrict v__93924, const global float* restrict v__93925, float v__93926, float v__93927, global float* v__93947, global int* v__93929, local float* v__93942, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93931; \n  float v__93933; \n  float v__80917; \n  /* Private Memory */\n  float v__93935_0;\n  \n  float v__93937_0;\n  \n  int v__93941_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7940 = v__93929; \n    local int v_w_id_93915; \n    if (get_local_id(0) == 0) {\n      v_w_id_93915 = atomic_inc(v_work_idx_7940); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93915 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7938; \n        v_work_idx_7938 = 0; \n        int v_l_id_93916 = atomic_inc(&(v_work_idx_7938)); \n        while((v_l_id_93916 < v_MWidthC_1)){\n          float v_tmp_94005 = 0.0f; \n          v__93931 = v_tmp_94005; \n          /* reduce_while_seq */\n          for (int v_i_93917 = 0; v_i_93917 < 64; v_i_93917 = (1 + v_i_93917)) {\n            v__93941_0 = check(v__93931, v__93922[(v_l_id_93916 + (64 * v_MWidthC_1 * v_w_id_93915) + (v_MWidthC_1 * v_i_93917))]); \n            if (v__93941_0) {\n            } else {\n              break;\n            }\n            float v_tmp_94006 = 0.0f; \n            v__93933 = v_tmp_94006; \n            int v_index_94007 = v__93922[(v_l_id_93916 + (64 * v_MWidthC_1 * v_w_id_93915) + (v_MWidthC_1 * v_i_93917))]; \n            if (v_index_94007 < 0) {\n              v__93935_0 = v__93933; \n            } else {\n              if (v_index_94007 >= v_VLength_3) {\n                v__93935_0 = v__93933; \n              } else {\n                v__93935_0 = v__93924[v_index_94007]; \n              }\n            }\n            v__93937_0 = mult(v__93935_0, v__93923[(v_l_id_93916 + (64 * v_MWidthC_1 * v_w_id_93915) + (v_MWidthC_1 * v_i_93917))]); \n            v__93931 = add(v__93937_0, v__93931); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93918 = 0; \n            v__93942[v_l_id_93916] = id(v__93931); \n          }\n          /* end map_seq */\n          v_l_id_93916 = atomic_inc(&(v_work_idx_7938)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93919 = get_local_id(0); \n        float v_tmp_94010 = 0.0f; \n        v__80917 = v_tmp_94010; \n        /* reduce_seq */\n        for (int v_i_93920 = 0; v_i_93920 < v_MWidthC_1; v_i_93920 = (1 + v_i_93920)) {\n          v__80917 = add(v__80917, v__93942[(v_i_93920 + (v_MWidthC_1 * v_l_id_93919))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93921 = 0; \n          v__93947[v_w_id_93915] = doubleMultiplyAdd(v__80917, v__93926, v__93925[v_w_id_93915], v__93927); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93915 = atomic_inc(v_work_idx_7940); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93922",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93923",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93924",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93925",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93926",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93927",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93929",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93942",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}