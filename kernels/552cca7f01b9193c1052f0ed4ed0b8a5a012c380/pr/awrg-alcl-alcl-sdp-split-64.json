{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94025, const global float* restrict v__94026, const global float* restrict v__94027, const global float* restrict v__94028, float v__94029, float v__94030, global float* v__94048, global float* v__94038, global int* v__94032, local float* v__94043, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94034; \n  float v__94039; \n  float v__80917; \n  /* Private Memory */\n  float v__94036_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7952 = v__94032; \n    local int v_w_id_94017; \n    if (get_local_id(0) == 0) {\n      v_w_id_94017 = atomic_inc(v_work_idx_7952); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94017 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7950; \n        v_work_idx_7950 = 0; \n        int v_l_id_94018 = atomic_inc(&(v_work_idx_7950)); \n        while((v_l_id_94018 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_94019 = 0; v_i_94019 < 64; v_i_94019 = (1 + v_i_94019)) {\n            float v_tmp_94099 = 0.0f; \n            v__94034 = v_tmp_94099; \n            int v_index_94100 = v__94025[(v_l_id_94018 + (64 * v_MWidthC_1 * v_w_id_94017) + (v_MWidthC_1 * v_i_94019))]; \n            if (v_index_94100 < 0) {\n              v__94036_0 = v__94034; \n            } else {\n              if (v_index_94100 >= v_VLength_3) {\n                v__94036_0 = v__94034; \n              } else {\n                v__94036_0 = v__94027[v_index_94100]; \n              }\n            }\n            v__94038[(63 + (64 * v_MWidthC_1 * v_w_id_94017) + (-1 * v_i_94019) + (64 * v_l_id_94018))] = mult(v__94036_0, v__94026[(v_l_id_94018 + (64 * v_MWidthC_1 * v_w_id_94017) + (v_MWidthC_1 * v_i_94019))]); \n          }\n          /* end map_seq */\n          float v_tmp_94101 = 0.0f; \n          v__94039 = v_tmp_94101; \n          /* reduce_seq */\n          for (int v_i_94020 = 0; v_i_94020 < 64; v_i_94020 = (1 + v_i_94020)) {\n            v__94039 = add(v__94039, v__94038[(v_i_94020 + (64 * v_MWidthC_1 * v_w_id_94017) + (64 * v_l_id_94018))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94021 = 0; \n            v__94043[v_l_id_94018] = id(v__94039); \n          }\n          /* end map_seq */\n          v_l_id_94018 = atomic_inc(&(v_work_idx_7950)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7944; \n        v_work_idx_7944 = 0; \n        int v_l_id_94022 = atomic_inc(&(v_work_idx_7944)); \n        while((v_l_id_94022 < 1)){\n          float v_tmp_94104 = 0.0f; \n          v__80917 = v_tmp_94104; \n          /* reduce_seq */\n          for (int v_i_94023 = 0; v_i_94023 < v_MWidthC_1; v_i_94023 = (1 + v_i_94023)) {\n            v__80917 = add(v__80917, v__94043[(v_i_94023 + (v_MWidthC_1 * v_l_id_94022))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94024 = 0; \n            v__94048[v_w_id_94017] = doubleMultiplyAdd(v__80917, v__94029, v__94028[v_w_id_94017], v__94030); \n          }\n          /* end map_seq */\n          v_l_id_94022 = atomic_inc(&(v_work_idx_7944)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94017 = atomic_inc(v_work_idx_7952); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94025",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94026",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94027",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94029",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94030",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94038",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94032",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94043",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}