{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__100875, const global float* restrict v__100876, const global float* restrict v__100877, const global float* restrict v__100878, float v__100879, float v__100880, global float* v__100900, global int* v__100882, local float* v__100895, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100884; \n  float v__100886; \n  float v__80917; \n  /* Private Memory */\n  float v__100888_0;\n  \n  float v__100890_0;\n  \n  int v__100894_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8598 = v__100882; \n    local int v_w_id_100868; \n    if (get_local_id(0) == 0) {\n      v_w_id_100868 = atomic_inc(v_work_idx_8598); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100868 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8596; \n        v_work_idx_8596 = 0; \n        int v_l_id_100869 = atomic_inc(&(v_work_idx_8596)); \n        while((v_l_id_100869 < v_MWidthC_1)){\n          float v_tmp_100954 = 0.0f; \n          v__100884 = v_tmp_100954; \n          /* reduce_while_seq */\n          for (int v_i_100870 = 0; v_i_100870 < 256; v_i_100870 = (1 + v_i_100870)) {\n            v__100894_0 = check(v__100884, v__100875[(v_l_id_100869 + (256 * v_MWidthC_1 * v_w_id_100868) + (v_MWidthC_1 * v_i_100870))]); \n            if (v__100894_0) {\n            } else {\n              break;\n            }\n            float v_tmp_100955 = 0.0f; \n            v__100886 = v_tmp_100955; \n            int v_index_100956 = v__100875[(v_l_id_100869 + (256 * v_MWidthC_1 * v_w_id_100868) + (v_MWidthC_1 * v_i_100870))]; \n            if (v_index_100956 < 0) {\n              v__100888_0 = v__100886; \n            } else {\n              if (v_index_100956 >= v_VLength_3) {\n                v__100888_0 = v__100886; \n              } else {\n                v__100888_0 = v__100877[v_index_100956]; \n              }\n            }\n            v__100890_0 = mult(v__100888_0, v__100876[(v_l_id_100869 + (256 * v_MWidthC_1 * v_w_id_100868) + (v_MWidthC_1 * v_i_100870))]); \n            v__100884 = add(v__100890_0, v__100884); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100871 = 0; \n            v__100895[v_l_id_100869] = id(v__100884); \n          }\n          /* end map_seq */\n          v_l_id_100869 = atomic_inc(&(v_work_idx_8596)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8591; \n        v_work_idx_8591 = 0; \n        int v_l_id_100872 = atomic_inc(&(v_work_idx_8591)); \n        while((v_l_id_100872 < 1)){\n          float v_tmp_100959 = 0.0f; \n          v__80917 = v_tmp_100959; \n          /* reduce_seq */\n          for (int v_i_100873 = 0; v_i_100873 < v_MWidthC_1; v_i_100873 = (1 + v_i_100873)) {\n            v__80917 = add(v__80917, v__100895[(v_i_100873 + (v_MWidthC_1 * v_l_id_100872))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100874 = 0; \n            v__100900[v_w_id_100868] = doubleMultiplyAdd(v__80917, v__100879, v__100878[v_w_id_100868], v__100880); \n          }\n          /* end map_seq */\n          v_l_id_100872 = atomic_inc(&(v_work_idx_8591)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100868 = atomic_inc(v_work_idx_8598); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100875",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100876",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100877",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100879",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100880",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100882",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100900",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100895",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}