{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88200, const global float* restrict v__88201, const global float* restrict v__88202, const global float* restrict v__88203, float v__88204, float v__88205, global float* v__88222, global float* v__88212, local float* v__88217, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88208; \n  float v__88213; \n  float v__80917; \n  /* Private Memory */\n  float v__88210_0;\n  \n  for (int v_wg_id_88192 = get_group_id(0); v_wg_id_88192 < v_MHeight_2; v_wg_id_88192 = (v_wg_id_88192 + get_num_groups(0))) {\n    for (int v_l_id_88193 = get_local_id(0); v_l_id_88193 < v_MWidthC_1; v_l_id_88193 = (v_l_id_88193 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_88194 = 0; v_i_88194 < 32; v_i_88194 = (1 + v_i_88194)) {\n        float v_tmp_88283 = 0.0f; \n        v__88208 = v_tmp_88283; \n        int v_index_88284 = v__88200[(v_l_id_88193 + (32 * v_MWidthC_1 * v_wg_id_88192) + (v_MWidthC_1 * v_i_88194))]; \n        if (v_index_88284 < 0) {\n          v__88210_0 = v__88208; \n        } else {\n          if (v_index_88284 >= v_VLength_3) {\n            v__88210_0 = v__88208; \n          } else {\n            v__88210_0 = v__88202[v_index_88284]; \n          }\n        }\n        v__88212[(31 + (32 * v_MWidthC_1 * v_wg_id_88192) + (-1 * v_i_88194) + (32 * v_l_id_88193))] = mult(v__88210_0, v__88201[(v_l_id_88193 + (32 * v_MWidthC_1 * v_wg_id_88192) + (v_MWidthC_1 * v_i_88194))]); \n      }\n      /* end map_seq */\n      float v_tmp_88285 = 0.0f; \n      v__88213 = v_tmp_88285; \n      /* reduce_seq */\n      for (int v_i_88195 = 0; v_i_88195 < 32; v_i_88195 = (1 + v_i_88195)) {\n        v__88213 = add(v__88213, v__88212[(v_i_88195 + (32 * v_MWidthC_1 * v_wg_id_88192) + (32 * v_l_id_88193))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88196 = 0; \n        v__88217[v_l_id_88193] = id(v__88213); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7395; \n      v_work_idx_7395 = 0; \n      int v_l_id_88197 = atomic_inc(&(v_work_idx_7395)); \n      while((v_l_id_88197 < 1)){\n        float v_tmp_88288 = 0.0f; \n        v__80917 = v_tmp_88288; \n        /* reduce_seq */\n        for (int v_i_88198 = 0; v_i_88198 < v_MWidthC_1; v_i_88198 = (1 + v_i_88198)) {\n          v__80917 = add(v__80917, v__88217[(v_i_88198 + (v_MWidthC_1 * v_l_id_88197))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88199 = 0; \n          v__88222[v_wg_id_88192] = doubleMultiplyAdd(v__80917, v__88204, v__88203[v_wg_id_88192], v__88205); \n        }\n        /* end map_seq */\n        v_l_id_88197 = atomic_inc(&(v_work_idx_7395)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88200",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88201",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88202",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88203",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88204",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88205",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88212",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88217",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}