{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__96735, const global float* restrict v__96736, const global float* restrict v__96737, const global float* restrict v__96738, float v__96739, float v__96740, global float* v__96760, global int* v__96742, local float* v__96755, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96744; \n  float v__96746; \n  float v__80917; \n  /* Private Memory */\n  float v__96748_0;\n  \n  float v__96750_0;\n  \n  int v__96754_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8199 = v__96742; \n    local int v_w_id_96728; \n    if (get_local_id(0) == 0) {\n      v_w_id_96728 = atomic_inc(v_work_idx_8199); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96728 < v_MHeight_2)){\n      for (int v_l_id_96729 = get_local_id(0); v_l_id_96729 < v_MWidthC_1; v_l_id_96729 = (v_l_id_96729 + get_local_size(0))) {\n        float v_tmp_96822 = 0.0f; \n        v__96744 = v_tmp_96822; \n        /* reduce_while_seq */\n        for (int v_i_96730 = 0; v_i_96730 < 128; v_i_96730 = (1 + v_i_96730)) {\n          v__96754_0 = check(v__96744, v__96735[(v_l_id_96729 + (128 * v_MWidthC_1 * v_w_id_96728) + (v_MWidthC_1 * v_i_96730))]); \n          if (v__96754_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96823 = 0.0f; \n          v__96746 = v_tmp_96823; \n          int v_index_96824 = v__96735[(v_l_id_96729 + (128 * v_MWidthC_1 * v_w_id_96728) + (v_MWidthC_1 * v_i_96730))]; \n          if (v_index_96824 < 0) {\n            v__96748_0 = v__96746; \n          } else {\n            if (v_index_96824 >= v_VLength_3) {\n              v__96748_0 = v__96746; \n            } else {\n              v__96748_0 = v__96737[v_index_96824]; \n            }\n          }\n          v__96750_0 = mult(v__96748_0, v__96736[(v_l_id_96729 + (128 * v_MWidthC_1 * v_w_id_96728) + (v_MWidthC_1 * v_i_96730))]); \n          v__96744 = add(v__96750_0, v__96744); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96731 = 0; \n          v__96755[v_l_id_96729] = id(v__96744); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8193; \n        v_work_idx_8193 = 0; \n        int v_l_id_96732 = atomic_inc(&(v_work_idx_8193)); \n        while((v_l_id_96732 < 1)){\n          float v_tmp_96827 = 0.0f; \n          v__80917 = v_tmp_96827; \n          /* reduce_seq */\n          for (int v_i_96733 = 0; v_i_96733 < v_MWidthC_1; v_i_96733 = (1 + v_i_96733)) {\n            v__80917 = add(v__80917, v__96755[(v_i_96733 + (v_MWidthC_1 * v_l_id_96732))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96734 = 0; \n            v__96760[v_w_id_96728] = doubleMultiplyAdd(v__80917, v__96739, v__96738[v_w_id_96728], v__96740); \n          }\n          /* end map_seq */\n          v_l_id_96732 = atomic_inc(&(v_work_idx_8193)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96728 = atomic_inc(v_work_idx_8199); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96735",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96736",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96737",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96738",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96739",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96740",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96742",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96760",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96755",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}