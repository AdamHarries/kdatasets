{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89463, const global float* restrict v__89464, const global float* restrict v__89465, const global float* restrict v__89466, float v__89467, float v__89468, global float* v__89484, global int* v__89470, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89471; \n  float v__89474; \n  /* Private Memory */\n  float v__89476_0;\n  \n  float v__89478_0;\n  \n  int v__89482_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7516 = v__89470; \n    local int v_w_id_89459; \n    if (get_local_id(0) == 0) {\n      v_w_id_89459 = atomic_inc(v_work_idx_7516); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89459 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_89460 = get_local_id(0); v_l_id_89460 < 32; v_l_id_89460 = (v_l_id_89460 + get_local_size(0))) {\n        float v_tmp_89531 = 0.0f; \n        v__89471 = v_tmp_89531; \n        /* reduce_while_seq */\n        for (int v_i_89461 = 0; v_i_89461 < v_MWidthC_1; v_i_89461 = (1 + v_i_89461)) {\n          v__89482_0 = check(v__89471, v__89463[(v_i_89461 + (32 * v_MWidthC_1 * v_w_id_89459) + (v_MWidthC_1 * v_l_id_89460))]); \n          if (v__89482_0) {\n          } else {\n            break;\n          }\n          float v_tmp_89532 = 0.0f; \n          v__89474 = v_tmp_89532; \n          int v_index_89533 = v__89463[(v_i_89461 + (32 * v_MWidthC_1 * v_w_id_89459) + (v_MWidthC_1 * v_l_id_89460))]; \n          if (v_index_89533 < 0) {\n            v__89476_0 = v__89474; \n          } else {\n            if (v_index_89533 >= v_VLength_3) {\n              v__89476_0 = v__89474; \n            } else {\n              v__89476_0 = v__89465[v_index_89533]; \n            }\n          }\n          v__89478_0 = mult(v__89476_0, v__89464[(v_i_89461 + (32 * v_MWidthC_1 * v_w_id_89459) + (v_MWidthC_1 * v_l_id_89460))]); \n          v__89471 = add(v__89478_0, v__89471); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89462 = 0; \n          v__89484[(v_l_id_89460 + (32 * v_w_id_89459))] = doubleMultiplyAdd(v__89471, v__89467, v__89466[(v_l_id_89460 + (32 * v_w_id_89459))], v__89468); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_89459 = atomic_inc(v_work_idx_7516); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__89463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89464",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89465",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89466",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89467",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89468",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89470",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}