{
  "name" : "swrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82262, const global float* restrict v__82263, const global float* restrict v__82264, const global float* restrict v__82265, float v__82266, float v__82267, global float* v__82286, local float* v__82281, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82270; \n  float v__82272; \n  float v__80917; \n  /* Private Memory */\n  float v__82274_0;\n  \n  float v__82276_0;\n  \n  int v__82280_0;\n  \n  for (int v_wg_id_82255 = get_group_id(0); v_wg_id_82255 < v_MHeight_2; v_wg_id_82255 = (v_wg_id_82255 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6841; \n      v_work_idx_6841 = 0; \n      int v_l_id_82256 = atomic_inc(&(v_work_idx_6841)); \n      while((v_l_id_82256 < v_MWidthC_1)){\n        float v_tmp_82346 = 0.0f; \n        v__82270 = v_tmp_82346; \n        /* reduce_while_seq */\n        for (int v_i_82257 = 0; v_i_82257 < 8; v_i_82257 = (1 + v_i_82257)) {\n          v__82280_0 = check(v__82270, v__82262[(v_l_id_82256 + (8 * v_MWidthC_1 * v_wg_id_82255) + (v_MWidthC_1 * v_i_82257))]); \n          if (v__82280_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82347 = 0.0f; \n          v__82272 = v_tmp_82347; \n          int v_index_82348 = v__82262[(v_l_id_82256 + (8 * v_MWidthC_1 * v_wg_id_82255) + (v_MWidthC_1 * v_i_82257))]; \n          if (v_index_82348 < 0) {\n            v__82274_0 = v__82272; \n          } else {\n            if (v_index_82348 >= v_VLength_3) {\n              v__82274_0 = v__82272; \n            } else {\n              v__82274_0 = v__82264[v_index_82348]; \n            }\n          }\n          v__82276_0 = mult(v__82274_0, v__82263[(v_l_id_82256 + (8 * v_MWidthC_1 * v_wg_id_82255) + (v_MWidthC_1 * v_i_82257))]); \n          v__82270 = add(v__82276_0, v__82270); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82258 = 0; \n          v__82281[v_l_id_82256] = id(v__82270); \n        }\n        /* end map_seq */\n        v_l_id_82256 = atomic_inc(&(v_work_idx_6841)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_82259 = get_local_id(0); \n      float v_tmp_82351 = 0.0f; \n      v__80917 = v_tmp_82351; \n      /* reduce_seq */\n      for (int v_i_82260 = 0; v_i_82260 < v_MWidthC_1; v_i_82260 = (1 + v_i_82260)) {\n        v__80917 = add(v__80917, v__82281[(v_i_82260 + (v_MWidthC_1 * v_l_id_82259))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_82261 = 0; \n        v__82286[v_wg_id_82255] = doubleMultiplyAdd(v__80917, v__82266, v__82265[v_wg_id_82255], v__82267); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82262",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82263",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82264",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82265",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82266",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82267",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82286",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82281",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}