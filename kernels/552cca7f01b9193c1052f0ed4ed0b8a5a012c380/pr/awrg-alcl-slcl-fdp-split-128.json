{
  "name" : "awrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97157, const global float* restrict v__97158, const global float* restrict v__97159, const global float* restrict v__97160, float v__97161, float v__97162, global float* v__97180, global int* v__97164, local float* v__97175, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97166; \n  float v__97168; \n  float v__80917; \n  /* Private Memory */\n  float v__97170_0;\n  \n  float v__97172_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8242 = v__97164; \n    local int v_w_id_97150; \n    if (get_local_id(0) == 0) {\n      v_w_id_97150 = atomic_inc(v_work_idx_8242); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97150 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8240; \n        v_work_idx_8240 = 0; \n        int v_l_id_97151 = atomic_inc(&(v_work_idx_8240)); \n        while((v_l_id_97151 < v_MWidthC_1)){\n          float v_tmp_97235 = 0.0f; \n          v__97166 = v_tmp_97235; \n          /* reduce_seq */\n          for (int v_i_97152 = 0; v_i_97152 < 128; v_i_97152 = (1 + v_i_97152)) {\n            float v_tmp_97236 = 0.0f; \n            v__97168 = v_tmp_97236; \n            int v_index_97237 = v__97157[(v_l_id_97151 + (128 * v_MWidthC_1 * v_w_id_97150) + (v_MWidthC_1 * v_i_97152))]; \n            if (v_index_97237 < 0) {\n              v__97170_0 = v__97168; \n            } else {\n              if (v_index_97237 >= v_VLength_3) {\n                v__97170_0 = v__97168; \n              } else {\n                v__97170_0 = v__97159[v_index_97237]; \n              }\n            }\n            v__97172_0 = mult(v__97170_0, v__97158[(v_l_id_97151 + (128 * v_MWidthC_1 * v_w_id_97150) + (v_MWidthC_1 * v_i_97152))]); \n            v__97166 = add(v__97172_0, v__97166); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97153 = 0; \n            v__97175[v_l_id_97151] = id(v__97166); \n          }\n          /* end map_seq */\n          v_l_id_97151 = atomic_inc(&(v_work_idx_8240)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_97154 = get_local_id(0); \n        float v_tmp_97240 = 0.0f; \n        v__80917 = v_tmp_97240; \n        /* reduce_seq */\n        for (int v_i_97155 = 0; v_i_97155 < v_MWidthC_1; v_i_97155 = (1 + v_i_97155)) {\n          v__80917 = add(v__80917, v__97175[(v_i_97155 + (v_MWidthC_1 * v_l_id_97154))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97156 = 0; \n          v__97180[v_w_id_97150] = doubleMultiplyAdd(v__80917, v__97161, v__97160[v_w_id_97150], v__97162); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97150 = atomic_inc(v_work_idx_8242); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__97157",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97158",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97159",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97160",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97161",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97162",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97164",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97180",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97175",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}