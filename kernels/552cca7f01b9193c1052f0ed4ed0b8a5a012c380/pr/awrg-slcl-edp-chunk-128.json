{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96127, const global float* restrict v__96128, const global float* restrict v__96129, const global float* restrict v__96130, float v__96131, float v__96132, global float* v__96148, global int* v__96134, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96135; \n  float v__96138; \n  /* Private Memory */\n  float v__96140_0;\n  \n  float v__96142_0;\n  \n  int v__96146_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8140 = v__96134; \n    local int v_w_id_96123; \n    if (get_local_id(0) == 0) {\n      v_w_id_96123 = atomic_inc(v_work_idx_8140); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96123 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_96124 = get_local_id(0); v_l_id_96124 < 128; v_l_id_96124 = (v_l_id_96124 + get_local_size(0))) {\n        float v_tmp_96195 = 0.0f; \n        v__96135 = v_tmp_96195; \n        /* reduce_while_seq */\n        for (int v_i_96125 = 0; v_i_96125 < v_MWidthC_1; v_i_96125 = (1 + v_i_96125)) {\n          v__96146_0 = check(v__96135, v__96127[(v_i_96125 + (128 * v_MWidthC_1 * v_w_id_96123) + (v_MWidthC_1 * v_l_id_96124))]); \n          if (v__96146_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96196 = 0.0f; \n          v__96138 = v_tmp_96196; \n          int v_index_96197 = v__96127[(v_i_96125 + (128 * v_MWidthC_1 * v_w_id_96123) + (v_MWidthC_1 * v_l_id_96124))]; \n          if (v_index_96197 < 0) {\n            v__96140_0 = v__96138; \n          } else {\n            if (v_index_96197 >= v_VLength_3) {\n              v__96140_0 = v__96138; \n            } else {\n              v__96140_0 = v__96129[v_index_96197]; \n            }\n          }\n          v__96142_0 = mult(v__96140_0, v__96128[(v_i_96125 + (128 * v_MWidthC_1 * v_w_id_96123) + (v_MWidthC_1 * v_l_id_96124))]); \n          v__96135 = add(v__96142_0, v__96135); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96126 = 0; \n          v__96148[(v_l_id_96124 + (128 * v_w_id_96123))] = doubleMultiplyAdd(v__96135, v__96131, v__96130[(v_l_id_96124 + (128 * v_w_id_96123))], v__96132); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_96123 = atomic_inc(v_work_idx_8140); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96129",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96130",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96131",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96132",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96134",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96148",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}