{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96533, const global float* restrict v__96534, const global float* restrict v__96535, const global float* restrict v__96536, float v__96537, float v__96538, global float* v__96556, global float* v__96546, global int* v__96540, local float* v__96551, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96542; \n  float v__96547; \n  float v__80917; \n  /* Private Memory */\n  float v__96544_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8179 = v__96540; \n    local int v_w_id_96525; \n    if (get_local_id(0) == 0) {\n      v_w_id_96525 = atomic_inc(v_work_idx_8179); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96525 < v_MHeight_2)){\n      for (int v_l_id_96526 = get_local_id(0); v_l_id_96526 < v_MWidthC_1; v_l_id_96526 = (v_l_id_96526 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_96527 = 0; v_i_96527 < 128; v_i_96527 = (1 + v_i_96527)) {\n          float v_tmp_96615 = 0.0f; \n          v__96542 = v_tmp_96615; \n          int v_index_96616 = v__96533[(v_l_id_96526 + (128 * v_MWidthC_1 * v_w_id_96525) + (v_MWidthC_1 * v_i_96527))]; \n          if (v_index_96616 < 0) {\n            v__96544_0 = v__96542; \n          } else {\n            if (v_index_96616 >= v_VLength_3) {\n              v__96544_0 = v__96542; \n            } else {\n              v__96544_0 = v__96535[v_index_96616]; \n            }\n          }\n          v__96546[(127 + (128 * v_MWidthC_1 * v_w_id_96525) + (-1 * v_i_96527) + (128 * v_l_id_96526))] = mult(v__96544_0, v__96534[(v_l_id_96526 + (128 * v_MWidthC_1 * v_w_id_96525) + (v_MWidthC_1 * v_i_96527))]); \n        }\n        /* end map_seq */\n        float v_tmp_96617 = 0.0f; \n        v__96547 = v_tmp_96617; \n        /* reduce_seq */\n        for (int v_i_96528 = 0; v_i_96528 < 128; v_i_96528 = (1 + v_i_96528)) {\n          v__96547 = add(v__96547, v__96546[(v_i_96528 + (128 * v_MWidthC_1 * v_w_id_96525) + (128 * v_l_id_96526))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96529 = 0; \n          v__96551[v_l_id_96526] = id(v__96547); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8172; \n        v_work_idx_8172 = 0; \n        int v_l_id_96530 = atomic_inc(&(v_work_idx_8172)); \n        while((v_l_id_96530 < 1)){\n          float v_tmp_96620 = 0.0f; \n          v__80917 = v_tmp_96620; \n          /* reduce_seq */\n          for (int v_i_96531 = 0; v_i_96531 < v_MWidthC_1; v_i_96531 = (1 + v_i_96531)) {\n            v__80917 = add(v__80917, v__96551[(v_i_96531 + (v_MWidthC_1 * v_l_id_96530))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96532 = 0; \n            v__96556[v_w_id_96525] = doubleMultiplyAdd(v__80917, v__96537, v__96536[v_w_id_96525], v__96538); \n          }\n          /* end map_seq */\n          v_l_id_96530 = atomic_inc(&(v_work_idx_8172)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96525 = atomic_inc(v_work_idx_8179); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96533",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96534",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96535",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96536",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96537",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96538",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96546",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96540",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96556",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96551",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}