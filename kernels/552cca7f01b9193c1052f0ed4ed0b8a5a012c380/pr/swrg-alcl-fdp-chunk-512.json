{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101908, const global float* restrict v__101909, const global float* restrict v__101910, const global float* restrict v__101911, float v__101912, float v__101913, global float* v__101926, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101916; \n  float v__101918; \n  /* Private Memory */\n  float v__101920_0;\n  \n  float v__101922_0;\n  \n  for (int v_wg_id_101904 = get_group_id(0); v_wg_id_101904 < ((v_MHeight_2)/(512)); v_wg_id_101904 = (v_wg_id_101904 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8679; \n      v_work_idx_8679 = 0; \n      int v_l_id_101905 = atomic_inc(&(v_work_idx_8679)); \n      while((v_l_id_101905 < 512)){\n        float v_tmp_101964 = 0.0f; \n        v__101916 = v_tmp_101964; \n        /* reduce_seq */\n        for (int v_i_101906 = 0; v_i_101906 < v_MWidthC_1; v_i_101906 = (1 + v_i_101906)) {\n          float v_tmp_101965 = 0.0f; \n          v__101918 = v_tmp_101965; \n          int v_index_101966 = v__101908[(v_i_101906 + (512 * v_MWidthC_1 * v_wg_id_101904) + (v_MWidthC_1 * v_l_id_101905))]; \n          if (v_index_101966 < 0) {\n            v__101920_0 = v__101918; \n          } else {\n            if (v_index_101966 >= v_VLength_3) {\n              v__101920_0 = v__101918; \n            } else {\n              v__101920_0 = v__101910[v_index_101966]; \n            }\n          }\n          v__101922_0 = mult(v__101920_0, v__101909[(v_i_101906 + (512 * v_MWidthC_1 * v_wg_id_101904) + (v_MWidthC_1 * v_l_id_101905))]); \n          v__101916 = add(v__101922_0, v__101916); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101907 = 0; \n          v__101926[(v_l_id_101905 + (512 * v_wg_id_101904))] = doubleMultiplyAdd(v__101916, v__101912, v__101911[(v_l_id_101905 + (512 * v_wg_id_101904))], v__101913); \n        }\n        /* end map_seq */\n        v_l_id_101905 = atomic_inc(&(v_work_idx_8679)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101908",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101909",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101910",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101911",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101912",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101913",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101926",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}