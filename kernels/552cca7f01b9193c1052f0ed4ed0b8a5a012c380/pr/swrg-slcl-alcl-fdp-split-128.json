{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94966, const global float* restrict v__94967, const global float* restrict v__94968, const global float* restrict v__94969, float v__94970, float v__94971, global float* v__94988, local float* v__94983, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94974; \n  float v__94976; \n  float v__80917; \n  /* Private Memory */\n  float v__94978_0;\n  \n  float v__94980_0;\n  \n  for (int v_wg_id_94959 = get_group_id(0); v_wg_id_94959 < v_MHeight_2; v_wg_id_94959 = (v_wg_id_94959 + get_num_groups(0))) {\n    for (int v_l_id_94960 = get_local_id(0); v_l_id_94960 < v_MWidthC_1; v_l_id_94960 = (v_l_id_94960 + get_local_size(0))) {\n      float v_tmp_95049 = 0.0f; \n      v__94974 = v_tmp_95049; \n      /* reduce_seq */\n      for (int v_i_94961 = 0; v_i_94961 < 128; v_i_94961 = (1 + v_i_94961)) {\n        float v_tmp_95050 = 0.0f; \n        v__94976 = v_tmp_95050; \n        int v_index_95051 = v__94966[(v_l_id_94960 + (128 * v_MWidthC_1 * v_wg_id_94959) + (v_MWidthC_1 * v_i_94961))]; \n        if (v_index_95051 < 0) {\n          v__94978_0 = v__94976; \n        } else {\n          if (v_index_95051 >= v_VLength_3) {\n            v__94978_0 = v__94976; \n          } else {\n            v__94978_0 = v__94968[v_index_95051]; \n          }\n        }\n        v__94980_0 = mult(v__94978_0, v__94967[(v_l_id_94960 + (128 * v_MWidthC_1 * v_wg_id_94959) + (v_MWidthC_1 * v_i_94961))]); \n        v__94974 = add(v__94980_0, v__94974); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94962 = 0; \n        v__94983[v_l_id_94960] = id(v__94974); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8029; \n      v_work_idx_8029 = 0; \n      int v_l_id_94963 = atomic_inc(&(v_work_idx_8029)); \n      while((v_l_id_94963 < 1)){\n        float v_tmp_95054 = 0.0f; \n        v__80917 = v_tmp_95054; \n        /* reduce_seq */\n        for (int v_i_94964 = 0; v_i_94964 < v_MWidthC_1; v_i_94964 = (1 + v_i_94964)) {\n          v__80917 = add(v__80917, v__94983[(v_i_94964 + (v_MWidthC_1 * v_l_id_94963))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94965 = 0; \n          v__94988[v_wg_id_94959] = doubleMultiplyAdd(v__80917, v__94970, v__94969[v_wg_id_94959], v__94971); \n        }\n        /* end map_seq */\n        v_l_id_94963 = atomic_inc(&(v_work_idx_8029)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94966",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94967",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94968",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94970",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94971",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94983",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}