{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95694, const global float* restrict v__95695, const global float* restrict v__95696, const global float* restrict v__95697, float v__95698, float v__95699, global float* v__95716, global float* v__95706, local float* v__95711, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95702; \n  float v__95707; \n  float v__80917; \n  /* Private Memory */\n  float v__95704_0;\n  \n  for (int v_wg_id_95686 = get_group_id(0); v_wg_id_95686 < v_MHeight_2; v_wg_id_95686 = (v_wg_id_95686 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8100; \n      v_work_idx_8100 = 0; \n      int v_l_id_95687 = atomic_inc(&(v_work_idx_8100)); \n      while((v_l_id_95687 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_95688 = 0; v_i_95688 < 128; v_i_95688 = (1 + v_i_95688)) {\n          float v_tmp_95769 = 0.0f; \n          v__95702 = v_tmp_95769; \n          int v_index_95770 = v__95694[(v_l_id_95687 + (128 * v_MWidthC_1 * v_wg_id_95686) + (v_MWidthC_1 * v_i_95688))]; \n          if (v_index_95770 < 0) {\n            v__95704_0 = v__95702; \n          } else {\n            if (v_index_95770 >= v_VLength_3) {\n              v__95704_0 = v__95702; \n            } else {\n              v__95704_0 = v__95696[v_index_95770]; \n            }\n          }\n          v__95706[(127 + (128 * v_MWidthC_1 * v_wg_id_95686) + (-1 * v_i_95688) + (128 * v_l_id_95687))] = mult(v__95704_0, v__95695[(v_l_id_95687 + (128 * v_MWidthC_1 * v_wg_id_95686) + (v_MWidthC_1 * v_i_95688))]); \n        }\n        /* end map_seq */\n        float v_tmp_95771 = 0.0f; \n        v__95707 = v_tmp_95771; \n        /* reduce_seq */\n        for (int v_i_95689 = 0; v_i_95689 < 128; v_i_95689 = (1 + v_i_95689)) {\n          v__95707 = add(v__95707, v__95706[(v_i_95689 + (128 * v_MWidthC_1 * v_wg_id_95686) + (128 * v_l_id_95687))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95690 = 0; \n          v__95711[v_l_id_95687] = id(v__95707); \n        }\n        /* end map_seq */\n        v_l_id_95687 = atomic_inc(&(v_work_idx_8100)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8094; \n      v_work_idx_8094 = 0; \n      int v_l_id_95691 = atomic_inc(&(v_work_idx_8094)); \n      while((v_l_id_95691 < 1)){\n        float v_tmp_95774 = 0.0f; \n        v__80917 = v_tmp_95774; \n        /* reduce_seq */\n        for (int v_i_95692 = 0; v_i_95692 < v_MWidthC_1; v_i_95692 = (1 + v_i_95692)) {\n          v__80917 = add(v__80917, v__95711[(v_i_95692 + (v_MWidthC_1 * v_l_id_95691))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95693 = 0; \n          v__95716[v_wg_id_95686] = doubleMultiplyAdd(v__80917, v__95698, v__95697[v_wg_id_95686], v__95699); \n        }\n        /* end map_seq */\n        v_l_id_95691 = atomic_inc(&(v_work_idx_8094)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95694",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95695",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95696",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95697",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95698",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95699",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95706",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95716",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95711",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}