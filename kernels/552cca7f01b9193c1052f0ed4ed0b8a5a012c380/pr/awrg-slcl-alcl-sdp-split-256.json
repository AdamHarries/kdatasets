{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99865, const global float* restrict v__99866, const global float* restrict v__99867, const global float* restrict v__99868, float v__99869, float v__99870, global float* v__99888, global float* v__99878, global int* v__99872, local float* v__99883, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99874; \n  float v__99879; \n  float v__80917; \n  /* Private Memory */\n  float v__99876_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8491 = v__99872; \n    local int v_w_id_99857; \n    if (get_local_id(0) == 0) {\n      v_w_id_99857 = atomic_inc(v_work_idx_8491); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99857 < v_MHeight_2)){\n      for (int v_l_id_99858 = get_local_id(0); v_l_id_99858 < v_MWidthC_1; v_l_id_99858 = (v_l_id_99858 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99859 = 0; v_i_99859 < 256; v_i_99859 = (1 + v_i_99859)) {\n          float v_tmp_99947 = 0.0f; \n          v__99874 = v_tmp_99947; \n          int v_index_99948 = v__99865[(v_l_id_99858 + (256 * v_MWidthC_1 * v_w_id_99857) + (v_MWidthC_1 * v_i_99859))]; \n          if (v_index_99948 < 0) {\n            v__99876_0 = v__99874; \n          } else {\n            if (v_index_99948 >= v_VLength_3) {\n              v__99876_0 = v__99874; \n            } else {\n              v__99876_0 = v__99867[v_index_99948]; \n            }\n          }\n          v__99878[(255 + (256 * v_MWidthC_1 * v_w_id_99857) + (-1 * v_i_99859) + (256 * v_l_id_99858))] = mult(v__99876_0, v__99866[(v_l_id_99858 + (256 * v_MWidthC_1 * v_w_id_99857) + (v_MWidthC_1 * v_i_99859))]); \n        }\n        /* end map_seq */\n        float v_tmp_99949 = 0.0f; \n        v__99879 = v_tmp_99949; \n        /* reduce_seq */\n        for (int v_i_99860 = 0; v_i_99860 < 256; v_i_99860 = (1 + v_i_99860)) {\n          v__99879 = add(v__99879, v__99878[(v_i_99860 + (256 * v_MWidthC_1 * v_w_id_99857) + (256 * v_l_id_99858))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99861 = 0; \n          v__99883[v_l_id_99858] = id(v__99879); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8484; \n        v_work_idx_8484 = 0; \n        int v_l_id_99862 = atomic_inc(&(v_work_idx_8484)); \n        while((v_l_id_99862 < 1)){\n          float v_tmp_99952 = 0.0f; \n          v__80917 = v_tmp_99952; \n          /* reduce_seq */\n          for (int v_i_99863 = 0; v_i_99863 < v_MWidthC_1; v_i_99863 = (1 + v_i_99863)) {\n            v__80917 = add(v__80917, v__99883[(v_i_99863 + (v_MWidthC_1 * v_l_id_99862))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99864 = 0; \n            v__99888[v_w_id_99857] = doubleMultiplyAdd(v__80917, v__99869, v__99868[v_w_id_99857], v__99870); \n          }\n          /* end map_seq */\n          v_l_id_99862 = atomic_inc(&(v_work_idx_8484)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99857 = atomic_inc(v_work_idx_8491); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99865",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99866",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99867",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99868",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99869",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99870",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99878",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99872",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99883",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}