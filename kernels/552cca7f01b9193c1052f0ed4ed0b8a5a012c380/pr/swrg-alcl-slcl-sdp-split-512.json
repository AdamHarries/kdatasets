{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102058, const global float* restrict v__102059, const global float* restrict v__102060, const global float* restrict v__102061, float v__102062, float v__102063, global float* v__102080, global float* v__102070, local float* v__102075, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102066; \n  float v__102071; \n  float v__80917; \n  /* Private Memory */\n  float v__102068_0;\n  \n  for (int v_wg_id_102050 = get_group_id(0); v_wg_id_102050 < v_MHeight_2; v_wg_id_102050 = (v_wg_id_102050 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8695; \n      v_work_idx_8695 = 0; \n      int v_l_id_102051 = atomic_inc(&(v_work_idx_8695)); \n      while((v_l_id_102051 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102052 = 0; v_i_102052 < 512; v_i_102052 = (1 + v_i_102052)) {\n          float v_tmp_102137 = 0.0f; \n          v__102066 = v_tmp_102137; \n          int v_index_102138 = v__102058[(v_l_id_102051 + (512 * v_MWidthC_1 * v_wg_id_102050) + (v_MWidthC_1 * v_i_102052))]; \n          if (v_index_102138 < 0) {\n            v__102068_0 = v__102066; \n          } else {\n            if (v_index_102138 >= v_VLength_3) {\n              v__102068_0 = v__102066; \n            } else {\n              v__102068_0 = v__102060[v_index_102138]; \n            }\n          }\n          v__102070[(511 + (512 * v_MWidthC_1 * v_wg_id_102050) + (-1 * v_i_102052) + (512 * v_l_id_102051))] = mult(v__102068_0, v__102059[(v_l_id_102051 + (512 * v_MWidthC_1 * v_wg_id_102050) + (v_MWidthC_1 * v_i_102052))]); \n        }\n        /* end map_seq */\n        float v_tmp_102139 = 0.0f; \n        v__102071 = v_tmp_102139; \n        /* reduce_seq */\n        for (int v_i_102053 = 0; v_i_102053 < 512; v_i_102053 = (1 + v_i_102053)) {\n          v__102071 = add(v__102071, v__102070[(v_i_102053 + (512 * v_MWidthC_1 * v_wg_id_102050) + (512 * v_l_id_102051))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102054 = 0; \n          v__102075[v_l_id_102051] = id(v__102071); \n        }\n        /* end map_seq */\n        v_l_id_102051 = atomic_inc(&(v_work_idx_8695)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_102055 = get_local_id(0); \n      float v_tmp_102142 = 0.0f; \n      v__80917 = v_tmp_102142; \n      /* reduce_seq */\n      for (int v_i_102056 = 0; v_i_102056 < v_MWidthC_1; v_i_102056 = (1 + v_i_102056)) {\n        v__80917 = add(v__80917, v__102075[(v_i_102056 + (v_MWidthC_1 * v_l_id_102055))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_102057 = 0; \n        v__102080[v_wg_id_102050] = doubleMultiplyAdd(v__80917, v__102062, v__102061[v_wg_id_102050], v__102063); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102058",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102059",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102060",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102062",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102063",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102070",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102080",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102075",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}