{
  "name" : "awrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90175, const global float* restrict v__90176, const global float* restrict v__90177, const global float* restrict v__90178, float v__90179, float v__90180, global float* v__90194, global float* v__90188, global int* v__90182, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90184; \n  float v__90189; \n  /* Private Memory */\n  float v__90186_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7583 = v__90182; \n    local int v_w_id_90170; \n    if (get_local_id(0) == 0) {\n      v_w_id_90170 = atomic_inc(v_work_idx_7583); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90170 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7581; \n        v_work_idx_7581 = 0; \n        int v_l_id_90171 = atomic_inc(&(v_work_idx_7581)); \n        while((v_l_id_90171 < 32)){\n          /* map_seq */\n          for (int v_i_90172 = 0; v_i_90172 < v_MWidthC_1; v_i_90172 = (1 + v_i_90172)) {\n            float v_tmp_90233 = 0.0f; \n            v__90184 = v_tmp_90233; \n            int v_index_90234 = v__90175[(v_i_90172 + (32 * v_MWidthC_1 * v_w_id_90170) + (v_MWidthC_1 * v_l_id_90171))]; \n            if (v_index_90234 < 0) {\n              v__90186_0 = v__90184; \n            } else {\n              if (v_index_90234 >= v_VLength_3) {\n                v__90186_0 = v__90184; \n              } else {\n                v__90186_0 = v__90177[v_index_90234]; \n              }\n            }\n            v__90188[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_90170) + (-1 * v_i_90172) + (v_MWidthC_1 * v_l_id_90171))] = mult(v__90186_0, v__90176[(v_i_90172 + (32 * v_MWidthC_1 * v_w_id_90170) + (v_MWidthC_1 * v_l_id_90171))]); \n          }\n          /* end map_seq */\n          float v_tmp_90235 = 0.0f; \n          v__90189 = v_tmp_90235; \n          /* reduce_seq */\n          for (int v_i_90173 = 0; v_i_90173 < v_MWidthC_1; v_i_90173 = (1 + v_i_90173)) {\n            v__90189 = add(v__90189, v__90188[(v_i_90173 + (32 * v_MWidthC_1 * v_w_id_90170) + (v_MWidthC_1 * v_l_id_90171))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90174 = 0; \n            v__90194[(v_l_id_90171 + (32 * v_w_id_90170))] = doubleMultiplyAdd(v__90189, v__90179, v__90178[(v_l_id_90171 + (32 * v_w_id_90170))], v__90180); \n          }\n          /* end map_seq */\n          v_l_id_90171 = atomic_inc(&(v_work_idx_7581)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90170 = atomic_inc(v_work_idx_7583); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90175",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90176",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90177",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90179",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90180",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90182",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90194",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}