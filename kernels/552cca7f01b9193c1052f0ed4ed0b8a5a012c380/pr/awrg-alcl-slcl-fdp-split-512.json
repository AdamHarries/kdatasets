{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103821, const global float* restrict v__103822, const global float* restrict v__103823, const global float* restrict v__103824, float v__103825, float v__103826, global float* v__103844, global int* v__103828, local float* v__103839, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103830; \n  float v__103832; \n  float v__80917; \n  /* Private Memory */\n  float v__103834_0;\n  \n  float v__103836_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8866 = v__103828; \n    local int v_w_id_103814; \n    if (get_local_id(0) == 0) {\n      v_w_id_103814 = atomic_inc(v_work_idx_8866); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103814 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8864; \n        v_work_idx_8864 = 0; \n        int v_l_id_103815 = atomic_inc(&(v_work_idx_8864)); \n        while((v_l_id_103815 < v_MWidthC_1)){\n          float v_tmp_103899 = 0.0f; \n          v__103830 = v_tmp_103899; \n          /* reduce_seq */\n          for (int v_i_103816 = 0; v_i_103816 < 512; v_i_103816 = (1 + v_i_103816)) {\n            float v_tmp_103900 = 0.0f; \n            v__103832 = v_tmp_103900; \n            int v_index_103901 = v__103821[(v_l_id_103815 + (512 * v_MWidthC_1 * v_w_id_103814) + (v_MWidthC_1 * v_i_103816))]; \n            if (v_index_103901 < 0) {\n              v__103834_0 = v__103832; \n            } else {\n              if (v_index_103901 >= v_VLength_3) {\n                v__103834_0 = v__103832; \n              } else {\n                v__103834_0 = v__103823[v_index_103901]; \n              }\n            }\n            v__103836_0 = mult(v__103834_0, v__103822[(v_l_id_103815 + (512 * v_MWidthC_1 * v_w_id_103814) + (v_MWidthC_1 * v_i_103816))]); \n            v__103830 = add(v__103836_0, v__103830); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103817 = 0; \n            v__103839[v_l_id_103815] = id(v__103830); \n          }\n          /* end map_seq */\n          v_l_id_103815 = atomic_inc(&(v_work_idx_8864)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103818 = get_local_id(0); \n        float v_tmp_103904 = 0.0f; \n        v__80917 = v_tmp_103904; \n        /* reduce_seq */\n        for (int v_i_103819 = 0; v_i_103819 < v_MWidthC_1; v_i_103819 = (1 + v_i_103819)) {\n          v__80917 = add(v__80917, v__103839[(v_i_103819 + (v_MWidthC_1 * v_l_id_103818))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103820 = 0; \n          v__103844[v_w_id_103814] = doubleMultiplyAdd(v__80917, v__103825, v__103824[v_w_id_103814], v__103826); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103814 = atomic_inc(v_work_idx_8866); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__103821",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103822",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103823",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103825",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103826",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103828",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103844",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103839",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}