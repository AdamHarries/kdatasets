{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88509, const global float* restrict v__88510, const global float* restrict v__88511, const global float* restrict v__88512, float v__88513, float v__88514, global float* v__88527, global float* v__88521, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88517; \n  float v__88522; \n  /* Private Memory */\n  float v__88519_0;\n  \n  for (int v_wg_id_88504 = get_group_id(0); v_wg_id_88504 < ((v_MHeight_2)/(32)); v_wg_id_88504 = (v_wg_id_88504 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7425; \n      v_work_idx_7425 = 0; \n      int v_l_id_88505 = atomic_inc(&(v_work_idx_7425)); \n      while((v_l_id_88505 < 32)){\n        /* map_seq */\n        for (int v_i_88506 = 0; v_i_88506 < v_MWidthC_1; v_i_88506 = (1 + v_i_88506)) {\n          float v_tmp_88567 = 0.0f; \n          v__88517 = v_tmp_88567; \n          int v_index_88568 = v__88509[(v_i_88506 + (32 * v_MWidthC_1 * v_wg_id_88504) + (v_MWidthC_1 * v_l_id_88505))]; \n          if (v_index_88568 < 0) {\n            v__88519_0 = v__88517; \n          } else {\n            if (v_index_88568 >= v_VLength_3) {\n              v__88519_0 = v__88517; \n            } else {\n              v__88519_0 = v__88511[v_index_88568]; \n            }\n          }\n          v__88521[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_88504) + (-1 * v_i_88506) + (v_MWidthC_1 * v_l_id_88505))] = mult(v__88519_0, v__88510[(v_i_88506 + (32 * v_MWidthC_1 * v_wg_id_88504) + (v_MWidthC_1 * v_l_id_88505))]); \n        }\n        /* end map_seq */\n        float v_tmp_88569 = 0.0f; \n        v__88522 = v_tmp_88569; \n        /* reduce_seq */\n        for (int v_i_88507 = 0; v_i_88507 < v_MWidthC_1; v_i_88507 = (1 + v_i_88507)) {\n          v__88522 = add(v__88522, v__88521[(v_i_88507 + (32 * v_MWidthC_1 * v_wg_id_88504) + (v_MWidthC_1 * v_l_id_88505))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88508 = 0; \n          v__88527[(v_l_id_88505 + (32 * v_wg_id_88504))] = doubleMultiplyAdd(v__88522, v__88513, v__88512[(v_l_id_88505 + (32 * v_wg_id_88504))], v__88514); \n        }\n        /* end map_seq */\n        v_l_id_88505 = atomic_inc(&(v_work_idx_7425)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88509",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88510",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88511",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88512",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88513",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88514",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88527",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}