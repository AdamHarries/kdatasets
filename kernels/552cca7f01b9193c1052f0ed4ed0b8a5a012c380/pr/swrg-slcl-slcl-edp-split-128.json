{
  "name" : "swrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__94752, const global float* restrict v__94753, const global float* restrict v__94754, const global float* restrict v__94755, float v__94756, float v__94757, global float* v__94776, local float* v__94771, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94760; \n  float v__94762; \n  float v__80917; \n  /* Private Memory */\n  float v__94764_0;\n  \n  float v__94766_0;\n  \n  int v__94770_0;\n  \n  for (int v_wg_id_94745 = get_group_id(0); v_wg_id_94745 < v_MHeight_2; v_wg_id_94745 = (v_wg_id_94745 + get_num_groups(0))) {\n    for (int v_l_id_94746 = get_local_id(0); v_l_id_94746 < v_MWidthC_1; v_l_id_94746 = (v_l_id_94746 + get_local_size(0))) {\n      float v_tmp_94844 = 0.0f; \n      v__94760 = v_tmp_94844; \n      /* reduce_while_seq */\n      for (int v_i_94747 = 0; v_i_94747 < 128; v_i_94747 = (1 + v_i_94747)) {\n        v__94770_0 = check(v__94760, v__94752[(v_l_id_94746 + (128 * v_MWidthC_1 * v_wg_id_94745) + (v_MWidthC_1 * v_i_94747))]); \n        if (v__94770_0) {\n        } else {\n          break;\n        }\n        float v_tmp_94845 = 0.0f; \n        v__94762 = v_tmp_94845; \n        int v_index_94846 = v__94752[(v_l_id_94746 + (128 * v_MWidthC_1 * v_wg_id_94745) + (v_MWidthC_1 * v_i_94747))]; \n        if (v_index_94846 < 0) {\n          v__94764_0 = v__94762; \n        } else {\n          if (v_index_94846 >= v_VLength_3) {\n            v__94764_0 = v__94762; \n          } else {\n            v__94764_0 = v__94754[v_index_94846]; \n          }\n        }\n        v__94766_0 = mult(v__94764_0, v__94753[(v_l_id_94746 + (128 * v_MWidthC_1 * v_wg_id_94745) + (v_MWidthC_1 * v_i_94747))]); \n        v__94760 = add(v__94766_0, v__94760); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94748 = 0; \n        v__94771[v_l_id_94746] = id(v__94760); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_94749 = get_local_id(0); \n      float v_tmp_94849 = 0.0f; \n      v__80917 = v_tmp_94849; \n      /* reduce_seq */\n      for (int v_i_94750 = 0; v_i_94750 < v_MWidthC_1; v_i_94750 = (1 + v_i_94750)) {\n        v__80917 = add(v__80917, v__94771[(v_i_94750 + (v_MWidthC_1 * v_l_id_94749))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94751 = 0; \n        v__94776[v_wg_id_94745] = doubleMultiplyAdd(v__80917, v__94756, v__94755[v_wg_id_94745], v__94757); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94752",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94753",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94754",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94755",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94756",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94757",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94776",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94771",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}