{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95394, const global float* restrict v__95395, const global float* restrict v__95396, const global float* restrict v__95397, float v__95398, float v__95399, global float* v__95416, global float* v__95406, local float* v__95411, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95402; \n  float v__95407; \n  float v__80917; \n  /* Private Memory */\n  float v__95404_0;\n  \n  for (int v_wg_id_95386 = get_group_id(0); v_wg_id_95386 < v_MHeight_2; v_wg_id_95386 = (v_wg_id_95386 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8071; \n      v_work_idx_8071 = 0; \n      int v_l_id_95387 = atomic_inc(&(v_work_idx_8071)); \n      while((v_l_id_95387 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_95388 = 0; v_i_95388 < 128; v_i_95388 = (1 + v_i_95388)) {\n          float v_tmp_95473 = 0.0f; \n          v__95402 = v_tmp_95473; \n          int v_index_95474 = v__95394[(v_l_id_95387 + (128 * v_MWidthC_1 * v_wg_id_95386) + (v_MWidthC_1 * v_i_95388))]; \n          if (v_index_95474 < 0) {\n            v__95404_0 = v__95402; \n          } else {\n            if (v_index_95474 >= v_VLength_3) {\n              v__95404_0 = v__95402; \n            } else {\n              v__95404_0 = v__95396[v_index_95474]; \n            }\n          }\n          v__95406[(127 + (128 * v_MWidthC_1 * v_wg_id_95386) + (-1 * v_i_95388) + (128 * v_l_id_95387))] = mult(v__95404_0, v__95395[(v_l_id_95387 + (128 * v_MWidthC_1 * v_wg_id_95386) + (v_MWidthC_1 * v_i_95388))]); \n        }\n        /* end map_seq */\n        float v_tmp_95475 = 0.0f; \n        v__95407 = v_tmp_95475; \n        /* reduce_seq */\n        for (int v_i_95389 = 0; v_i_95389 < 128; v_i_95389 = (1 + v_i_95389)) {\n          v__95407 = add(v__95407, v__95406[(v_i_95389 + (128 * v_MWidthC_1 * v_wg_id_95386) + (128 * v_l_id_95387))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95390 = 0; \n          v__95411[v_l_id_95387] = id(v__95407); \n        }\n        /* end map_seq */\n        v_l_id_95387 = atomic_inc(&(v_work_idx_8071)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_95391 = get_local_id(0); \n      float v_tmp_95478 = 0.0f; \n      v__80917 = v_tmp_95478; \n      /* reduce_seq */\n      for (int v_i_95392 = 0; v_i_95392 < v_MWidthC_1; v_i_95392 = (1 + v_i_95392)) {\n        v__80917 = add(v__80917, v__95411[(v_i_95392 + (v_MWidthC_1 * v_l_id_95391))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_95393 = 0; \n        v__95416[v_wg_id_95386] = doubleMultiplyAdd(v__80917, v__95398, v__95397[v_wg_id_95386], v__95399); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95394",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95395",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95396",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95398",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95399",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95406",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95416",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95411",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}