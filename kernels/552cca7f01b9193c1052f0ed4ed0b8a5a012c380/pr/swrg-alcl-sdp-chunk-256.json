{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98505, const global float* restrict v__98506, const global float* restrict v__98507, const global float* restrict v__98508, float v__98509, float v__98510, global float* v__98523, global float* v__98517, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98513; \n  float v__98518; \n  /* Private Memory */\n  float v__98515_0;\n  \n  for (int v_wg_id_98500 = get_group_id(0); v_wg_id_98500 < ((v_MHeight_2)/(256)); v_wg_id_98500 = (v_wg_id_98500 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8361; \n      v_work_idx_8361 = 0; \n      int v_l_id_98501 = atomic_inc(&(v_work_idx_8361)); \n      while((v_l_id_98501 < 256)){\n        /* map_seq */\n        for (int v_i_98502 = 0; v_i_98502 < v_MWidthC_1; v_i_98502 = (1 + v_i_98502)) {\n          float v_tmp_98563 = 0.0f; \n          v__98513 = v_tmp_98563; \n          int v_index_98564 = v__98505[(v_i_98502 + (256 * v_MWidthC_1 * v_wg_id_98500) + (v_MWidthC_1 * v_l_id_98501))]; \n          if (v_index_98564 < 0) {\n            v__98515_0 = v__98513; \n          } else {\n            if (v_index_98564 >= v_VLength_3) {\n              v__98515_0 = v__98513; \n            } else {\n              v__98515_0 = v__98507[v_index_98564]; \n            }\n          }\n          v__98517[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_98500) + (-1 * v_i_98502) + (v_MWidthC_1 * v_l_id_98501))] = mult(v__98515_0, v__98506[(v_i_98502 + (256 * v_MWidthC_1 * v_wg_id_98500) + (v_MWidthC_1 * v_l_id_98501))]); \n        }\n        /* end map_seq */\n        float v_tmp_98565 = 0.0f; \n        v__98518 = v_tmp_98565; \n        /* reduce_seq */\n        for (int v_i_98503 = 0; v_i_98503 < v_MWidthC_1; v_i_98503 = (1 + v_i_98503)) {\n          v__98518 = add(v__98518, v__98517[(v_i_98503 + (256 * v_MWidthC_1 * v_wg_id_98500) + (v_MWidthC_1 * v_l_id_98501))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98504 = 0; \n          v__98523[(v_l_id_98501 + (256 * v_wg_id_98500))] = doubleMultiplyAdd(v__98518, v__98509, v__98508[(v_l_id_98501 + (256 * v_wg_id_98500))], v__98510); \n        }\n        /* end map_seq */\n        v_l_id_98501 = atomic_inc(&(v_work_idx_8361)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98505",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98506",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98507",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98508",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98509",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98510",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98523",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}