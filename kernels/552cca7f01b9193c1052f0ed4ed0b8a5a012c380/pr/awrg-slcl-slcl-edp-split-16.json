{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__86426, const global float* restrict v__86427, const global float* restrict v__86428, const global float* restrict v__86429, float v__86430, float v__86431, global float* v__86451, global int* v__86433, local float* v__86446, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86435; \n  float v__86437; \n  float v__80917; \n  /* Private Memory */\n  float v__86439_0;\n  \n  float v__86441_0;\n  \n  int v__86445_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7232 = v__86433; \n    local int v_w_id_86419; \n    if (get_local_id(0) == 0) {\n      v_w_id_86419 = atomic_inc(v_work_idx_7232); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86419 < v_MHeight_2)){\n      for (int v_l_id_86420 = get_local_id(0); v_l_id_86420 < v_MWidthC_1; v_l_id_86420 = (v_l_id_86420 + get_local_size(0))) {\n        float v_tmp_86517 = 0.0f; \n        v__86435 = v_tmp_86517; \n        /* reduce_while_seq */\n        for (int v_i_86421 = 0; v_i_86421 < 16; v_i_86421 = (1 + v_i_86421)) {\n          v__86445_0 = check(v__86435, v__86426[(v_l_id_86420 + (16 * v_MWidthC_1 * v_w_id_86419) + (v_MWidthC_1 * v_i_86421))]); \n          if (v__86445_0) {\n          } else {\n            break;\n          }\n          float v_tmp_86518 = 0.0f; \n          v__86437 = v_tmp_86518; \n          int v_index_86519 = v__86426[(v_l_id_86420 + (16 * v_MWidthC_1 * v_w_id_86419) + (v_MWidthC_1 * v_i_86421))]; \n          if (v_index_86519 < 0) {\n            v__86439_0 = v__86437; \n          } else {\n            if (v_index_86519 >= v_VLength_3) {\n              v__86439_0 = v__86437; \n            } else {\n              v__86439_0 = v__86428[v_index_86519]; \n            }\n          }\n          v__86441_0 = mult(v__86439_0, v__86427[(v_l_id_86420 + (16 * v_MWidthC_1 * v_w_id_86419) + (v_MWidthC_1 * v_i_86421))]); \n          v__86435 = add(v__86441_0, v__86435); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86422 = 0; \n          v__86446[v_l_id_86420] = id(v__86435); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86423 = get_local_id(0); \n        float v_tmp_86522 = 0.0f; \n        v__80917 = v_tmp_86522; \n        /* reduce_seq */\n        for (int v_i_86424 = 0; v_i_86424 < v_MWidthC_1; v_i_86424 = (1 + v_i_86424)) {\n          v__80917 = add(v__80917, v__86446[(v_i_86424 + (v_MWidthC_1 * v_l_id_86423))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86425 = 0; \n          v__86451[v_w_id_86419] = doubleMultiplyAdd(v__80917, v__86430, v__86429[v_w_id_86419], v__86431); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86419 = atomic_inc(v_work_idx_7232); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86426",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86427",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86428",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86429",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86430",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86431",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86433",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86451",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86446",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}