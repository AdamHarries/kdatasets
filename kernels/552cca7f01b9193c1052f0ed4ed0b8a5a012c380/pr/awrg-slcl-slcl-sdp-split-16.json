{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86216, const global float* restrict v__86217, const global float* restrict v__86218, const global float* restrict v__86219, float v__86220, float v__86221, global float* v__86239, global float* v__86229, global int* v__86223, local float* v__86234, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86225; \n  float v__86230; \n  float v__80917; \n  /* Private Memory */\n  float v__86227_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7214 = v__86223; \n    local int v_w_id_86208; \n    if (get_local_id(0) == 0) {\n      v_w_id_86208 = atomic_inc(v_work_idx_7214); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86208 < v_MHeight_2)){\n      for (int v_l_id_86209 = get_local_id(0); v_l_id_86209 < v_MWidthC_1; v_l_id_86209 = (v_l_id_86209 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_86210 = 0; v_i_86210 < 16; v_i_86210 = (1 + v_i_86210)) {\n          float v_tmp_86302 = 0.0f; \n          v__86225 = v_tmp_86302; \n          int v_index_86303 = v__86216[(v_l_id_86209 + (16 * v_MWidthC_1 * v_w_id_86208) + (v_MWidthC_1 * v_i_86210))]; \n          if (v_index_86303 < 0) {\n            v__86227_0 = v__86225; \n          } else {\n            if (v_index_86303 >= v_VLength_3) {\n              v__86227_0 = v__86225; \n            } else {\n              v__86227_0 = v__86218[v_index_86303]; \n            }\n          }\n          v__86229[(15 + (16 * v_MWidthC_1 * v_w_id_86208) + (-1 * v_i_86210) + (16 * v_l_id_86209))] = mult(v__86227_0, v__86217[(v_l_id_86209 + (16 * v_MWidthC_1 * v_w_id_86208) + (v_MWidthC_1 * v_i_86210))]); \n        }\n        /* end map_seq */\n        float v_tmp_86304 = 0.0f; \n        v__86230 = v_tmp_86304; \n        /* reduce_seq */\n        for (int v_i_86211 = 0; v_i_86211 < 16; v_i_86211 = (1 + v_i_86211)) {\n          v__86230 = add(v__86230, v__86229[(v_i_86211 + (16 * v_MWidthC_1 * v_w_id_86208) + (16 * v_l_id_86209))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86212 = 0; \n          v__86234[v_l_id_86209] = id(v__86230); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86213 = get_local_id(0); \n        float v_tmp_86307 = 0.0f; \n        v__80917 = v_tmp_86307; \n        /* reduce_seq */\n        for (int v_i_86214 = 0; v_i_86214 < v_MWidthC_1; v_i_86214 = (1 + v_i_86214)) {\n          v__80917 = add(v__80917, v__86234[(v_i_86214 + (v_MWidthC_1 * v_l_id_86213))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86215 = 0; \n          v__86239[v_w_id_86208] = doubleMultiplyAdd(v__80917, v__86220, v__86219[v_w_id_86208], v__86221); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86208 = atomic_inc(v_work_idx_7214); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86216",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86217",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86218",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86219",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86220",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86221",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86229",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86223",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86239",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86234",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}