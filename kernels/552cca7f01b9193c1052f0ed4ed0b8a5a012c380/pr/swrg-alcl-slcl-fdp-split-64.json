{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92160, const global float* restrict v__92161, const global float* restrict v__92162, const global float* restrict v__92163, float v__92164, float v__92165, global float* v__92182, local float* v__92177, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92168; \n  float v__92170; \n  float v__80917; \n  /* Private Memory */\n  float v__92172_0;\n  \n  float v__92174_0;\n  \n  for (int v_wg_id_92153 = get_group_id(0); v_wg_id_92153 < v_MHeight_2; v_wg_id_92153 = (v_wg_id_92153 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7768; \n      v_work_idx_7768 = 0; \n      int v_l_id_92154 = atomic_inc(&(v_work_idx_7768)); \n      while((v_l_id_92154 < v_MWidthC_1)){\n        float v_tmp_92239 = 0.0f; \n        v__92168 = v_tmp_92239; \n        /* reduce_seq */\n        for (int v_i_92155 = 0; v_i_92155 < 64; v_i_92155 = (1 + v_i_92155)) {\n          float v_tmp_92240 = 0.0f; \n          v__92170 = v_tmp_92240; \n          int v_index_92241 = v__92160[(v_l_id_92154 + (64 * v_MWidthC_1 * v_wg_id_92153) + (v_MWidthC_1 * v_i_92155))]; \n          if (v_index_92241 < 0) {\n            v__92172_0 = v__92170; \n          } else {\n            if (v_index_92241 >= v_VLength_3) {\n              v__92172_0 = v__92170; \n            } else {\n              v__92172_0 = v__92162[v_index_92241]; \n            }\n          }\n          v__92174_0 = mult(v__92172_0, v__92161[(v_l_id_92154 + (64 * v_MWidthC_1 * v_wg_id_92153) + (v_MWidthC_1 * v_i_92155))]); \n          v__92168 = add(v__92174_0, v__92168); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92156 = 0; \n          v__92177[v_l_id_92154] = id(v__92168); \n        }\n        /* end map_seq */\n        v_l_id_92154 = atomic_inc(&(v_work_idx_7768)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92157 = get_local_id(0); \n      float v_tmp_92244 = 0.0f; \n      v__80917 = v_tmp_92244; \n      /* reduce_seq */\n      for (int v_i_92158 = 0; v_i_92158 < v_MWidthC_1; v_i_92158 = (1 + v_i_92158)) {\n        v__80917 = add(v__80917, v__92177[(v_i_92158 + (v_MWidthC_1 * v_l_id_92157))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92159 = 0; \n        v__92182[v_wg_id_92153] = doubleMultiplyAdd(v__80917, v__92164, v__92163[v_wg_id_92153], v__92165); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92160",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92161",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92162",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92163",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92164",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92165",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92182",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92177",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}