{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95173, const global float* restrict v__95174, const global float* restrict v__95175, const global float* restrict v__95176, float v__95177, float v__95178, global float* v__95191, global float* v__95185, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95181; \n  float v__95186; \n  /* Private Memory */\n  float v__95183_0;\n  \n  for (int v_wg_id_95168 = get_group_id(0); v_wg_id_95168 < ((v_MHeight_2)/(128)); v_wg_id_95168 = (v_wg_id_95168 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8049; \n      v_work_idx_8049 = 0; \n      int v_l_id_95169 = atomic_inc(&(v_work_idx_8049)); \n      while((v_l_id_95169 < 128)){\n        /* map_seq */\n        for (int v_i_95170 = 0; v_i_95170 < v_MWidthC_1; v_i_95170 = (1 + v_i_95170)) {\n          float v_tmp_95231 = 0.0f; \n          v__95181 = v_tmp_95231; \n          int v_index_95232 = v__95173[(v_i_95170 + (128 * v_MWidthC_1 * v_wg_id_95168) + (v_MWidthC_1 * v_l_id_95169))]; \n          if (v_index_95232 < 0) {\n            v__95183_0 = v__95181; \n          } else {\n            if (v_index_95232 >= v_VLength_3) {\n              v__95183_0 = v__95181; \n            } else {\n              v__95183_0 = v__95175[v_index_95232]; \n            }\n          }\n          v__95185[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_95168) + (-1 * v_i_95170) + (v_MWidthC_1 * v_l_id_95169))] = mult(v__95183_0, v__95174[(v_i_95170 + (128 * v_MWidthC_1 * v_wg_id_95168) + (v_MWidthC_1 * v_l_id_95169))]); \n        }\n        /* end map_seq */\n        float v_tmp_95233 = 0.0f; \n        v__95186 = v_tmp_95233; \n        /* reduce_seq */\n        for (int v_i_95171 = 0; v_i_95171 < v_MWidthC_1; v_i_95171 = (1 + v_i_95171)) {\n          v__95186 = add(v__95186, v__95185[(v_i_95171 + (128 * v_MWidthC_1 * v_wg_id_95168) + (v_MWidthC_1 * v_l_id_95169))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95172 = 0; \n          v__95191[(v_l_id_95169 + (128 * v_wg_id_95168))] = doubleMultiplyAdd(v__95186, v__95177, v__95176[(v_l_id_95169 + (128 * v_wg_id_95168))], v__95178); \n        }\n        /* end map_seq */\n        v_l_id_95169 = atomic_inc(&(v_work_idx_8049)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95173",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95174",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95175",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95176",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95177",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95178",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95191",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}