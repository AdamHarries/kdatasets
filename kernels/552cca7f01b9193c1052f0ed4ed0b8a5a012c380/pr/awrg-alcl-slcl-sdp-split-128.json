{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97060, const global float* restrict v__97061, const global float* restrict v__97062, const global float* restrict v__97063, float v__97064, float v__97065, global float* v__97083, global float* v__97073, global int* v__97067, local float* v__97078, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97069; \n  float v__97074; \n  float v__80917; \n  /* Private Memory */\n  float v__97071_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8232 = v__97067; \n    local int v_w_id_97052; \n    if (get_local_id(0) == 0) {\n      v_w_id_97052 = atomic_inc(v_work_idx_8232); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97052 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8230; \n        v_work_idx_8230 = 0; \n        int v_l_id_97053 = atomic_inc(&(v_work_idx_8230)); \n        while((v_l_id_97053 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_97054 = 0; v_i_97054 < 128; v_i_97054 = (1 + v_i_97054)) {\n            float v_tmp_97138 = 0.0f; \n            v__97069 = v_tmp_97138; \n            int v_index_97139 = v__97060[(v_l_id_97053 + (128 * v_MWidthC_1 * v_w_id_97052) + (v_MWidthC_1 * v_i_97054))]; \n            if (v_index_97139 < 0) {\n              v__97071_0 = v__97069; \n            } else {\n              if (v_index_97139 >= v_VLength_3) {\n                v__97071_0 = v__97069; \n              } else {\n                v__97071_0 = v__97062[v_index_97139]; \n              }\n            }\n            v__97073[(127 + (128 * v_MWidthC_1 * v_w_id_97052) + (-1 * v_i_97054) + (128 * v_l_id_97053))] = mult(v__97071_0, v__97061[(v_l_id_97053 + (128 * v_MWidthC_1 * v_w_id_97052) + (v_MWidthC_1 * v_i_97054))]); \n          }\n          /* end map_seq */\n          float v_tmp_97140 = 0.0f; \n          v__97074 = v_tmp_97140; \n          /* reduce_seq */\n          for (int v_i_97055 = 0; v_i_97055 < 128; v_i_97055 = (1 + v_i_97055)) {\n            v__97074 = add(v__97074, v__97073[(v_i_97055 + (128 * v_MWidthC_1 * v_w_id_97052) + (128 * v_l_id_97053))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97056 = 0; \n            v__97078[v_l_id_97053] = id(v__97074); \n          }\n          /* end map_seq */\n          v_l_id_97053 = atomic_inc(&(v_work_idx_8230)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_97057 = get_local_id(0); \n        float v_tmp_97143 = 0.0f; \n        v__80917 = v_tmp_97143; \n        /* reduce_seq */\n        for (int v_i_97058 = 0; v_i_97058 < v_MWidthC_1; v_i_97058 = (1 + v_i_97058)) {\n          v__80917 = add(v__80917, v__97078[(v_i_97058 + (v_MWidthC_1 * v_l_id_97057))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97059 = 0; \n          v__97083[v_w_id_97052] = doubleMultiplyAdd(v__80917, v__97064, v__97063[v_w_id_97052], v__97065); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97052 = atomic_inc(v_work_idx_8232); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97060",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97061",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97062",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97064",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97065",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97073",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97067",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97078",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}