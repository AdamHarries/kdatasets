{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90879, const global float* restrict v__90880, const global float* restrict v__90881, const global float* restrict v__90882, float v__90883, float v__90884, global float* v__90904, global int* v__90886, local float* v__90899, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90888; \n  float v__90890; \n  float v__80917; \n  /* Private Memory */\n  float v__90892_0;\n  \n  float v__90894_0;\n  \n  int v__90898_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7662 = v__90886; \n    local int v_w_id_90872; \n    if (get_local_id(0) == 0) {\n      v_w_id_90872 = atomic_inc(v_work_idx_7662); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90872 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7660; \n        v_work_idx_7660 = 0; \n        int v_l_id_90873 = atomic_inc(&(v_work_idx_7660)); \n        while((v_l_id_90873 < v_MWidthC_1)){\n          float v_tmp_90958 = 0.0f; \n          v__90888 = v_tmp_90958; \n          /* reduce_while_seq */\n          for (int v_i_90874 = 0; v_i_90874 < 32; v_i_90874 = (1 + v_i_90874)) {\n            v__90898_0 = check(v__90888, v__90879[(v_l_id_90873 + (32 * v_MWidthC_1 * v_w_id_90872) + (v_MWidthC_1 * v_i_90874))]); \n            if (v__90898_0) {\n            } else {\n              break;\n            }\n            float v_tmp_90959 = 0.0f; \n            v__90890 = v_tmp_90959; \n            int v_index_90960 = v__90879[(v_l_id_90873 + (32 * v_MWidthC_1 * v_w_id_90872) + (v_MWidthC_1 * v_i_90874))]; \n            if (v_index_90960 < 0) {\n              v__90892_0 = v__90890; \n            } else {\n              if (v_index_90960 >= v_VLength_3) {\n                v__90892_0 = v__90890; \n              } else {\n                v__90892_0 = v__90881[v_index_90960]; \n              }\n            }\n            v__90894_0 = mult(v__90892_0, v__90880[(v_l_id_90873 + (32 * v_MWidthC_1 * v_w_id_90872) + (v_MWidthC_1 * v_i_90874))]); \n            v__90888 = add(v__90894_0, v__90888); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90875 = 0; \n            v__90899[v_l_id_90873] = id(v__90888); \n          }\n          /* end map_seq */\n          v_l_id_90873 = atomic_inc(&(v_work_idx_7660)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7655; \n        v_work_idx_7655 = 0; \n        int v_l_id_90876 = atomic_inc(&(v_work_idx_7655)); \n        while((v_l_id_90876 < 1)){\n          float v_tmp_90963 = 0.0f; \n          v__80917 = v_tmp_90963; \n          /* reduce_seq */\n          for (int v_i_90877 = 0; v_i_90877 < v_MWidthC_1; v_i_90877 = (1 + v_i_90877)) {\n            v__80917 = add(v__80917, v__90899[(v_i_90877 + (v_MWidthC_1 * v_l_id_90876))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90878 = 0; \n            v__90904[v_w_id_90872] = doubleMultiplyAdd(v__80917, v__90883, v__90882[v_w_id_90872], v__90884); \n          }\n          /* end map_seq */\n          v_l_id_90876 = atomic_inc(&(v_work_idx_7655)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90872 = atomic_inc(v_work_idx_7662); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90879",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90880",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90881",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90883",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90884",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90886",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90904",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90899",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}