{
  "name" : "swrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90975, const global float* restrict v__90976, const global float* restrict v__90977, const global float* restrict v__90978, float v__90979, float v__90980, global float* v__90993, global float* v__90987, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90983; \n  float v__90988; \n  /* Private Memory */\n  float v__90985_0;\n  \n  for (int v_wg_id_90970 = get_group_id(0); v_wg_id_90970 < ((v_MHeight_2)/(64)); v_wg_id_90970 = (v_wg_id_90970 + get_num_groups(0))) {\n    for (int v_l_id_90971 = get_local_id(0); v_l_id_90971 < 64; v_l_id_90971 = (v_l_id_90971 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_90972 = 0; v_i_90972 < v_MWidthC_1; v_i_90972 = (1 + v_i_90972)) {\n        float v_tmp_91037 = 0.0f; \n        v__90983 = v_tmp_91037; \n        int v_index_91038 = v__90975[(v_i_90972 + (64 * v_MWidthC_1 * v_wg_id_90970) + (v_MWidthC_1 * v_l_id_90971))]; \n        if (v_index_91038 < 0) {\n          v__90985_0 = v__90983; \n        } else {\n          if (v_index_91038 >= v_VLength_3) {\n            v__90985_0 = v__90983; \n          } else {\n            v__90985_0 = v__90977[v_index_91038]; \n          }\n        }\n        v__90987[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_90970) + (-1 * v_i_90972) + (v_MWidthC_1 * v_l_id_90971))] = mult(v__90985_0, v__90976[(v_i_90972 + (64 * v_MWidthC_1 * v_wg_id_90970) + (v_MWidthC_1 * v_l_id_90971))]); \n      }\n      /* end map_seq */\n      float v_tmp_91039 = 0.0f; \n      v__90988 = v_tmp_91039; \n      /* reduce_seq */\n      for (int v_i_90973 = 0; v_i_90973 < v_MWidthC_1; v_i_90973 = (1 + v_i_90973)) {\n        v__90988 = add(v__90988, v__90987[(v_i_90973 + (64 * v_MWidthC_1 * v_wg_id_90970) + (v_MWidthC_1 * v_l_id_90971))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_90974 = 0; \n        v__90993[(v_l_id_90971 + (64 * v_wg_id_90970))] = doubleMultiplyAdd(v__90988, v__90979, v__90978[(v_l_id_90971 + (64 * v_wg_id_90970))], v__90980); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90975",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90976",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90977",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90979",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90980",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__90993",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}