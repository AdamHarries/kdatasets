{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90071, const global float* restrict v__90072, const global float* restrict v__90073, const global float* restrict v__90074, float v__90075, float v__90076, global float* v__90096, global int* v__90078, local float* v__90091, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90080; \n  float v__90082; \n  float v__80917; \n  /* Private Memory */\n  float v__90084_0;\n  \n  float v__90086_0;\n  \n  int v__90090_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7575 = v__90078; \n    local int v_w_id_90064; \n    if (get_local_id(0) == 0) {\n      v_w_id_90064 = atomic_inc(v_work_idx_7575); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90064 < v_MHeight_2)){\n      for (int v_l_id_90065 = get_local_id(0); v_l_id_90065 < v_MWidthC_1; v_l_id_90065 = (v_l_id_90065 + get_local_size(0))) {\n        float v_tmp_90158 = 0.0f; \n        v__90080 = v_tmp_90158; \n        /* reduce_while_seq */\n        for (int v_i_90066 = 0; v_i_90066 < 32; v_i_90066 = (1 + v_i_90066)) {\n          v__90090_0 = check(v__90080, v__90071[(v_l_id_90065 + (32 * v_MWidthC_1 * v_w_id_90064) + (v_MWidthC_1 * v_i_90066))]); \n          if (v__90090_0) {\n          } else {\n            break;\n          }\n          float v_tmp_90159 = 0.0f; \n          v__90082 = v_tmp_90159; \n          int v_index_90160 = v__90071[(v_l_id_90065 + (32 * v_MWidthC_1 * v_w_id_90064) + (v_MWidthC_1 * v_i_90066))]; \n          if (v_index_90160 < 0) {\n            v__90084_0 = v__90082; \n          } else {\n            if (v_index_90160 >= v_VLength_3) {\n              v__90084_0 = v__90082; \n            } else {\n              v__90084_0 = v__90073[v_index_90160]; \n            }\n          }\n          v__90086_0 = mult(v__90084_0, v__90072[(v_l_id_90065 + (32 * v_MWidthC_1 * v_w_id_90064) + (v_MWidthC_1 * v_i_90066))]); \n          v__90080 = add(v__90086_0, v__90080); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90067 = 0; \n          v__90091[v_l_id_90065] = id(v__90080); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7569; \n        v_work_idx_7569 = 0; \n        int v_l_id_90068 = atomic_inc(&(v_work_idx_7569)); \n        while((v_l_id_90068 < 1)){\n          float v_tmp_90163 = 0.0f; \n          v__80917 = v_tmp_90163; \n          /* reduce_seq */\n          for (int v_i_90069 = 0; v_i_90069 < v_MWidthC_1; v_i_90069 = (1 + v_i_90069)) {\n            v__80917 = add(v__80917, v__90091[(v_i_90069 + (v_MWidthC_1 * v_l_id_90068))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90070 = 0; \n            v__90096[v_w_id_90064] = doubleMultiplyAdd(v__80917, v__90075, v__90074[v_w_id_90064], v__90076); \n          }\n          /* end map_seq */\n          v_l_id_90068 = atomic_inc(&(v_work_idx_7569)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90064 = atomic_inc(v_work_idx_7575); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90071",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90072",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90073",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90074",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90075",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90076",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90078",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90096",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90091",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}