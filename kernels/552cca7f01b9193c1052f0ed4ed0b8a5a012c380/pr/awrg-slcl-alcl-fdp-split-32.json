{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89970, const global float* restrict v__89971, const global float* restrict v__89972, const global float* restrict v__89973, float v__89974, float v__89975, global float* v__89993, global int* v__89977, local float* v__89988, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89979; \n  float v__89981; \n  float v__80917; \n  /* Private Memory */\n  float v__89983_0;\n  \n  float v__89985_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7565 = v__89977; \n    local int v_w_id_89963; \n    if (get_local_id(0) == 0) {\n      v_w_id_89963 = atomic_inc(v_work_idx_7565); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89963 < v_MHeight_2)){\n      for (int v_l_id_89964 = get_local_id(0); v_l_id_89964 < v_MWidthC_1; v_l_id_89964 = (v_l_id_89964 + get_local_size(0))) {\n        float v_tmp_90052 = 0.0f; \n        v__89979 = v_tmp_90052; \n        /* reduce_seq */\n        for (int v_i_89965 = 0; v_i_89965 < 32; v_i_89965 = (1 + v_i_89965)) {\n          float v_tmp_90053 = 0.0f; \n          v__89981 = v_tmp_90053; \n          int v_index_90054 = v__89970[(v_l_id_89964 + (32 * v_MWidthC_1 * v_w_id_89963) + (v_MWidthC_1 * v_i_89965))]; \n          if (v_index_90054 < 0) {\n            v__89983_0 = v__89981; \n          } else {\n            if (v_index_90054 >= v_VLength_3) {\n              v__89983_0 = v__89981; \n            } else {\n              v__89983_0 = v__89972[v_index_90054]; \n            }\n          }\n          v__89985_0 = mult(v__89983_0, v__89971[(v_l_id_89964 + (32 * v_MWidthC_1 * v_w_id_89963) + (v_MWidthC_1 * v_i_89965))]); \n          v__89979 = add(v__89985_0, v__89979); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89966 = 0; \n          v__89988[v_l_id_89964] = id(v__89979); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7559; \n        v_work_idx_7559 = 0; \n        int v_l_id_89967 = atomic_inc(&(v_work_idx_7559)); \n        while((v_l_id_89967 < 1)){\n          float v_tmp_90057 = 0.0f; \n          v__80917 = v_tmp_90057; \n          /* reduce_seq */\n          for (int v_i_89968 = 0; v_i_89968 < v_MWidthC_1; v_i_89968 = (1 + v_i_89968)) {\n            v__80917 = add(v__80917, v__89988[(v_i_89968 + (v_MWidthC_1 * v_l_id_89967))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89969 = 0; \n            v__89993[v_w_id_89963] = doubleMultiplyAdd(v__80917, v__89974, v__89973[v_w_id_89963], v__89975); \n          }\n          /* end map_seq */\n          v_l_id_89967 = atomic_inc(&(v_work_idx_7559)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89963 = atomic_inc(v_work_idx_7565); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89970",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89971",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89972",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89973",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89974",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89975",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89977",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89993",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89988",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}