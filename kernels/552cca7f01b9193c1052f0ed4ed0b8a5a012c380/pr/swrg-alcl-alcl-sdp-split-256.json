{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99026, const global float* restrict v__99027, const global float* restrict v__99028, const global float* restrict v__99029, float v__99030, float v__99031, global float* v__99048, global float* v__99038, local float* v__99043, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99034; \n  float v__99039; \n  float v__80917; \n  /* Private Memory */\n  float v__99036_0;\n  \n  for (int v_wg_id_99018 = get_group_id(0); v_wg_id_99018 < v_MHeight_2; v_wg_id_99018 = (v_wg_id_99018 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8412; \n      v_work_idx_8412 = 0; \n      int v_l_id_99019 = atomic_inc(&(v_work_idx_8412)); \n      while((v_l_id_99019 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_99020 = 0; v_i_99020 < 256; v_i_99020 = (1 + v_i_99020)) {\n          float v_tmp_99101 = 0.0f; \n          v__99034 = v_tmp_99101; \n          int v_index_99102 = v__99026[(v_l_id_99019 + (256 * v_MWidthC_1 * v_wg_id_99018) + (v_MWidthC_1 * v_i_99020))]; \n          if (v_index_99102 < 0) {\n            v__99036_0 = v__99034; \n          } else {\n            if (v_index_99102 >= v_VLength_3) {\n              v__99036_0 = v__99034; \n            } else {\n              v__99036_0 = v__99028[v_index_99102]; \n            }\n          }\n          v__99038[(255 + (256 * v_MWidthC_1 * v_wg_id_99018) + (-1 * v_i_99020) + (256 * v_l_id_99019))] = mult(v__99036_0, v__99027[(v_l_id_99019 + (256 * v_MWidthC_1 * v_wg_id_99018) + (v_MWidthC_1 * v_i_99020))]); \n        }\n        /* end map_seq */\n        float v_tmp_99103 = 0.0f; \n        v__99039 = v_tmp_99103; \n        /* reduce_seq */\n        for (int v_i_99021 = 0; v_i_99021 < 256; v_i_99021 = (1 + v_i_99021)) {\n          v__99039 = add(v__99039, v__99038[(v_i_99021 + (256 * v_MWidthC_1 * v_wg_id_99018) + (256 * v_l_id_99019))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99022 = 0; \n          v__99043[v_l_id_99019] = id(v__99039); \n        }\n        /* end map_seq */\n        v_l_id_99019 = atomic_inc(&(v_work_idx_8412)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8406; \n      v_work_idx_8406 = 0; \n      int v_l_id_99023 = atomic_inc(&(v_work_idx_8406)); \n      while((v_l_id_99023 < 1)){\n        float v_tmp_99106 = 0.0f; \n        v__80917 = v_tmp_99106; \n        /* reduce_seq */\n        for (int v_i_99024 = 0; v_i_99024 < v_MWidthC_1; v_i_99024 = (1 + v_i_99024)) {\n          v__80917 = add(v__80917, v__99043[(v_i_99024 + (v_MWidthC_1 * v_l_id_99023))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99025 = 0; \n          v__99048[v_wg_id_99018] = doubleMultiplyAdd(v__80917, v__99030, v__99029[v_wg_id_99018], v__99031); \n        }\n        /* end map_seq */\n        v_l_id_99023 = atomic_inc(&(v_work_idx_8406)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99026",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99027",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99028",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99030",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99031",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99038",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__99048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99043",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}