{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90693, const global float* restrict v__90694, const global float* restrict v__90695, const global float* restrict v__90696, float v__90697, float v__90698, global float* v__90716, global float* v__90706, global int* v__90700, local float* v__90711, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90702; \n  float v__90707; \n  float v__80917; \n  /* Private Memory */\n  float v__90704_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7640 = v__90700; \n    local int v_w_id_90685; \n    if (get_local_id(0) == 0) {\n      v_w_id_90685 = atomic_inc(v_work_idx_7640); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90685 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7638; \n        v_work_idx_7638 = 0; \n        int v_l_id_90686 = atomic_inc(&(v_work_idx_7638)); \n        while((v_l_id_90686 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_90687 = 0; v_i_90687 < 32; v_i_90687 = (1 + v_i_90687)) {\n            float v_tmp_90767 = 0.0f; \n            v__90702 = v_tmp_90767; \n            int v_index_90768 = v__90693[(v_l_id_90686 + (32 * v_MWidthC_1 * v_w_id_90685) + (v_MWidthC_1 * v_i_90687))]; \n            if (v_index_90768 < 0) {\n              v__90704_0 = v__90702; \n            } else {\n              if (v_index_90768 >= v_VLength_3) {\n                v__90704_0 = v__90702; \n              } else {\n                v__90704_0 = v__90695[v_index_90768]; \n              }\n            }\n            v__90706[(31 + (32 * v_MWidthC_1 * v_w_id_90685) + (-1 * v_i_90687) + (32 * v_l_id_90686))] = mult(v__90704_0, v__90694[(v_l_id_90686 + (32 * v_MWidthC_1 * v_w_id_90685) + (v_MWidthC_1 * v_i_90687))]); \n          }\n          /* end map_seq */\n          float v_tmp_90769 = 0.0f; \n          v__90707 = v_tmp_90769; \n          /* reduce_seq */\n          for (int v_i_90688 = 0; v_i_90688 < 32; v_i_90688 = (1 + v_i_90688)) {\n            v__90707 = add(v__90707, v__90706[(v_i_90688 + (32 * v_MWidthC_1 * v_w_id_90685) + (32 * v_l_id_90686))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90689 = 0; \n            v__90711[v_l_id_90686] = id(v__90707); \n          }\n          /* end map_seq */\n          v_l_id_90686 = atomic_inc(&(v_work_idx_7638)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7632; \n        v_work_idx_7632 = 0; \n        int v_l_id_90690 = atomic_inc(&(v_work_idx_7632)); \n        while((v_l_id_90690 < 1)){\n          float v_tmp_90772 = 0.0f; \n          v__80917 = v_tmp_90772; \n          /* reduce_seq */\n          for (int v_i_90691 = 0; v_i_90691 < v_MWidthC_1; v_i_90691 = (1 + v_i_90691)) {\n            v__80917 = add(v__80917, v__90711[(v_i_90691 + (v_MWidthC_1 * v_l_id_90690))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90692 = 0; \n            v__90716[v_w_id_90685] = doubleMultiplyAdd(v__80917, v__90697, v__90696[v_w_id_90685], v__90698); \n          }\n          /* end map_seq */\n          v_l_id_90690 = atomic_inc(&(v_work_idx_7632)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90685 = atomic_inc(v_work_idx_7640); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90693",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90694",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90695",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90697",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90698",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90706",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90700",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90716",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90711",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}