{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92880, const global float* restrict v__92881, const global float* restrict v__92882, const global float* restrict v__92883, float v__92884, float v__92885, global float* v__92903, global float* v__92893, global int* v__92887, local float* v__92898, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92889; \n  float v__92894; \n  float v__80917; \n  /* Private Memory */\n  float v__92891_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7838 = v__92887; \n    local int v_w_id_92872; \n    if (get_local_id(0) == 0) {\n      v_w_id_92872 = atomic_inc(v_work_idx_7838); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92872 < v_MHeight_2)){\n      for (int v_l_id_92873 = get_local_id(0); v_l_id_92873 < v_MWidthC_1; v_l_id_92873 = (v_l_id_92873 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_92874 = 0; v_i_92874 < 64; v_i_92874 = (1 + v_i_92874)) {\n          float v_tmp_92966 = 0.0f; \n          v__92889 = v_tmp_92966; \n          int v_index_92967 = v__92880[(v_l_id_92873 + (64 * v_MWidthC_1 * v_w_id_92872) + (v_MWidthC_1 * v_i_92874))]; \n          if (v_index_92967 < 0) {\n            v__92891_0 = v__92889; \n          } else {\n            if (v_index_92967 >= v_VLength_3) {\n              v__92891_0 = v__92889; \n            } else {\n              v__92891_0 = v__92882[v_index_92967]; \n            }\n          }\n          v__92893[(63 + (64 * v_MWidthC_1 * v_w_id_92872) + (-1 * v_i_92874) + (64 * v_l_id_92873))] = mult(v__92891_0, v__92881[(v_l_id_92873 + (64 * v_MWidthC_1 * v_w_id_92872) + (v_MWidthC_1 * v_i_92874))]); \n        }\n        /* end map_seq */\n        float v_tmp_92968 = 0.0f; \n        v__92894 = v_tmp_92968; \n        /* reduce_seq */\n        for (int v_i_92875 = 0; v_i_92875 < 64; v_i_92875 = (1 + v_i_92875)) {\n          v__92894 = add(v__92894, v__92893[(v_i_92875 + (64 * v_MWidthC_1 * v_w_id_92872) + (64 * v_l_id_92873))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92876 = 0; \n          v__92898[v_l_id_92873] = id(v__92894); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_92877 = get_local_id(0); \n        float v_tmp_92971 = 0.0f; \n        v__80917 = v_tmp_92971; \n        /* reduce_seq */\n        for (int v_i_92878 = 0; v_i_92878 < v_MWidthC_1; v_i_92878 = (1 + v_i_92878)) {\n          v__80917 = add(v__80917, v__92898[(v_i_92878 + (v_MWidthC_1 * v_l_id_92877))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92879 = 0; \n          v__92903[v_w_id_92872] = doubleMultiplyAdd(v__80917, v__92884, v__92883[v_w_id_92872], v__92885); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_92872 = atomic_inc(v_work_idx_7838); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92880",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92881",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92882",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92884",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92885",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92893",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92887",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__92903",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92898",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}