{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__58708, const global float* restrict v__58709, const global float* restrict v__58710, const global float* restrict v__58711, float v__58712, float v__58713, global float* v__58732, local float* v__58727, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58716; \n  float v__58718; \n  float v__57071; \n  /* Private Memory */\n  float v__58720_0;\n  \n  float v__58722_0;\n  \n  int v__58726_0;\n  \n  for (int v_wg_id_58701 = get_group_id(0); v_wg_id_58701 < v_MHeight_2; v_wg_id_58701 = (v_wg_id_58701 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4645; \n      v_work_idx_4645 = 0; \n      int v_l_id_58702 = atomic_inc(&(v_work_idx_4645)); \n      while((v_l_id_58702 < v_MWidthC_1)){\n        float v_tmp_58788 = 3.4028235E38f; \n        v__58716 = v_tmp_58788; \n        /* reduce_while_seq */\n        for (int v_i_58703 = 0; v_i_58703 < 8; v_i_58703 = (1 + v_i_58703)) {\n          v__58726_0 = check(v__58716, v__58708[(v_l_id_58702 + (8 * v_MWidthC_1 * v_wg_id_58701) + (v_MWidthC_1 * v_i_58703))]); \n          if (v__58726_0) {\n          } else {\n            break;\n          }\n          float v_tmp_58789 = 3.4028235E38f; \n          v__58718 = v_tmp_58789; \n          int v_index_58790 = v__58708[(v_l_id_58702 + (8 * v_MWidthC_1 * v_wg_id_58701) + (v_MWidthC_1 * v_i_58703))]; \n          if (v_index_58790 < 0) {\n            v__58720_0 = v__58718; \n          } else {\n            if (v_index_58790 >= v_VLength_3) {\n              v__58720_0 = v__58718; \n            } else {\n              v__58720_0 = v__58710[v_index_58790]; \n            }\n          }\n          v__58722_0 = absadd(v__58720_0, v__58709[(v_l_id_58702 + (8 * v_MWidthC_1 * v_wg_id_58701) + (v_MWidthC_1 * v_i_58703))]); \n          v__58716 = clmin(v__58722_0, v__58716); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58704 = 0; \n          v__58727[v_l_id_58702] = id(v__58716); \n        }\n        /* end map_seq */\n        v_l_id_58702 = atomic_inc(&(v_work_idx_4645)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4640; \n      v_work_idx_4640 = 0; \n      int v_l_id_58705 = atomic_inc(&(v_work_idx_4640)); \n      while((v_l_id_58705 < 1)){\n        float v_tmp_58793 = 3.4028235E38f; \n        v__57071 = v_tmp_58793; \n        /* reduce_seq */\n        for (int v_i_58706 = 0; v_i_58706 < v_MWidthC_1; v_i_58706 = (1 + v_i_58706)) {\n          v__57071 = clmin(v__57071, v__58727[(v_i_58706 + (v_MWidthC_1 * v_l_id_58705))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58707 = 0; \n          v__58732[v_wg_id_58701] = doubleMultiplyAdd(v__57071, v__58712, v__58711[v_wg_id_58701], v__58713); \n        }\n        /* end map_seq */\n        v_l_id_58705 = atomic_inc(&(v_work_idx_4640)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__58708",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58709",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58710",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58712",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58713",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58732",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58727",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}