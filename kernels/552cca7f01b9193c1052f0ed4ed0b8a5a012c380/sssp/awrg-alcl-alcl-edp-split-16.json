{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__63701, const global float* restrict v__63702, const global float* restrict v__63703, const global float* restrict v__63704, float v__63705, float v__63706, global float* v__63726, global int* v__63708, local float* v__63721, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63710; \n  float v__63712; \n  float v__57071; \n  /* Private Memory */\n  float v__63714_0;\n  \n  float v__63716_0;\n  \n  int v__63720_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5123 = v__63708; \n    local int v_w_id_63694; \n    if (get_local_id(0) == 0) {\n      v_w_id_63694 = atomic_inc(v_work_idx_5123); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63694 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5121; \n        v_work_idx_5121 = 0; \n        int v_l_id_63695 = atomic_inc(&(v_work_idx_5121)); \n        while((v_l_id_63695 < v_MWidthC_1)){\n          float v_tmp_63780 = 3.4028235E38f; \n          v__63710 = v_tmp_63780; \n          /* reduce_while_seq */\n          for (int v_i_63696 = 0; v_i_63696 < 16; v_i_63696 = (1 + v_i_63696)) {\n            v__63720_0 = check(v__63710, v__63701[(v_l_id_63695 + (16 * v_MWidthC_1 * v_w_id_63694) + (v_MWidthC_1 * v_i_63696))]); \n            if (v__63720_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63781 = 3.4028235E38f; \n            v__63712 = v_tmp_63781; \n            int v_index_63782 = v__63701[(v_l_id_63695 + (16 * v_MWidthC_1 * v_w_id_63694) + (v_MWidthC_1 * v_i_63696))]; \n            if (v_index_63782 < 0) {\n              v__63714_0 = v__63712; \n            } else {\n              if (v_index_63782 >= v_VLength_3) {\n                v__63714_0 = v__63712; \n              } else {\n                v__63714_0 = v__63703[v_index_63782]; \n              }\n            }\n            v__63716_0 = absadd(v__63714_0, v__63702[(v_l_id_63695 + (16 * v_MWidthC_1 * v_w_id_63694) + (v_MWidthC_1 * v_i_63696))]); \n            v__63710 = clmin(v__63716_0, v__63710); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63697 = 0; \n            v__63721[v_l_id_63695] = id(v__63710); \n          }\n          /* end map_seq */\n          v_l_id_63695 = atomic_inc(&(v_work_idx_5121)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5116; \n        v_work_idx_5116 = 0; \n        int v_l_id_63698 = atomic_inc(&(v_work_idx_5116)); \n        while((v_l_id_63698 < 1)){\n          float v_tmp_63785 = 3.4028235E38f; \n          v__57071 = v_tmp_63785; \n          /* reduce_seq */\n          for (int v_i_63699 = 0; v_i_63699 < v_MWidthC_1; v_i_63699 = (1 + v_i_63699)) {\n            v__57071 = clmin(v__57071, v__63721[(v_i_63699 + (v_MWidthC_1 * v_l_id_63698))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63700 = 0; \n            v__63726[v_w_id_63694] = doubleMultiplyAdd(v__57071, v__63705, v__63704[v_w_id_63694], v__63706); \n          }\n          /* end map_seq */\n          v_l_id_63698 = atomic_inc(&(v_work_idx_5116)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63694 = atomic_inc(v_work_idx_5123); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63701",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63702",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63703",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63704",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63705",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63706",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63708",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63721",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}