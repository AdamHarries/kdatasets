{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64884, const global float* restrict v__64885, const global float* restrict v__64886, const global float* restrict v__64887, float v__64888, float v__64889, global float* v__64906, global float* v__64896, local float* v__64901, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64892; \n  float v__64897; \n  float v__57071; \n  /* Private Memory */\n  float v__64894_0;\n  \n  for (int v_wg_id_64876 = get_group_id(0); v_wg_id_64876 < v_MHeight_2; v_wg_id_64876 = (v_wg_id_64876 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5220; \n      v_work_idx_5220 = 0; \n      int v_l_id_64877 = atomic_inc(&(v_work_idx_5220)); \n      while((v_l_id_64877 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_64878 = 0; v_i_64878 < 32; v_i_64878 = (1 + v_i_64878)) {\n          float v_tmp_64963 = 3.4028235E38f; \n          v__64892 = v_tmp_64963; \n          int v_index_64964 = v__64884[(v_l_id_64877 + (32 * v_MWidthC_1 * v_wg_id_64876) + (v_MWidthC_1 * v_i_64878))]; \n          if (v_index_64964 < 0) {\n            v__64894_0 = v__64892; \n          } else {\n            if (v_index_64964 >= v_VLength_3) {\n              v__64894_0 = v__64892; \n            } else {\n              v__64894_0 = v__64886[v_index_64964]; \n            }\n          }\n          v__64896[(31 + (32 * v_MWidthC_1 * v_wg_id_64876) + (-1 * v_i_64878) + (32 * v_l_id_64877))] = absadd(v__64894_0, v__64885[(v_l_id_64877 + (32 * v_MWidthC_1 * v_wg_id_64876) + (v_MWidthC_1 * v_i_64878))]); \n        }\n        /* end map_seq */\n        float v_tmp_64965 = 3.4028235E38f; \n        v__64897 = v_tmp_64965; \n        /* reduce_seq */\n        for (int v_i_64879 = 0; v_i_64879 < 32; v_i_64879 = (1 + v_i_64879)) {\n          v__64897 = clmin(v__64897, v__64896[(v_i_64879 + (32 * v_MWidthC_1 * v_wg_id_64876) + (32 * v_l_id_64877))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64880 = 0; \n          v__64901[v_l_id_64877] = id(v__64897); \n        }\n        /* end map_seq */\n        v_l_id_64877 = atomic_inc(&(v_work_idx_5220)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_64881 = get_local_id(0); \n      float v_tmp_64968 = 3.4028235E38f; \n      v__57071 = v_tmp_64968; \n      /* reduce_seq */\n      for (int v_i_64882 = 0; v_i_64882 < v_MWidthC_1; v_i_64882 = (1 + v_i_64882)) {\n        v__57071 = clmin(v__57071, v__64901[(v_i_64882 + (v_MWidthC_1 * v_l_id_64881))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64883 = 0; \n        v__64906[v_wg_id_64876] = doubleMultiplyAdd(v__57071, v__64888, v__64887[v_wg_id_64876], v__64889); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64884",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64885",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64886",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64887",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64888",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64889",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64896",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__64906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64901",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}