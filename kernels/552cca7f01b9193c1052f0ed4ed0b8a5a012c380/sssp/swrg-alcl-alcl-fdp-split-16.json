{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61946, const global float* restrict v__61947, const global float* restrict v__61948, const global float* restrict v__61949, float v__61950, float v__61951, global float* v__61968, local float* v__61963, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61954; \n  float v__61956; \n  float v__57071; \n  /* Private Memory */\n  float v__61958_0;\n  \n  float v__61960_0;\n  \n  for (int v_wg_id_61939 = get_group_id(0); v_wg_id_61939 < v_MHeight_2; v_wg_id_61939 = (v_wg_id_61939 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4947; \n      v_work_idx_4947 = 0; \n      int v_l_id_61940 = atomic_inc(&(v_work_idx_4947)); \n      while((v_l_id_61940 < v_MWidthC_1)){\n        float v_tmp_62021 = 3.4028235E38f; \n        v__61954 = v_tmp_62021; \n        /* reduce_seq */\n        for (int v_i_61941 = 0; v_i_61941 < 16; v_i_61941 = (1 + v_i_61941)) {\n          float v_tmp_62022 = 3.4028235E38f; \n          v__61956 = v_tmp_62022; \n          int v_index_62023 = v__61946[(v_l_id_61940 + (16 * v_MWidthC_1 * v_wg_id_61939) + (v_MWidthC_1 * v_i_61941))]; \n          if (v_index_62023 < 0) {\n            v__61958_0 = v__61956; \n          } else {\n            if (v_index_62023 >= v_VLength_3) {\n              v__61958_0 = v__61956; \n            } else {\n              v__61958_0 = v__61948[v_index_62023]; \n            }\n          }\n          v__61960_0 = absadd(v__61958_0, v__61947[(v_l_id_61940 + (16 * v_MWidthC_1 * v_wg_id_61939) + (v_MWidthC_1 * v_i_61941))]); \n          v__61954 = clmin(v__61960_0, v__61954); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61942 = 0; \n          v__61963[v_l_id_61940] = id(v__61954); \n        }\n        /* end map_seq */\n        v_l_id_61940 = atomic_inc(&(v_work_idx_4947)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4942; \n      v_work_idx_4942 = 0; \n      int v_l_id_61943 = atomic_inc(&(v_work_idx_4942)); \n      while((v_l_id_61943 < 1)){\n        float v_tmp_62026 = 3.4028235E38f; \n        v__57071 = v_tmp_62026; \n        /* reduce_seq */\n        for (int v_i_61944 = 0; v_i_61944 < v_MWidthC_1; v_i_61944 = (1 + v_i_61944)) {\n          v__57071 = clmin(v__57071, v__61963[(v_i_61944 + (v_MWidthC_1 * v_l_id_61943))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61945 = 0; \n          v__61968[v_wg_id_61939] = doubleMultiplyAdd(v__57071, v__61950, v__61949[v_wg_id_61939], v__61951); \n        }\n        /* end map_seq */\n        v_l_id_61943 = atomic_inc(&(v_work_idx_4942)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__61946",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61947",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61948",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61950",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61951",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61963",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}