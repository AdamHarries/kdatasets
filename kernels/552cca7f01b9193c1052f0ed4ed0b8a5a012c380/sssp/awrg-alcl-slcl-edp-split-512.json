{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__80072, const global float* restrict v__80073, const global float* restrict v__80074, const global float* restrict v__80075, float v__80076, float v__80077, global float* v__80097, global int* v__80079, local float* v__80092, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80081; \n  float v__80083; \n  float v__57071; \n  /* Private Memory */\n  float v__80085_0;\n  \n  float v__80087_0;\n  \n  int v__80091_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6649 = v__80079; \n    local int v_w_id_80065; \n    if (get_local_id(0) == 0) {\n      v_w_id_80065 = atomic_inc(v_work_idx_6649); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80065 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6647; \n        v_work_idx_6647 = 0; \n        int v_l_id_80066 = atomic_inc(&(v_work_idx_6647)); \n        while((v_l_id_80066 < v_MWidthC_1)){\n          float v_tmp_80155 = 3.4028235E38f; \n          v__80081 = v_tmp_80155; \n          /* reduce_while_seq */\n          for (int v_i_80067 = 0; v_i_80067 < 512; v_i_80067 = (1 + v_i_80067)) {\n            v__80091_0 = check(v__80081, v__80072[(v_l_id_80066 + (512 * v_MWidthC_1 * v_w_id_80065) + (v_MWidthC_1 * v_i_80067))]); \n            if (v__80091_0) {\n            } else {\n              break;\n            }\n            float v_tmp_80156 = 3.4028235E38f; \n            v__80083 = v_tmp_80156; \n            int v_index_80157 = v__80072[(v_l_id_80066 + (512 * v_MWidthC_1 * v_w_id_80065) + (v_MWidthC_1 * v_i_80067))]; \n            if (v_index_80157 < 0) {\n              v__80085_0 = v__80083; \n            } else {\n              if (v_index_80157 >= v_VLength_3) {\n                v__80085_0 = v__80083; \n              } else {\n                v__80085_0 = v__80074[v_index_80157]; \n              }\n            }\n            v__80087_0 = absadd(v__80085_0, v__80073[(v_l_id_80066 + (512 * v_MWidthC_1 * v_w_id_80065) + (v_MWidthC_1 * v_i_80067))]); \n            v__80081 = clmin(v__80087_0, v__80081); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80068 = 0; \n            v__80092[v_l_id_80066] = id(v__80081); \n          }\n          /* end map_seq */\n          v_l_id_80066 = atomic_inc(&(v_work_idx_6647)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_80069 = get_local_id(0); \n        float v_tmp_80160 = 3.4028235E38f; \n        v__57071 = v_tmp_80160; \n        /* reduce_seq */\n        for (int v_i_80070 = 0; v_i_80070 < v_MWidthC_1; v_i_80070 = (1 + v_i_80070)) {\n          v__57071 = clmin(v__57071, v__80092[(v_i_80070 + (v_MWidthC_1 * v_l_id_80069))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_80071 = 0; \n          v__80097[v_w_id_80065] = doubleMultiplyAdd(v__57071, v__80076, v__80075[v_w_id_80065], v__80077); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80065 = atomic_inc(v_work_idx_6649); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80072",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80073",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80074",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80075",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80076",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80077",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80079",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80097",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80092",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}