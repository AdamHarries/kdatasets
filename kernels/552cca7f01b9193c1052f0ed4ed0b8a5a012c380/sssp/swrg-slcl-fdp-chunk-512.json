{
  "name" : "swrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77200, const global float* restrict v__77201, const global float* restrict v__77202, const global float* restrict v__77203, float v__77204, float v__77205, global float* v__77218, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77208; \n  float v__77210; \n  /* Private Memory */\n  float v__77212_0;\n  \n  float v__77214_0;\n  \n  for (int v_wg_id_77196 = get_group_id(0); v_wg_id_77196 < ((v_MHeight_2)/(512)); v_wg_id_77196 = (v_wg_id_77196 + get_num_groups(0))) {\n    for (int v_l_id_77197 = get_local_id(0); v_l_id_77197 < 512; v_l_id_77197 = (v_l_id_77197 + get_local_size(0))) {\n      float v_tmp_77260 = 3.4028235E38f; \n      v__77208 = v_tmp_77260; \n      /* reduce_seq */\n      for (int v_i_77198 = 0; v_i_77198 < v_MWidthC_1; v_i_77198 = (1 + v_i_77198)) {\n        float v_tmp_77261 = 3.4028235E38f; \n        v__77210 = v_tmp_77261; \n        int v_index_77262 = v__77200[(v_i_77198 + (512 * v_MWidthC_1 * v_wg_id_77196) + (v_MWidthC_1 * v_l_id_77197))]; \n        if (v_index_77262 < 0) {\n          v__77212_0 = v__77210; \n        } else {\n          if (v_index_77262 >= v_VLength_3) {\n            v__77212_0 = v__77210; \n          } else {\n            v__77212_0 = v__77202[v_index_77262]; \n          }\n        }\n        v__77214_0 = absadd(v__77212_0, v__77201[(v_i_77198 + (512 * v_MWidthC_1 * v_wg_id_77196) + (v_MWidthC_1 * v_l_id_77197))]); \n        v__77208 = clmin(v__77214_0, v__77208); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_77199 = 0; \n        v__77218[(v_l_id_77197 + (512 * v_wg_id_77196))] = doubleMultiplyAdd(v__77208, v__77204, v__77203[(v_l_id_77197 + (512 * v_wg_id_77196))], v__77205); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__77200",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77202",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77203",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77204",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77205",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__77218",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}