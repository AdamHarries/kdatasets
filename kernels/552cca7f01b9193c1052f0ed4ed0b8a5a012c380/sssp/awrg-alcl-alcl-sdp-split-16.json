{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63515, const global float* restrict v__63516, const global float* restrict v__63517, const global float* restrict v__63518, float v__63519, float v__63520, global float* v__63538, global float* v__63528, global int* v__63522, local float* v__63533, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63524; \n  float v__63529; \n  float v__57071; \n  /* Private Memory */\n  float v__63526_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5101 = v__63522; \n    local int v_w_id_63507; \n    if (get_local_id(0) == 0) {\n      v_w_id_63507 = atomic_inc(v_work_idx_5101); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63507 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5099; \n        v_work_idx_5099 = 0; \n        int v_l_id_63508 = atomic_inc(&(v_work_idx_5099)); \n        while((v_l_id_63508 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_63509 = 0; v_i_63509 < 16; v_i_63509 = (1 + v_i_63509)) {\n            float v_tmp_63589 = 3.4028235E38f; \n            v__63524 = v_tmp_63589; \n            int v_index_63590 = v__63515[(v_l_id_63508 + (16 * v_MWidthC_1 * v_w_id_63507) + (v_MWidthC_1 * v_i_63509))]; \n            if (v_index_63590 < 0) {\n              v__63526_0 = v__63524; \n            } else {\n              if (v_index_63590 >= v_VLength_3) {\n                v__63526_0 = v__63524; \n              } else {\n                v__63526_0 = v__63517[v_index_63590]; \n              }\n            }\n            v__63528[(15 + (16 * v_MWidthC_1 * v_w_id_63507) + (-1 * v_i_63509) + (16 * v_l_id_63508))] = absadd(v__63526_0, v__63516[(v_l_id_63508 + (16 * v_MWidthC_1 * v_w_id_63507) + (v_MWidthC_1 * v_i_63509))]); \n          }\n          /* end map_seq */\n          float v_tmp_63591 = 3.4028235E38f; \n          v__63529 = v_tmp_63591; \n          /* reduce_seq */\n          for (int v_i_63510 = 0; v_i_63510 < 16; v_i_63510 = (1 + v_i_63510)) {\n            v__63529 = clmin(v__63529, v__63528[(v_i_63510 + (16 * v_MWidthC_1 * v_w_id_63507) + (16 * v_l_id_63508))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63511 = 0; \n            v__63533[v_l_id_63508] = id(v__63529); \n          }\n          /* end map_seq */\n          v_l_id_63508 = atomic_inc(&(v_work_idx_5099)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5093; \n        v_work_idx_5093 = 0; \n        int v_l_id_63512 = atomic_inc(&(v_work_idx_5093)); \n        while((v_l_id_63512 < 1)){\n          float v_tmp_63594 = 3.4028235E38f; \n          v__57071 = v_tmp_63594; \n          /* reduce_seq */\n          for (int v_i_63513 = 0; v_i_63513 < v_MWidthC_1; v_i_63513 = (1 + v_i_63513)) {\n            v__57071 = clmin(v__57071, v__63533[(v_i_63513 + (v_MWidthC_1 * v_l_id_63512))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63514 = 0; \n            v__63538[v_w_id_63507] = doubleMultiplyAdd(v__57071, v__63519, v__63518[v_w_id_63507], v__63520); \n          }\n          /* end map_seq */\n          v_l_id_63512 = atomic_inc(&(v_work_idx_5093)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63507 = atomic_inc(v_work_idx_5101); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63515",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63516",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63517",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63519",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63520",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63528",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63522",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63533",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}