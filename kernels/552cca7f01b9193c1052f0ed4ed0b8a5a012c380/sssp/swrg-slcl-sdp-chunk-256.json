{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73793, const global float* restrict v__73794, const global float* restrict v__73795, const global float* restrict v__73796, float v__73797, float v__73798, global float* v__73811, global float* v__73805, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73801; \n  float v__73806; \n  /* Private Memory */\n  float v__73803_0;\n  \n  for (int v_wg_id_73788 = get_group_id(0); v_wg_id_73788 < ((v_MHeight_2)/(256)); v_wg_id_73788 = (v_wg_id_73788 + get_num_groups(0))) {\n    for (int v_l_id_73789 = get_local_id(0); v_l_id_73789 < 256; v_l_id_73789 = (v_l_id_73789 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_73790 = 0; v_i_73790 < v_MWidthC_1; v_i_73790 = (1 + v_i_73790)) {\n        float v_tmp_73855 = 3.4028235E38f; \n        v__73801 = v_tmp_73855; \n        int v_index_73856 = v__73793[(v_i_73790 + (256 * v_MWidthC_1 * v_wg_id_73788) + (v_MWidthC_1 * v_l_id_73789))]; \n        if (v_index_73856 < 0) {\n          v__73803_0 = v__73801; \n        } else {\n          if (v_index_73856 >= v_VLength_3) {\n            v__73803_0 = v__73801; \n          } else {\n            v__73803_0 = v__73795[v_index_73856]; \n          }\n        }\n        v__73805[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_73788) + (-1 * v_i_73790) + (v_MWidthC_1 * v_l_id_73789))] = absadd(v__73803_0, v__73794[(v_i_73790 + (256 * v_MWidthC_1 * v_wg_id_73788) + (v_MWidthC_1 * v_l_id_73789))]); \n      }\n      /* end map_seq */\n      float v_tmp_73857 = 3.4028235E38f; \n      v__73806 = v_tmp_73857; \n      /* reduce_seq */\n      for (int v_i_73791 = 0; v_i_73791 < v_MWidthC_1; v_i_73791 = (1 + v_i_73791)) {\n        v__73806 = clmin(v__73806, v__73805[(v_i_73791 + (256 * v_MWidthC_1 * v_wg_id_73788) + (v_MWidthC_1 * v_l_id_73789))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_73792 = 0; \n        v__73811[(v_l_id_73789 + (256 * v_wg_id_73788))] = doubleMultiplyAdd(v__73806, v__73797, v__73796[(v_l_id_73789 + (256 * v_wg_id_73788))], v__73798); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73793",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73795",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73796",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73797",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73798",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__73811",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}