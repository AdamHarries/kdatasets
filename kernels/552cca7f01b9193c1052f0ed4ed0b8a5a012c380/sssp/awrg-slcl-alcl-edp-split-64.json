{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__69557, const global float* restrict v__69558, const global float* restrict v__69559, const global float* restrict v__69560, float v__69561, float v__69562, global float* v__69582, global int* v__69564, local float* v__69577, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69566; \n  float v__69568; \n  float v__57071; \n  /* Private Memory */\n  float v__69570_0;\n  \n  float v__69572_0;\n  \n  int v__69576_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5660 = v__69564; \n    local int v_w_id_69550; \n    if (get_local_id(0) == 0) {\n      v_w_id_69550 = atomic_inc(v_work_idx_5660); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69550 < v_MHeight_2)){\n      for (int v_l_id_69551 = get_local_id(0); v_l_id_69551 < v_MWidthC_1; v_l_id_69551 = (v_l_id_69551 + get_local_size(0))) {\n        float v_tmp_69644 = 3.4028235E38f; \n        v__69566 = v_tmp_69644; \n        /* reduce_while_seq */\n        for (int v_i_69552 = 0; v_i_69552 < 64; v_i_69552 = (1 + v_i_69552)) {\n          v__69576_0 = check(v__69566, v__69557[(v_l_id_69551 + (64 * v_MWidthC_1 * v_w_id_69550) + (v_MWidthC_1 * v_i_69552))]); \n          if (v__69576_0) {\n          } else {\n            break;\n          }\n          float v_tmp_69645 = 3.4028235E38f; \n          v__69568 = v_tmp_69645; \n          int v_index_69646 = v__69557[(v_l_id_69551 + (64 * v_MWidthC_1 * v_w_id_69550) + (v_MWidthC_1 * v_i_69552))]; \n          if (v_index_69646 < 0) {\n            v__69570_0 = v__69568; \n          } else {\n            if (v_index_69646 >= v_VLength_3) {\n              v__69570_0 = v__69568; \n            } else {\n              v__69570_0 = v__69559[v_index_69646]; \n            }\n          }\n          v__69572_0 = absadd(v__69570_0, v__69558[(v_l_id_69551 + (64 * v_MWidthC_1 * v_w_id_69550) + (v_MWidthC_1 * v_i_69552))]); \n          v__69566 = clmin(v__69572_0, v__69566); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69553 = 0; \n          v__69577[v_l_id_69551] = id(v__69566); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5654; \n        v_work_idx_5654 = 0; \n        int v_l_id_69554 = atomic_inc(&(v_work_idx_5654)); \n        while((v_l_id_69554 < 1)){\n          float v_tmp_69649 = 3.4028235E38f; \n          v__57071 = v_tmp_69649; \n          /* reduce_seq */\n          for (int v_i_69555 = 0; v_i_69555 < v_MWidthC_1; v_i_69555 = (1 + v_i_69555)) {\n            v__57071 = clmin(v__57071, v__69577[(v_i_69555 + (v_MWidthC_1 * v_l_id_69554))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69556 = 0; \n            v__69582[v_w_id_69550] = doubleMultiplyAdd(v__57071, v__69561, v__69560[v_w_id_69550], v__69562); \n          }\n          /* end map_seq */\n          v_l_id_69554 = atomic_inc(&(v_work_idx_5654)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69550 = atomic_inc(v_work_idx_5660); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__69557",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69558",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69559",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69561",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69562",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69564",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69577",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}