{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66400, const global float* restrict v__66401, const global float* restrict v__66402, const global float* restrict v__66403, float v__66404, float v__66405, global float* v__66419, global int* v__66407, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66409; \n  float v__66411; \n  /* Private Memory */\n  float v__66413_0;\n  \n  float v__66415_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5363 = v__66407; \n    local int v_w_id_66396; \n    if (get_local_id(0) == 0) {\n      v_w_id_66396 = atomic_inc(v_work_idx_5363); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66396 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5361; \n        v_work_idx_5361 = 0; \n        int v_l_id_66397 = atomic_inc(&(v_work_idx_5361)); \n        while((v_l_id_66397 < 32)){\n          float v_tmp_66456 = 3.4028235E38f; \n          v__66409 = v_tmp_66456; \n          /* reduce_seq */\n          for (int v_i_66398 = 0; v_i_66398 < v_MWidthC_1; v_i_66398 = (1 + v_i_66398)) {\n            float v_tmp_66457 = 3.4028235E38f; \n            v__66411 = v_tmp_66457; \n            int v_index_66458 = v__66400[(v_i_66398 + (32 * v_MWidthC_1 * v_w_id_66396) + (v_MWidthC_1 * v_l_id_66397))]; \n            if (v_index_66458 < 0) {\n              v__66413_0 = v__66411; \n            } else {\n              if (v_index_66458 >= v_VLength_3) {\n                v__66413_0 = v__66411; \n              } else {\n                v__66413_0 = v__66402[v_index_66458]; \n              }\n            }\n            v__66415_0 = absadd(v__66413_0, v__66401[(v_i_66398 + (32 * v_MWidthC_1 * v_w_id_66396) + (v_MWidthC_1 * v_l_id_66397))]); \n            v__66409 = clmin(v__66415_0, v__66409); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66399 = 0; \n            v__66419[(v_l_id_66397 + (32 * v_w_id_66396))] = doubleMultiplyAdd(v__66409, v__66404, v__66403[(v_l_id_66397 + (32 * v_w_id_66396))], v__66405); \n          }\n          /* end map_seq */\n          v_l_id_66397 = atomic_inc(&(v_work_idx_5361)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66396 = atomic_inc(v_work_idx_5363); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66402",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66403",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66404",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66405",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66407",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}