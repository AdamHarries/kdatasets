{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59359, const global float* restrict v__59360, const global float* restrict v__59361, const global float* restrict v__59362, float v__59363, float v__59364, global float* v__59382, global float* v__59372, global int* v__59366, local float* v__59377, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59368; \n  float v__59373; \n  float v__57071; \n  /* Private Memory */\n  float v__59370_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4704 = v__59366; \n    local int v_w_id_59351; \n    if (get_local_id(0) == 0) {\n      v_w_id_59351 = atomic_inc(v_work_idx_4704); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59351 < v_MHeight_2)){\n      for (int v_l_id_59352 = get_local_id(0); v_l_id_59352 < v_MWidthC_1; v_l_id_59352 = (v_l_id_59352 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59353 = 0; v_i_59353 < 8; v_i_59353 = (1 + v_i_59353)) {\n          float v_tmp_59441 = 3.4028235E38f; \n          v__59368 = v_tmp_59441; \n          int v_index_59442 = v__59359[(v_l_id_59352 + (8 * v_MWidthC_1 * v_w_id_59351) + (v_MWidthC_1 * v_i_59353))]; \n          if (v_index_59442 < 0) {\n            v__59370_0 = v__59368; \n          } else {\n            if (v_index_59442 >= v_VLength_3) {\n              v__59370_0 = v__59368; \n            } else {\n              v__59370_0 = v__59361[v_index_59442]; \n            }\n          }\n          v__59372[(7 + (8 * v_MWidthC_1 * v_w_id_59351) + (-1 * v_i_59353) + (8 * v_l_id_59352))] = absadd(v__59370_0, v__59360[(v_l_id_59352 + (8 * v_MWidthC_1 * v_w_id_59351) + (v_MWidthC_1 * v_i_59353))]); \n        }\n        /* end map_seq */\n        float v_tmp_59443 = 3.4028235E38f; \n        v__59373 = v_tmp_59443; \n        /* reduce_seq */\n        for (int v_i_59354 = 0; v_i_59354 < 8; v_i_59354 = (1 + v_i_59354)) {\n          v__59373 = clmin(v__59373, v__59372[(v_i_59354 + (8 * v_MWidthC_1 * v_w_id_59351) + (8 * v_l_id_59352))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59355 = 0; \n          v__59377[v_l_id_59352] = id(v__59373); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4697; \n        v_work_idx_4697 = 0; \n        int v_l_id_59356 = atomic_inc(&(v_work_idx_4697)); \n        while((v_l_id_59356 < 1)){\n          float v_tmp_59446 = 3.4028235E38f; \n          v__57071 = v_tmp_59446; \n          /* reduce_seq */\n          for (int v_i_59357 = 0; v_i_59357 < v_MWidthC_1; v_i_59357 = (1 + v_i_59357)) {\n            v__57071 = clmin(v__57071, v__59377[(v_i_59357 + (v_MWidthC_1 * v_l_id_59356))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59358 = 0; \n            v__59382[v_w_id_59351] = doubleMultiplyAdd(v__57071, v__59363, v__59362[v_w_id_59351], v__59364); \n          }\n          /* end map_seq */\n          v_l_id_59356 = atomic_inc(&(v_work_idx_4697)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59351 = atomic_inc(v_work_idx_4704); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59359",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59360",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59361",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59363",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59364",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59372",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59366",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59377",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}