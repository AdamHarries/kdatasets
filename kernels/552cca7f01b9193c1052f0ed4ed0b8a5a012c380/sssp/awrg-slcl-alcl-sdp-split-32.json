{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66023, const global float* restrict v__66024, const global float* restrict v__66025, const global float* restrict v__66026, float v__66027, float v__66028, global float* v__66046, global float* v__66036, global int* v__66030, local float* v__66041, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66032; \n  float v__66037; \n  float v__57071; \n  /* Private Memory */\n  float v__66034_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5328 = v__66030; \n    local int v_w_id_66015; \n    if (get_local_id(0) == 0) {\n      v_w_id_66015 = atomic_inc(v_work_idx_5328); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66015 < v_MHeight_2)){\n      for (int v_l_id_66016 = get_local_id(0); v_l_id_66016 < v_MWidthC_1; v_l_id_66016 = (v_l_id_66016 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_66017 = 0; v_i_66017 < 32; v_i_66017 = (1 + v_i_66017)) {\n          float v_tmp_66105 = 3.4028235E38f; \n          v__66032 = v_tmp_66105; \n          int v_index_66106 = v__66023[(v_l_id_66016 + (32 * v_MWidthC_1 * v_w_id_66015) + (v_MWidthC_1 * v_i_66017))]; \n          if (v_index_66106 < 0) {\n            v__66034_0 = v__66032; \n          } else {\n            if (v_index_66106 >= v_VLength_3) {\n              v__66034_0 = v__66032; \n            } else {\n              v__66034_0 = v__66025[v_index_66106]; \n            }\n          }\n          v__66036[(31 + (32 * v_MWidthC_1 * v_w_id_66015) + (-1 * v_i_66017) + (32 * v_l_id_66016))] = absadd(v__66034_0, v__66024[(v_l_id_66016 + (32 * v_MWidthC_1 * v_w_id_66015) + (v_MWidthC_1 * v_i_66017))]); \n        }\n        /* end map_seq */\n        float v_tmp_66107 = 3.4028235E38f; \n        v__66037 = v_tmp_66107; \n        /* reduce_seq */\n        for (int v_i_66018 = 0; v_i_66018 < 32; v_i_66018 = (1 + v_i_66018)) {\n          v__66037 = clmin(v__66037, v__66036[(v_i_66018 + (32 * v_MWidthC_1 * v_w_id_66015) + (32 * v_l_id_66016))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66019 = 0; \n          v__66041[v_l_id_66016] = id(v__66037); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5321; \n        v_work_idx_5321 = 0; \n        int v_l_id_66020 = atomic_inc(&(v_work_idx_5321)); \n        while((v_l_id_66020 < 1)){\n          float v_tmp_66110 = 3.4028235E38f; \n          v__57071 = v_tmp_66110; \n          /* reduce_seq */\n          for (int v_i_66021 = 0; v_i_66021 < v_MWidthC_1; v_i_66021 = (1 + v_i_66021)) {\n            v__57071 = clmin(v__57071, v__66041[(v_i_66021 + (v_MWidthC_1 * v_l_id_66020))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66022 = 0; \n            v__66046[v_w_id_66015] = doubleMultiplyAdd(v__57071, v__66027, v__66026[v_w_id_66015], v__66028); \n          }\n          /* end map_seq */\n          v_l_id_66020 = atomic_inc(&(v_work_idx_5321)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66015 = atomic_inc(v_work_idx_5328); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66023",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66024",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66025",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66027",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66028",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66036",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66030",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66041",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}