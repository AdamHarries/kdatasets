{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59143, const global float* restrict v__59144, const global float* restrict v__59145, const global float* restrict v__59146, float v__59147, float v__59148, global float* v__59166, global int* v__59150, local float* v__59161, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59152; \n  float v__59154; \n  float v__57071; \n  /* Private Memory */\n  float v__59156_0;\n  \n  float v__59158_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4684 = v__59150; \n    local int v_w_id_59136; \n    if (get_local_id(0) == 0) {\n      v_w_id_59136 = atomic_inc(v_work_idx_4684); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59136 < v_MHeight_2)){\n      for (int v_l_id_59137 = get_local_id(0); v_l_id_59137 < v_MWidthC_1; v_l_id_59137 = (v_l_id_59137 + get_local_size(0))) {\n        float v_tmp_59229 = 3.4028235E38f; \n        v__59152 = v_tmp_59229; \n        /* reduce_seq */\n        for (int v_i_59138 = 0; v_i_59138 < 8; v_i_59138 = (1 + v_i_59138)) {\n          float v_tmp_59230 = 3.4028235E38f; \n          v__59154 = v_tmp_59230; \n          int v_index_59231 = v__59143[(v_l_id_59137 + (8 * v_MWidthC_1 * v_w_id_59136) + (v_MWidthC_1 * v_i_59138))]; \n          if (v_index_59231 < 0) {\n            v__59156_0 = v__59154; \n          } else {\n            if (v_index_59231 >= v_VLength_3) {\n              v__59156_0 = v__59154; \n            } else {\n              v__59156_0 = v__59145[v_index_59231]; \n            }\n          }\n          v__59158_0 = absadd(v__59156_0, v__59144[(v_l_id_59137 + (8 * v_MWidthC_1 * v_w_id_59136) + (v_MWidthC_1 * v_i_59138))]); \n          v__59152 = clmin(v__59158_0, v__59152); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59139 = 0; \n          v__59161[v_l_id_59137] = id(v__59152); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59140 = get_local_id(0); \n        float v_tmp_59234 = 3.4028235E38f; \n        v__57071 = v_tmp_59234; \n        /* reduce_seq */\n        for (int v_i_59141 = 0; v_i_59141 < v_MWidthC_1; v_i_59141 = (1 + v_i_59141)) {\n          v__57071 = clmin(v__57071, v__59161[(v_i_59141 + (v_MWidthC_1 * v_l_id_59140))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59142 = 0; \n          v__59166[v_w_id_59136] = doubleMultiplyAdd(v__57071, v__59147, v__59146[v_w_id_59136], v__59148); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59136 = atomic_inc(v_work_idx_4684); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__59143",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59144",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59145",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59146",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59147",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59148",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59150",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59161",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}