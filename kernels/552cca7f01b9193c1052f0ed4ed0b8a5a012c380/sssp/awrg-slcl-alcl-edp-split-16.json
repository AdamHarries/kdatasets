{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__62893, const global float* restrict v__62894, const global float* restrict v__62895, const global float* restrict v__62896, float v__62897, float v__62898, global float* v__62918, global int* v__62900, local float* v__62913, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62902; \n  float v__62904; \n  float v__57071; \n  /* Private Memory */\n  float v__62906_0;\n  \n  float v__62908_0;\n  \n  int v__62912_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5036 = v__62900; \n    local int v_w_id_62886; \n    if (get_local_id(0) == 0) {\n      v_w_id_62886 = atomic_inc(v_work_idx_5036); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62886 < v_MHeight_2)){\n      for (int v_l_id_62887 = get_local_id(0); v_l_id_62887 < v_MWidthC_1; v_l_id_62887 = (v_l_id_62887 + get_local_size(0))) {\n        float v_tmp_62980 = 3.4028235E38f; \n        v__62902 = v_tmp_62980; \n        /* reduce_while_seq */\n        for (int v_i_62888 = 0; v_i_62888 < 16; v_i_62888 = (1 + v_i_62888)) {\n          v__62912_0 = check(v__62902, v__62893[(v_l_id_62887 + (16 * v_MWidthC_1 * v_w_id_62886) + (v_MWidthC_1 * v_i_62888))]); \n          if (v__62912_0) {\n          } else {\n            break;\n          }\n          float v_tmp_62981 = 3.4028235E38f; \n          v__62904 = v_tmp_62981; \n          int v_index_62982 = v__62893[(v_l_id_62887 + (16 * v_MWidthC_1 * v_w_id_62886) + (v_MWidthC_1 * v_i_62888))]; \n          if (v_index_62982 < 0) {\n            v__62906_0 = v__62904; \n          } else {\n            if (v_index_62982 >= v_VLength_3) {\n              v__62906_0 = v__62904; \n            } else {\n              v__62906_0 = v__62895[v_index_62982]; \n            }\n          }\n          v__62908_0 = absadd(v__62906_0, v__62894[(v_l_id_62887 + (16 * v_MWidthC_1 * v_w_id_62886) + (v_MWidthC_1 * v_i_62888))]); \n          v__62902 = clmin(v__62908_0, v__62902); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62889 = 0; \n          v__62913[v_l_id_62887] = id(v__62902); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5030; \n        v_work_idx_5030 = 0; \n        int v_l_id_62890 = atomic_inc(&(v_work_idx_5030)); \n        while((v_l_id_62890 < 1)){\n          float v_tmp_62985 = 3.4028235E38f; \n          v__57071 = v_tmp_62985; \n          /* reduce_seq */\n          for (int v_i_62891 = 0; v_i_62891 < v_MWidthC_1; v_i_62891 = (1 + v_i_62891)) {\n            v__57071 = clmin(v__57071, v__62913[(v_i_62891 + (v_MWidthC_1 * v_l_id_62890))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62892 = 0; \n            v__62918[v_w_id_62886] = doubleMultiplyAdd(v__57071, v__62897, v__62896[v_w_id_62886], v__62898); \n          }\n          /* end map_seq */\n          v_l_id_62890 = atomic_inc(&(v_work_idx_5030)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62886 = atomic_inc(v_work_idx_5036); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62893",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62894",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62895",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62897",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62898",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62900",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62918",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62913",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}