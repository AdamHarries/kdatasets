{
  "name" : "awrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73133, const global float* restrict v__73134, const global float* restrict v__73135, const global float* restrict v__73136, float v__73137, float v__73138, global float* v__73154, global int* v__73140, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73141; \n  float v__73144; \n  /* Private Memory */\n  float v__73146_0;\n  \n  float v__73148_0;\n  \n  int v__73152_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5994 = v__73140; \n    local int v_w_id_73129; \n    if (get_local_id(0) == 0) {\n      v_w_id_73129 = atomic_inc(v_work_idx_5994); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73129 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5992; \n        v_work_idx_5992 = 0; \n        int v_l_id_73130 = atomic_inc(&(v_work_idx_5992)); \n        while((v_l_id_73130 < 128)){\n          float v_tmp_73197 = 3.4028235E38f; \n          v__73141 = v_tmp_73197; \n          /* reduce_while_seq */\n          for (int v_i_73131 = 0; v_i_73131 < v_MWidthC_1; v_i_73131 = (1 + v_i_73131)) {\n            v__73152_0 = check(v__73141, v__73133[(v_i_73131 + (128 * v_MWidthC_1 * v_w_id_73129) + (v_MWidthC_1 * v_l_id_73130))]); \n            if (v__73152_0) {\n            } else {\n              break;\n            }\n            float v_tmp_73198 = 3.4028235E38f; \n            v__73144 = v_tmp_73198; \n            int v_index_73199 = v__73133[(v_i_73131 + (128 * v_MWidthC_1 * v_w_id_73129) + (v_MWidthC_1 * v_l_id_73130))]; \n            if (v_index_73199 < 0) {\n              v__73146_0 = v__73144; \n            } else {\n              if (v_index_73199 >= v_VLength_3) {\n                v__73146_0 = v__73144; \n              } else {\n                v__73146_0 = v__73135[v_index_73199]; \n              }\n            }\n            v__73148_0 = absadd(v__73146_0, v__73134[(v_i_73131 + (128 * v_MWidthC_1 * v_w_id_73129) + (v_MWidthC_1 * v_l_id_73130))]); \n            v__73141 = clmin(v__73148_0, v__73141); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73132 = 0; \n            v__73154[(v_l_id_73130 + (128 * v_w_id_73129))] = doubleMultiplyAdd(v__73141, v__73137, v__73136[(v_l_id_73130 + (128 * v_w_id_73129))], v__73138); \n          }\n          /* end map_seq */\n          v_l_id_73130 = atomic_inc(&(v_work_idx_5992)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73129 = atomic_inc(v_work_idx_5994); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__73133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73134",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73135",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73137",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73138",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73140",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73154",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}