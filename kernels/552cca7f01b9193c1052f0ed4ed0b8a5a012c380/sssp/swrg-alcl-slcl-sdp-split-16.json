{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61552, const global float* restrict v__61553, const global float* restrict v__61554, const global float* restrict v__61555, float v__61556, float v__61557, global float* v__61574, global float* v__61564, local float* v__61569, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61560; \n  float v__61565; \n  float v__57071; \n  /* Private Memory */\n  float v__61562_0;\n  \n  for (int v_wg_id_61544 = get_group_id(0); v_wg_id_61544 < v_MHeight_2; v_wg_id_61544 = (v_wg_id_61544 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4908; \n      v_work_idx_4908 = 0; \n      int v_l_id_61545 = atomic_inc(&(v_work_idx_4908)); \n      while((v_l_id_61545 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_61546 = 0; v_i_61546 < 16; v_i_61546 = (1 + v_i_61546)) {\n          float v_tmp_61631 = 3.4028235E38f; \n          v__61560 = v_tmp_61631; \n          int v_index_61632 = v__61552[(v_l_id_61545 + (16 * v_MWidthC_1 * v_wg_id_61544) + (v_MWidthC_1 * v_i_61546))]; \n          if (v_index_61632 < 0) {\n            v__61562_0 = v__61560; \n          } else {\n            if (v_index_61632 >= v_VLength_3) {\n              v__61562_0 = v__61560; \n            } else {\n              v__61562_0 = v__61554[v_index_61632]; \n            }\n          }\n          v__61564[(15 + (16 * v_MWidthC_1 * v_wg_id_61544) + (-1 * v_i_61546) + (16 * v_l_id_61545))] = absadd(v__61562_0, v__61553[(v_l_id_61545 + (16 * v_MWidthC_1 * v_wg_id_61544) + (v_MWidthC_1 * v_i_61546))]); \n        }\n        /* end map_seq */\n        float v_tmp_61633 = 3.4028235E38f; \n        v__61565 = v_tmp_61633; \n        /* reduce_seq */\n        for (int v_i_61547 = 0; v_i_61547 < 16; v_i_61547 = (1 + v_i_61547)) {\n          v__61565 = clmin(v__61565, v__61564[(v_i_61547 + (16 * v_MWidthC_1 * v_wg_id_61544) + (16 * v_l_id_61545))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61548 = 0; \n          v__61569[v_l_id_61545] = id(v__61565); \n        }\n        /* end map_seq */\n        v_l_id_61545 = atomic_inc(&(v_work_idx_4908)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_61549 = get_local_id(0); \n      float v_tmp_61636 = 3.4028235E38f; \n      v__57071 = v_tmp_61636; \n      /* reduce_seq */\n      for (int v_i_61550 = 0; v_i_61550 < v_MWidthC_1; v_i_61550 = (1 + v_i_61550)) {\n        v__57071 = clmin(v__57071, v__61569[(v_i_61550 + (v_MWidthC_1 * v_l_id_61549))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_61551 = 0; \n        v__61574[v_wg_id_61544] = doubleMultiplyAdd(v__57071, v__61556, v__61555[v_wg_id_61544], v__61557); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61552",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61553",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61554",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61555",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61556",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61557",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61564",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61574",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61569",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}