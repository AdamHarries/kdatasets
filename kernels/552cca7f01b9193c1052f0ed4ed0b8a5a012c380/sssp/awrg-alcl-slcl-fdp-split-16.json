{
  "name" : "awrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63315, const global float* restrict v__63316, const global float* restrict v__63317, const global float* restrict v__63318, float v__63319, float v__63320, global float* v__63338, global int* v__63322, local float* v__63333, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63324; \n  float v__63326; \n  float v__57071; \n  /* Private Memory */\n  float v__63328_0;\n  \n  float v__63330_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5079 = v__63322; \n    local int v_w_id_63308; \n    if (get_local_id(0) == 0) {\n      v_w_id_63308 = atomic_inc(v_work_idx_5079); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63308 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5077; \n        v_work_idx_5077 = 0; \n        int v_l_id_63309 = atomic_inc(&(v_work_idx_5077)); \n        while((v_l_id_63309 < v_MWidthC_1)){\n          float v_tmp_63393 = 3.4028235E38f; \n          v__63324 = v_tmp_63393; \n          /* reduce_seq */\n          for (int v_i_63310 = 0; v_i_63310 < 16; v_i_63310 = (1 + v_i_63310)) {\n            float v_tmp_63394 = 3.4028235E38f; \n            v__63326 = v_tmp_63394; \n            int v_index_63395 = v__63315[(v_l_id_63309 + (16 * v_MWidthC_1 * v_w_id_63308) + (v_MWidthC_1 * v_i_63310))]; \n            if (v_index_63395 < 0) {\n              v__63328_0 = v__63326; \n            } else {\n              if (v_index_63395 >= v_VLength_3) {\n                v__63328_0 = v__63326; \n              } else {\n                v__63328_0 = v__63317[v_index_63395]; \n              }\n            }\n            v__63330_0 = absadd(v__63328_0, v__63316[(v_l_id_63309 + (16 * v_MWidthC_1 * v_w_id_63308) + (v_MWidthC_1 * v_i_63310))]); \n            v__63324 = clmin(v__63330_0, v__63324); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63311 = 0; \n            v__63333[v_l_id_63309] = id(v__63324); \n          }\n          /* end map_seq */\n          v_l_id_63309 = atomic_inc(&(v_work_idx_5077)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_63312 = get_local_id(0); \n        float v_tmp_63398 = 3.4028235E38f; \n        v__57071 = v_tmp_63398; \n        /* reduce_seq */\n        for (int v_i_63313 = 0; v_i_63313 < v_MWidthC_1; v_i_63313 = (1 + v_i_63313)) {\n          v__57071 = clmin(v__57071, v__63333[(v_i_63313 + (v_MWidthC_1 * v_l_id_63312))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63314 = 0; \n          v__63338[v_w_id_63308] = doubleMultiplyAdd(v__57071, v__63319, v__63318[v_w_id_63308], v__63320); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63308 = atomic_inc(v_work_idx_5079); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63315",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63316",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63317",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63319",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63320",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63322",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63338",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63333",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}