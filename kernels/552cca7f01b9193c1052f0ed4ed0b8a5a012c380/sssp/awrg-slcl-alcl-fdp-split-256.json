{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76120, const global float* restrict v__76121, const global float* restrict v__76122, const global float* restrict v__76123, float v__76124, float v__76125, global float* v__76143, global int* v__76127, local float* v__76138, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76129; \n  float v__76131; \n  float v__57071; \n  /* Private Memory */\n  float v__76133_0;\n  \n  float v__76135_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6274 = v__76127; \n    local int v_w_id_76113; \n    if (get_local_id(0) == 0) {\n      v_w_id_76113 = atomic_inc(v_work_idx_6274); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76113 < v_MHeight_2)){\n      for (int v_l_id_76114 = get_local_id(0); v_l_id_76114 < v_MWidthC_1; v_l_id_76114 = (v_l_id_76114 + get_local_size(0))) {\n        float v_tmp_76202 = 3.4028235E38f; \n        v__76129 = v_tmp_76202; \n        /* reduce_seq */\n        for (int v_i_76115 = 0; v_i_76115 < 256; v_i_76115 = (1 + v_i_76115)) {\n          float v_tmp_76203 = 3.4028235E38f; \n          v__76131 = v_tmp_76203; \n          int v_index_76204 = v__76120[(v_l_id_76114 + (256 * v_MWidthC_1 * v_w_id_76113) + (v_MWidthC_1 * v_i_76115))]; \n          if (v_index_76204 < 0) {\n            v__76133_0 = v__76131; \n          } else {\n            if (v_index_76204 >= v_VLength_3) {\n              v__76133_0 = v__76131; \n            } else {\n              v__76133_0 = v__76122[v_index_76204]; \n            }\n          }\n          v__76135_0 = absadd(v__76133_0, v__76121[(v_l_id_76114 + (256 * v_MWidthC_1 * v_w_id_76113) + (v_MWidthC_1 * v_i_76115))]); \n          v__76129 = clmin(v__76135_0, v__76129); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76116 = 0; \n          v__76138[v_l_id_76114] = id(v__76129); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6268; \n        v_work_idx_6268 = 0; \n        int v_l_id_76117 = atomic_inc(&(v_work_idx_6268)); \n        while((v_l_id_76117 < 1)){\n          float v_tmp_76207 = 3.4028235E38f; \n          v__57071 = v_tmp_76207; \n          /* reduce_seq */\n          for (int v_i_76118 = 0; v_i_76118 < v_MWidthC_1; v_i_76118 = (1 + v_i_76118)) {\n            v__57071 = clmin(v__57071, v__76138[(v_i_76118 + (v_MWidthC_1 * v_l_id_76117))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76119 = 0; \n            v__76143[v_w_id_76113] = doubleMultiplyAdd(v__57071, v__76124, v__76123[v_w_id_76113], v__76125); \n          }\n          /* end map_seq */\n          v_l_id_76117 = atomic_inc(&(v_work_idx_6268)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76113 = atomic_inc(v_work_idx_6274); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76120",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76121",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76122",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76124",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76125",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76127",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76143",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76138",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}