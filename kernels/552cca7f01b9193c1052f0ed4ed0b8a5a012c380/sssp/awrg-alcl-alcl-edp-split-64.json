{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__70365, const global float* restrict v__70366, const global float* restrict v__70367, const global float* restrict v__70368, float v__70369, float v__70370, global float* v__70390, global int* v__70372, local float* v__70385, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70374; \n  float v__70376; \n  float v__57071; \n  /* Private Memory */\n  float v__70378_0;\n  \n  float v__70380_0;\n  \n  int v__70384_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5747 = v__70372; \n    local int v_w_id_70358; \n    if (get_local_id(0) == 0) {\n      v_w_id_70358 = atomic_inc(v_work_idx_5747); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70358 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5745; \n        v_work_idx_5745 = 0; \n        int v_l_id_70359 = atomic_inc(&(v_work_idx_5745)); \n        while((v_l_id_70359 < v_MWidthC_1)){\n          float v_tmp_70444 = 3.4028235E38f; \n          v__70374 = v_tmp_70444; \n          /* reduce_while_seq */\n          for (int v_i_70360 = 0; v_i_70360 < 64; v_i_70360 = (1 + v_i_70360)) {\n            v__70384_0 = check(v__70374, v__70365[(v_l_id_70359 + (64 * v_MWidthC_1 * v_w_id_70358) + (v_MWidthC_1 * v_i_70360))]); \n            if (v__70384_0) {\n            } else {\n              break;\n            }\n            float v_tmp_70445 = 3.4028235E38f; \n            v__70376 = v_tmp_70445; \n            int v_index_70446 = v__70365[(v_l_id_70359 + (64 * v_MWidthC_1 * v_w_id_70358) + (v_MWidthC_1 * v_i_70360))]; \n            if (v_index_70446 < 0) {\n              v__70378_0 = v__70376; \n            } else {\n              if (v_index_70446 >= v_VLength_3) {\n                v__70378_0 = v__70376; \n              } else {\n                v__70378_0 = v__70367[v_index_70446]; \n              }\n            }\n            v__70380_0 = absadd(v__70378_0, v__70366[(v_l_id_70359 + (64 * v_MWidthC_1 * v_w_id_70358) + (v_MWidthC_1 * v_i_70360))]); \n            v__70374 = clmin(v__70380_0, v__70374); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70361 = 0; \n            v__70385[v_l_id_70359] = id(v__70374); \n          }\n          /* end map_seq */\n          v_l_id_70359 = atomic_inc(&(v_work_idx_5745)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5740; \n        v_work_idx_5740 = 0; \n        int v_l_id_70362 = atomic_inc(&(v_work_idx_5740)); \n        while((v_l_id_70362 < 1)){\n          float v_tmp_70449 = 3.4028235E38f; \n          v__57071 = v_tmp_70449; \n          /* reduce_seq */\n          for (int v_i_70363 = 0; v_i_70363 < v_MWidthC_1; v_i_70363 = (1 + v_i_70363)) {\n            v__57071 = clmin(v__57071, v__70385[(v_i_70363 + (v_MWidthC_1 * v_l_id_70362))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70364 = 0; \n            v__70390[v_w_id_70358] = doubleMultiplyAdd(v__57071, v__70369, v__70368[v_w_id_70358], v__70370); \n          }\n          /* end map_seq */\n          v_l_id_70362 = atomic_inc(&(v_work_idx_5740)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70358 = atomic_inc(v_work_idx_5747); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__70365",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70366",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70367",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70368",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70369",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70370",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70372",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70390",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70385",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}