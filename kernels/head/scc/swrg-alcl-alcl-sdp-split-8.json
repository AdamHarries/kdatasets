{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__137874, const global int* restrict v__137875, const global int* restrict v__137876, const global int* restrict v__137877, int v__137878, int v__137879, global int* v__137896, global int* v__137886, local int* v__137891, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__137882; \n  int v__137887; \n  int v__136518; \n  /* Private Memory */\n  int v__137884_0;\n  \n  for (int v_wg_id_137866 = get_group_id(0); v_wg_id_137866 < v_MHeight_2; v_wg_id_137866 = (v_wg_id_137866 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11128; \n      v_work_idx_11128 = 0; \n      int v_l_id_137867 = atomic_inc(&(v_work_idx_11128)); \n      while((v_l_id_137867 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_137868 = 0; v_i_137868 < 8; v_i_137868 = (1 + v_i_137868)) {\n          int v_tmp_137949 = -2147483648; \n          v__137882 = v_tmp_137949; \n          int v_index_137950 = v__137874[(v_l_id_137867 + (8 * v_MWidthC_1 * v_wg_id_137866) + (v_MWidthC_1 * v_i_137868))]; \n          if (v_index_137950 < 0) {\n            v__137884_0 = v__137882; \n          } else {\n            if (v_index_137950 >= v_VLength_3) {\n              v__137884_0 = v__137882; \n            } else {\n              v__137884_0 = v__137876[v_index_137950]; \n            }\n          }\n          v__137886[(7 + (8 * v_MWidthC_1 * v_wg_id_137866) + (-1 * v_i_137868) + (8 * v_l_id_137867))] = int_min(v__137884_0, v__137875[(v_l_id_137867 + (8 * v_MWidthC_1 * v_wg_id_137866) + (v_MWidthC_1 * v_i_137868))]); \n        }\n        /* end map_seq */\n        int v_tmp_137951 = -2147483648; \n        v__137887 = v_tmp_137951; \n        /* reduce_seq */\n        for (int v_i_137869 = 0; v_i_137869 < 8; v_i_137869 = (1 + v_i_137869)) {\n          v__137887 = int_max(v__137887, v__137886[(v_i_137869 + (8 * v_MWidthC_1 * v_wg_id_137866) + (8 * v_l_id_137867))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_137870 = 0; \n          v__137891[v_l_id_137867] = id(v__137887); \n        }\n        /* end map_seq */\n        v_l_id_137867 = atomic_inc(&(v_work_idx_11128)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_11122; \n      v_work_idx_11122 = 0; \n      int v_l_id_137871 = atomic_inc(&(v_work_idx_11122)); \n      while((v_l_id_137871 < 1)){\n        int v_tmp_137954 = -2147483648; \n        v__136518 = v_tmp_137954; \n        /* reduce_seq */\n        for (int v_i_137872 = 0; v_i_137872 < v_MWidthC_1; v_i_137872 = (1 + v_i_137872)) {\n          v__136518 = int_max(v__136518, v__137891[(v_i_137872 + (v_MWidthC_1 * v_l_id_137871))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_137873 = 0; \n          v__137896[v_wg_id_137866] = doubleMinMax(v__136518, v__137878, v__137877[v_wg_id_137866], v__137879); \n        }\n        /* end map_seq */\n        v_l_id_137871 = atomic_inc(&(v_work_idx_11122)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__137874",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__137875",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__137876",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__137877",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__137878",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__137879",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__137886",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__137896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__137891",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}