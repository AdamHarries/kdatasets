{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__157345, const global int* restrict v__157346, const global int* restrict v__157347, const global int* restrict v__157348, int v__157349, int v__157350, global int* v__157365, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__157352; \n  int v__157355; \n  /* Private Memory */\n  int v__157357_0;\n  \n  int v__157359_0;\n  \n  int v__157363_0;\n  \n  for (int v_wg_id_157341 = get_group_id(0); v_wg_id_157341 < ((v_MHeight_2)/(256)); v_wg_id_157341 = (v_wg_id_157341 + get_num_groups(0))) {\n    for (int v_l_id_157342 = get_local_id(0); v_l_id_157342 < 256; v_l_id_157342 = (v_l_id_157342 + get_local_size(0))) {\n      int v_tmp_157413 = -2147483648; \n      v__157352 = v_tmp_157413; \n      /* reduce_while_seq */\n      for (int v_i_157343 = 0; v_i_157343 < v_MWidthC_1; v_i_157343 = (1 + v_i_157343)) {\n        v__157363_0 = check(v__157352, v__157345[(v_i_157343 + (256 * v_MWidthC_1 * v_wg_id_157341) + (v_MWidthC_1 * v_l_id_157342))]); \n        if (v__157363_0) {\n        } else {\n          break;\n        }\n        int v_tmp_157414 = -2147483648; \n        v__157355 = v_tmp_157414; \n        int v_index_157415 = v__157345[(v_i_157343 + (256 * v_MWidthC_1 * v_wg_id_157341) + (v_MWidthC_1 * v_l_id_157342))]; \n        if (v_index_157415 < 0) {\n          v__157357_0 = v__157355; \n        } else {\n          if (v_index_157415 >= v_VLength_3) {\n            v__157357_0 = v__157355; \n          } else {\n            v__157357_0 = v__157347[v_index_157415]; \n          }\n        }\n        v__157359_0 = int_min(v__157357_0, v__157346[(v_i_157343 + (256 * v_MWidthC_1 * v_wg_id_157341) + (v_MWidthC_1 * v_l_id_157342))]); \n        v__157352 = int_max(v__157359_0, v__157352); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_157344 = 0; \n        v__157365[(v_l_id_157342 + (256 * v_wg_id_157341))] = doubleMinMax(v__157352, v__157349, v__157348[(v_l_id_157342 + (256 * v_wg_id_157341))], v__157350); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__157345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__157346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__157347",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__157348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__157349",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__157350",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__157365",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}