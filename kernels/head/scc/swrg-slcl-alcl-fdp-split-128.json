{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__153855, const global int* restrict v__153856, const global int* restrict v__153857, const global int* restrict v__153858, int v__153859, int v__153860, global int* v__153877, local int* v__153872, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__153863; \n  int v__153865; \n  int v__136518; \n  /* Private Memory */\n  int v__153867_0;\n  \n  int v__153869_0;\n  \n  for (int v_wg_id_153848 = get_group_id(0); v_wg_id_153848 < v_MHeight_2; v_wg_id_153848 = (v_wg_id_153848 + get_num_groups(0))) {\n    for (int v_l_id_153849 = get_local_id(0); v_l_id_153849 < v_MWidthC_1; v_l_id_153849 = (v_l_id_153849 + get_local_size(0))) {\n      int v_tmp_153938 = -2147483648; \n      v__153863 = v_tmp_153938; \n      /* reduce_seq */\n      for (int v_i_153850 = 0; v_i_153850 < 128; v_i_153850 = (1 + v_i_153850)) {\n        int v_tmp_153939 = -2147483648; \n        v__153865 = v_tmp_153939; \n        int v_index_153940 = v__153855[(v_l_id_153849 + (128 * v_MWidthC_1 * v_wg_id_153848) + (v_MWidthC_1 * v_i_153850))]; \n        if (v_index_153940 < 0) {\n          v__153867_0 = v__153865; \n        } else {\n          if (v_index_153940 >= v_VLength_3) {\n            v__153867_0 = v__153865; \n          } else {\n            v__153867_0 = v__153857[v_index_153940]; \n          }\n        }\n        v__153869_0 = int_min(v__153867_0, v__153856[(v_l_id_153849 + (128 * v_MWidthC_1 * v_wg_id_153848) + (v_MWidthC_1 * v_i_153850))]); \n        v__153863 = int_max(v__153869_0, v__153863); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_153851 = 0; \n        v__153872[v_l_id_153849] = id(v__153863); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_12575; \n      v_work_idx_12575 = 0; \n      int v_l_id_153852 = atomic_inc(&(v_work_idx_12575)); \n      while((v_l_id_153852 < 1)){\n        int v_tmp_153943 = -2147483648; \n        v__136518 = v_tmp_153943; \n        /* reduce_seq */\n        for (int v_i_153853 = 0; v_i_153853 < v_MWidthC_1; v_i_153853 = (1 + v_i_153853)) {\n          v__136518 = int_max(v__136518, v__153872[(v_i_153853 + (v_MWidthC_1 * v_l_id_153852))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_153854 = 0; \n          v__153877[v_wg_id_153848] = doubleMinMax(v__136518, v__153859, v__153858[v_wg_id_153848], v__153860); \n        }\n        /* end map_seq */\n        v_l_id_153852 = atomic_inc(&(v_work_idx_12575)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__153855",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__153856",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__153857",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__153858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__153859",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__153860",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__153877",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__153872",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}