{
  "name" : "swrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__141506, const global int* restrict v__141507, const global int* restrict v__141508, const global int* restrict v__141509, int v__141510, int v__141511, global int* v__141526, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__141513; \n  int v__141516; \n  /* Private Memory */\n  int v__141518_0;\n  \n  int v__141520_0;\n  \n  int v__141524_0;\n  \n  for (int v_wg_id_141502 = get_group_id(0); v_wg_id_141502 < ((v_MHeight_2)/(16)); v_wg_id_141502 = (v_wg_id_141502 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11455; \n      v_work_idx_11455 = 0; \n      int v_l_id_141503 = atomic_inc(&(v_work_idx_11455)); \n      while((v_l_id_141503 < 16)){\n        int v_tmp_141570 = -2147483648; \n        v__141513 = v_tmp_141570; \n        /* reduce_while_seq */\n        for (int v_i_141504 = 0; v_i_141504 < v_MWidthC_1; v_i_141504 = (1 + v_i_141504)) {\n          v__141524_0 = check(v__141513, v__141506[(v_i_141504 + (16 * v_MWidthC_1 * v_wg_id_141502) + (v_MWidthC_1 * v_l_id_141503))]); \n          if (v__141524_0) {\n          } else {\n            break;\n          }\n          int v_tmp_141571 = -2147483648; \n          v__141516 = v_tmp_141571; \n          int v_index_141572 = v__141506[(v_i_141504 + (16 * v_MWidthC_1 * v_wg_id_141502) + (v_MWidthC_1 * v_l_id_141503))]; \n          if (v_index_141572 < 0) {\n            v__141518_0 = v__141516; \n          } else {\n            if (v_index_141572 >= v_VLength_3) {\n              v__141518_0 = v__141516; \n            } else {\n              v__141518_0 = v__141508[v_index_141572]; \n            }\n          }\n          v__141520_0 = int_min(v__141518_0, v__141507[(v_i_141504 + (16 * v_MWidthC_1 * v_wg_id_141502) + (v_MWidthC_1 * v_l_id_141503))]); \n          v__141513 = int_max(v__141520_0, v__141513); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141505 = 0; \n          v__141526[(v_l_id_141503 + (16 * v_wg_id_141502))] = doubleMinMax(v__141513, v__141510, v__141509[(v_l_id_141503 + (16 * v_wg_id_141502))], v__141511); \n        }\n        /* end map_seq */\n        v_l_id_141503 = atomic_inc(&(v_work_idx_11455)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__141506",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141507",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141508",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__141509",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__141510",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__141511",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__141526",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}