{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__165082, const global int* restrict v__165083, const global int* restrict v__165084, const global int* restrict v__165085, int v__165086, int v__165087, global int* v__165105, global int* v__165095, global int* v__165089, local int* v__165100, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__165091; \n  int v__165096; \n  int v__136518; \n  /* Private Memory */\n  int v__165093_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13603 = v__165089; \n    local int v_w_id_165074; \n    if (get_local_id(0) == 0) {\n      v_w_id_165074 = atomic_inc(v_work_idx_13603); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_165074 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_13601; \n        v_work_idx_13601 = 0; \n        int v_l_id_165075 = atomic_inc(&(v_work_idx_13601)); \n        while((v_l_id_165075 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_165076 = 0; v_i_165076 < 512; v_i_165076 = (1 + v_i_165076)) {\n            int v_tmp_165160 = -2147483648; \n            v__165091 = v_tmp_165160; \n            int v_index_165161 = v__165082[(v_l_id_165075 + (512 * v_MWidthC_1 * v_w_id_165074) + (v_MWidthC_1 * v_i_165076))]; \n            if (v_index_165161 < 0) {\n              v__165093_0 = v__165091; \n            } else {\n              if (v_index_165161 >= v_VLength_3) {\n                v__165093_0 = v__165091; \n              } else {\n                v__165093_0 = v__165084[v_index_165161]; \n              }\n            }\n            v__165095[(511 + (512 * v_MWidthC_1 * v_w_id_165074) + (-1 * v_i_165076) + (512 * v_l_id_165075))] = int_min(v__165093_0, v__165083[(v_l_id_165075 + (512 * v_MWidthC_1 * v_w_id_165074) + (v_MWidthC_1 * v_i_165076))]); \n          }\n          /* end map_seq */\n          int v_tmp_165162 = -2147483648; \n          v__165096 = v_tmp_165162; \n          /* reduce_seq */\n          for (int v_i_165077 = 0; v_i_165077 < 512; v_i_165077 = (1 + v_i_165077)) {\n            v__165096 = int_max(v__165096, v__165095[(v_i_165077 + (512 * v_MWidthC_1 * v_w_id_165074) + (512 * v_l_id_165075))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_165078 = 0; \n            v__165100[v_l_id_165075] = id(v__165096); \n          }\n          /* end map_seq */\n          v_l_id_165075 = atomic_inc(&(v_work_idx_13601)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_165079 = get_local_id(0); \n        int v_tmp_165165 = -2147483648; \n        v__136518 = v_tmp_165165; \n        /* reduce_seq */\n        for (int v_i_165080 = 0; v_i_165080 < v_MWidthC_1; v_i_165080 = (1 + v_i_165080)) {\n          v__136518 = int_max(v__136518, v__165100[(v_i_165080 + (v_MWidthC_1 * v_l_id_165079))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_165081 = 0; \n          v__165105[v_w_id_165074] = doubleMinMax(v__136518, v__165086, v__165085[v_w_id_165074], v__165087); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_165074 = atomic_inc(v_work_idx_13603); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__165082",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__165083",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__165084",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__165085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__165086",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__165087",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__165095",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__165089",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__165105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__165100",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}