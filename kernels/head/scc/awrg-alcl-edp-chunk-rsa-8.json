{
  "name" : "awrg-alcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__139614, const global int* restrict v__139615, const global int* restrict v__139616, const global int* restrict v__139617, int v__139618, int v__139619, global int* v__139634, global int* v__139633, global int* v__139621, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__139622; \n  int v__139625; \n  /* Private Memory */\n  int v__139627_0;\n  \n  int v__139629_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11288 = v__139621; \n    local int v_w_id_139609; \n    if (get_local_id(0) == 0) {\n      v_w_id_139609 = atomic_inc(v_work_idx_11288); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_139609 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11286; \n        v_work_idx_11286 = 0; \n        int v_l_id_139610 = atomic_inc(&(v_work_idx_11286)); \n        while((v_l_id_139610 < 8)){\n          int v_tmp_139666 = -2147483648; \n          v__139622 = v_tmp_139666; \n          /* reduce_seq */\n          int v_stop_139667 = min(v__139614[(1 + (v__139614[(v_l_id_139610 + (8 * v_w_id_139609))] / 4))], v__139615[(1 + (v__139615[(v_l_id_139610 + (8 * v_w_id_139609))] / 4))]); \n          for (int v_i_139611 = 0; v_i_139611 < v_stop_139667; v_i_139611 = (1 + v_i_139611)) {\n            int v_tmp_139672 = -2147483648; \n            v__139625 = v_tmp_139672; \n            int v_index_139674 = v__139614[(2 + v_i_139611 + (v__139614[(v_l_id_139610 + (8 * v_w_id_139609))] / 4))]; \n            if (v_index_139674 < 0) {\n              v__139627_0 = v__139625; \n            } else {\n              if (v_index_139674 >= v_MWidthC_1) {\n                v__139627_0 = v__139625; \n              } else {\n                v__139627_0 = v__139616[v_index_139674]; \n              }\n            }\n            v__139629_0 = int_min(v__139615[(2 + v_i_139611 + (v__139615[(v_l_id_139610 + (8 * v_w_id_139609))] / 4))], v__139627_0); \n            v__139622 = int_max(v__139622, v__139629_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139612 = 0; \n            v__139633[(v_l_id_139610 + (8 * v_w_id_139609))] = doubleMinMax(v__139622, v__139618, v__139617[(v_l_id_139610 + (8 * v_w_id_139609))], v__139619); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139613 = 0; \n            v__139634[(v_l_id_139610 + (8 * v_w_id_139609))] = id(v__139633[(v_l_id_139610 + (8 * v_w_id_139609))]); \n          }\n          /* end map_seq */\n          v_l_id_139610 = atomic_inc(&(v_work_idx_11286)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_139609 = atomic_inc(v_work_idx_11288); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__139614",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__139615",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__139616",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__139617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139618",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__139619",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__139633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139621",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__139634",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}