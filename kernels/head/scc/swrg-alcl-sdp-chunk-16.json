{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__141366, const global int* restrict v__141367, const global int* restrict v__141368, const global int* restrict v__141369, int v__141370, int v__141371, global int* v__141384, global int* v__141378, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__141374; \n  int v__141379; \n  /* Private Memory */\n  int v__141376_0;\n  \n  for (int v_wg_id_141361 = get_group_id(0); v_wg_id_141361 < ((v_MHeight_2)/(16)); v_wg_id_141361 = (v_wg_id_141361 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11443; \n      v_work_idx_11443 = 0; \n      int v_l_id_141362 = atomic_inc(&(v_work_idx_11443)); \n      while((v_l_id_141362 < 16)){\n        /* map_seq */\n        for (int v_i_141363 = 0; v_i_141363 < v_MWidthC_1; v_i_141363 = (1 + v_i_141363)) {\n          int v_tmp_141424 = -2147483648; \n          v__141374 = v_tmp_141424; \n          int v_index_141425 = v__141366[(v_i_141363 + (16 * v_MWidthC_1 * v_wg_id_141361) + (v_MWidthC_1 * v_l_id_141362))]; \n          if (v_index_141425 < 0) {\n            v__141376_0 = v__141374; \n          } else {\n            if (v_index_141425 >= v_VLength_3) {\n              v__141376_0 = v__141374; \n            } else {\n              v__141376_0 = v__141368[v_index_141425]; \n            }\n          }\n          v__141378[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_141361) + (-1 * v_i_141363) + (v_MWidthC_1 * v_l_id_141362))] = int_min(v__141376_0, v__141367[(v_i_141363 + (16 * v_MWidthC_1 * v_wg_id_141361) + (v_MWidthC_1 * v_l_id_141362))]); \n        }\n        /* end map_seq */\n        int v_tmp_141426 = -2147483648; \n        v__141379 = v_tmp_141426; \n        /* reduce_seq */\n        for (int v_i_141364 = 0; v_i_141364 < v_MWidthC_1; v_i_141364 = (1 + v_i_141364)) {\n          v__141379 = int_max(v__141379, v__141378[(v_i_141364 + (16 * v_MWidthC_1 * v_wg_id_141361) + (v_MWidthC_1 * v_l_id_141362))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_141365 = 0; \n          v__141384[(v_l_id_141362 + (16 * v_wg_id_141361))] = doubleMinMax(v__141379, v__141370, v__141369[(v_l_id_141362 + (16 * v_wg_id_141361))], v__141371); \n        }\n        /* end map_seq */\n        v_l_id_141362 = atomic_inc(&(v_work_idx_11443)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__141366",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__141368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__141369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__141370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__141371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__141378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__141384",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}