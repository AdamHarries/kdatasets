{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__150855, const global int* restrict v__150856, const global int* restrict v__150857, const global int* restrict v__150858, int v__150859, int v__150860, global int* v__150874, global int* v__150868, global int* v__150862, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__150864; \n  int v__150869; \n  /* Private Memory */\n  int v__150866_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12308 = v__150862; \n    local int v_w_id_150850; \n    if (get_local_id(0) == 0) {\n      v_w_id_150850 = atomic_inc(v_work_idx_12308); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_150850 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_150851 = get_local_id(0); v_l_id_150851 < 64; v_l_id_150851 = (v_l_id_150851 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_150852 = 0; v_i_150852 < v_MWidthC_1; v_i_150852 = (1 + v_i_150852)) {\n          int v_tmp_150917 = -2147483648; \n          v__150864 = v_tmp_150917; \n          int v_index_150918 = v__150855[(v_i_150852 + (64 * v_MWidthC_1 * v_w_id_150850) + (v_MWidthC_1 * v_l_id_150851))]; \n          if (v_index_150918 < 0) {\n            v__150866_0 = v__150864; \n          } else {\n            if (v_index_150918 >= v_VLength_3) {\n              v__150866_0 = v__150864; \n            } else {\n              v__150866_0 = v__150857[v_index_150918]; \n            }\n          }\n          v__150868[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_150850) + (-1 * v_i_150852) + (v_MWidthC_1 * v_l_id_150851))] = int_min(v__150866_0, v__150856[(v_i_150852 + (64 * v_MWidthC_1 * v_w_id_150850) + (v_MWidthC_1 * v_l_id_150851))]); \n        }\n        /* end map_seq */\n        int v_tmp_150919 = -2147483648; \n        v__150869 = v_tmp_150919; \n        /* reduce_seq */\n        for (int v_i_150853 = 0; v_i_150853 < v_MWidthC_1; v_i_150853 = (1 + v_i_150853)) {\n          v__150869 = int_max(v__150869, v__150868[(v_i_150853 + (64 * v_MWidthC_1 * v_w_id_150850) + (v_MWidthC_1 * v_l_id_150851))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_150854 = 0; \n          v__150874[(v_l_id_150851 + (64 * v_w_id_150850))] = doubleMinMax(v__150869, v__150859, v__150858[(v_l_id_150851 + (64 * v_w_id_150850))], v__150860); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_150850 = atomic_inc(v_work_idx_12308); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__150855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__150856",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__150857",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__150858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__150859",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__150860",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__150868",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__150862",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__150874",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}