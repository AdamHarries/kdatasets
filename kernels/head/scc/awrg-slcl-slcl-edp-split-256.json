{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__159993, const global int* restrict v__159994, const global int* restrict v__159995, const global int* restrict v__159996, int v__159997, int v__159998, global int* v__160018, global int* v__160000, local int* v__160013, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__160002; \n  int v__160004; \n  int v__136518; \n  /* Private Memory */\n  int v__160006_0;\n  \n  int v__160008_0;\n  \n  int v__160012_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13134 = v__160000; \n    local int v_w_id_159986; \n    if (get_local_id(0) == 0) {\n      v_w_id_159986 = atomic_inc(v_work_idx_13134); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_159986 < v_MHeight_2)){\n      for (int v_l_id_159987 = get_local_id(0); v_l_id_159987 < v_MWidthC_1; v_l_id_159987 = (v_l_id_159987 + get_local_size(0))) {\n        int v_tmp_160084 = -2147483648; \n        v__160002 = v_tmp_160084; \n        /* reduce_while_seq */\n        for (int v_i_159988 = 0; v_i_159988 < 256; v_i_159988 = (1 + v_i_159988)) {\n          v__160012_0 = check(v__160002, v__159993[(v_l_id_159987 + (256 * v_MWidthC_1 * v_w_id_159986) + (v_MWidthC_1 * v_i_159988))]); \n          if (v__160012_0) {\n          } else {\n            break;\n          }\n          int v_tmp_160085 = -2147483648; \n          v__160004 = v_tmp_160085; \n          int v_index_160086 = v__159993[(v_l_id_159987 + (256 * v_MWidthC_1 * v_w_id_159986) + (v_MWidthC_1 * v_i_159988))]; \n          if (v_index_160086 < 0) {\n            v__160006_0 = v__160004; \n          } else {\n            if (v_index_160086 >= v_VLength_3) {\n              v__160006_0 = v__160004; \n            } else {\n              v__160006_0 = v__159995[v_index_160086]; \n            }\n          }\n          v__160008_0 = int_min(v__160006_0, v__159994[(v_l_id_159987 + (256 * v_MWidthC_1 * v_w_id_159986) + (v_MWidthC_1 * v_i_159988))]); \n          v__160002 = int_max(v__160008_0, v__160002); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159989 = 0; \n          v__160013[v_l_id_159987] = id(v__160002); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_159990 = get_local_id(0); \n        int v_tmp_160089 = -2147483648; \n        v__136518 = v_tmp_160089; \n        /* reduce_seq */\n        for (int v_i_159991 = 0; v_i_159991 < v_MWidthC_1; v_i_159991 = (1 + v_i_159991)) {\n          v__136518 = int_max(v__136518, v__160013[(v_i_159991 + (v_MWidthC_1 * v_l_id_159990))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159992 = 0; \n          v__160018[v_w_id_159986] = doubleMinMax(v__136518, v__159997, v__159996[v_w_id_159986], v__159998); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_159986 = atomic_inc(v_work_idx_13134); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__159993",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159994",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159995",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__159996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159997",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__159998",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__160000",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__160018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__160013",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}