{
  "name" : "awrg-slcl-sdp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__142621, const global int* restrict v__142622, const global int* restrict v__142623, const global int* restrict v__142624, int v__142625, int v__142626, global int* v__142641, global int* v__142640, global int* v__142628, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__142629; \n  int v__142632; \n  /* Private Memory */\n  int v__142634_0;\n  \n  int v__142636_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11558 = v__142628; \n    local int v_w_id_142616; \n    if (get_local_id(0) == 0) {\n      v_w_id_142616 = atomic_inc(v_work_idx_11558); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_142616 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_142617 = get_local_id(0); v_l_id_142617 < 16; v_l_id_142617 = (v_l_id_142617 + get_local_size(0))) {\n        int v_tmp_142677 = -2147483648; \n        v__142629 = v_tmp_142677; \n        /* reduce_seq */\n        int v_stop_142678 = min(v__142621[(1 + (v__142621[(v_l_id_142617 + (16 * v_w_id_142616))] / 4))], v__142622[(1 + (v__142622[(v_l_id_142617 + (16 * v_w_id_142616))] / 4))]); \n        for (int v_i_142618 = 0; v_i_142618 < v_stop_142678; v_i_142618 = (1 + v_i_142618)) {\n          int v_tmp_142683 = -2147483648; \n          v__142632 = v_tmp_142683; \n          int v_index_142685 = v__142621[(2 + v_i_142618 + (v__142621[(v_l_id_142617 + (16 * v_w_id_142616))] / 4))]; \n          if (v_index_142685 < 0) {\n            v__142634_0 = v__142632; \n          } else {\n            if (v_index_142685 >= v_MWidthC_1) {\n              v__142634_0 = v__142632; \n            } else {\n              v__142634_0 = v__142623[v_index_142685]; \n            }\n          }\n          v__142636_0 = int_min(v__142622[(2 + v_i_142618 + (v__142622[(v_l_id_142617 + (16 * v_w_id_142616))] / 4))], v__142634_0); \n          v__142629 = int_max(v__142629, v__142636_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142619 = 0; \n          v__142640[(v_l_id_142617 + (16 * v_w_id_142616))] = doubleMinMax(v__142629, v__142625, v__142624[(v_l_id_142617 + (16 * v_w_id_142616))], v__142626); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142620 = 0; \n          v__142641[(v_l_id_142617 + (16 * v_w_id_142616))] = id(v__142640[(v_l_id_142617 + (16 * v_w_id_142616))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_142616 = atomic_inc(v_work_idx_11558); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__142621",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__142622",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__142623",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__142624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__142625",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__142626",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__142640",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__142628",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__142641",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}