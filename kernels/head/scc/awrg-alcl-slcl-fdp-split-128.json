{
  "name" : "awrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__156715, const global int* restrict v__156716, const global int* restrict v__156717, const global int* restrict v__156718, int v__156719, int v__156720, global int* v__156738, global int* v__156722, local int* v__156733, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__156724; \n  int v__156726; \n  int v__136518; \n  /* Private Memory */\n  int v__156728_0;\n  \n  int v__156730_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12845 = v__156722; \n    local int v_w_id_156708; \n    if (get_local_id(0) == 0) {\n      v_w_id_156708 = atomic_inc(v_work_idx_12845); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_156708 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12843; \n        v_work_idx_12843 = 0; \n        int v_l_id_156709 = atomic_inc(&(v_work_idx_12843)); \n        while((v_l_id_156709 < v_MWidthC_1)){\n          int v_tmp_156793 = -2147483648; \n          v__156724 = v_tmp_156793; \n          /* reduce_seq */\n          for (int v_i_156710 = 0; v_i_156710 < 128; v_i_156710 = (1 + v_i_156710)) {\n            int v_tmp_156794 = -2147483648; \n            v__156726 = v_tmp_156794; \n            int v_index_156795 = v__156715[(v_l_id_156709 + (128 * v_MWidthC_1 * v_w_id_156708) + (v_MWidthC_1 * v_i_156710))]; \n            if (v_index_156795 < 0) {\n              v__156728_0 = v__156726; \n            } else {\n              if (v_index_156795 >= v_VLength_3) {\n                v__156728_0 = v__156726; \n              } else {\n                v__156728_0 = v__156717[v_index_156795]; \n              }\n            }\n            v__156730_0 = int_min(v__156728_0, v__156716[(v_l_id_156709 + (128 * v_MWidthC_1 * v_w_id_156708) + (v_MWidthC_1 * v_i_156710))]); \n            v__156724 = int_max(v__156730_0, v__156724); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_156711 = 0; \n            v__156733[v_l_id_156709] = id(v__156724); \n          }\n          /* end map_seq */\n          v_l_id_156709 = atomic_inc(&(v_work_idx_12843)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_156712 = get_local_id(0); \n        int v_tmp_156798 = -2147483648; \n        v__136518 = v_tmp_156798; \n        /* reduce_seq */\n        for (int v_i_156713 = 0; v_i_156713 < v_MWidthC_1; v_i_156713 = (1 + v_i_156713)) {\n          v__136518 = int_max(v__136518, v__156733[(v_i_156713 + (v_MWidthC_1 * v_l_id_156712))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_156714 = 0; \n          v__156738[v_w_id_156708] = doubleMinMax(v__136518, v__156719, v__156718[v_w_id_156708], v__156720); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_156708 = atomic_inc(v_work_idx_12845); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__156715",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__156716",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__156717",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__156718",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__156719",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__156720",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__156722",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__156738",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__156733",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}