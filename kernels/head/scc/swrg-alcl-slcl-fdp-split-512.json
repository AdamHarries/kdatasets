{
  "name" : "swrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__163064, const global int* restrict v__163065, const global int* restrict v__163066, const global int* restrict v__163067, int v__163068, int v__163069, global int* v__163086, local int* v__163081, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__163072; \n  int v__163074; \n  int v__136518; \n  /* Private Memory */\n  int v__163076_0;\n  \n  int v__163078_0;\n  \n  for (int v_wg_id_163057 = get_group_id(0); v_wg_id_163057 < v_MHeight_2; v_wg_id_163057 = (v_wg_id_163057 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_13412; \n      v_work_idx_13412 = 0; \n      int v_l_id_163058 = atomic_inc(&(v_work_idx_13412)); \n      while((v_l_id_163058 < v_MWidthC_1)){\n        int v_tmp_163143 = -2147483648; \n        v__163072 = v_tmp_163143; \n        /* reduce_seq */\n        for (int v_i_163059 = 0; v_i_163059 < 512; v_i_163059 = (1 + v_i_163059)) {\n          int v_tmp_163144 = -2147483648; \n          v__163074 = v_tmp_163144; \n          int v_index_163145 = v__163064[(v_l_id_163058 + (512 * v_MWidthC_1 * v_wg_id_163057) + (v_MWidthC_1 * v_i_163059))]; \n          if (v_index_163145 < 0) {\n            v__163076_0 = v__163074; \n          } else {\n            if (v_index_163145 >= v_VLength_3) {\n              v__163076_0 = v__163074; \n            } else {\n              v__163076_0 = v__163066[v_index_163145]; \n            }\n          }\n          v__163078_0 = int_min(v__163076_0, v__163065[(v_l_id_163058 + (512 * v_MWidthC_1 * v_wg_id_163057) + (v_MWidthC_1 * v_i_163059))]); \n          v__163072 = int_max(v__163078_0, v__163072); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_163060 = 0; \n          v__163081[v_l_id_163058] = id(v__163072); \n        }\n        /* end map_seq */\n        v_l_id_163058 = atomic_inc(&(v_work_idx_13412)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_163061 = get_local_id(0); \n      int v_tmp_163148 = -2147483648; \n      v__136518 = v_tmp_163148; \n      /* reduce_seq */\n      for (int v_i_163062 = 0; v_i_163062 < v_MWidthC_1; v_i_163062 = (1 + v_i_163062)) {\n        v__136518 = int_max(v__136518, v__163081[(v_i_163062 + (v_MWidthC_1 * v_l_id_163061))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_163063 = 0; \n        v__163086[v_wg_id_163057] = doubleMinMax(v__136518, v__163068, v__163067[v_wg_id_163057], v__163069); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__163064",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__163065",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__163066",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__163067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__163068",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__163069",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__163086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__163081",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}