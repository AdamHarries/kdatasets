{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__160481, const global int* restrict v__160482, const global int* restrict v__160483, const global int* restrict v__160484, int v__160485, int v__160486, global int* v__160500, global int* v__160488, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__160490; \n  int v__160492; \n  /* Private Memory */\n  int v__160494_0;\n  \n  int v__160496_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13180 = v__160488; \n    local int v_w_id_160477; \n    if (get_local_id(0) == 0) {\n      v_w_id_160477 = atomic_inc(v_work_idx_13180); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_160477 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_13178; \n        v_work_idx_13178 = 0; \n        int v_l_id_160478 = atomic_inc(&(v_work_idx_13178)); \n        while((v_l_id_160478 < 256)){\n          int v_tmp_160537 = -2147483648; \n          v__160490 = v_tmp_160537; \n          /* reduce_seq */\n          for (int v_i_160479 = 0; v_i_160479 < v_MWidthC_1; v_i_160479 = (1 + v_i_160479)) {\n            int v_tmp_160538 = -2147483648; \n            v__160492 = v_tmp_160538; \n            int v_index_160539 = v__160481[(v_i_160479 + (256 * v_MWidthC_1 * v_w_id_160477) + (v_MWidthC_1 * v_l_id_160478))]; \n            if (v_index_160539 < 0) {\n              v__160494_0 = v__160492; \n            } else {\n              if (v_index_160539 >= v_VLength_3) {\n                v__160494_0 = v__160492; \n              } else {\n                v__160494_0 = v__160483[v_index_160539]; \n              }\n            }\n            v__160496_0 = int_min(v__160494_0, v__160482[(v_i_160479 + (256 * v_MWidthC_1 * v_w_id_160477) + (v_MWidthC_1 * v_l_id_160478))]); \n            v__160490 = int_max(v__160496_0, v__160490); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_160480 = 0; \n            v__160500[(v_l_id_160478 + (256 * v_w_id_160477))] = doubleMinMax(v__160490, v__160485, v__160484[(v_l_id_160478 + (256 * v_w_id_160477))], v__160486); \n          }\n          /* end map_seq */\n          v_l_id_160478 = atomic_inc(&(v_work_idx_13178)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_160477 = atomic_inc(v_work_idx_13180); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__160481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160483",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__160484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__160485",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__160486",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__160488",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__160500",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}