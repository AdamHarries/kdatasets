{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__143277, const global int* restrict v__143278, const global int* restrict v__143279, const global int* restrict v__143280, int v__143281, int v__143282, global int* v__143300, global int* v__143284, local int* v__143295, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__143286; \n  int v__143288; \n  int v__136518; \n  /* Private Memory */\n  int v__143290_0;\n  \n  int v__143292_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11619 = v__143284; \n    local int v_w_id_143270; \n    if (get_local_id(0) == 0) {\n      v_w_id_143270 = atomic_inc(v_work_idx_11619); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_143270 < v_MHeight_2)){\n      for (int v_l_id_143271 = get_local_id(0); v_l_id_143271 < v_MWidthC_1; v_l_id_143271 = (v_l_id_143271 + get_local_size(0))) {\n        int v_tmp_143359 = -2147483648; \n        v__143286 = v_tmp_143359; \n        /* reduce_seq */\n        for (int v_i_143272 = 0; v_i_143272 < 16; v_i_143272 = (1 + v_i_143272)) {\n          int v_tmp_143360 = -2147483648; \n          v__143288 = v_tmp_143360; \n          int v_index_143361 = v__143277[(v_l_id_143271 + (16 * v_MWidthC_1 * v_w_id_143270) + (v_MWidthC_1 * v_i_143272))]; \n          if (v_index_143361 < 0) {\n            v__143290_0 = v__143288; \n          } else {\n            if (v_index_143361 >= v_VLength_3) {\n              v__143290_0 = v__143288; \n            } else {\n              v__143290_0 = v__143279[v_index_143361]; \n            }\n          }\n          v__143292_0 = int_min(v__143290_0, v__143278[(v_l_id_143271 + (16 * v_MWidthC_1 * v_w_id_143270) + (v_MWidthC_1 * v_i_143272))]); \n          v__143286 = int_max(v__143292_0, v__143286); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_143273 = 0; \n          v__143295[v_l_id_143271] = id(v__143286); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_11613; \n        v_work_idx_11613 = 0; \n        int v_l_id_143274 = atomic_inc(&(v_work_idx_11613)); \n        while((v_l_id_143274 < 1)){\n          int v_tmp_143364 = -2147483648; \n          v__136518 = v_tmp_143364; \n          /* reduce_seq */\n          for (int v_i_143275 = 0; v_i_143275 < v_MWidthC_1; v_i_143275 = (1 + v_i_143275)) {\n            v__136518 = int_max(v__136518, v__143295[(v_i_143275 + (v_MWidthC_1 * v_l_id_143274))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_143276 = 0; \n            v__143300[v_w_id_143270] = doubleMinMax(v__136518, v__143281, v__143280[v_w_id_143270], v__143282); \n          }\n          /* end map_seq */\n          v_l_id_143274 = atomic_inc(&(v_work_idx_11613)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_143270 = atomic_inc(v_work_idx_11619); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__143277",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143278",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143279",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__143280",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__143281",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__143282",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__143284",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__143300",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__143295",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}