{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__142855, const global int* restrict v__142856, const global int* restrict v__142857, const global int* restrict v__142858, int v__142859, int v__142860, global int* v__142878, global int* v__142868, global int* v__142862, local int* v__142873, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__142864; \n  int v__142869; \n  int v__136518; \n  /* Private Memory */\n  int v__142866_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11580 = v__142862; \n    local int v_w_id_142847; \n    if (get_local_id(0) == 0) {\n      v_w_id_142847 = atomic_inc(v_work_idx_11580); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_142847 < v_MHeight_2)){\n      for (int v_l_id_142848 = get_local_id(0); v_l_id_142848 < v_MWidthC_1; v_l_id_142848 = (v_l_id_142848 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_142849 = 0; v_i_142849 < 16; v_i_142849 = (1 + v_i_142849)) {\n          int v_tmp_142941 = -2147483648; \n          v__142864 = v_tmp_142941; \n          int v_index_142942 = v__142855[(v_l_id_142848 + (16 * v_MWidthC_1 * v_w_id_142847) + (v_MWidthC_1 * v_i_142849))]; \n          if (v_index_142942 < 0) {\n            v__142866_0 = v__142864; \n          } else {\n            if (v_index_142942 >= v_VLength_3) {\n              v__142866_0 = v__142864; \n            } else {\n              v__142866_0 = v__142857[v_index_142942]; \n            }\n          }\n          v__142868[(15 + (16 * v_MWidthC_1 * v_w_id_142847) + (-1 * v_i_142849) + (16 * v_l_id_142848))] = int_min(v__142866_0, v__142856[(v_l_id_142848 + (16 * v_MWidthC_1 * v_w_id_142847) + (v_MWidthC_1 * v_i_142849))]); \n        }\n        /* end map_seq */\n        int v_tmp_142943 = -2147483648; \n        v__142869 = v_tmp_142943; \n        /* reduce_seq */\n        for (int v_i_142850 = 0; v_i_142850 < 16; v_i_142850 = (1 + v_i_142850)) {\n          v__142869 = int_max(v__142869, v__142868[(v_i_142850 + (16 * v_MWidthC_1 * v_w_id_142847) + (16 * v_l_id_142848))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142851 = 0; \n          v__142873[v_l_id_142848] = id(v__142869); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_142852 = get_local_id(0); \n        int v_tmp_142946 = -2147483648; \n        v__136518 = v_tmp_142946; \n        /* reduce_seq */\n        for (int v_i_142853 = 0; v_i_142853 < v_MWidthC_1; v_i_142853 = (1 + v_i_142853)) {\n          v__136518 = int_max(v__136518, v__142873[(v_i_142853 + (v_MWidthC_1 * v_l_id_142852))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_142854 = 0; \n          v__142878[v_w_id_142847] = doubleMinMax(v__136518, v__142859, v__142858[v_w_id_142847], v__142860); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_142847 = atomic_inc(v_work_idx_11580); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__142855",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__142856",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__142857",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__142858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__142859",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__142860",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__142868",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__142862",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__142878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__142873",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}