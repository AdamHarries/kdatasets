{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__159319, const global int* restrict v__159320, const global int* restrict v__159321, const global int* restrict v__159322, int v__159323, int v__159324, global int* v__159338, global int* v__159332, global int* v__159326, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__159328; \n  int v__159333; \n  /* Private Memory */\n  int v__159330_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13076 = v__159326; \n    local int v_w_id_159314; \n    if (get_local_id(0) == 0) {\n      v_w_id_159314 = atomic_inc(v_work_idx_13076); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_159314 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_159315 = get_local_id(0); v_l_id_159315 < 256; v_l_id_159315 = (v_l_id_159315 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_159316 = 0; v_i_159316 < v_MWidthC_1; v_i_159316 = (1 + v_i_159316)) {\n          int v_tmp_159381 = -2147483648; \n          v__159328 = v_tmp_159381; \n          int v_index_159382 = v__159319[(v_i_159316 + (256 * v_MWidthC_1 * v_w_id_159314) + (v_MWidthC_1 * v_l_id_159315))]; \n          if (v_index_159382 < 0) {\n            v__159330_0 = v__159328; \n          } else {\n            if (v_index_159382 >= v_VLength_3) {\n              v__159330_0 = v__159328; \n            } else {\n              v__159330_0 = v__159321[v_index_159382]; \n            }\n          }\n          v__159332[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_159314) + (-1 * v_i_159316) + (v_MWidthC_1 * v_l_id_159315))] = int_min(v__159330_0, v__159320[(v_i_159316 + (256 * v_MWidthC_1 * v_w_id_159314) + (v_MWidthC_1 * v_l_id_159315))]); \n        }\n        /* end map_seq */\n        int v_tmp_159383 = -2147483648; \n        v__159333 = v_tmp_159383; \n        /* reduce_seq */\n        for (int v_i_159317 = 0; v_i_159317 < v_MWidthC_1; v_i_159317 = (1 + v_i_159317)) {\n          v__159333 = int_max(v__159333, v__159332[(v_i_159317 + (256 * v_MWidthC_1 * v_w_id_159314) + (v_MWidthC_1 * v_l_id_159315))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_159318 = 0; \n          v__159338[(v_l_id_159315 + (256 * v_w_id_159314))] = doubleMinMax(v__159333, v__159323, v__159322[(v_l_id_159315 + (256 * v_w_id_159314))], v__159324); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_159314 = atomic_inc(v_work_idx_13076); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__159319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159320",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159321",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__159322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__159323",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__159324",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__159332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__159326",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__159338",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}