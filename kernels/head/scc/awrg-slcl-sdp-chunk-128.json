{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__155087, const global int* restrict v__155088, const global int* restrict v__155089, const global int* restrict v__155090, int v__155091, int v__155092, global int* v__155106, global int* v__155100, global int* v__155094, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__155096; \n  int v__155101; \n  /* Private Memory */\n  int v__155098_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12692 = v__155094; \n    local int v_w_id_155082; \n    if (get_local_id(0) == 0) {\n      v_w_id_155082 = atomic_inc(v_work_idx_12692); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_155082 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_155083 = get_local_id(0); v_l_id_155083 < 128; v_l_id_155083 = (v_l_id_155083 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_155084 = 0; v_i_155084 < v_MWidthC_1; v_i_155084 = (1 + v_i_155084)) {\n          int v_tmp_155149 = -2147483648; \n          v__155096 = v_tmp_155149; \n          int v_index_155150 = v__155087[(v_i_155084 + (128 * v_MWidthC_1 * v_w_id_155082) + (v_MWidthC_1 * v_l_id_155083))]; \n          if (v_index_155150 < 0) {\n            v__155098_0 = v__155096; \n          } else {\n            if (v_index_155150 >= v_VLength_3) {\n              v__155098_0 = v__155096; \n            } else {\n              v__155098_0 = v__155089[v_index_155150]; \n            }\n          }\n          v__155100[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_155082) + (-1 * v_i_155084) + (v_MWidthC_1 * v_l_id_155083))] = int_min(v__155098_0, v__155088[(v_i_155084 + (128 * v_MWidthC_1 * v_w_id_155082) + (v_MWidthC_1 * v_l_id_155083))]); \n        }\n        /* end map_seq */\n        int v_tmp_155151 = -2147483648; \n        v__155101 = v_tmp_155151; \n        /* reduce_seq */\n        for (int v_i_155085 = 0; v_i_155085 < v_MWidthC_1; v_i_155085 = (1 + v_i_155085)) {\n          v__155101 = int_max(v__155101, v__155100[(v_i_155085 + (128 * v_MWidthC_1 * v_w_id_155082) + (v_MWidthC_1 * v_l_id_155083))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_155086 = 0; \n          v__155106[(v_l_id_155083 + (128 * v_w_id_155082))] = doubleMinMax(v__155101, v__155091, v__155090[(v_l_id_155083 + (128 * v_w_id_155082))], v__155092); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_155082 = atomic_inc(v_work_idx_12692); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__155087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__155088",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__155089",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__155090",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__155091",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__155092",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__155100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__155094",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__155106",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}