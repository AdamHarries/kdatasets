{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__154202, const global int* restrict v__154203, const global int* restrict v__154204, const global int* restrict v__154205, int v__154206, int v__154207, global int* v__154222, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__154209; \n  int v__154212; \n  /* Private Memory */\n  int v__154214_0;\n  \n  int v__154216_0;\n  \n  int v__154220_0;\n  \n  for (int v_wg_id_154198 = get_group_id(0); v_wg_id_154198 < ((v_MHeight_2)/(128)); v_wg_id_154198 = (v_wg_id_154198 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_12607; \n      v_work_idx_12607 = 0; \n      int v_l_id_154199 = atomic_inc(&(v_work_idx_12607)); \n      while((v_l_id_154199 < 128)){\n        int v_tmp_154266 = -2147483648; \n        v__154209 = v_tmp_154266; \n        /* reduce_while_seq */\n        for (int v_i_154200 = 0; v_i_154200 < v_MWidthC_1; v_i_154200 = (1 + v_i_154200)) {\n          v__154220_0 = check(v__154209, v__154202[(v_i_154200 + (128 * v_MWidthC_1 * v_wg_id_154198) + (v_MWidthC_1 * v_l_id_154199))]); \n          if (v__154220_0) {\n          } else {\n            break;\n          }\n          int v_tmp_154267 = -2147483648; \n          v__154212 = v_tmp_154267; \n          int v_index_154268 = v__154202[(v_i_154200 + (128 * v_MWidthC_1 * v_wg_id_154198) + (v_MWidthC_1 * v_l_id_154199))]; \n          if (v_index_154268 < 0) {\n            v__154214_0 = v__154212; \n          } else {\n            if (v_index_154268 >= v_VLength_3) {\n              v__154214_0 = v__154212; \n            } else {\n              v__154214_0 = v__154204[v_index_154268]; \n            }\n          }\n          v__154216_0 = int_min(v__154214_0, v__154203[(v_i_154200 + (128 * v_MWidthC_1 * v_wg_id_154198) + (v_MWidthC_1 * v_l_id_154199))]); \n          v__154209 = int_max(v__154216_0, v__154209); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_154201 = 0; \n          v__154222[(v_l_id_154199 + (128 * v_wg_id_154198))] = doubleMinMax(v__154209, v__154206, v__154205[(v_l_id_154199 + (128 * v_wg_id_154198))], v__154207); \n        }\n        /* end map_seq */\n        v_l_id_154199 = atomic_inc(&(v_work_idx_12607)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__154202",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__154203",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__154204",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__154205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__154206",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__154207",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__154222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}