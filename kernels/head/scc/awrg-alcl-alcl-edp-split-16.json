{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__144405, const global int* restrict v__144406, const global int* restrict v__144407, const global int* restrict v__144408, int v__144409, int v__144410, global int* v__144430, global int* v__144412, local int* v__144425, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__144414; \n  int v__144416; \n  int v__136518; \n  /* Private Memory */\n  int v__144418_0;\n  \n  int v__144420_0;\n  \n  int v__144424_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11737 = v__144412; \n    local int v_w_id_144398; \n    if (get_local_id(0) == 0) {\n      v_w_id_144398 = atomic_inc(v_work_idx_11737); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_144398 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11735; \n        v_work_idx_11735 = 0; \n        int v_l_id_144399 = atomic_inc(&(v_work_idx_11735)); \n        while((v_l_id_144399 < v_MWidthC_1)){\n          int v_tmp_144484 = -2147483648; \n          v__144414 = v_tmp_144484; \n          /* reduce_while_seq */\n          for (int v_i_144400 = 0; v_i_144400 < 16; v_i_144400 = (1 + v_i_144400)) {\n            v__144424_0 = check(v__144414, v__144405[(v_l_id_144399 + (16 * v_MWidthC_1 * v_w_id_144398) + (v_MWidthC_1 * v_i_144400))]); \n            if (v__144424_0) {\n            } else {\n              break;\n            }\n            int v_tmp_144485 = -2147483648; \n            v__144416 = v_tmp_144485; \n            int v_index_144486 = v__144405[(v_l_id_144399 + (16 * v_MWidthC_1 * v_w_id_144398) + (v_MWidthC_1 * v_i_144400))]; \n            if (v_index_144486 < 0) {\n              v__144418_0 = v__144416; \n            } else {\n              if (v_index_144486 >= v_VLength_3) {\n                v__144418_0 = v__144416; \n              } else {\n                v__144418_0 = v__144407[v_index_144486]; \n              }\n            }\n            v__144420_0 = int_min(v__144418_0, v__144406[(v_l_id_144399 + (16 * v_MWidthC_1 * v_w_id_144398) + (v_MWidthC_1 * v_i_144400))]); \n            v__144414 = int_max(v__144420_0, v__144414); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_144401 = 0; \n            v__144425[v_l_id_144399] = id(v__144414); \n          }\n          /* end map_seq */\n          v_l_id_144399 = atomic_inc(&(v_work_idx_11735)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_11730; \n        v_work_idx_11730 = 0; \n        int v_l_id_144402 = atomic_inc(&(v_work_idx_11730)); \n        while((v_l_id_144402 < 1)){\n          int v_tmp_144489 = -2147483648; \n          v__136518 = v_tmp_144489; \n          /* reduce_seq */\n          for (int v_i_144403 = 0; v_i_144403 < v_MWidthC_1; v_i_144403 = (1 + v_i_144403)) {\n            v__136518 = int_max(v__136518, v__144425[(v_i_144403 + (v_MWidthC_1 * v_l_id_144402))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_144404 = 0; \n            v__144430[v_w_id_144398] = doubleMinMax(v__136518, v__144409, v__144408[v_w_id_144398], v__144410); \n          }\n          /* end map_seq */\n          v_l_id_144402 = atomic_inc(&(v_work_idx_11730)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_144398 = atomic_inc(v_work_idx_11737); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__144405",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__144406",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__144407",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__144408",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__144409",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__144410",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__144412",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__144430",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__144425",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}