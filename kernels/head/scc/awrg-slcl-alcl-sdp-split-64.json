{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__151640, const global int* restrict v__151641, const global int* restrict v__151642, const global int* restrict v__151643, int v__151644, int v__151645, global int* v__151663, global int* v__151653, global int* v__151647, local int* v__151658, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__151649; \n  int v__151654; \n  int v__136518; \n  /* Private Memory */\n  int v__151651_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12377 = v__151647; \n    local int v_w_id_151632; \n    if (get_local_id(0) == 0) {\n      v_w_id_151632 = atomic_inc(v_work_idx_12377); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_151632 < v_MHeight_2)){\n      for (int v_l_id_151633 = get_local_id(0); v_l_id_151633 < v_MWidthC_1; v_l_id_151633 = (v_l_id_151633 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_151634 = 0; v_i_151634 < 64; v_i_151634 = (1 + v_i_151634)) {\n          int v_tmp_151722 = -2147483648; \n          v__151649 = v_tmp_151722; \n          int v_index_151723 = v__151640[(v_l_id_151633 + (64 * v_MWidthC_1 * v_w_id_151632) + (v_MWidthC_1 * v_i_151634))]; \n          if (v_index_151723 < 0) {\n            v__151651_0 = v__151649; \n          } else {\n            if (v_index_151723 >= v_VLength_3) {\n              v__151651_0 = v__151649; \n            } else {\n              v__151651_0 = v__151642[v_index_151723]; \n            }\n          }\n          v__151653[(63 + (64 * v_MWidthC_1 * v_w_id_151632) + (-1 * v_i_151634) + (64 * v_l_id_151633))] = int_min(v__151651_0, v__151641[(v_l_id_151633 + (64 * v_MWidthC_1 * v_w_id_151632) + (v_MWidthC_1 * v_i_151634))]); \n        }\n        /* end map_seq */\n        int v_tmp_151724 = -2147483648; \n        v__151654 = v_tmp_151724; \n        /* reduce_seq */\n        for (int v_i_151635 = 0; v_i_151635 < 64; v_i_151635 = (1 + v_i_151635)) {\n          v__151654 = int_max(v__151654, v__151653[(v_i_151635 + (64 * v_MWidthC_1 * v_w_id_151632) + (64 * v_l_id_151633))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151636 = 0; \n          v__151658[v_l_id_151633] = id(v__151654); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_12370; \n        v_work_idx_12370 = 0; \n        int v_l_id_151637 = atomic_inc(&(v_work_idx_12370)); \n        while((v_l_id_151637 < 1)){\n          int v_tmp_151727 = -2147483648; \n          v__136518 = v_tmp_151727; \n          /* reduce_seq */\n          for (int v_i_151638 = 0; v_i_151638 < v_MWidthC_1; v_i_151638 = (1 + v_i_151638)) {\n            v__136518 = int_max(v__136518, v__151658[(v_i_151638 + (v_MWidthC_1 * v_l_id_151637))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_151639 = 0; \n            v__151663[v_w_id_151632] = doubleMinMax(v__136518, v__151644, v__151643[v_w_id_151632], v__151645); \n          }\n          /* end map_seq */\n          v_l_id_151637 = atomic_inc(&(v_work_idx_12370)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_151632 = atomic_inc(v_work_idx_12377); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__151640",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151641",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151642",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__151643",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__151644",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__151645",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__151653",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151647",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__151663",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__151658",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}