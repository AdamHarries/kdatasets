{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__143482, const global int* restrict v__143483, const global int* restrict v__143484, const global int* restrict v__143485, int v__143486, int v__143487, global int* v__143501, global int* v__143495, global int* v__143489, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__143491; \n  int v__143496; \n  /* Private Memory */\n  int v__143493_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11637 = v__143489; \n    local int v_w_id_143477; \n    if (get_local_id(0) == 0) {\n      v_w_id_143477 = atomic_inc(v_work_idx_11637); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_143477 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11635; \n        v_work_idx_11635 = 0; \n        int v_l_id_143478 = atomic_inc(&(v_work_idx_11635)); \n        while((v_l_id_143478 < 16)){\n          /* map_seq */\n          for (int v_i_143479 = 0; v_i_143479 < v_MWidthC_1; v_i_143479 = (1 + v_i_143479)) {\n            int v_tmp_143540 = -2147483648; \n            v__143491 = v_tmp_143540; \n            int v_index_143541 = v__143482[(v_i_143479 + (16 * v_MWidthC_1 * v_w_id_143477) + (v_MWidthC_1 * v_l_id_143478))]; \n            if (v_index_143541 < 0) {\n              v__143493_0 = v__143491; \n            } else {\n              if (v_index_143541 >= v_VLength_3) {\n                v__143493_0 = v__143491; \n              } else {\n                v__143493_0 = v__143484[v_index_143541]; \n              }\n            }\n            v__143495[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_143477) + (-1 * v_i_143479) + (v_MWidthC_1 * v_l_id_143478))] = int_min(v__143493_0, v__143483[(v_i_143479 + (16 * v_MWidthC_1 * v_w_id_143477) + (v_MWidthC_1 * v_l_id_143478))]); \n          }\n          /* end map_seq */\n          int v_tmp_143542 = -2147483648; \n          v__143496 = v_tmp_143542; \n          /* reduce_seq */\n          for (int v_i_143480 = 0; v_i_143480 < v_MWidthC_1; v_i_143480 = (1 + v_i_143480)) {\n            v__143496 = int_max(v__143496, v__143495[(v_i_143480 + (16 * v_MWidthC_1 * v_w_id_143477) + (v_MWidthC_1 * v_l_id_143478))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_143481 = 0; \n            v__143501[(v_l_id_143478 + (16 * v_w_id_143477))] = doubleMinMax(v__143496, v__143486, v__143485[(v_l_id_143478 + (16 * v_w_id_143477))], v__143487); \n          }\n          /* end map_seq */\n          v_l_id_143478 = atomic_inc(&(v_work_idx_11635)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_143477 = atomic_inc(v_work_idx_11637); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__143482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143483",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143484",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__143485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__143486",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__143487",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__143495",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143489",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__143501",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}