{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__143553, const global int* restrict v__143554, const global int* restrict v__143555, const global int* restrict v__143556, int v__143557, int v__143558, global int* v__143572, global int* v__143560, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__143562; \n  int v__143564; \n  /* Private Memory */\n  int v__143566_0;\n  \n  int v__143568_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11644 = v__143560; \n    local int v_w_id_143549; \n    if (get_local_id(0) == 0) {\n      v_w_id_143549 = atomic_inc(v_work_idx_11644); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_143549 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11642; \n        v_work_idx_11642 = 0; \n        int v_l_id_143550 = atomic_inc(&(v_work_idx_11642)); \n        while((v_l_id_143550 < 16)){\n          int v_tmp_143609 = -2147483648; \n          v__143562 = v_tmp_143609; \n          /* reduce_seq */\n          for (int v_i_143551 = 0; v_i_143551 < v_MWidthC_1; v_i_143551 = (1 + v_i_143551)) {\n            int v_tmp_143610 = -2147483648; \n            v__143564 = v_tmp_143610; \n            int v_index_143611 = v__143553[(v_i_143551 + (16 * v_MWidthC_1 * v_w_id_143549) + (v_MWidthC_1 * v_l_id_143550))]; \n            if (v_index_143611 < 0) {\n              v__143566_0 = v__143564; \n            } else {\n              if (v_index_143611 >= v_VLength_3) {\n                v__143566_0 = v__143564; \n              } else {\n                v__143566_0 = v__143555[v_index_143611]; \n              }\n            }\n            v__143568_0 = int_min(v__143566_0, v__143554[(v_i_143551 + (16 * v_MWidthC_1 * v_w_id_143549) + (v_MWidthC_1 * v_l_id_143550))]); \n            v__143562 = int_max(v__143568_0, v__143562); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_143552 = 0; \n            v__143572[(v_l_id_143550 + (16 * v_w_id_143549))] = doubleMinMax(v__143562, v__143557, v__143556[(v_l_id_143550 + (16 * v_w_id_143549))], v__143558); \n          }\n          /* end map_seq */\n          v_l_id_143550 = atomic_inc(&(v_work_idx_11642)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_143549 = atomic_inc(v_work_idx_11644); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__143553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__143555",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__143556",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__143557",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__143558",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__143560",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__143572",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}