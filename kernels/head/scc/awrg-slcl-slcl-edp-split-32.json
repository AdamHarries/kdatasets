{
  "name" : "awrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__147297, const global int* restrict v__147298, const global int* restrict v__147299, const global int* restrict v__147300, int v__147301, int v__147302, global int* v__147322, global int* v__147304, local int* v__147317, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__147306; \n  int v__147308; \n  int v__136518; \n  /* Private Memory */\n  int v__147310_0;\n  \n  int v__147312_0;\n  \n  int v__147316_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11982 = v__147304; \n    local int v_w_id_147290; \n    if (get_local_id(0) == 0) {\n      v_w_id_147290 = atomic_inc(v_work_idx_11982); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_147290 < v_MHeight_2)){\n      for (int v_l_id_147291 = get_local_id(0); v_l_id_147291 < v_MWidthC_1; v_l_id_147291 = (v_l_id_147291 + get_local_size(0))) {\n        int v_tmp_147388 = -2147483648; \n        v__147306 = v_tmp_147388; \n        /* reduce_while_seq */\n        for (int v_i_147292 = 0; v_i_147292 < 32; v_i_147292 = (1 + v_i_147292)) {\n          v__147316_0 = check(v__147306, v__147297[(v_l_id_147291 + (32 * v_MWidthC_1 * v_w_id_147290) + (v_MWidthC_1 * v_i_147292))]); \n          if (v__147316_0) {\n          } else {\n            break;\n          }\n          int v_tmp_147389 = -2147483648; \n          v__147308 = v_tmp_147389; \n          int v_index_147390 = v__147297[(v_l_id_147291 + (32 * v_MWidthC_1 * v_w_id_147290) + (v_MWidthC_1 * v_i_147292))]; \n          if (v_index_147390 < 0) {\n            v__147310_0 = v__147308; \n          } else {\n            if (v_index_147390 >= v_VLength_3) {\n              v__147310_0 = v__147308; \n            } else {\n              v__147310_0 = v__147299[v_index_147390]; \n            }\n          }\n          v__147312_0 = int_min(v__147310_0, v__147298[(v_l_id_147291 + (32 * v_MWidthC_1 * v_w_id_147290) + (v_MWidthC_1 * v_i_147292))]); \n          v__147306 = int_max(v__147312_0, v__147306); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_147293 = 0; \n          v__147317[v_l_id_147291] = id(v__147306); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_147294 = get_local_id(0); \n        int v_tmp_147393 = -2147483648; \n        v__136518 = v_tmp_147393; \n        /* reduce_seq */\n        for (int v_i_147295 = 0; v_i_147295 < v_MWidthC_1; v_i_147295 = (1 + v_i_147295)) {\n          v__136518 = int_max(v__136518, v__147317[(v_i_147295 + (v_MWidthC_1 * v_l_id_147294))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_147296 = 0; \n          v__147322[v_w_id_147290] = doubleMinMax(v__136518, v__147301, v__147300[v_w_id_147290], v__147302); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_147290 = atomic_inc(v_work_idx_11982); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__147297",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147298",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__147299",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__147300",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__147301",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__147302",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__147304",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__147322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__147317",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}