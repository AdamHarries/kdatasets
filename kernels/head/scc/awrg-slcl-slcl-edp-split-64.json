{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__151529, const global int* restrict v__151530, const global int* restrict v__151531, const global int* restrict v__151532, int v__151533, int v__151534, global int* v__151554, global int* v__151536, local int* v__151549, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__151538; \n  int v__151540; \n  int v__136518; \n  /* Private Memory */\n  int v__151542_0;\n  \n  int v__151544_0;\n  \n  int v__151548_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12366 = v__151536; \n    local int v_w_id_151522; \n    if (get_local_id(0) == 0) {\n      v_w_id_151522 = atomic_inc(v_work_idx_12366); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_151522 < v_MHeight_2)){\n      for (int v_l_id_151523 = get_local_id(0); v_l_id_151523 < v_MWidthC_1; v_l_id_151523 = (v_l_id_151523 + get_local_size(0))) {\n        int v_tmp_151620 = -2147483648; \n        v__151538 = v_tmp_151620; \n        /* reduce_while_seq */\n        for (int v_i_151524 = 0; v_i_151524 < 64; v_i_151524 = (1 + v_i_151524)) {\n          v__151548_0 = check(v__151538, v__151529[(v_l_id_151523 + (64 * v_MWidthC_1 * v_w_id_151522) + (v_MWidthC_1 * v_i_151524))]); \n          if (v__151548_0) {\n          } else {\n            break;\n          }\n          int v_tmp_151621 = -2147483648; \n          v__151540 = v_tmp_151621; \n          int v_index_151622 = v__151529[(v_l_id_151523 + (64 * v_MWidthC_1 * v_w_id_151522) + (v_MWidthC_1 * v_i_151524))]; \n          if (v_index_151622 < 0) {\n            v__151542_0 = v__151540; \n          } else {\n            if (v_index_151622 >= v_VLength_3) {\n              v__151542_0 = v__151540; \n            } else {\n              v__151542_0 = v__151531[v_index_151622]; \n            }\n          }\n          v__151544_0 = int_min(v__151542_0, v__151530[(v_l_id_151523 + (64 * v_MWidthC_1 * v_w_id_151522) + (v_MWidthC_1 * v_i_151524))]); \n          v__151538 = int_max(v__151544_0, v__151538); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151525 = 0; \n          v__151549[v_l_id_151523] = id(v__151538); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_151526 = get_local_id(0); \n        int v_tmp_151625 = -2147483648; \n        v__136518 = v_tmp_151625; \n        /* reduce_seq */\n        for (int v_i_151527 = 0; v_i_151527 < v_MWidthC_1; v_i_151527 = (1 + v_i_151527)) {\n          v__136518 = int_max(v__136518, v__151549[(v_i_151527 + (v_MWidthC_1 * v_l_id_151526))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_151528 = 0; \n          v__151554[v_w_id_151522] = doubleMinMax(v__136518, v__151533, v__151532[v_w_id_151522], v__151534); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_151522 = atomic_inc(v_work_idx_12366); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__151529",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151530",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__151531",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__151532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__151533",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__151534",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__151536",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__151554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__151549",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}