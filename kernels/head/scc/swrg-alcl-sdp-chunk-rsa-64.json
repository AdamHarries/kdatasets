{
  "name" : "swrg-alcl-sdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__150048, const global int* restrict v__150049, const global int* restrict v__150050, const global int* restrict v__150051, int v__150052, int v__150053, global int* v__150067, global int* v__150066, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__150055; \n  int v__150058; \n  /* Private Memory */\n  int v__150060_0;\n  \n  int v__150062_0;\n  \n  for (int v_wg_id_150043 = get_group_id(0); v_wg_id_150043 < ((v_MHeight_2)/(64)); v_wg_id_150043 = (v_wg_id_150043 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_12229; \n      v_work_idx_12229 = 0; \n      int v_l_id_150044 = atomic_inc(&(v_work_idx_12229)); \n      while((v_l_id_150044 < 64)){\n        int v_tmp_150100 = -2147483648; \n        v__150055 = v_tmp_150100; \n        /* reduce_seq */\n        int v_stop_150101 = min(v__150048[(1 + (v__150048[(v_l_id_150044 + (64 * v_wg_id_150043))] / 4))], v__150049[(1 + (v__150049[(v_l_id_150044 + (64 * v_wg_id_150043))] / 4))]); \n        for (int v_i_150045 = 0; v_i_150045 < v_stop_150101; v_i_150045 = (1 + v_i_150045)) {\n          int v_tmp_150106 = -2147483648; \n          v__150058 = v_tmp_150106; \n          int v_index_150108 = v__150048[(2 + v_i_150045 + (v__150048[(v_l_id_150044 + (64 * v_wg_id_150043))] / 4))]; \n          if (v_index_150108 < 0) {\n            v__150060_0 = v__150058; \n          } else {\n            if (v_index_150108 >= v_MWidthC_1) {\n              v__150060_0 = v__150058; \n            } else {\n              v__150060_0 = v__150050[v_index_150108]; \n            }\n          }\n          v__150062_0 = int_min(v__150049[(2 + v_i_150045 + (v__150049[(v_l_id_150044 + (64 * v_wg_id_150043))] / 4))], v__150060_0); \n          v__150055 = int_max(v__150055, v__150062_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_150046 = 0; \n          v__150066[(v_l_id_150044 + (64 * v_wg_id_150043))] = doubleMinMax(v__150055, v__150052, v__150051[(v_l_id_150044 + (64 * v_wg_id_150043))], v__150053); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_150047 = 0; \n          v__150067[(v_l_id_150044 + (64 * v_wg_id_150043))] = id(v__150066[(v_l_id_150044 + (64 * v_wg_id_150043))]); \n        }\n        /* end map_seq */\n        v_l_id_150044 = atomic_inc(&(v_work_idx_12229)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__150048",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__150049",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__150050",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__150051",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__150052",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__150053",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__150066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__150067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}