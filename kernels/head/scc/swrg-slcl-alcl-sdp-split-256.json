{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__157985, const global int* restrict v__157986, const global int* restrict v__157987, const global int* restrict v__157988, int v__157989, int v__157990, global int* v__158007, global int* v__157997, local int* v__158002, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__157993; \n  int v__157998; \n  int v__136518; \n  /* Private Memory */\n  int v__157995_0;\n  \n  for (int v_wg_id_157977 = get_group_id(0); v_wg_id_157977 < v_MHeight_2; v_wg_id_157977 = (v_wg_id_157977 + get_num_groups(0))) {\n    for (int v_l_id_157978 = get_local_id(0); v_l_id_157978 < v_MWidthC_1; v_l_id_157978 = (v_l_id_157978 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_157979 = 0; v_i_157979 < 256; v_i_157979 = (1 + v_i_157979)) {\n        int v_tmp_158068 = -2147483648; \n        v__157993 = v_tmp_158068; \n        int v_index_158069 = v__157985[(v_l_id_157978 + (256 * v_MWidthC_1 * v_wg_id_157977) + (v_MWidthC_1 * v_i_157979))]; \n        if (v_index_158069 < 0) {\n          v__157995_0 = v__157993; \n        } else {\n          if (v_index_158069 >= v_VLength_3) {\n            v__157995_0 = v__157993; \n          } else {\n            v__157995_0 = v__157987[v_index_158069]; \n          }\n        }\n        v__157997[(255 + (256 * v_MWidthC_1 * v_wg_id_157977) + (-1 * v_i_157979) + (256 * v_l_id_157978))] = int_min(v__157995_0, v__157986[(v_l_id_157978 + (256 * v_MWidthC_1 * v_wg_id_157977) + (v_MWidthC_1 * v_i_157979))]); \n      }\n      /* end map_seq */\n      int v_tmp_158070 = -2147483648; \n      v__157998 = v_tmp_158070; \n      /* reduce_seq */\n      for (int v_i_157980 = 0; v_i_157980 < 256; v_i_157980 = (1 + v_i_157980)) {\n        v__157998 = int_max(v__157998, v__157997[(v_i_157980 + (256 * v_MWidthC_1 * v_wg_id_157977) + (256 * v_l_id_157978))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_157981 = 0; \n        v__158002[v_l_id_157978] = id(v__157998); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_12949; \n      v_work_idx_12949 = 0; \n      int v_l_id_157982 = atomic_inc(&(v_work_idx_12949)); \n      while((v_l_id_157982 < 1)){\n        int v_tmp_158073 = -2147483648; \n        v__136518 = v_tmp_158073; \n        /* reduce_seq */\n        for (int v_i_157983 = 0; v_i_157983 < v_MWidthC_1; v_i_157983 = (1 + v_i_157983)) {\n          v__136518 = int_max(v__136518, v__158002[(v_i_157983 + (v_MWidthC_1 * v_l_id_157982))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_157984 = 0; \n          v__158007[v_wg_id_157977] = doubleMinMax(v__136518, v__157989, v__157988[v_wg_id_157977], v__157990); \n        }\n        /* end map_seq */\n        v_l_id_157982 = atomic_inc(&(v_work_idx_12949)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__157985",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__157986",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__157987",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__157988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__157989",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__157990",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__157997",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__158007",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__158002",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}