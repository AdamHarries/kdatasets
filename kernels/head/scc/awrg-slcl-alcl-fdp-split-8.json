{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__139045, const global int* restrict v__139046, const global int* restrict v__139047, const global int* restrict v__139048, int v__139049, int v__139050, global int* v__139068, global int* v__139052, local int* v__139063, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__139054; \n  int v__139056; \n  int v__136518; \n  /* Private Memory */\n  int v__139058_0;\n  \n  int v__139060_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11235 = v__139052; \n    local int v_w_id_139038; \n    if (get_local_id(0) == 0) {\n      v_w_id_139038 = atomic_inc(v_work_idx_11235); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_139038 < v_MHeight_2)){\n      for (int v_l_id_139039 = get_local_id(0); v_l_id_139039 < v_MWidthC_1; v_l_id_139039 = (v_l_id_139039 + get_local_size(0))) {\n        int v_tmp_139127 = -2147483648; \n        v__139054 = v_tmp_139127; \n        /* reduce_seq */\n        for (int v_i_139040 = 0; v_i_139040 < 8; v_i_139040 = (1 + v_i_139040)) {\n          int v_tmp_139128 = -2147483648; \n          v__139056 = v_tmp_139128; \n          int v_index_139129 = v__139045[(v_l_id_139039 + (8 * v_MWidthC_1 * v_w_id_139038) + (v_MWidthC_1 * v_i_139040))]; \n          if (v_index_139129 < 0) {\n            v__139058_0 = v__139056; \n          } else {\n            if (v_index_139129 >= v_VLength_3) {\n              v__139058_0 = v__139056; \n            } else {\n              v__139058_0 = v__139047[v_index_139129]; \n            }\n          }\n          v__139060_0 = int_min(v__139058_0, v__139046[(v_l_id_139039 + (8 * v_MWidthC_1 * v_w_id_139038) + (v_MWidthC_1 * v_i_139040))]); \n          v__139054 = int_max(v__139060_0, v__139054); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_139041 = 0; \n          v__139063[v_l_id_139039] = id(v__139054); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_11229; \n        v_work_idx_11229 = 0; \n        int v_l_id_139042 = atomic_inc(&(v_work_idx_11229)); \n        while((v_l_id_139042 < 1)){\n          int v_tmp_139132 = -2147483648; \n          v__136518 = v_tmp_139132; \n          /* reduce_seq */\n          for (int v_i_139043 = 0; v_i_139043 < v_MWidthC_1; v_i_139043 = (1 + v_i_139043)) {\n            v__136518 = int_max(v__136518, v__139063[(v_i_139043 + (v_MWidthC_1 * v_l_id_139042))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_139044 = 0; \n            v__139068[v_w_id_139038] = doubleMinMax(v__136518, v__139049, v__139048[v_w_id_139038], v__139050); \n          }\n          /* end map_seq */\n          v_l_id_139042 = atomic_inc(&(v_work_idx_11229)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_139038 = atomic_inc(v_work_idx_11235); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__139045",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__139046",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__139047",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__139048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__139049",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__139050",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__139052",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__139068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__139063",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}