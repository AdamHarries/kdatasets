{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__164120, const global int* restrict v__164121, const global int* restrict v__164122, const global int* restrict v__164123, int v__164124, int v__164125, global int* v__164143, global int* v__164127, local int* v__164138, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__164129; \n  int v__164131; \n  int v__136518; \n  /* Private Memory */\n  int v__164133_0;\n  \n  int v__164135_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13509 = v__164127; \n    local int v_w_id_164113; \n    if (get_local_id(0) == 0) {\n      v_w_id_164113 = atomic_inc(v_work_idx_13509); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_164113 < v_MHeight_2)){\n      for (int v_l_id_164114 = get_local_id(0); v_l_id_164114 < v_MWidthC_1; v_l_id_164114 = (v_l_id_164114 + get_local_size(0))) {\n        int v_tmp_164206 = -2147483648; \n        v__164129 = v_tmp_164206; \n        /* reduce_seq */\n        for (int v_i_164115 = 0; v_i_164115 < 512; v_i_164115 = (1 + v_i_164115)) {\n          int v_tmp_164207 = -2147483648; \n          v__164131 = v_tmp_164207; \n          int v_index_164208 = v__164120[(v_l_id_164114 + (512 * v_MWidthC_1 * v_w_id_164113) + (v_MWidthC_1 * v_i_164115))]; \n          if (v_index_164208 < 0) {\n            v__164133_0 = v__164131; \n          } else {\n            if (v_index_164208 >= v_VLength_3) {\n              v__164133_0 = v__164131; \n            } else {\n              v__164133_0 = v__164122[v_index_164208]; \n            }\n          }\n          v__164135_0 = int_min(v__164133_0, v__164121[(v_l_id_164114 + (512 * v_MWidthC_1 * v_w_id_164113) + (v_MWidthC_1 * v_i_164115))]); \n          v__164129 = int_max(v__164135_0, v__164129); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164116 = 0; \n          v__164138[v_l_id_164114] = id(v__164129); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_164117 = get_local_id(0); \n        int v_tmp_164211 = -2147483648; \n        v__136518 = v_tmp_164211; \n        /* reduce_seq */\n        for (int v_i_164118 = 0; v_i_164118 < v_MWidthC_1; v_i_164118 = (1 + v_i_164118)) {\n          v__136518 = int_max(v__136518, v__164138[(v_i_164118 + (v_MWidthC_1 * v_l_id_164117))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164119 = 0; \n          v__164143[v_w_id_164113] = doubleMinMax(v__136518, v__164124, v__164123[v_w_id_164113], v__164125); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_164113 = atomic_inc(v_work_idx_13509); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__164120",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164121",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164122",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__164123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__164124",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__164125",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__164127",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__164143",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__164138",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}