{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__160850, const global int* restrict v__160851, const global int* restrict v__160852, const global int* restrict v__160853, int v__160854, int v__160855, global int* v__160873, global int* v__160863, global int* v__160857, local int* v__160868, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__160859; \n  int v__160864; \n  int v__136518; \n  /* Private Memory */\n  int v__160861_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13219 = v__160857; \n    local int v_w_id_160842; \n    if (get_local_id(0) == 0) {\n      v_w_id_160842 = atomic_inc(v_work_idx_13219); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_160842 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_13217; \n        v_work_idx_13217 = 0; \n        int v_l_id_160843 = atomic_inc(&(v_work_idx_13217)); \n        while((v_l_id_160843 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_160844 = 0; v_i_160844 < 256; v_i_160844 = (1 + v_i_160844)) {\n            int v_tmp_160928 = -2147483648; \n            v__160859 = v_tmp_160928; \n            int v_index_160929 = v__160850[(v_l_id_160843 + (256 * v_MWidthC_1 * v_w_id_160842) + (v_MWidthC_1 * v_i_160844))]; \n            if (v_index_160929 < 0) {\n              v__160861_0 = v__160859; \n            } else {\n              if (v_index_160929 >= v_VLength_3) {\n                v__160861_0 = v__160859; \n              } else {\n                v__160861_0 = v__160852[v_index_160929]; \n              }\n            }\n            v__160863[(255 + (256 * v_MWidthC_1 * v_w_id_160842) + (-1 * v_i_160844) + (256 * v_l_id_160843))] = int_min(v__160861_0, v__160851[(v_l_id_160843 + (256 * v_MWidthC_1 * v_w_id_160842) + (v_MWidthC_1 * v_i_160844))]); \n          }\n          /* end map_seq */\n          int v_tmp_160930 = -2147483648; \n          v__160864 = v_tmp_160930; \n          /* reduce_seq */\n          for (int v_i_160845 = 0; v_i_160845 < 256; v_i_160845 = (1 + v_i_160845)) {\n            v__160864 = int_max(v__160864, v__160863[(v_i_160845 + (256 * v_MWidthC_1 * v_w_id_160842) + (256 * v_l_id_160843))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_160846 = 0; \n            v__160868[v_l_id_160843] = id(v__160864); \n          }\n          /* end map_seq */\n          v_l_id_160843 = atomic_inc(&(v_work_idx_13217)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_160847 = get_local_id(0); \n        int v_tmp_160933 = -2147483648; \n        v__136518 = v_tmp_160933; \n        /* reduce_seq */\n        for (int v_i_160848 = 0; v_i_160848 < v_MWidthC_1; v_i_160848 = (1 + v_i_160848)) {\n          v__136518 = int_max(v__136518, v__160868[(v_i_160848 + (v_MWidthC_1 * v_l_id_160847))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_160849 = 0; \n          v__160873[v_w_id_160842] = doubleMinMax(v__136518, v__160854, v__160853[v_w_id_160842], v__160855); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_160842 = atomic_inc(v_work_idx_13219); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__160850",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160851",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160852",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__160853",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__160854",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__160855",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__160863",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__160857",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__160873",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__160868",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}