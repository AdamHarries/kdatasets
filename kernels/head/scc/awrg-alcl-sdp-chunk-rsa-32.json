{
  "name" : "awrg-alcl-sdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__147932, const global int* restrict v__147933, const global int* restrict v__147934, const global int* restrict v__147935, int v__147936, int v__147937, global int* v__147952, global int* v__147951, global int* v__147939, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__147940; \n  int v__147943; \n  /* Private Memory */\n  int v__147945_0;\n  \n  int v__147947_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12042 = v__147939; \n    local int v_w_id_147927; \n    if (get_local_id(0) == 0) {\n      v_w_id_147927 = atomic_inc(v_work_idx_12042); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_147927 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12040; \n        v_work_idx_12040 = 0; \n        int v_l_id_147928 = atomic_inc(&(v_work_idx_12040)); \n        while((v_l_id_147928 < 32)){\n          int v_tmp_147984 = -2147483648; \n          v__147940 = v_tmp_147984; \n          /* reduce_seq */\n          int v_stop_147985 = min(v__147932[(1 + (v__147932[(v_l_id_147928 + (32 * v_w_id_147927))] / 4))], v__147933[(1 + (v__147933[(v_l_id_147928 + (32 * v_w_id_147927))] / 4))]); \n          for (int v_i_147929 = 0; v_i_147929 < v_stop_147985; v_i_147929 = (1 + v_i_147929)) {\n            int v_tmp_147990 = -2147483648; \n            v__147943 = v_tmp_147990; \n            int v_index_147992 = v__147932[(2 + v_i_147929 + (v__147932[(v_l_id_147928 + (32 * v_w_id_147927))] / 4))]; \n            if (v_index_147992 < 0) {\n              v__147945_0 = v__147943; \n            } else {\n              if (v_index_147992 >= v_MWidthC_1) {\n                v__147945_0 = v__147943; \n              } else {\n                v__147945_0 = v__147934[v_index_147992]; \n              }\n            }\n            v__147947_0 = int_min(v__147933[(2 + v_i_147929 + (v__147933[(v_l_id_147928 + (32 * v_w_id_147927))] / 4))], v__147945_0); \n            v__147940 = int_max(v__147940, v__147947_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_147930 = 0; \n            v__147951[(v_l_id_147928 + (32 * v_w_id_147927))] = doubleMinMax(v__147940, v__147936, v__147935[(v_l_id_147928 + (32 * v_w_id_147927))], v__147937); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_147931 = 0; \n            v__147952[(v_l_id_147928 + (32 * v_w_id_147927))] = id(v__147951[(v_l_id_147928 + (32 * v_w_id_147927))]); \n          }\n          /* end map_seq */\n          v_l_id_147928 = atomic_inc(&(v_work_idx_12040)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_147927 = atomic_inc(v_work_idx_12042); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__147932",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__147933",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__147934",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__147935",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__147936",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__147937",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__147951",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__147939",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__147952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}