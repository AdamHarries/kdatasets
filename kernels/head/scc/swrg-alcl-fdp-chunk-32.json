{
  "name" : "swrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__145669, const global int* restrict v__145670, const global int* restrict v__145671, const global int* restrict v__145672, int v__145673, int v__145674, global int* v__145687, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__145677; \n  int v__145679; \n  /* Private Memory */\n  int v__145681_0;\n  \n  int v__145683_0;\n  \n  for (int v_wg_id_145665 = get_group_id(0); v_wg_id_145665 < ((v_MHeight_2)/(32)); v_wg_id_145665 = (v_wg_id_145665 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11833; \n      v_work_idx_11833 = 0; \n      int v_l_id_145666 = atomic_inc(&(v_work_idx_11833)); \n      while((v_l_id_145666 < 32)){\n        int v_tmp_145725 = -2147483648; \n        v__145677 = v_tmp_145725; \n        /* reduce_seq */\n        for (int v_i_145667 = 0; v_i_145667 < v_MWidthC_1; v_i_145667 = (1 + v_i_145667)) {\n          int v_tmp_145726 = -2147483648; \n          v__145679 = v_tmp_145726; \n          int v_index_145727 = v__145669[(v_i_145667 + (32 * v_MWidthC_1 * v_wg_id_145665) + (v_MWidthC_1 * v_l_id_145666))]; \n          if (v_index_145727 < 0) {\n            v__145681_0 = v__145679; \n          } else {\n            if (v_index_145727 >= v_VLength_3) {\n              v__145681_0 = v__145679; \n            } else {\n              v__145681_0 = v__145671[v_index_145727]; \n            }\n          }\n          v__145683_0 = int_min(v__145681_0, v__145670[(v_i_145667 + (32 * v_MWidthC_1 * v_wg_id_145665) + (v_MWidthC_1 * v_l_id_145666))]); \n          v__145677 = int_max(v__145683_0, v__145677); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_145668 = 0; \n          v__145687[(v_l_id_145666 + (32 * v_wg_id_145665))] = doubleMinMax(v__145677, v__145673, v__145672[(v_l_id_145666 + (32 * v_wg_id_145665))], v__145674); \n        }\n        /* end map_seq */\n        v_l_id_145666 = atomic_inc(&(v_work_idx_11833)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__145669",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__145670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__145671",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__145672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__145673",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__145674",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__145687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}