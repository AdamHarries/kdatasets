{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__164336, const global int* restrict v__164337, const global int* restrict v__164338, const global int* restrict v__164339, int v__164340, int v__164341, global int* v__164359, global int* v__164349, global int* v__164343, local int* v__164354, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__164345; \n  int v__164350; \n  int v__136518; \n  /* Private Memory */\n  int v__164347_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_13529 = v__164343; \n    local int v_w_id_164328; \n    if (get_local_id(0) == 0) {\n      v_w_id_164328 = atomic_inc(v_work_idx_13529); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_164328 < v_MHeight_2)){\n      for (int v_l_id_164329 = get_local_id(0); v_l_id_164329 < v_MWidthC_1; v_l_id_164329 = (v_l_id_164329 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_164330 = 0; v_i_164330 < 512; v_i_164330 = (1 + v_i_164330)) {\n          int v_tmp_164418 = -2147483648; \n          v__164345 = v_tmp_164418; \n          int v_index_164419 = v__164336[(v_l_id_164329 + (512 * v_MWidthC_1 * v_w_id_164328) + (v_MWidthC_1 * v_i_164330))]; \n          if (v_index_164419 < 0) {\n            v__164347_0 = v__164345; \n          } else {\n            if (v_index_164419 >= v_VLength_3) {\n              v__164347_0 = v__164345; \n            } else {\n              v__164347_0 = v__164338[v_index_164419]; \n            }\n          }\n          v__164349[(511 + (512 * v_MWidthC_1 * v_w_id_164328) + (-1 * v_i_164330) + (512 * v_l_id_164329))] = int_min(v__164347_0, v__164337[(v_l_id_164329 + (512 * v_MWidthC_1 * v_w_id_164328) + (v_MWidthC_1 * v_i_164330))]); \n        }\n        /* end map_seq */\n        int v_tmp_164420 = -2147483648; \n        v__164350 = v_tmp_164420; \n        /* reduce_seq */\n        for (int v_i_164331 = 0; v_i_164331 < 512; v_i_164331 = (1 + v_i_164331)) {\n          v__164350 = int_max(v__164350, v__164349[(v_i_164331 + (512 * v_MWidthC_1 * v_w_id_164328) + (512 * v_l_id_164329))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_164332 = 0; \n          v__164354[v_l_id_164329] = id(v__164350); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_13522; \n        v_work_idx_13522 = 0; \n        int v_l_id_164333 = atomic_inc(&(v_work_idx_13522)); \n        while((v_l_id_164333 < 1)){\n          int v_tmp_164423 = -2147483648; \n          v__136518 = v_tmp_164423; \n          /* reduce_seq */\n          for (int v_i_164334 = 0; v_i_164334 < v_MWidthC_1; v_i_164334 = (1 + v_i_164334)) {\n            v__136518 = int_max(v__136518, v__164354[(v_i_164334 + (v_MWidthC_1 * v_l_id_164333))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_164335 = 0; \n            v__164359[v_w_id_164328] = doubleMinMax(v__136518, v__164340, v__164339[v_w_id_164328], v__164341); \n          }\n          /* end map_seq */\n          v_l_id_164333 = atomic_inc(&(v_work_idx_13522)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_164328 = atomic_inc(v_work_idx_13529); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__164336",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164337",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164338",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__164339",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__164340",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__164341",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__164349",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__164343",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__164359",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__164354",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}