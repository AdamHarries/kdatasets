{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__158734, const global int* restrict v__158735, const global int* restrict v__158736, const global int* restrict v__158737, int v__158738, int v__158739, global int* v__158756, global int* v__158746, local int* v__158751, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__158742; \n  int v__158747; \n  int v__136518; \n  /* Private Memory */\n  int v__158744_0;\n  \n  for (int v_wg_id_158726 = get_group_id(0); v_wg_id_158726 < v_MHeight_2; v_wg_id_158726 = (v_wg_id_158726 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_13019; \n      v_work_idx_13019 = 0; \n      int v_l_id_158727 = atomic_inc(&(v_work_idx_13019)); \n      while((v_l_id_158727 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_158728 = 0; v_i_158728 < 256; v_i_158728 = (1 + v_i_158728)) {\n          int v_tmp_158813 = -2147483648; \n          v__158742 = v_tmp_158813; \n          int v_index_158814 = v__158734[(v_l_id_158727 + (256 * v_MWidthC_1 * v_wg_id_158726) + (v_MWidthC_1 * v_i_158728))]; \n          if (v_index_158814 < 0) {\n            v__158744_0 = v__158742; \n          } else {\n            if (v_index_158814 >= v_VLength_3) {\n              v__158744_0 = v__158742; \n            } else {\n              v__158744_0 = v__158736[v_index_158814]; \n            }\n          }\n          v__158746[(255 + (256 * v_MWidthC_1 * v_wg_id_158726) + (-1 * v_i_158728) + (256 * v_l_id_158727))] = int_min(v__158744_0, v__158735[(v_l_id_158727 + (256 * v_MWidthC_1 * v_wg_id_158726) + (v_MWidthC_1 * v_i_158728))]); \n        }\n        /* end map_seq */\n        int v_tmp_158815 = -2147483648; \n        v__158747 = v_tmp_158815; \n        /* reduce_seq */\n        for (int v_i_158729 = 0; v_i_158729 < 256; v_i_158729 = (1 + v_i_158729)) {\n          v__158747 = int_max(v__158747, v__158746[(v_i_158729 + (256 * v_MWidthC_1 * v_wg_id_158726) + (256 * v_l_id_158727))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_158730 = 0; \n          v__158751[v_l_id_158727] = id(v__158747); \n        }\n        /* end map_seq */\n        v_l_id_158727 = atomic_inc(&(v_work_idx_13019)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_158731 = get_local_id(0); \n      int v_tmp_158818 = -2147483648; \n      v__136518 = v_tmp_158818; \n      /* reduce_seq */\n      for (int v_i_158732 = 0; v_i_158732 < v_MWidthC_1; v_i_158732 = (1 + v_i_158732)) {\n        v__136518 = int_max(v__136518, v__158751[(v_i_158732 + (v_MWidthC_1 * v_l_id_158731))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_158733 = 0; \n        v__158756[v_wg_id_158726] = doubleMinMax(v__136518, v__158738, v__158737[v_wg_id_158726], v__158739); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__158734",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__158735",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__158736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__158737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__158738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__158739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__158746",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__158756",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__158751",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}