{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nkernel void KERNEL(const global int* restrict v__152580, const global int* restrict v__152581, const global int* restrict v__152582, const global int* restrict v__152583, int v__152584, int v__152585, global int* v__152605, global int* v__152587, local int* v__152600, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__152589; \n  int v__152591; \n  int v__136518; \n  /* Private Memory */\n  int v__152593_0;\n  \n  int v__152595_0;\n  \n  int v__152599_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_12471 = v__152587; \n    local int v_w_id_152573; \n    if (get_local_id(0) == 0) {\n      v_w_id_152573 = atomic_inc(v_work_idx_12471); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_152573 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_12469; \n        v_work_idx_12469 = 0; \n        int v_l_id_152574 = atomic_inc(&(v_work_idx_12469)); \n        while((v_l_id_152574 < v_MWidthC_1)){\n          int v_tmp_152663 = -2147483648; \n          v__152589 = v_tmp_152663; \n          /* reduce_while_seq */\n          for (int v_i_152575 = 0; v_i_152575 < 64; v_i_152575 = (1 + v_i_152575)) {\n            v__152599_0 = check(v__152589, v__152580[(v_l_id_152574 + (64 * v_MWidthC_1 * v_w_id_152573) + (v_MWidthC_1 * v_i_152575))]); \n            if (v__152599_0) {\n            } else {\n              break;\n            }\n            int v_tmp_152664 = -2147483648; \n            v__152591 = v_tmp_152664; \n            int v_index_152665 = v__152580[(v_l_id_152574 + (64 * v_MWidthC_1 * v_w_id_152573) + (v_MWidthC_1 * v_i_152575))]; \n            if (v_index_152665 < 0) {\n              v__152593_0 = v__152591; \n            } else {\n              if (v_index_152665 >= v_VLength_3) {\n                v__152593_0 = v__152591; \n              } else {\n                v__152593_0 = v__152582[v_index_152665]; \n              }\n            }\n            v__152595_0 = int_min(v__152593_0, v__152581[(v_l_id_152574 + (64 * v_MWidthC_1 * v_w_id_152573) + (v_MWidthC_1 * v_i_152575))]); \n            v__152589 = int_max(v__152595_0, v__152589); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_152576 = 0; \n            v__152600[v_l_id_152574] = id(v__152589); \n          }\n          /* end map_seq */\n          v_l_id_152574 = atomic_inc(&(v_work_idx_12469)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_152577 = get_local_id(0); \n        int v_tmp_152668 = -2147483648; \n        v__136518 = v_tmp_152668; \n        /* reduce_seq */\n        for (int v_i_152578 = 0; v_i_152578 < v_MWidthC_1; v_i_152578 = (1 + v_i_152578)) {\n          v__136518 = int_max(v__136518, v__152600[(v_i_152578 + (v_MWidthC_1 * v_l_id_152577))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_152579 = 0; \n          v__152605[v_w_id_152573] = doubleMinMax(v__136518, v__152584, v__152583[v_w_id_152573], v__152585); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_152573 = atomic_inc(v_work_idx_12471); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__152580",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__152581",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__152582",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__152583",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__152584",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__152585",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__152587",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__152605",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__152600",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}