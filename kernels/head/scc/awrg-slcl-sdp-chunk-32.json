{
  "name" : "awrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__146623, const global int* restrict v__146624, const global int* restrict v__146625, const global int* restrict v__146626, int v__146627, int v__146628, global int* v__146642, global int* v__146636, global int* v__146630, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__146632; \n  int v__146637; \n  /* Private Memory */\n  int v__146634_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11924 = v__146630; \n    local int v_w_id_146618; \n    if (get_local_id(0) == 0) {\n      v_w_id_146618 = atomic_inc(v_work_idx_11924); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_146618 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_146619 = get_local_id(0); v_l_id_146619 < 32; v_l_id_146619 = (v_l_id_146619 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_146620 = 0; v_i_146620 < v_MWidthC_1; v_i_146620 = (1 + v_i_146620)) {\n          int v_tmp_146685 = -2147483648; \n          v__146632 = v_tmp_146685; \n          int v_index_146686 = v__146623[(v_i_146620 + (32 * v_MWidthC_1 * v_w_id_146618) + (v_MWidthC_1 * v_l_id_146619))]; \n          if (v_index_146686 < 0) {\n            v__146634_0 = v__146632; \n          } else {\n            if (v_index_146686 >= v_VLength_3) {\n              v__146634_0 = v__146632; \n            } else {\n              v__146634_0 = v__146625[v_index_146686]; \n            }\n          }\n          v__146636[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_146618) + (-1 * v_i_146620) + (v_MWidthC_1 * v_l_id_146619))] = int_min(v__146634_0, v__146624[(v_i_146620 + (32 * v_MWidthC_1 * v_w_id_146618) + (v_MWidthC_1 * v_l_id_146619))]); \n        }\n        /* end map_seq */\n        int v_tmp_146687 = -2147483648; \n        v__146637 = v_tmp_146687; \n        /* reduce_seq */\n        for (int v_i_146621 = 0; v_i_146621 < v_MWidthC_1; v_i_146621 = (1 + v_i_146621)) {\n          v__146637 = int_max(v__146637, v__146636[(v_i_146621 + (32 * v_MWidthC_1 * v_w_id_146618) + (v_MWidthC_1 * v_l_id_146619))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_146622 = 0; \n          v__146642[(v_l_id_146619 + (32 * v_w_id_146618))] = doubleMinMax(v__146637, v__146627, v__146626[(v_l_id_146619 + (32 * v_w_id_146618))], v__146628); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_146618 = atomic_inc(v_work_idx_11924); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__146623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__146624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__146625",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__146626",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__146627",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__146628",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__146636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__146630",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__146642",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}