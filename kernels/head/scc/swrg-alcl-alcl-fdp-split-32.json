{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint id(int x){\n  { return x; }\n}\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__146432, const global int* restrict v__146433, const global int* restrict v__146434, const global int* restrict v__146435, int v__146436, int v__146437, global int* v__146454, local int* v__146449, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__146440; \n  int v__146442; \n  int v__136518; \n  /* Private Memory */\n  int v__146444_0;\n  \n  int v__146446_0;\n  \n  for (int v_wg_id_146425 = get_group_id(0); v_wg_id_146425 < v_MHeight_2; v_wg_id_146425 = (v_wg_id_146425 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_11906; \n      v_work_idx_11906 = 0; \n      int v_l_id_146426 = atomic_inc(&(v_work_idx_11906)); \n      while((v_l_id_146426 < v_MWidthC_1)){\n        int v_tmp_146507 = -2147483648; \n        v__146440 = v_tmp_146507; \n        /* reduce_seq */\n        for (int v_i_146427 = 0; v_i_146427 < 32; v_i_146427 = (1 + v_i_146427)) {\n          int v_tmp_146508 = -2147483648; \n          v__146442 = v_tmp_146508; \n          int v_index_146509 = v__146432[(v_l_id_146426 + (32 * v_MWidthC_1 * v_wg_id_146425) + (v_MWidthC_1 * v_i_146427))]; \n          if (v_index_146509 < 0) {\n            v__146444_0 = v__146442; \n          } else {\n            if (v_index_146509 >= v_VLength_3) {\n              v__146444_0 = v__146442; \n            } else {\n              v__146444_0 = v__146434[v_index_146509]; \n            }\n          }\n          v__146446_0 = int_min(v__146444_0, v__146433[(v_l_id_146426 + (32 * v_MWidthC_1 * v_wg_id_146425) + (v_MWidthC_1 * v_i_146427))]); \n          v__146440 = int_max(v__146446_0, v__146440); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_146428 = 0; \n          v__146449[v_l_id_146426] = id(v__146440); \n        }\n        /* end map_seq */\n        v_l_id_146426 = atomic_inc(&(v_work_idx_11906)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_11901; \n      v_work_idx_11901 = 0; \n      int v_l_id_146429 = atomic_inc(&(v_work_idx_11901)); \n      while((v_l_id_146429 < 1)){\n        int v_tmp_146512 = -2147483648; \n        v__136518 = v_tmp_146512; \n        /* reduce_seq */\n        for (int v_i_146430 = 0; v_i_146430 < v_MWidthC_1; v_i_146430 = (1 + v_i_146430)) {\n          v__136518 = int_max(v__136518, v__146449[(v_i_146430 + (v_MWidthC_1 * v_l_id_146429))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_146431 = 0; \n          v__146454[v_wg_id_146425] = doubleMinMax(v__136518, v__146436, v__146435[v_wg_id_146425], v__146437); \n        }\n        /* end map_seq */\n        v_l_id_146429 = atomic_inc(&(v_work_idx_11901)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__146432",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__146433",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__146434",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__146435",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__146436",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__146437",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__146454",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__146449",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}