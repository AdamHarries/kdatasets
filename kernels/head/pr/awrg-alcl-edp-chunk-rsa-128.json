{
  "name" : "awrg-alcl-edp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__126274, const global float* restrict v__126275, const global float* restrict v__126276, const global float* restrict v__126277, float v__126278, float v__126279, global float* v__126294, global float* v__126293, global int* v__126281, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__126282; \n  float v__126285; \n  /* Private Memory */\n  float v__126287_0;\n  \n  float v__126289_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10093 = v__126281; \n    local int v_w_id_126269; \n    if (get_local_id(0) == 0) {\n      v_w_id_126269 = atomic_inc(v_work_idx_10093); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_126269 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10091; \n        v_work_idx_10091 = 0; \n        int v_l_id_126270 = atomic_inc(&(v_work_idx_10091)); \n        while((v_l_id_126270 < 128)){\n          float v_tmp_126326 = 0.0f; \n          v__126282 = v_tmp_126326; \n          /* reduce_seq */\n          int v_stop_126327 = min(v__126274[(1 + (v__126274[(v_l_id_126270 + (128 * v_w_id_126269))] / 4))], ((global int*)(v__126275 + (((global int*)(v__126275))[(v_l_id_126270 + (128 * v_w_id_126269))] / 4)))[1]); \n          for (int v_i_126271 = 0; v_i_126271 < v_stop_126327; v_i_126271 = (1 + v_i_126271)) {\n            float v_tmp_126335 = 0.0f; \n            v__126285 = v_tmp_126335; \n            int v_index_126337 = v__126274[(2 + v_i_126271 + (v__126274[(v_l_id_126270 + (128 * v_w_id_126269))] / 4))]; \n            if (v_index_126337 < 0) {\n              v__126287_0 = v__126285; \n            } else {\n              if (v_index_126337 >= v_MWidthC_1) {\n                v__126287_0 = v__126285; \n              } else {\n                v__126287_0 = v__126276[v_index_126337]; \n              }\n            }\n            v__126289_0 = mult(v__126275[(2 + v_i_126271 + (((global int*)(v__126275))[(v_l_id_126270 + (128 * v_w_id_126269))] / 4))], v__126287_0); \n            v__126282 = add(v__126282, v__126289_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126272 = 0; \n            v__126293[(v_l_id_126270 + (128 * v_w_id_126269))] = doubleMultiplyAdd(v__126282, v__126278, v__126277[(v_l_id_126270 + (128 * v_w_id_126269))], v__126279); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_126273 = 0; \n            v__126294[(v_l_id_126270 + (128 * v_w_id_126269))] = id(v__126293[(v_l_id_126270 + (128 * v_w_id_126269))]); \n          }\n          /* end map_seq */\n          v_l_id_126270 = atomic_inc(&(v_work_idx_10091)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_126269 = atomic_inc(v_work_idx_10093); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__126274",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126275",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__126276",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__126277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126278",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__126279",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__126293",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__126281",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__126294",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}