{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91314, const global float* restrict v__91315, const global float* restrict v__91316, const global float* restrict v__91317, float v__91318, float v__91319, global float* v__91336, local float* v__91331, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91322; \n  float v__91324; \n  float v__80917; \n  /* Private Memory */\n  float v__91326_0;\n  \n  float v__91328_0;\n  \n  for (int v_wg_id_91307 = get_group_id(0); v_wg_id_91307 < v_MHeight_2; v_wg_id_91307 = (v_wg_id_91307 + get_num_groups(0))) {\n    for (int v_l_id_91308 = get_local_id(0); v_l_id_91308 < v_MWidthC_1; v_l_id_91308 = (v_l_id_91308 + get_local_size(0))) {\n      float v_tmp_91401 = 0.0f; \n      v__91322 = v_tmp_91401; \n      /* reduce_seq */\n      for (int v_i_91309 = 0; v_i_91309 < 64; v_i_91309 = (1 + v_i_91309)) {\n        float v_tmp_91402 = 0.0f; \n        v__91324 = v_tmp_91402; \n        int v_index_91403 = v__91314[(v_l_id_91308 + (64 * v_MWidthC_1 * v_wg_id_91307) + (v_MWidthC_1 * v_i_91309))]; \n        if (v_index_91403 < 0) {\n          v__91326_0 = v__91324; \n        } else {\n          if (v_index_91403 >= v_VLength_3) {\n            v__91326_0 = v__91324; \n          } else {\n            v__91326_0 = v__91316[v_index_91403]; \n          }\n        }\n        v__91328_0 = mult(v__91326_0, v__91315[(v_l_id_91308 + (64 * v_MWidthC_1 * v_wg_id_91307) + (v_MWidthC_1 * v_i_91309))]); \n        v__91322 = add(v__91328_0, v__91322); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91310 = 0; \n        v__91331[v_l_id_91308] = id(v__91322); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_91311 = get_local_id(0); \n      float v_tmp_91406 = 0.0f; \n      v__80917 = v_tmp_91406; \n      /* reduce_seq */\n      for (int v_i_91312 = 0; v_i_91312 < v_MWidthC_1; v_i_91312 = (1 + v_i_91312)) {\n        v__80917 = add(v__80917, v__91331[(v_i_91312 + (v_MWidthC_1 * v_l_id_91311))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91313 = 0; \n        v__91336[v_wg_id_91307] = doubleMultiplyAdd(v__80917, v__91318, v__91317[v_wg_id_91307], v__91319); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91314",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91315",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91316",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91318",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91319",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91331",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}