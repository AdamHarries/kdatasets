{
  "name" : "swrg-alcl-edp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__115544, const global float* restrict v__115545, const global float* restrict v__115546, const global float* restrict v__115547, float v__115548, float v__115549, global float* v__115563, global float* v__115562, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115551; \n  float v__115554; \n  /* Private Memory */\n  float v__115556_0;\n  \n  float v__115558_0;\n  \n  for (int v_wg_id_115539 = get_group_id(0); v_wg_id_115539 < ((v_MHeight_2)/(32)); v_wg_id_115539 = (v_wg_id_115539 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9126; \n      v_work_idx_9126 = 0; \n      int v_l_id_115540 = atomic_inc(&(v_work_idx_9126)); \n      while((v_l_id_115540 < 32)){\n        float v_tmp_115596 = 0.0f; \n        v__115551 = v_tmp_115596; \n        /* reduce_seq */\n        int v_stop_115597 = min(v__115544[(1 + (v__115544[(v_l_id_115540 + (32 * v_wg_id_115539))] / 4))], ((global int*)(v__115545 + (((global int*)(v__115545))[(v_l_id_115540 + (32 * v_wg_id_115539))] / 4)))[1]); \n        for (int v_i_115541 = 0; v_i_115541 < v_stop_115597; v_i_115541 = (1 + v_i_115541)) {\n          float v_tmp_115605 = 0.0f; \n          v__115554 = v_tmp_115605; \n          int v_index_115607 = v__115544[(2 + v_i_115541 + (v__115544[(v_l_id_115540 + (32 * v_wg_id_115539))] / 4))]; \n          if (v_index_115607 < 0) {\n            v__115556_0 = v__115554; \n          } else {\n            if (v_index_115607 >= v_MWidthC_1) {\n              v__115556_0 = v__115554; \n            } else {\n              v__115556_0 = v__115546[v_index_115607]; \n            }\n          }\n          v__115558_0 = mult(v__115545[(2 + v_i_115541 + (((global int*)(v__115545))[(v_l_id_115540 + (32 * v_wg_id_115539))] / 4))], v__115556_0); \n          v__115551 = add(v__115551, v__115558_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115542 = 0; \n          v__115562[(v_l_id_115540 + (32 * v_wg_id_115539))] = doubleMultiplyAdd(v__115551, v__115548, v__115547[(v_l_id_115540 + (32 * v_wg_id_115539))], v__115549); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115543 = 0; \n          v__115563[(v_l_id_115540 + (32 * v_wg_id_115539))] = id(v__115562[(v_l_id_115540 + (32 * v_wg_id_115539))]); \n        }\n        /* end map_seq */\n        v_l_id_115540 = atomic_inc(&(v_work_idx_9126)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__115544",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115545",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115546",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__115547",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115548",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115549",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__115563",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}