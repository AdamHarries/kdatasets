{
  "name" : "awrg-slcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__107856, const global float* restrict v__107857, const global float* restrict v__107858, const global float* restrict v__107859, float v__107860, float v__107861, global float* v__107876, global float* v__107875, global int* v__107863, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__107864; \n  float v__107867; \n  /* Private Memory */\n  float v__107869_0;\n  \n  float v__107871_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8443 = v__107863; \n    local int v_w_id_107851; \n    if (get_local_id(0) == 0) {\n      v_w_id_107851 = atomic_inc(v_work_idx_8443); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_107851 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_107852 = get_local_id(0); v_l_id_107852 < 8; v_l_id_107852 = (v_l_id_107852 + get_local_size(0))) {\n        float v_tmp_107912 = 0.0f; \n        v__107864 = v_tmp_107912; \n        /* reduce_seq */\n        int v_stop_107913 = min(v__107856[(1 + (v__107856[(v_l_id_107852 + (8 * v_w_id_107851))] / 4))], ((global int*)(v__107857 + (((global int*)(v__107857))[(v_l_id_107852 + (8 * v_w_id_107851))] / 4)))[1]); \n        for (int v_i_107853 = 0; v_i_107853 < v_stop_107913; v_i_107853 = (1 + v_i_107853)) {\n          float v_tmp_107921 = 0.0f; \n          v__107867 = v_tmp_107921; \n          int v_index_107923 = v__107856[(2 + v_i_107853 + (v__107856[(v_l_id_107852 + (8 * v_w_id_107851))] / 4))]; \n          if (v_index_107923 < 0) {\n            v__107869_0 = v__107867; \n          } else {\n            if (v_index_107923 >= v_MWidthC_1) {\n              v__107869_0 = v__107867; \n            } else {\n              v__107869_0 = v__107858[v_index_107923]; \n            }\n          }\n          v__107871_0 = mult(v__107857[(2 + v_i_107853 + (((global int*)(v__107857))[(v_l_id_107852 + (8 * v_w_id_107851))] / 4))], v__107869_0); \n          v__107864 = add(v__107864, v__107871_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107854 = 0; \n          v__107875[(v_l_id_107852 + (8 * v_w_id_107851))] = doubleMultiplyAdd(v__107864, v__107860, v__107859[(v_l_id_107852 + (8 * v_w_id_107851))], v__107861); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_107855 = 0; \n          v__107876[(v_l_id_107852 + (8 * v_w_id_107851))] = id(v__107875[(v_l_id_107852 + (8 * v_w_id_107851))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_107851 = atomic_inc(v_work_idx_8443); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__107856",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__107857",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__107858",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__107859",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107860",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__107861",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__107875",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__107863",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__107876",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}