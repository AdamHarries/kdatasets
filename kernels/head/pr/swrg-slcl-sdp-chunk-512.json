{
  "name" : "swrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100971, const global float* restrict v__100972, const global float* restrict v__100973, const global float* restrict v__100974, float v__100975, float v__100976, global float* v__100989, global float* v__100983, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100979; \n  float v__100984; \n  /* Private Memory */\n  float v__100981_0;\n  \n  for (int v_wg_id_100966 = get_group_id(0); v_wg_id_100966 < ((v_MHeight_2)/(512)); v_wg_id_100966 = (v_wg_id_100966 + get_num_groups(0))) {\n    for (int v_l_id_100967 = get_local_id(0); v_l_id_100967 < 512; v_l_id_100967 = (v_l_id_100967 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_100968 = 0; v_i_100968 < v_MWidthC_1; v_i_100968 = (1 + v_i_100968)) {\n        float v_tmp_101033 = 0.0f; \n        v__100979 = v_tmp_101033; \n        int v_index_101034 = v__100971[(v_i_100968 + (512 * v_MWidthC_1 * v_wg_id_100966) + (v_MWidthC_1 * v_l_id_100967))]; \n        if (v_index_101034 < 0) {\n          v__100981_0 = v__100979; \n        } else {\n          if (v_index_101034 >= v_VLength_3) {\n            v__100981_0 = v__100979; \n          } else {\n            v__100981_0 = v__100973[v_index_101034]; \n          }\n        }\n        v__100983[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_100966) + (-1 * v_i_100968) + (v_MWidthC_1 * v_l_id_100967))] = mult(v__100981_0, v__100972[(v_i_100968 + (512 * v_MWidthC_1 * v_wg_id_100966) + (v_MWidthC_1 * v_l_id_100967))]); \n      }\n      /* end map_seq */\n      float v_tmp_101035 = 0.0f; \n      v__100984 = v_tmp_101035; \n      /* reduce_seq */\n      for (int v_i_100969 = 0; v_i_100969 < v_MWidthC_1; v_i_100969 = (1 + v_i_100969)) {\n        v__100984 = add(v__100984, v__100983[(v_i_100969 + (512 * v_MWidthC_1 * v_wg_id_100966) + (v_MWidthC_1 * v_l_id_100967))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100970 = 0; \n        v__100989[(v_l_id_100967 + (512 * v_wg_id_100966))] = doubleMultiplyAdd(v__100984, v__100975, v__100974[(v_l_id_100967 + (512 * v_wg_id_100966))], v__100976); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100971",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100973",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100975",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100976",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100983",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__100989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}