{
  "name" : "swrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87718, const global float* restrict v__87719, const global float* restrict v__87720, const global float* restrict v__87721, float v__87722, float v__87723, global float* v__87736, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87726; \n  float v__87728; \n  /* Private Memory */\n  float v__87730_0;\n  \n  float v__87732_0;\n  \n  for (int v_wg_id_87714 = get_group_id(0); v_wg_id_87714 < ((v_MHeight_2)/(32)); v_wg_id_87714 = (v_wg_id_87714 + get_num_groups(0))) {\n    for (int v_l_id_87715 = get_local_id(0); v_l_id_87715 < 32; v_l_id_87715 = (v_l_id_87715 + get_local_size(0))) {\n      float v_tmp_87778 = 0.0f; \n      v__87726 = v_tmp_87778; \n      /* reduce_seq */\n      for (int v_i_87716 = 0; v_i_87716 < v_MWidthC_1; v_i_87716 = (1 + v_i_87716)) {\n        float v_tmp_87779 = 0.0f; \n        v__87728 = v_tmp_87779; \n        int v_index_87780 = v__87718[(v_i_87716 + (32 * v_MWidthC_1 * v_wg_id_87714) + (v_MWidthC_1 * v_l_id_87715))]; \n        if (v_index_87780 < 0) {\n          v__87730_0 = v__87728; \n        } else {\n          if (v_index_87780 >= v_VLength_3) {\n            v__87730_0 = v__87728; \n          } else {\n            v__87730_0 = v__87720[v_index_87780]; \n          }\n        }\n        v__87732_0 = mult(v__87730_0, v__87719[(v_i_87716 + (32 * v_MWidthC_1 * v_wg_id_87714) + (v_MWidthC_1 * v_l_id_87715))]); \n        v__87726 = add(v__87732_0, v__87726); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87717 = 0; \n        v__87736[(v_l_id_87715 + (32 * v_wg_id_87714))] = doubleMultiplyAdd(v__87726, v__87722, v__87721[(v_l_id_87715 + (32 * v_wg_id_87714))], v__87723); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__87718",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87719",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87720",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87721",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87722",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87723",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__87736",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}