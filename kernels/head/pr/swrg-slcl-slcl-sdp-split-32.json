{
  "name" : "swrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87876, const global float* restrict v__87877, const global float* restrict v__87878, const global float* restrict v__87879, float v__87880, float v__87881, global float* v__87898, global float* v__87888, local float* v__87893, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87884; \n  float v__87889; \n  float v__80917; \n  /* Private Memory */\n  float v__87886_0;\n  \n  for (int v_wg_id_87868 = get_group_id(0); v_wg_id_87868 < v_MHeight_2; v_wg_id_87868 = (v_wg_id_87868 + get_num_groups(0))) {\n    for (int v_l_id_87869 = get_local_id(0); v_l_id_87869 < v_MWidthC_1; v_l_id_87869 = (v_l_id_87869 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_87870 = 0; v_i_87870 < 32; v_i_87870 = (1 + v_i_87870)) {\n        float v_tmp_87963 = 0.0f; \n        v__87884 = v_tmp_87963; \n        int v_index_87964 = v__87876[(v_l_id_87869 + (32 * v_MWidthC_1 * v_wg_id_87868) + (v_MWidthC_1 * v_i_87870))]; \n        if (v_index_87964 < 0) {\n          v__87886_0 = v__87884; \n        } else {\n          if (v_index_87964 >= v_VLength_3) {\n            v__87886_0 = v__87884; \n          } else {\n            v__87886_0 = v__87878[v_index_87964]; \n          }\n        }\n        v__87888[(31 + (32 * v_MWidthC_1 * v_wg_id_87868) + (-1 * v_i_87870) + (32 * v_l_id_87869))] = mult(v__87886_0, v__87877[(v_l_id_87869 + (32 * v_MWidthC_1 * v_wg_id_87868) + (v_MWidthC_1 * v_i_87870))]); \n      }\n      /* end map_seq */\n      float v_tmp_87965 = 0.0f; \n      v__87889 = v_tmp_87965; \n      /* reduce_seq */\n      for (int v_i_87871 = 0; v_i_87871 < 32; v_i_87871 = (1 + v_i_87871)) {\n        v__87889 = add(v__87889, v__87888[(v_i_87871 + (32 * v_MWidthC_1 * v_wg_id_87868) + (32 * v_l_id_87869))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87872 = 0; \n        v__87893[v_l_id_87869] = id(v__87889); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_87873 = get_local_id(0); \n      float v_tmp_87968 = 0.0f; \n      v__80917 = v_tmp_87968; \n      /* reduce_seq */\n      for (int v_i_87874 = 0; v_i_87874 < v_MWidthC_1; v_i_87874 = (1 + v_i_87874)) {\n        v__80917 = add(v__80917, v__87893[(v_i_87874 + (v_MWidthC_1 * v_l_id_87873))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87875 = 0; \n        v__87898[v_wg_id_87868] = doubleMultiplyAdd(v__80917, v__87880, v__87879[v_wg_id_87868], v__87881); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87876",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87877",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87878",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87880",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87881",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87888",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__87898",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87893",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}