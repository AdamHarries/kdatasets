{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86537, const global float* restrict v__86538, const global float* restrict v__86539, const global float* restrict v__86540, float v__86541, float v__86542, global float* v__86560, global float* v__86550, global int* v__86544, local float* v__86555, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86546; \n  float v__86551; \n  float v__80917; \n  /* Private Memory */\n  float v__86548_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7243 = v__86544; \n    local int v_w_id_86529; \n    if (get_local_id(0) == 0) {\n      v_w_id_86529 = atomic_inc(v_work_idx_7243); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86529 < v_MHeight_2)){\n      for (int v_l_id_86530 = get_local_id(0); v_l_id_86530 < v_MWidthC_1; v_l_id_86530 = (v_l_id_86530 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_86531 = 0; v_i_86531 < 16; v_i_86531 = (1 + v_i_86531)) {\n          float v_tmp_86619 = 0.0f; \n          v__86546 = v_tmp_86619; \n          int v_index_86620 = v__86537[(v_l_id_86530 + (16 * v_MWidthC_1 * v_w_id_86529) + (v_MWidthC_1 * v_i_86531))]; \n          if (v_index_86620 < 0) {\n            v__86548_0 = v__86546; \n          } else {\n            if (v_index_86620 >= v_VLength_3) {\n              v__86548_0 = v__86546; \n            } else {\n              v__86548_0 = v__86539[v_index_86620]; \n            }\n          }\n          v__86550[(15 + (16 * v_MWidthC_1 * v_w_id_86529) + (-1 * v_i_86531) + (16 * v_l_id_86530))] = mult(v__86548_0, v__86538[(v_l_id_86530 + (16 * v_MWidthC_1 * v_w_id_86529) + (v_MWidthC_1 * v_i_86531))]); \n        }\n        /* end map_seq */\n        float v_tmp_86621 = 0.0f; \n        v__86551 = v_tmp_86621; \n        /* reduce_seq */\n        for (int v_i_86532 = 0; v_i_86532 < 16; v_i_86532 = (1 + v_i_86532)) {\n          v__86551 = add(v__86551, v__86550[(v_i_86532 + (16 * v_MWidthC_1 * v_w_id_86529) + (16 * v_l_id_86530))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86533 = 0; \n          v__86555[v_l_id_86530] = id(v__86551); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7236; \n        v_work_idx_7236 = 0; \n        int v_l_id_86534 = atomic_inc(&(v_work_idx_7236)); \n        while((v_l_id_86534 < 1)){\n          float v_tmp_86624 = 0.0f; \n          v__80917 = v_tmp_86624; \n          /* reduce_seq */\n          for (int v_i_86535 = 0; v_i_86535 < v_MWidthC_1; v_i_86535 = (1 + v_i_86535)) {\n            v__80917 = add(v__80917, v__86555[(v_i_86535 + (v_MWidthC_1 * v_l_id_86534))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86536 = 0; \n            v__86560[v_w_id_86529] = doubleMultiplyAdd(v__80917, v__86541, v__86540[v_w_id_86529], v__86542); \n          }\n          /* end map_seq */\n          v_l_id_86534 = atomic_inc(&(v_work_idx_7236)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86529 = atomic_inc(v_work_idx_7243); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86537",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86538",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86539",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86541",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86542",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86550",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86544",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86555",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}