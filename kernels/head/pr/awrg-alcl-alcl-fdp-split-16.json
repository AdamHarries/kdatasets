{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87454, const global float* restrict v__87455, const global float* restrict v__87456, const global float* restrict v__87457, float v__87458, float v__87459, global float* v__87477, global int* v__87461, local float* v__87472, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87463; \n  float v__87465; \n  float v__80917; \n  /* Private Memory */\n  float v__87467_0;\n  \n  float v__87469_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7339 = v__87461; \n    local int v_w_id_87447; \n    if (get_local_id(0) == 0) {\n      v_w_id_87447 = atomic_inc(v_work_idx_7339); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87447 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7337; \n        v_work_idx_7337 = 0; \n        int v_l_id_87448 = atomic_inc(&(v_work_idx_7337)); \n        while((v_l_id_87448 < v_MWidthC_1)){\n          float v_tmp_87528 = 0.0f; \n          v__87463 = v_tmp_87528; \n          /* reduce_seq */\n          for (int v_i_87449 = 0; v_i_87449 < 16; v_i_87449 = (1 + v_i_87449)) {\n            float v_tmp_87529 = 0.0f; \n            v__87465 = v_tmp_87529; \n            int v_index_87530 = v__87454[(v_l_id_87448 + (16 * v_MWidthC_1 * v_w_id_87447) + (v_MWidthC_1 * v_i_87449))]; \n            if (v_index_87530 < 0) {\n              v__87467_0 = v__87465; \n            } else {\n              if (v_index_87530 >= v_VLength_3) {\n                v__87467_0 = v__87465; \n              } else {\n                v__87467_0 = v__87456[v_index_87530]; \n              }\n            }\n            v__87469_0 = mult(v__87467_0, v__87455[(v_l_id_87448 + (16 * v_MWidthC_1 * v_w_id_87447) + (v_MWidthC_1 * v_i_87449))]); \n            v__87463 = add(v__87469_0, v__87463); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87450 = 0; \n            v__87472[v_l_id_87448] = id(v__87463); \n          }\n          /* end map_seq */\n          v_l_id_87448 = atomic_inc(&(v_work_idx_7337)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7332; \n        v_work_idx_7332 = 0; \n        int v_l_id_87451 = atomic_inc(&(v_work_idx_7332)); \n        while((v_l_id_87451 < 1)){\n          float v_tmp_87533 = 0.0f; \n          v__80917 = v_tmp_87533; \n          /* reduce_seq */\n          for (int v_i_87452 = 0; v_i_87452 < v_MWidthC_1; v_i_87452 = (1 + v_i_87452)) {\n            v__80917 = add(v__80917, v__87472[(v_i_87452 + (v_MWidthC_1 * v_l_id_87451))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87453 = 0; \n            v__87477[v_w_id_87447] = doubleMultiplyAdd(v__80917, v__87458, v__87457[v_w_id_87447], v__87459); \n          }\n          /* end map_seq */\n          v_l_id_87451 = atomic_inc(&(v_work_idx_7332)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87447 = atomic_inc(v_work_idx_7339); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__87454",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87455",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87456",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87457",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87458",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87459",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87461",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87477",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87472",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}