{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83732, const global float* restrict v__83733, const global float* restrict v__83734, const global float* restrict v__83735, float v__83736, float v__83737, global float* v__83755, global float* v__83745, global int* v__83739, local float* v__83750, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83741; \n  float v__83746; \n  float v__80917; \n  /* Private Memory */\n  float v__83743_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6984 = v__83739; \n    local int v_w_id_83724; \n    if (get_local_id(0) == 0) {\n      v_w_id_83724 = atomic_inc(v_work_idx_6984); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83724 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6982; \n        v_work_idx_6982 = 0; \n        int v_l_id_83725 = atomic_inc(&(v_work_idx_6982)); \n        while((v_l_id_83725 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_83726 = 0; v_i_83726 < 8; v_i_83726 = (1 + v_i_83726)) {\n            float v_tmp_83810 = 0.0f; \n            v__83741 = v_tmp_83810; \n            int v_index_83811 = v__83732[(v_l_id_83725 + (8 * v_MWidthC_1 * v_w_id_83724) + (v_MWidthC_1 * v_i_83726))]; \n            if (v_index_83811 < 0) {\n              v__83743_0 = v__83741; \n            } else {\n              if (v_index_83811 >= v_VLength_3) {\n                v__83743_0 = v__83741; \n              } else {\n                v__83743_0 = v__83734[v_index_83811]; \n              }\n            }\n            v__83745[(7 + (8 * v_MWidthC_1 * v_w_id_83724) + (-1 * v_i_83726) + (8 * v_l_id_83725))] = mult(v__83743_0, v__83733[(v_l_id_83725 + (8 * v_MWidthC_1 * v_w_id_83724) + (v_MWidthC_1 * v_i_83726))]); \n          }\n          /* end map_seq */\n          float v_tmp_83812 = 0.0f; \n          v__83746 = v_tmp_83812; \n          /* reduce_seq */\n          for (int v_i_83727 = 0; v_i_83727 < 8; v_i_83727 = (1 + v_i_83727)) {\n            v__83746 = add(v__83746, v__83745[(v_i_83727 + (8 * v_MWidthC_1 * v_w_id_83724) + (8 * v_l_id_83725))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83728 = 0; \n            v__83750[v_l_id_83725] = id(v__83746); \n          }\n          /* end map_seq */\n          v_l_id_83725 = atomic_inc(&(v_work_idx_6982)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83729 = get_local_id(0); \n        float v_tmp_83815 = 0.0f; \n        v__80917 = v_tmp_83815; \n        /* reduce_seq */\n        for (int v_i_83730 = 0; v_i_83730 < v_MWidthC_1; v_i_83730 = (1 + v_i_83730)) {\n          v__80917 = add(v__80917, v__83750[(v_i_83730 + (v_MWidthC_1 * v_l_id_83729))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83731 = 0; \n          v__83755[v_w_id_83724] = doubleMultiplyAdd(v__80917, v__83736, v__83735[v_w_id_83724], v__83737); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83724 = atomic_inc(v_work_idx_6984); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83732",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83733",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83734",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83736",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83737",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83745",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83739",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83755",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83750",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}