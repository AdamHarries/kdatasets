{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__94211, const global float* restrict v__94212, const global float* restrict v__94213, const global float* restrict v__94214, float v__94215, float v__94216, global float* v__94236, global int* v__94218, local float* v__94231, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94220; \n  float v__94222; \n  float v__80917; \n  /* Private Memory */\n  float v__94224_0;\n  \n  float v__94226_0;\n  \n  int v__94230_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7974 = v__94218; \n    local int v_w_id_94204; \n    if (get_local_id(0) == 0) {\n      v_w_id_94204 = atomic_inc(v_work_idx_7974); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94204 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7972; \n        v_work_idx_7972 = 0; \n        int v_l_id_94205 = atomic_inc(&(v_work_idx_7972)); \n        while((v_l_id_94205 < v_MWidthC_1)){\n          float v_tmp_94290 = 0.0f; \n          v__94220 = v_tmp_94290; \n          /* reduce_while_seq */\n          for (int v_i_94206 = 0; v_i_94206 < 64; v_i_94206 = (1 + v_i_94206)) {\n            v__94230_0 = check(v__94220, v__94211[(v_l_id_94205 + (64 * v_MWidthC_1 * v_w_id_94204) + (v_MWidthC_1 * v_i_94206))]); \n            if (v__94230_0) {\n            } else {\n              break;\n            }\n            float v_tmp_94291 = 0.0f; \n            v__94222 = v_tmp_94291; \n            int v_index_94292 = v__94211[(v_l_id_94205 + (64 * v_MWidthC_1 * v_w_id_94204) + (v_MWidthC_1 * v_i_94206))]; \n            if (v_index_94292 < 0) {\n              v__94224_0 = v__94222; \n            } else {\n              if (v_index_94292 >= v_VLength_3) {\n                v__94224_0 = v__94222; \n              } else {\n                v__94224_0 = v__94213[v_index_94292]; \n              }\n            }\n            v__94226_0 = mult(v__94224_0, v__94212[(v_l_id_94205 + (64 * v_MWidthC_1 * v_w_id_94204) + (v_MWidthC_1 * v_i_94206))]); \n            v__94220 = add(v__94226_0, v__94220); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94207 = 0; \n            v__94231[v_l_id_94205] = id(v__94220); \n          }\n          /* end map_seq */\n          v_l_id_94205 = atomic_inc(&(v_work_idx_7972)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7967; \n        v_work_idx_7967 = 0; \n        int v_l_id_94208 = atomic_inc(&(v_work_idx_7967)); \n        while((v_l_id_94208 < 1)){\n          float v_tmp_94295 = 0.0f; \n          v__80917 = v_tmp_94295; \n          /* reduce_seq */\n          for (int v_i_94209 = 0; v_i_94209 < v_MWidthC_1; v_i_94209 = (1 + v_i_94209)) {\n            v__80917 = add(v__80917, v__94231[(v_i_94209 + (v_MWidthC_1 * v_l_id_94208))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94210 = 0; \n            v__94236[v_w_id_94204] = doubleMultiplyAdd(v__80917, v__94215, v__94214[v_w_id_94204], v__94216); \n          }\n          /* end map_seq */\n          v_l_id_94208 = atomic_inc(&(v_work_idx_7967)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94204 = atomic_inc(v_work_idx_7974); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94211",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94212",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94213",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94214",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94215",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94216",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94218",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94231",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}