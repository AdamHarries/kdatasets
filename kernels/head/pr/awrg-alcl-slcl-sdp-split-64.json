{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93728, const global float* restrict v__93729, const global float* restrict v__93730, const global float* restrict v__93731, float v__93732, float v__93733, global float* v__93751, global float* v__93741, global int* v__93735, local float* v__93746, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93737; \n  float v__93742; \n  float v__80917; \n  /* Private Memory */\n  float v__93739_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7920 = v__93735; \n    local int v_w_id_93720; \n    if (get_local_id(0) == 0) {\n      v_w_id_93720 = atomic_inc(v_work_idx_7920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93720 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7918; \n        v_work_idx_7918 = 0; \n        int v_l_id_93721 = atomic_inc(&(v_work_idx_7918)); \n        while((v_l_id_93721 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_93722 = 0; v_i_93722 < 64; v_i_93722 = (1 + v_i_93722)) {\n            float v_tmp_93806 = 0.0f; \n            v__93737 = v_tmp_93806; \n            int v_index_93807 = v__93728[(v_l_id_93721 + (64 * v_MWidthC_1 * v_w_id_93720) + (v_MWidthC_1 * v_i_93722))]; \n            if (v_index_93807 < 0) {\n              v__93739_0 = v__93737; \n            } else {\n              if (v_index_93807 >= v_VLength_3) {\n                v__93739_0 = v__93737; \n              } else {\n                v__93739_0 = v__93730[v_index_93807]; \n              }\n            }\n            v__93741[(63 + (64 * v_MWidthC_1 * v_w_id_93720) + (-1 * v_i_93722) + (64 * v_l_id_93721))] = mult(v__93739_0, v__93729[(v_l_id_93721 + (64 * v_MWidthC_1 * v_w_id_93720) + (v_MWidthC_1 * v_i_93722))]); \n          }\n          /* end map_seq */\n          float v_tmp_93808 = 0.0f; \n          v__93742 = v_tmp_93808; \n          /* reduce_seq */\n          for (int v_i_93723 = 0; v_i_93723 < 64; v_i_93723 = (1 + v_i_93723)) {\n            v__93742 = add(v__93742, v__93741[(v_i_93723 + (64 * v_MWidthC_1 * v_w_id_93720) + (64 * v_l_id_93721))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93724 = 0; \n            v__93746[v_l_id_93721] = id(v__93742); \n          }\n          /* end map_seq */\n          v_l_id_93721 = atomic_inc(&(v_work_idx_7918)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93725 = get_local_id(0); \n        float v_tmp_93811 = 0.0f; \n        v__80917 = v_tmp_93811; \n        /* reduce_seq */\n        for (int v_i_93726 = 0; v_i_93726 < v_MWidthC_1; v_i_93726 = (1 + v_i_93726)) {\n          v__80917 = add(v__80917, v__93746[(v_i_93726 + (v_MWidthC_1 * v_l_id_93725))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93727 = 0; \n          v__93751[v_w_id_93720] = doubleMultiplyAdd(v__80917, v__93732, v__93731[v_w_id_93720], v__93733); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93720 = atomic_inc(v_work_idx_7920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93728",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93729",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93730",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93731",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93732",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93733",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93741",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93735",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93751",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93746",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}