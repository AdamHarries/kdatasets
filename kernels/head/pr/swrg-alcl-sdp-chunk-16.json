{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85177, const global float* restrict v__85178, const global float* restrict v__85179, const global float* restrict v__85180, float v__85181, float v__85182, global float* v__85195, global float* v__85189, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85185; \n  float v__85190; \n  /* Private Memory */\n  float v__85187_0;\n  \n  for (int v_wg_id_85172 = get_group_id(0); v_wg_id_85172 < ((v_MHeight_2)/(16)); v_wg_id_85172 = (v_wg_id_85172 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7113; \n      v_work_idx_7113 = 0; \n      int v_l_id_85173 = atomic_inc(&(v_work_idx_7113)); \n      while((v_l_id_85173 < 16)){\n        /* map_seq */\n        for (int v_i_85174 = 0; v_i_85174 < v_MWidthC_1; v_i_85174 = (1 + v_i_85174)) {\n          float v_tmp_85235 = 0.0f; \n          v__85185 = v_tmp_85235; \n          int v_index_85236 = v__85177[(v_i_85174 + (16 * v_MWidthC_1 * v_wg_id_85172) + (v_MWidthC_1 * v_l_id_85173))]; \n          if (v_index_85236 < 0) {\n            v__85187_0 = v__85185; \n          } else {\n            if (v_index_85236 >= v_VLength_3) {\n              v__85187_0 = v__85185; \n            } else {\n              v__85187_0 = v__85179[v_index_85236]; \n            }\n          }\n          v__85189[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_85172) + (-1 * v_i_85174) + (v_MWidthC_1 * v_l_id_85173))] = mult(v__85187_0, v__85178[(v_i_85174 + (16 * v_MWidthC_1 * v_wg_id_85172) + (v_MWidthC_1 * v_l_id_85173))]); \n        }\n        /* end map_seq */\n        float v_tmp_85237 = 0.0f; \n        v__85190 = v_tmp_85237; \n        /* reduce_seq */\n        for (int v_i_85175 = 0; v_i_85175 < v_MWidthC_1; v_i_85175 = (1 + v_i_85175)) {\n          v__85190 = add(v__85190, v__85189[(v_i_85175 + (16 * v_MWidthC_1 * v_wg_id_85172) + (v_MWidthC_1 * v_l_id_85173))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85176 = 0; \n          v__85195[(v_l_id_85173 + (16 * v_wg_id_85172))] = doubleMultiplyAdd(v__85190, v__85181, v__85180[(v_l_id_85173 + (16 * v_wg_id_85172))], v__85182); \n        }\n        /* end map_seq */\n        v_l_id_85173 = atomic_inc(&(v_work_idx_7113)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85177",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85178",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85179",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85180",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85181",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85182",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}