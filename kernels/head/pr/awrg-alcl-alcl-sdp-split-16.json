{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87361, const global float* restrict v__87362, const global float* restrict v__87363, const global float* restrict v__87364, float v__87365, float v__87366, global float* v__87384, global float* v__87374, global int* v__87368, local float* v__87379, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87370; \n  float v__87375; \n  float v__80917; \n  /* Private Memory */\n  float v__87372_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7328 = v__87368; \n    local int v_w_id_87353; \n    if (get_local_id(0) == 0) {\n      v_w_id_87353 = atomic_inc(v_work_idx_7328); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87353 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7326; \n        v_work_idx_7326 = 0; \n        int v_l_id_87354 = atomic_inc(&(v_work_idx_7326)); \n        while((v_l_id_87354 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_87355 = 0; v_i_87355 < 16; v_i_87355 = (1 + v_i_87355)) {\n            float v_tmp_87435 = 0.0f; \n            v__87370 = v_tmp_87435; \n            int v_index_87436 = v__87361[(v_l_id_87354 + (16 * v_MWidthC_1 * v_w_id_87353) + (v_MWidthC_1 * v_i_87355))]; \n            if (v_index_87436 < 0) {\n              v__87372_0 = v__87370; \n            } else {\n              if (v_index_87436 >= v_VLength_3) {\n                v__87372_0 = v__87370; \n              } else {\n                v__87372_0 = v__87363[v_index_87436]; \n              }\n            }\n            v__87374[(15 + (16 * v_MWidthC_1 * v_w_id_87353) + (-1 * v_i_87355) + (16 * v_l_id_87354))] = mult(v__87372_0, v__87362[(v_l_id_87354 + (16 * v_MWidthC_1 * v_w_id_87353) + (v_MWidthC_1 * v_i_87355))]); \n          }\n          /* end map_seq */\n          float v_tmp_87437 = 0.0f; \n          v__87375 = v_tmp_87437; \n          /* reduce_seq */\n          for (int v_i_87356 = 0; v_i_87356 < 16; v_i_87356 = (1 + v_i_87356)) {\n            v__87375 = add(v__87375, v__87374[(v_i_87356 + (16 * v_MWidthC_1 * v_w_id_87353) + (16 * v_l_id_87354))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87357 = 0; \n            v__87379[v_l_id_87354] = id(v__87375); \n          }\n          /* end map_seq */\n          v_l_id_87354 = atomic_inc(&(v_work_idx_7326)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7320; \n        v_work_idx_7320 = 0; \n        int v_l_id_87358 = atomic_inc(&(v_work_idx_7320)); \n        while((v_l_id_87358 < 1)){\n          float v_tmp_87440 = 0.0f; \n          v__80917 = v_tmp_87440; \n          /* reduce_seq */\n          for (int v_i_87359 = 0; v_i_87359 < v_MWidthC_1; v_i_87359 = (1 + v_i_87359)) {\n            v__80917 = add(v__80917, v__87379[(v_i_87359 + (v_MWidthC_1 * v_l_id_87358))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87360 = 0; \n            v__87384[v_w_id_87353] = doubleMultiplyAdd(v__80917, v__87365, v__87364[v_w_id_87353], v__87366); \n          }\n          /* end map_seq */\n          v_l_id_87358 = atomic_inc(&(v_work_idx_7320)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87353 = atomic_inc(v_work_idx_7328); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87361",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87362",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87363",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87365",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87366",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87374",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87368",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87384",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87379",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}