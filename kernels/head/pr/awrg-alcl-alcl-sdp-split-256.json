{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100689, const global float* restrict v__100690, const global float* restrict v__100691, const global float* restrict v__100692, float v__100693, float v__100694, global float* v__100712, global float* v__100702, global int* v__100696, local float* v__100707, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100698; \n  float v__100703; \n  float v__80917; \n  /* Private Memory */\n  float v__100700_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8576 = v__100696; \n    local int v_w_id_100681; \n    if (get_local_id(0) == 0) {\n      v_w_id_100681 = atomic_inc(v_work_idx_8576); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100681 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8574; \n        v_work_idx_8574 = 0; \n        int v_l_id_100682 = atomic_inc(&(v_work_idx_8574)); \n        while((v_l_id_100682 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100683 = 0; v_i_100683 < 256; v_i_100683 = (1 + v_i_100683)) {\n            float v_tmp_100763 = 0.0f; \n            v__100698 = v_tmp_100763; \n            int v_index_100764 = v__100689[(v_l_id_100682 + (256 * v_MWidthC_1 * v_w_id_100681) + (v_MWidthC_1 * v_i_100683))]; \n            if (v_index_100764 < 0) {\n              v__100700_0 = v__100698; \n            } else {\n              if (v_index_100764 >= v_VLength_3) {\n                v__100700_0 = v__100698; \n              } else {\n                v__100700_0 = v__100691[v_index_100764]; \n              }\n            }\n            v__100702[(255 + (256 * v_MWidthC_1 * v_w_id_100681) + (-1 * v_i_100683) + (256 * v_l_id_100682))] = mult(v__100700_0, v__100690[(v_l_id_100682 + (256 * v_MWidthC_1 * v_w_id_100681) + (v_MWidthC_1 * v_i_100683))]); \n          }\n          /* end map_seq */\n          float v_tmp_100765 = 0.0f; \n          v__100703 = v_tmp_100765; \n          /* reduce_seq */\n          for (int v_i_100684 = 0; v_i_100684 < 256; v_i_100684 = (1 + v_i_100684)) {\n            v__100703 = add(v__100703, v__100702[(v_i_100684 + (256 * v_MWidthC_1 * v_w_id_100681) + (256 * v_l_id_100682))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100685 = 0; \n            v__100707[v_l_id_100682] = id(v__100703); \n          }\n          /* end map_seq */\n          v_l_id_100682 = atomic_inc(&(v_work_idx_8574)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8568; \n        v_work_idx_8568 = 0; \n        int v_l_id_100686 = atomic_inc(&(v_work_idx_8568)); \n        while((v_l_id_100686 < 1)){\n          float v_tmp_100768 = 0.0f; \n          v__80917 = v_tmp_100768; \n          /* reduce_seq */\n          for (int v_i_100687 = 0; v_i_100687 < v_MWidthC_1; v_i_100687 = (1 + v_i_100687)) {\n            v__80917 = add(v__80917, v__100707[(v_i_100687 + (v_MWidthC_1 * v_l_id_100686))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100688 = 0; \n            v__100712[v_w_id_100681] = doubleMultiplyAdd(v__80917, v__100693, v__100692[v_w_id_100681], v__100694); \n          }\n          /* end map_seq */\n          v_l_id_100686 = atomic_inc(&(v_work_idx_8568)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100681 = atomic_inc(v_work_idx_8576); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100689",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100690",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100691",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100693",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100694",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100702",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100696",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100712",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100707",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}