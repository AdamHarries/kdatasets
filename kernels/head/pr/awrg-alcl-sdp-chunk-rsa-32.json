{
  "name" : "awrg-alcl-sdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__117534, const global float* restrict v__117535, const global float* restrict v__117536, const global float* restrict v__117537, float v__117538, float v__117539, global float* v__117554, global float* v__117553, global int* v__117541, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117542; \n  float v__117545; \n  /* Private Memory */\n  float v__117547_0;\n  \n  float v__117549_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9311 = v__117541; \n    local int v_w_id_117529; \n    if (get_local_id(0) == 0) {\n      v_w_id_117529 = atomic_inc(v_work_idx_9311); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117529 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9309; \n        v_work_idx_9309 = 0; \n        int v_l_id_117530 = atomic_inc(&(v_work_idx_9309)); \n        while((v_l_id_117530 < 32)){\n          float v_tmp_117586 = 0.0f; \n          v__117542 = v_tmp_117586; \n          /* reduce_seq */\n          int v_stop_117587 = min(v__117534[(1 + (v__117534[(v_l_id_117530 + (32 * v_w_id_117529))] / 4))], ((global int*)(v__117535 + (((global int*)(v__117535))[(v_l_id_117530 + (32 * v_w_id_117529))] / 4)))[1]); \n          for (int v_i_117531 = 0; v_i_117531 < v_stop_117587; v_i_117531 = (1 + v_i_117531)) {\n            float v_tmp_117595 = 0.0f; \n            v__117545 = v_tmp_117595; \n            int v_index_117597 = v__117534[(2 + v_i_117531 + (v__117534[(v_l_id_117530 + (32 * v_w_id_117529))] / 4))]; \n            if (v_index_117597 < 0) {\n              v__117547_0 = v__117545; \n            } else {\n              if (v_index_117597 >= v_MWidthC_1) {\n                v__117547_0 = v__117545; \n              } else {\n                v__117547_0 = v__117536[v_index_117597]; \n              }\n            }\n            v__117549_0 = mult(v__117535[(2 + v_i_117531 + (((global int*)(v__117535))[(v_l_id_117530 + (32 * v_w_id_117529))] / 4))], v__117547_0); \n            v__117542 = add(v__117542, v__117549_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117532 = 0; \n            v__117553[(v_l_id_117530 + (32 * v_w_id_117529))] = doubleMultiplyAdd(v__117542, v__117538, v__117537[(v_l_id_117530 + (32 * v_w_id_117529))], v__117539); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117533 = 0; \n            v__117554[(v_l_id_117530 + (32 * v_w_id_117529))] = id(v__117553[(v_l_id_117530 + (32 * v_w_id_117529))]); \n          }\n          /* end map_seq */\n          v_l_id_117530 = atomic_inc(&(v_work_idx_9309)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117529 = atomic_inc(v_work_idx_9311); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__117534",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__117535",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__117536",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__117537",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117538",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117539",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117541",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}