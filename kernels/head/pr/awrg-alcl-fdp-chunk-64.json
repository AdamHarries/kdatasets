{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93578, const global float* restrict v__93579, const global float* restrict v__93580, const global float* restrict v__93581, float v__93582, float v__93583, global float* v__93597, global int* v__93585, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93587; \n  float v__93589; \n  /* Private Memory */\n  float v__93591_0;\n  \n  float v__93593_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7902 = v__93585; \n    local int v_w_id_93574; \n    if (get_local_id(0) == 0) {\n      v_w_id_93574 = atomic_inc(v_work_idx_7902); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93574 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7900; \n        v_work_idx_7900 = 0; \n        int v_l_id_93575 = atomic_inc(&(v_work_idx_7900)); \n        while((v_l_id_93575 < 64)){\n          float v_tmp_93634 = 0.0f; \n          v__93587 = v_tmp_93634; \n          /* reduce_seq */\n          for (int v_i_93576 = 0; v_i_93576 < v_MWidthC_1; v_i_93576 = (1 + v_i_93576)) {\n            float v_tmp_93635 = 0.0f; \n            v__93589 = v_tmp_93635; \n            int v_index_93636 = v__93578[(v_i_93576 + (64 * v_MWidthC_1 * v_w_id_93574) + (v_MWidthC_1 * v_l_id_93575))]; \n            if (v_index_93636 < 0) {\n              v__93591_0 = v__93589; \n            } else {\n              if (v_index_93636 >= v_VLength_3) {\n                v__93591_0 = v__93589; \n              } else {\n                v__93591_0 = v__93580[v_index_93636]; \n              }\n            }\n            v__93593_0 = mult(v__93591_0, v__93579[(v_i_93576 + (64 * v_MWidthC_1 * v_w_id_93574) + (v_MWidthC_1 * v_l_id_93575))]); \n            v__93587 = add(v__93593_0, v__93587); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93577 = 0; \n            v__93597[(v_l_id_93575 + (64 * v_w_id_93574))] = doubleMultiplyAdd(v__93587, v__93582, v__93581[(v_l_id_93575 + (64 * v_w_id_93574))], v__93583); \n          }\n          /* end map_seq */\n          v_l_id_93575 = atomic_inc(&(v_work_idx_7900)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93574 = atomic_inc(v_work_idx_7902); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93578",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93580",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93582",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93583",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93585",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93597",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}