{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82460, const global float* restrict v__82461, const global float* restrict v__82462, const global float* restrict v__82463, float v__82464, float v__82465, global float* v__82482, local float* v__82477, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82468; \n  float v__82470; \n  float v__80917; \n  /* Private Memory */\n  float v__82472_0;\n  \n  float v__82474_0;\n  \n  for (int v_wg_id_82453 = get_group_id(0); v_wg_id_82453 < v_MHeight_2; v_wg_id_82453 = (v_wg_id_82453 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6862; \n      v_work_idx_6862 = 0; \n      int v_l_id_82454 = atomic_inc(&(v_work_idx_6862)); \n      while((v_l_id_82454 < v_MWidthC_1)){\n        float v_tmp_82535 = 0.0f; \n        v__82468 = v_tmp_82535; \n        /* reduce_seq */\n        for (int v_i_82455 = 0; v_i_82455 < 8; v_i_82455 = (1 + v_i_82455)) {\n          float v_tmp_82536 = 0.0f; \n          v__82470 = v_tmp_82536; \n          int v_index_82537 = v__82460[(v_l_id_82454 + (8 * v_MWidthC_1 * v_wg_id_82453) + (v_MWidthC_1 * v_i_82455))]; \n          if (v_index_82537 < 0) {\n            v__82472_0 = v__82470; \n          } else {\n            if (v_index_82537 >= v_VLength_3) {\n              v__82472_0 = v__82470; \n            } else {\n              v__82472_0 = v__82462[v_index_82537]; \n            }\n          }\n          v__82474_0 = mult(v__82472_0, v__82461[(v_l_id_82454 + (8 * v_MWidthC_1 * v_wg_id_82453) + (v_MWidthC_1 * v_i_82455))]); \n          v__82468 = add(v__82474_0, v__82468); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82456 = 0; \n          v__82477[v_l_id_82454] = id(v__82468); \n        }\n        /* end map_seq */\n        v_l_id_82454 = atomic_inc(&(v_work_idx_6862)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6857; \n      v_work_idx_6857 = 0; \n      int v_l_id_82457 = atomic_inc(&(v_work_idx_6857)); \n      while((v_l_id_82457 < 1)){\n        float v_tmp_82540 = 0.0f; \n        v__80917 = v_tmp_82540; \n        /* reduce_seq */\n        for (int v_i_82458 = 0; v_i_82458 < v_MWidthC_1; v_i_82458 = (1 + v_i_82458)) {\n          v__80917 = add(v__80917, v__82477[(v_i_82458 + (v_MWidthC_1 * v_l_id_82457))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82459 = 0; \n          v__82482[v_wg_id_82453] = doubleMultiplyAdd(v__80917, v__82464, v__82463[v_wg_id_82453], v__82465); \n        }\n        /* end map_seq */\n        v_l_id_82457 = atomic_inc(&(v_work_idx_6857)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82460",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82461",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82462",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82464",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82465",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82482",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82477",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}