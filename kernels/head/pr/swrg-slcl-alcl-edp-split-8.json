{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__81740, const global float* restrict v__81741, const global float* restrict v__81742, const global float* restrict v__81743, float v__81744, float v__81745, global float* v__81764, local float* v__81759, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81748; \n  float v__81750; \n  float v__80917; \n  /* Private Memory */\n  float v__81752_0;\n  \n  float v__81754_0;\n  \n  int v__81758_0;\n  \n  for (int v_wg_id_81733 = get_group_id(0); v_wg_id_81733 < v_MHeight_2; v_wg_id_81733 = (v_wg_id_81733 + get_num_groups(0))) {\n    for (int v_l_id_81734 = get_local_id(0); v_l_id_81734 < v_MWidthC_1; v_l_id_81734 = (v_l_id_81734 + get_local_size(0))) {\n      float v_tmp_81828 = 0.0f; \n      v__81748 = v_tmp_81828; \n      /* reduce_while_seq */\n      for (int v_i_81735 = 0; v_i_81735 < 8; v_i_81735 = (1 + v_i_81735)) {\n        v__81758_0 = check(v__81748, v__81740[(v_l_id_81734 + (8 * v_MWidthC_1 * v_wg_id_81733) + (v_MWidthC_1 * v_i_81735))]); \n        if (v__81758_0) {\n        } else {\n          break;\n        }\n        float v_tmp_81829 = 0.0f; \n        v__81750 = v_tmp_81829; \n        int v_index_81830 = v__81740[(v_l_id_81734 + (8 * v_MWidthC_1 * v_wg_id_81733) + (v_MWidthC_1 * v_i_81735))]; \n        if (v_index_81830 < 0) {\n          v__81752_0 = v__81750; \n        } else {\n          if (v_index_81830 >= v_VLength_3) {\n            v__81752_0 = v__81750; \n          } else {\n            v__81752_0 = v__81742[v_index_81830]; \n          }\n        }\n        v__81754_0 = mult(v__81752_0, v__81741[(v_l_id_81734 + (8 * v_MWidthC_1 * v_wg_id_81733) + (v_MWidthC_1 * v_i_81735))]); \n        v__81748 = add(v__81754_0, v__81748); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81736 = 0; \n        v__81759[v_l_id_81734] = id(v__81748); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6790; \n      v_work_idx_6790 = 0; \n      int v_l_id_81737 = atomic_inc(&(v_work_idx_6790)); \n      while((v_l_id_81737 < 1)){\n        float v_tmp_81833 = 0.0f; \n        v__80917 = v_tmp_81833; \n        /* reduce_seq */\n        for (int v_i_81738 = 0; v_i_81738 < v_MWidthC_1; v_i_81738 = (1 + v_i_81738)) {\n          v__80917 = add(v__80917, v__81759[(v_i_81738 + (v_MWidthC_1 * v_l_id_81737))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81739 = 0; \n          v__81764[v_wg_id_81733] = doubleMultiplyAdd(v__80917, v__81744, v__81743[v_wg_id_81733], v__81745); \n        }\n        /* end map_seq */\n        v_l_id_81737 = atomic_inc(&(v_work_idx_6790)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__81740",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81741",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81742",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81744",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81745",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81764",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81759",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}