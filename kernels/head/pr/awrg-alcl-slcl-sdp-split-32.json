{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90396, const global float* restrict v__90397, const global float* restrict v__90398, const global float* restrict v__90399, float v__90400, float v__90401, global float* v__90419, global float* v__90409, global int* v__90403, local float* v__90414, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90405; \n  float v__90410; \n  float v__80917; \n  /* Private Memory */\n  float v__90407_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7608 = v__90403; \n    local int v_w_id_90388; \n    if (get_local_id(0) == 0) {\n      v_w_id_90388 = atomic_inc(v_work_idx_7608); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90388 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7606; \n        v_work_idx_7606 = 0; \n        int v_l_id_90389 = atomic_inc(&(v_work_idx_7606)); \n        while((v_l_id_90389 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_90390 = 0; v_i_90390 < 32; v_i_90390 = (1 + v_i_90390)) {\n            float v_tmp_90474 = 0.0f; \n            v__90405 = v_tmp_90474; \n            int v_index_90475 = v__90396[(v_l_id_90389 + (32 * v_MWidthC_1 * v_w_id_90388) + (v_MWidthC_1 * v_i_90390))]; \n            if (v_index_90475 < 0) {\n              v__90407_0 = v__90405; \n            } else {\n              if (v_index_90475 >= v_VLength_3) {\n                v__90407_0 = v__90405; \n              } else {\n                v__90407_0 = v__90398[v_index_90475]; \n              }\n            }\n            v__90409[(31 + (32 * v_MWidthC_1 * v_w_id_90388) + (-1 * v_i_90390) + (32 * v_l_id_90389))] = mult(v__90407_0, v__90397[(v_l_id_90389 + (32 * v_MWidthC_1 * v_w_id_90388) + (v_MWidthC_1 * v_i_90390))]); \n          }\n          /* end map_seq */\n          float v_tmp_90476 = 0.0f; \n          v__90410 = v_tmp_90476; \n          /* reduce_seq */\n          for (int v_i_90391 = 0; v_i_90391 < 32; v_i_90391 = (1 + v_i_90391)) {\n            v__90410 = add(v__90410, v__90409[(v_i_90391 + (32 * v_MWidthC_1 * v_w_id_90388) + (32 * v_l_id_90389))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90392 = 0; \n            v__90414[v_l_id_90389] = id(v__90410); \n          }\n          /* end map_seq */\n          v_l_id_90389 = atomic_inc(&(v_work_idx_7606)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90393 = get_local_id(0); \n        float v_tmp_90479 = 0.0f; \n        v__80917 = v_tmp_90479; \n        /* reduce_seq */\n        for (int v_i_90394 = 0; v_i_90394 < v_MWidthC_1; v_i_90394 = (1 + v_i_90394)) {\n          v__80917 = add(v__80917, v__90414[(v_i_90394 + (v_MWidthC_1 * v_l_id_90393))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90395 = 0; \n          v__90419[v_w_id_90388] = doubleMultiplyAdd(v__80917, v__90400, v__90399[v_w_id_90388], v__90401); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90388 = atomic_inc(v_work_idx_7608); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90396",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90397",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90398",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90399",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90400",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90401",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90409",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90403",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90419",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90414",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}