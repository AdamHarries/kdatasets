{
  "name" : "swrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81916, const global float* restrict v__81917, const global float* restrict v__81918, const global float* restrict v__81919, float v__81920, float v__81921, global float* v__81934, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81924; \n  float v__81926; \n  /* Private Memory */\n  float v__81928_0;\n  \n  float v__81930_0;\n  \n  for (int v_wg_id_81912 = get_group_id(0); v_wg_id_81912 < ((v_MHeight_2)/(8)); v_wg_id_81912 = (v_wg_id_81912 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6807; \n      v_work_idx_6807 = 0; \n      int v_l_id_81913 = atomic_inc(&(v_work_idx_6807)); \n      while((v_l_id_81913 < 8)){\n        float v_tmp_81972 = 0.0f; \n        v__81924 = v_tmp_81972; \n        /* reduce_seq */\n        for (int v_i_81914 = 0; v_i_81914 < v_MWidthC_1; v_i_81914 = (1 + v_i_81914)) {\n          float v_tmp_81973 = 0.0f; \n          v__81926 = v_tmp_81973; \n          int v_index_81974 = v__81916[(v_i_81914 + (8 * v_MWidthC_1 * v_wg_id_81912) + (v_MWidthC_1 * v_l_id_81913))]; \n          if (v_index_81974 < 0) {\n            v__81928_0 = v__81926; \n          } else {\n            if (v_index_81974 >= v_VLength_3) {\n              v__81928_0 = v__81926; \n            } else {\n              v__81928_0 = v__81918[v_index_81974]; \n            }\n          }\n          v__81930_0 = mult(v__81928_0, v__81917[(v_i_81914 + (8 * v_MWidthC_1 * v_wg_id_81912) + (v_MWidthC_1 * v_l_id_81913))]); \n          v__81924 = add(v__81930_0, v__81924); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81915 = 0; \n          v__81934[(v_l_id_81913 + (8 * v_wg_id_81912))] = doubleMultiplyAdd(v__81924, v__81920, v__81919[(v_l_id_81913 + (8 * v_wg_id_81912))], v__81921); \n        }\n        /* end map_seq */\n        v_l_id_81913 = atomic_inc(&(v_work_idx_6807)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__81916",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81917",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81918",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81919",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81920",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81921",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81934",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}