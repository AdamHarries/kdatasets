{
  "name" : "swrg-alcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__115466, const global float* restrict v__115467, const global float* restrict v__115468, const global float* restrict v__115469, float v__115470, float v__115471, global float* v__115485, global float* v__115484, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__115473; \n  float v__115476; \n  /* Private Memory */\n  float v__115478_0;\n  \n  float v__115480_0;\n  \n  for (int v_wg_id_115461 = get_group_id(0); v_wg_id_115461 < ((v_MHeight_2)/(32)); v_wg_id_115461 = (v_wg_id_115461 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_9120; \n      v_work_idx_9120 = 0; \n      int v_l_id_115462 = atomic_inc(&(v_work_idx_9120)); \n      while((v_l_id_115462 < 32)){\n        float v_tmp_115518 = 0.0f; \n        v__115473 = v_tmp_115518; \n        /* reduce_seq */\n        int v_stop_115519 = min(v__115466[(1 + (v__115466[(v_l_id_115462 + (32 * v_wg_id_115461))] / 4))], ((global int*)(v__115467 + (((global int*)(v__115467))[(v_l_id_115462 + (32 * v_wg_id_115461))] / 4)))[1]); \n        for (int v_i_115463 = 0; v_i_115463 < v_stop_115519; v_i_115463 = (1 + v_i_115463)) {\n          float v_tmp_115527 = 0.0f; \n          v__115476 = v_tmp_115527; \n          int v_index_115529 = v__115466[(2 + v_i_115463 + (v__115466[(v_l_id_115462 + (32 * v_wg_id_115461))] / 4))]; \n          if (v_index_115529 < 0) {\n            v__115478_0 = v__115476; \n          } else {\n            if (v_index_115529 >= v_MWidthC_1) {\n              v__115478_0 = v__115476; \n            } else {\n              v__115478_0 = v__115468[v_index_115529]; \n            }\n          }\n          v__115480_0 = mult(v__115467[(2 + v_i_115463 + (((global int*)(v__115467))[(v_l_id_115462 + (32 * v_wg_id_115461))] / 4))], v__115478_0); \n          v__115473 = add(v__115473, v__115480_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115464 = 0; \n          v__115484[(v_l_id_115462 + (32 * v_wg_id_115461))] = doubleMultiplyAdd(v__115473, v__115470, v__115469[(v_l_id_115462 + (32 * v_wg_id_115461))], v__115471); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_115465 = 0; \n          v__115485[(v_l_id_115462 + (32 * v_wg_id_115461))] = id(v__115484[(v_l_id_115462 + (32 * v_wg_id_115461))]); \n        }\n        /* end map_seq */\n        v_l_id_115462 = atomic_inc(&(v_work_idx_9120)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__115466",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115467",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__115468",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__115469",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__115470",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__115471",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__115484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__115485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}