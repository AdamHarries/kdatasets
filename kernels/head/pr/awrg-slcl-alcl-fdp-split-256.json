{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99966, const global float* restrict v__99967, const global float* restrict v__99968, const global float* restrict v__99969, float v__99970, float v__99971, global float* v__99989, global int* v__99973, local float* v__99984, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99975; \n  float v__99977; \n  float v__80917; \n  /* Private Memory */\n  float v__99979_0;\n  \n  float v__99981_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8501 = v__99973; \n    local int v_w_id_99959; \n    if (get_local_id(0) == 0) {\n      v_w_id_99959 = atomic_inc(v_work_idx_8501); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99959 < v_MHeight_2)){\n      for (int v_l_id_99960 = get_local_id(0); v_l_id_99960 < v_MWidthC_1; v_l_id_99960 = (v_l_id_99960 + get_local_size(0))) {\n        float v_tmp_100048 = 0.0f; \n        v__99975 = v_tmp_100048; \n        /* reduce_seq */\n        for (int v_i_99961 = 0; v_i_99961 < 256; v_i_99961 = (1 + v_i_99961)) {\n          float v_tmp_100049 = 0.0f; \n          v__99977 = v_tmp_100049; \n          int v_index_100050 = v__99966[(v_l_id_99960 + (256 * v_MWidthC_1 * v_w_id_99959) + (v_MWidthC_1 * v_i_99961))]; \n          if (v_index_100050 < 0) {\n            v__99979_0 = v__99977; \n          } else {\n            if (v_index_100050 >= v_VLength_3) {\n              v__99979_0 = v__99977; \n            } else {\n              v__99979_0 = v__99968[v_index_100050]; \n            }\n          }\n          v__99981_0 = mult(v__99979_0, v__99967[(v_l_id_99960 + (256 * v_MWidthC_1 * v_w_id_99959) + (v_MWidthC_1 * v_i_99961))]); \n          v__99975 = add(v__99981_0, v__99975); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99962 = 0; \n          v__99984[v_l_id_99960] = id(v__99975); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8495; \n        v_work_idx_8495 = 0; \n        int v_l_id_99963 = atomic_inc(&(v_work_idx_8495)); \n        while((v_l_id_99963 < 1)){\n          float v_tmp_100053 = 0.0f; \n          v__80917 = v_tmp_100053; \n          /* reduce_seq */\n          for (int v_i_99964 = 0; v_i_99964 < v_MWidthC_1; v_i_99964 = (1 + v_i_99964)) {\n            v__80917 = add(v__80917, v__99984[(v_i_99964 + (v_MWidthC_1 * v_l_id_99963))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99965 = 0; \n            v__99989[v_w_id_99959] = doubleMultiplyAdd(v__80917, v__99970, v__99969[v_w_id_99959], v__99971); \n          }\n          /* end map_seq */\n          v_l_id_99963 = atomic_inc(&(v_work_idx_8495)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99959 = atomic_inc(v_work_idx_8501); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99966",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99967",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99968",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99970",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99971",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99973",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99984",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}