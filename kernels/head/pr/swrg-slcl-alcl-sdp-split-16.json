{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84868, const global float* restrict v__84869, const global float* restrict v__84870, const global float* restrict v__84871, float v__84872, float v__84873, global float* v__84890, global float* v__84880, local float* v__84885, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84876; \n  float v__84881; \n  float v__80917; \n  /* Private Memory */\n  float v__84878_0;\n  \n  for (int v_wg_id_84860 = get_group_id(0); v_wg_id_84860 < v_MHeight_2; v_wg_id_84860 = (v_wg_id_84860 + get_num_groups(0))) {\n    for (int v_l_id_84861 = get_local_id(0); v_l_id_84861 < v_MWidthC_1; v_l_id_84861 = (v_l_id_84861 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_84862 = 0; v_i_84862 < 16; v_i_84862 = (1 + v_i_84862)) {\n        float v_tmp_84951 = 0.0f; \n        v__84876 = v_tmp_84951; \n        int v_index_84952 = v__84868[(v_l_id_84861 + (16 * v_MWidthC_1 * v_wg_id_84860) + (v_MWidthC_1 * v_i_84862))]; \n        if (v_index_84952 < 0) {\n          v__84878_0 = v__84876; \n        } else {\n          if (v_index_84952 >= v_VLength_3) {\n            v__84878_0 = v__84876; \n          } else {\n            v__84878_0 = v__84870[v_index_84952]; \n          }\n        }\n        v__84880[(15 + (16 * v_MWidthC_1 * v_wg_id_84860) + (-1 * v_i_84862) + (16 * v_l_id_84861))] = mult(v__84878_0, v__84869[(v_l_id_84861 + (16 * v_MWidthC_1 * v_wg_id_84860) + (v_MWidthC_1 * v_i_84862))]); \n      }\n      /* end map_seq */\n      float v_tmp_84953 = 0.0f; \n      v__84881 = v_tmp_84953; \n      /* reduce_seq */\n      for (int v_i_84863 = 0; v_i_84863 < 16; v_i_84863 = (1 + v_i_84863)) {\n        v__84881 = add(v__84881, v__84880[(v_i_84863 + (16 * v_MWidthC_1 * v_wg_id_84860) + (16 * v_l_id_84861))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84864 = 0; \n        v__84885[v_l_id_84861] = id(v__84881); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7083; \n      v_work_idx_7083 = 0; \n      int v_l_id_84865 = atomic_inc(&(v_work_idx_7083)); \n      while((v_l_id_84865 < 1)){\n        float v_tmp_84956 = 0.0f; \n        v__80917 = v_tmp_84956; \n        /* reduce_seq */\n        for (int v_i_84866 = 0; v_i_84866 < v_MWidthC_1; v_i_84866 = (1 + v_i_84866)) {\n          v__80917 = add(v__80917, v__84885[(v_i_84866 + (v_MWidthC_1 * v_l_id_84865))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84867 = 0; \n          v__84890[v_wg_id_84860] = doubleMultiplyAdd(v__80917, v__84872, v__84871[v_wg_id_84860], v__84873); \n        }\n        /* end map_seq */\n        v_l_id_84865 = atomic_inc(&(v_work_idx_7083)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84868",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84869",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84870",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84871",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84872",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84873",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84880",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84890",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84885",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}