{
  "name" : "awrg-slcl-fdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__133690, const global float* restrict v__133691, const global float* restrict v__133692, const global float* restrict v__133693, float v__133694, float v__133695, global float* v__133710, global float* v__133709, global int* v__133697, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__133698; \n  float v__133701; \n  /* Private Memory */\n  float v__133703_0;\n  \n  float v__133705_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10753 = v__133697; \n    local int v_w_id_133685; \n    if (get_local_id(0) == 0) {\n      v_w_id_133685 = atomic_inc(v_work_idx_10753); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_133685 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_133686 = get_local_id(0); v_l_id_133686 < 512; v_l_id_133686 = (v_l_id_133686 + get_local_size(0))) {\n        float v_tmp_133746 = 0.0f; \n        v__133698 = v_tmp_133746; \n        /* reduce_seq */\n        int v_stop_133747 = min(v__133690[(1 + (v__133690[(v_l_id_133686 + (512 * v_w_id_133685))] / 4))], ((global int*)(v__133691 + (((global int*)(v__133691))[(v_l_id_133686 + (512 * v_w_id_133685))] / 4)))[1]); \n        for (int v_i_133687 = 0; v_i_133687 < v_stop_133747; v_i_133687 = (1 + v_i_133687)) {\n          float v_tmp_133755 = 0.0f; \n          v__133701 = v_tmp_133755; \n          int v_index_133757 = v__133690[(2 + v_i_133687 + (v__133690[(v_l_id_133686 + (512 * v_w_id_133685))] / 4))]; \n          if (v_index_133757 < 0) {\n            v__133703_0 = v__133701; \n          } else {\n            if (v_index_133757 >= v_MWidthC_1) {\n              v__133703_0 = v__133701; \n            } else {\n              v__133703_0 = v__133692[v_index_133757]; \n            }\n          }\n          v__133705_0 = mult(v__133691[(2 + v_i_133687 + (((global int*)(v__133691))[(v_l_id_133686 + (512 * v_w_id_133685))] / 4))], v__133703_0); \n          v__133698 = add(v__133698, v__133705_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133688 = 0; \n          v__133709[(v_l_id_133686 + (512 * v_w_id_133685))] = doubleMultiplyAdd(v__133698, v__133694, v__133693[(v_l_id_133686 + (512 * v_w_id_133685))], v__133695); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_133689 = 0; \n          v__133710[(v_l_id_133686 + (512 * v_w_id_133685))] = id(v__133709[(v_l_id_133686 + (512 * v_w_id_133685))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_133685 = atomic_inc(v_work_idx_10753); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__133690",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__133691",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__133692",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__133693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133694",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__133695",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__133709",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__133697",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__133710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}