{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99754, const global float* restrict v__99755, const global float* restrict v__99756, const global float* restrict v__99757, float v__99758, float v__99759, global float* v__99779, global int* v__99761, local float* v__99774, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99763; \n  float v__99765; \n  float v__80917; \n  /* Private Memory */\n  float v__99767_0;\n  \n  float v__99769_0;\n  \n  int v__99773_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8480 = v__99761; \n    local int v_w_id_99747; \n    if (get_local_id(0) == 0) {\n      v_w_id_99747 = atomic_inc(v_work_idx_8480); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99747 < v_MHeight_2)){\n      for (int v_l_id_99748 = get_local_id(0); v_l_id_99748 < v_MWidthC_1; v_l_id_99748 = (v_l_id_99748 + get_local_size(0))) {\n        float v_tmp_99845 = 0.0f; \n        v__99763 = v_tmp_99845; \n        /* reduce_while_seq */\n        for (int v_i_99749 = 0; v_i_99749 < 256; v_i_99749 = (1 + v_i_99749)) {\n          v__99773_0 = check(v__99763, v__99754[(v_l_id_99748 + (256 * v_MWidthC_1 * v_w_id_99747) + (v_MWidthC_1 * v_i_99749))]); \n          if (v__99773_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99846 = 0.0f; \n          v__99765 = v_tmp_99846; \n          int v_index_99847 = v__99754[(v_l_id_99748 + (256 * v_MWidthC_1 * v_w_id_99747) + (v_MWidthC_1 * v_i_99749))]; \n          if (v_index_99847 < 0) {\n            v__99767_0 = v__99765; \n          } else {\n            if (v_index_99847 >= v_VLength_3) {\n              v__99767_0 = v__99765; \n            } else {\n              v__99767_0 = v__99756[v_index_99847]; \n            }\n          }\n          v__99769_0 = mult(v__99767_0, v__99755[(v_l_id_99748 + (256 * v_MWidthC_1 * v_w_id_99747) + (v_MWidthC_1 * v_i_99749))]); \n          v__99763 = add(v__99769_0, v__99763); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99750 = 0; \n          v__99774[v_l_id_99748] = id(v__99763); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99751 = get_local_id(0); \n        float v_tmp_99850 = 0.0f; \n        v__80917 = v_tmp_99850; \n        /* reduce_seq */\n        for (int v_i_99752 = 0; v_i_99752 < v_MWidthC_1; v_i_99752 = (1 + v_i_99752)) {\n          v__80917 = add(v__80917, v__99774[(v_i_99752 + (v_MWidthC_1 * v_l_id_99751))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99753 = 0; \n          v__99779[v_w_id_99747] = doubleMultiplyAdd(v__80917, v__99758, v__99757[v_w_id_99747], v__99759); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99747 = atomic_inc(v_work_idx_8480); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99754",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99755",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99756",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99758",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99759",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99761",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99774",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}