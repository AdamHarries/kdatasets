{
  "name" : "swrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__88404, const global float* restrict v__88405, const global float* restrict v__88406, const global float* restrict v__88407, float v__88408, float v__88409, global float* v__88428, local float* v__88423, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88412; \n  float v__88414; \n  float v__80917; \n  /* Private Memory */\n  float v__88416_0;\n  \n  float v__88418_0;\n  \n  int v__88422_0;\n  \n  for (int v_wg_id_88397 = get_group_id(0); v_wg_id_88397 < v_MHeight_2; v_wg_id_88397 = (v_wg_id_88397 + get_num_groups(0))) {\n    for (int v_l_id_88398 = get_local_id(0); v_l_id_88398 < v_MWidthC_1; v_l_id_88398 = (v_l_id_88398 + get_local_size(0))) {\n      float v_tmp_88492 = 0.0f; \n      v__88412 = v_tmp_88492; \n      /* reduce_while_seq */\n      for (int v_i_88399 = 0; v_i_88399 < 32; v_i_88399 = (1 + v_i_88399)) {\n        v__88422_0 = check(v__88412, v__88404[(v_l_id_88398 + (32 * v_MWidthC_1 * v_wg_id_88397) + (v_MWidthC_1 * v_i_88399))]); \n        if (v__88422_0) {\n        } else {\n          break;\n        }\n        float v_tmp_88493 = 0.0f; \n        v__88414 = v_tmp_88493; \n        int v_index_88494 = v__88404[(v_l_id_88398 + (32 * v_MWidthC_1 * v_wg_id_88397) + (v_MWidthC_1 * v_i_88399))]; \n        if (v_index_88494 < 0) {\n          v__88416_0 = v__88414; \n        } else {\n          if (v_index_88494 >= v_VLength_3) {\n            v__88416_0 = v__88414; \n          } else {\n            v__88416_0 = v__88406[v_index_88494]; \n          }\n        }\n        v__88418_0 = mult(v__88416_0, v__88405[(v_l_id_88398 + (32 * v_MWidthC_1 * v_wg_id_88397) + (v_MWidthC_1 * v_i_88399))]); \n        v__88412 = add(v__88418_0, v__88412); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88400 = 0; \n        v__88423[v_l_id_88398] = id(v__88412); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7414; \n      v_work_idx_7414 = 0; \n      int v_l_id_88401 = atomic_inc(&(v_work_idx_7414)); \n      while((v_l_id_88401 < 1)){\n        float v_tmp_88497 = 0.0f; \n        v__80917 = v_tmp_88497; \n        /* reduce_seq */\n        for (int v_i_88402 = 0; v_i_88402 < v_MWidthC_1; v_i_88402 = (1 + v_i_88402)) {\n          v__80917 = add(v__80917, v__88423[(v_i_88402 + (v_MWidthC_1 * v_l_id_88401))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88403 = 0; \n          v__88428[v_wg_id_88397] = doubleMultiplyAdd(v__80917, v__88408, v__88407[v_wg_id_88397], v__88409); \n        }\n        /* end map_seq */\n        v_l_id_88401 = atomic_inc(&(v_work_idx_7414)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88404",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88405",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88406",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88407",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88408",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88409",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88428",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88423",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}