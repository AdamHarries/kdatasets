{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97450, const global float* restrict v__97451, const global float* restrict v__97452, const global float* restrict v__97453, float v__97454, float v__97455, global float* v__97473, global int* v__97457, local float* v__97468, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97459; \n  float v__97461; \n  float v__80917; \n  /* Private Memory */\n  float v__97463_0;\n  \n  float v__97465_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8275 = v__97457; \n    local int v_w_id_97443; \n    if (get_local_id(0) == 0) {\n      v_w_id_97443 = atomic_inc(v_work_idx_8275); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97443 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8273; \n        v_work_idx_8273 = 0; \n        int v_l_id_97444 = atomic_inc(&(v_work_idx_8273)); \n        while((v_l_id_97444 < v_MWidthC_1)){\n          float v_tmp_97524 = 0.0f; \n          v__97459 = v_tmp_97524; \n          /* reduce_seq */\n          for (int v_i_97445 = 0; v_i_97445 < 128; v_i_97445 = (1 + v_i_97445)) {\n            float v_tmp_97525 = 0.0f; \n            v__97461 = v_tmp_97525; \n            int v_index_97526 = v__97450[(v_l_id_97444 + (128 * v_MWidthC_1 * v_w_id_97443) + (v_MWidthC_1 * v_i_97445))]; \n            if (v_index_97526 < 0) {\n              v__97463_0 = v__97461; \n            } else {\n              if (v_index_97526 >= v_VLength_3) {\n                v__97463_0 = v__97461; \n              } else {\n                v__97463_0 = v__97452[v_index_97526]; \n              }\n            }\n            v__97465_0 = mult(v__97463_0, v__97451[(v_l_id_97444 + (128 * v_MWidthC_1 * v_w_id_97443) + (v_MWidthC_1 * v_i_97445))]); \n            v__97459 = add(v__97465_0, v__97459); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97446 = 0; \n            v__97468[v_l_id_97444] = id(v__97459); \n          }\n          /* end map_seq */\n          v_l_id_97444 = atomic_inc(&(v_work_idx_8273)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8268; \n        v_work_idx_8268 = 0; \n        int v_l_id_97447 = atomic_inc(&(v_work_idx_8268)); \n        while((v_l_id_97447 < 1)){\n          float v_tmp_97529 = 0.0f; \n          v__80917 = v_tmp_97529; \n          /* reduce_seq */\n          for (int v_i_97448 = 0; v_i_97448 < v_MWidthC_1; v_i_97448 = (1 + v_i_97448)) {\n            v__80917 = add(v__80917, v__97468[(v_i_97448 + (v_MWidthC_1 * v_l_id_97447))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97449 = 0; \n            v__97473[v_w_id_97443] = doubleMultiplyAdd(v__80917, v__97454, v__97453[v_w_id_97443], v__97455); \n          }\n          /* end map_seq */\n          v_l_id_97447 = atomic_inc(&(v_work_idx_8268)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97443 = atomic_inc(v_work_idx_8275); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__97450",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97451",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97452",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97454",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97455",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97457",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97468",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}