{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102643, const global float* restrict v__102644, const global float* restrict v__102645, const global float* restrict v__102646, float v__102647, float v__102648, global float* v__102662, global float* v__102656, global int* v__102650, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102652; \n  float v__102657; \n  /* Private Memory */\n  float v__102654_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8752 = v__102650; \n    local int v_w_id_102638; \n    if (get_local_id(0) == 0) {\n      v_w_id_102638 = atomic_inc(v_work_idx_8752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102638 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_102639 = get_local_id(0); v_l_id_102639 < 512; v_l_id_102639 = (v_l_id_102639 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102640 = 0; v_i_102640 < v_MWidthC_1; v_i_102640 = (1 + v_i_102640)) {\n          float v_tmp_102705 = 0.0f; \n          v__102652 = v_tmp_102705; \n          int v_index_102706 = v__102643[(v_i_102640 + (512 * v_MWidthC_1 * v_w_id_102638) + (v_MWidthC_1 * v_l_id_102639))]; \n          if (v_index_102706 < 0) {\n            v__102654_0 = v__102652; \n          } else {\n            if (v_index_102706 >= v_VLength_3) {\n              v__102654_0 = v__102652; \n            } else {\n              v__102654_0 = v__102645[v_index_102706]; \n            }\n          }\n          v__102656[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_102638) + (-1 * v_i_102640) + (v_MWidthC_1 * v_l_id_102639))] = mult(v__102654_0, v__102644[(v_i_102640 + (512 * v_MWidthC_1 * v_w_id_102638) + (v_MWidthC_1 * v_l_id_102639))]); \n        }\n        /* end map_seq */\n        float v_tmp_102707 = 0.0f; \n        v__102657 = v_tmp_102707; \n        /* reduce_seq */\n        for (int v_i_102641 = 0; v_i_102641 < v_MWidthC_1; v_i_102641 = (1 + v_i_102641)) {\n          v__102657 = add(v__102657, v__102656[(v_i_102641 + (512 * v_MWidthC_1 * v_w_id_102638) + (v_MWidthC_1 * v_l_id_102639))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102642 = 0; \n          v__102662[(v_l_id_102639 + (512 * v_w_id_102638))] = doubleMultiplyAdd(v__102657, v__102647, v__102646[(v_l_id_102639 + (512 * v_w_id_102638))], v__102648); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_102638 = atomic_inc(v_work_idx_8752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102643",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102644",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102645",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102647",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102648",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102656",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102650",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__102662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}