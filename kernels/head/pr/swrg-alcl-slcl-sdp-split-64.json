{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92062, const global float* restrict v__92063, const global float* restrict v__92064, const global float* restrict v__92065, float v__92066, float v__92067, global float* v__92084, global float* v__92074, local float* v__92079, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92070; \n  float v__92075; \n  float v__80917; \n  /* Private Memory */\n  float v__92072_0;\n  \n  for (int v_wg_id_92054 = get_group_id(0); v_wg_id_92054 < v_MHeight_2; v_wg_id_92054 = (v_wg_id_92054 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7759; \n      v_work_idx_7759 = 0; \n      int v_l_id_92055 = atomic_inc(&(v_work_idx_7759)); \n      while((v_l_id_92055 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_92056 = 0; v_i_92056 < 64; v_i_92056 = (1 + v_i_92056)) {\n          float v_tmp_92141 = 0.0f; \n          v__92070 = v_tmp_92141; \n          int v_index_92142 = v__92062[(v_l_id_92055 + (64 * v_MWidthC_1 * v_wg_id_92054) + (v_MWidthC_1 * v_i_92056))]; \n          if (v_index_92142 < 0) {\n            v__92072_0 = v__92070; \n          } else {\n            if (v_index_92142 >= v_VLength_3) {\n              v__92072_0 = v__92070; \n            } else {\n              v__92072_0 = v__92064[v_index_92142]; \n            }\n          }\n          v__92074[(63 + (64 * v_MWidthC_1 * v_wg_id_92054) + (-1 * v_i_92056) + (64 * v_l_id_92055))] = mult(v__92072_0, v__92063[(v_l_id_92055 + (64 * v_MWidthC_1 * v_wg_id_92054) + (v_MWidthC_1 * v_i_92056))]); \n        }\n        /* end map_seq */\n        float v_tmp_92143 = 0.0f; \n        v__92075 = v_tmp_92143; \n        /* reduce_seq */\n        for (int v_i_92057 = 0; v_i_92057 < 64; v_i_92057 = (1 + v_i_92057)) {\n          v__92075 = add(v__92075, v__92074[(v_i_92057 + (64 * v_MWidthC_1 * v_wg_id_92054) + (64 * v_l_id_92055))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92058 = 0; \n          v__92079[v_l_id_92055] = id(v__92075); \n        }\n        /* end map_seq */\n        v_l_id_92055 = atomic_inc(&(v_work_idx_7759)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92059 = get_local_id(0); \n      float v_tmp_92146 = 0.0f; \n      v__80917 = v_tmp_92146; \n      /* reduce_seq */\n      for (int v_i_92060 = 0; v_i_92060 < v_MWidthC_1; v_i_92060 = (1 + v_i_92060)) {\n        v__80917 = add(v__80917, v__92079[(v_i_92060 + (v_MWidthC_1 * v_l_id_92059))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92061 = 0; \n        v__92084[v_wg_id_92054] = doubleMultiplyAdd(v__80917, v__92066, v__92065[v_wg_id_92054], v__92067); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92062",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92063",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92064",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92065",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92066",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92067",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92074",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92084",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92079",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}