{
  "name" : "awrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90315, const global float* restrict v__90316, const global float* restrict v__90317, const global float* restrict v__90318, float v__90319, float v__90320, global float* v__90336, global int* v__90322, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90323; \n  float v__90326; \n  /* Private Memory */\n  float v__90328_0;\n  \n  float v__90330_0;\n  \n  int v__90334_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7597 = v__90322; \n    local int v_w_id_90311; \n    if (get_local_id(0) == 0) {\n      v_w_id_90311 = atomic_inc(v_work_idx_7597); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90311 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7595; \n        v_work_idx_7595 = 0; \n        int v_l_id_90312 = atomic_inc(&(v_work_idx_7595)); \n        while((v_l_id_90312 < 32)){\n          float v_tmp_90379 = 0.0f; \n          v__90323 = v_tmp_90379; \n          /* reduce_while_seq */\n          for (int v_i_90313 = 0; v_i_90313 < v_MWidthC_1; v_i_90313 = (1 + v_i_90313)) {\n            v__90334_0 = check(v__90323, v__90315[(v_i_90313 + (32 * v_MWidthC_1 * v_w_id_90311) + (v_MWidthC_1 * v_l_id_90312))]); \n            if (v__90334_0) {\n            } else {\n              break;\n            }\n            float v_tmp_90380 = 0.0f; \n            v__90326 = v_tmp_90380; \n            int v_index_90381 = v__90315[(v_i_90313 + (32 * v_MWidthC_1 * v_w_id_90311) + (v_MWidthC_1 * v_l_id_90312))]; \n            if (v_index_90381 < 0) {\n              v__90328_0 = v__90326; \n            } else {\n              if (v_index_90381 >= v_VLength_3) {\n                v__90328_0 = v__90326; \n              } else {\n                v__90328_0 = v__90317[v_index_90381]; \n              }\n            }\n            v__90330_0 = mult(v__90328_0, v__90316[(v_i_90313 + (32 * v_MWidthC_1 * v_w_id_90311) + (v_MWidthC_1 * v_l_id_90312))]); \n            v__90323 = add(v__90330_0, v__90323); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90314 = 0; \n            v__90336[(v_l_id_90312 + (32 * v_w_id_90311))] = doubleMultiplyAdd(v__90323, v__90319, v__90318[(v_l_id_90312 + (32 * v_w_id_90311))], v__90320); \n          }\n          /* end map_seq */\n          v_l_id_90312 = atomic_inc(&(v_work_idx_7595)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90311 = atomic_inc(v_work_idx_7597); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90315",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90316",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90317",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90319",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90320",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90322",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}