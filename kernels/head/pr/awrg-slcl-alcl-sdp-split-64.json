{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93201, const global float* restrict v__93202, const global float* restrict v__93203, const global float* restrict v__93204, float v__93205, float v__93206, global float* v__93224, global float* v__93214, global int* v__93208, local float* v__93219, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93210; \n  float v__93215; \n  float v__80917; \n  /* Private Memory */\n  float v__93212_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7867 = v__93208; \n    local int v_w_id_93193; \n    if (get_local_id(0) == 0) {\n      v_w_id_93193 = atomic_inc(v_work_idx_7867); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93193 < v_MHeight_2)){\n      for (int v_l_id_93194 = get_local_id(0); v_l_id_93194 < v_MWidthC_1; v_l_id_93194 = (v_l_id_93194 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_93195 = 0; v_i_93195 < 64; v_i_93195 = (1 + v_i_93195)) {\n          float v_tmp_93283 = 0.0f; \n          v__93210 = v_tmp_93283; \n          int v_index_93284 = v__93201[(v_l_id_93194 + (64 * v_MWidthC_1 * v_w_id_93193) + (v_MWidthC_1 * v_i_93195))]; \n          if (v_index_93284 < 0) {\n            v__93212_0 = v__93210; \n          } else {\n            if (v_index_93284 >= v_VLength_3) {\n              v__93212_0 = v__93210; \n            } else {\n              v__93212_0 = v__93203[v_index_93284]; \n            }\n          }\n          v__93214[(63 + (64 * v_MWidthC_1 * v_w_id_93193) + (-1 * v_i_93195) + (64 * v_l_id_93194))] = mult(v__93212_0, v__93202[(v_l_id_93194 + (64 * v_MWidthC_1 * v_w_id_93193) + (v_MWidthC_1 * v_i_93195))]); \n        }\n        /* end map_seq */\n        float v_tmp_93285 = 0.0f; \n        v__93215 = v_tmp_93285; \n        /* reduce_seq */\n        for (int v_i_93196 = 0; v_i_93196 < 64; v_i_93196 = (1 + v_i_93196)) {\n          v__93215 = add(v__93215, v__93214[(v_i_93196 + (64 * v_MWidthC_1 * v_w_id_93193) + (64 * v_l_id_93194))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93197 = 0; \n          v__93219[v_l_id_93194] = id(v__93215); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7860; \n        v_work_idx_7860 = 0; \n        int v_l_id_93198 = atomic_inc(&(v_work_idx_7860)); \n        while((v_l_id_93198 < 1)){\n          float v_tmp_93288 = 0.0f; \n          v__80917 = v_tmp_93288; \n          /* reduce_seq */\n          for (int v_i_93199 = 0; v_i_93199 < v_MWidthC_1; v_i_93199 = (1 + v_i_93199)) {\n            v__80917 = add(v__80917, v__93219[(v_i_93199 + (v_MWidthC_1 * v_l_id_93198))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93200 = 0; \n            v__93224[v_w_id_93193] = doubleMultiplyAdd(v__80917, v__93205, v__93204[v_w_id_93193], v__93206); \n          }\n          /* end map_seq */\n          v_l_id_93198 = atomic_inc(&(v_work_idx_7860)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93193 = atomic_inc(v_work_idx_7867); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93201",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93202",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93203",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93204",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93205",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93206",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93214",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93208",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93224",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93219",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}