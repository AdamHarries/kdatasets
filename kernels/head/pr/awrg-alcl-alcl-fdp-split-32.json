{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90786, const global float* restrict v__90787, const global float* restrict v__90788, const global float* restrict v__90789, float v__90790, float v__90791, global float* v__90809, global int* v__90793, local float* v__90804, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90795; \n  float v__90797; \n  float v__80917; \n  /* Private Memory */\n  float v__90799_0;\n  \n  float v__90801_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7651 = v__90793; \n    local int v_w_id_90779; \n    if (get_local_id(0) == 0) {\n      v_w_id_90779 = atomic_inc(v_work_idx_7651); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90779 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7649; \n        v_work_idx_7649 = 0; \n        int v_l_id_90780 = atomic_inc(&(v_work_idx_7649)); \n        while((v_l_id_90780 < v_MWidthC_1)){\n          float v_tmp_90860 = 0.0f; \n          v__90795 = v_tmp_90860; \n          /* reduce_seq */\n          for (int v_i_90781 = 0; v_i_90781 < 32; v_i_90781 = (1 + v_i_90781)) {\n            float v_tmp_90861 = 0.0f; \n            v__90797 = v_tmp_90861; \n            int v_index_90862 = v__90786[(v_l_id_90780 + (32 * v_MWidthC_1 * v_w_id_90779) + (v_MWidthC_1 * v_i_90781))]; \n            if (v_index_90862 < 0) {\n              v__90799_0 = v__90797; \n            } else {\n              if (v_index_90862 >= v_VLength_3) {\n                v__90799_0 = v__90797; \n              } else {\n                v__90799_0 = v__90788[v_index_90862]; \n              }\n            }\n            v__90801_0 = mult(v__90799_0, v__90787[(v_l_id_90780 + (32 * v_MWidthC_1 * v_w_id_90779) + (v_MWidthC_1 * v_i_90781))]); \n            v__90795 = add(v__90801_0, v__90795); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90782 = 0; \n            v__90804[v_l_id_90780] = id(v__90795); \n          }\n          /* end map_seq */\n          v_l_id_90780 = atomic_inc(&(v_work_idx_7649)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7644; \n        v_work_idx_7644 = 0; \n        int v_l_id_90783 = atomic_inc(&(v_work_idx_7644)); \n        while((v_l_id_90783 < 1)){\n          float v_tmp_90865 = 0.0f; \n          v__80917 = v_tmp_90865; \n          /* reduce_seq */\n          for (int v_i_90784 = 0; v_i_90784 < v_MWidthC_1; v_i_90784 = (1 + v_i_90784)) {\n            v__80917 = add(v__80917, v__90804[(v_i_90784 + (v_MWidthC_1 * v_l_id_90783))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90785 = 0; \n            v__90809[v_w_id_90779] = doubleMultiplyAdd(v__80917, v__90790, v__90789[v_w_id_90779], v__90791); \n          }\n          /* end map_seq */\n          v_l_id_90783 = atomic_inc(&(v_work_idx_7644)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90779 = atomic_inc(v_work_idx_7651); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90786",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90787",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90788",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90789",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90790",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90791",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90793",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90804",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}