{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__85886, const global float* restrict v__85887, const global float* restrict v__85888, const global float* restrict v__85889, float v__85890, float v__85891, global float* v__85910, local float* v__85905, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85894; \n  float v__85896; \n  float v__80917; \n  /* Private Memory */\n  float v__85898_0;\n  \n  float v__85900_0;\n  \n  int v__85904_0;\n  \n  for (int v_wg_id_85879 = get_group_id(0); v_wg_id_85879 < v_MHeight_2; v_wg_id_85879 = (v_wg_id_85879 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7184; \n      v_work_idx_7184 = 0; \n      int v_l_id_85880 = atomic_inc(&(v_work_idx_7184)); \n      while((v_l_id_85880 < v_MWidthC_1)){\n        float v_tmp_85966 = 0.0f; \n        v__85894 = v_tmp_85966; \n        /* reduce_while_seq */\n        for (int v_i_85881 = 0; v_i_85881 < 16; v_i_85881 = (1 + v_i_85881)) {\n          v__85904_0 = check(v__85894, v__85886[(v_l_id_85880 + (16 * v_MWidthC_1 * v_wg_id_85879) + (v_MWidthC_1 * v_i_85881))]); \n          if (v__85904_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85967 = 0.0f; \n          v__85896 = v_tmp_85967; \n          int v_index_85968 = v__85886[(v_l_id_85880 + (16 * v_MWidthC_1 * v_wg_id_85879) + (v_MWidthC_1 * v_i_85881))]; \n          if (v_index_85968 < 0) {\n            v__85898_0 = v__85896; \n          } else {\n            if (v_index_85968 >= v_VLength_3) {\n              v__85898_0 = v__85896; \n            } else {\n              v__85898_0 = v__85888[v_index_85968]; \n            }\n          }\n          v__85900_0 = mult(v__85898_0, v__85887[(v_l_id_85880 + (16 * v_MWidthC_1 * v_wg_id_85879) + (v_MWidthC_1 * v_i_85881))]); \n          v__85894 = add(v__85900_0, v__85894); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85882 = 0; \n          v__85905[v_l_id_85880] = id(v__85894); \n        }\n        /* end map_seq */\n        v_l_id_85880 = atomic_inc(&(v_work_idx_7184)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7179; \n      v_work_idx_7179 = 0; \n      int v_l_id_85883 = atomic_inc(&(v_work_idx_7179)); \n      while((v_l_id_85883 < 1)){\n        float v_tmp_85971 = 0.0f; \n        v__80917 = v_tmp_85971; \n        /* reduce_seq */\n        for (int v_i_85884 = 0; v_i_85884 < v_MWidthC_1; v_i_85884 = (1 + v_i_85884)) {\n          v__80917 = add(v__80917, v__85905[(v_i_85884 + (v_MWidthC_1 * v_l_id_85883))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85885 = 0; \n          v__85910[v_wg_id_85879] = doubleMultiplyAdd(v__80917, v__85890, v__85889[v_wg_id_85879], v__85891); \n        }\n        /* end map_seq */\n        v_l_id_85883 = atomic_inc(&(v_work_idx_7179)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85886",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85887",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85888",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85890",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85891",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85910",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85905",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}