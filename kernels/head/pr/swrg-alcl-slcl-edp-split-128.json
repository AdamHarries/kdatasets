{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__95590, const global float* restrict v__95591, const global float* restrict v__95592, const global float* restrict v__95593, float v__95594, float v__95595, global float* v__95614, local float* v__95609, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95598; \n  float v__95600; \n  float v__80917; \n  /* Private Memory */\n  float v__95602_0;\n  \n  float v__95604_0;\n  \n  int v__95608_0;\n  \n  for (int v_wg_id_95583 = get_group_id(0); v_wg_id_95583 < v_MHeight_2; v_wg_id_95583 = (v_wg_id_95583 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8089; \n      v_work_idx_8089 = 0; \n      int v_l_id_95584 = atomic_inc(&(v_work_idx_8089)); \n      while((v_l_id_95584 < v_MWidthC_1)){\n        float v_tmp_95674 = 0.0f; \n        v__95598 = v_tmp_95674; \n        /* reduce_while_seq */\n        for (int v_i_95585 = 0; v_i_95585 < 128; v_i_95585 = (1 + v_i_95585)) {\n          v__95608_0 = check(v__95598, v__95590[(v_l_id_95584 + (128 * v_MWidthC_1 * v_wg_id_95583) + (v_MWidthC_1 * v_i_95585))]); \n          if (v__95608_0) {\n          } else {\n            break;\n          }\n          float v_tmp_95675 = 0.0f; \n          v__95600 = v_tmp_95675; \n          int v_index_95676 = v__95590[(v_l_id_95584 + (128 * v_MWidthC_1 * v_wg_id_95583) + (v_MWidthC_1 * v_i_95585))]; \n          if (v_index_95676 < 0) {\n            v__95602_0 = v__95600; \n          } else {\n            if (v_index_95676 >= v_VLength_3) {\n              v__95602_0 = v__95600; \n            } else {\n              v__95602_0 = v__95592[v_index_95676]; \n            }\n          }\n          v__95604_0 = mult(v__95602_0, v__95591[(v_l_id_95584 + (128 * v_MWidthC_1 * v_wg_id_95583) + (v_MWidthC_1 * v_i_95585))]); \n          v__95598 = add(v__95604_0, v__95598); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95586 = 0; \n          v__95609[v_l_id_95584] = id(v__95598); \n        }\n        /* end map_seq */\n        v_l_id_95584 = atomic_inc(&(v_work_idx_8089)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_95587 = get_local_id(0); \n      float v_tmp_95679 = 0.0f; \n      v__80917 = v_tmp_95679; \n      /* reduce_seq */\n      for (int v_i_95588 = 0; v_i_95588 < v_MWidthC_1; v_i_95588 = (1 + v_i_95588)) {\n        v__80917 = add(v__80917, v__95609[(v_i_95588 + (v_MWidthC_1 * v_l_id_95587))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_95589 = 0; \n        v__95614[v_wg_id_95583] = doubleMultiplyAdd(v__80917, v__95594, v__95593[v_wg_id_95583], v__95595); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95590",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95591",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95592",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95594",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95595",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95609",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}