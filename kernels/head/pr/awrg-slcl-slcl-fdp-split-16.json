{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86321, const global float* restrict v__86322, const global float* restrict v__86323, const global float* restrict v__86324, float v__86325, float v__86326, global float* v__86344, global int* v__86328, local float* v__86339, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86330; \n  float v__86332; \n  float v__80917; \n  /* Private Memory */\n  float v__86334_0;\n  \n  float v__86336_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7223 = v__86328; \n    local int v_w_id_86314; \n    if (get_local_id(0) == 0) {\n      v_w_id_86314 = atomic_inc(v_work_idx_7223); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86314 < v_MHeight_2)){\n      for (int v_l_id_86315 = get_local_id(0); v_l_id_86315 < v_MWidthC_1; v_l_id_86315 = (v_l_id_86315 + get_local_size(0))) {\n        float v_tmp_86407 = 0.0f; \n        v__86330 = v_tmp_86407; \n        /* reduce_seq */\n        for (int v_i_86316 = 0; v_i_86316 < 16; v_i_86316 = (1 + v_i_86316)) {\n          float v_tmp_86408 = 0.0f; \n          v__86332 = v_tmp_86408; \n          int v_index_86409 = v__86321[(v_l_id_86315 + (16 * v_MWidthC_1 * v_w_id_86314) + (v_MWidthC_1 * v_i_86316))]; \n          if (v_index_86409 < 0) {\n            v__86334_0 = v__86332; \n          } else {\n            if (v_index_86409 >= v_VLength_3) {\n              v__86334_0 = v__86332; \n            } else {\n              v__86334_0 = v__86323[v_index_86409]; \n            }\n          }\n          v__86336_0 = mult(v__86334_0, v__86322[(v_l_id_86315 + (16 * v_MWidthC_1 * v_w_id_86314) + (v_MWidthC_1 * v_i_86316))]); \n          v__86330 = add(v__86336_0, v__86330); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86317 = 0; \n          v__86339[v_l_id_86315] = id(v__86330); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86318 = get_local_id(0); \n        float v_tmp_86412 = 0.0f; \n        v__80917 = v_tmp_86412; \n        /* reduce_seq */\n        for (int v_i_86319 = 0; v_i_86319 < v_MWidthC_1; v_i_86319 = (1 + v_i_86319)) {\n          v__80917 = add(v__80917, v__86339[(v_i_86319 + (v_MWidthC_1 * v_l_id_86318))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86320 = 0; \n          v__86344[v_w_id_86314] = doubleMultiplyAdd(v__80917, v__86325, v__86324[v_w_id_86314], v__86326); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86314 = atomic_inc(v_work_idx_7223); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86321",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86322",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86323",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86324",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86325",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86326",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86328",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86339",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}