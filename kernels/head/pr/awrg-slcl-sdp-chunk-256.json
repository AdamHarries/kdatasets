{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99311, const global float* restrict v__99312, const global float* restrict v__99313, const global float* restrict v__99314, float v__99315, float v__99316, global float* v__99330, global float* v__99324, global int* v__99318, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99320; \n  float v__99325; \n  /* Private Memory */\n  float v__99322_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8440 = v__99318; \n    local int v_w_id_99306; \n    if (get_local_id(0) == 0) {\n      v_w_id_99306 = atomic_inc(v_work_idx_8440); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99306 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_99307 = get_local_id(0); v_l_id_99307 < 256; v_l_id_99307 = (v_l_id_99307 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99308 = 0; v_i_99308 < v_MWidthC_1; v_i_99308 = (1 + v_i_99308)) {\n          float v_tmp_99373 = 0.0f; \n          v__99320 = v_tmp_99373; \n          int v_index_99374 = v__99311[(v_i_99308 + (256 * v_MWidthC_1 * v_w_id_99306) + (v_MWidthC_1 * v_l_id_99307))]; \n          if (v_index_99374 < 0) {\n            v__99322_0 = v__99320; \n          } else {\n            if (v_index_99374 >= v_VLength_3) {\n              v__99322_0 = v__99320; \n            } else {\n              v__99322_0 = v__99313[v_index_99374]; \n            }\n          }\n          v__99324[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_99306) + (-1 * v_i_99308) + (v_MWidthC_1 * v_l_id_99307))] = mult(v__99322_0, v__99312[(v_i_99308 + (256 * v_MWidthC_1 * v_w_id_99306) + (v_MWidthC_1 * v_l_id_99307))]); \n        }\n        /* end map_seq */\n        float v_tmp_99375 = 0.0f; \n        v__99325 = v_tmp_99375; \n        /* reduce_seq */\n        for (int v_i_99309 = 0; v_i_99309 < v_MWidthC_1; v_i_99309 = (1 + v_i_99309)) {\n          v__99325 = add(v__99325, v__99324[(v_i_99309 + (256 * v_MWidthC_1 * v_w_id_99306) + (v_MWidthC_1 * v_l_id_99307))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99310 = 0; \n          v__99330[(v_l_id_99307 + (256 * v_w_id_99306))] = doubleMultiplyAdd(v__99325, v__99315, v__99314[(v_l_id_99307 + (256 * v_w_id_99306))], v__99316); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_99306 = atomic_inc(v_work_idx_8440); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99311",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99312",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99313",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99314",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99315",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99316",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99324",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99318",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99330",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}