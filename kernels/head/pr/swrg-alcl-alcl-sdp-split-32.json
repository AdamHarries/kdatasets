{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89030, const global float* restrict v__89031, const global float* restrict v__89032, const global float* restrict v__89033, float v__89034, float v__89035, global float* v__89052, global float* v__89042, local float* v__89047, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89038; \n  float v__89043; \n  float v__80917; \n  /* Private Memory */\n  float v__89040_0;\n  \n  for (int v_wg_id_89022 = get_group_id(0); v_wg_id_89022 < v_MHeight_2; v_wg_id_89022 = (v_wg_id_89022 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7476; \n      v_work_idx_7476 = 0; \n      int v_l_id_89023 = atomic_inc(&(v_work_idx_7476)); \n      while((v_l_id_89023 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_89024 = 0; v_i_89024 < 32; v_i_89024 = (1 + v_i_89024)) {\n          float v_tmp_89105 = 0.0f; \n          v__89038 = v_tmp_89105; \n          int v_index_89106 = v__89030[(v_l_id_89023 + (32 * v_MWidthC_1 * v_wg_id_89022) + (v_MWidthC_1 * v_i_89024))]; \n          if (v_index_89106 < 0) {\n            v__89040_0 = v__89038; \n          } else {\n            if (v_index_89106 >= v_VLength_3) {\n              v__89040_0 = v__89038; \n            } else {\n              v__89040_0 = v__89032[v_index_89106]; \n            }\n          }\n          v__89042[(31 + (32 * v_MWidthC_1 * v_wg_id_89022) + (-1 * v_i_89024) + (32 * v_l_id_89023))] = mult(v__89040_0, v__89031[(v_l_id_89023 + (32 * v_MWidthC_1 * v_wg_id_89022) + (v_MWidthC_1 * v_i_89024))]); \n        }\n        /* end map_seq */\n        float v_tmp_89107 = 0.0f; \n        v__89043 = v_tmp_89107; \n        /* reduce_seq */\n        for (int v_i_89025 = 0; v_i_89025 < 32; v_i_89025 = (1 + v_i_89025)) {\n          v__89043 = add(v__89043, v__89042[(v_i_89025 + (32 * v_MWidthC_1 * v_wg_id_89022) + (32 * v_l_id_89023))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89026 = 0; \n          v__89047[v_l_id_89023] = id(v__89043); \n        }\n        /* end map_seq */\n        v_l_id_89023 = atomic_inc(&(v_work_idx_7476)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7470; \n      v_work_idx_7470 = 0; \n      int v_l_id_89027 = atomic_inc(&(v_work_idx_7470)); \n      while((v_l_id_89027 < 1)){\n        float v_tmp_89110 = 0.0f; \n        v__80917 = v_tmp_89110; \n        /* reduce_seq */\n        for (int v_i_89028 = 0; v_i_89028 < v_MWidthC_1; v_i_89028 = (1 + v_i_89028)) {\n          v__80917 = add(v__80917, v__89047[(v_i_89028 + (v_MWidthC_1 * v_l_id_89027))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89029 = 0; \n          v__89052[v_wg_id_89022] = doubleMultiplyAdd(v__80917, v__89034, v__89033[v_wg_id_89022], v__89035); \n        }\n        /* end map_seq */\n        v_l_id_89027 = atomic_inc(&(v_work_idx_7470)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89030",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89031",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89032",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89033",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89034",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89035",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89042",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__89052",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89047",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}