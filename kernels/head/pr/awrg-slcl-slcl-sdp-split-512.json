{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102876, const global float* restrict v__102877, const global float* restrict v__102878, const global float* restrict v__102879, float v__102880, float v__102881, global float* v__102899, global float* v__102889, global int* v__102883, local float* v__102894, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102885; \n  float v__102890; \n  float v__80917; \n  /* Private Memory */\n  float v__102887_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8774 = v__102883; \n    local int v_w_id_102868; \n    if (get_local_id(0) == 0) {\n      v_w_id_102868 = atomic_inc(v_work_idx_8774); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102868 < v_MHeight_2)){\n      for (int v_l_id_102869 = get_local_id(0); v_l_id_102869 < v_MWidthC_1; v_l_id_102869 = (v_l_id_102869 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102870 = 0; v_i_102870 < 512; v_i_102870 = (1 + v_i_102870)) {\n          float v_tmp_102962 = 0.0f; \n          v__102885 = v_tmp_102962; \n          int v_index_102963 = v__102876[(v_l_id_102869 + (512 * v_MWidthC_1 * v_w_id_102868) + (v_MWidthC_1 * v_i_102870))]; \n          if (v_index_102963 < 0) {\n            v__102887_0 = v__102885; \n          } else {\n            if (v_index_102963 >= v_VLength_3) {\n              v__102887_0 = v__102885; \n            } else {\n              v__102887_0 = v__102878[v_index_102963]; \n            }\n          }\n          v__102889[(511 + (512 * v_MWidthC_1 * v_w_id_102868) + (-1 * v_i_102870) + (512 * v_l_id_102869))] = mult(v__102887_0, v__102877[(v_l_id_102869 + (512 * v_MWidthC_1 * v_w_id_102868) + (v_MWidthC_1 * v_i_102870))]); \n        }\n        /* end map_seq */\n        float v_tmp_102964 = 0.0f; \n        v__102890 = v_tmp_102964; \n        /* reduce_seq */\n        for (int v_i_102871 = 0; v_i_102871 < 512; v_i_102871 = (1 + v_i_102871)) {\n          v__102890 = add(v__102890, v__102889[(v_i_102871 + (512 * v_MWidthC_1 * v_w_id_102868) + (512 * v_l_id_102869))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102872 = 0; \n          v__102894[v_l_id_102869] = id(v__102890); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_102873 = get_local_id(0); \n        float v_tmp_102967 = 0.0f; \n        v__80917 = v_tmp_102967; \n        /* reduce_seq */\n        for (int v_i_102874 = 0; v_i_102874 < v_MWidthC_1; v_i_102874 = (1 + v_i_102874)) {\n          v__80917 = add(v__80917, v__102894[(v_i_102874 + (v_MWidthC_1 * v_l_id_102873))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102875 = 0; \n          v__102899[v_w_id_102868] = doubleMultiplyAdd(v__80917, v__102880, v__102879[v_w_id_102868], v__102881); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_102868 = atomic_inc(v_work_idx_8774); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102876",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102877",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102878",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102880",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102881",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102889",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102883",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__102899",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102894",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}