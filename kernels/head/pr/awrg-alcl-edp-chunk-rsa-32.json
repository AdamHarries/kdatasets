{
  "name" : "awrg-alcl-edp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__117690, const global float* restrict v__117691, const global float* restrict v__117692, const global float* restrict v__117693, float v__117694, float v__117695, global float* v__117710, global float* v__117709, global int* v__117697, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__117698; \n  float v__117701; \n  /* Private Memory */\n  float v__117703_0;\n  \n  float v__117705_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9325 = v__117697; \n    local int v_w_id_117685; \n    if (get_local_id(0) == 0) {\n      v_w_id_117685 = atomic_inc(v_work_idx_9325); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_117685 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9323; \n        v_work_idx_9323 = 0; \n        int v_l_id_117686 = atomic_inc(&(v_work_idx_9323)); \n        while((v_l_id_117686 < 32)){\n          float v_tmp_117742 = 0.0f; \n          v__117698 = v_tmp_117742; \n          /* reduce_seq */\n          int v_stop_117743 = min(v__117690[(1 + (v__117690[(v_l_id_117686 + (32 * v_w_id_117685))] / 4))], ((global int*)(v__117691 + (((global int*)(v__117691))[(v_l_id_117686 + (32 * v_w_id_117685))] / 4)))[1]); \n          for (int v_i_117687 = 0; v_i_117687 < v_stop_117743; v_i_117687 = (1 + v_i_117687)) {\n            float v_tmp_117751 = 0.0f; \n            v__117701 = v_tmp_117751; \n            int v_index_117753 = v__117690[(2 + v_i_117687 + (v__117690[(v_l_id_117686 + (32 * v_w_id_117685))] / 4))]; \n            if (v_index_117753 < 0) {\n              v__117703_0 = v__117701; \n            } else {\n              if (v_index_117753 >= v_MWidthC_1) {\n                v__117703_0 = v__117701; \n              } else {\n                v__117703_0 = v__117692[v_index_117753]; \n              }\n            }\n            v__117705_0 = mult(v__117691[(2 + v_i_117687 + (((global int*)(v__117691))[(v_l_id_117686 + (32 * v_w_id_117685))] / 4))], v__117703_0); \n            v__117698 = add(v__117698, v__117705_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117688 = 0; \n            v__117709[(v_l_id_117686 + (32 * v_w_id_117685))] = doubleMultiplyAdd(v__117698, v__117694, v__117693[(v_l_id_117686 + (32 * v_w_id_117685))], v__117695); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_117689 = 0; \n            v__117710[(v_l_id_117686 + (32 * v_w_id_117685))] = id(v__117709[(v_l_id_117686 + (32 * v_w_id_117685))]); \n          }\n          /* end map_seq */\n          v_l_id_117686 = atomic_inc(&(v_work_idx_9323)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_117685 = atomic_inc(v_work_idx_9325); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__117690",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__117691",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__117692",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__117693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117694",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__117695",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__117709",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__117697",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__117710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}