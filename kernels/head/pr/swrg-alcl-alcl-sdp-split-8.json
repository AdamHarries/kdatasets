{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82366, const global float* restrict v__82367, const global float* restrict v__82368, const global float* restrict v__82369, float v__82370, float v__82371, global float* v__82388, global float* v__82378, local float* v__82383, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82374; \n  float v__82379; \n  float v__80917; \n  /* Private Memory */\n  float v__82376_0;\n  \n  for (int v_wg_id_82358 = get_group_id(0); v_wg_id_82358 < v_MHeight_2; v_wg_id_82358 = (v_wg_id_82358 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6852; \n      v_work_idx_6852 = 0; \n      int v_l_id_82359 = atomic_inc(&(v_work_idx_6852)); \n      while((v_l_id_82359 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_82360 = 0; v_i_82360 < 8; v_i_82360 = (1 + v_i_82360)) {\n          float v_tmp_82441 = 0.0f; \n          v__82374 = v_tmp_82441; \n          int v_index_82442 = v__82366[(v_l_id_82359 + (8 * v_MWidthC_1 * v_wg_id_82358) + (v_MWidthC_1 * v_i_82360))]; \n          if (v_index_82442 < 0) {\n            v__82376_0 = v__82374; \n          } else {\n            if (v_index_82442 >= v_VLength_3) {\n              v__82376_0 = v__82374; \n            } else {\n              v__82376_0 = v__82368[v_index_82442]; \n            }\n          }\n          v__82378[(7 + (8 * v_MWidthC_1 * v_wg_id_82358) + (-1 * v_i_82360) + (8 * v_l_id_82359))] = mult(v__82376_0, v__82367[(v_l_id_82359 + (8 * v_MWidthC_1 * v_wg_id_82358) + (v_MWidthC_1 * v_i_82360))]); \n        }\n        /* end map_seq */\n        float v_tmp_82443 = 0.0f; \n        v__82379 = v_tmp_82443; \n        /* reduce_seq */\n        for (int v_i_82361 = 0; v_i_82361 < 8; v_i_82361 = (1 + v_i_82361)) {\n          v__82379 = add(v__82379, v__82378[(v_i_82361 + (8 * v_MWidthC_1 * v_wg_id_82358) + (8 * v_l_id_82359))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82362 = 0; \n          v__82383[v_l_id_82359] = id(v__82379); \n        }\n        /* end map_seq */\n        v_l_id_82359 = atomic_inc(&(v_work_idx_6852)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6846; \n      v_work_idx_6846 = 0; \n      int v_l_id_82363 = atomic_inc(&(v_work_idx_6846)); \n      while((v_l_id_82363 < 1)){\n        float v_tmp_82446 = 0.0f; \n        v__80917 = v_tmp_82446; \n        /* reduce_seq */\n        for (int v_i_82364 = 0; v_i_82364 < v_MWidthC_1; v_i_82364 = (1 + v_i_82364)) {\n          v__80917 = add(v__80917, v__82383[(v_i_82364 + (v_MWidthC_1 * v_l_id_82363))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82365 = 0; \n          v__82388[v_wg_id_82358] = doubleMultiplyAdd(v__80917, v__82370, v__82369[v_wg_id_82358], v__82371); \n        }\n        /* end map_seq */\n        v_l_id_82363 = atomic_inc(&(v_work_idx_6846)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82366",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82367",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82378",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__82388",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82383",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}