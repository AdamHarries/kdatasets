{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90493, const global float* restrict v__90494, const global float* restrict v__90495, const global float* restrict v__90496, float v__90497, float v__90498, global float* v__90516, global int* v__90500, local float* v__90511, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90502; \n  float v__90504; \n  float v__80917; \n  /* Private Memory */\n  float v__90506_0;\n  \n  float v__90508_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7618 = v__90500; \n    local int v_w_id_90486; \n    if (get_local_id(0) == 0) {\n      v_w_id_90486 = atomic_inc(v_work_idx_7618); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90486 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7616; \n        v_work_idx_7616 = 0; \n        int v_l_id_90487 = atomic_inc(&(v_work_idx_7616)); \n        while((v_l_id_90487 < v_MWidthC_1)){\n          float v_tmp_90571 = 0.0f; \n          v__90502 = v_tmp_90571; \n          /* reduce_seq */\n          for (int v_i_90488 = 0; v_i_90488 < 32; v_i_90488 = (1 + v_i_90488)) {\n            float v_tmp_90572 = 0.0f; \n            v__90504 = v_tmp_90572; \n            int v_index_90573 = v__90493[(v_l_id_90487 + (32 * v_MWidthC_1 * v_w_id_90486) + (v_MWidthC_1 * v_i_90488))]; \n            if (v_index_90573 < 0) {\n              v__90506_0 = v__90504; \n            } else {\n              if (v_index_90573 >= v_VLength_3) {\n                v__90506_0 = v__90504; \n              } else {\n                v__90506_0 = v__90495[v_index_90573]; \n              }\n            }\n            v__90508_0 = mult(v__90506_0, v__90494[(v_l_id_90487 + (32 * v_MWidthC_1 * v_w_id_90486) + (v_MWidthC_1 * v_i_90488))]); \n            v__90502 = add(v__90508_0, v__90502); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90489 = 0; \n            v__90511[v_l_id_90487] = id(v__90502); \n          }\n          /* end map_seq */\n          v_l_id_90487 = atomic_inc(&(v_work_idx_7616)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90490 = get_local_id(0); \n        float v_tmp_90576 = 0.0f; \n        v__80917 = v_tmp_90576; \n        /* reduce_seq */\n        for (int v_i_90491 = 0; v_i_90491 < v_MWidthC_1; v_i_90491 = (1 + v_i_90491)) {\n          v__80917 = add(v__80917, v__90511[(v_i_90491 + (v_MWidthC_1 * v_l_id_90490))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90492 = 0; \n          v__90516[v_w_id_90486] = doubleMultiplyAdd(v__80917, v__90497, v__90496[v_w_id_90486], v__90498); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90486 = atomic_inc(v_work_idx_7618); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90493",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90494",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90495",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90496",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90497",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90498",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90500",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90516",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90511",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}