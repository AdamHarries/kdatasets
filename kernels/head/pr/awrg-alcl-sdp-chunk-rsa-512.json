{
  "name" : "awrg-alcl-sdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__134702, const global float* restrict v__134703, const global float* restrict v__134704, const global float* restrict v__134705, float v__134706, float v__134707, global float* v__134722, global float* v__134721, global int* v__134709, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__134710; \n  float v__134713; \n  /* Private Memory */\n  float v__134715_0;\n  \n  float v__134717_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_10847 = v__134709; \n    local int v_w_id_134697; \n    if (get_local_id(0) == 0) {\n      v_w_id_134697 = atomic_inc(v_work_idx_10847); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_134697 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_10845; \n        v_work_idx_10845 = 0; \n        int v_l_id_134698 = atomic_inc(&(v_work_idx_10845)); \n        while((v_l_id_134698 < 512)){\n          float v_tmp_134754 = 0.0f; \n          v__134710 = v_tmp_134754; \n          /* reduce_seq */\n          int v_stop_134755 = min(v__134702[(1 + (v__134702[(v_l_id_134698 + (512 * v_w_id_134697))] / 4))], ((global int*)(v__134703 + (((global int*)(v__134703))[(v_l_id_134698 + (512 * v_w_id_134697))] / 4)))[1]); \n          for (int v_i_134699 = 0; v_i_134699 < v_stop_134755; v_i_134699 = (1 + v_i_134699)) {\n            float v_tmp_134763 = 0.0f; \n            v__134713 = v_tmp_134763; \n            int v_index_134765 = v__134702[(2 + v_i_134699 + (v__134702[(v_l_id_134698 + (512 * v_w_id_134697))] / 4))]; \n            if (v_index_134765 < 0) {\n              v__134715_0 = v__134713; \n            } else {\n              if (v_index_134765 >= v_MWidthC_1) {\n                v__134715_0 = v__134713; \n              } else {\n                v__134715_0 = v__134704[v_index_134765]; \n              }\n            }\n            v__134717_0 = mult(v__134703[(2 + v_i_134699 + (((global int*)(v__134703))[(v_l_id_134698 + (512 * v_w_id_134697))] / 4))], v__134715_0); \n            v__134710 = add(v__134710, v__134717_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134700 = 0; \n            v__134721[(v_l_id_134698 + (512 * v_w_id_134697))] = doubleMultiplyAdd(v__134710, v__134706, v__134705[(v_l_id_134698 + (512 * v_w_id_134697))], v__134707); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_134701 = 0; \n            v__134722[(v_l_id_134698 + (512 * v_w_id_134697))] = id(v__134721[(v_l_id_134698 + (512 * v_w_id_134697))]); \n          }\n          /* end map_seq */\n          v_l_id_134698 = atomic_inc(&(v_work_idx_10845)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_134697 = atomic_inc(v_work_idx_10847); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__134702",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__134703",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__134704",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__134705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__134707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__134721",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__134709",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__134722",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}