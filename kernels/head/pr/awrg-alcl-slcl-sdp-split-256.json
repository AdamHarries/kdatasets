{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100392, const global float* restrict v__100393, const global float* restrict v__100394, const global float* restrict v__100395, float v__100396, float v__100397, global float* v__100415, global float* v__100405, global int* v__100399, local float* v__100410, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100401; \n  float v__100406; \n  float v__80917; \n  /* Private Memory */\n  float v__100403_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8544 = v__100399; \n    local int v_w_id_100384; \n    if (get_local_id(0) == 0) {\n      v_w_id_100384 = atomic_inc(v_work_idx_8544); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100384 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8542; \n        v_work_idx_8542 = 0; \n        int v_l_id_100385 = atomic_inc(&(v_work_idx_8542)); \n        while((v_l_id_100385 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100386 = 0; v_i_100386 < 256; v_i_100386 = (1 + v_i_100386)) {\n            float v_tmp_100470 = 0.0f; \n            v__100401 = v_tmp_100470; \n            int v_index_100471 = v__100392[(v_l_id_100385 + (256 * v_MWidthC_1 * v_w_id_100384) + (v_MWidthC_1 * v_i_100386))]; \n            if (v_index_100471 < 0) {\n              v__100403_0 = v__100401; \n            } else {\n              if (v_index_100471 >= v_VLength_3) {\n                v__100403_0 = v__100401; \n              } else {\n                v__100403_0 = v__100394[v_index_100471]; \n              }\n            }\n            v__100405[(255 + (256 * v_MWidthC_1 * v_w_id_100384) + (-1 * v_i_100386) + (256 * v_l_id_100385))] = mult(v__100403_0, v__100393[(v_l_id_100385 + (256 * v_MWidthC_1 * v_w_id_100384) + (v_MWidthC_1 * v_i_100386))]); \n          }\n          /* end map_seq */\n          float v_tmp_100472 = 0.0f; \n          v__100406 = v_tmp_100472; \n          /* reduce_seq */\n          for (int v_i_100387 = 0; v_i_100387 < 256; v_i_100387 = (1 + v_i_100387)) {\n            v__100406 = add(v__100406, v__100405[(v_i_100387 + (256 * v_MWidthC_1 * v_w_id_100384) + (256 * v_l_id_100385))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100388 = 0; \n            v__100410[v_l_id_100385] = id(v__100406); \n          }\n          /* end map_seq */\n          v_l_id_100385 = atomic_inc(&(v_work_idx_8542)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100389 = get_local_id(0); \n        float v_tmp_100475 = 0.0f; \n        v__80917 = v_tmp_100475; \n        /* reduce_seq */\n        for (int v_i_100390 = 0; v_i_100390 < v_MWidthC_1; v_i_100390 = (1 + v_i_100390)) {\n          v__80917 = add(v__80917, v__100410[(v_i_100390 + (v_MWidthC_1 * v_l_id_100389))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100391 = 0; \n          v__100415[v_w_id_100384] = doubleMultiplyAdd(v__80917, v__100396, v__100395[v_w_id_100384], v__100397); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100384 = atomic_inc(v_work_idx_8544); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100392",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100393",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100394",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100396",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100397",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100405",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100399",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100415",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100410",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}