{
  "name" : "swrg-alcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85496, const global float* restrict v__85497, const global float* restrict v__85498, const global float* restrict v__85499, float v__85500, float v__85501, global float* v__85518, local float* v__85513, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85504; \n  float v__85506; \n  float v__80917; \n  /* Private Memory */\n  float v__85508_0;\n  \n  float v__85510_0;\n  \n  for (int v_wg_id_85489 = get_group_id(0); v_wg_id_85489 < v_MHeight_2; v_wg_id_85489 = (v_wg_id_85489 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7144; \n      v_work_idx_7144 = 0; \n      int v_l_id_85490 = atomic_inc(&(v_work_idx_7144)); \n      while((v_l_id_85490 < v_MWidthC_1)){\n        float v_tmp_85575 = 0.0f; \n        v__85504 = v_tmp_85575; \n        /* reduce_seq */\n        for (int v_i_85491 = 0; v_i_85491 < 16; v_i_85491 = (1 + v_i_85491)) {\n          float v_tmp_85576 = 0.0f; \n          v__85506 = v_tmp_85576; \n          int v_index_85577 = v__85496[(v_l_id_85490 + (16 * v_MWidthC_1 * v_wg_id_85489) + (v_MWidthC_1 * v_i_85491))]; \n          if (v_index_85577 < 0) {\n            v__85508_0 = v__85506; \n          } else {\n            if (v_index_85577 >= v_VLength_3) {\n              v__85508_0 = v__85506; \n            } else {\n              v__85508_0 = v__85498[v_index_85577]; \n            }\n          }\n          v__85510_0 = mult(v__85508_0, v__85497[(v_l_id_85490 + (16 * v_MWidthC_1 * v_wg_id_85489) + (v_MWidthC_1 * v_i_85491))]); \n          v__85504 = add(v__85510_0, v__85504); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85492 = 0; \n          v__85513[v_l_id_85490] = id(v__85504); \n        }\n        /* end map_seq */\n        v_l_id_85490 = atomic_inc(&(v_work_idx_7144)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85493 = get_local_id(0); \n      float v_tmp_85580 = 0.0f; \n      v__80917 = v_tmp_85580; \n      /* reduce_seq */\n      for (int v_i_85494 = 0; v_i_85494 < v_MWidthC_1; v_i_85494 = (1 + v_i_85494)) {\n        v__80917 = add(v__80917, v__85513[(v_i_85494 + (v_MWidthC_1 * v_l_id_85493))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85495 = 0; \n        v__85518[v_wg_id_85489] = doubleMultiplyAdd(v__80917, v__85500, v__85499[v_wg_id_85489], v__85501); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85496",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85497",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85498",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85499",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85500",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85501",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85513",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}