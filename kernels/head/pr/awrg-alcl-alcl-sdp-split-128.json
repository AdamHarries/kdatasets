{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97357, const global float* restrict v__97358, const global float* restrict v__97359, const global float* restrict v__97360, float v__97361, float v__97362, global float* v__97380, global float* v__97370, global int* v__97364, local float* v__97375, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97366; \n  float v__97371; \n  float v__80917; \n  /* Private Memory */\n  float v__97368_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8264 = v__97364; \n    local int v_w_id_97349; \n    if (get_local_id(0) == 0) {\n      v_w_id_97349 = atomic_inc(v_work_idx_8264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97349 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8262; \n        v_work_idx_8262 = 0; \n        int v_l_id_97350 = atomic_inc(&(v_work_idx_8262)); \n        while((v_l_id_97350 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_97351 = 0; v_i_97351 < 128; v_i_97351 = (1 + v_i_97351)) {\n            float v_tmp_97431 = 0.0f; \n            v__97366 = v_tmp_97431; \n            int v_index_97432 = v__97357[(v_l_id_97350 + (128 * v_MWidthC_1 * v_w_id_97349) + (v_MWidthC_1 * v_i_97351))]; \n            if (v_index_97432 < 0) {\n              v__97368_0 = v__97366; \n            } else {\n              if (v_index_97432 >= v_VLength_3) {\n                v__97368_0 = v__97366; \n              } else {\n                v__97368_0 = v__97359[v_index_97432]; \n              }\n            }\n            v__97370[(127 + (128 * v_MWidthC_1 * v_w_id_97349) + (-1 * v_i_97351) + (128 * v_l_id_97350))] = mult(v__97368_0, v__97358[(v_l_id_97350 + (128 * v_MWidthC_1 * v_w_id_97349) + (v_MWidthC_1 * v_i_97351))]); \n          }\n          /* end map_seq */\n          float v_tmp_97433 = 0.0f; \n          v__97371 = v_tmp_97433; \n          /* reduce_seq */\n          for (int v_i_97352 = 0; v_i_97352 < 128; v_i_97352 = (1 + v_i_97352)) {\n            v__97371 = add(v__97371, v__97370[(v_i_97352 + (128 * v_MWidthC_1 * v_w_id_97349) + (128 * v_l_id_97350))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97353 = 0; \n            v__97375[v_l_id_97350] = id(v__97371); \n          }\n          /* end map_seq */\n          v_l_id_97350 = atomic_inc(&(v_work_idx_8262)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8256; \n        v_work_idx_8256 = 0; \n        int v_l_id_97354 = atomic_inc(&(v_work_idx_8256)); \n        while((v_l_id_97354 < 1)){\n          float v_tmp_97436 = 0.0f; \n          v__80917 = v_tmp_97436; \n          /* reduce_seq */\n          for (int v_i_97355 = 0; v_i_97355 < v_MWidthC_1; v_i_97355 = (1 + v_i_97355)) {\n            v__80917 = add(v__80917, v__97375[(v_i_97355 + (v_MWidthC_1 * v_l_id_97354))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97356 = 0; \n            v__97380[v_w_id_97349] = doubleMultiplyAdd(v__80917, v__97361, v__97360[v_w_id_97349], v__97362); \n          }\n          /* end map_seq */\n          v_l_id_97354 = atomic_inc(&(v_work_idx_8256)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97349 = atomic_inc(v_work_idx_8264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97357",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97358",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97359",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97361",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97362",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97370",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97364",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97375",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}