{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102358, const global float* restrict v__102359, const global float* restrict v__102360, const global float* restrict v__102361, float v__102362, float v__102363, global float* v__102380, global float* v__102370, local float* v__102375, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102366; \n  float v__102371; \n  float v__80917; \n  /* Private Memory */\n  float v__102368_0;\n  \n  for (int v_wg_id_102350 = get_group_id(0); v_wg_id_102350 < v_MHeight_2; v_wg_id_102350 = (v_wg_id_102350 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8724; \n      v_work_idx_8724 = 0; \n      int v_l_id_102351 = atomic_inc(&(v_work_idx_8724)); \n      while((v_l_id_102351 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102352 = 0; v_i_102352 < 512; v_i_102352 = (1 + v_i_102352)) {\n          float v_tmp_102433 = 0.0f; \n          v__102366 = v_tmp_102433; \n          int v_index_102434 = v__102358[(v_l_id_102351 + (512 * v_MWidthC_1 * v_wg_id_102350) + (v_MWidthC_1 * v_i_102352))]; \n          if (v_index_102434 < 0) {\n            v__102368_0 = v__102366; \n          } else {\n            if (v_index_102434 >= v_VLength_3) {\n              v__102368_0 = v__102366; \n            } else {\n              v__102368_0 = v__102360[v_index_102434]; \n            }\n          }\n          v__102370[(511 + (512 * v_MWidthC_1 * v_wg_id_102350) + (-1 * v_i_102352) + (512 * v_l_id_102351))] = mult(v__102368_0, v__102359[(v_l_id_102351 + (512 * v_MWidthC_1 * v_wg_id_102350) + (v_MWidthC_1 * v_i_102352))]); \n        }\n        /* end map_seq */\n        float v_tmp_102435 = 0.0f; \n        v__102371 = v_tmp_102435; \n        /* reduce_seq */\n        for (int v_i_102353 = 0; v_i_102353 < 512; v_i_102353 = (1 + v_i_102353)) {\n          v__102371 = add(v__102371, v__102370[(v_i_102353 + (512 * v_MWidthC_1 * v_wg_id_102350) + (512 * v_l_id_102351))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102354 = 0; \n          v__102375[v_l_id_102351] = id(v__102371); \n        }\n        /* end map_seq */\n        v_l_id_102351 = atomic_inc(&(v_work_idx_8724)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8718; \n      v_work_idx_8718 = 0; \n      int v_l_id_102355 = atomic_inc(&(v_work_idx_8718)); \n      while((v_l_id_102355 < 1)){\n        float v_tmp_102438 = 0.0f; \n        v__80917 = v_tmp_102438; \n        /* reduce_seq */\n        for (int v_i_102356 = 0; v_i_102356 < v_MWidthC_1; v_i_102356 = (1 + v_i_102356)) {\n          v__80917 = add(v__80917, v__102375[(v_i_102356 + (v_MWidthC_1 * v_l_id_102355))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102357 = 0; \n          v__102380[v_wg_id_102350] = doubleMultiplyAdd(v__80917, v__102362, v__102361[v_wg_id_102350], v__102363); \n        }\n        /* end map_seq */\n        v_l_id_102355 = atomic_inc(&(v_work_idx_8718)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102358",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102359",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102360",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102361",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102362",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102363",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102370",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102375",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}