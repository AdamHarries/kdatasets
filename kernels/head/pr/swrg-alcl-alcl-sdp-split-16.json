{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85698, const global float* restrict v__85699, const global float* restrict v__85700, const global float* restrict v__85701, float v__85702, float v__85703, global float* v__85720, global float* v__85710, local float* v__85715, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85706; \n  float v__85711; \n  float v__80917; \n  /* Private Memory */\n  float v__85708_0;\n  \n  for (int v_wg_id_85690 = get_group_id(0); v_wg_id_85690 < v_MHeight_2; v_wg_id_85690 = (v_wg_id_85690 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7164; \n      v_work_idx_7164 = 0; \n      int v_l_id_85691 = atomic_inc(&(v_work_idx_7164)); \n      while((v_l_id_85691 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85692 = 0; v_i_85692 < 16; v_i_85692 = (1 + v_i_85692)) {\n          float v_tmp_85773 = 0.0f; \n          v__85706 = v_tmp_85773; \n          int v_index_85774 = v__85698[(v_l_id_85691 + (16 * v_MWidthC_1 * v_wg_id_85690) + (v_MWidthC_1 * v_i_85692))]; \n          if (v_index_85774 < 0) {\n            v__85708_0 = v__85706; \n          } else {\n            if (v_index_85774 >= v_VLength_3) {\n              v__85708_0 = v__85706; \n            } else {\n              v__85708_0 = v__85700[v_index_85774]; \n            }\n          }\n          v__85710[(15 + (16 * v_MWidthC_1 * v_wg_id_85690) + (-1 * v_i_85692) + (16 * v_l_id_85691))] = mult(v__85708_0, v__85699[(v_l_id_85691 + (16 * v_MWidthC_1 * v_wg_id_85690) + (v_MWidthC_1 * v_i_85692))]); \n        }\n        /* end map_seq */\n        float v_tmp_85775 = 0.0f; \n        v__85711 = v_tmp_85775; \n        /* reduce_seq */\n        for (int v_i_85693 = 0; v_i_85693 < 16; v_i_85693 = (1 + v_i_85693)) {\n          v__85711 = add(v__85711, v__85710[(v_i_85693 + (16 * v_MWidthC_1 * v_wg_id_85690) + (16 * v_l_id_85691))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85694 = 0; \n          v__85715[v_l_id_85691] = id(v__85711); \n        }\n        /* end map_seq */\n        v_l_id_85691 = atomic_inc(&(v_work_idx_7164)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7158; \n      v_work_idx_7158 = 0; \n      int v_l_id_85695 = atomic_inc(&(v_work_idx_7158)); \n      while((v_l_id_85695 < 1)){\n        float v_tmp_85778 = 0.0f; \n        v__80917 = v_tmp_85778; \n        /* reduce_seq */\n        for (int v_i_85696 = 0; v_i_85696 < v_MWidthC_1; v_i_85696 = (1 + v_i_85696)) {\n          v__80917 = add(v__80917, v__85715[(v_i_85696 + (v_MWidthC_1 * v_l_id_85695))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85697 = 0; \n          v__85720[v_wg_id_85690] = doubleMultiplyAdd(v__80917, v__85702, v__85701[v_wg_id_85690], v__85703); \n        }\n        /* end map_seq */\n        v_l_id_85695 = atomic_inc(&(v_work_idx_7158)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85698",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85699",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85700",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85701",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85702",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85703",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85710",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85720",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85715",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}