{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93090, const global float* restrict v__93091, const global float* restrict v__93092, const global float* restrict v__93093, float v__93094, float v__93095, global float* v__93115, global int* v__93097, local float* v__93110, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93099; \n  float v__93101; \n  float v__80917; \n  /* Private Memory */\n  float v__93103_0;\n  \n  float v__93105_0;\n  \n  int v__93109_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7856 = v__93097; \n    local int v_w_id_93083; \n    if (get_local_id(0) == 0) {\n      v_w_id_93083 = atomic_inc(v_work_idx_7856); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93083 < v_MHeight_2)){\n      for (int v_l_id_93084 = get_local_id(0); v_l_id_93084 < v_MWidthC_1; v_l_id_93084 = (v_l_id_93084 + get_local_size(0))) {\n        float v_tmp_93181 = 0.0f; \n        v__93099 = v_tmp_93181; \n        /* reduce_while_seq */\n        for (int v_i_93085 = 0; v_i_93085 < 64; v_i_93085 = (1 + v_i_93085)) {\n          v__93109_0 = check(v__93099, v__93090[(v_l_id_93084 + (64 * v_MWidthC_1 * v_w_id_93083) + (v_MWidthC_1 * v_i_93085))]); \n          if (v__93109_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93182 = 0.0f; \n          v__93101 = v_tmp_93182; \n          int v_index_93183 = v__93090[(v_l_id_93084 + (64 * v_MWidthC_1 * v_w_id_93083) + (v_MWidthC_1 * v_i_93085))]; \n          if (v_index_93183 < 0) {\n            v__93103_0 = v__93101; \n          } else {\n            if (v_index_93183 >= v_VLength_3) {\n              v__93103_0 = v__93101; \n            } else {\n              v__93103_0 = v__93092[v_index_93183]; \n            }\n          }\n          v__93105_0 = mult(v__93103_0, v__93091[(v_l_id_93084 + (64 * v_MWidthC_1 * v_w_id_93083) + (v_MWidthC_1 * v_i_93085))]); \n          v__93099 = add(v__93105_0, v__93099); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93086 = 0; \n          v__93110[v_l_id_93084] = id(v__93099); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93087 = get_local_id(0); \n        float v_tmp_93186 = 0.0f; \n        v__80917 = v_tmp_93186; \n        /* reduce_seq */\n        for (int v_i_93088 = 0; v_i_93088 < v_MWidthC_1; v_i_93088 = (1 + v_i_93088)) {\n          v__80917 = add(v__80917, v__93110[(v_i_93088 + (v_MWidthC_1 * v_l_id_93087))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93089 = 0; \n          v__93115[v_w_id_93083] = doubleMultiplyAdd(v__80917, v__93094, v__93093[v_w_id_93083], v__93095); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93083 = atomic_inc(v_work_idx_7856); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93090",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93091",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93092",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93093",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93094",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93095",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93097",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93115",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93110",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}