{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102981, const global float* restrict v__102982, const global float* restrict v__102983, const global float* restrict v__102984, float v__102985, float v__102986, global float* v__103004, global int* v__102988, local float* v__102999, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102990; \n  float v__102992; \n  float v__80917; \n  /* Private Memory */\n  float v__102994_0;\n  \n  float v__102996_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8783 = v__102988; \n    local int v_w_id_102974; \n    if (get_local_id(0) == 0) {\n      v_w_id_102974 = atomic_inc(v_work_idx_8783); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102974 < v_MHeight_2)){\n      for (int v_l_id_102975 = get_local_id(0); v_l_id_102975 < v_MWidthC_1; v_l_id_102975 = (v_l_id_102975 + get_local_size(0))) {\n        float v_tmp_103067 = 0.0f; \n        v__102990 = v_tmp_103067; \n        /* reduce_seq */\n        for (int v_i_102976 = 0; v_i_102976 < 512; v_i_102976 = (1 + v_i_102976)) {\n          float v_tmp_103068 = 0.0f; \n          v__102992 = v_tmp_103068; \n          int v_index_103069 = v__102981[(v_l_id_102975 + (512 * v_MWidthC_1 * v_w_id_102974) + (v_MWidthC_1 * v_i_102976))]; \n          if (v_index_103069 < 0) {\n            v__102994_0 = v__102992; \n          } else {\n            if (v_index_103069 >= v_VLength_3) {\n              v__102994_0 = v__102992; \n            } else {\n              v__102994_0 = v__102983[v_index_103069]; \n            }\n          }\n          v__102996_0 = mult(v__102994_0, v__102982[(v_l_id_102975 + (512 * v_MWidthC_1 * v_w_id_102974) + (v_MWidthC_1 * v_i_102976))]); \n          v__102990 = add(v__102996_0, v__102990); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102977 = 0; \n          v__102999[v_l_id_102975] = id(v__102990); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_102978 = get_local_id(0); \n        float v_tmp_103072 = 0.0f; \n        v__80917 = v_tmp_103072; \n        /* reduce_seq */\n        for (int v_i_102979 = 0; v_i_102979 < v_MWidthC_1; v_i_102979 = (1 + v_i_102979)) {\n          v__80917 = add(v__80917, v__102999[(v_i_102979 + (v_MWidthC_1 * v_l_id_102978))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102980 = 0; \n          v__103004[v_w_id_102974] = doubleMultiplyAdd(v__80917, v__102985, v__102984[v_w_id_102974], v__102986); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_102974 = atomic_inc(v_work_idx_8783); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__102981",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102982",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102983",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102985",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102986",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102988",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102999",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}