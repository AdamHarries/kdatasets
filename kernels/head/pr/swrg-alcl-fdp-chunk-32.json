{
  "name" : "swrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88580, const global float* restrict v__88581, const global float* restrict v__88582, const global float* restrict v__88583, float v__88584, float v__88585, global float* v__88598, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88588; \n  float v__88590; \n  /* Private Memory */\n  float v__88592_0;\n  \n  float v__88594_0;\n  \n  for (int v_wg_id_88576 = get_group_id(0); v_wg_id_88576 < ((v_MHeight_2)/(32)); v_wg_id_88576 = (v_wg_id_88576 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7431; \n      v_work_idx_7431 = 0; \n      int v_l_id_88577 = atomic_inc(&(v_work_idx_7431)); \n      while((v_l_id_88577 < 32)){\n        float v_tmp_88636 = 0.0f; \n        v__88588 = v_tmp_88636; \n        /* reduce_seq */\n        for (int v_i_88578 = 0; v_i_88578 < v_MWidthC_1; v_i_88578 = (1 + v_i_88578)) {\n          float v_tmp_88637 = 0.0f; \n          v__88590 = v_tmp_88637; \n          int v_index_88638 = v__88580[(v_i_88578 + (32 * v_MWidthC_1 * v_wg_id_88576) + (v_MWidthC_1 * v_l_id_88577))]; \n          if (v_index_88638 < 0) {\n            v__88592_0 = v__88590; \n          } else {\n            if (v_index_88638 >= v_VLength_3) {\n              v__88592_0 = v__88590; \n            } else {\n              v__88592_0 = v__88582[v_index_88638]; \n            }\n          }\n          v__88594_0 = mult(v__88592_0, v__88581[(v_i_88578 + (32 * v_MWidthC_1 * v_wg_id_88576) + (v_MWidthC_1 * v_l_id_88577))]); \n          v__88588 = add(v__88594_0, v__88588); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88579 = 0; \n          v__88598[(v_l_id_88577 + (32 * v_wg_id_88576))] = doubleMultiplyAdd(v__88588, v__88584, v__88583[(v_l_id_88577 + (32 * v_wg_id_88576))], v__88585); \n        }\n        /* end map_seq */\n        v_l_id_88577 = atomic_inc(&(v_work_idx_7431)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__88580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88582",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88583",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88584",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88585",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88598",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}