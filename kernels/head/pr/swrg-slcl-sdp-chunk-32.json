{
  "name" : "swrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87643, const global float* restrict v__87644, const global float* restrict v__87645, const global float* restrict v__87646, float v__87647, float v__87648, global float* v__87661, global float* v__87655, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87651; \n  float v__87656; \n  /* Private Memory */\n  float v__87653_0;\n  \n  for (int v_wg_id_87638 = get_group_id(0); v_wg_id_87638 < ((v_MHeight_2)/(32)); v_wg_id_87638 = (v_wg_id_87638 + get_num_groups(0))) {\n    for (int v_l_id_87639 = get_local_id(0); v_l_id_87639 < 32; v_l_id_87639 = (v_l_id_87639 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_87640 = 0; v_i_87640 < v_MWidthC_1; v_i_87640 = (1 + v_i_87640)) {\n        float v_tmp_87705 = 0.0f; \n        v__87651 = v_tmp_87705; \n        int v_index_87706 = v__87643[(v_i_87640 + (32 * v_MWidthC_1 * v_wg_id_87638) + (v_MWidthC_1 * v_l_id_87639))]; \n        if (v_index_87706 < 0) {\n          v__87653_0 = v__87651; \n        } else {\n          if (v_index_87706 >= v_VLength_3) {\n            v__87653_0 = v__87651; \n          } else {\n            v__87653_0 = v__87645[v_index_87706]; \n          }\n        }\n        v__87655[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_87638) + (-1 * v_i_87640) + (v_MWidthC_1 * v_l_id_87639))] = mult(v__87653_0, v__87644[(v_i_87640 + (32 * v_MWidthC_1 * v_wg_id_87638) + (v_MWidthC_1 * v_l_id_87639))]); \n      }\n      /* end map_seq */\n      float v_tmp_87707 = 0.0f; \n      v__87656 = v_tmp_87707; \n      /* reduce_seq */\n      for (int v_i_87641 = 0; v_i_87641 < v_MWidthC_1; v_i_87641 = (1 + v_i_87641)) {\n        v__87656 = add(v__87656, v__87655[(v_i_87641 + (32 * v_MWidthC_1 * v_wg_id_87638) + (v_MWidthC_1 * v_l_id_87639))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87642 = 0; \n        v__87661[(v_l_id_87639 + (32 * v_wg_id_87638))] = doubleMultiplyAdd(v__87656, v__87647, v__87646[(v_l_id_87639 + (32 * v_wg_id_87638))], v__87648); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87643",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87644",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87645",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87647",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87648",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__87661",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}