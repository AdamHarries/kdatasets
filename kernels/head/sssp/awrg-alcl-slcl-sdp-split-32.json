{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66550, const global float* restrict v__66551, const global float* restrict v__66552, const global float* restrict v__66553, float v__66554, float v__66555, global float* v__66573, global float* v__66563, global int* v__66557, local float* v__66568, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66559; \n  float v__66564; \n  float v__57071; \n  /* Private Memory */\n  float v__66561_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5381 = v__66557; \n    local int v_w_id_66542; \n    if (get_local_id(0) == 0) {\n      v_w_id_66542 = atomic_inc(v_work_idx_5381); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66542 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5379; \n        v_work_idx_5379 = 0; \n        int v_l_id_66543 = atomic_inc(&(v_work_idx_5379)); \n        while((v_l_id_66543 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66544 = 0; v_i_66544 < 32; v_i_66544 = (1 + v_i_66544)) {\n            float v_tmp_66628 = 3.4028235E38f; \n            v__66559 = v_tmp_66628; \n            int v_index_66629 = v__66550[(v_l_id_66543 + (32 * v_MWidthC_1 * v_w_id_66542) + (v_MWidthC_1 * v_i_66544))]; \n            if (v_index_66629 < 0) {\n              v__66561_0 = v__66559; \n            } else {\n              if (v_index_66629 >= v_VLength_3) {\n                v__66561_0 = v__66559; \n              } else {\n                v__66561_0 = v__66552[v_index_66629]; \n              }\n            }\n            v__66563[(31 + (32 * v_MWidthC_1 * v_w_id_66542) + (-1 * v_i_66544) + (32 * v_l_id_66543))] = absadd(v__66561_0, v__66551[(v_l_id_66543 + (32 * v_MWidthC_1 * v_w_id_66542) + (v_MWidthC_1 * v_i_66544))]); \n          }\n          /* end map_seq */\n          float v_tmp_66630 = 3.4028235E38f; \n          v__66564 = v_tmp_66630; \n          /* reduce_seq */\n          for (int v_i_66545 = 0; v_i_66545 < 32; v_i_66545 = (1 + v_i_66545)) {\n            v__66564 = clmin(v__66564, v__66563[(v_i_66545 + (32 * v_MWidthC_1 * v_w_id_66542) + (32 * v_l_id_66543))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66546 = 0; \n            v__66568[v_l_id_66543] = id(v__66564); \n          }\n          /* end map_seq */\n          v_l_id_66543 = atomic_inc(&(v_work_idx_5379)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66547 = get_local_id(0); \n        float v_tmp_66633 = 3.4028235E38f; \n        v__57071 = v_tmp_66633; \n        /* reduce_seq */\n        for (int v_i_66548 = 0; v_i_66548 < v_MWidthC_1; v_i_66548 = (1 + v_i_66548)) {\n          v__57071 = clmin(v__57071, v__66568[(v_i_66548 + (v_MWidthC_1 * v_l_id_66547))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66549 = 0; \n          v__66573[v_w_id_66542] = doubleMultiplyAdd(v__57071, v__66554, v__66553[v_w_id_66542], v__66555); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66542 = atomic_inc(v_work_idx_5381); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66550",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66551",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66552",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66554",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66555",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66563",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66557",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66573",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66568",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}