{
  "name" : "swrg-alcl-fdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__89190, const global float* restrict v__89191, const global float* restrict v__89192, const global float* restrict v__89193, float v__89194, float v__89195, global float* v__89209, global float* v__89208, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89197; \n  float v__89200; \n  /* Private Memory */\n  float v__89202_0;\n  \n  float v__89204_0;\n  \n  for (int v_wg_id_89185 = get_group_id(0); v_wg_id_89185 < ((v_MHeight_2)/(64)); v_wg_id_89185 = (v_wg_id_89185 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6773; \n      v_work_idx_6773 = 0; \n      int v_l_id_89186 = atomic_inc(&(v_work_idx_6773)); \n      while((v_l_id_89186 < 64)){\n        float v_tmp_89242 = 3.4028235E38f; \n        v__89197 = v_tmp_89242; \n        /* reduce_seq */\n        int v_stop_89243 = min(v__89190[(1 + (v__89190[(v_l_id_89186 + (64 * v_wg_id_89185))] / 4))], ((global int*)(v__89191 + (((global int*)(v__89191))[(v_l_id_89186 + (64 * v_wg_id_89185))] / 4)))[1]); \n        for (int v_i_89187 = 0; v_i_89187 < v_stop_89243; v_i_89187 = (1 + v_i_89187)) {\n          float v_tmp_89251 = 3.4028235E38f; \n          v__89200 = v_tmp_89251; \n          int v_index_89253 = v__89190[(2 + v_i_89187 + (v__89190[(v_l_id_89186 + (64 * v_wg_id_89185))] / 4))]; \n          if (v_index_89253 < 0) {\n            v__89202_0 = v__89200; \n          } else {\n            if (v_index_89253 >= v_MWidthC_1) {\n              v__89202_0 = v__89200; \n            } else {\n              v__89202_0 = v__89192[v_index_89253]; \n            }\n          }\n          v__89204_0 = absadd(v__89191[(2 + v_i_89187 + (((global int*)(v__89191))[(v_l_id_89186 + (64 * v_wg_id_89185))] / 4))], v__89202_0); \n          v__89197 = clmin(v__89197, v__89204_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89188 = 0; \n          v__89208[(v_l_id_89186 + (64 * v_wg_id_89185))] = doubleMultiplyAdd(v__89197, v__89194, v__89193[(v_l_id_89186 + (64 * v_wg_id_89185))], v__89195); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89189 = 0; \n          v__89209[(v_l_id_89186 + (64 * v_wg_id_89185))] = id(v__89208[(v_l_id_89186 + (64 * v_wg_id_89185))]); \n        }\n        /* end map_seq */\n        v_l_id_89186 = atomic_inc(&(v_work_idx_6773)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89190",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__89191",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__89192",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__89193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89194",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89195",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__89209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}