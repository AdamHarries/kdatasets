{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73604, const global float* restrict v__73605, const global float* restrict v__73606, const global float* restrict v__73607, float v__73608, float v__73609, global float* v__73627, global int* v__73611, local float* v__73622, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73613; \n  float v__73615; \n  float v__57071; \n  /* Private Memory */\n  float v__73617_0;\n  \n  float v__73619_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6048 = v__73611; \n    local int v_w_id_73597; \n    if (get_local_id(0) == 0) {\n      v_w_id_73597 = atomic_inc(v_work_idx_6048); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73597 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6046; \n        v_work_idx_6046 = 0; \n        int v_l_id_73598 = atomic_inc(&(v_work_idx_6046)); \n        while((v_l_id_73598 < v_MWidthC_1)){\n          float v_tmp_73678 = 3.4028235E38f; \n          v__73613 = v_tmp_73678; \n          /* reduce_seq */\n          for (int v_i_73599 = 0; v_i_73599 < 128; v_i_73599 = (1 + v_i_73599)) {\n            float v_tmp_73679 = 3.4028235E38f; \n            v__73615 = v_tmp_73679; \n            int v_index_73680 = v__73604[(v_l_id_73598 + (128 * v_MWidthC_1 * v_w_id_73597) + (v_MWidthC_1 * v_i_73599))]; \n            if (v_index_73680 < 0) {\n              v__73617_0 = v__73615; \n            } else {\n              if (v_index_73680 >= v_VLength_3) {\n                v__73617_0 = v__73615; \n              } else {\n                v__73617_0 = v__73606[v_index_73680]; \n              }\n            }\n            v__73619_0 = absadd(v__73617_0, v__73605[(v_l_id_73598 + (128 * v_MWidthC_1 * v_w_id_73597) + (v_MWidthC_1 * v_i_73599))]); \n            v__73613 = clmin(v__73619_0, v__73613); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73600 = 0; \n            v__73622[v_l_id_73598] = id(v__73613); \n          }\n          /* end map_seq */\n          v_l_id_73598 = atomic_inc(&(v_work_idx_6046)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6041; \n        v_work_idx_6041 = 0; \n        int v_l_id_73601 = atomic_inc(&(v_work_idx_6041)); \n        while((v_l_id_73601 < 1)){\n          float v_tmp_73683 = 3.4028235E38f; \n          v__57071 = v_tmp_73683; \n          /* reduce_seq */\n          for (int v_i_73602 = 0; v_i_73602 < v_MWidthC_1; v_i_73602 = (1 + v_i_73602)) {\n            v__57071 = clmin(v__57071, v__73622[(v_i_73602 + (v_MWidthC_1 * v_l_id_73601))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73603 = 0; \n            v__73627[v_w_id_73597] = doubleMultiplyAdd(v__57071, v__73608, v__73607[v_w_id_73597], v__73609); \n          }\n          /* end map_seq */\n          v_l_id_73601 = atomic_inc(&(v_work_idx_6041)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73597 = atomic_inc(v_work_idx_6048); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73604",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73605",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73606",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73607",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73608",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73609",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73611",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73627",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73622",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}