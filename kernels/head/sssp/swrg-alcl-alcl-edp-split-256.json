{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__75368, const global float* restrict v__75369, const global float* restrict v__75370, const global float* restrict v__75371, float v__75372, float v__75373, global float* v__75392, local float* v__75387, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75376; \n  float v__75378; \n  float v__57071; \n  /* Private Memory */\n  float v__75380_0;\n  \n  float v__75382_0;\n  \n  int v__75386_0;\n  \n  for (int v_wg_id_75361 = get_group_id(0); v_wg_id_75361 < v_MHeight_2; v_wg_id_75361 = (v_wg_id_75361 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6205; \n      v_work_idx_6205 = 0; \n      int v_l_id_75362 = atomic_inc(&(v_work_idx_6205)); \n      while((v_l_id_75362 < v_MWidthC_1)){\n        float v_tmp_75448 = 3.4028235E38f; \n        v__75376 = v_tmp_75448; \n        /* reduce_while_seq */\n        for (int v_i_75363 = 0; v_i_75363 < 256; v_i_75363 = (1 + v_i_75363)) {\n          v__75386_0 = check(v__75376, v__75368[(v_l_id_75362 + (256 * v_MWidthC_1 * v_wg_id_75361) + (v_MWidthC_1 * v_i_75363))]); \n          if (v__75386_0) {\n          } else {\n            break;\n          }\n          float v_tmp_75449 = 3.4028235E38f; \n          v__75378 = v_tmp_75449; \n          int v_index_75450 = v__75368[(v_l_id_75362 + (256 * v_MWidthC_1 * v_wg_id_75361) + (v_MWidthC_1 * v_i_75363))]; \n          if (v_index_75450 < 0) {\n            v__75380_0 = v__75378; \n          } else {\n            if (v_index_75450 >= v_VLength_3) {\n              v__75380_0 = v__75378; \n            } else {\n              v__75380_0 = v__75370[v_index_75450]; \n            }\n          }\n          v__75382_0 = absadd(v__75380_0, v__75369[(v_l_id_75362 + (256 * v_MWidthC_1 * v_wg_id_75361) + (v_MWidthC_1 * v_i_75363))]); \n          v__75376 = clmin(v__75382_0, v__75376); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75364 = 0; \n          v__75387[v_l_id_75362] = id(v__75376); \n        }\n        /* end map_seq */\n        v_l_id_75362 = atomic_inc(&(v_work_idx_6205)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6200; \n      v_work_idx_6200 = 0; \n      int v_l_id_75365 = atomic_inc(&(v_work_idx_6200)); \n      while((v_l_id_75365 < 1)){\n        float v_tmp_75453 = 3.4028235E38f; \n        v__57071 = v_tmp_75453; \n        /* reduce_seq */\n        for (int v_i_75366 = 0; v_i_75366 < v_MWidthC_1; v_i_75366 = (1 + v_i_75366)) {\n          v__57071 = clmin(v__57071, v__75387[(v_i_75366 + (v_MWidthC_1 * v_l_id_75365))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75367 = 0; \n          v__75392[v_wg_id_75361] = doubleMultiplyAdd(v__57071, v__75372, v__75371[v_wg_id_75361], v__75373); \n        }\n        /* end map_seq */\n        v_l_id_75365 = atomic_inc(&(v_work_idx_6200)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__75368",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75369",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75370",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75371",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75372",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75373",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75387",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}