{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80268, const global float* restrict v__80269, const global float* restrict v__80270, const global float* restrict v__80271, float v__80272, float v__80273, global float* v__80291, global int* v__80275, local float* v__80286, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80277; \n  float v__80279; \n  float v__57071; \n  /* Private Memory */\n  float v__80281_0;\n  \n  float v__80283_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6672 = v__80275; \n    local int v_w_id_80261; \n    if (get_local_id(0) == 0) {\n      v_w_id_80261 = atomic_inc(v_work_idx_6672); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80261 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6670; \n        v_work_idx_6670 = 0; \n        int v_l_id_80262 = atomic_inc(&(v_work_idx_6670)); \n        while((v_l_id_80262 < v_MWidthC_1)){\n          float v_tmp_80342 = 3.4028235E38f; \n          v__80277 = v_tmp_80342; \n          /* reduce_seq */\n          for (int v_i_80263 = 0; v_i_80263 < 512; v_i_80263 = (1 + v_i_80263)) {\n            float v_tmp_80343 = 3.4028235E38f; \n            v__80279 = v_tmp_80343; \n            int v_index_80344 = v__80268[(v_l_id_80262 + (512 * v_MWidthC_1 * v_w_id_80261) + (v_MWidthC_1 * v_i_80263))]; \n            if (v_index_80344 < 0) {\n              v__80281_0 = v__80279; \n            } else {\n              if (v_index_80344 >= v_VLength_3) {\n                v__80281_0 = v__80279; \n              } else {\n                v__80281_0 = v__80270[v_index_80344]; \n              }\n            }\n            v__80283_0 = absadd(v__80281_0, v__80269[(v_l_id_80262 + (512 * v_MWidthC_1 * v_w_id_80261) + (v_MWidthC_1 * v_i_80263))]); \n            v__80277 = clmin(v__80283_0, v__80277); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80264 = 0; \n            v__80286[v_l_id_80262] = id(v__80277); \n          }\n          /* end map_seq */\n          v_l_id_80262 = atomic_inc(&(v_work_idx_6670)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6665; \n        v_work_idx_6665 = 0; \n        int v_l_id_80265 = atomic_inc(&(v_work_idx_6665)); \n        while((v_l_id_80265 < 1)){\n          float v_tmp_80347 = 3.4028235E38f; \n          v__57071 = v_tmp_80347; \n          /* reduce_seq */\n          for (int v_i_80266 = 0; v_i_80266 < v_MWidthC_1; v_i_80266 = (1 + v_i_80266)) {\n            v__57071 = clmin(v__57071, v__80286[(v_i_80266 + (v_MWidthC_1 * v_l_id_80265))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80267 = 0; \n            v__80291[v_w_id_80261] = doubleMultiplyAdd(v__57071, v__80272, v__80271[v_w_id_80261], v__80273); \n          }\n          /* end map_seq */\n          v_l_id_80265 = atomic_inc(&(v_work_idx_6665)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80261 = atomic_inc(v_work_idx_6672); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__80268",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80269",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80270",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80271",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80272",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80273",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80275",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80286",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}