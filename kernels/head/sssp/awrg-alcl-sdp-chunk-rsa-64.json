{
  "name" : "awrg-alcl-sdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__91258, const global float* restrict v__91259, const global float* restrict v__91260, const global float* restrict v__91261, float v__91262, float v__91263, global float* v__91278, global float* v__91277, global int* v__91265, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91266; \n  float v__91269; \n  /* Private Memory */\n  float v__91271_0;\n  \n  float v__91273_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6964 = v__91265; \n    local int v_w_id_91253; \n    if (get_local_id(0) == 0) {\n      v_w_id_91253 = atomic_inc(v_work_idx_6964); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_91253 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6962; \n        v_work_idx_6962 = 0; \n        int v_l_id_91254 = atomic_inc(&(v_work_idx_6962)); \n        while((v_l_id_91254 < 64)){\n          float v_tmp_91310 = 3.4028235E38f; \n          v__91266 = v_tmp_91310; \n          /* reduce_seq */\n          int v_stop_91311 = min(v__91258[(1 + (v__91258[(v_l_id_91254 + (64 * v_w_id_91253))] / 4))], ((global int*)(v__91259 + (((global int*)(v__91259))[(v_l_id_91254 + (64 * v_w_id_91253))] / 4)))[1]); \n          for (int v_i_91255 = 0; v_i_91255 < v_stop_91311; v_i_91255 = (1 + v_i_91255)) {\n            float v_tmp_91319 = 3.4028235E38f; \n            v__91269 = v_tmp_91319; \n            int v_index_91321 = v__91258[(2 + v_i_91255 + (v__91258[(v_l_id_91254 + (64 * v_w_id_91253))] / 4))]; \n            if (v_index_91321 < 0) {\n              v__91271_0 = v__91269; \n            } else {\n              if (v_index_91321 >= v_MWidthC_1) {\n                v__91271_0 = v__91269; \n              } else {\n                v__91271_0 = v__91260[v_index_91321]; \n              }\n            }\n            v__91273_0 = absadd(v__91259[(2 + v_i_91255 + (((global int*)(v__91259))[(v_l_id_91254 + (64 * v_w_id_91253))] / 4))], v__91271_0); \n            v__91266 = clmin(v__91266, v__91273_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91256 = 0; \n            v__91277[(v_l_id_91254 + (64 * v_w_id_91253))] = doubleMultiplyAdd(v__91266, v__91262, v__91261[(v_l_id_91254 + (64 * v_w_id_91253))], v__91263); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_91257 = 0; \n            v__91278[(v_l_id_91254 + (64 * v_w_id_91253))] = id(v__91277[(v_l_id_91254 + (64 * v_w_id_91253))]); \n          }\n          /* end map_seq */\n          v_l_id_91254 = atomic_inc(&(v_work_idx_6962)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_91253 = atomic_inc(v_work_idx_6964); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__91258",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91259",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__91260",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__91261",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91262",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91263",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91265",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__91278",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}