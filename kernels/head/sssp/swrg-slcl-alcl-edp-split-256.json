{
  "name" : "swrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__74554, const global float* restrict v__74555, const global float* restrict v__74556, const global float* restrict v__74557, float v__74558, float v__74559, global float* v__74578, local float* v__74573, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74562; \n  float v__74564; \n  float v__57071; \n  /* Private Memory */\n  float v__74566_0;\n  \n  float v__74568_0;\n  \n  int v__74572_0;\n  \n  for (int v_wg_id_74547 = get_group_id(0); v_wg_id_74547 < v_MHeight_2; v_wg_id_74547 = (v_wg_id_74547 + get_num_groups(0))) {\n    for (int v_l_id_74548 = get_local_id(0); v_l_id_74548 < v_MWidthC_1; v_l_id_74548 = (v_l_id_74548 + get_local_size(0))) {\n      float v_tmp_74642 = 3.4028235E38f; \n      v__74562 = v_tmp_74642; \n      /* reduce_while_seq */\n      for (int v_i_74549 = 0; v_i_74549 < 256; v_i_74549 = (1 + v_i_74549)) {\n        v__74572_0 = check(v__74562, v__74554[(v_l_id_74548 + (256 * v_MWidthC_1 * v_wg_id_74547) + (v_MWidthC_1 * v_i_74549))]); \n        if (v__74572_0) {\n        } else {\n          break;\n        }\n        float v_tmp_74643 = 3.4028235E38f; \n        v__74564 = v_tmp_74643; \n        int v_index_74644 = v__74554[(v_l_id_74548 + (256 * v_MWidthC_1 * v_wg_id_74547) + (v_MWidthC_1 * v_i_74549))]; \n        if (v_index_74644 < 0) {\n          v__74566_0 = v__74564; \n        } else {\n          if (v_index_74644 >= v_VLength_3) {\n            v__74566_0 = v__74564; \n          } else {\n            v__74566_0 = v__74556[v_index_74644]; \n          }\n        }\n        v__74568_0 = absadd(v__74566_0, v__74555[(v_l_id_74548 + (256 * v_MWidthC_1 * v_wg_id_74547) + (v_MWidthC_1 * v_i_74549))]); \n        v__74562 = clmin(v__74568_0, v__74562); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74550 = 0; \n        v__74573[v_l_id_74548] = id(v__74562); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6123; \n      v_work_idx_6123 = 0; \n      int v_l_id_74551 = atomic_inc(&(v_work_idx_6123)); \n      while((v_l_id_74551 < 1)){\n        float v_tmp_74647 = 3.4028235E38f; \n        v__57071 = v_tmp_74647; \n        /* reduce_seq */\n        for (int v_i_74552 = 0; v_i_74552 < v_MWidthC_1; v_i_74552 = (1 + v_i_74552)) {\n          v__57071 = clmin(v__57071, v__74573[(v_i_74552 + (v_MWidthC_1 * v_l_id_74551))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74553 = 0; \n          v__74578[v_wg_id_74547] = doubleMultiplyAdd(v__57071, v__74558, v__74557[v_wg_id_74547], v__74559); \n        }\n        /* end map_seq */\n        v_l_id_74551 = atomic_inc(&(v_work_idx_6123)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__74554",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74555",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74556",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74557",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74558",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74559",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__74578",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74573",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}