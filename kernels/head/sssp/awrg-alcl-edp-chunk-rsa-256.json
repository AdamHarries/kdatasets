{
  "name" : "awrg-alcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99998, const global float* restrict v__99999, const global float* restrict v__100000, const global float* restrict v__100001, float v__100002, float v__100003, global float* v__100018, global float* v__100017, global int* v__100005, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100006; \n  float v__100009; \n  /* Private Memory */\n  float v__100011_0;\n  \n  float v__100013_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7746 = v__100005; \n    local int v_w_id_99993; \n    if (get_local_id(0) == 0) {\n      v_w_id_99993 = atomic_inc(v_work_idx_7746); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99993 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7744; \n        v_work_idx_7744 = 0; \n        int v_l_id_99994 = atomic_inc(&(v_work_idx_7744)); \n        while((v_l_id_99994 < 256)){\n          float v_tmp_100050 = 3.4028235E38f; \n          v__100006 = v_tmp_100050; \n          /* reduce_seq */\n          int v_stop_100051 = min(v__99998[(1 + (v__99998[(v_l_id_99994 + (256 * v_w_id_99993))] / 4))], ((global int*)(v__99999 + (((global int*)(v__99999))[(v_l_id_99994 + (256 * v_w_id_99993))] / 4)))[1]); \n          for (int v_i_99995 = 0; v_i_99995 < v_stop_100051; v_i_99995 = (1 + v_i_99995)) {\n            float v_tmp_100059 = 3.4028235E38f; \n            v__100009 = v_tmp_100059; \n            int v_index_100061 = v__99998[(2 + v_i_99995 + (v__99998[(v_l_id_99994 + (256 * v_w_id_99993))] / 4))]; \n            if (v_index_100061 < 0) {\n              v__100011_0 = v__100009; \n            } else {\n              if (v_index_100061 >= v_MWidthC_1) {\n                v__100011_0 = v__100009; \n              } else {\n                v__100011_0 = v__100000[v_index_100061]; \n              }\n            }\n            v__100013_0 = absadd(v__99999[(2 + v_i_99995 + (((global int*)(v__99999))[(v_l_id_99994 + (256 * v_w_id_99993))] / 4))], v__100011_0); \n            v__100006 = clmin(v__100006, v__100013_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99996 = 0; \n            v__100017[(v_l_id_99994 + (256 * v_w_id_99993))] = doubleMultiplyAdd(v__100006, v__100002, v__100001[(v_l_id_99994 + (256 * v_w_id_99993))], v__100003); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99997 = 0; \n            v__100018[(v_l_id_99994 + (256 * v_w_id_99993))] = id(v__100017[(v_l_id_99994 + (256 * v_w_id_99993))]); \n          }\n          /* end map_seq */\n          v_l_id_99994 = atomic_inc(&(v_work_idx_7744)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99993 = atomic_inc(v_work_idx_7746); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99998",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__99999",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__100000",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__100001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100002",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100003",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100017",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100005",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}