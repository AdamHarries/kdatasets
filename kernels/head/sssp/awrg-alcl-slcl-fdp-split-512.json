{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79975, const global float* restrict v__79976, const global float* restrict v__79977, const global float* restrict v__79978, float v__79979, float v__79980, global float* v__79998, global int* v__79982, local float* v__79993, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79984; \n  float v__79986; \n  float v__57071; \n  /* Private Memory */\n  float v__79988_0;\n  \n  float v__79990_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6639 = v__79982; \n    local int v_w_id_79968; \n    if (get_local_id(0) == 0) {\n      v_w_id_79968 = atomic_inc(v_work_idx_6639); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79968 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6637; \n        v_work_idx_6637 = 0; \n        int v_l_id_79969 = atomic_inc(&(v_work_idx_6637)); \n        while((v_l_id_79969 < v_MWidthC_1)){\n          float v_tmp_80053 = 3.4028235E38f; \n          v__79984 = v_tmp_80053; \n          /* reduce_seq */\n          for (int v_i_79970 = 0; v_i_79970 < 512; v_i_79970 = (1 + v_i_79970)) {\n            float v_tmp_80054 = 3.4028235E38f; \n            v__79986 = v_tmp_80054; \n            int v_index_80055 = v__79975[(v_l_id_79969 + (512 * v_MWidthC_1 * v_w_id_79968) + (v_MWidthC_1 * v_i_79970))]; \n            if (v_index_80055 < 0) {\n              v__79988_0 = v__79986; \n            } else {\n              if (v_index_80055 >= v_VLength_3) {\n                v__79988_0 = v__79986; \n              } else {\n                v__79988_0 = v__79977[v_index_80055]; \n              }\n            }\n            v__79990_0 = absadd(v__79988_0, v__79976[(v_l_id_79969 + (512 * v_MWidthC_1 * v_w_id_79968) + (v_MWidthC_1 * v_i_79970))]); \n            v__79984 = clmin(v__79990_0, v__79984); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79971 = 0; \n            v__79993[v_l_id_79969] = id(v__79984); \n          }\n          /* end map_seq */\n          v_l_id_79969 = atomic_inc(&(v_work_idx_6637)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79972 = get_local_id(0); \n        float v_tmp_80058 = 3.4028235E38f; \n        v__57071 = v_tmp_80058; \n        /* reduce_seq */\n        for (int v_i_79973 = 0; v_i_79973 < v_MWidthC_1; v_i_79973 = (1 + v_i_79973)) {\n          v__57071 = clmin(v__57071, v__79993[(v_i_79973 + (v_MWidthC_1 * v_l_id_79972))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79974 = 0; \n          v__79998[v_w_id_79968] = doubleMultiplyAdd(v__57071, v__79979, v__79978[v_w_id_79968], v__79980); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79968 = atomic_inc(v_work_idx_6639); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79975",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79976",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79977",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79979",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79980",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79982",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79993",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}