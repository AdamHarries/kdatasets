{
  "name" : "glb-edp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56732, const global float* restrict v__56733, const global float* restrict v__56734, const global float* restrict v__56735, float v__56736, float v__56737, global float* v__56752, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__56739; \n  float v__56742; \n  /* Private Memory */\n  float v__56744; \n  float v__56746; \n  int v__56750; \n  for (int v_gl_id_56729 = get_global_id(0); v_gl_id_56729 < v_MHeight_2; v_gl_id_56729 = (v_gl_id_56729 + get_global_size(0))) {\n    float v_tmp_56785 = 3.4028235E38f; \n    v__56739 = v_tmp_56785; \n    /* reduce_while_seq */\n    for (int v_i_56730 = 0; v_i_56730 < v_MWidthC_1; v_i_56730 = (1 + v_i_56730)) {\n      v__56750 = check(v__56739, v__56732[(v_i_56730 + (v_MWidthC_1 * v_gl_id_56729))]); \n      if (v__56750) {\n      } else {\n        break;\n      }\n      float v_tmp_56786 = 3.4028235E38f; \n      v__56742 = v_tmp_56786; \n      int v_index_56787 = v__56732[(v_i_56730 + (v_MWidthC_1 * v_gl_id_56729))]; \n      if (v_index_56787 < 0) {\n        v__56744 = v__56742; \n      } else {\n        if (v_index_56787 >= v_VLength_3) {\n          v__56744 = v__56742; \n        } else {\n          v__56744 = v__56734[v_index_56787]; \n        }\n      }\n      v__56746 = absadd(v__56744, v__56733[(v_i_56730 + (v_MWidthC_1 * v_gl_id_56729))]); \n      v__56739 = clmin(v__56746, v__56739); \n    }\n    /* end reduce_while_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_56731 = 0; \n      v__56752[v_gl_id_56729] = doubleMultiplyAdd(v__56739, v__56736, v__56735[v_gl_id_56729], v__56737); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__56732",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56734",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56736",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56737",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__56752",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}