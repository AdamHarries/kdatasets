{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58220, const global float* restrict v__58221, const global float* restrict v__58222, const global float* restrict v__58223, float v__58224, float v__58225, global float* v__58242, global float* v__58232, local float* v__58237, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58228; \n  float v__58233; \n  float v__57071; \n  /* Private Memory */\n  float v__58230_0;\n  \n  for (int v_wg_id_58212 = get_group_id(0); v_wg_id_58212 < v_MHeight_2; v_wg_id_58212 = (v_wg_id_58212 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4596; \n      v_work_idx_4596 = 0; \n      int v_l_id_58213 = atomic_inc(&(v_work_idx_4596)); \n      while((v_l_id_58213 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58214 = 0; v_i_58214 < 8; v_i_58214 = (1 + v_i_58214)) {\n          float v_tmp_58299 = 3.4028235E38f; \n          v__58228 = v_tmp_58299; \n          int v_index_58300 = v__58220[(v_l_id_58213 + (8 * v_MWidthC_1 * v_wg_id_58212) + (v_MWidthC_1 * v_i_58214))]; \n          if (v_index_58300 < 0) {\n            v__58230_0 = v__58228; \n          } else {\n            if (v_index_58300 >= v_VLength_3) {\n              v__58230_0 = v__58228; \n            } else {\n              v__58230_0 = v__58222[v_index_58300]; \n            }\n          }\n          v__58232[(7 + (8 * v_MWidthC_1 * v_wg_id_58212) + (-1 * v_i_58214) + (8 * v_l_id_58213))] = absadd(v__58230_0, v__58221[(v_l_id_58213 + (8 * v_MWidthC_1 * v_wg_id_58212) + (v_MWidthC_1 * v_i_58214))]); \n        }\n        /* end map_seq */\n        float v_tmp_58301 = 3.4028235E38f; \n        v__58233 = v_tmp_58301; \n        /* reduce_seq */\n        for (int v_i_58215 = 0; v_i_58215 < 8; v_i_58215 = (1 + v_i_58215)) {\n          v__58233 = clmin(v__58233, v__58232[(v_i_58215 + (8 * v_MWidthC_1 * v_wg_id_58212) + (8 * v_l_id_58213))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58216 = 0; \n          v__58237[v_l_id_58213] = id(v__58233); \n        }\n        /* end map_seq */\n        v_l_id_58213 = atomic_inc(&(v_work_idx_4596)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_58217 = get_local_id(0); \n      float v_tmp_58304 = 3.4028235E38f; \n      v__57071 = v_tmp_58304; \n      /* reduce_seq */\n      for (int v_i_58218 = 0; v_i_58218 < v_MWidthC_1; v_i_58218 = (1 + v_i_58218)) {\n        v__57071 = clmin(v__57071, v__58237[(v_i_58218 + (v_MWidthC_1 * v_l_id_58217))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58219 = 0; \n        v__58242[v_wg_id_58212] = doubleMultiplyAdd(v__57071, v__58224, v__58223[v_wg_id_58212], v__58225); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58220",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58221",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58222",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58223",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58224",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58225",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58232",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58242",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58237",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}