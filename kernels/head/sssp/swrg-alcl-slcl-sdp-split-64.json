{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68216, const global float* restrict v__68217, const global float* restrict v__68218, const global float* restrict v__68219, float v__68220, float v__68221, global float* v__68238, global float* v__68228, local float* v__68233, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68224; \n  float v__68229; \n  float v__57071; \n  /* Private Memory */\n  float v__68226_0;\n  \n  for (int v_wg_id_68208 = get_group_id(0); v_wg_id_68208 < v_MHeight_2; v_wg_id_68208 = (v_wg_id_68208 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5532; \n      v_work_idx_5532 = 0; \n      int v_l_id_68209 = atomic_inc(&(v_work_idx_5532)); \n      while((v_l_id_68209 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_68210 = 0; v_i_68210 < 64; v_i_68210 = (1 + v_i_68210)) {\n          float v_tmp_68295 = 3.4028235E38f; \n          v__68224 = v_tmp_68295; \n          int v_index_68296 = v__68216[(v_l_id_68209 + (64 * v_MWidthC_1 * v_wg_id_68208) + (v_MWidthC_1 * v_i_68210))]; \n          if (v_index_68296 < 0) {\n            v__68226_0 = v__68224; \n          } else {\n            if (v_index_68296 >= v_VLength_3) {\n              v__68226_0 = v__68224; \n            } else {\n              v__68226_0 = v__68218[v_index_68296]; \n            }\n          }\n          v__68228[(63 + (64 * v_MWidthC_1 * v_wg_id_68208) + (-1 * v_i_68210) + (64 * v_l_id_68209))] = absadd(v__68226_0, v__68217[(v_l_id_68209 + (64 * v_MWidthC_1 * v_wg_id_68208) + (v_MWidthC_1 * v_i_68210))]); \n        }\n        /* end map_seq */\n        float v_tmp_68297 = 3.4028235E38f; \n        v__68229 = v_tmp_68297; \n        /* reduce_seq */\n        for (int v_i_68211 = 0; v_i_68211 < 64; v_i_68211 = (1 + v_i_68211)) {\n          v__68229 = clmin(v__68229, v__68228[(v_i_68211 + (64 * v_MWidthC_1 * v_wg_id_68208) + (64 * v_l_id_68209))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68212 = 0; \n          v__68233[v_l_id_68209] = id(v__68229); \n        }\n        /* end map_seq */\n        v_l_id_68209 = atomic_inc(&(v_work_idx_5532)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_68213 = get_local_id(0); \n      float v_tmp_68300 = 3.4028235E38f; \n      v__57071 = v_tmp_68300; \n      /* reduce_seq */\n      for (int v_i_68214 = 0; v_i_68214 < v_MWidthC_1; v_i_68214 = (1 + v_i_68214)) {\n        v__57071 = clmin(v__57071, v__68233[(v_i_68214 + (v_MWidthC_1 * v_l_id_68213))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_68215 = 0; \n        v__68238[v_wg_id_68208] = doubleMultiplyAdd(v__57071, v__68220, v__68219[v_wg_id_68208], v__68221); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68216",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68217",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68218",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68219",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68220",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68221",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68228",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__68238",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68233",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}