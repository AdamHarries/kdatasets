{
  "name" : "awrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72208, const global float* restrict v__72209, const global float* restrict v__72210, const global float* restrict v__72211, float v__72212, float v__72213, global float* v__72227, global int* v__72215, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72217; \n  float v__72219; \n  /* Private Memory */\n  float v__72221_0;\n  \n  float v__72223_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5907 = v__72215; \n    local int v_w_id_72204; \n    if (get_local_id(0) == 0) {\n      v_w_id_72204 = atomic_inc(v_work_idx_5907); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72204 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_72205 = get_local_id(0); v_l_id_72205 < 128; v_l_id_72205 = (v_l_id_72205 + get_local_size(0))) {\n        float v_tmp_72268 = 3.4028235E38f; \n        v__72217 = v_tmp_72268; \n        /* reduce_seq */\n        for (int v_i_72206 = 0; v_i_72206 < v_MWidthC_1; v_i_72206 = (1 + v_i_72206)) {\n          float v_tmp_72269 = 3.4028235E38f; \n          v__72219 = v_tmp_72269; \n          int v_index_72270 = v__72208[(v_i_72206 + (128 * v_MWidthC_1 * v_w_id_72204) + (v_MWidthC_1 * v_l_id_72205))]; \n          if (v_index_72270 < 0) {\n            v__72221_0 = v__72219; \n          } else {\n            if (v_index_72270 >= v_VLength_3) {\n              v__72221_0 = v__72219; \n            } else {\n              v__72221_0 = v__72210[v_index_72270]; \n            }\n          }\n          v__72223_0 = absadd(v__72221_0, v__72209[(v_i_72206 + (128 * v_MWidthC_1 * v_w_id_72204) + (v_MWidthC_1 * v_l_id_72205))]); \n          v__72217 = clmin(v__72223_0, v__72217); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72207 = 0; \n          v__72227[(v_l_id_72205 + (128 * v_w_id_72204))] = doubleMultiplyAdd(v__72217, v__72212, v__72211[(v_l_id_72205 + (128 * v_w_id_72204))], v__72213); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_72204 = atomic_inc(v_work_idx_5907); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__72208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72210",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72212",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72213",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72215",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}