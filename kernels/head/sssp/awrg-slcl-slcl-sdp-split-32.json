{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65702, const global float* restrict v__65703, const global float* restrict v__65704, const global float* restrict v__65705, float v__65706, float v__65707, global float* v__65725, global float* v__65715, global int* v__65709, local float* v__65720, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65711; \n  float v__65716; \n  float v__57071; \n  /* Private Memory */\n  float v__65713_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5299 = v__65709; \n    local int v_w_id_65694; \n    if (get_local_id(0) == 0) {\n      v_w_id_65694 = atomic_inc(v_work_idx_5299); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65694 < v_MHeight_2)){\n      for (int v_l_id_65695 = get_local_id(0); v_l_id_65695 < v_MWidthC_1; v_l_id_65695 = (v_l_id_65695 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_65696 = 0; v_i_65696 < 32; v_i_65696 = (1 + v_i_65696)) {\n          float v_tmp_65788 = 3.4028235E38f; \n          v__65711 = v_tmp_65788; \n          int v_index_65789 = v__65702[(v_l_id_65695 + (32 * v_MWidthC_1 * v_w_id_65694) + (v_MWidthC_1 * v_i_65696))]; \n          if (v_index_65789 < 0) {\n            v__65713_0 = v__65711; \n          } else {\n            if (v_index_65789 >= v_VLength_3) {\n              v__65713_0 = v__65711; \n            } else {\n              v__65713_0 = v__65704[v_index_65789]; \n            }\n          }\n          v__65715[(31 + (32 * v_MWidthC_1 * v_w_id_65694) + (-1 * v_i_65696) + (32 * v_l_id_65695))] = absadd(v__65713_0, v__65703[(v_l_id_65695 + (32 * v_MWidthC_1 * v_w_id_65694) + (v_MWidthC_1 * v_i_65696))]); \n        }\n        /* end map_seq */\n        float v_tmp_65790 = 3.4028235E38f; \n        v__65716 = v_tmp_65790; \n        /* reduce_seq */\n        for (int v_i_65697 = 0; v_i_65697 < 32; v_i_65697 = (1 + v_i_65697)) {\n          v__65716 = clmin(v__65716, v__65715[(v_i_65697 + (32 * v_MWidthC_1 * v_w_id_65694) + (32 * v_l_id_65695))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65698 = 0; \n          v__65720[v_l_id_65695] = id(v__65716); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65699 = get_local_id(0); \n        float v_tmp_65793 = 3.4028235E38f; \n        v__57071 = v_tmp_65793; \n        /* reduce_seq */\n        for (int v_i_65700 = 0; v_i_65700 < v_MWidthC_1; v_i_65700 = (1 + v_i_65700)) {\n          v__57071 = clmin(v__57071, v__65720[(v_i_65700 + (v_MWidthC_1 * v_l_id_65699))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65701 = 0; \n          v__65725[v_w_id_65694] = doubleMultiplyAdd(v__57071, v__65706, v__65705[v_w_id_65694], v__65707); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65694 = atomic_inc(v_work_idx_5299); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65702",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65703",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65704",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65715",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65709",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65720",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}