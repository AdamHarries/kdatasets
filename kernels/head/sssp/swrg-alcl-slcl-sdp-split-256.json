{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74880, const global float* restrict v__74881, const global float* restrict v__74882, const global float* restrict v__74883, float v__74884, float v__74885, global float* v__74902, global float* v__74892, local float* v__74897, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74888; \n  float v__74893; \n  float v__57071; \n  /* Private Memory */\n  float v__74890_0;\n  \n  for (int v_wg_id_74872 = get_group_id(0); v_wg_id_74872 < v_MHeight_2; v_wg_id_74872 = (v_wg_id_74872 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6156; \n      v_work_idx_6156 = 0; \n      int v_l_id_74873 = atomic_inc(&(v_work_idx_6156)); \n      while((v_l_id_74873 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_74874 = 0; v_i_74874 < 256; v_i_74874 = (1 + v_i_74874)) {\n          float v_tmp_74959 = 3.4028235E38f; \n          v__74888 = v_tmp_74959; \n          int v_index_74960 = v__74880[(v_l_id_74873 + (256 * v_MWidthC_1 * v_wg_id_74872) + (v_MWidthC_1 * v_i_74874))]; \n          if (v_index_74960 < 0) {\n            v__74890_0 = v__74888; \n          } else {\n            if (v_index_74960 >= v_VLength_3) {\n              v__74890_0 = v__74888; \n            } else {\n              v__74890_0 = v__74882[v_index_74960]; \n            }\n          }\n          v__74892[(255 + (256 * v_MWidthC_1 * v_wg_id_74872) + (-1 * v_i_74874) + (256 * v_l_id_74873))] = absadd(v__74890_0, v__74881[(v_l_id_74873 + (256 * v_MWidthC_1 * v_wg_id_74872) + (v_MWidthC_1 * v_i_74874))]); \n        }\n        /* end map_seq */\n        float v_tmp_74961 = 3.4028235E38f; \n        v__74893 = v_tmp_74961; \n        /* reduce_seq */\n        for (int v_i_74875 = 0; v_i_74875 < 256; v_i_74875 = (1 + v_i_74875)) {\n          v__74893 = clmin(v__74893, v__74892[(v_i_74875 + (256 * v_MWidthC_1 * v_wg_id_74872) + (256 * v_l_id_74873))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74876 = 0; \n          v__74897[v_l_id_74873] = id(v__74893); \n        }\n        /* end map_seq */\n        v_l_id_74873 = atomic_inc(&(v_work_idx_6156)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_74877 = get_local_id(0); \n      float v_tmp_74964 = 3.4028235E38f; \n      v__57071 = v_tmp_74964; \n      /* reduce_seq */\n      for (int v_i_74878 = 0; v_i_74878 < v_MWidthC_1; v_i_74878 = (1 + v_i_74878)) {\n        v__57071 = clmin(v__57071, v__74897[(v_i_74878 + (v_MWidthC_1 * v_l_id_74877))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74879 = 0; \n        v__74902[v_wg_id_74872] = doubleMultiplyAdd(v__57071, v__74884, v__74883[v_wg_id_74872], v__74885); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__74880",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74881",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74882",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74884",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74885",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__74892",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__74902",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74897",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}