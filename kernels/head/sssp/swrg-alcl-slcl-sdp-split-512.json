{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78212, const global float* restrict v__78213, const global float* restrict v__78214, const global float* restrict v__78215, float v__78216, float v__78217, global float* v__78234, global float* v__78224, local float* v__78229, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78220; \n  float v__78225; \n  float v__57071; \n  /* Private Memory */\n  float v__78222_0;\n  \n  for (int v_wg_id_78204 = get_group_id(0); v_wg_id_78204 < v_MHeight_2; v_wg_id_78204 = (v_wg_id_78204 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6468; \n      v_work_idx_6468 = 0; \n      int v_l_id_78205 = atomic_inc(&(v_work_idx_6468)); \n      while((v_l_id_78205 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_78206 = 0; v_i_78206 < 512; v_i_78206 = (1 + v_i_78206)) {\n          float v_tmp_78291 = 3.4028235E38f; \n          v__78220 = v_tmp_78291; \n          int v_index_78292 = v__78212[(v_l_id_78205 + (512 * v_MWidthC_1 * v_wg_id_78204) + (v_MWidthC_1 * v_i_78206))]; \n          if (v_index_78292 < 0) {\n            v__78222_0 = v__78220; \n          } else {\n            if (v_index_78292 >= v_VLength_3) {\n              v__78222_0 = v__78220; \n            } else {\n              v__78222_0 = v__78214[v_index_78292]; \n            }\n          }\n          v__78224[(511 + (512 * v_MWidthC_1 * v_wg_id_78204) + (-1 * v_i_78206) + (512 * v_l_id_78205))] = absadd(v__78222_0, v__78213[(v_l_id_78205 + (512 * v_MWidthC_1 * v_wg_id_78204) + (v_MWidthC_1 * v_i_78206))]); \n        }\n        /* end map_seq */\n        float v_tmp_78293 = 3.4028235E38f; \n        v__78225 = v_tmp_78293; \n        /* reduce_seq */\n        for (int v_i_78207 = 0; v_i_78207 < 512; v_i_78207 = (1 + v_i_78207)) {\n          v__78225 = clmin(v__78225, v__78224[(v_i_78207 + (512 * v_MWidthC_1 * v_wg_id_78204) + (512 * v_l_id_78205))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78208 = 0; \n          v__78229[v_l_id_78205] = id(v__78225); \n        }\n        /* end map_seq */\n        v_l_id_78205 = atomic_inc(&(v_work_idx_6468)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_78209 = get_local_id(0); \n      float v_tmp_78296 = 3.4028235E38f; \n      v__57071 = v_tmp_78296; \n      /* reduce_seq */\n      for (int v_i_78210 = 0; v_i_78210 < v_MWidthC_1; v_i_78210 = (1 + v_i_78210)) {\n        v__57071 = clmin(v__57071, v__78229[(v_i_78210 + (v_MWidthC_1 * v_l_id_78209))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_78211 = 0; \n        v__78234[v_wg_id_78204] = doubleMultiplyAdd(v__57071, v__78216, v__78215[v_wg_id_78204], v__78217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78212",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78213",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78224",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__78234",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78229",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}