{
  "name" : "awrg-alcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__78382, const global float* restrict v__78383, const global float* restrict v__78384, const global float* restrict v__78385, float v__78386, float v__78387, global float* v__78402, global float* v__78401, global int* v__78389, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78390; \n  float v__78393; \n  /* Private Memory */\n  float v__78395_0;\n  \n  float v__78397_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5812 = v__78389; \n    local int v_w_id_78377; \n    if (get_local_id(0) == 0) {\n      v_w_id_78377 = atomic_inc(v_work_idx_5812); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78377 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5810; \n        v_work_idx_5810 = 0; \n        int v_l_id_78378 = atomic_inc(&(v_work_idx_5810)); \n        while((v_l_id_78378 < 8)){\n          float v_tmp_78434 = 3.4028235E38f; \n          v__78390 = v_tmp_78434; \n          /* reduce_seq */\n          int v_stop_78435 = min(v__78382[(1 + (v__78382[(v_l_id_78378 + (8 * v_w_id_78377))] / 4))], ((global int*)(v__78383 + (((global int*)(v__78383))[(v_l_id_78378 + (8 * v_w_id_78377))] / 4)))[1]); \n          for (int v_i_78379 = 0; v_i_78379 < v_stop_78435; v_i_78379 = (1 + v_i_78379)) {\n            float v_tmp_78443 = 3.4028235E38f; \n            v__78393 = v_tmp_78443; \n            int v_index_78445 = v__78382[(2 + v_i_78379 + (v__78382[(v_l_id_78378 + (8 * v_w_id_78377))] / 4))]; \n            if (v_index_78445 < 0) {\n              v__78395_0 = v__78393; \n            } else {\n              if (v_index_78445 >= v_MWidthC_1) {\n                v__78395_0 = v__78393; \n              } else {\n                v__78395_0 = v__78384[v_index_78445]; \n              }\n            }\n            v__78397_0 = absadd(v__78383[(2 + v_i_78379 + (((global int*)(v__78383))[(v_l_id_78378 + (8 * v_w_id_78377))] / 4))], v__78395_0); \n            v__78390 = clmin(v__78390, v__78397_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78380 = 0; \n            v__78401[(v_l_id_78378 + (8 * v_w_id_78377))] = doubleMultiplyAdd(v__78390, v__78386, v__78385[(v_l_id_78378 + (8 * v_w_id_78377))], v__78387); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78381 = 0; \n            v__78402[(v_l_id_78378 + (8 * v_w_id_78377))] = id(v__78401[(v_l_id_78378 + (8 * v_w_id_78377))]); \n          }\n          /* end map_seq */\n          v_l_id_78378 = atomic_inc(&(v_work_idx_5810)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78377 = atomic_inc(v_work_idx_5812); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78382",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78383",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78384",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__78385",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78386",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78387",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78389",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78402",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}