{
  "name" : "swrg-slcl-edp-chunk-rsa-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__79592, const global float* restrict v__79593, const global float* restrict v__79594, const global float* restrict v__79595, float v__79596, float v__79597, global float* v__79611, global float* v__79610, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79599; \n  float v__79602; \n  /* Private Memory */\n  float v__79604_0;\n  \n  float v__79606_0;\n  \n  for (int v_wg_id_79587 = get_group_id(0); v_wg_id_79587 < ((v_MHeight_2)/(16)); v_wg_id_79587 = (v_wg_id_79587 + get_num_groups(0))) {\n    for (int v_l_id_79588 = get_local_id(0); v_l_id_79588 < 16; v_l_id_79588 = (v_l_id_79588 + get_local_size(0))) {\n      float v_tmp_79648 = 3.4028235E38f; \n      v__79599 = v_tmp_79648; \n      /* reduce_seq */\n      int v_stop_79649 = min(v__79592[(1 + (v__79592[(v_l_id_79588 + (16 * v_wg_id_79587))] / 4))], ((global int*)(v__79593 + (((global int*)(v__79593))[(v_l_id_79588 + (16 * v_wg_id_79587))] / 4)))[1]); \n      for (int v_i_79589 = 0; v_i_79589 < v_stop_79649; v_i_79589 = (1 + v_i_79589)) {\n        float v_tmp_79657 = 3.4028235E38f; \n        v__79602 = v_tmp_79657; \n        int v_index_79659 = v__79592[(2 + v_i_79589 + (v__79592[(v_l_id_79588 + (16 * v_wg_id_79587))] / 4))]; \n        if (v_index_79659 < 0) {\n          v__79604_0 = v__79602; \n        } else {\n          if (v_index_79659 >= v_MWidthC_1) {\n            v__79604_0 = v__79602; \n          } else {\n            v__79604_0 = v__79594[v_index_79659]; \n          }\n        }\n        v__79606_0 = absadd(v__79593[(2 + v_i_79589 + (((global int*)(v__79593))[(v_l_id_79588 + (16 * v_wg_id_79587))] / 4))], v__79604_0); \n        v__79599 = clmin(v__79599, v__79606_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_79590 = 0; \n        v__79610[(v_l_id_79588 + (16 * v_wg_id_79587))] = doubleMultiplyAdd(v__79599, v__79596, v__79595[(v_l_id_79588 + (16 * v_wg_id_79587))], v__79597); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_79591 = 0; \n        v__79611[(v_l_id_79588 + (16 * v_wg_id_79587))] = id(v__79610[(v_l_id_79588 + (16 * v_wg_id_79587))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "16",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79592",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__79593",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__79594",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__79595",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79596",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79597",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79610",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__79611",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}