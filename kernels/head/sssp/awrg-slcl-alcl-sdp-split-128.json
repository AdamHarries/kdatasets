{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72687, const global float* restrict v__72688, const global float* restrict v__72689, const global float* restrict v__72690, float v__72691, float v__72692, global float* v__72710, global float* v__72700, global int* v__72694, local float* v__72705, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72696; \n  float v__72701; \n  float v__57071; \n  /* Private Memory */\n  float v__72698_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5952 = v__72694; \n    local int v_w_id_72679; \n    if (get_local_id(0) == 0) {\n      v_w_id_72679 = atomic_inc(v_work_idx_5952); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72679 < v_MHeight_2)){\n      for (int v_l_id_72680 = get_local_id(0); v_l_id_72680 < v_MWidthC_1; v_l_id_72680 = (v_l_id_72680 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72681 = 0; v_i_72681 < 128; v_i_72681 = (1 + v_i_72681)) {\n          float v_tmp_72769 = 3.4028235E38f; \n          v__72696 = v_tmp_72769; \n          int v_index_72770 = v__72687[(v_l_id_72680 + (128 * v_MWidthC_1 * v_w_id_72679) + (v_MWidthC_1 * v_i_72681))]; \n          if (v_index_72770 < 0) {\n            v__72698_0 = v__72696; \n          } else {\n            if (v_index_72770 >= v_VLength_3) {\n              v__72698_0 = v__72696; \n            } else {\n              v__72698_0 = v__72689[v_index_72770]; \n            }\n          }\n          v__72700[(127 + (128 * v_MWidthC_1 * v_w_id_72679) + (-1 * v_i_72681) + (128 * v_l_id_72680))] = absadd(v__72698_0, v__72688[(v_l_id_72680 + (128 * v_MWidthC_1 * v_w_id_72679) + (v_MWidthC_1 * v_i_72681))]); \n        }\n        /* end map_seq */\n        float v_tmp_72771 = 3.4028235E38f; \n        v__72701 = v_tmp_72771; \n        /* reduce_seq */\n        for (int v_i_72682 = 0; v_i_72682 < 128; v_i_72682 = (1 + v_i_72682)) {\n          v__72701 = clmin(v__72701, v__72700[(v_i_72682 + (128 * v_MWidthC_1 * v_w_id_72679) + (128 * v_l_id_72680))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72683 = 0; \n          v__72705[v_l_id_72680] = id(v__72701); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5945; \n        v_work_idx_5945 = 0; \n        int v_l_id_72684 = atomic_inc(&(v_work_idx_5945)); \n        while((v_l_id_72684 < 1)){\n          float v_tmp_72774 = 3.4028235E38f; \n          v__57071 = v_tmp_72774; \n          /* reduce_seq */\n          for (int v_i_72685 = 0; v_i_72685 < v_MWidthC_1; v_i_72685 = (1 + v_i_72685)) {\n            v__57071 = clmin(v__57071, v__72705[(v_i_72685 + (v_MWidthC_1 * v_l_id_72684))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_72686 = 0; \n            v__72710[v_w_id_72679] = doubleMultiplyAdd(v__57071, v__72691, v__72690[v_w_id_72679], v__72692); \n          }\n          /* end map_seq */\n          v_l_id_72684 = atomic_inc(&(v_work_idx_5945)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72679 = atomic_inc(v_work_idx_5952); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72687",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72688",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72689",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72690",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72691",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72692",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72700",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72694",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72705",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}