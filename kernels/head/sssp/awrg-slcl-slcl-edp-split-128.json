{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__72576, const global float* restrict v__72577, const global float* restrict v__72578, const global float* restrict v__72579, float v__72580, float v__72581, global float* v__72601, global int* v__72583, local float* v__72596, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72585; \n  float v__72587; \n  float v__57071; \n  /* Private Memory */\n  float v__72589_0;\n  \n  float v__72591_0;\n  \n  int v__72595_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5941 = v__72583; \n    local int v_w_id_72569; \n    if (get_local_id(0) == 0) {\n      v_w_id_72569 = atomic_inc(v_work_idx_5941); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72569 < v_MHeight_2)){\n      for (int v_l_id_72570 = get_local_id(0); v_l_id_72570 < v_MWidthC_1; v_l_id_72570 = (v_l_id_72570 + get_local_size(0))) {\n        float v_tmp_72667 = 3.4028235E38f; \n        v__72585 = v_tmp_72667; \n        /* reduce_while_seq */\n        for (int v_i_72571 = 0; v_i_72571 < 128; v_i_72571 = (1 + v_i_72571)) {\n          v__72595_0 = check(v__72585, v__72576[(v_l_id_72570 + (128 * v_MWidthC_1 * v_w_id_72569) + (v_MWidthC_1 * v_i_72571))]); \n          if (v__72595_0) {\n          } else {\n            break;\n          }\n          float v_tmp_72668 = 3.4028235E38f; \n          v__72587 = v_tmp_72668; \n          int v_index_72669 = v__72576[(v_l_id_72570 + (128 * v_MWidthC_1 * v_w_id_72569) + (v_MWidthC_1 * v_i_72571))]; \n          if (v_index_72669 < 0) {\n            v__72589_0 = v__72587; \n          } else {\n            if (v_index_72669 >= v_VLength_3) {\n              v__72589_0 = v__72587; \n            } else {\n              v__72589_0 = v__72578[v_index_72669]; \n            }\n          }\n          v__72591_0 = absadd(v__72589_0, v__72577[(v_l_id_72570 + (128 * v_MWidthC_1 * v_w_id_72569) + (v_MWidthC_1 * v_i_72571))]); \n          v__72585 = clmin(v__72591_0, v__72585); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72572 = 0; \n          v__72596[v_l_id_72570] = id(v__72585); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72573 = get_local_id(0); \n        float v_tmp_72672 = 3.4028235E38f; \n        v__57071 = v_tmp_72672; \n        /* reduce_seq */\n        for (int v_i_72574 = 0; v_i_72574 < v_MWidthC_1; v_i_72574 = (1 + v_i_72574)) {\n          v__57071 = clmin(v__57071, v__72596[(v_i_72574 + (v_MWidthC_1 * v_l_id_72573))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72575 = 0; \n          v__72601[v_w_id_72569] = doubleMultiplyAdd(v__57071, v__72580, v__72579[v_w_id_72569], v__72581); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72569 = atomic_inc(v_work_idx_5941); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__72576",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72577",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72578",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72580",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72581",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72583",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72596",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}