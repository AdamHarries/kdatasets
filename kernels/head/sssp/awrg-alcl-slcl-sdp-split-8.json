{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59886, const global float* restrict v__59887, const global float* restrict v__59888, const global float* restrict v__59889, float v__59890, float v__59891, global float* v__59909, global float* v__59899, global int* v__59893, local float* v__59904, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59895; \n  float v__59900; \n  float v__57071; \n  /* Private Memory */\n  float v__59897_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4757 = v__59893; \n    local int v_w_id_59878; \n    if (get_local_id(0) == 0) {\n      v_w_id_59878 = atomic_inc(v_work_idx_4757); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59878 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4755; \n        v_work_idx_4755 = 0; \n        int v_l_id_59879 = atomic_inc(&(v_work_idx_4755)); \n        while((v_l_id_59879 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_59880 = 0; v_i_59880 < 8; v_i_59880 = (1 + v_i_59880)) {\n            float v_tmp_59964 = 3.4028235E38f; \n            v__59895 = v_tmp_59964; \n            int v_index_59965 = v__59886[(v_l_id_59879 + (8 * v_MWidthC_1 * v_w_id_59878) + (v_MWidthC_1 * v_i_59880))]; \n            if (v_index_59965 < 0) {\n              v__59897_0 = v__59895; \n            } else {\n              if (v_index_59965 >= v_VLength_3) {\n                v__59897_0 = v__59895; \n              } else {\n                v__59897_0 = v__59888[v_index_59965]; \n              }\n            }\n            v__59899[(7 + (8 * v_MWidthC_1 * v_w_id_59878) + (-1 * v_i_59880) + (8 * v_l_id_59879))] = absadd(v__59897_0, v__59887[(v_l_id_59879 + (8 * v_MWidthC_1 * v_w_id_59878) + (v_MWidthC_1 * v_i_59880))]); \n          }\n          /* end map_seq */\n          float v_tmp_59966 = 3.4028235E38f; \n          v__59900 = v_tmp_59966; \n          /* reduce_seq */\n          for (int v_i_59881 = 0; v_i_59881 < 8; v_i_59881 = (1 + v_i_59881)) {\n            v__59900 = clmin(v__59900, v__59899[(v_i_59881 + (8 * v_MWidthC_1 * v_w_id_59878) + (8 * v_l_id_59879))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59882 = 0; \n            v__59904[v_l_id_59879] = id(v__59900); \n          }\n          /* end map_seq */\n          v_l_id_59879 = atomic_inc(&(v_work_idx_4755)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59883 = get_local_id(0); \n        float v_tmp_59969 = 3.4028235E38f; \n        v__57071 = v_tmp_59969; \n        /* reduce_seq */\n        for (int v_i_59884 = 0; v_i_59884 < v_MWidthC_1; v_i_59884 = (1 + v_i_59884)) {\n          v__57071 = clmin(v__57071, v__59904[(v_i_59884 + (v_MWidthC_1 * v_l_id_59883))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59885 = 0; \n          v__59909[v_w_id_59878] = doubleMultiplyAdd(v__57071, v__59890, v__59889[v_w_id_59878], v__59891); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59878 = atomic_inc(v_work_idx_4757); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59886",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59887",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59888",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59890",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59891",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59899",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59893",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59909",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59904",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}