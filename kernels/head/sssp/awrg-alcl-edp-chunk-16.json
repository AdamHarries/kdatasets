{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63137, const global float* restrict v__63138, const global float* restrict v__63139, const global float* restrict v__63140, float v__63141, float v__63142, global float* v__63158, global int* v__63144, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63145; \n  float v__63148; \n  /* Private Memory */\n  float v__63150_0;\n  \n  float v__63152_0;\n  \n  int v__63156_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5058 = v__63144; \n    local int v_w_id_63133; \n    if (get_local_id(0) == 0) {\n      v_w_id_63133 = atomic_inc(v_work_idx_5058); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63133 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5056; \n        v_work_idx_5056 = 0; \n        int v_l_id_63134 = atomic_inc(&(v_work_idx_5056)); \n        while((v_l_id_63134 < 16)){\n          float v_tmp_63201 = 3.4028235E38f; \n          v__63145 = v_tmp_63201; \n          /* reduce_while_seq */\n          for (int v_i_63135 = 0; v_i_63135 < v_MWidthC_1; v_i_63135 = (1 + v_i_63135)) {\n            v__63156_0 = check(v__63145, v__63137[(v_i_63135 + (16 * v_MWidthC_1 * v_w_id_63133) + (v_MWidthC_1 * v_l_id_63134))]); \n            if (v__63156_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63202 = 3.4028235E38f; \n            v__63148 = v_tmp_63202; \n            int v_index_63203 = v__63137[(v_i_63135 + (16 * v_MWidthC_1 * v_w_id_63133) + (v_MWidthC_1 * v_l_id_63134))]; \n            if (v_index_63203 < 0) {\n              v__63150_0 = v__63148; \n            } else {\n              if (v_index_63203 >= v_VLength_3) {\n                v__63150_0 = v__63148; \n              } else {\n                v__63150_0 = v__63139[v_index_63203]; \n              }\n            }\n            v__63152_0 = absadd(v__63150_0, v__63138[(v_i_63135 + (16 * v_MWidthC_1 * v_w_id_63133) + (v_MWidthC_1 * v_l_id_63134))]); \n            v__63145 = clmin(v__63152_0, v__63145); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63136 = 0; \n            v__63158[(v_l_id_63134 + (16 * v_w_id_63133))] = doubleMultiplyAdd(v__63145, v__63141, v__63140[(v_l_id_63134 + (16 * v_w_id_63133))], v__63142); \n          }\n          /* end map_seq */\n          v_l_id_63134 = atomic_inc(&(v_work_idx_5056)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63133 = atomic_inc(v_work_idx_5058); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63138",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63139",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63140",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63141",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63142",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63144",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}