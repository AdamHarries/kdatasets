{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60183, const global float* restrict v__60184, const global float* restrict v__60185, const global float* restrict v__60186, float v__60187, float v__60188, global float* v__60206, global float* v__60196, global int* v__60190, local float* v__60201, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60192; \n  float v__60197; \n  float v__57071; \n  /* Private Memory */\n  float v__60194_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4789 = v__60190; \n    local int v_w_id_60175; \n    if (get_local_id(0) == 0) {\n      v_w_id_60175 = atomic_inc(v_work_idx_4789); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60175 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4787; \n        v_work_idx_4787 = 0; \n        int v_l_id_60176 = atomic_inc(&(v_work_idx_4787)); \n        while((v_l_id_60176 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_60177 = 0; v_i_60177 < 8; v_i_60177 = (1 + v_i_60177)) {\n            float v_tmp_60257 = 3.4028235E38f; \n            v__60192 = v_tmp_60257; \n            int v_index_60258 = v__60183[(v_l_id_60176 + (8 * v_MWidthC_1 * v_w_id_60175) + (v_MWidthC_1 * v_i_60177))]; \n            if (v_index_60258 < 0) {\n              v__60194_0 = v__60192; \n            } else {\n              if (v_index_60258 >= v_VLength_3) {\n                v__60194_0 = v__60192; \n              } else {\n                v__60194_0 = v__60185[v_index_60258]; \n              }\n            }\n            v__60196[(7 + (8 * v_MWidthC_1 * v_w_id_60175) + (-1 * v_i_60177) + (8 * v_l_id_60176))] = absadd(v__60194_0, v__60184[(v_l_id_60176 + (8 * v_MWidthC_1 * v_w_id_60175) + (v_MWidthC_1 * v_i_60177))]); \n          }\n          /* end map_seq */\n          float v_tmp_60259 = 3.4028235E38f; \n          v__60197 = v_tmp_60259; \n          /* reduce_seq */\n          for (int v_i_60178 = 0; v_i_60178 < 8; v_i_60178 = (1 + v_i_60178)) {\n            v__60197 = clmin(v__60197, v__60196[(v_i_60178 + (8 * v_MWidthC_1 * v_w_id_60175) + (8 * v_l_id_60176))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60179 = 0; \n            v__60201[v_l_id_60176] = id(v__60197); \n          }\n          /* end map_seq */\n          v_l_id_60176 = atomic_inc(&(v_work_idx_4787)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4781; \n        v_work_idx_4781 = 0; \n        int v_l_id_60180 = atomic_inc(&(v_work_idx_4781)); \n        while((v_l_id_60180 < 1)){\n          float v_tmp_60262 = 3.4028235E38f; \n          v__57071 = v_tmp_60262; \n          /* reduce_seq */\n          for (int v_i_60181 = 0; v_i_60181 < v_MWidthC_1; v_i_60181 = (1 + v_i_60181)) {\n            v__57071 = clmin(v__57071, v__60201[(v_i_60181 + (v_MWidthC_1 * v_l_id_60180))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60182 = 0; \n            v__60206[v_w_id_60175] = doubleMultiplyAdd(v__57071, v__60187, v__60186[v_w_id_60175], v__60188); \n          }\n          /* end map_seq */\n          v_l_id_60180 = atomic_inc(&(v_work_idx_4781)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60175 = atomic_inc(v_work_idx_4789); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__60183",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60184",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60185",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60187",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60188",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60196",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60190",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60201",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}