{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74978, const global float* restrict v__74979, const global float* restrict v__74980, const global float* restrict v__74981, float v__74982, float v__74983, global float* v__75000, local float* v__74995, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74986; \n  float v__74988; \n  float v__57071; \n  /* Private Memory */\n  float v__74990_0;\n  \n  float v__74992_0;\n  \n  for (int v_wg_id_74971 = get_group_id(0); v_wg_id_74971 < v_MHeight_2; v_wg_id_74971 = (v_wg_id_74971 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6165; \n      v_work_idx_6165 = 0; \n      int v_l_id_74972 = atomic_inc(&(v_work_idx_6165)); \n      while((v_l_id_74972 < v_MWidthC_1)){\n        float v_tmp_75057 = 3.4028235E38f; \n        v__74986 = v_tmp_75057; \n        /* reduce_seq */\n        for (int v_i_74973 = 0; v_i_74973 < 256; v_i_74973 = (1 + v_i_74973)) {\n          float v_tmp_75058 = 3.4028235E38f; \n          v__74988 = v_tmp_75058; \n          int v_index_75059 = v__74978[(v_l_id_74972 + (256 * v_MWidthC_1 * v_wg_id_74971) + (v_MWidthC_1 * v_i_74973))]; \n          if (v_index_75059 < 0) {\n            v__74990_0 = v__74988; \n          } else {\n            if (v_index_75059 >= v_VLength_3) {\n              v__74990_0 = v__74988; \n            } else {\n              v__74990_0 = v__74980[v_index_75059]; \n            }\n          }\n          v__74992_0 = absadd(v__74990_0, v__74979[(v_l_id_74972 + (256 * v_MWidthC_1 * v_wg_id_74971) + (v_MWidthC_1 * v_i_74973))]); \n          v__74986 = clmin(v__74992_0, v__74986); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74974 = 0; \n          v__74995[v_l_id_74972] = id(v__74986); \n        }\n        /* end map_seq */\n        v_l_id_74972 = atomic_inc(&(v_work_idx_6165)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_74975 = get_local_id(0); \n      float v_tmp_75062 = 3.4028235E38f; \n      v__57071 = v_tmp_75062; \n      /* reduce_seq */\n      for (int v_i_74976 = 0; v_i_74976 < v_MWidthC_1; v_i_74976 = (1 + v_i_74976)) {\n        v__57071 = clmin(v__57071, v__74995[(v_i_74976 + (v_MWidthC_1 * v_l_id_74975))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74977 = 0; \n        v__75000[v_wg_id_74971] = doubleMultiplyAdd(v__57071, v__74982, v__74981[v_wg_id_74971], v__74983); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__74978",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74979",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74980",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74982",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74983",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__74995",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}