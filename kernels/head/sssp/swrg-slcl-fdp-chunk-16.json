{
  "name" : "swrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60540, const global float* restrict v__60541, const global float* restrict v__60542, const global float* restrict v__60543, float v__60544, float v__60545, global float* v__60558, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60548; \n  float v__60550; \n  /* Private Memory */\n  float v__60552_0;\n  \n  float v__60554_0;\n  \n  for (int v_wg_id_60536 = get_group_id(0); v_wg_id_60536 < ((v_MHeight_2)/(16)); v_wg_id_60536 = (v_wg_id_60536 + get_num_groups(0))) {\n    for (int v_l_id_60537 = get_local_id(0); v_l_id_60537 < 16; v_l_id_60537 = (v_l_id_60537 + get_local_size(0))) {\n      float v_tmp_60600 = 3.4028235E38f; \n      v__60548 = v_tmp_60600; \n      /* reduce_seq */\n      for (int v_i_60538 = 0; v_i_60538 < v_MWidthC_1; v_i_60538 = (1 + v_i_60538)) {\n        float v_tmp_60601 = 3.4028235E38f; \n        v__60550 = v_tmp_60601; \n        int v_index_60602 = v__60540[(v_i_60538 + (16 * v_MWidthC_1 * v_wg_id_60536) + (v_MWidthC_1 * v_l_id_60537))]; \n        if (v_index_60602 < 0) {\n          v__60552_0 = v__60550; \n        } else {\n          if (v_index_60602 >= v_VLength_3) {\n            v__60552_0 = v__60550; \n          } else {\n            v__60552_0 = v__60542[v_index_60602]; \n          }\n        }\n        v__60554_0 = absadd(v__60552_0, v__60541[(v_i_60538 + (16 * v_MWidthC_1 * v_wg_id_60536) + (v_MWidthC_1 * v_l_id_60537))]); \n        v__60548 = clmin(v__60554_0, v__60548); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_60539 = 0; \n        v__60558[(v_l_id_60537 + (16 * v_wg_id_60536))] = doubleMultiplyAdd(v__60548, v__60544, v__60543[(v_l_id_60537 + (16 * v_wg_id_60536))], v__60545); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60542",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60543",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60544",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60545",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__60558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}