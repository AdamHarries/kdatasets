{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62370, const global float* restrict v__62371, const global float* restrict v__62372, const global float* restrict v__62373, float v__62374, float v__62375, global float* v__62393, global float* v__62383, global int* v__62377, local float* v__62388, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62379; \n  float v__62384; \n  float v__57071; \n  /* Private Memory */\n  float v__62381_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4987 = v__62377; \n    local int v_w_id_62362; \n    if (get_local_id(0) == 0) {\n      v_w_id_62362 = atomic_inc(v_work_idx_4987); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62362 < v_MHeight_2)){\n      for (int v_l_id_62363 = get_local_id(0); v_l_id_62363 < v_MWidthC_1; v_l_id_62363 = (v_l_id_62363 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_62364 = 0; v_i_62364 < 16; v_i_62364 = (1 + v_i_62364)) {\n          float v_tmp_62456 = 3.4028235E38f; \n          v__62379 = v_tmp_62456; \n          int v_index_62457 = v__62370[(v_l_id_62363 + (16 * v_MWidthC_1 * v_w_id_62362) + (v_MWidthC_1 * v_i_62364))]; \n          if (v_index_62457 < 0) {\n            v__62381_0 = v__62379; \n          } else {\n            if (v_index_62457 >= v_VLength_3) {\n              v__62381_0 = v__62379; \n            } else {\n              v__62381_0 = v__62372[v_index_62457]; \n            }\n          }\n          v__62383[(15 + (16 * v_MWidthC_1 * v_w_id_62362) + (-1 * v_i_62364) + (16 * v_l_id_62363))] = absadd(v__62381_0, v__62371[(v_l_id_62363 + (16 * v_MWidthC_1 * v_w_id_62362) + (v_MWidthC_1 * v_i_62364))]); \n        }\n        /* end map_seq */\n        float v_tmp_62458 = 3.4028235E38f; \n        v__62384 = v_tmp_62458; \n        /* reduce_seq */\n        for (int v_i_62365 = 0; v_i_62365 < 16; v_i_62365 = (1 + v_i_62365)) {\n          v__62384 = clmin(v__62384, v__62383[(v_i_62365 + (16 * v_MWidthC_1 * v_w_id_62362) + (16 * v_l_id_62363))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62366 = 0; \n          v__62388[v_l_id_62363] = id(v__62384); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_62367 = get_local_id(0); \n        float v_tmp_62461 = 3.4028235E38f; \n        v__57071 = v_tmp_62461; \n        /* reduce_seq */\n        for (int v_i_62368 = 0; v_i_62368 < v_MWidthC_1; v_i_62368 = (1 + v_i_62368)) {\n          v__57071 = clmin(v__57071, v__62388[(v_i_62368 + (v_MWidthC_1 * v_l_id_62367))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62369 = 0; \n          v__62393[v_w_id_62362] = doubleMultiplyAdd(v__57071, v__62374, v__62373[v_w_id_62362], v__62375); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62362 = atomic_inc(v_work_idx_4987); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62370",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62371",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62372",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62373",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62374",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62375",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62383",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62377",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62393",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62388",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}