{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79452, const global float* restrict v__79453, const global float* restrict v__79454, const global float* restrict v__79455, float v__79456, float v__79457, global float* v__79475, global int* v__79459, local float* v__79470, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79461; \n  float v__79463; \n  float v__57071; \n  /* Private Memory */\n  float v__79465_0;\n  \n  float v__79467_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6586 = v__79459; \n    local int v_w_id_79445; \n    if (get_local_id(0) == 0) {\n      v_w_id_79445 = atomic_inc(v_work_idx_6586); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79445 < v_MHeight_2)){\n      for (int v_l_id_79446 = get_local_id(0); v_l_id_79446 < v_MWidthC_1; v_l_id_79446 = (v_l_id_79446 + get_local_size(0))) {\n        float v_tmp_79534 = 3.4028235E38f; \n        v__79461 = v_tmp_79534; \n        /* reduce_seq */\n        for (int v_i_79447 = 0; v_i_79447 < 512; v_i_79447 = (1 + v_i_79447)) {\n          float v_tmp_79535 = 3.4028235E38f; \n          v__79463 = v_tmp_79535; \n          int v_index_79536 = v__79452[(v_l_id_79446 + (512 * v_MWidthC_1 * v_w_id_79445) + (v_MWidthC_1 * v_i_79447))]; \n          if (v_index_79536 < 0) {\n            v__79465_0 = v__79463; \n          } else {\n            if (v_index_79536 >= v_VLength_3) {\n              v__79465_0 = v__79463; \n            } else {\n              v__79465_0 = v__79454[v_index_79536]; \n            }\n          }\n          v__79467_0 = absadd(v__79465_0, v__79453[(v_l_id_79446 + (512 * v_MWidthC_1 * v_w_id_79445) + (v_MWidthC_1 * v_i_79447))]); \n          v__79461 = clmin(v__79467_0, v__79461); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79448 = 0; \n          v__79470[v_l_id_79446] = id(v__79461); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6580; \n        v_work_idx_6580 = 0; \n        int v_l_id_79449 = atomic_inc(&(v_work_idx_6580)); \n        while((v_l_id_79449 < 1)){\n          float v_tmp_79539 = 3.4028235E38f; \n          v__57071 = v_tmp_79539; \n          /* reduce_seq */\n          for (int v_i_79450 = 0; v_i_79450 < v_MWidthC_1; v_i_79450 = (1 + v_i_79450)) {\n            v__57071 = clmin(v__57071, v__79470[(v_i_79450 + (v_MWidthC_1 * v_l_id_79449))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79451 = 0; \n            v__79475[v_w_id_79445] = doubleMultiplyAdd(v__57071, v__79456, v__79455[v_w_id_79445], v__79457); \n          }\n          /* end map_seq */\n          v_l_id_79449 = atomic_inc(&(v_work_idx_6580)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79445 = atomic_inc(v_work_idx_6586); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79452",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79453",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79454",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79455",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79456",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79457",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79459",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79475",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79470",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}