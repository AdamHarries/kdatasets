{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64354, const global float* restrict v__64355, const global float* restrict v__64356, const global float* restrict v__64357, float v__64358, float v__64359, global float* v__64376, global float* v__64366, local float* v__64371, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64362; \n  float v__64367; \n  float v__57071; \n  /* Private Memory */\n  float v__64364_0;\n  \n  for (int v_wg_id_64346 = get_group_id(0); v_wg_id_64346 < v_MHeight_2; v_wg_id_64346 = (v_wg_id_64346 + get_num_groups(0))) {\n    for (int v_l_id_64347 = get_local_id(0); v_l_id_64347 < v_MWidthC_1; v_l_id_64347 = (v_l_id_64347 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_64348 = 0; v_i_64348 < 32; v_i_64348 = (1 + v_i_64348)) {\n        float v_tmp_64437 = 3.4028235E38f; \n        v__64362 = v_tmp_64437; \n        int v_index_64438 = v__64354[(v_l_id_64347 + (32 * v_MWidthC_1 * v_wg_id_64346) + (v_MWidthC_1 * v_i_64348))]; \n        if (v_index_64438 < 0) {\n          v__64364_0 = v__64362; \n        } else {\n          if (v_index_64438 >= v_VLength_3) {\n            v__64364_0 = v__64362; \n          } else {\n            v__64364_0 = v__64356[v_index_64438]; \n          }\n        }\n        v__64366[(31 + (32 * v_MWidthC_1 * v_wg_id_64346) + (-1 * v_i_64348) + (32 * v_l_id_64347))] = absadd(v__64364_0, v__64355[(v_l_id_64347 + (32 * v_MWidthC_1 * v_wg_id_64346) + (v_MWidthC_1 * v_i_64348))]); \n      }\n      /* end map_seq */\n      float v_tmp_64439 = 3.4028235E38f; \n      v__64367 = v_tmp_64439; \n      /* reduce_seq */\n      for (int v_i_64349 = 0; v_i_64349 < 32; v_i_64349 = (1 + v_i_64349)) {\n        v__64367 = clmin(v__64367, v__64366[(v_i_64349 + (32 * v_MWidthC_1 * v_wg_id_64346) + (32 * v_l_id_64347))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64350 = 0; \n        v__64371[v_l_id_64347] = id(v__64367); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5168; \n      v_work_idx_5168 = 0; \n      int v_l_id_64351 = atomic_inc(&(v_work_idx_5168)); \n      while((v_l_id_64351 < 1)){\n        float v_tmp_64442 = 3.4028235E38f; \n        v__57071 = v_tmp_64442; \n        /* reduce_seq */\n        for (int v_i_64352 = 0; v_i_64352 < v_MWidthC_1; v_i_64352 = (1 + v_i_64352)) {\n          v__57071 = clmin(v__57071, v__64371[(v_i_64352 + (v_MWidthC_1 * v_l_id_64351))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64353 = 0; \n          v__64376[v_wg_id_64346] = doubleMultiplyAdd(v__57071, v__64358, v__64357[v_wg_id_64346], v__64359); \n        }\n        /* end map_seq */\n        v_l_id_64351 = atomic_inc(&(v_work_idx_5168)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__64354",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64355",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64356",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64357",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64358",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64359",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64366",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__64376",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64371",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}