{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79657, const global float* restrict v__79658, const global float* restrict v__79659, const global float* restrict v__79660, float v__79661, float v__79662, global float* v__79676, global float* v__79670, global int* v__79664, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79666; \n  float v__79671; \n  /* Private Memory */\n  float v__79668_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6604 = v__79664; \n    local int v_w_id_79652; \n    if (get_local_id(0) == 0) {\n      v_w_id_79652 = atomic_inc(v_work_idx_6604); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79652 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6602; \n        v_work_idx_6602 = 0; \n        int v_l_id_79653 = atomic_inc(&(v_work_idx_6602)); \n        while((v_l_id_79653 < 512)){\n          /* map_seq */\n          for (int v_i_79654 = 0; v_i_79654 < v_MWidthC_1; v_i_79654 = (1 + v_i_79654)) {\n            float v_tmp_79715 = 3.4028235E38f; \n            v__79666 = v_tmp_79715; \n            int v_index_79716 = v__79657[(v_i_79654 + (512 * v_MWidthC_1 * v_w_id_79652) + (v_MWidthC_1 * v_l_id_79653))]; \n            if (v_index_79716 < 0) {\n              v__79668_0 = v__79666; \n            } else {\n              if (v_index_79716 >= v_VLength_3) {\n                v__79668_0 = v__79666; \n              } else {\n                v__79668_0 = v__79659[v_index_79716]; \n              }\n            }\n            v__79670[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_79652) + (-1 * v_i_79654) + (v_MWidthC_1 * v_l_id_79653))] = absadd(v__79668_0, v__79658[(v_i_79654 + (512 * v_MWidthC_1 * v_w_id_79652) + (v_MWidthC_1 * v_l_id_79653))]); \n          }\n          /* end map_seq */\n          float v_tmp_79717 = 3.4028235E38f; \n          v__79671 = v_tmp_79717; \n          /* reduce_seq */\n          for (int v_i_79655 = 0; v_i_79655 < v_MWidthC_1; v_i_79655 = (1 + v_i_79655)) {\n            v__79671 = clmin(v__79671, v__79670[(v_i_79655 + (512 * v_MWidthC_1 * v_w_id_79652) + (v_MWidthC_1 * v_l_id_79653))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79656 = 0; \n            v__79676[(v_l_id_79653 + (512 * v_w_id_79652))] = doubleMultiplyAdd(v__79671, v__79661, v__79660[(v_l_id_79653 + (512 * v_w_id_79652))], v__79662); \n          }\n          /* end map_seq */\n          v_l_id_79653 = atomic_inc(&(v_work_idx_6602)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79652 = atomic_inc(v_work_idx_6604); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79657",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79658",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79659",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79661",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79662",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79664",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}