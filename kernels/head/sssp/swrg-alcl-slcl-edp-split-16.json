{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__61748, const global float* restrict v__61749, const global float* restrict v__61750, const global float* restrict v__61751, float v__61752, float v__61753, global float* v__61772, local float* v__61767, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61756; \n  float v__61758; \n  float v__57071; \n  /* Private Memory */\n  float v__61760_0;\n  \n  float v__61762_0;\n  \n  int v__61766_0;\n  \n  for (int v_wg_id_61741 = get_group_id(0); v_wg_id_61741 < v_MHeight_2; v_wg_id_61741 = (v_wg_id_61741 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4926; \n      v_work_idx_4926 = 0; \n      int v_l_id_61742 = atomic_inc(&(v_work_idx_4926)); \n      while((v_l_id_61742 < v_MWidthC_1)){\n        float v_tmp_61832 = 3.4028235E38f; \n        v__61756 = v_tmp_61832; \n        /* reduce_while_seq */\n        for (int v_i_61743 = 0; v_i_61743 < 16; v_i_61743 = (1 + v_i_61743)) {\n          v__61766_0 = check(v__61756, v__61748[(v_l_id_61742 + (16 * v_MWidthC_1 * v_wg_id_61741) + (v_MWidthC_1 * v_i_61743))]); \n          if (v__61766_0) {\n          } else {\n            break;\n          }\n          float v_tmp_61833 = 3.4028235E38f; \n          v__61758 = v_tmp_61833; \n          int v_index_61834 = v__61748[(v_l_id_61742 + (16 * v_MWidthC_1 * v_wg_id_61741) + (v_MWidthC_1 * v_i_61743))]; \n          if (v_index_61834 < 0) {\n            v__61760_0 = v__61758; \n          } else {\n            if (v_index_61834 >= v_VLength_3) {\n              v__61760_0 = v__61758; \n            } else {\n              v__61760_0 = v__61750[v_index_61834]; \n            }\n          }\n          v__61762_0 = absadd(v__61760_0, v__61749[(v_l_id_61742 + (16 * v_MWidthC_1 * v_wg_id_61741) + (v_MWidthC_1 * v_i_61743))]); \n          v__61756 = clmin(v__61762_0, v__61756); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61744 = 0; \n          v__61767[v_l_id_61742] = id(v__61756); \n        }\n        /* end map_seq */\n        v_l_id_61742 = atomic_inc(&(v_work_idx_4926)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_61745 = get_local_id(0); \n      float v_tmp_61837 = 3.4028235E38f; \n      v__57071 = v_tmp_61837; \n      /* reduce_seq */\n      for (int v_i_61746 = 0; v_i_61746 < v_MWidthC_1; v_i_61746 = (1 + v_i_61746)) {\n        v__57071 = clmin(v__57071, v__61767[(v_i_61746 + (v_MWidthC_1 * v_l_id_61745))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_61747 = 0; \n        v__61772[v_wg_id_61741] = doubleMultiplyAdd(v__57071, v__61752, v__61751[v_wg_id_61741], v__61753); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__61748",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61749",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61750",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61751",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61752",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61753",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61767",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}