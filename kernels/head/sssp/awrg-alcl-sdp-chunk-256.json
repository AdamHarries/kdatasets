{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76325, const global float* restrict v__76326, const global float* restrict v__76327, const global float* restrict v__76328, float v__76329, float v__76330, global float* v__76344, global float* v__76338, global int* v__76332, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76334; \n  float v__76339; \n  /* Private Memory */\n  float v__76336_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6292 = v__76332; \n    local int v_w_id_76320; \n    if (get_local_id(0) == 0) {\n      v_w_id_76320 = atomic_inc(v_work_idx_6292); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76320 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6290; \n        v_work_idx_6290 = 0; \n        int v_l_id_76321 = atomic_inc(&(v_work_idx_6290)); \n        while((v_l_id_76321 < 256)){\n          /* map_seq */\n          for (int v_i_76322 = 0; v_i_76322 < v_MWidthC_1; v_i_76322 = (1 + v_i_76322)) {\n            float v_tmp_76383 = 3.4028235E38f; \n            v__76334 = v_tmp_76383; \n            int v_index_76384 = v__76325[(v_i_76322 + (256 * v_MWidthC_1 * v_w_id_76320) + (v_MWidthC_1 * v_l_id_76321))]; \n            if (v_index_76384 < 0) {\n              v__76336_0 = v__76334; \n            } else {\n              if (v_index_76384 >= v_VLength_3) {\n                v__76336_0 = v__76334; \n              } else {\n                v__76336_0 = v__76327[v_index_76384]; \n              }\n            }\n            v__76338[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_76320) + (-1 * v_i_76322) + (v_MWidthC_1 * v_l_id_76321))] = absadd(v__76336_0, v__76326[(v_i_76322 + (256 * v_MWidthC_1 * v_w_id_76320) + (v_MWidthC_1 * v_l_id_76321))]); \n          }\n          /* end map_seq */\n          float v_tmp_76385 = 3.4028235E38f; \n          v__76339 = v_tmp_76385; \n          /* reduce_seq */\n          for (int v_i_76323 = 0; v_i_76323 < v_MWidthC_1; v_i_76323 = (1 + v_i_76323)) {\n            v__76339 = clmin(v__76339, v__76338[(v_i_76323 + (256 * v_MWidthC_1 * v_w_id_76320) + (v_MWidthC_1 * v_l_id_76321))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76324 = 0; \n            v__76344[(v_l_id_76321 + (256 * v_w_id_76320))] = doubleMultiplyAdd(v__76339, v__76329, v__76328[(v_l_id_76321 + (256 * v_w_id_76320))], v__76330); \n          }\n          /* end map_seq */\n          v_l_id_76321 = atomic_inc(&(v_work_idx_6290)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76320 = atomic_inc(v_work_idx_6292); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76326",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76327",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76329",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76330",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76338",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76332",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}