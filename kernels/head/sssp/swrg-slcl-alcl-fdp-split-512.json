{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77784, const global float* restrict v__77785, const global float* restrict v__77786, const global float* restrict v__77787, float v__77788, float v__77789, global float* v__77806, local float* v__77801, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77792; \n  float v__77794; \n  float v__57071; \n  /* Private Memory */\n  float v__77796_0;\n  \n  float v__77798_0;\n  \n  for (int v_wg_id_77777 = get_group_id(0); v_wg_id_77777 < v_MHeight_2; v_wg_id_77777 = (v_wg_id_77777 + get_num_groups(0))) {\n    for (int v_l_id_77778 = get_local_id(0); v_l_id_77778 < v_MWidthC_1; v_l_id_77778 = (v_l_id_77778 + get_local_size(0))) {\n      float v_tmp_77867 = 3.4028235E38f; \n      v__77792 = v_tmp_77867; \n      /* reduce_seq */\n      for (int v_i_77779 = 0; v_i_77779 < 512; v_i_77779 = (1 + v_i_77779)) {\n        float v_tmp_77868 = 3.4028235E38f; \n        v__77794 = v_tmp_77868; \n        int v_index_77869 = v__77784[(v_l_id_77778 + (512 * v_MWidthC_1 * v_wg_id_77777) + (v_MWidthC_1 * v_i_77779))]; \n        if (v_index_77869 < 0) {\n          v__77796_0 = v__77794; \n        } else {\n          if (v_index_77869 >= v_VLength_3) {\n            v__77796_0 = v__77794; \n          } else {\n            v__77796_0 = v__77786[v_index_77869]; \n          }\n        }\n        v__77798_0 = absadd(v__77796_0, v__77785[(v_l_id_77778 + (512 * v_MWidthC_1 * v_wg_id_77777) + (v_MWidthC_1 * v_i_77779))]); \n        v__77792 = clmin(v__77798_0, v__77792); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_77780 = 0; \n        v__77801[v_l_id_77778] = id(v__77792); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6426; \n      v_work_idx_6426 = 0; \n      int v_l_id_77781 = atomic_inc(&(v_work_idx_6426)); \n      while((v_l_id_77781 < 1)){\n        float v_tmp_77872 = 3.4028235E38f; \n        v__57071 = v_tmp_77872; \n        /* reduce_seq */\n        for (int v_i_77782 = 0; v_i_77782 < v_MWidthC_1; v_i_77782 = (1 + v_i_77782)) {\n          v__57071 = clmin(v__57071, v__77801[(v_i_77782 + (v_MWidthC_1 * v_l_id_77781))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77783 = 0; \n          v__77806[v_wg_id_77777] = doubleMultiplyAdd(v__57071, v__77788, v__77787[v_wg_id_77777], v__77789); \n        }\n        /* end map_seq */\n        v_l_id_77781 = atomic_inc(&(v_work_idx_6426)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__77784",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77785",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77786",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77787",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77788",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77789",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__77806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77801",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}