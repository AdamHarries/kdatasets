{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59665, const global float* restrict v__59666, const global float* restrict v__59667, const global float* restrict v__59668, float v__59669, float v__59670, global float* v__59684, global float* v__59678, global int* v__59672, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59674; \n  float v__59679; \n  /* Private Memory */\n  float v__59676_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4732 = v__59672; \n    local int v_w_id_59660; \n    if (get_local_id(0) == 0) {\n      v_w_id_59660 = atomic_inc(v_work_idx_4732); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59660 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4730; \n        v_work_idx_4730 = 0; \n        int v_l_id_59661 = atomic_inc(&(v_work_idx_4730)); \n        while((v_l_id_59661 < 8)){\n          /* map_seq */\n          for (int v_i_59662 = 0; v_i_59662 < v_MWidthC_1; v_i_59662 = (1 + v_i_59662)) {\n            float v_tmp_59723 = 3.4028235E38f; \n            v__59674 = v_tmp_59723; \n            int v_index_59724 = v__59665[(v_i_59662 + (8 * v_MWidthC_1 * v_w_id_59660) + (v_MWidthC_1 * v_l_id_59661))]; \n            if (v_index_59724 < 0) {\n              v__59676_0 = v__59674; \n            } else {\n              if (v_index_59724 >= v_VLength_3) {\n                v__59676_0 = v__59674; \n              } else {\n                v__59676_0 = v__59667[v_index_59724]; \n              }\n            }\n            v__59678[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_59660) + (-1 * v_i_59662) + (v_MWidthC_1 * v_l_id_59661))] = absadd(v__59676_0, v__59666[(v_i_59662 + (8 * v_MWidthC_1 * v_w_id_59660) + (v_MWidthC_1 * v_l_id_59661))]); \n          }\n          /* end map_seq */\n          float v_tmp_59725 = 3.4028235E38f; \n          v__59679 = v_tmp_59725; \n          /* reduce_seq */\n          for (int v_i_59663 = 0; v_i_59663 < v_MWidthC_1; v_i_59663 = (1 + v_i_59663)) {\n            v__59679 = clmin(v__59679, v__59678[(v_i_59663 + (8 * v_MWidthC_1 * v_w_id_59660) + (v_MWidthC_1 * v_l_id_59661))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59664 = 0; \n            v__59684[(v_l_id_59661 + (8 * v_w_id_59660))] = doubleMultiplyAdd(v__59679, v__59669, v__59668[(v_l_id_59661 + (8 * v_w_id_59660))], v__59670); \n          }\n          /* end map_seq */\n          v_l_id_59661 = atomic_inc(&(v_work_idx_4730)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59660 = atomic_inc(v_work_idx_4732); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59665",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59666",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59667",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59669",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59670",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59678",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59672",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}