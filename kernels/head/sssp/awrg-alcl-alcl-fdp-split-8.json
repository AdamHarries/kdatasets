{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60276, const global float* restrict v__60277, const global float* restrict v__60278, const global float* restrict v__60279, float v__60280, float v__60281, global float* v__60299, global int* v__60283, local float* v__60294, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60285; \n  float v__60287; \n  float v__57071; \n  /* Private Memory */\n  float v__60289_0;\n  \n  float v__60291_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4800 = v__60283; \n    local int v_w_id_60269; \n    if (get_local_id(0) == 0) {\n      v_w_id_60269 = atomic_inc(v_work_idx_4800); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60269 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4798; \n        v_work_idx_4798 = 0; \n        int v_l_id_60270 = atomic_inc(&(v_work_idx_4798)); \n        while((v_l_id_60270 < v_MWidthC_1)){\n          float v_tmp_60350 = 3.4028235E38f; \n          v__60285 = v_tmp_60350; \n          /* reduce_seq */\n          for (int v_i_60271 = 0; v_i_60271 < 8; v_i_60271 = (1 + v_i_60271)) {\n            float v_tmp_60351 = 3.4028235E38f; \n            v__60287 = v_tmp_60351; \n            int v_index_60352 = v__60276[(v_l_id_60270 + (8 * v_MWidthC_1 * v_w_id_60269) + (v_MWidthC_1 * v_i_60271))]; \n            if (v_index_60352 < 0) {\n              v__60289_0 = v__60287; \n            } else {\n              if (v_index_60352 >= v_VLength_3) {\n                v__60289_0 = v__60287; \n              } else {\n                v__60289_0 = v__60278[v_index_60352]; \n              }\n            }\n            v__60291_0 = absadd(v__60289_0, v__60277[(v_l_id_60270 + (8 * v_MWidthC_1 * v_w_id_60269) + (v_MWidthC_1 * v_i_60271))]); \n            v__60285 = clmin(v__60291_0, v__60285); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60272 = 0; \n            v__60294[v_l_id_60270] = id(v__60285); \n          }\n          /* end map_seq */\n          v_l_id_60270 = atomic_inc(&(v_work_idx_4798)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4793; \n        v_work_idx_4793 = 0; \n        int v_l_id_60273 = atomic_inc(&(v_work_idx_4793)); \n        while((v_l_id_60273 < 1)){\n          float v_tmp_60355 = 3.4028235E38f; \n          v__57071 = v_tmp_60355; \n          /* reduce_seq */\n          for (int v_i_60274 = 0; v_i_60274 < v_MWidthC_1; v_i_60274 = (1 + v_i_60274)) {\n            v__57071 = clmin(v__57071, v__60294[(v_i_60274 + (v_MWidthC_1 * v_l_id_60273))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60275 = 0; \n            v__60299[v_w_id_60269] = doubleMultiplyAdd(v__57071, v__60280, v__60279[v_w_id_60269], v__60281); \n          }\n          /* end map_seq */\n          v_l_id_60273 = atomic_inc(&(v_work_idx_4793)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60269 = atomic_inc(v_work_idx_4800); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__60276",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60277",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60278",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60279",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60280",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60281",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60283",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60299",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60294",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}