{
  "name" : "awrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__65912, const global float* restrict v__65913, const global float* restrict v__65914, const global float* restrict v__65915, float v__65916, float v__65917, global float* v__65937, global int* v__65919, local float* v__65932, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65921; \n  float v__65923; \n  float v__57071; \n  /* Private Memory */\n  float v__65925_0;\n  \n  float v__65927_0;\n  \n  int v__65931_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5317 = v__65919; \n    local int v_w_id_65905; \n    if (get_local_id(0) == 0) {\n      v_w_id_65905 = atomic_inc(v_work_idx_5317); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65905 < v_MHeight_2)){\n      for (int v_l_id_65906 = get_local_id(0); v_l_id_65906 < v_MWidthC_1; v_l_id_65906 = (v_l_id_65906 + get_local_size(0))) {\n        float v_tmp_66003 = 3.4028235E38f; \n        v__65921 = v_tmp_66003; \n        /* reduce_while_seq */\n        for (int v_i_65907 = 0; v_i_65907 < 32; v_i_65907 = (1 + v_i_65907)) {\n          v__65931_0 = check(v__65921, v__65912[(v_l_id_65906 + (32 * v_MWidthC_1 * v_w_id_65905) + (v_MWidthC_1 * v_i_65907))]); \n          if (v__65931_0) {\n          } else {\n            break;\n          }\n          float v_tmp_66004 = 3.4028235E38f; \n          v__65923 = v_tmp_66004; \n          int v_index_66005 = v__65912[(v_l_id_65906 + (32 * v_MWidthC_1 * v_w_id_65905) + (v_MWidthC_1 * v_i_65907))]; \n          if (v_index_66005 < 0) {\n            v__65925_0 = v__65923; \n          } else {\n            if (v_index_66005 >= v_VLength_3) {\n              v__65925_0 = v__65923; \n            } else {\n              v__65925_0 = v__65914[v_index_66005]; \n            }\n          }\n          v__65927_0 = absadd(v__65925_0, v__65913[(v_l_id_65906 + (32 * v_MWidthC_1 * v_w_id_65905) + (v_MWidthC_1 * v_i_65907))]); \n          v__65921 = clmin(v__65927_0, v__65921); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65908 = 0; \n          v__65932[v_l_id_65906] = id(v__65921); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65909 = get_local_id(0); \n        float v_tmp_66008 = 3.4028235E38f; \n        v__57071 = v_tmp_66008; \n        /* reduce_seq */\n        for (int v_i_65910 = 0; v_i_65910 < v_MWidthC_1; v_i_65910 = (1 + v_i_65910)) {\n          v__57071 = clmin(v__57071, v__65932[(v_i_65910 + (v_MWidthC_1 * v_l_id_65909))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65911 = 0; \n          v__65937[v_w_id_65905] = doubleMultiplyAdd(v__57071, v__65916, v__65915[v_w_id_65905], v__65917); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65905 = atomic_inc(v_work_idx_5317); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65912",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65913",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65914",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65915",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65916",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65917",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65919",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65932",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}