{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63068, const global float* restrict v__63069, const global float* restrict v__63070, const global float* restrict v__63071, float v__63072, float v__63073, global float* v__63087, global int* v__63075, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63077; \n  float v__63079; \n  /* Private Memory */\n  float v__63081_0;\n  \n  float v__63083_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5051 = v__63075; \n    local int v_w_id_63064; \n    if (get_local_id(0) == 0) {\n      v_w_id_63064 = atomic_inc(v_work_idx_5051); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63064 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5049; \n        v_work_idx_5049 = 0; \n        int v_l_id_63065 = atomic_inc(&(v_work_idx_5049)); \n        while((v_l_id_63065 < 16)){\n          float v_tmp_63124 = 3.4028235E38f; \n          v__63077 = v_tmp_63124; \n          /* reduce_seq */\n          for (int v_i_63066 = 0; v_i_63066 < v_MWidthC_1; v_i_63066 = (1 + v_i_63066)) {\n            float v_tmp_63125 = 3.4028235E38f; \n            v__63079 = v_tmp_63125; \n            int v_index_63126 = v__63068[(v_i_63066 + (16 * v_MWidthC_1 * v_w_id_63064) + (v_MWidthC_1 * v_l_id_63065))]; \n            if (v_index_63126 < 0) {\n              v__63081_0 = v__63079; \n            } else {\n              if (v_index_63126 >= v_VLength_3) {\n                v__63081_0 = v__63079; \n              } else {\n                v__63081_0 = v__63070[v_index_63126]; \n              }\n            }\n            v__63083_0 = absadd(v__63081_0, v__63069[(v_i_63066 + (16 * v_MWidthC_1 * v_w_id_63064) + (v_MWidthC_1 * v_l_id_63065))]); \n            v__63077 = clmin(v__63083_0, v__63077); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63067 = 0; \n            v__63087[(v_l_id_63065 + (16 * v_w_id_63064))] = doubleMultiplyAdd(v__63077, v__63072, v__63071[(v_l_id_63065 + (16 * v_w_id_63064))], v__63073); \n          }\n          /* end map_seq */\n          v_l_id_63065 = atomic_inc(&(v_work_idx_5049)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63064 = atomic_inc(v_work_idx_5051); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63070",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63075",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}