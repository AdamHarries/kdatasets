{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69456, const global float* restrict v__69457, const global float* restrict v__69458, const global float* restrict v__69459, float v__69460, float v__69461, global float* v__69479, global int* v__69463, local float* v__69474, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69465; \n  float v__69467; \n  float v__57071; \n  /* Private Memory */\n  float v__69469_0;\n  \n  float v__69471_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5650 = v__69463; \n    local int v_w_id_69449; \n    if (get_local_id(0) == 0) {\n      v_w_id_69449 = atomic_inc(v_work_idx_5650); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69449 < v_MHeight_2)){\n      for (int v_l_id_69450 = get_local_id(0); v_l_id_69450 < v_MWidthC_1; v_l_id_69450 = (v_l_id_69450 + get_local_size(0))) {\n        float v_tmp_69538 = 3.4028235E38f; \n        v__69465 = v_tmp_69538; \n        /* reduce_seq */\n        for (int v_i_69451 = 0; v_i_69451 < 64; v_i_69451 = (1 + v_i_69451)) {\n          float v_tmp_69539 = 3.4028235E38f; \n          v__69467 = v_tmp_69539; \n          int v_index_69540 = v__69456[(v_l_id_69450 + (64 * v_MWidthC_1 * v_w_id_69449) + (v_MWidthC_1 * v_i_69451))]; \n          if (v_index_69540 < 0) {\n            v__69469_0 = v__69467; \n          } else {\n            if (v_index_69540 >= v_VLength_3) {\n              v__69469_0 = v__69467; \n            } else {\n              v__69469_0 = v__69458[v_index_69540]; \n            }\n          }\n          v__69471_0 = absadd(v__69469_0, v__69457[(v_l_id_69450 + (64 * v_MWidthC_1 * v_w_id_69449) + (v_MWidthC_1 * v_i_69451))]); \n          v__69465 = clmin(v__69471_0, v__69465); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69452 = 0; \n          v__69474[v_l_id_69450] = id(v__69465); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5644; \n        v_work_idx_5644 = 0; \n        int v_l_id_69453 = atomic_inc(&(v_work_idx_5644)); \n        while((v_l_id_69453 < 1)){\n          float v_tmp_69543 = 3.4028235E38f; \n          v__57071 = v_tmp_69543; \n          /* reduce_seq */\n          for (int v_i_69454 = 0; v_i_69454 < v_MWidthC_1; v_i_69454 = (1 + v_i_69454)) {\n            v__57071 = clmin(v__57071, v__69474[(v_i_69454 + (v_MWidthC_1 * v_l_id_69453))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69455 = 0; \n            v__69479[v_w_id_69449] = doubleMultiplyAdd(v__57071, v__69460, v__69459[v_w_id_69449], v__69461); \n          }\n          /* end map_seq */\n          v_l_id_69453 = atomic_inc(&(v_work_idx_5644)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69449 = atomic_inc(v_work_idx_5650); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69456",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69457",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69458",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69460",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69461",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69463",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69479",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69474",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}