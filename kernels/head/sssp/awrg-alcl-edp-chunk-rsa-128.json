{
  "name" : "awrg-alcl-edp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__95706, const global float* restrict v__95707, const global float* restrict v__95708, const global float* restrict v__95709, float v__95710, float v__95711, global float* v__95726, global float* v__95725, global int* v__95713, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95714; \n  float v__95717; \n  /* Private Memory */\n  float v__95719_0;\n  \n  float v__95721_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7362 = v__95713; \n    local int v_w_id_95701; \n    if (get_local_id(0) == 0) {\n      v_w_id_95701 = atomic_inc(v_work_idx_7362); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_95701 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7360; \n        v_work_idx_7360 = 0; \n        int v_l_id_95702 = atomic_inc(&(v_work_idx_7360)); \n        while((v_l_id_95702 < 128)){\n          float v_tmp_95758 = 3.4028235E38f; \n          v__95714 = v_tmp_95758; \n          /* reduce_seq */\n          int v_stop_95759 = min(v__95706[(1 + (v__95706[(v_l_id_95702 + (128 * v_w_id_95701))] / 4))], ((global int*)(v__95707 + (((global int*)(v__95707))[(v_l_id_95702 + (128 * v_w_id_95701))] / 4)))[1]); \n          for (int v_i_95703 = 0; v_i_95703 < v_stop_95759; v_i_95703 = (1 + v_i_95703)) {\n            float v_tmp_95767 = 3.4028235E38f; \n            v__95717 = v_tmp_95767; \n            int v_index_95769 = v__95706[(2 + v_i_95703 + (v__95706[(v_l_id_95702 + (128 * v_w_id_95701))] / 4))]; \n            if (v_index_95769 < 0) {\n              v__95719_0 = v__95717; \n            } else {\n              if (v_index_95769 >= v_MWidthC_1) {\n                v__95719_0 = v__95717; \n              } else {\n                v__95719_0 = v__95708[v_index_95769]; \n              }\n            }\n            v__95721_0 = absadd(v__95707[(2 + v_i_95703 + (((global int*)(v__95707))[(v_l_id_95702 + (128 * v_w_id_95701))] / 4))], v__95719_0); \n            v__95714 = clmin(v__95714, v__95721_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_95704 = 0; \n            v__95725[(v_l_id_95702 + (128 * v_w_id_95701))] = doubleMultiplyAdd(v__95714, v__95710, v__95709[(v_l_id_95702 + (128 * v_w_id_95701))], v__95711); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_95705 = 0; \n            v__95726[(v_l_id_95702 + (128 * v_w_id_95701))] = id(v__95725[(v_l_id_95702 + (128 * v_w_id_95701))]); \n          }\n          /* end map_seq */\n          v_l_id_95702 = atomic_inc(&(v_work_idx_7360)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_95701 = atomic_inc(v_work_idx_7362); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95706",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__95707",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__95708",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__95709",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95710",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95711",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95725",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95713",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__95726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}