{
  "name" : "awrg-alcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__78538, const global float* restrict v__78539, const global float* restrict v__78540, const global float* restrict v__78541, float v__78542, float v__78543, global float* v__78558, global float* v__78557, global int* v__78545, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78546; \n  float v__78549; \n  /* Private Memory */\n  float v__78551_0;\n  \n  float v__78553_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5826 = v__78545; \n    local int v_w_id_78533; \n    if (get_local_id(0) == 0) {\n      v_w_id_78533 = atomic_inc(v_work_idx_5826); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78533 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5824; \n        v_work_idx_5824 = 0; \n        int v_l_id_78534 = atomic_inc(&(v_work_idx_5824)); \n        while((v_l_id_78534 < 8)){\n          float v_tmp_78590 = 3.4028235E38f; \n          v__78546 = v_tmp_78590; \n          /* reduce_seq */\n          int v_stop_78591 = min(v__78538[(1 + (v__78538[(v_l_id_78534 + (8 * v_w_id_78533))] / 4))], ((global int*)(v__78539 + (((global int*)(v__78539))[(v_l_id_78534 + (8 * v_w_id_78533))] / 4)))[1]); \n          for (int v_i_78535 = 0; v_i_78535 < v_stop_78591; v_i_78535 = (1 + v_i_78535)) {\n            float v_tmp_78599 = 3.4028235E38f; \n            v__78549 = v_tmp_78599; \n            int v_index_78601 = v__78538[(2 + v_i_78535 + (v__78538[(v_l_id_78534 + (8 * v_w_id_78533))] / 4))]; \n            if (v_index_78601 < 0) {\n              v__78551_0 = v__78549; \n            } else {\n              if (v_index_78601 >= v_MWidthC_1) {\n                v__78551_0 = v__78549; \n              } else {\n                v__78551_0 = v__78540[v_index_78601]; \n              }\n            }\n            v__78553_0 = absadd(v__78539[(2 + v_i_78535 + (((global int*)(v__78539))[(v_l_id_78534 + (8 * v_w_id_78533))] / 4))], v__78551_0); \n            v__78546 = clmin(v__78546, v__78553_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78536 = 0; \n            v__78557[(v_l_id_78534 + (8 * v_w_id_78533))] = doubleMultiplyAdd(v__78546, v__78542, v__78541[(v_l_id_78534 + (8 * v_w_id_78533))], v__78543); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78537 = 0; \n            v__78558[(v_l_id_78534 + (8 * v_w_id_78533))] = id(v__78557[(v_l_id_78534 + (8 * v_w_id_78533))]); \n          }\n          /* end map_seq */\n          v_l_id_78534 = atomic_inc(&(v_work_idx_5824)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78533 = atomic_inc(v_work_idx_5826); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__78538",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78539",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78540",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__78541",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78542",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78543",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78557",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78545",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}