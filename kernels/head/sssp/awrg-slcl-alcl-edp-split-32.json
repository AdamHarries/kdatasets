{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__66225, const global float* restrict v__66226, const global float* restrict v__66227, const global float* restrict v__66228, float v__66229, float v__66230, global float* v__66250, global int* v__66232, local float* v__66245, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66234; \n  float v__66236; \n  float v__57071; \n  /* Private Memory */\n  float v__66238_0;\n  \n  float v__66240_0;\n  \n  int v__66244_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5348 = v__66232; \n    local int v_w_id_66218; \n    if (get_local_id(0) == 0) {\n      v_w_id_66218 = atomic_inc(v_work_idx_5348); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66218 < v_MHeight_2)){\n      for (int v_l_id_66219 = get_local_id(0); v_l_id_66219 < v_MWidthC_1; v_l_id_66219 = (v_l_id_66219 + get_local_size(0))) {\n        float v_tmp_66312 = 3.4028235E38f; \n        v__66234 = v_tmp_66312; \n        /* reduce_while_seq */\n        for (int v_i_66220 = 0; v_i_66220 < 32; v_i_66220 = (1 + v_i_66220)) {\n          v__66244_0 = check(v__66234, v__66225[(v_l_id_66219 + (32 * v_MWidthC_1 * v_w_id_66218) + (v_MWidthC_1 * v_i_66220))]); \n          if (v__66244_0) {\n          } else {\n            break;\n          }\n          float v_tmp_66313 = 3.4028235E38f; \n          v__66236 = v_tmp_66313; \n          int v_index_66314 = v__66225[(v_l_id_66219 + (32 * v_MWidthC_1 * v_w_id_66218) + (v_MWidthC_1 * v_i_66220))]; \n          if (v_index_66314 < 0) {\n            v__66238_0 = v__66236; \n          } else {\n            if (v_index_66314 >= v_VLength_3) {\n              v__66238_0 = v__66236; \n            } else {\n              v__66238_0 = v__66227[v_index_66314]; \n            }\n          }\n          v__66240_0 = absadd(v__66238_0, v__66226[(v_l_id_66219 + (32 * v_MWidthC_1 * v_w_id_66218) + (v_MWidthC_1 * v_i_66220))]); \n          v__66234 = clmin(v__66240_0, v__66234); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66221 = 0; \n          v__66245[v_l_id_66219] = id(v__66234); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5342; \n        v_work_idx_5342 = 0; \n        int v_l_id_66222 = atomic_inc(&(v_work_idx_5342)); \n        while((v_l_id_66222 < 1)){\n          float v_tmp_66317 = 3.4028235E38f; \n          v__57071 = v_tmp_66317; \n          /* reduce_seq */\n          for (int v_i_66223 = 0; v_i_66223 < v_MWidthC_1; v_i_66223 = (1 + v_i_66223)) {\n            v__57071 = clmin(v__57071, v__66245[(v_i_66223 + (v_MWidthC_1 * v_l_id_66222))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66224 = 0; \n            v__66250[v_w_id_66218] = doubleMultiplyAdd(v__57071, v__66229, v__66228[v_w_id_66218], v__66230); \n          }\n          /* end map_seq */\n          v_l_id_66222 = atomic_inc(&(v_work_idx_5342)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66218 = atomic_inc(v_work_idx_5348); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66225",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66226",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66227",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66229",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66230",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66232",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66250",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66245",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}