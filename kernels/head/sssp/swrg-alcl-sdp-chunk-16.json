{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61331, const global float* restrict v__61332, const global float* restrict v__61333, const global float* restrict v__61334, float v__61335, float v__61336, global float* v__61349, global float* v__61343, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61339; \n  float v__61344; \n  /* Private Memory */\n  float v__61341_0;\n  \n  for (int v_wg_id_61326 = get_group_id(0); v_wg_id_61326 < ((v_MHeight_2)/(16)); v_wg_id_61326 = (v_wg_id_61326 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4886; \n      v_work_idx_4886 = 0; \n      int v_l_id_61327 = atomic_inc(&(v_work_idx_4886)); \n      while((v_l_id_61327 < 16)){\n        /* map_seq */\n        for (int v_i_61328 = 0; v_i_61328 < v_MWidthC_1; v_i_61328 = (1 + v_i_61328)) {\n          float v_tmp_61389 = 3.4028235E38f; \n          v__61339 = v_tmp_61389; \n          int v_index_61390 = v__61331[(v_i_61328 + (16 * v_MWidthC_1 * v_wg_id_61326) + (v_MWidthC_1 * v_l_id_61327))]; \n          if (v_index_61390 < 0) {\n            v__61341_0 = v__61339; \n          } else {\n            if (v_index_61390 >= v_VLength_3) {\n              v__61341_0 = v__61339; \n            } else {\n              v__61341_0 = v__61333[v_index_61390]; \n            }\n          }\n          v__61343[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_61326) + (-1 * v_i_61328) + (v_MWidthC_1 * v_l_id_61327))] = absadd(v__61341_0, v__61332[(v_i_61328 + (16 * v_MWidthC_1 * v_wg_id_61326) + (v_MWidthC_1 * v_l_id_61327))]); \n        }\n        /* end map_seq */\n        float v_tmp_61391 = 3.4028235E38f; \n        v__61344 = v_tmp_61391; \n        /* reduce_seq */\n        for (int v_i_61329 = 0; v_i_61329 < v_MWidthC_1; v_i_61329 = (1 + v_i_61329)) {\n          v__61344 = clmin(v__61344, v__61343[(v_i_61329 + (16 * v_MWidthC_1 * v_wg_id_61326) + (v_MWidthC_1 * v_l_id_61327))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61330 = 0; \n          v__61349[(v_l_id_61327 + (16 * v_wg_id_61326))] = doubleMultiplyAdd(v__61344, v__61335, v__61334[(v_l_id_61327 + (16 * v_wg_id_61326))], v__61336); \n        }\n        /* end map_seq */\n        v_l_id_61327 = atomic_inc(&(v_work_idx_4886)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61331",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61333",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61334",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61335",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61336",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61343",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61349",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}