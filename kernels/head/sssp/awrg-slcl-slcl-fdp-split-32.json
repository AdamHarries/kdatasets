{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65807, const global float* restrict v__65808, const global float* restrict v__65809, const global float* restrict v__65810, float v__65811, float v__65812, global float* v__65830, global int* v__65814, local float* v__65825, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65816; \n  float v__65818; \n  float v__57071; \n  /* Private Memory */\n  float v__65820_0;\n  \n  float v__65822_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5308 = v__65814; \n    local int v_w_id_65800; \n    if (get_local_id(0) == 0) {\n      v_w_id_65800 = atomic_inc(v_work_idx_5308); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65800 < v_MHeight_2)){\n      for (int v_l_id_65801 = get_local_id(0); v_l_id_65801 < v_MWidthC_1; v_l_id_65801 = (v_l_id_65801 + get_local_size(0))) {\n        float v_tmp_65893 = 3.4028235E38f; \n        v__65816 = v_tmp_65893; \n        /* reduce_seq */\n        for (int v_i_65802 = 0; v_i_65802 < 32; v_i_65802 = (1 + v_i_65802)) {\n          float v_tmp_65894 = 3.4028235E38f; \n          v__65818 = v_tmp_65894; \n          int v_index_65895 = v__65807[(v_l_id_65801 + (32 * v_MWidthC_1 * v_w_id_65800) + (v_MWidthC_1 * v_i_65802))]; \n          if (v_index_65895 < 0) {\n            v__65820_0 = v__65818; \n          } else {\n            if (v_index_65895 >= v_VLength_3) {\n              v__65820_0 = v__65818; \n            } else {\n              v__65820_0 = v__65809[v_index_65895]; \n            }\n          }\n          v__65822_0 = absadd(v__65820_0, v__65808[(v_l_id_65801 + (32 * v_MWidthC_1 * v_w_id_65800) + (v_MWidthC_1 * v_i_65802))]); \n          v__65816 = clmin(v__65822_0, v__65816); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65803 = 0; \n          v__65825[v_l_id_65801] = id(v__65816); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65804 = get_local_id(0); \n        float v_tmp_65898 = 3.4028235E38f; \n        v__57071 = v_tmp_65898; \n        /* reduce_seq */\n        for (int v_i_65805 = 0; v_i_65805 < v_MWidthC_1; v_i_65805 = (1 + v_i_65805)) {\n          v__57071 = clmin(v__57071, v__65825[(v_i_65805 + (v_MWidthC_1 * v_l_id_65804))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65806 = 0; \n          v__65830[v_w_id_65800] = doubleMultiplyAdd(v__57071, v__65811, v__65810[v_w_id_65800], v__65812); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65800 = atomic_inc(v_work_idx_5308); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__65807",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65808",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65814",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65825",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}