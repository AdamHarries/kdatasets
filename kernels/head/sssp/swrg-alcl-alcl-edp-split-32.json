{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__65372, const global float* restrict v__65373, const global float* restrict v__65374, const global float* restrict v__65375, float v__65376, float v__65377, global float* v__65396, local float* v__65391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65380; \n  float v__65382; \n  float v__57071; \n  /* Private Memory */\n  float v__65384_0;\n  \n  float v__65386_0;\n  \n  int v__65390_0;\n  \n  for (int v_wg_id_65365 = get_group_id(0); v_wg_id_65365 < v_MHeight_2; v_wg_id_65365 = (v_wg_id_65365 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5269; \n      v_work_idx_5269 = 0; \n      int v_l_id_65366 = atomic_inc(&(v_work_idx_5269)); \n      while((v_l_id_65366 < v_MWidthC_1)){\n        float v_tmp_65452 = 3.4028235E38f; \n        v__65380 = v_tmp_65452; \n        /* reduce_while_seq */\n        for (int v_i_65367 = 0; v_i_65367 < 32; v_i_65367 = (1 + v_i_65367)) {\n          v__65390_0 = check(v__65380, v__65372[(v_l_id_65366 + (32 * v_MWidthC_1 * v_wg_id_65365) + (v_MWidthC_1 * v_i_65367))]); \n          if (v__65390_0) {\n          } else {\n            break;\n          }\n          float v_tmp_65453 = 3.4028235E38f; \n          v__65382 = v_tmp_65453; \n          int v_index_65454 = v__65372[(v_l_id_65366 + (32 * v_MWidthC_1 * v_wg_id_65365) + (v_MWidthC_1 * v_i_65367))]; \n          if (v_index_65454 < 0) {\n            v__65384_0 = v__65382; \n          } else {\n            if (v_index_65454 >= v_VLength_3) {\n              v__65384_0 = v__65382; \n            } else {\n              v__65384_0 = v__65374[v_index_65454]; \n            }\n          }\n          v__65386_0 = absadd(v__65384_0, v__65373[(v_l_id_65366 + (32 * v_MWidthC_1 * v_wg_id_65365) + (v_MWidthC_1 * v_i_65367))]); \n          v__65380 = clmin(v__65386_0, v__65380); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65368 = 0; \n          v__65391[v_l_id_65366] = id(v__65380); \n        }\n        /* end map_seq */\n        v_l_id_65366 = atomic_inc(&(v_work_idx_5269)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5264; \n      v_work_idx_5264 = 0; \n      int v_l_id_65369 = atomic_inc(&(v_work_idx_5264)); \n      while((v_l_id_65369 < 1)){\n        float v_tmp_65457 = 3.4028235E38f; \n        v__57071 = v_tmp_65457; \n        /* reduce_seq */\n        for (int v_i_65370 = 0; v_i_65370 < v_MWidthC_1; v_i_65370 = (1 + v_i_65370)) {\n          v__57071 = clmin(v__57071, v__65391[(v_i_65370 + (v_MWidthC_1 * v_l_id_65369))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65371 = 0; \n          v__65396[v_wg_id_65365] = doubleMultiplyAdd(v__57071, v__65376, v__65375[v_wg_id_65365], v__65377); \n        }\n        /* end map_seq */\n        v_l_id_65369 = atomic_inc(&(v_work_idx_5264)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65372",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65373",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65374",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65376",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65377",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}