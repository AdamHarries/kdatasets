{
  "name" : "swrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64803, const global float* restrict v__64804, const global float* restrict v__64805, const global float* restrict v__64806, float v__64807, float v__64808, global float* v__64823, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64810; \n  float v__64813; \n  /* Private Memory */\n  float v__64815_0;\n  \n  float v__64817_0;\n  \n  int v__64821_0;\n  \n  for (int v_wg_id_64799 = get_group_id(0); v_wg_id_64799 < ((v_MHeight_2)/(32)); v_wg_id_64799 = (v_wg_id_64799 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5210; \n      v_work_idx_5210 = 0; \n      int v_l_id_64800 = atomic_inc(&(v_work_idx_5210)); \n      while((v_l_id_64800 < 32)){\n        float v_tmp_64867 = 3.4028235E38f; \n        v__64810 = v_tmp_64867; \n        /* reduce_while_seq */\n        for (int v_i_64801 = 0; v_i_64801 < v_MWidthC_1; v_i_64801 = (1 + v_i_64801)) {\n          v__64821_0 = check(v__64810, v__64803[(v_i_64801 + (32 * v_MWidthC_1 * v_wg_id_64799) + (v_MWidthC_1 * v_l_id_64800))]); \n          if (v__64821_0) {\n          } else {\n            break;\n          }\n          float v_tmp_64868 = 3.4028235E38f; \n          v__64813 = v_tmp_64868; \n          int v_index_64869 = v__64803[(v_i_64801 + (32 * v_MWidthC_1 * v_wg_id_64799) + (v_MWidthC_1 * v_l_id_64800))]; \n          if (v_index_64869 < 0) {\n            v__64815_0 = v__64813; \n          } else {\n            if (v_index_64869 >= v_VLength_3) {\n              v__64815_0 = v__64813; \n            } else {\n              v__64815_0 = v__64805[v_index_64869]; \n            }\n          }\n          v__64817_0 = absadd(v__64815_0, v__64804[(v_i_64801 + (32 * v_MWidthC_1 * v_wg_id_64799) + (v_MWidthC_1 * v_l_id_64800))]); \n          v__64810 = clmin(v__64817_0, v__64810); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64802 = 0; \n          v__64823[(v_l_id_64800 + (32 * v_wg_id_64799))] = doubleMultiplyAdd(v__64810, v__64807, v__64806[(v_l_id_64800 + (32 * v_wg_id_64799))], v__64808); \n        }\n        /* end map_seq */\n        v_l_id_64800 = atomic_inc(&(v_work_idx_5210)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__64803",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64805",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64807",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64808",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__64823",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}