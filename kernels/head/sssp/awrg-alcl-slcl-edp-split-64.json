{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__70076, const global float* restrict v__70077, const global float* restrict v__70078, const global float* restrict v__70079, float v__70080, float v__70081, global float* v__70101, global int* v__70083, local float* v__70096, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70085; \n  float v__70087; \n  float v__57071; \n  /* Private Memory */\n  float v__70089_0;\n  \n  float v__70091_0;\n  \n  int v__70095_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5713 = v__70083; \n    local int v_w_id_70069; \n    if (get_local_id(0) == 0) {\n      v_w_id_70069 = atomic_inc(v_work_idx_5713); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70069 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5711; \n        v_work_idx_5711 = 0; \n        int v_l_id_70070 = atomic_inc(&(v_work_idx_5711)); \n        while((v_l_id_70070 < v_MWidthC_1)){\n          float v_tmp_70159 = 3.4028235E38f; \n          v__70085 = v_tmp_70159; \n          /* reduce_while_seq */\n          for (int v_i_70071 = 0; v_i_70071 < 64; v_i_70071 = (1 + v_i_70071)) {\n            v__70095_0 = check(v__70085, v__70076[(v_l_id_70070 + (64 * v_MWidthC_1 * v_w_id_70069) + (v_MWidthC_1 * v_i_70071))]); \n            if (v__70095_0) {\n            } else {\n              break;\n            }\n            float v_tmp_70160 = 3.4028235E38f; \n            v__70087 = v_tmp_70160; \n            int v_index_70161 = v__70076[(v_l_id_70070 + (64 * v_MWidthC_1 * v_w_id_70069) + (v_MWidthC_1 * v_i_70071))]; \n            if (v_index_70161 < 0) {\n              v__70089_0 = v__70087; \n            } else {\n              if (v_index_70161 >= v_VLength_3) {\n                v__70089_0 = v__70087; \n              } else {\n                v__70089_0 = v__70078[v_index_70161]; \n              }\n            }\n            v__70091_0 = absadd(v__70089_0, v__70077[(v_l_id_70070 + (64 * v_MWidthC_1 * v_w_id_70069) + (v_MWidthC_1 * v_i_70071))]); \n            v__70085 = clmin(v__70091_0, v__70085); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70072 = 0; \n            v__70096[v_l_id_70070] = id(v__70085); \n          }\n          /* end map_seq */\n          v_l_id_70070 = atomic_inc(&(v_work_idx_5711)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_70073 = get_local_id(0); \n        float v_tmp_70164 = 3.4028235E38f; \n        v__57071 = v_tmp_70164; \n        /* reduce_seq */\n        for (int v_i_70074 = 0; v_i_70074 < v_MWidthC_1; v_i_70074 = (1 + v_i_70074)) {\n          v__57071 = clmin(v__57071, v__70096[(v_i_70074 + (v_MWidthC_1 * v_l_id_70073))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_70075 = 0; \n          v__70101[v_w_id_70069] = doubleMultiplyAdd(v__57071, v__70080, v__70079[v_w_id_70069], v__70081); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70069 = atomic_inc(v_work_idx_5713); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__70076",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70077",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70078",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70079",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70080",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70081",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70083",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70101",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70096",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}