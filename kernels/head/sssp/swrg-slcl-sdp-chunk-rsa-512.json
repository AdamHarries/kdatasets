{
  "name" : "swrg-slcl-sdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__100888, const global float* restrict v__100889, const global float* restrict v__100890, const global float* restrict v__100891, float v__100892, float v__100893, global float* v__100907, global float* v__100906, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100895; \n  float v__100898; \n  /* Private Memory */\n  float v__100900_0;\n  \n  float v__100902_0;\n  \n  for (int v_wg_id_100883 = get_group_id(0); v_wg_id_100883 < ((v_MHeight_2)/(512)); v_wg_id_100883 = (v_wg_id_100883 + get_num_groups(0))) {\n    for (int v_l_id_100884 = get_local_id(0); v_l_id_100884 < 512; v_l_id_100884 = (v_l_id_100884 + get_local_size(0))) {\n      float v_tmp_100944 = 3.4028235E38f; \n      v__100895 = v_tmp_100944; \n      /* reduce_seq */\n      int v_stop_100945 = min(v__100888[(1 + (v__100888[(v_l_id_100884 + (512 * v_wg_id_100883))] / 4))], ((global int*)(v__100889 + (((global int*)(v__100889))[(v_l_id_100884 + (512 * v_wg_id_100883))] / 4)))[1]); \n      for (int v_i_100885 = 0; v_i_100885 < v_stop_100945; v_i_100885 = (1 + v_i_100885)) {\n        float v_tmp_100953 = 3.4028235E38f; \n        v__100898 = v_tmp_100953; \n        int v_index_100955 = v__100888[(2 + v_i_100885 + (v__100888[(v_l_id_100884 + (512 * v_wg_id_100883))] / 4))]; \n        if (v_index_100955 < 0) {\n          v__100900_0 = v__100898; \n        } else {\n          if (v_index_100955 >= v_MWidthC_1) {\n            v__100900_0 = v__100898; \n          } else {\n            v__100900_0 = v__100890[v_index_100955]; \n          }\n        }\n        v__100902_0 = absadd(v__100889[(2 + v_i_100885 + (((global int*)(v__100889))[(v_l_id_100884 + (512 * v_wg_id_100883))] / 4))], v__100900_0); \n        v__100895 = clmin(v__100895, v__100902_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100886 = 0; \n        v__100906[(v_l_id_100884 + (512 * v_wg_id_100883))] = doubleMultiplyAdd(v__100895, v__100892, v__100891[(v_l_id_100884 + (512 * v_wg_id_100883))], v__100893); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_100887 = 0; \n        v__100907[(v_l_id_100884 + (512 * v_wg_id_100883))] = id(v__100906[(v_l_id_100884 + (512 * v_wg_id_100883))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100888",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__100889",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__100890",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__100891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100892",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100893",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__100907",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}