{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__62040, const global float* restrict v__62041, const global float* restrict v__62042, const global float* restrict v__62043, float v__62044, float v__62045, global float* v__62064, local float* v__62059, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62048; \n  float v__62050; \n  float v__57071; \n  /* Private Memory */\n  float v__62052_0;\n  \n  float v__62054_0;\n  \n  int v__62058_0;\n  \n  for (int v_wg_id_62033 = get_group_id(0); v_wg_id_62033 < v_MHeight_2; v_wg_id_62033 = (v_wg_id_62033 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4957; \n      v_work_idx_4957 = 0; \n      int v_l_id_62034 = atomic_inc(&(v_work_idx_4957)); \n      while((v_l_id_62034 < v_MWidthC_1)){\n        float v_tmp_62120 = 3.4028235E38f; \n        v__62048 = v_tmp_62120; \n        /* reduce_while_seq */\n        for (int v_i_62035 = 0; v_i_62035 < 16; v_i_62035 = (1 + v_i_62035)) {\n          v__62058_0 = check(v__62048, v__62040[(v_l_id_62034 + (16 * v_MWidthC_1 * v_wg_id_62033) + (v_MWidthC_1 * v_i_62035))]); \n          if (v__62058_0) {\n          } else {\n            break;\n          }\n          float v_tmp_62121 = 3.4028235E38f; \n          v__62050 = v_tmp_62121; \n          int v_index_62122 = v__62040[(v_l_id_62034 + (16 * v_MWidthC_1 * v_wg_id_62033) + (v_MWidthC_1 * v_i_62035))]; \n          if (v_index_62122 < 0) {\n            v__62052_0 = v__62050; \n          } else {\n            if (v_index_62122 >= v_VLength_3) {\n              v__62052_0 = v__62050; \n            } else {\n              v__62052_0 = v__62042[v_index_62122]; \n            }\n          }\n          v__62054_0 = absadd(v__62052_0, v__62041[(v_l_id_62034 + (16 * v_MWidthC_1 * v_wg_id_62033) + (v_MWidthC_1 * v_i_62035))]); \n          v__62048 = clmin(v__62054_0, v__62048); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62036 = 0; \n          v__62059[v_l_id_62034] = id(v__62048); \n        }\n        /* end map_seq */\n        v_l_id_62034 = atomic_inc(&(v_work_idx_4957)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4952; \n      v_work_idx_4952 = 0; \n      int v_l_id_62037 = atomic_inc(&(v_work_idx_4952)); \n      while((v_l_id_62037 < 1)){\n        float v_tmp_62125 = 3.4028235E38f; \n        v__57071 = v_tmp_62125; \n        /* reduce_seq */\n        for (int v_i_62038 = 0; v_i_62038 < v_MWidthC_1; v_i_62038 = (1 + v_i_62038)) {\n          v__57071 = clmin(v__57071, v__62059[(v_i_62038 + (v_MWidthC_1 * v_l_id_62037))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62039 = 0; \n          v__62064[v_wg_id_62033] = doubleMultiplyAdd(v__57071, v__62044, v__62043[v_wg_id_62033], v__62045); \n        }\n        /* end map_seq */\n        v_l_id_62037 = atomic_inc(&(v_work_idx_4952)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62040",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62041",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62042",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62044",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62045",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62059",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}