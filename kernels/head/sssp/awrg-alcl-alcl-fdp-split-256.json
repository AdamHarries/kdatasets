{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76936, const global float* restrict v__76937, const global float* restrict v__76938, const global float* restrict v__76939, float v__76940, float v__76941, global float* v__76959, global int* v__76943, local float* v__76954, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76945; \n  float v__76947; \n  float v__57071; \n  /* Private Memory */\n  float v__76949_0;\n  \n  float v__76951_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6360 = v__76943; \n    local int v_w_id_76929; \n    if (get_local_id(0) == 0) {\n      v_w_id_76929 = atomic_inc(v_work_idx_6360); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76929 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6358; \n        v_work_idx_6358 = 0; \n        int v_l_id_76930 = atomic_inc(&(v_work_idx_6358)); \n        while((v_l_id_76930 < v_MWidthC_1)){\n          float v_tmp_77010 = 3.4028235E38f; \n          v__76945 = v_tmp_77010; \n          /* reduce_seq */\n          for (int v_i_76931 = 0; v_i_76931 < 256; v_i_76931 = (1 + v_i_76931)) {\n            float v_tmp_77011 = 3.4028235E38f; \n            v__76947 = v_tmp_77011; \n            int v_index_77012 = v__76936[(v_l_id_76930 + (256 * v_MWidthC_1 * v_w_id_76929) + (v_MWidthC_1 * v_i_76931))]; \n            if (v_index_77012 < 0) {\n              v__76949_0 = v__76947; \n            } else {\n              if (v_index_77012 >= v_VLength_3) {\n                v__76949_0 = v__76947; \n              } else {\n                v__76949_0 = v__76938[v_index_77012]; \n              }\n            }\n            v__76951_0 = absadd(v__76949_0, v__76937[(v_l_id_76930 + (256 * v_MWidthC_1 * v_w_id_76929) + (v_MWidthC_1 * v_i_76931))]); \n            v__76945 = clmin(v__76951_0, v__76945); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76932 = 0; \n            v__76954[v_l_id_76930] = id(v__76945); \n          }\n          /* end map_seq */\n          v_l_id_76930 = atomic_inc(&(v_work_idx_6358)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6353; \n        v_work_idx_6353 = 0; \n        int v_l_id_76933 = atomic_inc(&(v_work_idx_6353)); \n        while((v_l_id_76933 < 1)){\n          float v_tmp_77015 = 3.4028235E38f; \n          v__57071 = v_tmp_77015; \n          /* reduce_seq */\n          for (int v_i_76934 = 0; v_i_76934 < v_MWidthC_1; v_i_76934 = (1 + v_i_76934)) {\n            v__57071 = clmin(v__57071, v__76954[(v_i_76934 + (v_MWidthC_1 * v_l_id_76933))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76935 = 0; \n            v__76959[v_w_id_76929] = doubleMultiplyAdd(v__57071, v__76940, v__76939[v_w_id_76929], v__76941); \n          }\n          /* end map_seq */\n          v_l_id_76933 = atomic_inc(&(v_work_idx_6353)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76929 = atomic_inc(v_work_idx_6360); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76936",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76937",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76938",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76939",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76940",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76941",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76943",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76954",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}