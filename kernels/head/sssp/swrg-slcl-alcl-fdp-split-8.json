{
  "name" : "swrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57792, const global float* restrict v__57793, const global float* restrict v__57794, const global float* restrict v__57795, float v__57796, float v__57797, global float* v__57814, local float* v__57809, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57800; \n  float v__57802; \n  float v__57071; \n  /* Private Memory */\n  float v__57804_0;\n  \n  float v__57806_0;\n  \n  for (int v_wg_id_57785 = get_group_id(0); v_wg_id_57785 < v_MHeight_2; v_wg_id_57785 = (v_wg_id_57785 + get_num_groups(0))) {\n    for (int v_l_id_57786 = get_local_id(0); v_l_id_57786 < v_MWidthC_1; v_l_id_57786 = (v_l_id_57786 + get_local_size(0))) {\n      float v_tmp_57875 = 3.4028235E38f; \n      v__57800 = v_tmp_57875; \n      /* reduce_seq */\n      for (int v_i_57787 = 0; v_i_57787 < 8; v_i_57787 = (1 + v_i_57787)) {\n        float v_tmp_57876 = 3.4028235E38f; \n        v__57802 = v_tmp_57876; \n        int v_index_57877 = v__57792[(v_l_id_57786 + (8 * v_MWidthC_1 * v_wg_id_57785) + (v_MWidthC_1 * v_i_57787))]; \n        if (v_index_57877 < 0) {\n          v__57804_0 = v__57802; \n        } else {\n          if (v_index_57877 >= v_VLength_3) {\n            v__57804_0 = v__57802; \n          } else {\n            v__57804_0 = v__57794[v_index_57877]; \n          }\n        }\n        v__57806_0 = absadd(v__57804_0, v__57793[(v_l_id_57786 + (8 * v_MWidthC_1 * v_wg_id_57785) + (v_MWidthC_1 * v_i_57787))]); \n        v__57800 = clmin(v__57806_0, v__57800); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57788 = 0; \n        v__57809[v_l_id_57786] = id(v__57800); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4554; \n      v_work_idx_4554 = 0; \n      int v_l_id_57789 = atomic_inc(&(v_work_idx_4554)); \n      while((v_l_id_57789 < 1)){\n        float v_tmp_57880 = 3.4028235E38f; \n        v__57071 = v_tmp_57880; \n        /* reduce_seq */\n        for (int v_i_57790 = 0; v_i_57790 < v_MWidthC_1; v_i_57790 = (1 + v_i_57790)) {\n          v__57071 = clmin(v__57071, v__57809[(v_i_57790 + (v_MWidthC_1 * v_l_id_57789))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_57791 = 0; \n          v__57814[v_wg_id_57785] = doubleMultiplyAdd(v__57071, v__57796, v__57795[v_wg_id_57785], v__57797); \n        }\n        /* end map_seq */\n        v_l_id_57789 = atomic_inc(&(v_work_idx_4554)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__57792",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57793",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57794",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57795",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57796",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57797",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__57814",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__57809",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}