{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__65080, const global float* restrict v__65081, const global float* restrict v__65082, const global float* restrict v__65083, float v__65084, float v__65085, global float* v__65104, local float* v__65099, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65088; \n  float v__65090; \n  float v__57071; \n  /* Private Memory */\n  float v__65092_0;\n  \n  float v__65094_0;\n  \n  int v__65098_0;\n  \n  for (int v_wg_id_65073 = get_group_id(0); v_wg_id_65073 < v_MHeight_2; v_wg_id_65073 = (v_wg_id_65073 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5238; \n      v_work_idx_5238 = 0; \n      int v_l_id_65074 = atomic_inc(&(v_work_idx_5238)); \n      while((v_l_id_65074 < v_MWidthC_1)){\n        float v_tmp_65164 = 3.4028235E38f; \n        v__65088 = v_tmp_65164; \n        /* reduce_while_seq */\n        for (int v_i_65075 = 0; v_i_65075 < 32; v_i_65075 = (1 + v_i_65075)) {\n          v__65098_0 = check(v__65088, v__65080[(v_l_id_65074 + (32 * v_MWidthC_1 * v_wg_id_65073) + (v_MWidthC_1 * v_i_65075))]); \n          if (v__65098_0) {\n          } else {\n            break;\n          }\n          float v_tmp_65165 = 3.4028235E38f; \n          v__65090 = v_tmp_65165; \n          int v_index_65166 = v__65080[(v_l_id_65074 + (32 * v_MWidthC_1 * v_wg_id_65073) + (v_MWidthC_1 * v_i_65075))]; \n          if (v_index_65166 < 0) {\n            v__65092_0 = v__65090; \n          } else {\n            if (v_index_65166 >= v_VLength_3) {\n              v__65092_0 = v__65090; \n            } else {\n              v__65092_0 = v__65082[v_index_65166]; \n            }\n          }\n          v__65094_0 = absadd(v__65092_0, v__65081[(v_l_id_65074 + (32 * v_MWidthC_1 * v_wg_id_65073) + (v_MWidthC_1 * v_i_65075))]); \n          v__65088 = clmin(v__65094_0, v__65088); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65076 = 0; \n          v__65099[v_l_id_65074] = id(v__65088); \n        }\n        /* end map_seq */\n        v_l_id_65074 = atomic_inc(&(v_work_idx_5238)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_65077 = get_local_id(0); \n      float v_tmp_65169 = 3.4028235E38f; \n      v__57071 = v_tmp_65169; \n      /* reduce_seq */\n      for (int v_i_65078 = 0; v_i_65078 < v_MWidthC_1; v_i_65078 = (1 + v_i_65078)) {\n        v__57071 = clmin(v__57071, v__65099[(v_i_65078 + (v_MWidthC_1 * v_l_id_65077))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_65079 = 0; \n        v__65104[v_wg_id_65073] = doubleMultiplyAdd(v__57071, v__65084, v__65083[v_wg_id_65073], v__65085); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65080",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65081",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65082",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65083",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65084",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65085",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65104",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65099",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}