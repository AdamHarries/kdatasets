{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76643, const global float* restrict v__76644, const global float* restrict v__76645, const global float* restrict v__76646, float v__76647, float v__76648, global float* v__76666, global int* v__76650, local float* v__76661, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76652; \n  float v__76654; \n  float v__57071; \n  /* Private Memory */\n  float v__76656_0;\n  \n  float v__76658_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6327 = v__76650; \n    local int v_w_id_76636; \n    if (get_local_id(0) == 0) {\n      v_w_id_76636 = atomic_inc(v_work_idx_6327); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76636 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6325; \n        v_work_idx_6325 = 0; \n        int v_l_id_76637 = atomic_inc(&(v_work_idx_6325)); \n        while((v_l_id_76637 < v_MWidthC_1)){\n          float v_tmp_76721 = 3.4028235E38f; \n          v__76652 = v_tmp_76721; \n          /* reduce_seq */\n          for (int v_i_76638 = 0; v_i_76638 < 256; v_i_76638 = (1 + v_i_76638)) {\n            float v_tmp_76722 = 3.4028235E38f; \n            v__76654 = v_tmp_76722; \n            int v_index_76723 = v__76643[(v_l_id_76637 + (256 * v_MWidthC_1 * v_w_id_76636) + (v_MWidthC_1 * v_i_76638))]; \n            if (v_index_76723 < 0) {\n              v__76656_0 = v__76654; \n            } else {\n              if (v_index_76723 >= v_VLength_3) {\n                v__76656_0 = v__76654; \n              } else {\n                v__76656_0 = v__76645[v_index_76723]; \n              }\n            }\n            v__76658_0 = absadd(v__76656_0, v__76644[(v_l_id_76637 + (256 * v_MWidthC_1 * v_w_id_76636) + (v_MWidthC_1 * v_i_76638))]); \n            v__76652 = clmin(v__76658_0, v__76652); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76639 = 0; \n            v__76661[v_l_id_76637] = id(v__76652); \n          }\n          /* end map_seq */\n          v_l_id_76637 = atomic_inc(&(v_work_idx_6325)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_76640 = get_local_id(0); \n        float v_tmp_76726 = 3.4028235E38f; \n        v__57071 = v_tmp_76726; \n        /* reduce_seq */\n        for (int v_i_76641 = 0; v_i_76641 < v_MWidthC_1; v_i_76641 = (1 + v_i_76641)) {\n          v__57071 = clmin(v__57071, v__76661[(v_i_76641 + (v_MWidthC_1 * v_l_id_76640))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76642 = 0; \n          v__76666[v_w_id_76636] = doubleMultiplyAdd(v__57071, v__76647, v__76646[v_w_id_76636], v__76648); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76636 = atomic_inc(v_work_idx_6327); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76643",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76644",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76645",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76646",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76647",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76648",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76650",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76666",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76661",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}