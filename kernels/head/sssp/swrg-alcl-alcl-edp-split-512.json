{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__78700, const global float* restrict v__78701, const global float* restrict v__78702, const global float* restrict v__78703, float v__78704, float v__78705, global float* v__78724, local float* v__78719, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78708; \n  float v__78710; \n  float v__57071; \n  /* Private Memory */\n  float v__78712_0;\n  \n  float v__78714_0;\n  \n  int v__78718_0;\n  \n  for (int v_wg_id_78693 = get_group_id(0); v_wg_id_78693 < v_MHeight_2; v_wg_id_78693 = (v_wg_id_78693 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6517; \n      v_work_idx_6517 = 0; \n      int v_l_id_78694 = atomic_inc(&(v_work_idx_6517)); \n      while((v_l_id_78694 < v_MWidthC_1)){\n        float v_tmp_78780 = 3.4028235E38f; \n        v__78708 = v_tmp_78780; \n        /* reduce_while_seq */\n        for (int v_i_78695 = 0; v_i_78695 < 512; v_i_78695 = (1 + v_i_78695)) {\n          v__78718_0 = check(v__78708, v__78700[(v_l_id_78694 + (512 * v_MWidthC_1 * v_wg_id_78693) + (v_MWidthC_1 * v_i_78695))]); \n          if (v__78718_0) {\n          } else {\n            break;\n          }\n          float v_tmp_78781 = 3.4028235E38f; \n          v__78710 = v_tmp_78781; \n          int v_index_78782 = v__78700[(v_l_id_78694 + (512 * v_MWidthC_1 * v_wg_id_78693) + (v_MWidthC_1 * v_i_78695))]; \n          if (v_index_78782 < 0) {\n            v__78712_0 = v__78710; \n          } else {\n            if (v_index_78782 >= v_VLength_3) {\n              v__78712_0 = v__78710; \n            } else {\n              v__78712_0 = v__78702[v_index_78782]; \n            }\n          }\n          v__78714_0 = absadd(v__78712_0, v__78701[(v_l_id_78694 + (512 * v_MWidthC_1 * v_wg_id_78693) + (v_MWidthC_1 * v_i_78695))]); \n          v__78708 = clmin(v__78714_0, v__78708); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78696 = 0; \n          v__78719[v_l_id_78694] = id(v__78708); \n        }\n        /* end map_seq */\n        v_l_id_78694 = atomic_inc(&(v_work_idx_6517)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6512; \n      v_work_idx_6512 = 0; \n      int v_l_id_78697 = atomic_inc(&(v_work_idx_6512)); \n      while((v_l_id_78697 < 1)){\n        float v_tmp_78785 = 3.4028235E38f; \n        v__57071 = v_tmp_78785; \n        /* reduce_seq */\n        for (int v_i_78698 = 0; v_i_78698 < v_MWidthC_1; v_i_78698 = (1 + v_i_78698)) {\n          v__57071 = clmin(v__57071, v__78719[(v_i_78698 + (v_MWidthC_1 * v_l_id_78697))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78699 = 0; \n          v__78724[v_wg_id_78693] = doubleMultiplyAdd(v__57071, v__78704, v__78703[v_wg_id_78693], v__78705); \n        }\n        /* end map_seq */\n        v_l_id_78697 = atomic_inc(&(v_work_idx_6512)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__78700",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78701",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78702",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78703",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78704",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78705",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78724",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78719",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}