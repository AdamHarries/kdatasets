{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68066, const global float* restrict v__68067, const global float* restrict v__68068, const global float* restrict v__68069, float v__68070, float v__68071, global float* v__68084, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68074; \n  float v__68076; \n  /* Private Memory */\n  float v__68078_0;\n  \n  float v__68080_0;\n  \n  for (int v_wg_id_68062 = get_group_id(0); v_wg_id_68062 < ((v_MHeight_2)/(64)); v_wg_id_68062 = (v_wg_id_68062 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5516; \n      v_work_idx_5516 = 0; \n      int v_l_id_68063 = atomic_inc(&(v_work_idx_5516)); \n      while((v_l_id_68063 < 64)){\n        float v_tmp_68122 = 3.4028235E38f; \n        v__68074 = v_tmp_68122; \n        /* reduce_seq */\n        for (int v_i_68064 = 0; v_i_68064 < v_MWidthC_1; v_i_68064 = (1 + v_i_68064)) {\n          float v_tmp_68123 = 3.4028235E38f; \n          v__68076 = v_tmp_68123; \n          int v_index_68124 = v__68066[(v_i_68064 + (64 * v_MWidthC_1 * v_wg_id_68062) + (v_MWidthC_1 * v_l_id_68063))]; \n          if (v_index_68124 < 0) {\n            v__68078_0 = v__68076; \n          } else {\n            if (v_index_68124 >= v_VLength_3) {\n              v__68078_0 = v__68076; \n            } else {\n              v__68078_0 = v__68068[v_index_68124]; \n            }\n          }\n          v__68080_0 = absadd(v__68078_0, v__68067[(v_i_68064 + (64 * v_MWidthC_1 * v_wg_id_68062) + (v_MWidthC_1 * v_l_id_68063))]); \n          v__68074 = clmin(v__68080_0, v__68074); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68065 = 0; \n          v__68084[(v_l_id_68063 + (64 * v_wg_id_68062))] = doubleMultiplyAdd(v__68074, v__68070, v__68069[(v_l_id_68063 + (64 * v_wg_id_68062))], v__68071); \n        }\n        /* end map_seq */\n        v_l_id_68063 = atomic_inc(&(v_work_idx_5516)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68068",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68070",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68071",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68084",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}