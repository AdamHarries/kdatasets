{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59038, const global float* restrict v__59039, const global float* restrict v__59040, const global float* restrict v__59041, float v__59042, float v__59043, global float* v__59061, global float* v__59051, global int* v__59045, local float* v__59056, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59047; \n  float v__59052; \n  float v__57071; \n  /* Private Memory */\n  float v__59049_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4675 = v__59045; \n    local int v_w_id_59030; \n    if (get_local_id(0) == 0) {\n      v_w_id_59030 = atomic_inc(v_work_idx_4675); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59030 < v_MHeight_2)){\n      for (int v_l_id_59031 = get_local_id(0); v_l_id_59031 < v_MWidthC_1; v_l_id_59031 = (v_l_id_59031 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59032 = 0; v_i_59032 < 8; v_i_59032 = (1 + v_i_59032)) {\n          float v_tmp_59124 = 3.4028235E38f; \n          v__59047 = v_tmp_59124; \n          int v_index_59125 = v__59038[(v_l_id_59031 + (8 * v_MWidthC_1 * v_w_id_59030) + (v_MWidthC_1 * v_i_59032))]; \n          if (v_index_59125 < 0) {\n            v__59049_0 = v__59047; \n          } else {\n            if (v_index_59125 >= v_VLength_3) {\n              v__59049_0 = v__59047; \n            } else {\n              v__59049_0 = v__59040[v_index_59125]; \n            }\n          }\n          v__59051[(7 + (8 * v_MWidthC_1 * v_w_id_59030) + (-1 * v_i_59032) + (8 * v_l_id_59031))] = absadd(v__59049_0, v__59039[(v_l_id_59031 + (8 * v_MWidthC_1 * v_w_id_59030) + (v_MWidthC_1 * v_i_59032))]); \n        }\n        /* end map_seq */\n        float v_tmp_59126 = 3.4028235E38f; \n        v__59052 = v_tmp_59126; \n        /* reduce_seq */\n        for (int v_i_59033 = 0; v_i_59033 < 8; v_i_59033 = (1 + v_i_59033)) {\n          v__59052 = clmin(v__59052, v__59051[(v_i_59033 + (8 * v_MWidthC_1 * v_w_id_59030) + (8 * v_l_id_59031))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59034 = 0; \n          v__59056[v_l_id_59031] = id(v__59052); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59035 = get_local_id(0); \n        float v_tmp_59129 = 3.4028235E38f; \n        v__57071 = v_tmp_59129; \n        /* reduce_seq */\n        for (int v_i_59036 = 0; v_i_59036 < v_MWidthC_1; v_i_59036 = (1 + v_i_59036)) {\n          v__57071 = clmin(v__57071, v__59056[(v_i_59036 + (v_MWidthC_1 * v_l_id_59035))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59037 = 0; \n          v__59061[v_w_id_59030] = doubleMultiplyAdd(v__57071, v__59042, v__59041[v_w_id_59030], v__59043); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59030 = atomic_inc(v_work_idx_4675); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59038",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59039",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59040",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59042",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59043",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59051",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59045",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59061",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59056",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}