{
  "name" : "swrg-alcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__76392, const global float* restrict v__76393, const global float* restrict v__76394, const global float* restrict v__76395, float v__76396, float v__76397, global float* v__76411, global float* v__76410, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76399; \n  float v__76402; \n  /* Private Memory */\n  float v__76404_0;\n  \n  float v__76406_0;\n  \n  for (int v_wg_id_76387 = get_group_id(0); v_wg_id_76387 < ((v_MHeight_2)/(8)); v_wg_id_76387 = (v_wg_id_76387 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5627; \n      v_work_idx_5627 = 0; \n      int v_l_id_76388 = atomic_inc(&(v_work_idx_5627)); \n      while((v_l_id_76388 < 8)){\n        float v_tmp_76444 = 3.4028235E38f; \n        v__76399 = v_tmp_76444; \n        /* reduce_seq */\n        int v_stop_76445 = min(v__76392[(1 + (v__76392[(v_l_id_76388 + (8 * v_wg_id_76387))] / 4))], ((global int*)(v__76393 + (((global int*)(v__76393))[(v_l_id_76388 + (8 * v_wg_id_76387))] / 4)))[1]); \n        for (int v_i_76389 = 0; v_i_76389 < v_stop_76445; v_i_76389 = (1 + v_i_76389)) {\n          float v_tmp_76453 = 3.4028235E38f; \n          v__76402 = v_tmp_76453; \n          int v_index_76455 = v__76392[(2 + v_i_76389 + (v__76392[(v_l_id_76388 + (8 * v_wg_id_76387))] / 4))]; \n          if (v_index_76455 < 0) {\n            v__76404_0 = v__76402; \n          } else {\n            if (v_index_76455 >= v_MWidthC_1) {\n              v__76404_0 = v__76402; \n            } else {\n              v__76404_0 = v__76394[v_index_76455]; \n            }\n          }\n          v__76406_0 = absadd(v__76393[(2 + v_i_76389 + (((global int*)(v__76393))[(v_l_id_76388 + (8 * v_wg_id_76387))] / 4))], v__76404_0); \n          v__76399 = clmin(v__76399, v__76406_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76390 = 0; \n          v__76410[(v_l_id_76388 + (8 * v_wg_id_76387))] = doubleMultiplyAdd(v__76399, v__76396, v__76395[(v_l_id_76388 + (8 * v_wg_id_76387))], v__76397); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76391 = 0; \n          v__76411[(v_l_id_76388 + (8 * v_wg_id_76387))] = id(v__76410[(v_l_id_76388 + (8 * v_wg_id_76387))]); \n        }\n        /* end map_seq */\n        v_l_id_76388 = atomic_inc(&(v_work_idx_5627)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76392",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76393",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__76394",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__76395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76396",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76397",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76410",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__76411",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}