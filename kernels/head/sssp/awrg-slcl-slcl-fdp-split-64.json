{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69139, const global float* restrict v__69140, const global float* restrict v__69141, const global float* restrict v__69142, float v__69143, float v__69144, global float* v__69162, global int* v__69146, local float* v__69157, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69148; \n  float v__69150; \n  float v__57071; \n  /* Private Memory */\n  float v__69152_0;\n  \n  float v__69154_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5620 = v__69146; \n    local int v_w_id_69132; \n    if (get_local_id(0) == 0) {\n      v_w_id_69132 = atomic_inc(v_work_idx_5620); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69132 < v_MHeight_2)){\n      for (int v_l_id_69133 = get_local_id(0); v_l_id_69133 < v_MWidthC_1; v_l_id_69133 = (v_l_id_69133 + get_local_size(0))) {\n        float v_tmp_69225 = 3.4028235E38f; \n        v__69148 = v_tmp_69225; \n        /* reduce_seq */\n        for (int v_i_69134 = 0; v_i_69134 < 64; v_i_69134 = (1 + v_i_69134)) {\n          float v_tmp_69226 = 3.4028235E38f; \n          v__69150 = v_tmp_69226; \n          int v_index_69227 = v__69139[(v_l_id_69133 + (64 * v_MWidthC_1 * v_w_id_69132) + (v_MWidthC_1 * v_i_69134))]; \n          if (v_index_69227 < 0) {\n            v__69152_0 = v__69150; \n          } else {\n            if (v_index_69227 >= v_VLength_3) {\n              v__69152_0 = v__69150; \n            } else {\n              v__69152_0 = v__69141[v_index_69227]; \n            }\n          }\n          v__69154_0 = absadd(v__69152_0, v__69140[(v_l_id_69133 + (64 * v_MWidthC_1 * v_w_id_69132) + (v_MWidthC_1 * v_i_69134))]); \n          v__69148 = clmin(v__69154_0, v__69148); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69135 = 0; \n          v__69157[v_l_id_69133] = id(v__69148); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69136 = get_local_id(0); \n        float v_tmp_69230 = 3.4028235E38f; \n        v__57071 = v_tmp_69230; \n        /* reduce_seq */\n        for (int v_i_69137 = 0; v_i_69137 < v_MWidthC_1; v_i_69137 = (1 + v_i_69137)) {\n          v__57071 = clmin(v__57071, v__69157[(v_i_69137 + (v_MWidthC_1 * v_l_id_69136))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69138 = 0; \n          v__69162[v_w_id_69132] = doubleMultiplyAdd(v__57071, v__69143, v__69142[v_w_id_69132], v__69144); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69132 = atomic_inc(v_work_idx_5620); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69139",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69140",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69141",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69142",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69143",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69144",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69146",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69162",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69157",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}