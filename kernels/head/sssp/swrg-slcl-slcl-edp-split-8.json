{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__57578, const global float* restrict v__57579, const global float* restrict v__57580, const global float* restrict v__57581, float v__57582, float v__57583, global float* v__57602, local float* v__57597, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57586; \n  float v__57588; \n  float v__57071; \n  /* Private Memory */\n  float v__57590_0;\n  \n  float v__57592_0;\n  \n  int v__57596_0;\n  \n  for (int v_wg_id_57571 = get_group_id(0); v_wg_id_57571 < v_MHeight_2; v_wg_id_57571 = (v_wg_id_57571 + get_num_groups(0))) {\n    for (int v_l_id_57572 = get_local_id(0); v_l_id_57572 < v_MWidthC_1; v_l_id_57572 = (v_l_id_57572 + get_local_size(0))) {\n      float v_tmp_57670 = 3.4028235E38f; \n      v__57586 = v_tmp_57670; \n      /* reduce_while_seq */\n      for (int v_i_57573 = 0; v_i_57573 < 8; v_i_57573 = (1 + v_i_57573)) {\n        v__57596_0 = check(v__57586, v__57578[(v_l_id_57572 + (8 * v_MWidthC_1 * v_wg_id_57571) + (v_MWidthC_1 * v_i_57573))]); \n        if (v__57596_0) {\n        } else {\n          break;\n        }\n        float v_tmp_57671 = 3.4028235E38f; \n        v__57588 = v_tmp_57671; \n        int v_index_57672 = v__57578[(v_l_id_57572 + (8 * v_MWidthC_1 * v_wg_id_57571) + (v_MWidthC_1 * v_i_57573))]; \n        if (v_index_57672 < 0) {\n          v__57590_0 = v__57588; \n        } else {\n          if (v_index_57672 >= v_VLength_3) {\n            v__57590_0 = v__57588; \n          } else {\n            v__57590_0 = v__57580[v_index_57672]; \n          }\n        }\n        v__57592_0 = absadd(v__57590_0, v__57579[(v_l_id_57572 + (8 * v_MWidthC_1 * v_wg_id_57571) + (v_MWidthC_1 * v_i_57573))]); \n        v__57586 = clmin(v__57592_0, v__57586); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57574 = 0; \n        v__57597[v_l_id_57572] = id(v__57586); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_57575 = get_local_id(0); \n      float v_tmp_57675 = 3.4028235E38f; \n      v__57071 = v_tmp_57675; \n      /* reduce_seq */\n      for (int v_i_57576 = 0; v_i_57576 < v_MWidthC_1; v_i_57576 = (1 + v_i_57576)) {\n        v__57071 = clmin(v__57071, v__57597[(v_i_57576 + (v_MWidthC_1 * v_l_id_57575))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57577 = 0; \n        v__57602[v_wg_id_57571] = doubleMultiplyAdd(v__57071, v__57582, v__57581[v_wg_id_57571], v__57583); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__57578",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57579",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57580",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57581",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57582",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57583",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__57602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__57597",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}