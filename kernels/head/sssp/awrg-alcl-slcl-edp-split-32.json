{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__66744, const global float* restrict v__66745, const global float* restrict v__66746, const global float* restrict v__66747, float v__66748, float v__66749, global float* v__66769, global int* v__66751, local float* v__66764, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66753; \n  float v__66755; \n  float v__57071; \n  /* Private Memory */\n  float v__66757_0;\n  \n  float v__66759_0;\n  \n  int v__66763_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5401 = v__66751; \n    local int v_w_id_66737; \n    if (get_local_id(0) == 0) {\n      v_w_id_66737 = atomic_inc(v_work_idx_5401); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66737 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5399; \n        v_work_idx_5399 = 0; \n        int v_l_id_66738 = atomic_inc(&(v_work_idx_5399)); \n        while((v_l_id_66738 < v_MWidthC_1)){\n          float v_tmp_66827 = 3.4028235E38f; \n          v__66753 = v_tmp_66827; \n          /* reduce_while_seq */\n          for (int v_i_66739 = 0; v_i_66739 < 32; v_i_66739 = (1 + v_i_66739)) {\n            v__66763_0 = check(v__66753, v__66744[(v_l_id_66738 + (32 * v_MWidthC_1 * v_w_id_66737) + (v_MWidthC_1 * v_i_66739))]); \n            if (v__66763_0) {\n            } else {\n              break;\n            }\n            float v_tmp_66828 = 3.4028235E38f; \n            v__66755 = v_tmp_66828; \n            int v_index_66829 = v__66744[(v_l_id_66738 + (32 * v_MWidthC_1 * v_w_id_66737) + (v_MWidthC_1 * v_i_66739))]; \n            if (v_index_66829 < 0) {\n              v__66757_0 = v__66755; \n            } else {\n              if (v_index_66829 >= v_VLength_3) {\n                v__66757_0 = v__66755; \n              } else {\n                v__66757_0 = v__66746[v_index_66829]; \n              }\n            }\n            v__66759_0 = absadd(v__66757_0, v__66745[(v_l_id_66738 + (32 * v_MWidthC_1 * v_w_id_66737) + (v_MWidthC_1 * v_i_66739))]); \n            v__66753 = clmin(v__66759_0, v__66753); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66740 = 0; \n            v__66764[v_l_id_66738] = id(v__66753); \n          }\n          /* end map_seq */\n          v_l_id_66738 = atomic_inc(&(v_work_idx_5399)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66741 = get_local_id(0); \n        float v_tmp_66832 = 3.4028235E38f; \n        v__57071 = v_tmp_66832; \n        /* reduce_seq */\n        for (int v_i_66742 = 0; v_i_66742 < v_MWidthC_1; v_i_66742 = (1 + v_i_66742)) {\n          v__57071 = clmin(v__57071, v__66764[(v_i_66742 + (v_MWidthC_1 * v_l_id_66741))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66743 = 0; \n          v__66769[v_w_id_66737] = doubleMultiplyAdd(v__57071, v__66748, v__66747[v_w_id_66737], v__66749); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66737 = atomic_inc(v_work_idx_5401); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66744",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66745",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66746",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66747",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66748",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66749",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66751",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66769",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66764",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}