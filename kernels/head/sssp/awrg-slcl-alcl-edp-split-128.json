{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__72889, const global float* restrict v__72890, const global float* restrict v__72891, const global float* restrict v__72892, float v__72893, float v__72894, global float* v__72914, global int* v__72896, local float* v__72909, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72898; \n  float v__72900; \n  float v__57071; \n  /* Private Memory */\n  float v__72902_0;\n  \n  float v__72904_0;\n  \n  int v__72908_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5972 = v__72896; \n    local int v_w_id_72882; \n    if (get_local_id(0) == 0) {\n      v_w_id_72882 = atomic_inc(v_work_idx_5972); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72882 < v_MHeight_2)){\n      for (int v_l_id_72883 = get_local_id(0); v_l_id_72883 < v_MWidthC_1; v_l_id_72883 = (v_l_id_72883 + get_local_size(0))) {\n        float v_tmp_72976 = 3.4028235E38f; \n        v__72898 = v_tmp_72976; \n        /* reduce_while_seq */\n        for (int v_i_72884 = 0; v_i_72884 < 128; v_i_72884 = (1 + v_i_72884)) {\n          v__72908_0 = check(v__72898, v__72889[(v_l_id_72883 + (128 * v_MWidthC_1 * v_w_id_72882) + (v_MWidthC_1 * v_i_72884))]); \n          if (v__72908_0) {\n          } else {\n            break;\n          }\n          float v_tmp_72977 = 3.4028235E38f; \n          v__72900 = v_tmp_72977; \n          int v_index_72978 = v__72889[(v_l_id_72883 + (128 * v_MWidthC_1 * v_w_id_72882) + (v_MWidthC_1 * v_i_72884))]; \n          if (v_index_72978 < 0) {\n            v__72902_0 = v__72900; \n          } else {\n            if (v_index_72978 >= v_VLength_3) {\n              v__72902_0 = v__72900; \n            } else {\n              v__72902_0 = v__72891[v_index_72978]; \n            }\n          }\n          v__72904_0 = absadd(v__72902_0, v__72890[(v_l_id_72883 + (128 * v_MWidthC_1 * v_w_id_72882) + (v_MWidthC_1 * v_i_72884))]); \n          v__72898 = clmin(v__72904_0, v__72898); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72885 = 0; \n          v__72909[v_l_id_72883] = id(v__72898); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5966; \n        v_work_idx_5966 = 0; \n        int v_l_id_72886 = atomic_inc(&(v_work_idx_5966)); \n        while((v_l_id_72886 < 1)){\n          float v_tmp_72981 = 3.4028235E38f; \n          v__57071 = v_tmp_72981; \n          /* reduce_seq */\n          for (int v_i_72887 = 0; v_i_72887 < v_MWidthC_1; v_i_72887 = (1 + v_i_72887)) {\n            v__57071 = clmin(v__57071, v__72909[(v_i_72887 + (v_MWidthC_1 * v_l_id_72886))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_72888 = 0; \n            v__72914[v_w_id_72882] = doubleMultiplyAdd(v__57071, v__72893, v__72892[v_w_id_72882], v__72894); \n          }\n          /* end map_seq */\n          v_l_id_72886 = atomic_inc(&(v_work_idx_5966)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72882 = atomic_inc(v_work_idx_5972); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__72889",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72890",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72891",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72892",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72893",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72894",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72896",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72914",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72909",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}