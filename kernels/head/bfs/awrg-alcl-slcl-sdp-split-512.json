{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56032, const global int* restrict v__56033, const global int* restrict v__56034, const global int* restrict v__56035, int v__56036, int v__56037, global int* v__56055, global int* v__56045, global int* v__56039, local int* v__56050, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56041; \n  int v__56046; \n  int v__33230; \n  /* Private Memory */\n  int v__56043_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4402 = v__56039; \n    local int v_w_id_56024; \n    if (get_local_id(0) == 0) {\n      v_w_id_56024 = atomic_inc(v_work_idx_4402); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56024 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4400; \n        v_work_idx_4400 = 0; \n        int v_l_id_56025 = atomic_inc(&(v_work_idx_4400)); \n        while((v_l_id_56025 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_56026 = 0; v_i_56026 < 512; v_i_56026 = (1 + v_i_56026)) {\n            int v_tmp_56110 = 0; \n            v__56041 = v_tmp_56110; \n            int v_index_56111 = v__56032[(v_l_id_56025 + (512 * v_MWidthC_1 * v_w_id_56024) + (v_MWidthC_1 * v_i_56026))]; \n            if (v_index_56111 < 0) {\n              v__56043_0 = v__56041; \n            } else {\n              if (v_index_56111 >= v_VLength_3) {\n                v__56043_0 = v__56041; \n              } else {\n                v__56043_0 = v__56034[v_index_56111]; \n              }\n            }\n            v__56045[(511 + (512 * v_MWidthC_1 * v_w_id_56024) + (-1 * v_i_56026) + (512 * v_l_id_56025))] = bool_and(v__56043_0, v__56033[(v_l_id_56025 + (512 * v_MWidthC_1 * v_w_id_56024) + (v_MWidthC_1 * v_i_56026))]); \n          }\n          /* end map_seq */\n          int v_tmp_56112 = 0; \n          v__56046 = v_tmp_56112; \n          /* reduce_seq */\n          for (int v_i_56027 = 0; v_i_56027 < 512; v_i_56027 = (1 + v_i_56027)) {\n            v__56046 = bool_or(v__56046, v__56045[(v_i_56027 + (512 * v_MWidthC_1 * v_w_id_56024) + (512 * v_l_id_56025))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56028 = 0; \n            v__56050[v_l_id_56025] = id(v__56046); \n          }\n          /* end map_seq */\n          v_l_id_56025 = atomic_inc(&(v_work_idx_4400)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_56029 = get_local_id(0); \n        int v_tmp_56115 = 0; \n        v__33230 = v_tmp_56115; \n        /* reduce_seq */\n        for (int v_i_56030 = 0; v_i_56030 < v_MWidthC_1; v_i_56030 = (1 + v_i_56030)) {\n          v__33230 = bool_or(v__33230, v__56050[(v_i_56030 + (v_MWidthC_1 * v_l_id_56029))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_56031 = 0; \n          v__56055[v_w_id_56024] = doubleAndOr(v__33230, v__56036, v__56035[v_w_id_56024], v__56037); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56024 = atomic_inc(v_work_idx_4402); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__56032",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56033",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56034",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56035",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56036",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56037",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56045",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56039",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56055",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__56050",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}