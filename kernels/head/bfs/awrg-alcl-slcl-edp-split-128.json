{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49562, const global int* restrict v__49563, const global int* restrict v__49564, const global int* restrict v__49565, int v__49566, int v__49567, global int* v__49587, global int* v__49569, local int* v__49582, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49571; \n  int v__49573; \n  int v__33230; \n  /* Private Memory */\n  int v__49575_0;\n  \n  int v__49577_0;\n  \n  int v__49581_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3798 = v__49569; \n    local int v_w_id_49555; \n    if (get_local_id(0) == 0) {\n      v_w_id_49555 = atomic_inc(v_work_idx_3798); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_49555 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3796; \n        v_work_idx_3796 = 0; \n        int v_l_id_49556 = atomic_inc(&(v_work_idx_3796)); \n        while((v_l_id_49556 < v_MWidthC_1)){\n          int v_tmp_49645 = 0; \n          v__49571 = v_tmp_49645; \n          /* reduce_while_seq */\n          for (int v_i_49557 = 0; v_i_49557 < 128; v_i_49557 = (1 + v_i_49557)) {\n            v__49581_0 = check(v__49571, v__49562[(v_l_id_49556 + (128 * v_MWidthC_1 * v_w_id_49555) + (v_MWidthC_1 * v_i_49557))]); \n            if (v__49581_0) {\n            } else {\n              break;\n            }\n            int v_tmp_49646 = 0; \n            v__49573 = v_tmp_49646; \n            int v_index_49647 = v__49562[(v_l_id_49556 + (128 * v_MWidthC_1 * v_w_id_49555) + (v_MWidthC_1 * v_i_49557))]; \n            if (v_index_49647 < 0) {\n              v__49575_0 = v__49573; \n            } else {\n              if (v_index_49647 >= v_VLength_3) {\n                v__49575_0 = v__49573; \n              } else {\n                v__49575_0 = v__49564[v_index_49647]; \n              }\n            }\n            v__49577_0 = bool_and(v__49575_0, v__49563[(v_l_id_49556 + (128 * v_MWidthC_1 * v_w_id_49555) + (v_MWidthC_1 * v_i_49557))]); \n            v__49571 = bool_or(v__49577_0, v__49571); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_49558 = 0; \n            v__49582[v_l_id_49556] = id(v__49571); \n          }\n          /* end map_seq */\n          v_l_id_49556 = atomic_inc(&(v_work_idx_3796)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_49559 = get_local_id(0); \n        int v_tmp_49650 = 0; \n        v__33230 = v_tmp_49650; \n        /* reduce_seq */\n        for (int v_i_49560 = 0; v_i_49560 < v_MWidthC_1; v_i_49560 = (1 + v_i_49560)) {\n          v__33230 = bool_or(v__33230, v__49582[(v_i_49560 + (v_MWidthC_1 * v_l_id_49559))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_49561 = 0; \n          v__49587[v_w_id_49555] = doubleAndOr(v__33230, v__49566, v__49565[v_w_id_49555], v__49567); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_49555 = atomic_inc(v_work_idx_3798); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__49562",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49563",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49564",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49565",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49566",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49567",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49569",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__49587",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__49582",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}