{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48730, const global int* restrict v__48731, const global int* restrict v__48732, const global int* restrict v__48733, int v__48734, int v__48735, global int* v__48755, global int* v__48737, local int* v__48750, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48739; \n  int v__48741; \n  int v__33230; \n  /* Private Memory */\n  int v__48743_0;\n  \n  int v__48745_0;\n  \n  int v__48749_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3714 = v__48737; \n    local int v_w_id_48723; \n    if (get_local_id(0) == 0) {\n      v_w_id_48723 = atomic_inc(v_work_idx_3714); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48723 < v_MHeight_2)){\n      for (int v_l_id_48724 = get_local_id(0); v_l_id_48724 < v_MWidthC_1; v_l_id_48724 = (v_l_id_48724 + get_local_size(0))) {\n        int v_tmp_48821 = 0; \n        v__48739 = v_tmp_48821; \n        /* reduce_while_seq */\n        for (int v_i_48725 = 0; v_i_48725 < 128; v_i_48725 = (1 + v_i_48725)) {\n          v__48749_0 = check(v__48739, v__48730[(v_l_id_48724 + (128 * v_MWidthC_1 * v_w_id_48723) + (v_MWidthC_1 * v_i_48725))]); \n          if (v__48749_0) {\n          } else {\n            break;\n          }\n          int v_tmp_48822 = 0; \n          v__48741 = v_tmp_48822; \n          int v_index_48823 = v__48730[(v_l_id_48724 + (128 * v_MWidthC_1 * v_w_id_48723) + (v_MWidthC_1 * v_i_48725))]; \n          if (v_index_48823 < 0) {\n            v__48743_0 = v__48741; \n          } else {\n            if (v_index_48823 >= v_VLength_3) {\n              v__48743_0 = v__48741; \n            } else {\n              v__48743_0 = v__48732[v_index_48823]; \n            }\n          }\n          v__48745_0 = bool_and(v__48743_0, v__48731[(v_l_id_48724 + (128 * v_MWidthC_1 * v_w_id_48723) + (v_MWidthC_1 * v_i_48725))]); \n          v__48739 = bool_or(v__48745_0, v__48739); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48726 = 0; \n          v__48750[v_l_id_48724] = id(v__48739); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_48727 = get_local_id(0); \n        int v_tmp_48826 = 0; \n        v__33230 = v_tmp_48826; \n        /* reduce_seq */\n        for (int v_i_48728 = 0; v_i_48728 < v_MWidthC_1; v_i_48728 = (1 + v_i_48728)) {\n          v__33230 = bool_or(v__33230, v__48750[(v_i_48728 + (v_MWidthC_1 * v_l_id_48727))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48729 = 0; \n          v__48755[v_w_id_48723] = doubleAndOr(v__33230, v__48734, v__48733[v_w_id_48723], v__48735); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48723 = atomic_inc(v_work_idx_3714); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__48730",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48731",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48732",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48734",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48735",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48737",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48755",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48750",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}