{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38366, const global int* restrict v__38367, const global int* restrict v__38368, const global int* restrict v__38369, int v__38370, int v__38371, global int* v__38385, global int* v__38373, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38375; \n  int v__38377; \n  /* Private Memory */\n  int v__38379_0;\n  \n  int v__38381_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2744 = v__38373; \n    local int v_w_id_38362; \n    if (get_local_id(0) == 0) {\n      v_w_id_38362 = atomic_inc(v_work_idx_2744); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38362 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_38363 = get_local_id(0); v_l_id_38363 < 16; v_l_id_38363 = (v_l_id_38363 + get_local_size(0))) {\n        int v_tmp_38426 = 0; \n        v__38375 = v_tmp_38426; \n        /* reduce_seq */\n        for (int v_i_38364 = 0; v_i_38364 < v_MWidthC_1; v_i_38364 = (1 + v_i_38364)) {\n          int v_tmp_38427 = 0; \n          v__38377 = v_tmp_38427; \n          int v_index_38428 = v__38366[(v_i_38364 + (16 * v_MWidthC_1 * v_w_id_38362) + (v_MWidthC_1 * v_l_id_38363))]; \n          if (v_index_38428 < 0) {\n            v__38379_0 = v__38377; \n          } else {\n            if (v_index_38428 >= v_VLength_3) {\n              v__38379_0 = v__38377; \n            } else {\n              v__38379_0 = v__38368[v_index_38428]; \n            }\n          }\n          v__38381_0 = bool_and(v__38379_0, v__38367[(v_i_38364 + (16 * v_MWidthC_1 * v_w_id_38362) + (v_MWidthC_1 * v_l_id_38363))]); \n          v__38375 = bool_or(v__38381_0, v__38375); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38365 = 0; \n          v__38385[(v_l_id_38363 + (16 * v_w_id_38362))] = doubleAndOr(v__38375, v__38370, v__38369[(v_l_id_38363 + (16 * v_w_id_38362))], v__38371); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_38362 = atomic_inc(v_work_idx_2744); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38366",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38373",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38385",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}