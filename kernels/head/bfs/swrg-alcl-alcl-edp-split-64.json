{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44858, const global int* restrict v__44859, const global int* restrict v__44860, const global int* restrict v__44861, int v__44862, int v__44863, global int* v__44882, local int* v__44877, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44866; \n  int v__44868; \n  int v__33230; \n  /* Private Memory */\n  int v__44870_0;\n  \n  int v__44872_0;\n  \n  int v__44876_0;\n  \n  for (int v_wg_id_44851 = get_group_id(0); v_wg_id_44851 < v_MHeight_2; v_wg_id_44851 = (v_wg_id_44851 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3354; \n      v_work_idx_3354 = 0; \n      int v_l_id_44852 = atomic_inc(&(v_work_idx_3354)); \n      while((v_l_id_44852 < v_MWidthC_1)){\n        int v_tmp_44938 = 0; \n        v__44866 = v_tmp_44938; \n        /* reduce_while_seq */\n        for (int v_i_44853 = 0; v_i_44853 < 64; v_i_44853 = (1 + v_i_44853)) {\n          v__44876_0 = check(v__44866, v__44858[(v_l_id_44852 + (64 * v_MWidthC_1 * v_wg_id_44851) + (v_MWidthC_1 * v_i_44853))]); \n          if (v__44876_0) {\n          } else {\n            break;\n          }\n          int v_tmp_44939 = 0; \n          v__44868 = v_tmp_44939; \n          int v_index_44940 = v__44858[(v_l_id_44852 + (64 * v_MWidthC_1 * v_wg_id_44851) + (v_MWidthC_1 * v_i_44853))]; \n          if (v_index_44940 < 0) {\n            v__44870_0 = v__44868; \n          } else {\n            if (v_index_44940 >= v_VLength_3) {\n              v__44870_0 = v__44868; \n            } else {\n              v__44870_0 = v__44860[v_index_44940]; \n            }\n          }\n          v__44872_0 = bool_and(v__44870_0, v__44859[(v_l_id_44852 + (64 * v_MWidthC_1 * v_wg_id_44851) + (v_MWidthC_1 * v_i_44853))]); \n          v__44866 = bool_or(v__44872_0, v__44866); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44854 = 0; \n          v__44877[v_l_id_44852] = id(v__44866); \n        }\n        /* end map_seq */\n        v_l_id_44852 = atomic_inc(&(v_work_idx_3354)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3349; \n      v_work_idx_3349 = 0; \n      int v_l_id_44855 = atomic_inc(&(v_work_idx_3349)); \n      while((v_l_id_44855 < 1)){\n        int v_tmp_44943 = 0; \n        v__33230 = v_tmp_44943; \n        /* reduce_seq */\n        for (int v_i_44856 = 0; v_i_44856 < v_MWidthC_1; v_i_44856 = (1 + v_i_44856)) {\n          v__33230 = bool_or(v__33230, v__44877[(v_i_44856 + (v_MWidthC_1 * v_l_id_44855))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44857 = 0; \n          v__44882[v_wg_id_44851] = doubleAndOr(v__33230, v__44862, v__44861[v_wg_id_44851], v__44863); \n        }\n        /* end map_seq */\n        v_l_id_44855 = atomic_inc(&(v_work_idx_3349)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__44858",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44859",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44860",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44862",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44863",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44877",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}