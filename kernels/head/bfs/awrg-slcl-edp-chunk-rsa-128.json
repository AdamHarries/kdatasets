{
  "name" : "awrg-slcl-edp-chunk-rsa-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__64192, const global int* restrict v__64193, const global int* restrict v__64194, const global int* restrict v__64195, int v__64196, int v__64197, global int* v__64212, global int* v__64211, global int* v__64199, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__64200; \n  int v__64203; \n  /* Private Memory */\n  int v__64205_0;\n  \n  int v__64207_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4529 = v__64199; \n    local int v_w_id_64187; \n    if (get_local_id(0) == 0) {\n      v_w_id_64187 = atomic_inc(v_work_idx_4529); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_64187 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_64188 = get_local_id(0); v_l_id_64188 < 128; v_l_id_64188 = (v_l_id_64188 + get_local_size(0))) {\n        int v_tmp_64248 = 0; \n        v__64200 = v_tmp_64248; \n        /* reduce_seq */\n        int v_stop_64249 = min(v__64192[(1 + (v__64192[(v_l_id_64188 + (128 * v_w_id_64187))] / 4))], v__64193[(1 + (v__64193[(v_l_id_64188 + (128 * v_w_id_64187))] / 4))]); \n        for (int v_i_64189 = 0; v_i_64189 < v_stop_64249; v_i_64189 = (1 + v_i_64189)) {\n          int v_tmp_64254 = 0; \n          v__64203 = v_tmp_64254; \n          int v_index_64256 = v__64192[(2 + v_i_64189 + (v__64192[(v_l_id_64188 + (128 * v_w_id_64187))] / 4))]; \n          if (v_index_64256 < 0) {\n            v__64205_0 = v__64203; \n          } else {\n            if (v_index_64256 >= v_MWidthC_1) {\n              v__64205_0 = v__64203; \n            } else {\n              v__64205_0 = v__64194[v_index_64256]; \n            }\n          }\n          v__64207_0 = bool_and(v__64193[(2 + v_i_64189 + (v__64193[(v_l_id_64188 + (128 * v_w_id_64187))] / 4))], v__64205_0); \n          v__64200 = bool_or(v__64200, v__64207_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64190 = 0; \n          v__64211[(v_l_id_64188 + (128 * v_w_id_64187))] = doubleAndOr(v__64200, v__64196, v__64195[(v_l_id_64188 + (128 * v_w_id_64187))], v__64197); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64191 = 0; \n          v__64212[(v_l_id_64188 + (128 * v_w_id_64187))] = id(v__64211[(v_l_id_64188 + (128 * v_w_id_64187))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_64187 = atomic_inc(v_work_idx_4529); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "128",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__64192",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__64193",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__64194",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__64195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64196",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64197",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__64211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64199",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__64212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}