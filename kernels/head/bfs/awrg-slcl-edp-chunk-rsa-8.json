{
  "name" : "awrg-slcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__47264, const global int* restrict v__47265, const global int* restrict v__47266, const global int* restrict v__47267, int v__47268, int v__47269, global int* v__47284, global int* v__47283, global int* v__47271, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47272; \n  int v__47275; \n  /* Private Memory */\n  int v__47277_0;\n  \n  int v__47279_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2993 = v__47271; \n    local int v_w_id_47259; \n    if (get_local_id(0) == 0) {\n      v_w_id_47259 = atomic_inc(v_work_idx_2993); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_47259 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_47260 = get_local_id(0); v_l_id_47260 < 8; v_l_id_47260 = (v_l_id_47260 + get_local_size(0))) {\n        int v_tmp_47320 = 0; \n        v__47272 = v_tmp_47320; \n        /* reduce_seq */\n        int v_stop_47321 = min(v__47264[(1 + (v__47264[(v_l_id_47260 + (8 * v_w_id_47259))] / 4))], v__47265[(1 + (v__47265[(v_l_id_47260 + (8 * v_w_id_47259))] / 4))]); \n        for (int v_i_47261 = 0; v_i_47261 < v_stop_47321; v_i_47261 = (1 + v_i_47261)) {\n          int v_tmp_47326 = 0; \n          v__47275 = v_tmp_47326; \n          int v_index_47328 = v__47264[(2 + v_i_47261 + (v__47264[(v_l_id_47260 + (8 * v_w_id_47259))] / 4))]; \n          if (v_index_47328 < 0) {\n            v__47277_0 = v__47275; \n          } else {\n            if (v_index_47328 >= v_MWidthC_1) {\n              v__47277_0 = v__47275; \n            } else {\n              v__47277_0 = v__47266[v_index_47328]; \n            }\n          }\n          v__47279_0 = bool_and(v__47265[(2 + v_i_47261 + (v__47265[(v_l_id_47260 + (8 * v_w_id_47259))] / 4))], v__47277_0); \n          v__47272 = bool_or(v__47272, v__47279_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47262 = 0; \n          v__47283[(v_l_id_47260 + (8 * v_w_id_47259))] = doubleAndOr(v__47272, v__47268, v__47267[(v_l_id_47260 + (8 * v_w_id_47259))], v__47269); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47263 = 0; \n          v__47284[(v_l_id_47260 + (8 * v_w_id_47259))] = id(v__47283[(v_l_id_47260 + (8 * v_w_id_47259))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_47259 = atomic_inc(v_work_idx_2993); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47264",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__47265",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__47266",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__47267",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47268",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47269",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47283",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47271",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__47284",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}