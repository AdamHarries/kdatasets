{
  "name" : "awrg-alcl-sdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__48189, const global int* restrict v__48190, const global int* restrict v__48191, const global int* restrict v__48192, int v__48193, int v__48194, global int* v__48209, global int* v__48208, global int* v__48196, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48197; \n  int v__48200; \n  /* Private Memory */\n  int v__48202_0;\n  \n  int v__48204_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3081 = v__48196; \n    local int v_w_id_48184; \n    if (get_local_id(0) == 0) {\n      v_w_id_48184 = atomic_inc(v_work_idx_3081); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48184 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3079; \n        v_work_idx_3079 = 0; \n        int v_l_id_48185 = atomic_inc(&(v_work_idx_3079)); \n        while((v_l_id_48185 < 8)){\n          int v_tmp_48241 = 0; \n          v__48197 = v_tmp_48241; \n          /* reduce_seq */\n          int v_stop_48242 = min(v__48189[(1 + (v__48189[(v_l_id_48185 + (8 * v_w_id_48184))] / 4))], v__48190[(1 + (v__48190[(v_l_id_48185 + (8 * v_w_id_48184))] / 4))]); \n          for (int v_i_48186 = 0; v_i_48186 < v_stop_48242; v_i_48186 = (1 + v_i_48186)) {\n            int v_tmp_48247 = 0; \n            v__48200 = v_tmp_48247; \n            int v_index_48249 = v__48189[(2 + v_i_48186 + (v__48189[(v_l_id_48185 + (8 * v_w_id_48184))] / 4))]; \n            if (v_index_48249 < 0) {\n              v__48202_0 = v__48200; \n            } else {\n              if (v_index_48249 >= v_MWidthC_1) {\n                v__48202_0 = v__48200; \n              } else {\n                v__48202_0 = v__48191[v_index_48249]; \n              }\n            }\n            v__48204_0 = bool_and(v__48190[(2 + v_i_48186 + (v__48190[(v_l_id_48185 + (8 * v_w_id_48184))] / 4))], v__48202_0); \n            v__48197 = bool_or(v__48197, v__48204_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48187 = 0; \n            v__48208[(v_l_id_48185 + (8 * v_w_id_48184))] = doubleAndOr(v__48197, v__48193, v__48192[(v_l_id_48185 + (8 * v_w_id_48184))], v__48194); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_48188 = 0; \n            v__48209[(v_l_id_48185 + (8 * v_w_id_48184))] = id(v__48208[(v_l_id_48185 + (8 * v_w_id_48184))]); \n          }\n          /* end map_seq */\n          v_l_id_48185 = atomic_inc(&(v_work_idx_3079)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48184 = atomic_inc(v_work_idx_3081); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48189",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__48190",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__48191",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__48192",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48193",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48194",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48196",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48209",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}