{
  "name" : "awrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48362, const global int* restrict v__48363, const global int* restrict v__48364, const global int* restrict v__48365, int v__48366, int v__48367, global int* v__48381, global int* v__48369, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48371; \n  int v__48373; \n  /* Private Memory */\n  int v__48375_0;\n  \n  int v__48377_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3680 = v__48369; \n    local int v_w_id_48358; \n    if (get_local_id(0) == 0) {\n      v_w_id_48358 = atomic_inc(v_work_idx_3680); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48358 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_48359 = get_local_id(0); v_l_id_48359 < 128; v_l_id_48359 = (v_l_id_48359 + get_local_size(0))) {\n        int v_tmp_48422 = 0; \n        v__48371 = v_tmp_48422; \n        /* reduce_seq */\n        for (int v_i_48360 = 0; v_i_48360 < v_MWidthC_1; v_i_48360 = (1 + v_i_48360)) {\n          int v_tmp_48423 = 0; \n          v__48373 = v_tmp_48423; \n          int v_index_48424 = v__48362[(v_i_48360 + (128 * v_MWidthC_1 * v_w_id_48358) + (v_MWidthC_1 * v_l_id_48359))]; \n          if (v_index_48424 < 0) {\n            v__48375_0 = v__48373; \n          } else {\n            if (v_index_48424 >= v_VLength_3) {\n              v__48375_0 = v__48373; \n            } else {\n              v__48375_0 = v__48364[v_index_48424]; \n            }\n          }\n          v__48377_0 = bool_and(v__48375_0, v__48363[(v_i_48360 + (128 * v_MWidthC_1 * v_w_id_48358) + (v_MWidthC_1 * v_l_id_48359))]); \n          v__48371 = bool_or(v__48377_0, v__48371); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48361 = 0; \n          v__48381[(v_l_id_48359 + (128 * v_w_id_48358))] = doubleAndOr(v__48371, v__48366, v__48365[(v_l_id_48359 + (128 * v_w_id_48358))], v__48367); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_48358 = atomic_inc(v_work_idx_3680); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__48362",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48363",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48364",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48365",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48366",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48367",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48369",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48381",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}