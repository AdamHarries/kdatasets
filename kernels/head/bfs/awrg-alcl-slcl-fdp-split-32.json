{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42801, const global int* restrict v__42802, const global int* restrict v__42803, const global int* restrict v__42804, int v__42805, int v__42806, global int* v__42824, global int* v__42808, local int* v__42819, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42810; \n  int v__42812; \n  int v__33230; \n  /* Private Memory */\n  int v__42814_0;\n  \n  int v__42816_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3164 = v__42808; \n    local int v_w_id_42794; \n    if (get_local_id(0) == 0) {\n      v_w_id_42794 = atomic_inc(v_work_idx_3164); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42794 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3162; \n        v_work_idx_3162 = 0; \n        int v_l_id_42795 = atomic_inc(&(v_work_idx_3162)); \n        while((v_l_id_42795 < v_MWidthC_1)){\n          int v_tmp_42879 = 0; \n          v__42810 = v_tmp_42879; \n          /* reduce_seq */\n          for (int v_i_42796 = 0; v_i_42796 < 32; v_i_42796 = (1 + v_i_42796)) {\n            int v_tmp_42880 = 0; \n            v__42812 = v_tmp_42880; \n            int v_index_42881 = v__42801[(v_l_id_42795 + (32 * v_MWidthC_1 * v_w_id_42794) + (v_MWidthC_1 * v_i_42796))]; \n            if (v_index_42881 < 0) {\n              v__42814_0 = v__42812; \n            } else {\n              if (v_index_42881 >= v_VLength_3) {\n                v__42814_0 = v__42812; \n              } else {\n                v__42814_0 = v__42803[v_index_42881]; \n              }\n            }\n            v__42816_0 = bool_and(v__42814_0, v__42802[(v_l_id_42795 + (32 * v_MWidthC_1 * v_w_id_42794) + (v_MWidthC_1 * v_i_42796))]); \n            v__42810 = bool_or(v__42816_0, v__42810); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42797 = 0; \n            v__42819[v_l_id_42795] = id(v__42810); \n          }\n          /* end map_seq */\n          v_l_id_42795 = atomic_inc(&(v_work_idx_3162)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_42798 = get_local_id(0); \n        int v_tmp_42884 = 0; \n        v__33230 = v_tmp_42884; \n        /* reduce_seq */\n        for (int v_i_42799 = 0; v_i_42799 < v_MWidthC_1; v_i_42799 = (1 + v_i_42799)) {\n          v__33230 = bool_or(v__33230, v__42819[(v_i_42799 + (v_MWidthC_1 * v_l_id_42798))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42800 = 0; \n          v__42824[v_w_id_42794] = doubleAndOr(v__33230, v__42805, v__42804[v_w_id_42794], v__42806); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42794 = atomic_inc(v_work_idx_3164); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__42801",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42802",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42803",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42805",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42806",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42808",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42819",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}