{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54854, const global int* restrict v__54855, const global int* restrict v__54856, const global int* restrict v__54857, int v__54858, int v__54859, global int* v__54878, local int* v__54873, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54862; \n  int v__54864; \n  int v__33230; \n  /* Private Memory */\n  int v__54866_0;\n  \n  int v__54868_0;\n  \n  int v__54872_0;\n  \n  for (int v_wg_id_54847 = get_group_id(0); v_wg_id_54847 < v_MHeight_2; v_wg_id_54847 = (v_wg_id_54847 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4290; \n      v_work_idx_4290 = 0; \n      int v_l_id_54848 = atomic_inc(&(v_work_idx_4290)); \n      while((v_l_id_54848 < v_MWidthC_1)){\n        int v_tmp_54934 = 0; \n        v__54862 = v_tmp_54934; \n        /* reduce_while_seq */\n        for (int v_i_54849 = 0; v_i_54849 < 512; v_i_54849 = (1 + v_i_54849)) {\n          v__54872_0 = check(v__54862, v__54854[(v_l_id_54848 + (512 * v_MWidthC_1 * v_wg_id_54847) + (v_MWidthC_1 * v_i_54849))]); \n          if (v__54872_0) {\n          } else {\n            break;\n          }\n          int v_tmp_54935 = 0; \n          v__54864 = v_tmp_54935; \n          int v_index_54936 = v__54854[(v_l_id_54848 + (512 * v_MWidthC_1 * v_wg_id_54847) + (v_MWidthC_1 * v_i_54849))]; \n          if (v_index_54936 < 0) {\n            v__54866_0 = v__54864; \n          } else {\n            if (v_index_54936 >= v_VLength_3) {\n              v__54866_0 = v__54864; \n            } else {\n              v__54866_0 = v__54856[v_index_54936]; \n            }\n          }\n          v__54868_0 = bool_and(v__54866_0, v__54855[(v_l_id_54848 + (512 * v_MWidthC_1 * v_wg_id_54847) + (v_MWidthC_1 * v_i_54849))]); \n          v__54862 = bool_or(v__54868_0, v__54862); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54850 = 0; \n          v__54873[v_l_id_54848] = id(v__54862); \n        }\n        /* end map_seq */\n        v_l_id_54848 = atomic_inc(&(v_work_idx_4290)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4285; \n      v_work_idx_4285 = 0; \n      int v_l_id_54851 = atomic_inc(&(v_work_idx_4285)); \n      while((v_l_id_54851 < 1)){\n        int v_tmp_54939 = 0; \n        v__33230 = v_tmp_54939; \n        /* reduce_seq */\n        for (int v_i_54852 = 0; v_i_54852 < v_MWidthC_1; v_i_54852 = (1 + v_i_54852)) {\n          v__33230 = bool_or(v__33230, v__54873[(v_i_54852 + (v_MWidthC_1 * v_l_id_54851))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54853 = 0; \n          v__54878[v_wg_id_54847] = doubleAndOr(v__33230, v__54858, v__54857[v_wg_id_54847], v__54859); \n        }\n        /* end map_seq */\n        v_l_id_54851 = atomic_inc(&(v_work_idx_4285)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__54854",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54855",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54873",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}