{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35513, const global int* restrict v__35514, const global int* restrict v__35515, const global int* restrict v__35516, int v__35517, int v__35518, global int* v__35536, global int* v__35526, global int* v__35520, local int* v__35531, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35522; \n  int v__35527; \n  int v__33230; \n  /* Private Memory */\n  int v__35524_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2477 = v__35520; \n    local int v_w_id_35505; \n    if (get_local_id(0) == 0) {\n      v_w_id_35505 = atomic_inc(v_work_idx_2477); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35505 < v_MHeight_2)){\n      for (int v_l_id_35506 = get_local_id(0); v_l_id_35506 < v_MWidthC_1; v_l_id_35506 = (v_l_id_35506 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_35507 = 0; v_i_35507 < 8; v_i_35507 = (1 + v_i_35507)) {\n          int v_tmp_35595 = 0; \n          v__35522 = v_tmp_35595; \n          int v_index_35596 = v__35513[(v_l_id_35506 + (8 * v_MWidthC_1 * v_w_id_35505) + (v_MWidthC_1 * v_i_35507))]; \n          if (v_index_35596 < 0) {\n            v__35524_0 = v__35522; \n          } else {\n            if (v_index_35596 >= v_VLength_3) {\n              v__35524_0 = v__35522; \n            } else {\n              v__35524_0 = v__35515[v_index_35596]; \n            }\n          }\n          v__35526[(7 + (8 * v_MWidthC_1 * v_w_id_35505) + (-1 * v_i_35507) + (8 * v_l_id_35506))] = bool_and(v__35524_0, v__35514[(v_l_id_35506 + (8 * v_MWidthC_1 * v_w_id_35505) + (v_MWidthC_1 * v_i_35507))]); \n        }\n        /* end map_seq */\n        int v_tmp_35597 = 0; \n        v__35527 = v_tmp_35597; \n        /* reduce_seq */\n        for (int v_i_35508 = 0; v_i_35508 < 8; v_i_35508 = (1 + v_i_35508)) {\n          v__35527 = bool_or(v__35527, v__35526[(v_i_35508 + (8 * v_MWidthC_1 * v_w_id_35505) + (8 * v_l_id_35506))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35509 = 0; \n          v__35531[v_l_id_35506] = id(v__35527); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2470; \n        v_work_idx_2470 = 0; \n        int v_l_id_35510 = atomic_inc(&(v_work_idx_2470)); \n        while((v_l_id_35510 < 1)){\n          int v_tmp_35600 = 0; \n          v__33230 = v_tmp_35600; \n          /* reduce_seq */\n          for (int v_i_35511 = 0; v_i_35511 < v_MWidthC_1; v_i_35511 = (1 + v_i_35511)) {\n            v__33230 = bool_or(v__33230, v__35531[(v_i_35511 + (v_MWidthC_1 * v_l_id_35510))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35512 = 0; \n            v__35536[v_w_id_35505] = doubleAndOr(v__33230, v__35517, v__35516[v_w_id_35505], v__35518); \n          }\n          /* end map_seq */\n          v_l_id_35510 = atomic_inc(&(v_work_idx_2470)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35505 = atomic_inc(v_work_idx_2477); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__35513",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35514",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35515",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35516",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35517",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35518",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35526",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35520",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35536",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__35531",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}