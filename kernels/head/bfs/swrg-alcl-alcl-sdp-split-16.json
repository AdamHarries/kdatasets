{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38006, const global int* restrict v__38007, const global int* restrict v__38008, const global int* restrict v__38009, int v__38010, int v__38011, global int* v__38028, global int* v__38018, local int* v__38023, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38014; \n  int v__38019; \n  int v__33230; \n  /* Private Memory */\n  int v__38016_0;\n  \n  for (int v_wg_id_37998 = get_group_id(0); v_wg_id_37998 < v_MHeight_2; v_wg_id_37998 = (v_wg_id_37998 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2710; \n      v_work_idx_2710 = 0; \n      int v_l_id_37999 = atomic_inc(&(v_work_idx_2710)); \n      while((v_l_id_37999 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_38000 = 0; v_i_38000 < 16; v_i_38000 = (1 + v_i_38000)) {\n          int v_tmp_38081 = 0; \n          v__38014 = v_tmp_38081; \n          int v_index_38082 = v__38006[(v_l_id_37999 + (16 * v_MWidthC_1 * v_wg_id_37998) + (v_MWidthC_1 * v_i_38000))]; \n          if (v_index_38082 < 0) {\n            v__38016_0 = v__38014; \n          } else {\n            if (v_index_38082 >= v_VLength_3) {\n              v__38016_0 = v__38014; \n            } else {\n              v__38016_0 = v__38008[v_index_38082]; \n            }\n          }\n          v__38018[(15 + (16 * v_MWidthC_1 * v_wg_id_37998) + (-1 * v_i_38000) + (16 * v_l_id_37999))] = bool_and(v__38016_0, v__38007[(v_l_id_37999 + (16 * v_MWidthC_1 * v_wg_id_37998) + (v_MWidthC_1 * v_i_38000))]); \n        }\n        /* end map_seq */\n        int v_tmp_38083 = 0; \n        v__38019 = v_tmp_38083; \n        /* reduce_seq */\n        for (int v_i_38001 = 0; v_i_38001 < 16; v_i_38001 = (1 + v_i_38001)) {\n          v__38019 = bool_or(v__38019, v__38018[(v_i_38001 + (16 * v_MWidthC_1 * v_wg_id_37998) + (16 * v_l_id_37999))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38002 = 0; \n          v__38023[v_l_id_37999] = id(v__38019); \n        }\n        /* end map_seq */\n        v_l_id_37999 = atomic_inc(&(v_work_idx_2710)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2704; \n      v_work_idx_2704 = 0; \n      int v_l_id_38003 = atomic_inc(&(v_work_idx_2704)); \n      while((v_l_id_38003 < 1)){\n        int v_tmp_38086 = 0; \n        v__33230 = v_tmp_38086; \n        /* reduce_seq */\n        for (int v_i_38004 = 0; v_i_38004 < v_MWidthC_1; v_i_38004 = (1 + v_i_38004)) {\n          v__33230 = bool_or(v__33230, v__38023[(v_i_38004 + (v_MWidthC_1 * v_l_id_38003))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38005 = 0; \n          v__38028[v_wg_id_37998] = doubleAndOr(v__33230, v__38010, v__38009[v_wg_id_37998], v__38011); \n        }\n        /* end map_seq */\n        v_l_id_38003 = atomic_inc(&(v_work_idx_2704)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__38006",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38007",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38008",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38009",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38010",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38011",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38018",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__38028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38023",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}