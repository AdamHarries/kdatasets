{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35107, const global int* restrict v__35108, const global int* restrict v__35109, const global int* restrict v__35110, int v__35111, int v__35112, global int* v__35128, global int* v__35114, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35115; \n  int v__35118; \n  /* Private Memory */\n  int v__35120_0;\n  \n  int v__35122_0;\n  \n  int v__35126_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2438 = v__35114; \n    local int v_w_id_35103; \n    if (get_local_id(0) == 0) {\n      v_w_id_35103 = atomic_inc(v_work_idx_2438); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35103 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_35104 = get_local_id(0); v_l_id_35104 < 8; v_l_id_35104 = (v_l_id_35104 + get_local_size(0))) {\n        int v_tmp_35175 = 0; \n        v__35115 = v_tmp_35175; \n        /* reduce_while_seq */\n        for (int v_i_35105 = 0; v_i_35105 < v_MWidthC_1; v_i_35105 = (1 + v_i_35105)) {\n          v__35126_0 = check(v__35115, v__35107[(v_i_35105 + (8 * v_MWidthC_1 * v_w_id_35103) + (v_MWidthC_1 * v_l_id_35104))]); \n          if (v__35126_0) {\n          } else {\n            break;\n          }\n          int v_tmp_35176 = 0; \n          v__35118 = v_tmp_35176; \n          int v_index_35177 = v__35107[(v_i_35105 + (8 * v_MWidthC_1 * v_w_id_35103) + (v_MWidthC_1 * v_l_id_35104))]; \n          if (v_index_35177 < 0) {\n            v__35120_0 = v__35118; \n          } else {\n            if (v_index_35177 >= v_VLength_3) {\n              v__35120_0 = v__35118; \n            } else {\n              v__35120_0 = v__35109[v_index_35177]; \n            }\n          }\n          v__35122_0 = bool_and(v__35120_0, v__35108[(v_i_35105 + (8 * v_MWidthC_1 * v_w_id_35103) + (v_MWidthC_1 * v_l_id_35104))]); \n          v__35115 = bool_or(v__35122_0, v__35115); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35106 = 0; \n          v__35128[(v_l_id_35104 + (8 * v_w_id_35103))] = doubleAndOr(v__35115, v__35111, v__35110[(v_l_id_35104 + (8 * v_w_id_35103))], v__35112); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_35103 = atomic_inc(v_work_idx_2438); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__35107",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35109",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35110",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35111",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35112",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35114",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}