{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51034, const global int* restrict v__51035, const global int* restrict v__51036, const global int* restrict v__51037, int v__51038, int v__51039, global int* v__51056, global int* v__51046, local int* v__51051, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51042; \n  int v__51047; \n  int v__33230; \n  /* Private Memory */\n  int v__51044_0;\n  \n  for (int v_wg_id_51026 = get_group_id(0); v_wg_id_51026 < v_MHeight_2; v_wg_id_51026 = (v_wg_id_51026 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3929; \n      v_work_idx_3929 = 0; \n      int v_l_id_51027 = atomic_inc(&(v_work_idx_3929)); \n      while((v_l_id_51027 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_51028 = 0; v_i_51028 < 256; v_i_51028 = (1 + v_i_51028)) {\n          int v_tmp_51113 = 0; \n          v__51042 = v_tmp_51113; \n          int v_index_51114 = v__51034[(v_l_id_51027 + (256 * v_MWidthC_1 * v_wg_id_51026) + (v_MWidthC_1 * v_i_51028))]; \n          if (v_index_51114 < 0) {\n            v__51044_0 = v__51042; \n          } else {\n            if (v_index_51114 >= v_VLength_3) {\n              v__51044_0 = v__51042; \n            } else {\n              v__51044_0 = v__51036[v_index_51114]; \n            }\n          }\n          v__51046[(255 + (256 * v_MWidthC_1 * v_wg_id_51026) + (-1 * v_i_51028) + (256 * v_l_id_51027))] = bool_and(v__51044_0, v__51035[(v_l_id_51027 + (256 * v_MWidthC_1 * v_wg_id_51026) + (v_MWidthC_1 * v_i_51028))]); \n        }\n        /* end map_seq */\n        int v_tmp_51115 = 0; \n        v__51047 = v_tmp_51115; \n        /* reduce_seq */\n        for (int v_i_51029 = 0; v_i_51029 < 256; v_i_51029 = (1 + v_i_51029)) {\n          v__51047 = bool_or(v__51047, v__51046[(v_i_51029 + (256 * v_MWidthC_1 * v_wg_id_51026) + (256 * v_l_id_51027))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51030 = 0; \n          v__51051[v_l_id_51027] = id(v__51047); \n        }\n        /* end map_seq */\n        v_l_id_51027 = atomic_inc(&(v_work_idx_3929)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_51031 = get_local_id(0); \n      int v_tmp_51118 = 0; \n      v__33230 = v_tmp_51118; \n      /* reduce_seq */\n      for (int v_i_51032 = 0; v_i_51032 < v_MWidthC_1; v_i_51032 = (1 + v_i_51032)) {\n        v__33230 = bool_or(v__33230, v__51051[(v_i_51032 + (v_MWidthC_1 * v_l_id_51031))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_51033 = 0; \n        v__51056[v_wg_id_51026] = doubleAndOr(v__33230, v__51038, v__51037[v_wg_id_51026], v__51039); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__51034",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51035",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51036",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51038",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51039",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51046",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__51056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51051",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}