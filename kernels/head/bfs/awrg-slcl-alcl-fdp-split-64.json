{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45610, const global int* restrict v__45611, const global int* restrict v__45612, const global int* restrict v__45613, int v__45614, int v__45615, global int* v__45633, global int* v__45617, local int* v__45628, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45619; \n  int v__45621; \n  int v__33230; \n  /* Private Memory */\n  int v__45623_0;\n  \n  int v__45625_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3423 = v__45617; \n    local int v_w_id_45603; \n    if (get_local_id(0) == 0) {\n      v_w_id_45603 = atomic_inc(v_work_idx_3423); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45603 < v_MHeight_2)){\n      for (int v_l_id_45604 = get_local_id(0); v_l_id_45604 < v_MWidthC_1; v_l_id_45604 = (v_l_id_45604 + get_local_size(0))) {\n        int v_tmp_45692 = 0; \n        v__45619 = v_tmp_45692; \n        /* reduce_seq */\n        for (int v_i_45605 = 0; v_i_45605 < 64; v_i_45605 = (1 + v_i_45605)) {\n          int v_tmp_45693 = 0; \n          v__45621 = v_tmp_45693; \n          int v_index_45694 = v__45610[(v_l_id_45604 + (64 * v_MWidthC_1 * v_w_id_45603) + (v_MWidthC_1 * v_i_45605))]; \n          if (v_index_45694 < 0) {\n            v__45623_0 = v__45621; \n          } else {\n            if (v_index_45694 >= v_VLength_3) {\n              v__45623_0 = v__45621; \n            } else {\n              v__45623_0 = v__45612[v_index_45694]; \n            }\n          }\n          v__45625_0 = bool_and(v__45623_0, v__45611[(v_l_id_45604 + (64 * v_MWidthC_1 * v_w_id_45603) + (v_MWidthC_1 * v_i_45605))]); \n          v__45619 = bool_or(v__45625_0, v__45619); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45606 = 0; \n          v__45628[v_l_id_45604] = id(v__45619); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3417; \n        v_work_idx_3417 = 0; \n        int v_l_id_45607 = atomic_inc(&(v_work_idx_3417)); \n        while((v_l_id_45607 < 1)){\n          int v_tmp_45697 = 0; \n          v__33230 = v_tmp_45697; \n          /* reduce_seq */\n          for (int v_i_45608 = 0; v_i_45608 < v_MWidthC_1; v_i_45608 = (1 + v_i_45608)) {\n            v__33230 = bool_or(v__33230, v__45628[(v_i_45608 + (v_MWidthC_1 * v_l_id_45607))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_45609 = 0; \n            v__45633[v_w_id_45603] = doubleAndOr(v__33230, v__45614, v__45613[v_w_id_45603], v__45615); \n          }\n          /* end map_seq */\n          v_l_id_45607 = atomic_inc(&(v_work_idx_3417)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45603 = atomic_inc(v_work_idx_3423); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45610",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45611",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45612",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45617",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45628",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}