{
  "name" : "awrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33028, const global int* restrict v__33029, const global int* restrict v__33030, const global int* restrict v__33031, int v__33032, int v__33033, global int* v__33047, global int* v__33041, global int* v__33035, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33037; \n  int v__33042; \n  /* Private Memory */\n  int v__33039_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2253 = v__33035; \n    local int v_w_id_33024; \n    if (get_local_id(0) == 0) {\n      v_w_id_33024 = atomic_inc(v_work_idx_2253); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_33024 < v_MHeight_2)){\n      for (int v_l_id_33025 = get_local_id(0); v_l_id_33025 < v_MWidthC_1; v_l_id_33025 = (v_l_id_33025 + get_local_size(0))) {\n        int v_tmp_33085 = 0; \n        v__33037 = v_tmp_33085; \n        int v_index_33086 = v__33028[(v_l_id_33025 + (v_MWidthC_1 * v_w_id_33024))]; \n        if (v_index_33086 < 0) {\n          v__33039_0 = v__33037; \n        } else {\n          if (v_index_33086 >= v_VLength_3) {\n            v__33039_0 = v__33037; \n          } else {\n            v__33039_0 = v__33030[v_index_33086]; \n          }\n        }\n        v__33041[(-1 + v_MWidthC_1 + (-1 * v_l_id_33025) + (v_MWidthC_1 * v_w_id_33024))] = bool_and(v__33039_0, v__33029[(v_l_id_33025 + (v_MWidthC_1 * v_w_id_33024))]); \n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      int v_tmp_33087 = 0; \n      v__33042 = v_tmp_33087; \n      /* reduce_seq */\n      for (int v_i_33026 = 0; v_i_33026 < v_MWidthC_1; v_i_33026 = (1 + v_i_33026)) {\n        v__33042 = bool_or(v__33042, v__33041[(v_i_33026 + (v_MWidthC_1 * v_w_id_33024))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33027 = 0; \n        v__33047[v_w_id_33024] = doubleAndOr(v__33042, v__33032, v__33031[v_w_id_33024], v__33033); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_33024 = atomic_inc(v_work_idx_2253); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__33028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33029",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33030",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33031",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33032",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33033",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33035",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__33047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}