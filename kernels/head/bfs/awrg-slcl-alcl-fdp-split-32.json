{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42278, const global int* restrict v__42279, const global int* restrict v__42280, const global int* restrict v__42281, int v__42282, int v__42283, global int* v__42301, global int* v__42285, local int* v__42296, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42287; \n  int v__42289; \n  int v__33230; \n  /* Private Memory */\n  int v__42291_0;\n  \n  int v__42293_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3111 = v__42285; \n    local int v_w_id_42271; \n    if (get_local_id(0) == 0) {\n      v_w_id_42271 = atomic_inc(v_work_idx_3111); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42271 < v_MHeight_2)){\n      for (int v_l_id_42272 = get_local_id(0); v_l_id_42272 < v_MWidthC_1; v_l_id_42272 = (v_l_id_42272 + get_local_size(0))) {\n        int v_tmp_42360 = 0; \n        v__42287 = v_tmp_42360; \n        /* reduce_seq */\n        for (int v_i_42273 = 0; v_i_42273 < 32; v_i_42273 = (1 + v_i_42273)) {\n          int v_tmp_42361 = 0; \n          v__42289 = v_tmp_42361; \n          int v_index_42362 = v__42278[(v_l_id_42272 + (32 * v_MWidthC_1 * v_w_id_42271) + (v_MWidthC_1 * v_i_42273))]; \n          if (v_index_42362 < 0) {\n            v__42291_0 = v__42289; \n          } else {\n            if (v_index_42362 >= v_VLength_3) {\n              v__42291_0 = v__42289; \n            } else {\n              v__42291_0 = v__42280[v_index_42362]; \n            }\n          }\n          v__42293_0 = bool_and(v__42291_0, v__42279[(v_l_id_42272 + (32 * v_MWidthC_1 * v_w_id_42271) + (v_MWidthC_1 * v_i_42273))]); \n          v__42287 = bool_or(v__42293_0, v__42287); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42274 = 0; \n          v__42296[v_l_id_42272] = id(v__42287); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3105; \n        v_work_idx_3105 = 0; \n        int v_l_id_42275 = atomic_inc(&(v_work_idx_3105)); \n        while((v_l_id_42275 < 1)){\n          int v_tmp_42365 = 0; \n          v__33230 = v_tmp_42365; \n          /* reduce_seq */\n          for (int v_i_42276 = 0; v_i_42276 < v_MWidthC_1; v_i_42276 = (1 + v_i_42276)) {\n            v__33230 = bool_or(v__33230, v__42296[(v_i_42276 + (v_MWidthC_1 * v_l_id_42275))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42277 = 0; \n            v__42301[v_w_id_42271] = doubleAndOr(v__33230, v__42282, v__42281[v_w_id_42271], v__42283); \n          }\n          /* end map_seq */\n          v_l_id_42275 = atomic_inc(&(v_work_idx_3105)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42271 = atomic_inc(v_work_idx_3111); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__42278",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42279",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42280",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42281",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42282",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42283",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42285",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42296",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}