{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33626, const global int* restrict v__33627, const global int* restrict v__33628, const global int* restrict v__33629, int v__33630, int v__33631, global int* v__33648, local int* v__33643, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33634; \n  int v__33636; \n  int v__33230; \n  /* Private Memory */\n  int v__33638_0;\n  \n  int v__33640_0;\n  \n  for (int v_wg_id_33619 = get_group_id(0); v_wg_id_33619 < v_MHeight_2; v_wg_id_33619 = (v_wg_id_33619 + get_num_groups(0))) {\n    for (int v_l_id_33620 = get_local_id(0); v_l_id_33620 < v_MWidthC_1; v_l_id_33620 = (v_l_id_33620 + get_local_size(0))) {\n      int v_tmp_33713 = 0; \n      v__33634 = v_tmp_33713; \n      /* reduce_seq */\n      for (int v_i_33621 = 0; v_i_33621 < 8; v_i_33621 = (1 + v_i_33621)) {\n        int v_tmp_33714 = 0; \n        v__33636 = v_tmp_33714; \n        int v_index_33715 = v__33626[(v_l_id_33620 + (8 * v_MWidthC_1 * v_wg_id_33619) + (v_MWidthC_1 * v_i_33621))]; \n        if (v_index_33715 < 0) {\n          v__33638_0 = v__33636; \n        } else {\n          if (v_index_33715 >= v_VLength_3) {\n            v__33638_0 = v__33636; \n          } else {\n            v__33638_0 = v__33628[v_index_33715]; \n          }\n        }\n        v__33640_0 = bool_and(v__33638_0, v__33627[(v_l_id_33620 + (8 * v_MWidthC_1 * v_wg_id_33619) + (v_MWidthC_1 * v_i_33621))]); \n        v__33634 = bool_or(v__33640_0, v__33634); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33622 = 0; \n        v__33643[v_l_id_33620] = id(v__33634); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_33623 = get_local_id(0); \n      int v_tmp_33718 = 0; \n      v__33230 = v_tmp_33718; \n      /* reduce_seq */\n      for (int v_i_33624 = 0; v_i_33624 < v_MWidthC_1; v_i_33624 = (1 + v_i_33624)) {\n        v__33230 = bool_or(v__33230, v__33643[(v_i_33624 + (v_MWidthC_1 * v_l_id_33623))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33625 = 0; \n        v__33648[v_wg_id_33619] = doubleAndOr(v__33230, v__33630, v__33629[v_wg_id_33619], v__33631); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__33626",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33627",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33628",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33629",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33630",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33631",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33648",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33643",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}