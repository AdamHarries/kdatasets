{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44955, const global int* restrict v__44956, const global int* restrict v__44957, const global int* restrict v__44958, int v__44959, int v__44960, global int* v__44974, global int* v__44968, global int* v__44962, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44964; \n  int v__44969; \n  /* Private Memory */\n  int v__44966_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3362 = v__44962; \n    local int v_w_id_44950; \n    if (get_local_id(0) == 0) {\n      v_w_id_44950 = atomic_inc(v_work_idx_3362); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_44950 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_44951 = get_local_id(0); v_l_id_44951 < 64; v_l_id_44951 = (v_l_id_44951 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_44952 = 0; v_i_44952 < v_MWidthC_1; v_i_44952 = (1 + v_i_44952)) {\n          int v_tmp_45017 = 0; \n          v__44964 = v_tmp_45017; \n          int v_index_45018 = v__44955[(v_i_44952 + (64 * v_MWidthC_1 * v_w_id_44950) + (v_MWidthC_1 * v_l_id_44951))]; \n          if (v_index_45018 < 0) {\n            v__44966_0 = v__44964; \n          } else {\n            if (v_index_45018 >= v_VLength_3) {\n              v__44966_0 = v__44964; \n            } else {\n              v__44966_0 = v__44957[v_index_45018]; \n            }\n          }\n          v__44968[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_44950) + (-1 * v_i_44952) + (v_MWidthC_1 * v_l_id_44951))] = bool_and(v__44966_0, v__44956[(v_i_44952 + (64 * v_MWidthC_1 * v_w_id_44950) + (v_MWidthC_1 * v_l_id_44951))]); \n        }\n        /* end map_seq */\n        int v_tmp_45019 = 0; \n        v__44969 = v_tmp_45019; \n        /* reduce_seq */\n        for (int v_i_44953 = 0; v_i_44953 < v_MWidthC_1; v_i_44953 = (1 + v_i_44953)) {\n          v__44969 = bool_or(v__44969, v__44968[(v_i_44953 + (64 * v_MWidthC_1 * v_w_id_44950) + (v_MWidthC_1 * v_l_id_44951))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44954 = 0; \n          v__44974[(v_l_id_44951 + (64 * v_w_id_44950))] = doubleAndOr(v__44969, v__44959, v__44958[(v_l_id_44951 + (64 * v_w_id_44950))], v__44960); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_44950 = atomic_inc(v_work_idx_3362); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__44955",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44956",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44957",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44958",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44959",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44960",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44962",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__44974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}