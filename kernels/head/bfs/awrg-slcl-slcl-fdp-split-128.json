{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48625, const global int* restrict v__48626, const global int* restrict v__48627, const global int* restrict v__48628, int v__48629, int v__48630, global int* v__48648, global int* v__48632, local int* v__48643, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48634; \n  int v__48636; \n  int v__33230; \n  /* Private Memory */\n  int v__48638_0;\n  \n  int v__48640_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3705 = v__48632; \n    local int v_w_id_48618; \n    if (get_local_id(0) == 0) {\n      v_w_id_48618 = atomic_inc(v_work_idx_3705); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48618 < v_MHeight_2)){\n      for (int v_l_id_48619 = get_local_id(0); v_l_id_48619 < v_MWidthC_1; v_l_id_48619 = (v_l_id_48619 + get_local_size(0))) {\n        int v_tmp_48711 = 0; \n        v__48634 = v_tmp_48711; \n        /* reduce_seq */\n        for (int v_i_48620 = 0; v_i_48620 < 128; v_i_48620 = (1 + v_i_48620)) {\n          int v_tmp_48712 = 0; \n          v__48636 = v_tmp_48712; \n          int v_index_48713 = v__48625[(v_l_id_48619 + (128 * v_MWidthC_1 * v_w_id_48618) + (v_MWidthC_1 * v_i_48620))]; \n          if (v_index_48713 < 0) {\n            v__48638_0 = v__48636; \n          } else {\n            if (v_index_48713 >= v_VLength_3) {\n              v__48638_0 = v__48636; \n            } else {\n              v__48638_0 = v__48627[v_index_48713]; \n            }\n          }\n          v__48640_0 = bool_and(v__48638_0, v__48626[(v_l_id_48619 + (128 * v_MWidthC_1 * v_w_id_48618) + (v_MWidthC_1 * v_i_48620))]); \n          v__48634 = bool_or(v__48640_0, v__48634); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48621 = 0; \n          v__48643[v_l_id_48619] = id(v__48634); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_48622 = get_local_id(0); \n        int v_tmp_48716 = 0; \n        v__33230 = v_tmp_48716; \n        /* reduce_seq */\n        for (int v_i_48623 = 0; v_i_48623 < v_MWidthC_1; v_i_48623 = (1 + v_i_48623)) {\n          v__33230 = bool_or(v__33230, v__48643[(v_i_48623 + (v_MWidthC_1 * v_l_id_48622))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48624 = 0; \n          v__48648[v_w_id_48618] = doubleAndOr(v__33230, v__48629, v__48628[v_w_id_48618], v__48630); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48618 = atomic_inc(v_work_idx_3705); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__48625",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48626",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48627",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48629",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48630",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48632",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48648",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48643",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}