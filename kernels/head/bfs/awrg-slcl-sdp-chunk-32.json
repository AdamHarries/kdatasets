{
  "name" : "awrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41623, const global int* restrict v__41624, const global int* restrict v__41625, const global int* restrict v__41626, int v__41627, int v__41628, global int* v__41642, global int* v__41636, global int* v__41630, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41632; \n  int v__41637; \n  /* Private Memory */\n  int v__41634_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3050 = v__41630; \n    local int v_w_id_41618; \n    if (get_local_id(0) == 0) {\n      v_w_id_41618 = atomic_inc(v_work_idx_3050); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_41618 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_41619 = get_local_id(0); v_l_id_41619 < 32; v_l_id_41619 = (v_l_id_41619 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_41620 = 0; v_i_41620 < v_MWidthC_1; v_i_41620 = (1 + v_i_41620)) {\n          int v_tmp_41685 = 0; \n          v__41632 = v_tmp_41685; \n          int v_index_41686 = v__41623[(v_i_41620 + (32 * v_MWidthC_1 * v_w_id_41618) + (v_MWidthC_1 * v_l_id_41619))]; \n          if (v_index_41686 < 0) {\n            v__41634_0 = v__41632; \n          } else {\n            if (v_index_41686 >= v_VLength_3) {\n              v__41634_0 = v__41632; \n            } else {\n              v__41634_0 = v__41625[v_index_41686]; \n            }\n          }\n          v__41636[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_w_id_41618) + (-1 * v_i_41620) + (v_MWidthC_1 * v_l_id_41619))] = bool_and(v__41634_0, v__41624[(v_i_41620 + (32 * v_MWidthC_1 * v_w_id_41618) + (v_MWidthC_1 * v_l_id_41619))]); \n        }\n        /* end map_seq */\n        int v_tmp_41687 = 0; \n        v__41637 = v_tmp_41687; \n        /* reduce_seq */\n        for (int v_i_41621 = 0; v_i_41621 < v_MWidthC_1; v_i_41621 = (1 + v_i_41621)) {\n          v__41637 = bool_or(v__41637, v__41636[(v_i_41621 + (32 * v_MWidthC_1 * v_w_id_41618) + (v_MWidthC_1 * v_l_id_41619))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41622 = 0; \n          v__41642[(v_l_id_41619 + (32 * v_w_id_41618))] = doubleAndOr(v__41637, v__41627, v__41626[(v_l_id_41619 + (32 * v_w_id_41618))], v__41628); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_41618 = atomic_inc(v_work_idx_3050); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41625",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41626",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41627",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41628",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41636",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41630",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__41642",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}