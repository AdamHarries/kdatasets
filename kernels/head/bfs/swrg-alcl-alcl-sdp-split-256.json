{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51334, const global int* restrict v__51335, const global int* restrict v__51336, const global int* restrict v__51337, int v__51338, int v__51339, global int* v__51356, global int* v__51346, local int* v__51351, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51342; \n  int v__51347; \n  int v__33230; \n  /* Private Memory */\n  int v__51344_0;\n  \n  for (int v_wg_id_51326 = get_group_id(0); v_wg_id_51326 < v_MHeight_2; v_wg_id_51326 = (v_wg_id_51326 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3958; \n      v_work_idx_3958 = 0; \n      int v_l_id_51327 = atomic_inc(&(v_work_idx_3958)); \n      while((v_l_id_51327 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_51328 = 0; v_i_51328 < 256; v_i_51328 = (1 + v_i_51328)) {\n          int v_tmp_51409 = 0; \n          v__51342 = v_tmp_51409; \n          int v_index_51410 = v__51334[(v_l_id_51327 + (256 * v_MWidthC_1 * v_wg_id_51326) + (v_MWidthC_1 * v_i_51328))]; \n          if (v_index_51410 < 0) {\n            v__51344_0 = v__51342; \n          } else {\n            if (v_index_51410 >= v_VLength_3) {\n              v__51344_0 = v__51342; \n            } else {\n              v__51344_0 = v__51336[v_index_51410]; \n            }\n          }\n          v__51346[(255 + (256 * v_MWidthC_1 * v_wg_id_51326) + (-1 * v_i_51328) + (256 * v_l_id_51327))] = bool_and(v__51344_0, v__51335[(v_l_id_51327 + (256 * v_MWidthC_1 * v_wg_id_51326) + (v_MWidthC_1 * v_i_51328))]); \n        }\n        /* end map_seq */\n        int v_tmp_51411 = 0; \n        v__51347 = v_tmp_51411; \n        /* reduce_seq */\n        for (int v_i_51329 = 0; v_i_51329 < 256; v_i_51329 = (1 + v_i_51329)) {\n          v__51347 = bool_or(v__51347, v__51346[(v_i_51329 + (256 * v_MWidthC_1 * v_wg_id_51326) + (256 * v_l_id_51327))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51330 = 0; \n          v__51351[v_l_id_51327] = id(v__51347); \n        }\n        /* end map_seq */\n        v_l_id_51327 = atomic_inc(&(v_work_idx_3958)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3952; \n      v_work_idx_3952 = 0; \n      int v_l_id_51331 = atomic_inc(&(v_work_idx_3952)); \n      while((v_l_id_51331 < 1)){\n        int v_tmp_51414 = 0; \n        v__33230 = v_tmp_51414; \n        /* reduce_seq */\n        for (int v_i_51332 = 0; v_i_51332 < v_MWidthC_1; v_i_51332 = (1 + v_i_51332)) {\n          v__33230 = bool_or(v__33230, v__51351[(v_i_51332 + (v_MWidthC_1 * v_l_id_51331))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51333 = 0; \n          v__51356[v_wg_id_51326] = doubleAndOr(v__33230, v__51338, v__51337[v_wg_id_51326], v__51339); \n        }\n        /* end map_seq */\n        v_l_id_51331 = atomic_inc(&(v_work_idx_3952)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__51334",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51335",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51336",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51337",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51338",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51339",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51346",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__51356",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51351",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}