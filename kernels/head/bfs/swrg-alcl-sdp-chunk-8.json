{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34153, const global int* restrict v__34154, const global int* restrict v__34155, const global int* restrict v__34156, int v__34157, int v__34158, global int* v__34171, global int* v__34165, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34161; \n  int v__34166; \n  /* Private Memory */\n  int v__34163_0;\n  \n  for (int v_wg_id_34148 = get_group_id(0); v_wg_id_34148 < ((v_MHeight_2)/(8)); v_wg_id_34148 = (v_wg_id_34148 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2347; \n      v_work_idx_2347 = 0; \n      int v_l_id_34149 = atomic_inc(&(v_work_idx_2347)); \n      while((v_l_id_34149 < 8)){\n        /* map_seq */\n        for (int v_i_34150 = 0; v_i_34150 < v_MWidthC_1; v_i_34150 = (1 + v_i_34150)) {\n          int v_tmp_34211 = 0; \n          v__34161 = v_tmp_34211; \n          int v_index_34212 = v__34153[(v_i_34150 + (8 * v_MWidthC_1 * v_wg_id_34148) + (v_MWidthC_1 * v_l_id_34149))]; \n          if (v_index_34212 < 0) {\n            v__34163_0 = v__34161; \n          } else {\n            if (v_index_34212 >= v_VLength_3) {\n              v__34163_0 = v__34161; \n            } else {\n              v__34163_0 = v__34155[v_index_34212]; \n            }\n          }\n          v__34165[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_34148) + (-1 * v_i_34150) + (v_MWidthC_1 * v_l_id_34149))] = bool_and(v__34163_0, v__34154[(v_i_34150 + (8 * v_MWidthC_1 * v_wg_id_34148) + (v_MWidthC_1 * v_l_id_34149))]); \n        }\n        /* end map_seq */\n        int v_tmp_34213 = 0; \n        v__34166 = v_tmp_34213; \n        /* reduce_seq */\n        for (int v_i_34151 = 0; v_i_34151 < v_MWidthC_1; v_i_34151 = (1 + v_i_34151)) {\n          v__34166 = bool_or(v__34166, v__34165[(v_i_34151 + (8 * v_MWidthC_1 * v_wg_id_34148) + (v_MWidthC_1 * v_l_id_34149))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34152 = 0; \n          v__34171[(v_l_id_34149 + (8 * v_wg_id_34148))] = doubleAndOr(v__34166, v__34157, v__34156[(v_l_id_34149 + (8 * v_wg_id_34148))], v__34158); \n        }\n        /* end map_seq */\n        v_l_id_34149 = atomic_inc(&(v_work_idx_2347)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34154",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34155",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34157",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34158",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34165",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__34171",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}