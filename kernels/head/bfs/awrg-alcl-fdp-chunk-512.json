{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55882, const global int* restrict v__55883, const global int* restrict v__55884, const global int* restrict v__55885, int v__55886, int v__55887, global int* v__55901, global int* v__55889, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55891; \n  int v__55893; \n  /* Private Memory */\n  int v__55895_0;\n  \n  int v__55897_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4384 = v__55889; \n    local int v_w_id_55878; \n    if (get_local_id(0) == 0) {\n      v_w_id_55878 = atomic_inc(v_work_idx_4384); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55878 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4382; \n        v_work_idx_4382 = 0; \n        int v_l_id_55879 = atomic_inc(&(v_work_idx_4382)); \n        while((v_l_id_55879 < 512)){\n          int v_tmp_55938 = 0; \n          v__55891 = v_tmp_55938; \n          /* reduce_seq */\n          for (int v_i_55880 = 0; v_i_55880 < v_MWidthC_1; v_i_55880 = (1 + v_i_55880)) {\n            int v_tmp_55939 = 0; \n            v__55893 = v_tmp_55939; \n            int v_index_55940 = v__55882[(v_i_55880 + (512 * v_MWidthC_1 * v_w_id_55878) + (v_MWidthC_1 * v_l_id_55879))]; \n            if (v_index_55940 < 0) {\n              v__55895_0 = v__55893; \n            } else {\n              if (v_index_55940 >= v_VLength_3) {\n                v__55895_0 = v__55893; \n              } else {\n                v__55895_0 = v__55884[v_index_55940]; \n              }\n            }\n            v__55897_0 = bool_and(v__55895_0, v__55883[(v_i_55880 + (512 * v_MWidthC_1 * v_w_id_55878) + (v_MWidthC_1 * v_l_id_55879))]); \n            v__55891 = bool_or(v__55897_0, v__55891); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_55881 = 0; \n            v__55901[(v_l_id_55879 + (512 * v_w_id_55878))] = doubleAndOr(v__55891, v__55886, v__55885[(v_l_id_55879 + (512 * v_w_id_55878))], v__55887); \n          }\n          /* end map_seq */\n          v_l_id_55879 = atomic_inc(&(v_work_idx_4382)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55878 = atomic_inc(v_work_idx_4384); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55882",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55883",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55884",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55885",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55886",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55887",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55889",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}