{
  "name" : "awrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52550, const global int* restrict v__52551, const global int* restrict v__52552, const global int* restrict v__52553, int v__52554, int v__52555, global int* v__52569, global int* v__52557, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52559; \n  int v__52561; \n  /* Private Memory */\n  int v__52563_0;\n  \n  int v__52565_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4072 = v__52557; \n    local int v_w_id_52546; \n    if (get_local_id(0) == 0) {\n      v_w_id_52546 = atomic_inc(v_work_idx_4072); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52546 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4070; \n        v_work_idx_4070 = 0; \n        int v_l_id_52547 = atomic_inc(&(v_work_idx_4070)); \n        while((v_l_id_52547 < 256)){\n          int v_tmp_52606 = 0; \n          v__52559 = v_tmp_52606; \n          /* reduce_seq */\n          for (int v_i_52548 = 0; v_i_52548 < v_MWidthC_1; v_i_52548 = (1 + v_i_52548)) {\n            int v_tmp_52607 = 0; \n            v__52561 = v_tmp_52607; \n            int v_index_52608 = v__52550[(v_i_52548 + (256 * v_MWidthC_1 * v_w_id_52546) + (v_MWidthC_1 * v_l_id_52547))]; \n            if (v_index_52608 < 0) {\n              v__52563_0 = v__52561; \n            } else {\n              if (v_index_52608 >= v_VLength_3) {\n                v__52563_0 = v__52561; \n              } else {\n                v__52563_0 = v__52552[v_index_52608]; \n              }\n            }\n            v__52565_0 = bool_and(v__52563_0, v__52551[(v_i_52548 + (256 * v_MWidthC_1 * v_w_id_52546) + (v_MWidthC_1 * v_l_id_52547))]); \n            v__52559 = bool_or(v__52565_0, v__52559); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52549 = 0; \n            v__52569[(v_l_id_52547 + (256 * v_w_id_52546))] = doubleAndOr(v__52559, v__52554, v__52553[(v_l_id_52547 + (256 * v_w_id_52546))], v__52555); \n          }\n          /* end map_seq */\n          v_l_id_52547 = atomic_inc(&(v_work_idx_4070)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52546 = atomic_inc(v_work_idx_4072); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__52550",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52551",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52552",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52554",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52555",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52557",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}