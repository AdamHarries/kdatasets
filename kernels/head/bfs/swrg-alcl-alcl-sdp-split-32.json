{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41338, const global int* restrict v__41339, const global int* restrict v__41340, const global int* restrict v__41341, int v__41342, int v__41343, global int* v__41360, global int* v__41350, local int* v__41355, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41346; \n  int v__41351; \n  int v__33230; \n  /* Private Memory */\n  int v__41348_0;\n  \n  for (int v_wg_id_41330 = get_group_id(0); v_wg_id_41330 < v_MHeight_2; v_wg_id_41330 = (v_wg_id_41330 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3022; \n      v_work_idx_3022 = 0; \n      int v_l_id_41331 = atomic_inc(&(v_work_idx_3022)); \n      while((v_l_id_41331 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_41332 = 0; v_i_41332 < 32; v_i_41332 = (1 + v_i_41332)) {\n          int v_tmp_41413 = 0; \n          v__41346 = v_tmp_41413; \n          int v_index_41414 = v__41338[(v_l_id_41331 + (32 * v_MWidthC_1 * v_wg_id_41330) + (v_MWidthC_1 * v_i_41332))]; \n          if (v_index_41414 < 0) {\n            v__41348_0 = v__41346; \n          } else {\n            if (v_index_41414 >= v_VLength_3) {\n              v__41348_0 = v__41346; \n            } else {\n              v__41348_0 = v__41340[v_index_41414]; \n            }\n          }\n          v__41350[(31 + (32 * v_MWidthC_1 * v_wg_id_41330) + (-1 * v_i_41332) + (32 * v_l_id_41331))] = bool_and(v__41348_0, v__41339[(v_l_id_41331 + (32 * v_MWidthC_1 * v_wg_id_41330) + (v_MWidthC_1 * v_i_41332))]); \n        }\n        /* end map_seq */\n        int v_tmp_41415 = 0; \n        v__41351 = v_tmp_41415; \n        /* reduce_seq */\n        for (int v_i_41333 = 0; v_i_41333 < 32; v_i_41333 = (1 + v_i_41333)) {\n          v__41351 = bool_or(v__41351, v__41350[(v_i_41333 + (32 * v_MWidthC_1 * v_wg_id_41330) + (32 * v_l_id_41331))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41334 = 0; \n          v__41355[v_l_id_41331] = id(v__41351); \n        }\n        /* end map_seq */\n        v_l_id_41331 = atomic_inc(&(v_work_idx_3022)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3016; \n      v_work_idx_3016 = 0; \n      int v_l_id_41335 = atomic_inc(&(v_work_idx_3016)); \n      while((v_l_id_41335 < 1)){\n        int v_tmp_41418 = 0; \n        v__33230 = v_tmp_41418; \n        /* reduce_seq */\n        for (int v_i_41336 = 0; v_i_41336 < v_MWidthC_1; v_i_41336 = (1 + v_i_41336)) {\n          v__33230 = bool_or(v__33230, v__41355[(v_i_41336 + (v_MWidthC_1 * v_l_id_41335))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41337 = 0; \n          v__41360[v_wg_id_41330] = doubleAndOr(v__33230, v__41342, v__41341[v_wg_id_41330], v__41343); \n        }\n        /* end map_seq */\n        v_l_id_41335 = atomic_inc(&(v_work_idx_3016)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41338",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41339",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41340",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41341",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41342",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41343",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41350",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41355",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}