{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34959, const global int* restrict v__34960, const global int* restrict v__34961, const global int* restrict v__34962, int v__34963, int v__34964, global int* v__34978, global int* v__34972, global int* v__34966, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34968; \n  int v__34973; \n  /* Private Memory */\n  int v__34970_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2426 = v__34966; \n    local int v_w_id_34954; \n    if (get_local_id(0) == 0) {\n      v_w_id_34954 = atomic_inc(v_work_idx_2426); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_34954 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_34955 = get_local_id(0); v_l_id_34955 < 8; v_l_id_34955 = (v_l_id_34955 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_34956 = 0; v_i_34956 < v_MWidthC_1; v_i_34956 = (1 + v_i_34956)) {\n          int v_tmp_35021 = 0; \n          v__34968 = v_tmp_35021; \n          int v_index_35022 = v__34959[(v_i_34956 + (8 * v_MWidthC_1 * v_w_id_34954) + (v_MWidthC_1 * v_l_id_34955))]; \n          if (v_index_35022 < 0) {\n            v__34970_0 = v__34968; \n          } else {\n            if (v_index_35022 >= v_VLength_3) {\n              v__34970_0 = v__34968; \n            } else {\n              v__34970_0 = v__34961[v_index_35022]; \n            }\n          }\n          v__34972[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_34954) + (-1 * v_i_34956) + (v_MWidthC_1 * v_l_id_34955))] = bool_and(v__34970_0, v__34960[(v_i_34956 + (8 * v_MWidthC_1 * v_w_id_34954) + (v_MWidthC_1 * v_l_id_34955))]); \n        }\n        /* end map_seq */\n        int v_tmp_35023 = 0; \n        v__34973 = v_tmp_35023; \n        /* reduce_seq */\n        for (int v_i_34957 = 0; v_i_34957 < v_MWidthC_1; v_i_34957 = (1 + v_i_34957)) {\n          v__34973 = bool_or(v__34973, v__34972[(v_i_34957 + (8 * v_MWidthC_1 * v_w_id_34954) + (v_MWidthC_1 * v_l_id_34955))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34958 = 0; \n          v__34978[(v_l_id_34955 + (8 * v_w_id_34954))] = doubleAndOr(v__34973, v__34963, v__34962[(v_l_id_34955 + (8 * v_w_id_34954))], v__34964); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_34954 = atomic_inc(v_work_idx_2426); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34960",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34961",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34962",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34963",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34964",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34972",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34966",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__34978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}