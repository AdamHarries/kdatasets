{
  "name" : "awrg-alcl-fdp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__73654, const global int* restrict v__73655, const global int* restrict v__73656, const global int* restrict v__73657, int v__73658, int v__73659, global int* v__73674, global int* v__73673, global int* v__73661, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__73662; \n  int v__73665; \n  /* Private Memory */\n  int v__73667_0;\n  \n  int v__73669_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5392 = v__73661; \n    local int v_w_id_73649; \n    if (get_local_id(0) == 0) {\n      v_w_id_73649 = atomic_inc(v_work_idx_5392); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73649 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5390; \n        v_work_idx_5390 = 0; \n        int v_l_id_73650 = atomic_inc(&(v_work_idx_5390)); \n        while((v_l_id_73650 < 512)){\n          int v_tmp_73706 = 0; \n          v__73662 = v_tmp_73706; \n          /* reduce_seq */\n          int v_stop_73707 = min(v__73654[(1 + (v__73654[(v_l_id_73650 + (512 * v_w_id_73649))] / 4))], v__73655[(1 + (v__73655[(v_l_id_73650 + (512 * v_w_id_73649))] / 4))]); \n          for (int v_i_73651 = 0; v_i_73651 < v_stop_73707; v_i_73651 = (1 + v_i_73651)) {\n            int v_tmp_73712 = 0; \n            v__73665 = v_tmp_73712; \n            int v_index_73714 = v__73654[(2 + v_i_73651 + (v__73654[(v_l_id_73650 + (512 * v_w_id_73649))] / 4))]; \n            if (v_index_73714 < 0) {\n              v__73667_0 = v__73665; \n            } else {\n              if (v_index_73714 >= v_MWidthC_1) {\n                v__73667_0 = v__73665; \n              } else {\n                v__73667_0 = v__73656[v_index_73714]; \n              }\n            }\n            v__73669_0 = bool_and(v__73655[(2 + v_i_73651 + (v__73655[(v_l_id_73650 + (512 * v_w_id_73649))] / 4))], v__73667_0); \n            v__73662 = bool_or(v__73662, v__73669_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73652 = 0; \n            v__73673[(v_l_id_73650 + (512 * v_w_id_73649))] = doubleAndOr(v__73662, v__73658, v__73657[(v_l_id_73650 + (512 * v_w_id_73649))], v__73659); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73653 = 0; \n            v__73674[(v_l_id_73650 + (512 * v_w_id_73649))] = id(v__73673[(v_l_id_73650 + (512 * v_w_id_73649))]); \n          }\n          /* end map_seq */\n          v_l_id_73650 = atomic_inc(&(v_work_idx_5390)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73649 = atomic_inc(v_work_idx_5392); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__73654",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__73655",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__73656",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__73657",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73658",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73659",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73661",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73674",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}