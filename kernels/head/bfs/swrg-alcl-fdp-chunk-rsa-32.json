{
  "name" : "swrg-alcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__54610, const global int* restrict v__54611, const global int* restrict v__54612, const global int* restrict v__54613, int v__54614, int v__54615, global int* v__54629, global int* v__54628, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54617; \n  int v__54620; \n  /* Private Memory */\n  int v__54622_0;\n  \n  int v__54624_0;\n  \n  for (int v_wg_id_54605 = get_group_id(0); v_wg_id_54605 < ((v_MHeight_2)/(32)); v_wg_id_54605 = (v_wg_id_54605 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3658; \n      v_work_idx_3658 = 0; \n      int v_l_id_54606 = atomic_inc(&(v_work_idx_3658)); \n      while((v_l_id_54606 < 32)){\n        int v_tmp_54662 = 0; \n        v__54617 = v_tmp_54662; \n        /* reduce_seq */\n        int v_stop_54663 = min(v__54610[(1 + (v__54610[(v_l_id_54606 + (32 * v_wg_id_54605))] / 4))], v__54611[(1 + (v__54611[(v_l_id_54606 + (32 * v_wg_id_54605))] / 4))]); \n        for (int v_i_54607 = 0; v_i_54607 < v_stop_54663; v_i_54607 = (1 + v_i_54607)) {\n          int v_tmp_54668 = 0; \n          v__54620 = v_tmp_54668; \n          int v_index_54670 = v__54610[(2 + v_i_54607 + (v__54610[(v_l_id_54606 + (32 * v_wg_id_54605))] / 4))]; \n          if (v_index_54670 < 0) {\n            v__54622_0 = v__54620; \n          } else {\n            if (v_index_54670 >= v_MWidthC_1) {\n              v__54622_0 = v__54620; \n            } else {\n              v__54622_0 = v__54612[v_index_54670]; \n            }\n          }\n          v__54624_0 = bool_and(v__54611[(2 + v_i_54607 + (v__54611[(v_l_id_54606 + (32 * v_wg_id_54605))] / 4))], v__54622_0); \n          v__54617 = bool_or(v__54617, v__54624_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54608 = 0; \n          v__54628[(v_l_id_54606 + (32 * v_wg_id_54605))] = doubleAndOr(v__54617, v__54614, v__54613[(v_l_id_54606 + (32 * v_wg_id_54605))], v__54615); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54609 = 0; \n          v__54629[(v_l_id_54606 + (32 * v_wg_id_54605))] = id(v__54628[(v_l_id_54606 + (32 * v_wg_id_54605))]); \n        }\n        /* end map_seq */\n        v_l_id_54606 = atomic_inc(&(v_work_idx_3658)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__54610",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__54611",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__54612",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__54613",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54614",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54615",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__54629",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}