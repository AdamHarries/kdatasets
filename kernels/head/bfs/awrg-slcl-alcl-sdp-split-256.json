{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52173, const global int* restrict v__52174, const global int* restrict v__52175, const global int* restrict v__52176, int v__52177, int v__52178, global int* v__52196, global int* v__52186, global int* v__52180, local int* v__52191, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52182; \n  int v__52187; \n  int v__33230; \n  /* Private Memory */\n  int v__52184_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4037 = v__52180; \n    local int v_w_id_52165; \n    if (get_local_id(0) == 0) {\n      v_w_id_52165 = atomic_inc(v_work_idx_4037); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52165 < v_MHeight_2)){\n      for (int v_l_id_52166 = get_local_id(0); v_l_id_52166 < v_MWidthC_1; v_l_id_52166 = (v_l_id_52166 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_52167 = 0; v_i_52167 < 256; v_i_52167 = (1 + v_i_52167)) {\n          int v_tmp_52255 = 0; \n          v__52182 = v_tmp_52255; \n          int v_index_52256 = v__52173[(v_l_id_52166 + (256 * v_MWidthC_1 * v_w_id_52165) + (v_MWidthC_1 * v_i_52167))]; \n          if (v_index_52256 < 0) {\n            v__52184_0 = v__52182; \n          } else {\n            if (v_index_52256 >= v_VLength_3) {\n              v__52184_0 = v__52182; \n            } else {\n              v__52184_0 = v__52175[v_index_52256]; \n            }\n          }\n          v__52186[(255 + (256 * v_MWidthC_1 * v_w_id_52165) + (-1 * v_i_52167) + (256 * v_l_id_52166))] = bool_and(v__52184_0, v__52174[(v_l_id_52166 + (256 * v_MWidthC_1 * v_w_id_52165) + (v_MWidthC_1 * v_i_52167))]); \n        }\n        /* end map_seq */\n        int v_tmp_52257 = 0; \n        v__52187 = v_tmp_52257; \n        /* reduce_seq */\n        for (int v_i_52168 = 0; v_i_52168 < 256; v_i_52168 = (1 + v_i_52168)) {\n          v__52187 = bool_or(v__52187, v__52186[(v_i_52168 + (256 * v_MWidthC_1 * v_w_id_52165) + (256 * v_l_id_52166))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52169 = 0; \n          v__52191[v_l_id_52166] = id(v__52187); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4030; \n        v_work_idx_4030 = 0; \n        int v_l_id_52170 = atomic_inc(&(v_work_idx_4030)); \n        while((v_l_id_52170 < 1)){\n          int v_tmp_52260 = 0; \n          v__33230 = v_tmp_52260; \n          /* reduce_seq */\n          for (int v_i_52171 = 0; v_i_52171 < v_MWidthC_1; v_i_52171 = (1 + v_i_52171)) {\n            v__33230 = bool_or(v__33230, v__52191[(v_i_52171 + (v_MWidthC_1 * v_l_id_52170))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52172 = 0; \n            v__52196[v_w_id_52165] = doubleAndOr(v__33230, v__52177, v__52176[v_w_id_52165], v__52178); \n          }\n          /* end map_seq */\n          v_l_id_52170 = atomic_inc(&(v_work_idx_4030)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52165 = atomic_inc(v_work_idx_4037); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52173",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52174",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52175",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52176",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52177",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52178",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52186",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52180",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52196",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52191",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}