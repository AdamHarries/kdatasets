{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38946, const global int* restrict v__38947, const global int* restrict v__38948, const global int* restrict v__38949, int v__38950, int v__38951, global int* v__38969, global int* v__38953, local int* v__38964, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38955; \n  int v__38957; \n  int v__33230; \n  /* Private Memory */\n  int v__38959_0;\n  \n  int v__38961_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2799 = v__38953; \n    local int v_w_id_38939; \n    if (get_local_id(0) == 0) {\n      v_w_id_38939 = atomic_inc(v_work_idx_2799); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38939 < v_MHeight_2)){\n      for (int v_l_id_38940 = get_local_id(0); v_l_id_38940 < v_MWidthC_1; v_l_id_38940 = (v_l_id_38940 + get_local_size(0))) {\n        int v_tmp_39028 = 0; \n        v__38955 = v_tmp_39028; \n        /* reduce_seq */\n        for (int v_i_38941 = 0; v_i_38941 < 16; v_i_38941 = (1 + v_i_38941)) {\n          int v_tmp_39029 = 0; \n          v__38957 = v_tmp_39029; \n          int v_index_39030 = v__38946[(v_l_id_38940 + (16 * v_MWidthC_1 * v_w_id_38939) + (v_MWidthC_1 * v_i_38941))]; \n          if (v_index_39030 < 0) {\n            v__38959_0 = v__38957; \n          } else {\n            if (v_index_39030 >= v_VLength_3) {\n              v__38959_0 = v__38957; \n            } else {\n              v__38959_0 = v__38948[v_index_39030]; \n            }\n          }\n          v__38961_0 = bool_and(v__38959_0, v__38947[(v_l_id_38940 + (16 * v_MWidthC_1 * v_w_id_38939) + (v_MWidthC_1 * v_i_38941))]); \n          v__38955 = bool_or(v__38961_0, v__38955); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38942 = 0; \n          v__38964[v_l_id_38940] = id(v__38955); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2793; \n        v_work_idx_2793 = 0; \n        int v_l_id_38943 = atomic_inc(&(v_work_idx_2793)); \n        while((v_l_id_38943 < 1)){\n          int v_tmp_39033 = 0; \n          v__33230 = v_tmp_39033; \n          /* reduce_seq */\n          for (int v_i_38944 = 0; v_i_38944 < v_MWidthC_1; v_i_38944 = (1 + v_i_38944)) {\n            v__33230 = bool_or(v__33230, v__38964[(v_i_38944 + (v_MWidthC_1 * v_l_id_38943))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38945 = 0; \n            v__38969[v_w_id_38939] = doubleAndOr(v__33230, v__38950, v__38949[v_w_id_38939], v__38951); \n          }\n          /* end map_seq */\n          v_l_id_38943 = atomic_inc(&(v_work_idx_2793)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38939 = atomic_inc(v_work_idx_2799); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38946",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38947",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38948",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38950",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38951",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38953",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38964",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}