{
  "name" : "awrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55099, const global int* restrict v__55100, const global int* restrict v__55101, const global int* restrict v__55102, int v__55103, int v__55104, global int* v__55120, global int* v__55106, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55107; \n  int v__55110; \n  /* Private Memory */\n  int v__55112_0;\n  \n  int v__55114_0;\n  \n  int v__55118_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4310 = v__55106; \n    local int v_w_id_55095; \n    if (get_local_id(0) == 0) {\n      v_w_id_55095 = atomic_inc(v_work_idx_4310); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55095 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_55096 = get_local_id(0); v_l_id_55096 < 512; v_l_id_55096 = (v_l_id_55096 + get_local_size(0))) {\n        int v_tmp_55167 = 0; \n        v__55107 = v_tmp_55167; \n        /* reduce_while_seq */\n        for (int v_i_55097 = 0; v_i_55097 < v_MWidthC_1; v_i_55097 = (1 + v_i_55097)) {\n          v__55118_0 = check(v__55107, v__55099[(v_i_55097 + (512 * v_MWidthC_1 * v_w_id_55095) + (v_MWidthC_1 * v_l_id_55096))]); \n          if (v__55118_0) {\n          } else {\n            break;\n          }\n          int v_tmp_55168 = 0; \n          v__55110 = v_tmp_55168; \n          int v_index_55169 = v__55099[(v_i_55097 + (512 * v_MWidthC_1 * v_w_id_55095) + (v_MWidthC_1 * v_l_id_55096))]; \n          if (v_index_55169 < 0) {\n            v__55112_0 = v__55110; \n          } else {\n            if (v_index_55169 >= v_VLength_3) {\n              v__55112_0 = v__55110; \n            } else {\n              v__55112_0 = v__55101[v_index_55169]; \n            }\n          }\n          v__55114_0 = bool_and(v__55112_0, v__55100[(v_i_55097 + (512 * v_MWidthC_1 * v_w_id_55095) + (v_MWidthC_1 * v_l_id_55096))]); \n          v__55107 = bool_or(v__55114_0, v__55107); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55098 = 0; \n          v__55120[(v_l_id_55096 + (512 * v_w_id_55095))] = doubleAndOr(v__55107, v__55103, v__55102[(v_l_id_55096 + (512 * v_w_id_55095))], v__55104); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_55095 = atomic_inc(v_work_idx_4310); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__55099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55106",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55120",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}