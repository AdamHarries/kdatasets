{
  "name" : "awrg-alcl-edp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__56799, const global int* restrict v__56800, const global int* restrict v__56801, const global int* restrict v__56802, int v__56803, int v__56804, global int* v__56819, global int* v__56818, global int* v__56806, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56807; \n  int v__56810; \n  /* Private Memory */\n  int v__56812_0;\n  \n  int v__56814_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3863 = v__56806; \n    local int v_w_id_56794; \n    if (get_local_id(0) == 0) {\n      v_w_id_56794 = atomic_inc(v_work_idx_3863); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56794 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3861; \n        v_work_idx_3861 = 0; \n        int v_l_id_56795 = atomic_inc(&(v_work_idx_3861)); \n        while((v_l_id_56795 < 32)){\n          int v_tmp_56851 = 0; \n          v__56807 = v_tmp_56851; \n          /* reduce_seq */\n          int v_stop_56852 = min(v__56799[(1 + (v__56799[(v_l_id_56795 + (32 * v_w_id_56794))] / 4))], v__56800[(1 + (v__56800[(v_l_id_56795 + (32 * v_w_id_56794))] / 4))]); \n          for (int v_i_56796 = 0; v_i_56796 < v_stop_56852; v_i_56796 = (1 + v_i_56796)) {\n            int v_tmp_56857 = 0; \n            v__56810 = v_tmp_56857; \n            int v_index_56859 = v__56799[(2 + v_i_56796 + (v__56799[(v_l_id_56795 + (32 * v_w_id_56794))] / 4))]; \n            if (v_index_56859 < 0) {\n              v__56812_0 = v__56810; \n            } else {\n              if (v_index_56859 >= v_MWidthC_1) {\n                v__56812_0 = v__56810; \n              } else {\n                v__56812_0 = v__56801[v_index_56859]; \n              }\n            }\n            v__56814_0 = bool_and(v__56800[(2 + v_i_56796 + (v__56800[(v_l_id_56795 + (32 * v_w_id_56794))] / 4))], v__56812_0); \n            v__56807 = bool_or(v__56807, v__56814_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56797 = 0; \n            v__56818[(v_l_id_56795 + (32 * v_w_id_56794))] = doubleAndOr(v__56807, v__56803, v__56802[(v_l_id_56795 + (32 * v_w_id_56794))], v__56804); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56798 = 0; \n            v__56819[(v_l_id_56795 + (32 * v_w_id_56794))] = id(v__56818[(v_l_id_56795 + (32 * v_w_id_56794))]); \n          }\n          /* end map_seq */\n          v_l_id_56795 = atomic_inc(&(v_work_idx_3861)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56794 = atomic_inc(v_work_idx_3863); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__56799",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__56800",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__56801",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__56802",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56803",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56804",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56818",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56806",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56819",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}