{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47898, const global int* restrict v__47899, const global int* restrict v__47900, const global int* restrict v__47901, int v__47902, int v__47903, global int* v__47922, local int* v__47917, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47906; \n  int v__47908; \n  int v__33230; \n  /* Private Memory */\n  int v__47910_0;\n  \n  int v__47912_0;\n  \n  int v__47916_0;\n  \n  for (int v_wg_id_47891 = get_group_id(0); v_wg_id_47891 < v_MHeight_2; v_wg_id_47891 = (v_wg_id_47891 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3635; \n      v_work_idx_3635 = 0; \n      int v_l_id_47892 = atomic_inc(&(v_work_idx_3635)); \n      while((v_l_id_47892 < v_MWidthC_1)){\n        int v_tmp_47982 = 0; \n        v__47906 = v_tmp_47982; \n        /* reduce_while_seq */\n        for (int v_i_47893 = 0; v_i_47893 < 128; v_i_47893 = (1 + v_i_47893)) {\n          v__47916_0 = check(v__47906, v__47898[(v_l_id_47892 + (128 * v_MWidthC_1 * v_wg_id_47891) + (v_MWidthC_1 * v_i_47893))]); \n          if (v__47916_0) {\n          } else {\n            break;\n          }\n          int v_tmp_47983 = 0; \n          v__47908 = v_tmp_47983; \n          int v_index_47984 = v__47898[(v_l_id_47892 + (128 * v_MWidthC_1 * v_wg_id_47891) + (v_MWidthC_1 * v_i_47893))]; \n          if (v_index_47984 < 0) {\n            v__47910_0 = v__47908; \n          } else {\n            if (v_index_47984 >= v_VLength_3) {\n              v__47910_0 = v__47908; \n            } else {\n              v__47910_0 = v__47900[v_index_47984]; \n            }\n          }\n          v__47912_0 = bool_and(v__47910_0, v__47899[(v_l_id_47892 + (128 * v_MWidthC_1 * v_wg_id_47891) + (v_MWidthC_1 * v_i_47893))]); \n          v__47906 = bool_or(v__47912_0, v__47906); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47894 = 0; \n          v__47917[v_l_id_47892] = id(v__47906); \n        }\n        /* end map_seq */\n        v_l_id_47892 = atomic_inc(&(v_work_idx_3635)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_47895 = get_local_id(0); \n      int v_tmp_47987 = 0; \n      v__33230 = v_tmp_47987; \n      /* reduce_seq */\n      for (int v_i_47896 = 0; v_i_47896 < v_MWidthC_1; v_i_47896 = (1 + v_i_47896)) {\n        v__33230 = bool_or(v__33230, v__47917[(v_i_47896 + (v_MWidthC_1 * v_l_id_47895))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_47897 = 0; \n        v__47922[v_wg_id_47891] = doubleAndOr(v__33230, v__47902, v__47901[v_wg_id_47891], v__47903); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47898",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47899",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47900",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47901",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47902",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47903",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__47922",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47917",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}