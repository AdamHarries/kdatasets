{
  "name" : "swrg-slcl-edp-chunk-rsa-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__70534, const global int* restrict v__70535, const global int* restrict v__70536, const global int* restrict v__70537, int v__70538, int v__70539, global int* v__70553, global int* v__70552, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__70541; \n  int v__70544; \n  /* Private Memory */\n  int v__70546_0;\n  \n  int v__70548_0;\n  \n  for (int v_wg_id_70529 = get_group_id(0); v_wg_id_70529 < ((v_MHeight_2)/(512)); v_wg_id_70529 = (v_wg_id_70529 + get_num_groups(0))) {\n    for (int v_l_id_70530 = get_local_id(0); v_l_id_70530 < 512; v_l_id_70530 = (v_l_id_70530 + get_local_size(0))) {\n      int v_tmp_70590 = 0; \n      v__70541 = v_tmp_70590; \n      /* reduce_seq */\n      int v_stop_70591 = min(v__70534[(1 + (v__70534[(v_l_id_70530 + (512 * v_wg_id_70529))] / 4))], v__70535[(1 + (v__70535[(v_l_id_70530 + (512 * v_wg_id_70529))] / 4))]); \n      for (int v_i_70531 = 0; v_i_70531 < v_stop_70591; v_i_70531 = (1 + v_i_70531)) {\n        int v_tmp_70596 = 0; \n        v__70544 = v_tmp_70596; \n        int v_index_70598 = v__70534[(2 + v_i_70531 + (v__70534[(v_l_id_70530 + (512 * v_wg_id_70529))] / 4))]; \n        if (v_index_70598 < 0) {\n          v__70546_0 = v__70544; \n        } else {\n          if (v_index_70598 >= v_MWidthC_1) {\n            v__70546_0 = v__70544; \n          } else {\n            v__70546_0 = v__70536[v_index_70598]; \n          }\n        }\n        v__70548_0 = bool_and(v__70535[(2 + v_i_70531 + (v__70535[(v_l_id_70530 + (512 * v_wg_id_70529))] / 4))], v__70546_0); \n        v__70541 = bool_or(v__70541, v__70548_0); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70532 = 0; \n        v__70552[(v_l_id_70530 + (512 * v_wg_id_70529))] = doubleAndOr(v__70541, v__70538, v__70537[(v_l_id_70530 + (512 * v_wg_id_70529))], v__70539); \n      }\n      /* end map_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70533 = 0; \n        v__70553[(v_l_id_70530 + (512 * v_wg_id_70529))] = id(v__70552[(v_l_id_70530 + (512 * v_wg_id_70529))]); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "512",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__70534",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__70535",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__70536",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__70537",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70538",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70539",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70552",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__70553",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}