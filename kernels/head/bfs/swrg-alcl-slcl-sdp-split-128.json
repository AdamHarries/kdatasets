{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47702, const global int* restrict v__47703, const global int* restrict v__47704, const global int* restrict v__47705, int v__47706, int v__47707, global int* v__47724, global int* v__47714, local int* v__47719, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47710; \n  int v__47715; \n  int v__33230; \n  /* Private Memory */\n  int v__47712_0;\n  \n  for (int v_wg_id_47694 = get_group_id(0); v_wg_id_47694 < v_MHeight_2; v_wg_id_47694 = (v_wg_id_47694 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3617; \n      v_work_idx_3617 = 0; \n      int v_l_id_47695 = atomic_inc(&(v_work_idx_3617)); \n      while((v_l_id_47695 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_47696 = 0; v_i_47696 < 128; v_i_47696 = (1 + v_i_47696)) {\n          int v_tmp_47781 = 0; \n          v__47710 = v_tmp_47781; \n          int v_index_47782 = v__47702[(v_l_id_47695 + (128 * v_MWidthC_1 * v_wg_id_47694) + (v_MWidthC_1 * v_i_47696))]; \n          if (v_index_47782 < 0) {\n            v__47712_0 = v__47710; \n          } else {\n            if (v_index_47782 >= v_VLength_3) {\n              v__47712_0 = v__47710; \n            } else {\n              v__47712_0 = v__47704[v_index_47782]; \n            }\n          }\n          v__47714[(127 + (128 * v_MWidthC_1 * v_wg_id_47694) + (-1 * v_i_47696) + (128 * v_l_id_47695))] = bool_and(v__47712_0, v__47703[(v_l_id_47695 + (128 * v_MWidthC_1 * v_wg_id_47694) + (v_MWidthC_1 * v_i_47696))]); \n        }\n        /* end map_seq */\n        int v_tmp_47783 = 0; \n        v__47715 = v_tmp_47783; \n        /* reduce_seq */\n        for (int v_i_47697 = 0; v_i_47697 < 128; v_i_47697 = (1 + v_i_47697)) {\n          v__47715 = bool_or(v__47715, v__47714[(v_i_47697 + (128 * v_MWidthC_1 * v_wg_id_47694) + (128 * v_l_id_47695))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47698 = 0; \n          v__47719[v_l_id_47695] = id(v__47715); \n        }\n        /* end map_seq */\n        v_l_id_47695 = atomic_inc(&(v_work_idx_3617)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_47699 = get_local_id(0); \n      int v_tmp_47786 = 0; \n      v__33230 = v_tmp_47786; \n      /* reduce_seq */\n      for (int v_i_47700 = 0; v_i_47700 < v_MWidthC_1; v_i_47700 = (1 + v_i_47700)) {\n        v__33230 = bool_or(v__33230, v__47719[(v_i_47700 + (v_MWidthC_1 * v_l_id_47699))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_47701 = 0; \n        v__47724[v_wg_id_47694] = doubleAndOr(v__33230, v__47706, v__47705[v_wg_id_47694], v__47707); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__47702",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47703",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47704",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__47714",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__47724",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__47719",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}