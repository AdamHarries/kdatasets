{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43094, const global int* restrict v__43095, const global int* restrict v__43096, const global int* restrict v__43097, int v__43098, int v__43099, global int* v__43117, global int* v__43101, local int* v__43112, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43103; \n  int v__43105; \n  int v__33230; \n  /* Private Memory */\n  int v__43107_0;\n  \n  int v__43109_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3197 = v__43101; \n    local int v_w_id_43087; \n    if (get_local_id(0) == 0) {\n      v_w_id_43087 = atomic_inc(v_work_idx_3197); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43087 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3195; \n        v_work_idx_3195 = 0; \n        int v_l_id_43088 = atomic_inc(&(v_work_idx_3195)); \n        while((v_l_id_43088 < v_MWidthC_1)){\n          int v_tmp_43168 = 0; \n          v__43103 = v_tmp_43168; \n          /* reduce_seq */\n          for (int v_i_43089 = 0; v_i_43089 < 32; v_i_43089 = (1 + v_i_43089)) {\n            int v_tmp_43169 = 0; \n            v__43105 = v_tmp_43169; \n            int v_index_43170 = v__43094[(v_l_id_43088 + (32 * v_MWidthC_1 * v_w_id_43087) + (v_MWidthC_1 * v_i_43089))]; \n            if (v_index_43170 < 0) {\n              v__43107_0 = v__43105; \n            } else {\n              if (v_index_43170 >= v_VLength_3) {\n                v__43107_0 = v__43105; \n              } else {\n                v__43107_0 = v__43096[v_index_43170]; \n              }\n            }\n            v__43109_0 = bool_and(v__43107_0, v__43095[(v_l_id_43088 + (32 * v_MWidthC_1 * v_w_id_43087) + (v_MWidthC_1 * v_i_43089))]); \n            v__43103 = bool_or(v__43109_0, v__43103); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43090 = 0; \n            v__43112[v_l_id_43088] = id(v__43103); \n          }\n          /* end map_seq */\n          v_l_id_43088 = atomic_inc(&(v_work_idx_3195)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3190; \n        v_work_idx_3190 = 0; \n        int v_l_id_43091 = atomic_inc(&(v_work_idx_3190)); \n        while((v_l_id_43091 < 1)){\n          int v_tmp_43173 = 0; \n          v__33230 = v_tmp_43173; \n          /* reduce_seq */\n          for (int v_i_43092 = 0; v_i_43092 < v_MWidthC_1; v_i_43092 = (1 + v_i_43092)) {\n            v__33230 = bool_or(v__33230, v__43112[(v_i_43092 + (v_MWidthC_1 * v_l_id_43091))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43093 = 0; \n            v__43117[v_w_id_43087] = doubleAndOr(v__33230, v__43098, v__43097[v_w_id_43087], v__43099); \n          }\n          /* end map_seq */\n          v_l_id_43091 = atomic_inc(&(v_work_idx_3190)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43087 = atomic_inc(v_work_idx_3197); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__43094",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43095",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43096",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43097",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43098",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43099",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43101",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43117",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43112",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}