{
  "name" : "awrg-alcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__56726, const global int* restrict v__56727, const global int* restrict v__56728, const global int* restrict v__56729, int v__56730, int v__56731, global int* v__56746, global int* v__56745, global int* v__56733, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__56734; \n  int v__56737; \n  /* Private Memory */\n  int v__56739_0;\n  \n  int v__56741_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3856 = v__56733; \n    local int v_w_id_56721; \n    if (get_local_id(0) == 0) {\n      v_w_id_56721 = atomic_inc(v_work_idx_3856); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_56721 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3854; \n        v_work_idx_3854 = 0; \n        int v_l_id_56722 = atomic_inc(&(v_work_idx_3854)); \n        while((v_l_id_56722 < 32)){\n          int v_tmp_56778 = 0; \n          v__56734 = v_tmp_56778; \n          /* reduce_seq */\n          int v_stop_56779 = min(v__56726[(1 + (v__56726[(v_l_id_56722 + (32 * v_w_id_56721))] / 4))], v__56727[(1 + (v__56727[(v_l_id_56722 + (32 * v_w_id_56721))] / 4))]); \n          for (int v_i_56723 = 0; v_i_56723 < v_stop_56779; v_i_56723 = (1 + v_i_56723)) {\n            int v_tmp_56784 = 0; \n            v__56737 = v_tmp_56784; \n            int v_index_56786 = v__56726[(2 + v_i_56723 + (v__56726[(v_l_id_56722 + (32 * v_w_id_56721))] / 4))]; \n            if (v_index_56786 < 0) {\n              v__56739_0 = v__56737; \n            } else {\n              if (v_index_56786 >= v_MWidthC_1) {\n                v__56739_0 = v__56737; \n              } else {\n                v__56739_0 = v__56728[v_index_56786]; \n              }\n            }\n            v__56741_0 = bool_and(v__56727[(2 + v_i_56723 + (v__56727[(v_l_id_56722 + (32 * v_w_id_56721))] / 4))], v__56739_0); \n            v__56734 = bool_or(v__56734, v__56741_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56724 = 0; \n            v__56745[(v_l_id_56722 + (32 * v_w_id_56721))] = doubleAndOr(v__56734, v__56730, v__56729[(v_l_id_56722 + (32 * v_w_id_56721))], v__56731); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_56725 = 0; \n            v__56746[(v_l_id_56722 + (32 * v_w_id_56721))] = id(v__56745[(v_l_id_56722 + (32 * v_w_id_56721))]); \n          }\n          /* end map_seq */\n          v_l_id_56722 = atomic_inc(&(v_work_idx_3854)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_56721 = atomic_inc(v_work_idx_3856); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__56726",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__56727",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__56728",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__56729",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56730",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56731",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56733",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__56746",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}