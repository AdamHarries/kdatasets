{
  "name" : "awrg-slcl-fdp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__29535, const global float* restrict v__29536, const global float* restrict v__29537, const global float* restrict v__29538, float v__29539, float v__29540, global float* v__29555, global float* v__29554, global int* v__29542, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29543; \n  float v__29546; \n  /* Private Memory */\n  float v__29548_0;\n  \n  float v__29550_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1408 = v__29542; \n    local int v_w_id_29530; \n    if (get_local_id(0) == 0) {\n      v_w_id_29530 = atomic_inc(v_work_idx_1408); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29530 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_29531 = get_local_id(0); v_l_id_29531 < 64; v_l_id_29531 = (v_l_id_29531 + get_local_size(0))) {\n        float v_tmp_29591 = 0.0f; \n        v__29543 = v_tmp_29591; \n        /* reduce_seq */\n        int v_stop_29592 = min(v__29535[(1 + (v__29535[(v_l_id_29531 + (64 * v_w_id_29530))] / 4))], ((global int*)(v__29536 + (((global int*)(v__29536))[(v_l_id_29531 + (64 * v_w_id_29530))] / 4)))[1]); \n        for (int v_i_29532 = 0; v_i_29532 < v_stop_29592; v_i_29532 = (1 + v_i_29532)) {\n          float v_tmp_29600 = 0.0f; \n          v__29546 = v_tmp_29600; \n          int v_index_29602 = v__29535[(2 + v_i_29532 + (v__29535[(v_l_id_29531 + (64 * v_w_id_29530))] / 4))]; \n          if (v_index_29602 < 0) {\n            v__29548_0 = v__29546; \n          } else {\n            if (v_index_29602 >= v_MWidthC_1) {\n              v__29548_0 = v__29546; \n            } else {\n              v__29548_0 = v__29537[v_index_29602]; \n            }\n          }\n          v__29550_0 = mult(v__29536[(2 + v_i_29532 + (((global int*)(v__29536))[(v_l_id_29531 + (64 * v_w_id_29530))] / 4))], v__29548_0); \n          v__29543 = add(v__29543, v__29550_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29533 = 0; \n          v__29554[(v_l_id_29531 + (64 * v_w_id_29530))] = doubleMultiplyAdd(v__29543, v__29539, v__29538[(v_l_id_29531 + (64 * v_w_id_29530))], v__29540); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_29534 = 0; \n          v__29555[(v_l_id_29531 + (64 * v_w_id_29530))] = id(v__29554[(v_l_id_29531 + (64 * v_w_id_29530))]); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_29530 = atomic_inc(v_work_idx_1408); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__29535",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__29536",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__29537",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__29538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29539",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29540",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29542",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29555",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}