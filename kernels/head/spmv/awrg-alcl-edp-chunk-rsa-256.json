{
  "name" : "awrg-alcl-edp-chunk-rsa-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__39287, const global float* restrict v__39288, const global float* restrict v__39289, const global float* restrict v__39290, float v__39291, float v__39292, global float* v__39307, global float* v__39306, global int* v__39294, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__39295; \n  float v__39298; \n  /* Private Memory */\n  float v__39300_0;\n  \n  float v__39302_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2284 = v__39294; \n    local int v_w_id_39282; \n    if (get_local_id(0) == 0) {\n      v_w_id_39282 = atomic_inc(v_work_idx_2284); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39282 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2282; \n        v_work_idx_2282 = 0; \n        int v_l_id_39283 = atomic_inc(&(v_work_idx_2282)); \n        while((v_l_id_39283 < 256)){\n          float v_tmp_39339 = 0.0f; \n          v__39295 = v_tmp_39339; \n          /* reduce_seq */\n          int v_stop_39340 = min(v__39287[(1 + (v__39287[(v_l_id_39283 + (256 * v_w_id_39282))] / 4))], ((global int*)(v__39288 + (((global int*)(v__39288))[(v_l_id_39283 + (256 * v_w_id_39282))] / 4)))[1]); \n          for (int v_i_39284 = 0; v_i_39284 < v_stop_39340; v_i_39284 = (1 + v_i_39284)) {\n            float v_tmp_39348 = 0.0f; \n            v__39298 = v_tmp_39348; \n            int v_index_39350 = v__39287[(2 + v_i_39284 + (v__39287[(v_l_id_39283 + (256 * v_w_id_39282))] / 4))]; \n            if (v_index_39350 < 0) {\n              v__39300_0 = v__39298; \n            } else {\n              if (v_index_39350 >= v_MWidthC_1) {\n                v__39300_0 = v__39298; \n              } else {\n                v__39300_0 = v__39289[v_index_39350]; \n              }\n            }\n            v__39302_0 = mult(v__39288[(2 + v_i_39284 + (((global int*)(v__39288))[(v_l_id_39283 + (256 * v_w_id_39282))] / 4))], v__39300_0); \n            v__39295 = add(v__39295, v__39302_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39285 = 0; \n            v__39306[(v_l_id_39283 + (256 * v_w_id_39282))] = doubleMultiplyAdd(v__39295, v__39291, v__39290[(v_l_id_39283 + (256 * v_w_id_39282))], v__39292); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39286 = 0; \n            v__39307[(v_l_id_39283 + (256 * v_w_id_39282))] = id(v__39306[(v_l_id_39283 + (256 * v_w_id_39282))]); \n          }\n          /* end map_seq */\n          v_l_id_39283 = atomic_inc(&(v_work_idx_2282)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39282 = atomic_inc(v_work_idx_2284); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "256",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__39287",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__39288",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__39289",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__39290",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39291",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39292",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39306",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39294",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39307",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}