{
  "name" : "awrg-alcl-edp-chunk-rsa-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__30703, const global float* restrict v__30704, const global float* restrict v__30705, const global float* restrict v__30706, float v__30707, float v__30708, global float* v__30723, global float* v__30722, global int* v__30710, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30711; \n  float v__30714; \n  /* Private Memory */\n  float v__30716_0;\n  \n  float v__30718_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1516 = v__30710; \n    local int v_w_id_30698; \n    if (get_local_id(0) == 0) {\n      v_w_id_30698 = atomic_inc(v_work_idx_1516); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_30698 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1514; \n        v_work_idx_1514 = 0; \n        int v_l_id_30699 = atomic_inc(&(v_work_idx_1514)); \n        while((v_l_id_30699 < 64)){\n          float v_tmp_30755 = 0.0f; \n          v__30711 = v_tmp_30755; \n          /* reduce_seq */\n          int v_stop_30756 = min(v__30703[(1 + (v__30703[(v_l_id_30699 + (64 * v_w_id_30698))] / 4))], ((global int*)(v__30704 + (((global int*)(v__30704))[(v_l_id_30699 + (64 * v_w_id_30698))] / 4)))[1]); \n          for (int v_i_30700 = 0; v_i_30700 < v_stop_30756; v_i_30700 = (1 + v_i_30700)) {\n            float v_tmp_30764 = 0.0f; \n            v__30714 = v_tmp_30764; \n            int v_index_30766 = v__30703[(2 + v_i_30700 + (v__30703[(v_l_id_30699 + (64 * v_w_id_30698))] / 4))]; \n            if (v_index_30766 < 0) {\n              v__30716_0 = v__30714; \n            } else {\n              if (v_index_30766 >= v_MWidthC_1) {\n                v__30716_0 = v__30714; \n              } else {\n                v__30716_0 = v__30705[v_index_30766]; \n              }\n            }\n            v__30718_0 = mult(v__30704[(2 + v_i_30700 + (((global int*)(v__30704))[(v_l_id_30699 + (64 * v_w_id_30698))] / 4))], v__30716_0); \n            v__30711 = add(v__30711, v__30718_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30701 = 0; \n            v__30722[(v_l_id_30699 + (64 * v_w_id_30698))] = doubleMultiplyAdd(v__30711, v__30707, v__30706[(v_l_id_30699 + (64 * v_w_id_30698))], v__30708); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_30702 = 0; \n            v__30723[(v_l_id_30699 + (64 * v_w_id_30698))] = id(v__30722[(v_l_id_30699 + (64 * v_w_id_30698))]); \n          }\n          /* end map_seq */\n          v_l_id_30699 = atomic_inc(&(v_work_idx_1514)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_30698 = atomic_inc(v_work_idx_1516); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "64",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30703",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__30704",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__30705",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__30706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30707",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30708",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30722",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30710",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__30723",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}