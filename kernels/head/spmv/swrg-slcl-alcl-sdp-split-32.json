{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16667, const global float* restrict v__16668, const global float* restrict v__16669, const global float* restrict v__16670, float v__16671, float v__16672, global float* v__16689, global float* v__16679, local float* v__16684, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16675; \n  float v__16680; \n  float v__9384; \n  /* Private Memory */\n  float v__16677_0;\n  \n  for (int v_wg_id_16659 = get_group_id(0); v_wg_id_16659 < v_MHeight_2; v_wg_id_16659 = (v_wg_id_16659 + get_num_groups(0))) {\n    for (int v_l_id_16660 = get_local_id(0); v_l_id_16660 < v_MWidthC_1; v_l_id_16660 = (v_l_id_16660 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_16661 = 0; v_i_16661 < 32; v_i_16661 = (1 + v_i_16661)) {\n        float v_tmp_16750 = 0.0f; \n        v__16675 = v_tmp_16750; \n        int v_index_16751 = v__16667[(v_l_id_16660 + (32 * v_MWidthC_1 * v_wg_id_16659) + (v_MWidthC_1 * v_i_16661))]; \n        if (v_index_16751 < 0) {\n          v__16677_0 = v__16675; \n        } else {\n          if (v_index_16751 >= v_VLength_3) {\n            v__16677_0 = v__16675; \n          } else {\n            v__16677_0 = v__16669[v_index_16751]; \n          }\n        }\n        v__16679[(31 + (32 * v_MWidthC_1 * v_wg_id_16659) + (-1 * v_i_16661) + (32 * v_l_id_16660))] = mult(v__16677_0, v__16668[(v_l_id_16660 + (32 * v_MWidthC_1 * v_wg_id_16659) + (v_MWidthC_1 * v_i_16661))]); \n      }\n      /* end map_seq */\n      float v_tmp_16752 = 0.0f; \n      v__16680 = v_tmp_16752; \n      /* reduce_seq */\n      for (int v_i_16662 = 0; v_i_16662 < 32; v_i_16662 = (1 + v_i_16662)) {\n        v__16680 = add(v__16680, v__16679[(v_i_16662 + (32 * v_MWidthC_1 * v_wg_id_16659) + (32 * v_l_id_16660))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16663 = 0; \n        v__16684[v_l_id_16660] = id(v__16680); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_714; \n      v_work_idx_714 = 0; \n      int v_l_id_16664 = atomic_inc(&(v_work_idx_714)); \n      while((v_l_id_16664 < 1)){\n        float v_tmp_16755 = 0.0f; \n        v__9384 = v_tmp_16755; \n        /* reduce_seq */\n        for (int v_i_16665 = 0; v_i_16665 < v_MWidthC_1; v_i_16665 = (1 + v_i_16665)) {\n          v__9384 = add(v__9384, v__16684[(v_i_16665 + (v_MWidthC_1 * v_l_id_16664))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16666 = 0; \n          v__16689[v_wg_id_16659] = doubleMultiplyAdd(v__9384, v__16671, v__16670[v_wg_id_16659], v__16672); \n        }\n        /* end map_seq */\n        v_l_id_16664 = atomic_inc(&(v_work_idx_714)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16667",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16668",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16669",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16671",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16672",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16679",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16689",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16684",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}