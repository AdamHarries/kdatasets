{
  "name" : "swrg-alcl-fdp-chunk-rsa-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__24187, const global float* restrict v__24188, const global float* restrict v__24189, const global float* restrict v__24190, float v__24191, float v__24192, global float* v__24206, global float* v__24205, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24194; \n  float v__24197; \n  /* Private Memory */\n  float v__24199_0;\n  \n  float v__24201_0;\n  \n  for (int v_wg_id_24182 = get_group_id(0); v_wg_id_24182 < ((v_MHeight_2)/(32)); v_wg_id_24182 = (v_wg_id_24182 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_927; \n      v_work_idx_927 = 0; \n      int v_l_id_24183 = atomic_inc(&(v_work_idx_927)); \n      while((v_l_id_24183 < 32)){\n        float v_tmp_24239 = 0.0f; \n        v__24194 = v_tmp_24239; \n        /* reduce_seq */\n        int v_stop_24240 = min(v__24187[(1 + (v__24187[(v_l_id_24183 + (32 * v_wg_id_24182))] / 4))], ((global int*)(v__24188 + (((global int*)(v__24188))[(v_l_id_24183 + (32 * v_wg_id_24182))] / 4)))[1]); \n        for (int v_i_24184 = 0; v_i_24184 < v_stop_24240; v_i_24184 = (1 + v_i_24184)) {\n          float v_tmp_24248 = 0.0f; \n          v__24197 = v_tmp_24248; \n          int v_index_24250 = v__24187[(2 + v_i_24184 + (v__24187[(v_l_id_24183 + (32 * v_wg_id_24182))] / 4))]; \n          if (v_index_24250 < 0) {\n            v__24199_0 = v__24197; \n          } else {\n            if (v_index_24250 >= v_MWidthC_1) {\n              v__24199_0 = v__24197; \n            } else {\n              v__24199_0 = v__24189[v_index_24250]; \n            }\n          }\n          v__24201_0 = mult(v__24188[(2 + v_i_24184 + (((global int*)(v__24188))[(v_l_id_24183 + (32 * v_wg_id_24182))] / 4))], v__24199_0); \n          v__24194 = add(v__24194, v__24201_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24185 = 0; \n          v__24205[(v_l_id_24183 + (32 * v_wg_id_24182))] = doubleMultiplyAdd(v__24194, v__24191, v__24190[(v_l_id_24183 + (32 * v_wg_id_24182))], v__24192); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24186 = 0; \n          v__24206[(v_l_id_24183 + (32 * v_wg_id_24182))] = id(v__24205[(v_l_id_24183 + (32 * v_wg_id_24182))]); \n        }\n        /* end map_seq */\n        v_l_id_24183 = atomic_inc(&(v_work_idx_927)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "32",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24187",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__24188",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__24189",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__24190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24191",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24192",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24205",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__24206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}