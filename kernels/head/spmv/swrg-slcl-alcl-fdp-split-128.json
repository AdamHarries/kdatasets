{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23433, const global float* restrict v__23434, const global float* restrict v__23435, const global float* restrict v__23436, float v__23437, float v__23438, global float* v__23455, local float* v__23450, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23441; \n  float v__23443; \n  float v__9384; \n  /* Private Memory */\n  float v__23445_0;\n  \n  float v__23447_0;\n  \n  for (int v_wg_id_23426 = get_group_id(0); v_wg_id_23426 < v_MHeight_2; v_wg_id_23426 = (v_wg_id_23426 + get_num_groups(0))) {\n    for (int v_l_id_23427 = get_local_id(0); v_l_id_23427 < v_MWidthC_1; v_l_id_23427 = (v_l_id_23427 + get_local_size(0))) {\n      float v_tmp_23516 = 0.0f; \n      v__23441 = v_tmp_23516; \n      /* reduce_seq */\n      for (int v_i_23428 = 0; v_i_23428 < 128; v_i_23428 = (1 + v_i_23428)) {\n        float v_tmp_23517 = 0.0f; \n        v__23443 = v_tmp_23517; \n        int v_index_23518 = v__23433[(v_l_id_23427 + (128 * v_MWidthC_1 * v_wg_id_23426) + (v_MWidthC_1 * v_i_23428))]; \n        if (v_index_23518 < 0) {\n          v__23445_0 = v__23443; \n        } else {\n          if (v_index_23518 >= v_VLength_3) {\n            v__23445_0 = v__23443; \n          } else {\n            v__23445_0 = v__23435[v_index_23518]; \n          }\n        }\n        v__23447_0 = mult(v__23445_0, v__23434[(v_l_id_23427 + (128 * v_MWidthC_1 * v_wg_id_23426) + (v_MWidthC_1 * v_i_23428))]); \n        v__23441 = add(v__23447_0, v__23441); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23429 = 0; \n        v__23450[v_l_id_23427] = id(v__23441); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1348; \n      v_work_idx_1348 = 0; \n      int v_l_id_23430 = atomic_inc(&(v_work_idx_1348)); \n      while((v_l_id_23430 < 1)){\n        float v_tmp_23521 = 0.0f; \n        v__9384 = v_tmp_23521; \n        /* reduce_seq */\n        for (int v_i_23431 = 0; v_i_23431 < v_MWidthC_1; v_i_23431 = (1 + v_i_23431)) {\n          v__9384 = add(v__9384, v__23450[(v_i_23431 + (v_MWidthC_1 * v_l_id_23430))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23432 = 0; \n          v__23455[v_wg_id_23426] = doubleMultiplyAdd(v__9384, v__23437, v__23436[v_wg_id_23426], v__23438); \n        }\n        /* end map_seq */\n        v_l_id_23430 = atomic_inc(&(v_work_idx_1348)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__23433",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23434",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23435",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23437",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23438",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23455",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23450",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}