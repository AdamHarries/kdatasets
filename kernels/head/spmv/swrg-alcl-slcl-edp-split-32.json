{
  "name" : "swrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__17393, const global float* restrict v__17394, const global float* restrict v__17395, const global float* restrict v__17396, float v__17397, float v__17398, global float* v__17417, local float* v__17412, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17401; \n  float v__17403; \n  float v__9384; \n  /* Private Memory */\n  float v__17405_0;\n  \n  float v__17407_0;\n  \n  int v__17411_0;\n  \n  for (int v_wg_id_17386 = get_group_id(0); v_wg_id_17386 < v_MHeight_2; v_wg_id_17386 = (v_wg_id_17386 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_784; \n      v_work_idx_784 = 0; \n      int v_l_id_17387 = atomic_inc(&(v_work_idx_784)); \n      while((v_l_id_17387 < v_MWidthC_1)){\n        float v_tmp_17477 = 0.0f; \n        v__17401 = v_tmp_17477; \n        /* reduce_while_seq */\n        for (int v_i_17388 = 0; v_i_17388 < 32; v_i_17388 = (1 + v_i_17388)) {\n          v__17411_0 = check(v__17401, v__17393[(v_l_id_17387 + (32 * v_MWidthC_1 * v_wg_id_17386) + (v_MWidthC_1 * v_i_17388))]); \n          if (v__17411_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17478 = 0.0f; \n          v__17403 = v_tmp_17478; \n          int v_index_17479 = v__17393[(v_l_id_17387 + (32 * v_MWidthC_1 * v_wg_id_17386) + (v_MWidthC_1 * v_i_17388))]; \n          if (v_index_17479 < 0) {\n            v__17405_0 = v__17403; \n          } else {\n            if (v_index_17479 >= v_VLength_3) {\n              v__17405_0 = v__17403; \n            } else {\n              v__17405_0 = v__17395[v_index_17479]; \n            }\n          }\n          v__17407_0 = mult(v__17405_0, v__17394[(v_l_id_17387 + (32 * v_MWidthC_1 * v_wg_id_17386) + (v_MWidthC_1 * v_i_17388))]); \n          v__17401 = add(v__17407_0, v__17401); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17389 = 0; \n          v__17412[v_l_id_17387] = id(v__17401); \n        }\n        /* end map_seq */\n        v_l_id_17387 = atomic_inc(&(v_work_idx_784)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_17390 = get_local_id(0); \n      float v_tmp_17482 = 0.0f; \n      v__9384 = v_tmp_17482; \n      /* reduce_seq */\n      for (int v_i_17391 = 0; v_i_17391 < v_MWidthC_1; v_i_17391 = (1 + v_i_17391)) {\n        v__9384 = add(v__9384, v__17412[(v_i_17391 + (v_MWidthC_1 * v_l_id_17390))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_17392 = 0; \n        v__17417[v_wg_id_17386] = doubleMultiplyAdd(v__9384, v__17397, v__17396[v_wg_id_17386], v__17398); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17393",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17394",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17395",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17397",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17398",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17417",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17412",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}