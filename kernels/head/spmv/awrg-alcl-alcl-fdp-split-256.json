{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29249, const global float* restrict v__29250, const global float* restrict v__29251, const global float* restrict v__29252, float v__29253, float v__29254, global float* v__29272, global int* v__29256, local float* v__29267, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29258; \n  float v__29260; \n  float v__9384; \n  /* Private Memory */\n  float v__29262_0;\n  \n  float v__29264_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1906 = v__29256; \n    local int v_w_id_29242; \n    if (get_local_id(0) == 0) {\n      v_w_id_29242 = atomic_inc(v_work_idx_1906); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29242 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1904; \n        v_work_idx_1904 = 0; \n        int v_l_id_29243 = atomic_inc(&(v_work_idx_1904)); \n        while((v_l_id_29243 < v_MWidthC_1)){\n          float v_tmp_29323 = 0.0f; \n          v__29258 = v_tmp_29323; \n          /* reduce_seq */\n          for (int v_i_29244 = 0; v_i_29244 < 256; v_i_29244 = (1 + v_i_29244)) {\n            float v_tmp_29324 = 0.0f; \n            v__29260 = v_tmp_29324; \n            int v_index_29325 = v__29249[(v_l_id_29243 + (256 * v_MWidthC_1 * v_w_id_29242) + (v_MWidthC_1 * v_i_29244))]; \n            if (v_index_29325 < 0) {\n              v__29262_0 = v__29260; \n            } else {\n              if (v_index_29325 >= v_VLength_3) {\n                v__29262_0 = v__29260; \n              } else {\n                v__29262_0 = v__29251[v_index_29325]; \n              }\n            }\n            v__29264_0 = mult(v__29262_0, v__29250[(v_l_id_29243 + (256 * v_MWidthC_1 * v_w_id_29242) + (v_MWidthC_1 * v_i_29244))]); \n            v__29258 = add(v__29264_0, v__29258); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_29245 = 0; \n            v__29267[v_l_id_29243] = id(v__29258); \n          }\n          /* end map_seq */\n          v_l_id_29243 = atomic_inc(&(v_work_idx_1904)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1899; \n        v_work_idx_1899 = 0; \n        int v_l_id_29246 = atomic_inc(&(v_work_idx_1899)); \n        while((v_l_id_29246 < 1)){\n          float v_tmp_29328 = 0.0f; \n          v__9384 = v_tmp_29328; \n          /* reduce_seq */\n          for (int v_i_29247 = 0; v_i_29247 < v_MWidthC_1; v_i_29247 = (1 + v_i_29247)) {\n            v__9384 = add(v__9384, v__29267[(v_i_29247 + (v_MWidthC_1 * v_l_id_29246))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_29248 = 0; \n            v__29272[v_w_id_29242] = doubleMultiplyAdd(v__9384, v__29253, v__29252[v_w_id_29242], v__29254); \n          }\n          /* end map_seq */\n          v_l_id_29246 = atomic_inc(&(v_work_idx_1899)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_29242 = atomic_inc(v_work_idx_1906); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__29249",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29250",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29251",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29252",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29253",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29254",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29256",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29272",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29267",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}