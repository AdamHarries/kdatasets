{
  "name" : "swrg-alcl-edp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__15681, const global float* restrict v__15682, const global float* restrict v__15683, const global float* restrict v__15684, float v__15685, float v__15686, global float* v__15700, global float* v__15699, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15688; \n  float v__15691; \n  /* Private Memory */\n  float v__15693_0;\n  \n  float v__15695_0;\n  \n  for (int v_wg_id_15676 = get_group_id(0); v_wg_id_15676 < ((v_MHeight_2)/(8)); v_wg_id_15676 = (v_wg_id_15676 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_165; \n      v_work_idx_165 = 0; \n      int v_l_id_15677 = atomic_inc(&(v_work_idx_165)); \n      while((v_l_id_15677 < 8)){\n        float v_tmp_15733 = 0.0f; \n        v__15688 = v_tmp_15733; \n        /* reduce_seq */\n        int v_stop_15734 = min(v__15681[(1 + (v__15681[(v_l_id_15677 + (8 * v_wg_id_15676))] / 4))], ((global int*)(v__15682 + (((global int*)(v__15682))[(v_l_id_15677 + (8 * v_wg_id_15676))] / 4)))[1]); \n        for (int v_i_15678 = 0; v_i_15678 < v_stop_15734; v_i_15678 = (1 + v_i_15678)) {\n          float v_tmp_15742 = 0.0f; \n          v__15691 = v_tmp_15742; \n          int v_index_15744 = v__15681[(2 + v_i_15678 + (v__15681[(v_l_id_15677 + (8 * v_wg_id_15676))] / 4))]; \n          if (v_index_15744 < 0) {\n            v__15693_0 = v__15691; \n          } else {\n            if (v_index_15744 >= v_MWidthC_1) {\n              v__15693_0 = v__15691; \n            } else {\n              v__15693_0 = v__15683[v_index_15744]; \n            }\n          }\n          v__15695_0 = mult(v__15682[(2 + v_i_15678 + (((global int*)(v__15682))[(v_l_id_15677 + (8 * v_wg_id_15676))] / 4))], v__15693_0); \n          v__15688 = add(v__15688, v__15695_0); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15679 = 0; \n          v__15699[(v_l_id_15677 + (8 * v_wg_id_15676))] = doubleMultiplyAdd(v__15688, v__15685, v__15684[(v_l_id_15677 + (8 * v_wg_id_15676))], v__15686); \n        }\n        /* end map_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_15680 = 0; \n          v__15700[(v_l_id_15677 + (8 * v_wg_id_15676))] = id(v__15699[(v_l_id_15677 + (8 * v_wg_id_15676))]); \n        }\n        /* end map_seq */\n        v_l_id_15677 = atomic_inc(&(v_work_idx_165)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "arrayType" : "ragged",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__15681",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__15682",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__15683",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__15684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15685",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15686",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15699",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__15700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}