{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28116, const global float* restrict v__28117, const global float* restrict v__28118, const global float* restrict v__28119, float v__28120, float v__28121, global float* v__28139, global int* v__28123, local float* v__28134, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28125; \n  float v__28127; \n  float v__9384; \n  /* Private Memory */\n  float v__28129_0;\n  \n  float v__28131_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1790 = v__28123; \n    local int v_w_id_28109; \n    if (get_local_id(0) == 0) {\n      v_w_id_28109 = atomic_inc(v_work_idx_1790); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28109 < v_MHeight_2)){\n      for (int v_l_id_28110 = get_local_id(0); v_l_id_28110 < v_MWidthC_1; v_l_id_28110 = (v_l_id_28110 + get_local_size(0))) {\n        float v_tmp_28202 = 0.0f; \n        v__28125 = v_tmp_28202; \n        /* reduce_seq */\n        for (int v_i_28111 = 0; v_i_28111 < 256; v_i_28111 = (1 + v_i_28111)) {\n          float v_tmp_28203 = 0.0f; \n          v__28127 = v_tmp_28203; \n          int v_index_28204 = v__28116[(v_l_id_28110 + (256 * v_MWidthC_1 * v_w_id_28109) + (v_MWidthC_1 * v_i_28111))]; \n          if (v_index_28204 < 0) {\n            v__28129_0 = v__28127; \n          } else {\n            if (v_index_28204 >= v_VLength_3) {\n              v__28129_0 = v__28127; \n            } else {\n              v__28129_0 = v__28118[v_index_28204]; \n            }\n          }\n          v__28131_0 = mult(v__28129_0, v__28117[(v_l_id_28110 + (256 * v_MWidthC_1 * v_w_id_28109) + (v_MWidthC_1 * v_i_28111))]); \n          v__28125 = add(v__28131_0, v__28125); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28112 = 0; \n          v__28134[v_l_id_28110] = id(v__28125); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_28113 = get_local_id(0); \n        float v_tmp_28207 = 0.0f; \n        v__9384 = v_tmp_28207; \n        /* reduce_seq */\n        for (int v_i_28114 = 0; v_i_28114 < v_MWidthC_1; v_i_28114 = (1 + v_i_28114)) {\n          v__9384 = add(v__9384, v__28134[(v_i_28114 + (v_MWidthC_1 * v_l_id_28113))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28115 = 0; \n          v__28139[v_w_id_28109] = doubleMultiplyAdd(v__9384, v__28120, v__28119[v_w_id_28109], v__28121); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28109 = atomic_inc(v_work_idx_1790); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28116",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28117",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28118",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28119",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28120",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28121",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28123",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28139",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28134",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}