{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20379, const global float* restrict v__20380, const global float* restrict v__20381, const global float* restrict v__20382, float v__20383, float v__20384, global float* v__20397, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20387; \n  float v__20389; \n  /* Private Memory */\n  float v__20391_0;\n  \n  float v__20393_0;\n  \n  for (int v_wg_id_20375 = get_group_id(0); v_wg_id_20375 < ((v_MHeight_2)/(64)); v_wg_id_20375 = (v_wg_id_20375 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1062; \n      v_work_idx_1062 = 0; \n      int v_l_id_20376 = atomic_inc(&(v_work_idx_1062)); \n      while((v_l_id_20376 < 64)){\n        float v_tmp_20435 = 0.0f; \n        v__20387 = v_tmp_20435; \n        /* reduce_seq */\n        for (int v_i_20377 = 0; v_i_20377 < v_MWidthC_1; v_i_20377 = (1 + v_i_20377)) {\n          float v_tmp_20436 = 0.0f; \n          v__20389 = v_tmp_20436; \n          int v_index_20437 = v__20379[(v_i_20377 + (64 * v_MWidthC_1 * v_wg_id_20375) + (v_MWidthC_1 * v_l_id_20376))]; \n          if (v_index_20437 < 0) {\n            v__20391_0 = v__20389; \n          } else {\n            if (v_index_20437 >= v_VLength_3) {\n              v__20391_0 = v__20389; \n            } else {\n              v__20391_0 = v__20381[v_index_20437]; \n            }\n          }\n          v__20393_0 = mult(v__20391_0, v__20380[(v_i_20377 + (64 * v_MWidthC_1 * v_wg_id_20375) + (v_MWidthC_1 * v_l_id_20376))]); \n          v__20387 = add(v__20393_0, v__20387); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20378 = 0; \n          v__20397[(v_l_id_20376 + (64 * v_wg_id_20375))] = doubleMultiplyAdd(v__20387, v__20383, v__20382[(v_l_id_20376 + (64 * v_wg_id_20375))], v__20384); \n        }\n        /* end map_seq */\n        v_l_id_20376 = atomic_inc(&(v_work_idx_1062)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__20379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20381",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20383",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20384",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}