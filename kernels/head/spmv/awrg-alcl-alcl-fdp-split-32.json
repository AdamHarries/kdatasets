{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19253, const global float* restrict v__19254, const global float* restrict v__19255, const global float* restrict v__19256, float v__19257, float v__19258, global float* v__19276, global int* v__19260, local float* v__19271, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19262; \n  float v__19264; \n  float v__9384; \n  /* Private Memory */\n  float v__19266_0;\n  \n  float v__19268_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_970 = v__19260; \n    local int v_w_id_19246; \n    if (get_local_id(0) == 0) {\n      v_w_id_19246 = atomic_inc(v_work_idx_970); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19246 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_968; \n        v_work_idx_968 = 0; \n        int v_l_id_19247 = atomic_inc(&(v_work_idx_968)); \n        while((v_l_id_19247 < v_MWidthC_1)){\n          float v_tmp_19327 = 0.0f; \n          v__19262 = v_tmp_19327; \n          /* reduce_seq */\n          for (int v_i_19248 = 0; v_i_19248 < 32; v_i_19248 = (1 + v_i_19248)) {\n            float v_tmp_19328 = 0.0f; \n            v__19264 = v_tmp_19328; \n            int v_index_19329 = v__19253[(v_l_id_19247 + (32 * v_MWidthC_1 * v_w_id_19246) + (v_MWidthC_1 * v_i_19248))]; \n            if (v_index_19329 < 0) {\n              v__19266_0 = v__19264; \n            } else {\n              if (v_index_19329 >= v_VLength_3) {\n                v__19266_0 = v__19264; \n              } else {\n                v__19266_0 = v__19255[v_index_19329]; \n              }\n            }\n            v__19268_0 = mult(v__19266_0, v__19254[(v_l_id_19247 + (32 * v_MWidthC_1 * v_w_id_19246) + (v_MWidthC_1 * v_i_19248))]); \n            v__19262 = add(v__19268_0, v__19262); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19249 = 0; \n            v__19271[v_l_id_19247] = id(v__19262); \n          }\n          /* end map_seq */\n          v_l_id_19247 = atomic_inc(&(v_work_idx_968)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_963; \n        v_work_idx_963 = 0; \n        int v_l_id_19250 = atomic_inc(&(v_work_idx_963)); \n        while((v_l_id_19250 < 1)){\n          float v_tmp_19332 = 0.0f; \n          v__9384 = v_tmp_19332; \n          /* reduce_seq */\n          for (int v_i_19251 = 0; v_i_19251 < v_MWidthC_1; v_i_19251 = (1 + v_i_19251)) {\n            v__9384 = add(v__9384, v__19271[(v_i_19251 + (v_MWidthC_1 * v_l_id_19250))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19252 = 0; \n            v__19276[v_w_id_19246] = doubleMultiplyAdd(v__9384, v__19257, v__19256[v_w_id_19246], v__19258); \n          }\n          /* end map_seq */\n          v_l_id_19250 = atomic_inc(&(v_work_idx_963)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19246 = atomic_inc(v_work_idx_970); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__19253",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19254",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19255",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19257",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19258",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19260",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19276",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19271",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}