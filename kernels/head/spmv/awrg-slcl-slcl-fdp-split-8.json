{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11456, const global float* restrict v__11457, const global float* restrict v__11458, const global float* restrict v__11459, float v__11460, float v__11461, global float* v__11479, global int* v__11463, local float* v__11474, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11465; \n  float v__11467; \n  float v__9384; \n  /* Private Memory */\n  float v__11469_0;\n  \n  float v__11471_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_230 = v__11463; \n    local int v_w_id_11449; \n    if (get_local_id(0) == 0) {\n      v_w_id_11449 = atomic_inc(v_work_idx_230); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_11449 < v_MHeight_2)){\n      for (int v_l_id_11450 = get_local_id(0); v_l_id_11450 < v_MWidthC_1; v_l_id_11450 = (v_l_id_11450 + get_local_size(0))) {\n        float v_tmp_11542 = 0.0f; \n        v__11465 = v_tmp_11542; \n        /* reduce_seq */\n        for (int v_i_11451 = 0; v_i_11451 < 8; v_i_11451 = (1 + v_i_11451)) {\n          float v_tmp_11543 = 0.0f; \n          v__11467 = v_tmp_11543; \n          int v_index_11544 = v__11456[(v_l_id_11450 + (8 * v_MWidthC_1 * v_w_id_11449) + (v_MWidthC_1 * v_i_11451))]; \n          if (v_index_11544 < 0) {\n            v__11469_0 = v__11467; \n          } else {\n            if (v_index_11544 >= v_VLength_3) {\n              v__11469_0 = v__11467; \n            } else {\n              v__11469_0 = v__11458[v_index_11544]; \n            }\n          }\n          v__11471_0 = mult(v__11469_0, v__11457[(v_l_id_11450 + (8 * v_MWidthC_1 * v_w_id_11449) + (v_MWidthC_1 * v_i_11451))]); \n          v__11465 = add(v__11471_0, v__11465); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11452 = 0; \n          v__11474[v_l_id_11450] = id(v__11465); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_11453 = get_local_id(0); \n        float v_tmp_11547 = 0.0f; \n        v__9384 = v_tmp_11547; \n        /* reduce_seq */\n        for (int v_i_11454 = 0; v_i_11454 < v_MWidthC_1; v_i_11454 = (1 + v_i_11454)) {\n          v__9384 = add(v__9384, v__11474[(v_i_11454 + (v_MWidthC_1 * v_l_id_11453))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11455 = 0; \n          v__11479[v_w_id_11449] = doubleMultiplyAdd(v__9384, v__11460, v__11459[v_w_id_11449], v__11461); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_11449 = atomic_inc(v_work_idx_230); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__11456",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11457",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11458",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11460",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11461",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11463",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__11479",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11474",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}