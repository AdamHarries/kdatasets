{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28332, const global float* restrict v__28333, const global float* restrict v__28334, const global float* restrict v__28335, float v__28336, float v__28337, global float* v__28355, global float* v__28345, global int* v__28339, local float* v__28350, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28341; \n  float v__28346; \n  float v__9384; \n  /* Private Memory */\n  float v__28343_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1810 = v__28339; \n    local int v_w_id_28324; \n    if (get_local_id(0) == 0) {\n      v_w_id_28324 = atomic_inc(v_work_idx_1810); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28324 < v_MHeight_2)){\n      for (int v_l_id_28325 = get_local_id(0); v_l_id_28325 < v_MWidthC_1; v_l_id_28325 = (v_l_id_28325 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_28326 = 0; v_i_28326 < 256; v_i_28326 = (1 + v_i_28326)) {\n          float v_tmp_28414 = 0.0f; \n          v__28341 = v_tmp_28414; \n          int v_index_28415 = v__28332[(v_l_id_28325 + (256 * v_MWidthC_1 * v_w_id_28324) + (v_MWidthC_1 * v_i_28326))]; \n          if (v_index_28415 < 0) {\n            v__28343_0 = v__28341; \n          } else {\n            if (v_index_28415 >= v_VLength_3) {\n              v__28343_0 = v__28341; \n            } else {\n              v__28343_0 = v__28334[v_index_28415]; \n            }\n          }\n          v__28345[(255 + (256 * v_MWidthC_1 * v_w_id_28324) + (-1 * v_i_28326) + (256 * v_l_id_28325))] = mult(v__28343_0, v__28333[(v_l_id_28325 + (256 * v_MWidthC_1 * v_w_id_28324) + (v_MWidthC_1 * v_i_28326))]); \n        }\n        /* end map_seq */\n        float v_tmp_28416 = 0.0f; \n        v__28346 = v_tmp_28416; \n        /* reduce_seq */\n        for (int v_i_28327 = 0; v_i_28327 < 256; v_i_28327 = (1 + v_i_28327)) {\n          v__28346 = add(v__28346, v__28345[(v_i_28327 + (256 * v_MWidthC_1 * v_w_id_28324) + (256 * v_l_id_28325))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28328 = 0; \n          v__28350[v_l_id_28325] = id(v__28346); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1803; \n        v_work_idx_1803 = 0; \n        int v_l_id_28329 = atomic_inc(&(v_work_idx_1803)); \n        while((v_l_id_28329 < 1)){\n          float v_tmp_28419 = 0.0f; \n          v__9384 = v_tmp_28419; \n          /* reduce_seq */\n          for (int v_i_28330 = 0; v_i_28330 < v_MWidthC_1; v_i_28330 = (1 + v_i_28330)) {\n            v__9384 = add(v__9384, v__28350[(v_i_28330 + (v_MWidthC_1 * v_l_id_28329))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28331 = 0; \n            v__28355[v_w_id_28324] = doubleMultiplyAdd(v__9384, v__28336, v__28335[v_w_id_28324], v__28337); \n          }\n          /* end map_seq */\n          v_l_id_28329 = atomic_inc(&(v_work_idx_1803)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28324 = atomic_inc(v_work_idx_1810); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28332",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28333",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28334",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28335",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28336",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28337",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28345",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28339",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28355",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28350",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}