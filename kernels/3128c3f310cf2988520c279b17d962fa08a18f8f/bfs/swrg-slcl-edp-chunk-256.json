{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50099, const global int* restrict v__50100, const global int* restrict v__50101, const global int* restrict v__50102, int v__50103, int v__50104, global int* v__50119, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50106; \n  int v__50109; \n  /* Private Memory */\n  int v__50111_0;\n  \n  int v__50113_0;\n  \n  int v__50117_0;\n  \n  for (int v_wg_id_50095 = get_group_id(0); v_wg_id_50095 < ((v_MHeight_2)/(256)); v_wg_id_50095 = (v_wg_id_50095 + get_num_groups(0))) {\n    for (int v_l_id_50096 = get_local_id(0); v_l_id_50096 < 256; v_l_id_50096 = (v_l_id_50096 + get_local_size(0))) {\n      int v_tmp_50167 = 0; \n      v__50106 = v_tmp_50167; \n      /* reduce_while_seq */\n      for (int v_i_50097 = 0; v_i_50097 < v_MWidthC_1; v_i_50097 = (1 + v_i_50097)) {\n        v__50117_0 = check(v__50106, v__50099[(v_i_50097 + (256 * v_MWidthC_1 * v_wg_id_50095) + (v_MWidthC_1 * v_l_id_50096))]); \n        if (v__50117_0) {\n        } else {\n          break;\n        }\n        int v_tmp_50168 = 0; \n        v__50109 = v_tmp_50168; \n        int v_index_50169 = v__50099[(v_i_50097 + (256 * v_MWidthC_1 * v_wg_id_50095) + (v_MWidthC_1 * v_l_id_50096))]; \n        if (v_index_50169 < 0) {\n          v__50111_0 = v__50109; \n        } else {\n          if (v_index_50169 >= v_VLength_3) {\n            v__50111_0 = v__50109; \n          } else {\n            v__50111_0 = v__50101[v_index_50169]; \n          }\n        }\n        v__50113_0 = bool_and(v__50111_0, v__50100[(v_i_50097 + (256 * v_MWidthC_1 * v_wg_id_50095) + (v_MWidthC_1 * v_l_id_50096))]); \n        v__50106 = bool_or(v__50113_0, v__50106); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_50098 = 0; \n        v__50119[(v_l_id_50096 + (256 * v_wg_id_50095))] = doubleAndOr(v__50106, v__50103, v__50102[(v_l_id_50096 + (256 * v_wg_id_50095))], v__50104); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__50099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__50119",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}