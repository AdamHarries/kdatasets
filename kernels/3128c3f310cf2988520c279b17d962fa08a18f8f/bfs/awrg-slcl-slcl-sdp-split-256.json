{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51856, const global int* restrict v__51857, const global int* restrict v__51858, const global int* restrict v__51859, int v__51860, int v__51861, global int* v__51879, global int* v__51869, global int* v__51863, local int* v__51874, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51865; \n  int v__51870; \n  int v__33541; \n  /* Private Memory */\n  int v__51867_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4008 = v__51863; \n    local int v_w_id_51848; \n    if (get_local_id(0) == 0) {\n      v_w_id_51848 = atomic_inc(v_work_idx_4008); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_51848 < v_MHeight_2)){\n      for (int v_l_id_51849 = get_local_id(0); v_l_id_51849 < v_MWidthC_1; v_l_id_51849 = (v_l_id_51849 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_51850 = 0; v_i_51850 < 256; v_i_51850 = (1 + v_i_51850)) {\n          int v_tmp_51942 = 0; \n          v__51865 = v_tmp_51942; \n          int v_index_51943 = v__51856[(v_l_id_51849 + (256 * v_MWidthC_1 * v_w_id_51848) + (v_MWidthC_1 * v_i_51850))]; \n          if (v_index_51943 < 0) {\n            v__51867_0 = v__51865; \n          } else {\n            if (v_index_51943 >= v_VLength_3) {\n              v__51867_0 = v__51865; \n            } else {\n              v__51867_0 = v__51858[v_index_51943]; \n            }\n          }\n          v__51869[(255 + (256 * v_MWidthC_1 * v_w_id_51848) + (-1 * v_i_51850) + (256 * v_l_id_51849))] = bool_and(v__51867_0, v__51857[(v_l_id_51849 + (256 * v_MWidthC_1 * v_w_id_51848) + (v_MWidthC_1 * v_i_51850))]); \n        }\n        /* end map_seq */\n        int v_tmp_51944 = 0; \n        v__51870 = v_tmp_51944; \n        /* reduce_seq */\n        for (int v_i_51851 = 0; v_i_51851 < 256; v_i_51851 = (1 + v_i_51851)) {\n          v__51870 = bool_or(v__51870, v__51869[(v_i_51851 + (256 * v_MWidthC_1 * v_w_id_51848) + (256 * v_l_id_51849))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51852 = 0; \n          v__51874[v_l_id_51849] = id(v__51870); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_51853 = get_local_id(0); \n        int v_tmp_51947 = 0; \n        v__33541 = v_tmp_51947; \n        /* reduce_seq */\n        for (int v_i_51854 = 0; v_i_51854 < v_MWidthC_1; v_i_51854 = (1 + v_i_51854)) {\n          v__33541 = bool_or(v__33541, v__51874[(v_i_51854 + (v_MWidthC_1 * v_l_id_51853))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51855 = 0; \n          v__51879[v_w_id_51848] = doubleAndOr(v__33541, v__51860, v__51859[v_w_id_51848], v__51861); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_51848 = atomic_inc(v_work_idx_4008); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__51856",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51857",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51858",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51859",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51860",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51861",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__51869",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51863",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__51879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51874",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}