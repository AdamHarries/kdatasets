{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39155, const global int* restrict v__39156, const global int* restrict v__39157, const global int* restrict v__39158, int v__39159, int v__39160, global int* v__39174, global int* v__39168, global int* v__39162, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39164; \n  int v__39169; \n  /* Private Memory */\n  int v__39166_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2817 = v__39162; \n    local int v_w_id_39150; \n    if (get_local_id(0) == 0) {\n      v_w_id_39150 = atomic_inc(v_work_idx_2817); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39150 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2815; \n        v_work_idx_2815 = 0; \n        int v_l_id_39151 = atomic_inc(&(v_work_idx_2815)); \n        while((v_l_id_39151 < 16)){\n          /* map_seq */\n          for (int v_i_39152 = 0; v_i_39152 < v_MWidthC_1; v_i_39152 = (1 + v_i_39152)) {\n            int v_tmp_39213 = 0; \n            v__39164 = v_tmp_39213; \n            int v_index_39214 = v__39155[(v_i_39152 + (16 * v_MWidthC_1 * v_w_id_39150) + (v_MWidthC_1 * v_l_id_39151))]; \n            if (v_index_39214 < 0) {\n              v__39166_0 = v__39164; \n            } else {\n              if (v_index_39214 >= v_VLength_3) {\n                v__39166_0 = v__39164; \n              } else {\n                v__39166_0 = v__39157[v_index_39214]; \n              }\n            }\n            v__39168[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_39150) + (-1 * v_i_39152) + (v_MWidthC_1 * v_l_id_39151))] = bool_and(v__39166_0, v__39156[(v_i_39152 + (16 * v_MWidthC_1 * v_w_id_39150) + (v_MWidthC_1 * v_l_id_39151))]); \n          }\n          /* end map_seq */\n          int v_tmp_39215 = 0; \n          v__39169 = v_tmp_39215; \n          /* reduce_seq */\n          for (int v_i_39153 = 0; v_i_39153 < v_MWidthC_1; v_i_39153 = (1 + v_i_39153)) {\n            v__39169 = bool_or(v__39169, v__39168[(v_i_39153 + (16 * v_MWidthC_1 * v_w_id_39150) + (v_MWidthC_1 * v_l_id_39151))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39154 = 0; \n            v__39174[(v_l_id_39151 + (16 * v_w_id_39150))] = doubleAndOr(v__39169, v__39159, v__39158[(v_l_id_39151 + (16 * v_w_id_39150))], v__39160); \n          }\n          /* end map_seq */\n          v_l_id_39151 = atomic_inc(&(v_work_idx_2815)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39150 = atomic_inc(v_work_idx_2817); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39155",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39157",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39159",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39160",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39162",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39174",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}