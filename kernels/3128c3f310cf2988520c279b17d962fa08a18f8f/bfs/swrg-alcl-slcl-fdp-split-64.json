{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44472, const global int* restrict v__44473, const global int* restrict v__44474, const global int* restrict v__44475, int v__44476, int v__44477, global int* v__44494, local int* v__44489, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44480; \n  int v__44482; \n  int v__33541; \n  /* Private Memory */\n  int v__44484_0;\n  \n  int v__44486_0;\n  \n  for (int v_wg_id_44465 = get_group_id(0); v_wg_id_44465 < v_MHeight_2; v_wg_id_44465 = (v_wg_id_44465 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3314; \n      v_work_idx_3314 = 0; \n      int v_l_id_44466 = atomic_inc(&(v_work_idx_3314)); \n      while((v_l_id_44466 < v_MWidthC_1)){\n        int v_tmp_44551 = 0; \n        v__44480 = v_tmp_44551; \n        /* reduce_seq */\n        for (int v_i_44467 = 0; v_i_44467 < 64; v_i_44467 = (1 + v_i_44467)) {\n          int v_tmp_44552 = 0; \n          v__44482 = v_tmp_44552; \n          int v_index_44553 = v__44472[(v_l_id_44466 + (64 * v_MWidthC_1 * v_wg_id_44465) + (v_MWidthC_1 * v_i_44467))]; \n          if (v_index_44553 < 0) {\n            v__44484_0 = v__44482; \n          } else {\n            if (v_index_44553 >= v_VLength_3) {\n              v__44484_0 = v__44482; \n            } else {\n              v__44484_0 = v__44474[v_index_44553]; \n            }\n          }\n          v__44486_0 = bool_and(v__44484_0, v__44473[(v_l_id_44466 + (64 * v_MWidthC_1 * v_wg_id_44465) + (v_MWidthC_1 * v_i_44467))]); \n          v__44480 = bool_or(v__44486_0, v__44480); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44468 = 0; \n          v__44489[v_l_id_44466] = id(v__44480); \n        }\n        /* end map_seq */\n        v_l_id_44466 = atomic_inc(&(v_work_idx_3314)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_44469 = get_local_id(0); \n      int v_tmp_44556 = 0; \n      v__33541 = v_tmp_44556; \n      /* reduce_seq */\n      for (int v_i_44470 = 0; v_i_44470 < v_MWidthC_1; v_i_44470 = (1 + v_i_44470)) {\n        v__33541 = bool_or(v__33541, v__44489[(v_i_44470 + (v_MWidthC_1 * v_l_id_44469))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_44471 = 0; \n        v__44494[v_wg_id_44465] = doubleAndOr(v__33541, v__44476, v__44475[v_wg_id_44465], v__44477); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__44472",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44473",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44474",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44475",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44476",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44477",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__44494",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44489",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}