{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36341, const global int* restrict v__36342, const global int* restrict v__36343, const global int* restrict v__36344, int v__36345, int v__36346, global int* v__36364, global int* v__36354, global int* v__36348, local int* v__36359, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36350; \n  int v__36355; \n  int v__33541; \n  /* Private Memory */\n  int v__36352_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2562 = v__36348; \n    local int v_w_id_36333; \n    if (get_local_id(0) == 0) {\n      v_w_id_36333 = atomic_inc(v_work_idx_2562); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_36333 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2560; \n        v_work_idx_2560 = 0; \n        int v_l_id_36334 = atomic_inc(&(v_work_idx_2560)); \n        while((v_l_id_36334 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_36335 = 0; v_i_36335 < 8; v_i_36335 = (1 + v_i_36335)) {\n            int v_tmp_36415 = 0; \n            v__36350 = v_tmp_36415; \n            int v_index_36416 = v__36341[(v_l_id_36334 + (8 * v_MWidthC_1 * v_w_id_36333) + (v_MWidthC_1 * v_i_36335))]; \n            if (v_index_36416 < 0) {\n              v__36352_0 = v__36350; \n            } else {\n              if (v_index_36416 >= v_VLength_3) {\n                v__36352_0 = v__36350; \n              } else {\n                v__36352_0 = v__36343[v_index_36416]; \n              }\n            }\n            v__36354[(7 + (8 * v_MWidthC_1 * v_w_id_36333) + (-1 * v_i_36335) + (8 * v_l_id_36334))] = bool_and(v__36352_0, v__36342[(v_l_id_36334 + (8 * v_MWidthC_1 * v_w_id_36333) + (v_MWidthC_1 * v_i_36335))]); \n          }\n          /* end map_seq */\n          int v_tmp_36417 = 0; \n          v__36355 = v_tmp_36417; \n          /* reduce_seq */\n          for (int v_i_36336 = 0; v_i_36336 < 8; v_i_36336 = (1 + v_i_36336)) {\n            v__36355 = bool_or(v__36355, v__36354[(v_i_36336 + (8 * v_MWidthC_1 * v_w_id_36333) + (8 * v_l_id_36334))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36337 = 0; \n            v__36359[v_l_id_36334] = id(v__36355); \n          }\n          /* end map_seq */\n          v_l_id_36334 = atomic_inc(&(v_work_idx_2560)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2554; \n        v_work_idx_2554 = 0; \n        int v_l_id_36338 = atomic_inc(&(v_work_idx_2554)); \n        while((v_l_id_36338 < 1)){\n          int v_tmp_36420 = 0; \n          v__33541 = v_tmp_36420; \n          /* reduce_seq */\n          for (int v_i_36339 = 0; v_i_36339 < v_MWidthC_1; v_i_36339 = (1 + v_i_36339)) {\n            v__33541 = bool_or(v__33541, v__36359[(v_i_36339 + (v_MWidthC_1 * v_l_id_36338))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36340 = 0; \n            v__36364[v_w_id_36333] = doubleAndOr(v__33541, v__36345, v__36344[v_w_id_36333], v__36346); \n          }\n          /* end map_seq */\n          v_l_id_36338 = atomic_inc(&(v_work_idx_2554)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_36333 = atomic_inc(v_work_idx_2562); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__36341",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36342",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36343",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36345",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36346",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36354",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36348",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__36364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36359",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}