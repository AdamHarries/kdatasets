{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51432, const global int* restrict v__51433, const global int* restrict v__51434, const global int* restrict v__51435, int v__51436, int v__51437, global int* v__51454, local int* v__51449, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51440; \n  int v__51442; \n  int v__33541; \n  /* Private Memory */\n  int v__51444_0;\n  \n  int v__51446_0;\n  \n  for (int v_wg_id_51425 = get_group_id(0); v_wg_id_51425 < v_MHeight_2; v_wg_id_51425 = (v_wg_id_51425 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3968; \n      v_work_idx_3968 = 0; \n      int v_l_id_51426 = atomic_inc(&(v_work_idx_3968)); \n      while((v_l_id_51426 < v_MWidthC_1)){\n        int v_tmp_51507 = 0; \n        v__51440 = v_tmp_51507; \n        /* reduce_seq */\n        for (int v_i_51427 = 0; v_i_51427 < 256; v_i_51427 = (1 + v_i_51427)) {\n          int v_tmp_51508 = 0; \n          v__51442 = v_tmp_51508; \n          int v_index_51509 = v__51432[(v_l_id_51426 + (256 * v_MWidthC_1 * v_wg_id_51425) + (v_MWidthC_1 * v_i_51427))]; \n          if (v_index_51509 < 0) {\n            v__51444_0 = v__51442; \n          } else {\n            if (v_index_51509 >= v_VLength_3) {\n              v__51444_0 = v__51442; \n            } else {\n              v__51444_0 = v__51434[v_index_51509]; \n            }\n          }\n          v__51446_0 = bool_and(v__51444_0, v__51433[(v_l_id_51426 + (256 * v_MWidthC_1 * v_wg_id_51425) + (v_MWidthC_1 * v_i_51427))]); \n          v__51440 = bool_or(v__51446_0, v__51440); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51428 = 0; \n          v__51449[v_l_id_51426] = id(v__51440); \n        }\n        /* end map_seq */\n        v_l_id_51426 = atomic_inc(&(v_work_idx_3968)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3963; \n      v_work_idx_3963 = 0; \n      int v_l_id_51429 = atomic_inc(&(v_work_idx_3963)); \n      while((v_l_id_51429 < 1)){\n        int v_tmp_51512 = 0; \n        v__33541 = v_tmp_51512; \n        /* reduce_seq */\n        for (int v_i_51430 = 0; v_i_51430 < v_MWidthC_1; v_i_51430 = (1 + v_i_51430)) {\n          v__33541 = bool_or(v__33541, v__51449[(v_i_51430 + (v_MWidthC_1 * v_l_id_51429))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51431 = 0; \n          v__51454[v_wg_id_51425] = doubleAndOr(v__33541, v__51436, v__51435[v_wg_id_51425], v__51437); \n        }\n        /* end map_seq */\n        v_l_id_51429 = atomic_inc(&(v_work_idx_3963)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__51432",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51433",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51434",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51435",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51436",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51437",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__51454",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51449",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}