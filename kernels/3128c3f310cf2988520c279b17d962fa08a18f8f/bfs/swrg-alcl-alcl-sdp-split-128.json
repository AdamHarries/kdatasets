{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48006, const global int* restrict v__48007, const global int* restrict v__48008, const global int* restrict v__48009, int v__48010, int v__48011, global int* v__48028, global int* v__48018, local int* v__48023, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48014; \n  int v__48019; \n  int v__33541; \n  /* Private Memory */\n  int v__48016_0;\n  \n  for (int v_wg_id_47998 = get_group_id(0); v_wg_id_47998 < v_MHeight_2; v_wg_id_47998 = (v_wg_id_47998 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3646; \n      v_work_idx_3646 = 0; \n      int v_l_id_47999 = atomic_inc(&(v_work_idx_3646)); \n      while((v_l_id_47999 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_48000 = 0; v_i_48000 < 128; v_i_48000 = (1 + v_i_48000)) {\n          int v_tmp_48081 = 0; \n          v__48014 = v_tmp_48081; \n          int v_index_48082 = v__48006[(v_l_id_47999 + (128 * v_MWidthC_1 * v_wg_id_47998) + (v_MWidthC_1 * v_i_48000))]; \n          if (v_index_48082 < 0) {\n            v__48016_0 = v__48014; \n          } else {\n            if (v_index_48082 >= v_VLength_3) {\n              v__48016_0 = v__48014; \n            } else {\n              v__48016_0 = v__48008[v_index_48082]; \n            }\n          }\n          v__48018[(127 + (128 * v_MWidthC_1 * v_wg_id_47998) + (-1 * v_i_48000) + (128 * v_l_id_47999))] = bool_and(v__48016_0, v__48007[(v_l_id_47999 + (128 * v_MWidthC_1 * v_wg_id_47998) + (v_MWidthC_1 * v_i_48000))]); \n        }\n        /* end map_seq */\n        int v_tmp_48083 = 0; \n        v__48019 = v_tmp_48083; \n        /* reduce_seq */\n        for (int v_i_48001 = 0; v_i_48001 < 128; v_i_48001 = (1 + v_i_48001)) {\n          v__48019 = bool_or(v__48019, v__48018[(v_i_48001 + (128 * v_MWidthC_1 * v_wg_id_47998) + (128 * v_l_id_47999))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48002 = 0; \n          v__48023[v_l_id_47999] = id(v__48019); \n        }\n        /* end map_seq */\n        v_l_id_47999 = atomic_inc(&(v_work_idx_3646)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3640; \n      v_work_idx_3640 = 0; \n      int v_l_id_48003 = atomic_inc(&(v_work_idx_3640)); \n      while((v_l_id_48003 < 1)){\n        int v_tmp_48086 = 0; \n        v__33541 = v_tmp_48086; \n        /* reduce_seq */\n        for (int v_i_48004 = 0; v_i_48004 < v_MWidthC_1; v_i_48004 = (1 + v_i_48004)) {\n          v__33541 = bool_or(v__33541, v__48023[(v_i_48004 + (v_MWidthC_1 * v_l_id_48003))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48005 = 0; \n          v__48028[v_wg_id_47998] = doubleAndOr(v__33541, v__48010, v__48009[v_wg_id_47998], v__48011); \n        }\n        /* end map_seq */\n        v_l_id_48003 = atomic_inc(&(v_work_idx_3640)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48006",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48007",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48008",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48009",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48010",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48011",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48018",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__48028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48023",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}