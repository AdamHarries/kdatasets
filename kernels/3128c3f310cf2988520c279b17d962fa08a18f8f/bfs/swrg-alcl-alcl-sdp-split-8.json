{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34678, const global int* restrict v__34679, const global int* restrict v__34680, const global int* restrict v__34681, int v__34682, int v__34683, global int* v__34700, global int* v__34690, local int* v__34695, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34686; \n  int v__34691; \n  int v__33541; \n  /* Private Memory */\n  int v__34688_0;\n  \n  for (int v_wg_id_34670 = get_group_id(0); v_wg_id_34670 < v_MHeight_2; v_wg_id_34670 = (v_wg_id_34670 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2398; \n      v_work_idx_2398 = 0; \n      int v_l_id_34671 = atomic_inc(&(v_work_idx_2398)); \n      while((v_l_id_34671 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_34672 = 0; v_i_34672 < 8; v_i_34672 = (1 + v_i_34672)) {\n          int v_tmp_34753 = 0; \n          v__34686 = v_tmp_34753; \n          int v_index_34754 = v__34678[(v_l_id_34671 + (8 * v_MWidthC_1 * v_wg_id_34670) + (v_MWidthC_1 * v_i_34672))]; \n          if (v_index_34754 < 0) {\n            v__34688_0 = v__34686; \n          } else {\n            if (v_index_34754 >= v_VLength_3) {\n              v__34688_0 = v__34686; \n            } else {\n              v__34688_0 = v__34680[v_index_34754]; \n            }\n          }\n          v__34690[(7 + (8 * v_MWidthC_1 * v_wg_id_34670) + (-1 * v_i_34672) + (8 * v_l_id_34671))] = bool_and(v__34688_0, v__34679[(v_l_id_34671 + (8 * v_MWidthC_1 * v_wg_id_34670) + (v_MWidthC_1 * v_i_34672))]); \n        }\n        /* end map_seq */\n        int v_tmp_34755 = 0; \n        v__34691 = v_tmp_34755; \n        /* reduce_seq */\n        for (int v_i_34673 = 0; v_i_34673 < 8; v_i_34673 = (1 + v_i_34673)) {\n          v__34691 = bool_or(v__34691, v__34690[(v_i_34673 + (8 * v_MWidthC_1 * v_wg_id_34670) + (8 * v_l_id_34671))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34674 = 0; \n          v__34695[v_l_id_34671] = id(v__34691); \n        }\n        /* end map_seq */\n        v_l_id_34671 = atomic_inc(&(v_work_idx_2398)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2392; \n      v_work_idx_2392 = 0; \n      int v_l_id_34675 = atomic_inc(&(v_work_idx_2392)); \n      while((v_l_id_34675 < 1)){\n        int v_tmp_34758 = 0; \n        v__33541 = v_tmp_34758; \n        /* reduce_seq */\n        for (int v_i_34676 = 0; v_i_34676 < v_MWidthC_1; v_i_34676 = (1 + v_i_34676)) {\n          v__33541 = bool_or(v__33541, v__34695[(v_i_34676 + (v_MWidthC_1 * v_l_id_34675))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34677 = 0; \n          v__34700[v_wg_id_34670] = doubleAndOr(v__33541, v__34682, v__34681[v_wg_id_34670], v__34683); \n        }\n        /* end map_seq */\n        v_l_id_34675 = atomic_inc(&(v_work_idx_2392)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__34678",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34679",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34680",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34681",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34682",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34683",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__34690",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__34700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34695",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}