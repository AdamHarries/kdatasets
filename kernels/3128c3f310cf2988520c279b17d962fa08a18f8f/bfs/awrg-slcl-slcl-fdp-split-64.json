{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45297, const global int* restrict v__45298, const global int* restrict v__45299, const global int* restrict v__45300, int v__45301, int v__45302, global int* v__45320, global int* v__45304, local int* v__45315, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45306; \n  int v__45308; \n  int v__33541; \n  /* Private Memory */\n  int v__45310_0;\n  \n  int v__45312_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3393 = v__45304; \n    local int v_w_id_45290; \n    if (get_local_id(0) == 0) {\n      v_w_id_45290 = atomic_inc(v_work_idx_3393); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45290 < v_MHeight_2)){\n      for (int v_l_id_45291 = get_local_id(0); v_l_id_45291 < v_MWidthC_1; v_l_id_45291 = (v_l_id_45291 + get_local_size(0))) {\n        int v_tmp_45383 = 0; \n        v__45306 = v_tmp_45383; \n        /* reduce_seq */\n        for (int v_i_45292 = 0; v_i_45292 < 64; v_i_45292 = (1 + v_i_45292)) {\n          int v_tmp_45384 = 0; \n          v__45308 = v_tmp_45384; \n          int v_index_45385 = v__45297[(v_l_id_45291 + (64 * v_MWidthC_1 * v_w_id_45290) + (v_MWidthC_1 * v_i_45292))]; \n          if (v_index_45385 < 0) {\n            v__45310_0 = v__45308; \n          } else {\n            if (v_index_45385 >= v_VLength_3) {\n              v__45310_0 = v__45308; \n            } else {\n              v__45310_0 = v__45299[v_index_45385]; \n            }\n          }\n          v__45312_0 = bool_and(v__45310_0, v__45298[(v_l_id_45291 + (64 * v_MWidthC_1 * v_w_id_45290) + (v_MWidthC_1 * v_i_45292))]); \n          v__45306 = bool_or(v__45312_0, v__45306); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45293 = 0; \n          v__45315[v_l_id_45291] = id(v__45306); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45294 = get_local_id(0); \n        int v_tmp_45388 = 0; \n        v__33541 = v_tmp_45388; \n        /* reduce_seq */\n        for (int v_i_45295 = 0; v_i_45295 < v_MWidthC_1; v_i_45295 = (1 + v_i_45295)) {\n          v__33541 = bool_or(v__33541, v__45315[(v_i_45295 + (v_MWidthC_1 * v_l_id_45294))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45296 = 0; \n          v__45320[v_w_id_45290] = doubleAndOr(v__33541, v__45301, v__45300[v_w_id_45290], v__45302); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45290 = atomic_inc(v_work_idx_3393); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45297",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45298",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45299",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45300",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45301",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45302",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45304",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45320",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45315",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}