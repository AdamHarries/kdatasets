{
  "name" : "swrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37384, const global int* restrict v__37385, const global int* restrict v__37386, const global int* restrict v__37387, int v__37388, int v__37389, global int* v__37408, local int* v__37403, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37392; \n  int v__37394; \n  int v__33541; \n  /* Private Memory */\n  int v__37396_0;\n  \n  int v__37398_0;\n  \n  int v__37402_0;\n  \n  for (int v_wg_id_37377 = get_group_id(0); v_wg_id_37377 < v_MHeight_2; v_wg_id_37377 = (v_wg_id_37377 + get_num_groups(0))) {\n    for (int v_l_id_37378 = get_local_id(0); v_l_id_37378 < v_MWidthC_1; v_l_id_37378 = (v_l_id_37378 + get_local_size(0))) {\n      int v_tmp_37472 = 0; \n      v__37392 = v_tmp_37472; \n      /* reduce_while_seq */\n      for (int v_i_37379 = 0; v_i_37379 < 16; v_i_37379 = (1 + v_i_37379)) {\n        v__37402_0 = check(v__37392, v__37384[(v_l_id_37378 + (16 * v_MWidthC_1 * v_wg_id_37377) + (v_MWidthC_1 * v_i_37379))]); \n        if (v__37402_0) {\n        } else {\n          break;\n        }\n        int v_tmp_37473 = 0; \n        v__37394 = v_tmp_37473; \n        int v_index_37474 = v__37384[(v_l_id_37378 + (16 * v_MWidthC_1 * v_wg_id_37377) + (v_MWidthC_1 * v_i_37379))]; \n        if (v_index_37474 < 0) {\n          v__37396_0 = v__37394; \n        } else {\n          if (v_index_37474 >= v_VLength_3) {\n            v__37396_0 = v__37394; \n          } else {\n            v__37396_0 = v__37386[v_index_37474]; \n          }\n        }\n        v__37398_0 = bool_and(v__37396_0, v__37385[(v_l_id_37378 + (16 * v_MWidthC_1 * v_wg_id_37377) + (v_MWidthC_1 * v_i_37379))]); \n        v__37392 = bool_or(v__37398_0, v__37392); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37380 = 0; \n        v__37403[v_l_id_37378] = id(v__37392); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2648; \n      v_work_idx_2648 = 0; \n      int v_l_id_37381 = atomic_inc(&(v_work_idx_2648)); \n      while((v_l_id_37381 < 1)){\n        int v_tmp_37477 = 0; \n        v__33541 = v_tmp_37477; \n        /* reduce_seq */\n        for (int v_i_37382 = 0; v_i_37382 < v_MWidthC_1; v_i_37382 = (1 + v_i_37382)) {\n          v__33541 = bool_or(v__33541, v__37403[(v_i_37382 + (v_MWidthC_1 * v_l_id_37381))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37383 = 0; \n          v__37408[v_wg_id_37377] = doubleAndOr(v__33541, v__37388, v__37387[v_wg_id_37377], v__37389); \n        }\n        /* end map_seq */\n        v_l_id_37381 = atomic_inc(&(v_work_idx_2648)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__37384",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37385",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37386",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37387",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37388",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37389",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__37408",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37403",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}