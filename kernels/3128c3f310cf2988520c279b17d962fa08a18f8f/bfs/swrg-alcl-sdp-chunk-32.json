{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__40821, const global int* restrict v__40822, const global int* restrict v__40823, const global int* restrict v__40824, int v__40825, int v__40826, global int* v__40839, global int* v__40833, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__40829; \n  int v__40834; \n  /* Private Memory */\n  int v__40831_0;\n  \n  for (int v_wg_id_40816 = get_group_id(0); v_wg_id_40816 < ((v_MHeight_2)/(32)); v_wg_id_40816 = (v_wg_id_40816 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2971; \n      v_work_idx_2971 = 0; \n      int v_l_id_40817 = atomic_inc(&(v_work_idx_2971)); \n      while((v_l_id_40817 < 32)){\n        /* map_seq */\n        for (int v_i_40818 = 0; v_i_40818 < v_MWidthC_1; v_i_40818 = (1 + v_i_40818)) {\n          int v_tmp_40879 = 0; \n          v__40829 = v_tmp_40879; \n          int v_index_40880 = v__40821[(v_i_40818 + (32 * v_MWidthC_1 * v_wg_id_40816) + (v_MWidthC_1 * v_l_id_40817))]; \n          if (v_index_40880 < 0) {\n            v__40831_0 = v__40829; \n          } else {\n            if (v_index_40880 >= v_VLength_3) {\n              v__40831_0 = v__40829; \n            } else {\n              v__40831_0 = v__40823[v_index_40880]; \n            }\n          }\n          v__40833[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_40816) + (-1 * v_i_40818) + (v_MWidthC_1 * v_l_id_40817))] = bool_and(v__40831_0, v__40822[(v_i_40818 + (32 * v_MWidthC_1 * v_wg_id_40816) + (v_MWidthC_1 * v_l_id_40817))]); \n        }\n        /* end map_seq */\n        int v_tmp_40881 = 0; \n        v__40834 = v_tmp_40881; \n        /* reduce_seq */\n        for (int v_i_40819 = 0; v_i_40819 < v_MWidthC_1; v_i_40819 = (1 + v_i_40819)) {\n          v__40834 = bool_or(v__40834, v__40833[(v_i_40819 + (32 * v_MWidthC_1 * v_wg_id_40816) + (v_MWidthC_1 * v_l_id_40817))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_40820 = 0; \n          v__40839[(v_l_id_40817 + (32 * v_wg_id_40816))] = doubleAndOr(v__40834, v__40825, v__40824[(v_l_id_40817 + (32 * v_wg_id_40816))], v__40826); \n        }\n        /* end map_seq */\n        v_l_id_40817 = atomic_inc(&(v_work_idx_2971)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__40821",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__40823",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__40824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__40825",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__40826",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__40833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__40839",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}