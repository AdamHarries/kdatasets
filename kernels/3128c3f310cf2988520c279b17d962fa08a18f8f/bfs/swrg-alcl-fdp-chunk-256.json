{
  "name" : "swrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50888, const global int* restrict v__50889, const global int* restrict v__50890, const global int* restrict v__50891, int v__50892, int v__50893, global int* v__50906, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50896; \n  int v__50898; \n  /* Private Memory */\n  int v__50900_0;\n  \n  int v__50902_0;\n  \n  for (int v_wg_id_50884 = get_group_id(0); v_wg_id_50884 < ((v_MHeight_2)/(256)); v_wg_id_50884 = (v_wg_id_50884 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3913; \n      v_work_idx_3913 = 0; \n      int v_l_id_50885 = atomic_inc(&(v_work_idx_3913)); \n      while((v_l_id_50885 < 256)){\n        int v_tmp_50944 = 0; \n        v__50896 = v_tmp_50944; \n        /* reduce_seq */\n        for (int v_i_50886 = 0; v_i_50886 < v_MWidthC_1; v_i_50886 = (1 + v_i_50886)) {\n          int v_tmp_50945 = 0; \n          v__50898 = v_tmp_50945; \n          int v_index_50946 = v__50888[(v_i_50886 + (256 * v_MWidthC_1 * v_wg_id_50884) + (v_MWidthC_1 * v_l_id_50885))]; \n          if (v_index_50946 < 0) {\n            v__50900_0 = v__50898; \n          } else {\n            if (v_index_50946 >= v_VLength_3) {\n              v__50900_0 = v__50898; \n            } else {\n              v__50900_0 = v__50890[v_index_50946]; \n            }\n          }\n          v__50902_0 = bool_and(v__50900_0, v__50889[(v_i_50886 + (256 * v_MWidthC_1 * v_wg_id_50884) + (v_MWidthC_1 * v_l_id_50885))]); \n          v__50896 = bool_or(v__50902_0, v__50896); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50887 = 0; \n          v__50906[(v_l_id_50885 + (256 * v_wg_id_50884))] = doubleAndOr(v__50896, v__50892, v__50891[(v_l_id_50885 + (256 * v_wg_id_50884))], v__50893); \n        }\n        /* end map_seq */\n        v_l_id_50885 = atomic_inc(&(v_work_idx_3913)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__50888",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50889",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50890",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50892",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50893",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__50906",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}