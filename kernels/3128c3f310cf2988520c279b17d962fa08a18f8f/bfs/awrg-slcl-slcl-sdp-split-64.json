{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45192, const global int* restrict v__45193, const global int* restrict v__45194, const global int* restrict v__45195, int v__45196, int v__45197, global int* v__45215, global int* v__45205, global int* v__45199, local int* v__45210, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45201; \n  int v__45206; \n  int v__33541; \n  /* Private Memory */\n  int v__45203_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3384 = v__45199; \n    local int v_w_id_45184; \n    if (get_local_id(0) == 0) {\n      v_w_id_45184 = atomic_inc(v_work_idx_3384); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45184 < v_MHeight_2)){\n      for (int v_l_id_45185 = get_local_id(0); v_l_id_45185 < v_MWidthC_1; v_l_id_45185 = (v_l_id_45185 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_45186 = 0; v_i_45186 < 64; v_i_45186 = (1 + v_i_45186)) {\n          int v_tmp_45278 = 0; \n          v__45201 = v_tmp_45278; \n          int v_index_45279 = v__45192[(v_l_id_45185 + (64 * v_MWidthC_1 * v_w_id_45184) + (v_MWidthC_1 * v_i_45186))]; \n          if (v_index_45279 < 0) {\n            v__45203_0 = v__45201; \n          } else {\n            if (v_index_45279 >= v_VLength_3) {\n              v__45203_0 = v__45201; \n            } else {\n              v__45203_0 = v__45194[v_index_45279]; \n            }\n          }\n          v__45205[(63 + (64 * v_MWidthC_1 * v_w_id_45184) + (-1 * v_i_45186) + (64 * v_l_id_45185))] = bool_and(v__45203_0, v__45193[(v_l_id_45185 + (64 * v_MWidthC_1 * v_w_id_45184) + (v_MWidthC_1 * v_i_45186))]); \n        }\n        /* end map_seq */\n        int v_tmp_45280 = 0; \n        v__45206 = v_tmp_45280; \n        /* reduce_seq */\n        for (int v_i_45187 = 0; v_i_45187 < 64; v_i_45187 = (1 + v_i_45187)) {\n          v__45206 = bool_or(v__45206, v__45205[(v_i_45187 + (64 * v_MWidthC_1 * v_w_id_45184) + (64 * v_l_id_45185))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45188 = 0; \n          v__45210[v_l_id_45185] = id(v__45206); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45189 = get_local_id(0); \n        int v_tmp_45283 = 0; \n        v__33541 = v_tmp_45283; \n        /* reduce_seq */\n        for (int v_i_45190 = 0; v_i_45190 < v_MWidthC_1; v_i_45190 = (1 + v_i_45190)) {\n          v__33541 = bool_or(v__33541, v__45210[(v_i_45190 + (v_MWidthC_1 * v_l_id_45189))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45191 = 0; \n          v__45215[v_w_id_45184] = doubleAndOr(v__33541, v__45196, v__45195[v_w_id_45184], v__45197); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45184 = atomic_inc(v_work_idx_3384); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__45192",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45193",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45194",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45195",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45196",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45197",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45205",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45199",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45210",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}