{
  "name" : "swrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36771, const global int* restrict v__36772, const global int* restrict v__36773, const global int* restrict v__36774, int v__36775, int v__36776, global int* v__36791, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36778; \n  int v__36781; \n  /* Private Memory */\n  int v__36783_0;\n  \n  int v__36785_0;\n  \n  int v__36789_0;\n  \n  for (int v_wg_id_36767 = get_group_id(0); v_wg_id_36767 < ((v_MHeight_2)/(16)); v_wg_id_36767 = (v_wg_id_36767 + get_num_groups(0))) {\n    for (int v_l_id_36768 = get_local_id(0); v_l_id_36768 < 16; v_l_id_36768 = (v_l_id_36768 + get_local_size(0))) {\n      int v_tmp_36839 = 0; \n      v__36778 = v_tmp_36839; \n      /* reduce_while_seq */\n      for (int v_i_36769 = 0; v_i_36769 < v_MWidthC_1; v_i_36769 = (1 + v_i_36769)) {\n        v__36789_0 = check(v__36778, v__36771[(v_i_36769 + (16 * v_MWidthC_1 * v_wg_id_36767) + (v_MWidthC_1 * v_l_id_36768))]); \n        if (v__36789_0) {\n        } else {\n          break;\n        }\n        int v_tmp_36840 = 0; \n        v__36781 = v_tmp_36840; \n        int v_index_36841 = v__36771[(v_i_36769 + (16 * v_MWidthC_1 * v_wg_id_36767) + (v_MWidthC_1 * v_l_id_36768))]; \n        if (v_index_36841 < 0) {\n          v__36783_0 = v__36781; \n        } else {\n          if (v_index_36841 >= v_VLength_3) {\n            v__36783_0 = v__36781; \n          } else {\n            v__36783_0 = v__36773[v_index_36841]; \n          }\n        }\n        v__36785_0 = bool_and(v__36783_0, v__36772[(v_i_36769 + (16 * v_MWidthC_1 * v_wg_id_36767) + (v_MWidthC_1 * v_l_id_36768))]); \n        v__36778 = bool_or(v__36785_0, v__36778); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_36770 = 0; \n        v__36791[(v_l_id_36768 + (16 * v_wg_id_36767))] = doubleAndOr(v__36778, v__36775, v__36774[(v_l_id_36768 + (16 * v_wg_id_36767))], v__36776); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__36771",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36773",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36774",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36775",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36776",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__36791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}