{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38198, const global int* restrict v__38199, const global int* restrict v__38200, const global int* restrict v__38201, int v__38202, int v__38203, global int* v__38222, local int* v__38217, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38206; \n  int v__38208; \n  int v__33541; \n  /* Private Memory */\n  int v__38210_0;\n  \n  int v__38212_0;\n  \n  int v__38216_0;\n  \n  for (int v_wg_id_38191 = get_group_id(0); v_wg_id_38191 < v_MHeight_2; v_wg_id_38191 = (v_wg_id_38191 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2730; \n      v_work_idx_2730 = 0; \n      int v_l_id_38192 = atomic_inc(&(v_work_idx_2730)); \n      while((v_l_id_38192 < v_MWidthC_1)){\n        int v_tmp_38278 = 0; \n        v__38206 = v_tmp_38278; \n        /* reduce_while_seq */\n        for (int v_i_38193 = 0; v_i_38193 < 16; v_i_38193 = (1 + v_i_38193)) {\n          v__38216_0 = check(v__38206, v__38198[(v_l_id_38192 + (16 * v_MWidthC_1 * v_wg_id_38191) + (v_MWidthC_1 * v_i_38193))]); \n          if (v__38216_0) {\n          } else {\n            break;\n          }\n          int v_tmp_38279 = 0; \n          v__38208 = v_tmp_38279; \n          int v_index_38280 = v__38198[(v_l_id_38192 + (16 * v_MWidthC_1 * v_wg_id_38191) + (v_MWidthC_1 * v_i_38193))]; \n          if (v_index_38280 < 0) {\n            v__38210_0 = v__38208; \n          } else {\n            if (v_index_38280 >= v_VLength_3) {\n              v__38210_0 = v__38208; \n            } else {\n              v__38210_0 = v__38200[v_index_38280]; \n            }\n          }\n          v__38212_0 = bool_and(v__38210_0, v__38199[(v_l_id_38192 + (16 * v_MWidthC_1 * v_wg_id_38191) + (v_MWidthC_1 * v_i_38193))]); \n          v__38206 = bool_or(v__38212_0, v__38206); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38194 = 0; \n          v__38217[v_l_id_38192] = id(v__38206); \n        }\n        /* end map_seq */\n        v_l_id_38192 = atomic_inc(&(v_work_idx_2730)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2725; \n      v_work_idx_2725 = 0; \n      int v_l_id_38195 = atomic_inc(&(v_work_idx_2725)); \n      while((v_l_id_38195 < 1)){\n        int v_tmp_38283 = 0; \n        v__33541 = v_tmp_38283; \n        /* reduce_seq */\n        for (int v_i_38196 = 0; v_i_38196 < v_MWidthC_1; v_i_38196 = (1 + v_i_38196)) {\n          v__33541 = bool_or(v__33541, v__38217[(v_i_38196 + (v_MWidthC_1 * v_l_id_38195))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38197 = 0; \n          v__38222[v_wg_id_38191] = doubleAndOr(v__33541, v__38202, v__38201[v_wg_id_38191], v__38203); \n        }\n        /* end map_seq */\n        v_l_id_38195 = atomic_inc(&(v_work_idx_2725)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__38198",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38199",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38200",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38202",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38203",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__38222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38217",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}