{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38950, const global int* restrict v__38951, const global int* restrict v__38952, const global int* restrict v__38953, int v__38954, int v__38955, global int* v__38973, global int* v__38957, local int* v__38968, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38959; \n  int v__38961; \n  int v__33541; \n  /* Private Memory */\n  int v__38963_0;\n  \n  int v__38965_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2799 = v__38957; \n    local int v_w_id_38943; \n    if (get_local_id(0) == 0) {\n      v_w_id_38943 = atomic_inc(v_work_idx_2799); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38943 < v_MHeight_2)){\n      for (int v_l_id_38944 = get_local_id(0); v_l_id_38944 < v_MWidthC_1; v_l_id_38944 = (v_l_id_38944 + get_local_size(0))) {\n        int v_tmp_39032 = 0; \n        v__38959 = v_tmp_39032; \n        /* reduce_seq */\n        for (int v_i_38945 = 0; v_i_38945 < 16; v_i_38945 = (1 + v_i_38945)) {\n          int v_tmp_39033 = 0; \n          v__38961 = v_tmp_39033; \n          int v_index_39034 = v__38950[(v_l_id_38944 + (16 * v_MWidthC_1 * v_w_id_38943) + (v_MWidthC_1 * v_i_38945))]; \n          if (v_index_39034 < 0) {\n            v__38963_0 = v__38961; \n          } else {\n            if (v_index_39034 >= v_VLength_3) {\n              v__38963_0 = v__38961; \n            } else {\n              v__38963_0 = v__38952[v_index_39034]; \n            }\n          }\n          v__38965_0 = bool_and(v__38963_0, v__38951[(v_l_id_38944 + (16 * v_MWidthC_1 * v_w_id_38943) + (v_MWidthC_1 * v_i_38945))]); \n          v__38959 = bool_or(v__38965_0, v__38959); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38946 = 0; \n          v__38968[v_l_id_38944] = id(v__38959); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2793; \n        v_work_idx_2793 = 0; \n        int v_l_id_38947 = atomic_inc(&(v_work_idx_2793)); \n        while((v_l_id_38947 < 1)){\n          int v_tmp_39037 = 0; \n          v__33541 = v_tmp_39037; \n          /* reduce_seq */\n          for (int v_i_38948 = 0; v_i_38948 < v_MWidthC_1; v_i_38948 = (1 + v_i_38948)) {\n            v__33541 = bool_or(v__33541, v__38968[(v_i_38948 + (v_MWidthC_1 * v_l_id_38947))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_38949 = 0; \n            v__38973[v_w_id_38943] = doubleAndOr(v__33541, v__38954, v__38953[v_w_id_38943], v__38955); \n          }\n          /* end map_seq */\n          v_l_id_38947 = atomic_inc(&(v_work_idx_2793)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38943 = atomic_inc(v_work_idx_2799); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38950",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38951",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38952",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38953",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38954",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38955",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38957",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38973",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38968",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}