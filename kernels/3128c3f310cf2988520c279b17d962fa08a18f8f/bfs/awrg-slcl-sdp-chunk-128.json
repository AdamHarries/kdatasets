{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48291, const global int* restrict v__48292, const global int* restrict v__48293, const global int* restrict v__48294, int v__48295, int v__48296, global int* v__48310, global int* v__48304, global int* v__48298, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48300; \n  int v__48305; \n  /* Private Memory */\n  int v__48302_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3674 = v__48298; \n    local int v_w_id_48286; \n    if (get_local_id(0) == 0) {\n      v_w_id_48286 = atomic_inc(v_work_idx_3674); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48286 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_48287 = get_local_id(0); v_l_id_48287 < 128; v_l_id_48287 = (v_l_id_48287 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_48288 = 0; v_i_48288 < v_MWidthC_1; v_i_48288 = (1 + v_i_48288)) {\n          int v_tmp_48353 = 0; \n          v__48300 = v_tmp_48353; \n          int v_index_48354 = v__48291[(v_i_48288 + (128 * v_MWidthC_1 * v_w_id_48286) + (v_MWidthC_1 * v_l_id_48287))]; \n          if (v_index_48354 < 0) {\n            v__48302_0 = v__48300; \n          } else {\n            if (v_index_48354 >= v_VLength_3) {\n              v__48302_0 = v__48300; \n            } else {\n              v__48302_0 = v__48293[v_index_48354]; \n            }\n          }\n          v__48304[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_48286) + (-1 * v_i_48288) + (v_MWidthC_1 * v_l_id_48287))] = bool_and(v__48302_0, v__48292[(v_i_48288 + (128 * v_MWidthC_1 * v_w_id_48286) + (v_MWidthC_1 * v_l_id_48287))]); \n        }\n        /* end map_seq */\n        int v_tmp_48355 = 0; \n        v__48305 = v_tmp_48355; \n        /* reduce_seq */\n        for (int v_i_48289 = 0; v_i_48289 < v_MWidthC_1; v_i_48289 = (1 + v_i_48289)) {\n          v__48305 = bool_or(v__48305, v__48304[(v_i_48289 + (128 * v_MWidthC_1 * v_w_id_48286) + (v_MWidthC_1 * v_l_id_48287))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48290 = 0; \n          v__48310[(v_l_id_48287 + (128 * v_w_id_48286))] = doubleAndOr(v__48305, v__48295, v__48294[(v_l_id_48287 + (128 * v_w_id_48286))], v__48296); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_48286 = atomic_inc(v_work_idx_3674); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__48291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48292",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48293",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48294",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48295",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48296",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48304",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48298",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48310",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}