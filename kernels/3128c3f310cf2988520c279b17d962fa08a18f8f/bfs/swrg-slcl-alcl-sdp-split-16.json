{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37180, const global int* restrict v__37181, const global int* restrict v__37182, const global int* restrict v__37183, int v__37184, int v__37185, global int* v__37202, global int* v__37192, local int* v__37197, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37188; \n  int v__37193; \n  int v__33541; \n  /* Private Memory */\n  int v__37190_0;\n  \n  for (int v_wg_id_37172 = get_group_id(0); v_wg_id_37172 < v_MHeight_2; v_wg_id_37172 = (v_wg_id_37172 + get_num_groups(0))) {\n    for (int v_l_id_37173 = get_local_id(0); v_l_id_37173 < v_MWidthC_1; v_l_id_37173 = (v_l_id_37173 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_37174 = 0; v_i_37174 < 16; v_i_37174 = (1 + v_i_37174)) {\n        int v_tmp_37263 = 0; \n        v__37188 = v_tmp_37263; \n        int v_index_37264 = v__37180[(v_l_id_37173 + (16 * v_MWidthC_1 * v_wg_id_37172) + (v_MWidthC_1 * v_i_37174))]; \n        if (v_index_37264 < 0) {\n          v__37190_0 = v__37188; \n        } else {\n          if (v_index_37264 >= v_VLength_3) {\n            v__37190_0 = v__37188; \n          } else {\n            v__37190_0 = v__37182[v_index_37264]; \n          }\n        }\n        v__37192[(15 + (16 * v_MWidthC_1 * v_wg_id_37172) + (-1 * v_i_37174) + (16 * v_l_id_37173))] = bool_and(v__37190_0, v__37181[(v_l_id_37173 + (16 * v_MWidthC_1 * v_wg_id_37172) + (v_MWidthC_1 * v_i_37174))]); \n      }\n      /* end map_seq */\n      int v_tmp_37265 = 0; \n      v__37193 = v_tmp_37265; \n      /* reduce_seq */\n      for (int v_i_37175 = 0; v_i_37175 < 16; v_i_37175 = (1 + v_i_37175)) {\n        v__37193 = bool_or(v__37193, v__37192[(v_i_37175 + (16 * v_MWidthC_1 * v_wg_id_37172) + (16 * v_l_id_37173))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37176 = 0; \n        v__37197[v_l_id_37173] = id(v__37193); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2629; \n      v_work_idx_2629 = 0; \n      int v_l_id_37177 = atomic_inc(&(v_work_idx_2629)); \n      while((v_l_id_37177 < 1)){\n        int v_tmp_37268 = 0; \n        v__33541 = v_tmp_37268; \n        /* reduce_seq */\n        for (int v_i_37178 = 0; v_i_37178 < v_MWidthC_1; v_i_37178 = (1 + v_i_37178)) {\n          v__33541 = bool_or(v__33541, v__37197[(v_i_37178 + (v_MWidthC_1 * v_l_id_37177))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37179 = 0; \n          v__37202[v_wg_id_37172] = doubleAndOr(v__33541, v__37184, v__37183[v_wg_id_37172], v__37185); \n        }\n        /* end map_seq */\n        v_l_id_37177 = atomic_inc(&(v_work_idx_2629)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__37180",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37181",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37182",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37183",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37184",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37185",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__37192",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__37202",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37197",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}