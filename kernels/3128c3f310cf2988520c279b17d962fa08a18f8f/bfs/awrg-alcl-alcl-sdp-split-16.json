{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39673, const global int* restrict v__39674, const global int* restrict v__39675, const global int* restrict v__39676, int v__39677, int v__39678, global int* v__39696, global int* v__39686, global int* v__39680, local int* v__39691, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39682; \n  int v__39687; \n  int v__33541; \n  /* Private Memory */\n  int v__39684_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2874 = v__39680; \n    local int v_w_id_39665; \n    if (get_local_id(0) == 0) {\n      v_w_id_39665 = atomic_inc(v_work_idx_2874); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39665 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2872; \n        v_work_idx_2872 = 0; \n        int v_l_id_39666 = atomic_inc(&(v_work_idx_2872)); \n        while((v_l_id_39666 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_39667 = 0; v_i_39667 < 16; v_i_39667 = (1 + v_i_39667)) {\n            int v_tmp_39747 = 0; \n            v__39682 = v_tmp_39747; \n            int v_index_39748 = v__39673[(v_l_id_39666 + (16 * v_MWidthC_1 * v_w_id_39665) + (v_MWidthC_1 * v_i_39667))]; \n            if (v_index_39748 < 0) {\n              v__39684_0 = v__39682; \n            } else {\n              if (v_index_39748 >= v_VLength_3) {\n                v__39684_0 = v__39682; \n              } else {\n                v__39684_0 = v__39675[v_index_39748]; \n              }\n            }\n            v__39686[(15 + (16 * v_MWidthC_1 * v_w_id_39665) + (-1 * v_i_39667) + (16 * v_l_id_39666))] = bool_and(v__39684_0, v__39674[(v_l_id_39666 + (16 * v_MWidthC_1 * v_w_id_39665) + (v_MWidthC_1 * v_i_39667))]); \n          }\n          /* end map_seq */\n          int v_tmp_39749 = 0; \n          v__39687 = v_tmp_39749; \n          /* reduce_seq */\n          for (int v_i_39668 = 0; v_i_39668 < 16; v_i_39668 = (1 + v_i_39668)) {\n            v__39687 = bool_or(v__39687, v__39686[(v_i_39668 + (16 * v_MWidthC_1 * v_w_id_39665) + (16 * v_l_id_39666))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39669 = 0; \n            v__39691[v_l_id_39666] = id(v__39687); \n          }\n          /* end map_seq */\n          v_l_id_39666 = atomic_inc(&(v_work_idx_2872)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2866; \n        v_work_idx_2866 = 0; \n        int v_l_id_39670 = atomic_inc(&(v_work_idx_2866)); \n        while((v_l_id_39670 < 1)){\n          int v_tmp_39752 = 0; \n          v__33541 = v_tmp_39752; \n          /* reduce_seq */\n          for (int v_i_39671 = 0; v_i_39671 < v_MWidthC_1; v_i_39671 = (1 + v_i_39671)) {\n            v__33541 = bool_or(v__33541, v__39691[(v_i_39671 + (v_MWidthC_1 * v_l_id_39670))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39672 = 0; \n            v__39696[v_w_id_39665] = doubleAndOr(v__33541, v__39677, v__39676[v_w_id_39665], v__39678); \n          }\n          /* end map_seq */\n          v_l_id_39670 = atomic_inc(&(v_work_idx_2866)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39665 = atomic_inc(v_work_idx_2874); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39673",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39674",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39675",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39676",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39677",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39678",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39686",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39680",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39691",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}