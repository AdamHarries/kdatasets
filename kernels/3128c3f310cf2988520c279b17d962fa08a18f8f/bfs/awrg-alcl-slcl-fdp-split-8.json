{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36141, const global int* restrict v__36142, const global int* restrict v__36143, const global int* restrict v__36144, int v__36145, int v__36146, global int* v__36164, global int* v__36148, local int* v__36159, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36150; \n  int v__36152; \n  int v__33541; \n  /* Private Memory */\n  int v__36154_0;\n  \n  int v__36156_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2540 = v__36148; \n    local int v_w_id_36134; \n    if (get_local_id(0) == 0) {\n      v_w_id_36134 = atomic_inc(v_work_idx_2540); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_36134 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2538; \n        v_work_idx_2538 = 0; \n        int v_l_id_36135 = atomic_inc(&(v_work_idx_2538)); \n        while((v_l_id_36135 < v_MWidthC_1)){\n          int v_tmp_36219 = 0; \n          v__36150 = v_tmp_36219; \n          /* reduce_seq */\n          for (int v_i_36136 = 0; v_i_36136 < 8; v_i_36136 = (1 + v_i_36136)) {\n            int v_tmp_36220 = 0; \n            v__36152 = v_tmp_36220; \n            int v_index_36221 = v__36141[(v_l_id_36135 + (8 * v_MWidthC_1 * v_w_id_36134) + (v_MWidthC_1 * v_i_36136))]; \n            if (v_index_36221 < 0) {\n              v__36154_0 = v__36152; \n            } else {\n              if (v_index_36221 >= v_VLength_3) {\n                v__36154_0 = v__36152; \n              } else {\n                v__36154_0 = v__36143[v_index_36221]; \n              }\n            }\n            v__36156_0 = bool_and(v__36154_0, v__36142[(v_l_id_36135 + (8 * v_MWidthC_1 * v_w_id_36134) + (v_MWidthC_1 * v_i_36136))]); \n            v__36150 = bool_or(v__36156_0, v__36150); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36137 = 0; \n            v__36159[v_l_id_36135] = id(v__36150); \n          }\n          /* end map_seq */\n          v_l_id_36135 = atomic_inc(&(v_work_idx_2538)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_36138 = get_local_id(0); \n        int v_tmp_36224 = 0; \n        v__33541 = v_tmp_36224; \n        /* reduce_seq */\n        for (int v_i_36139 = 0; v_i_36139 < v_MWidthC_1; v_i_36139 = (1 + v_i_36139)) {\n          v__33541 = bool_or(v__33541, v__36159[(v_i_36139 + (v_MWidthC_1 * v_l_id_36138))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_36140 = 0; \n          v__36164[v_w_id_36134] = doubleAndOr(v__33541, v__36145, v__36144[v_w_id_36134], v__36146); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_36134 = atomic_inc(v_work_idx_2540); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__36141",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36142",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36143",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36144",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36145",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36146",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36148",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__36164",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36159",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}