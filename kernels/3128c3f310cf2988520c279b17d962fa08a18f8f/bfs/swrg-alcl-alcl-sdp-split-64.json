{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44674, const global int* restrict v__44675, const global int* restrict v__44676, const global int* restrict v__44677, int v__44678, int v__44679, global int* v__44696, global int* v__44686, local int* v__44691, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__44682; \n  int v__44687; \n  int v__33541; \n  /* Private Memory */\n  int v__44684_0;\n  \n  for (int v_wg_id_44666 = get_group_id(0); v_wg_id_44666 < v_MHeight_2; v_wg_id_44666 = (v_wg_id_44666 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3334; \n      v_work_idx_3334 = 0; \n      int v_l_id_44667 = atomic_inc(&(v_work_idx_3334)); \n      while((v_l_id_44667 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_44668 = 0; v_i_44668 < 64; v_i_44668 = (1 + v_i_44668)) {\n          int v_tmp_44749 = 0; \n          v__44682 = v_tmp_44749; \n          int v_index_44750 = v__44674[(v_l_id_44667 + (64 * v_MWidthC_1 * v_wg_id_44666) + (v_MWidthC_1 * v_i_44668))]; \n          if (v_index_44750 < 0) {\n            v__44684_0 = v__44682; \n          } else {\n            if (v_index_44750 >= v_VLength_3) {\n              v__44684_0 = v__44682; \n            } else {\n              v__44684_0 = v__44676[v_index_44750]; \n            }\n          }\n          v__44686[(63 + (64 * v_MWidthC_1 * v_wg_id_44666) + (-1 * v_i_44668) + (64 * v_l_id_44667))] = bool_and(v__44684_0, v__44675[(v_l_id_44667 + (64 * v_MWidthC_1 * v_wg_id_44666) + (v_MWidthC_1 * v_i_44668))]); \n        }\n        /* end map_seq */\n        int v_tmp_44751 = 0; \n        v__44687 = v_tmp_44751; \n        /* reduce_seq */\n        for (int v_i_44669 = 0; v_i_44669 < 64; v_i_44669 = (1 + v_i_44669)) {\n          v__44687 = bool_or(v__44687, v__44686[(v_i_44669 + (64 * v_MWidthC_1 * v_wg_id_44666) + (64 * v_l_id_44667))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44670 = 0; \n          v__44691[v_l_id_44667] = id(v__44687); \n        }\n        /* end map_seq */\n        v_l_id_44667 = atomic_inc(&(v_work_idx_3334)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3328; \n      v_work_idx_3328 = 0; \n      int v_l_id_44671 = atomic_inc(&(v_work_idx_3328)); \n      while((v_l_id_44671 < 1)){\n        int v_tmp_44754 = 0; \n        v__33541 = v_tmp_44754; \n        /* reduce_seq */\n        for (int v_i_44672 = 0; v_i_44672 < v_MWidthC_1; v_i_44672 = (1 + v_i_44672)) {\n          v__33541 = bool_or(v__33541, v__44691[(v_i_44672 + (v_MWidthC_1 * v_l_id_44671))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_44673 = 0; \n          v__44696[v_wg_id_44666] = doubleAndOr(v__33541, v__44678, v__44677[v_wg_id_44666], v__44679); \n        }\n        /* end map_seq */\n        v_l_id_44671 = atomic_inc(&(v_work_idx_3328)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__44674",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44675",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44676",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44677",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44678",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44679",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44686",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__44696",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44691",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}