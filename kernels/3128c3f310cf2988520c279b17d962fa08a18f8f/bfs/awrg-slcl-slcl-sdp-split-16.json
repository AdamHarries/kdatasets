{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38528, const global int* restrict v__38529, const global int* restrict v__38530, const global int* restrict v__38531, int v__38532, int v__38533, global int* v__38551, global int* v__38541, global int* v__38535, local int* v__38546, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38537; \n  int v__38542; \n  int v__33541; \n  /* Private Memory */\n  int v__38539_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2760 = v__38535; \n    local int v_w_id_38520; \n    if (get_local_id(0) == 0) {\n      v_w_id_38520 = atomic_inc(v_work_idx_2760); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_38520 < v_MHeight_2)){\n      for (int v_l_id_38521 = get_local_id(0); v_l_id_38521 < v_MWidthC_1; v_l_id_38521 = (v_l_id_38521 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_38522 = 0; v_i_38522 < 16; v_i_38522 = (1 + v_i_38522)) {\n          int v_tmp_38614 = 0; \n          v__38537 = v_tmp_38614; \n          int v_index_38615 = v__38528[(v_l_id_38521 + (16 * v_MWidthC_1 * v_w_id_38520) + (v_MWidthC_1 * v_i_38522))]; \n          if (v_index_38615 < 0) {\n            v__38539_0 = v__38537; \n          } else {\n            if (v_index_38615 >= v_VLength_3) {\n              v__38539_0 = v__38537; \n            } else {\n              v__38539_0 = v__38530[v_index_38615]; \n            }\n          }\n          v__38541[(15 + (16 * v_MWidthC_1 * v_w_id_38520) + (-1 * v_i_38522) + (16 * v_l_id_38521))] = bool_and(v__38539_0, v__38529[(v_l_id_38521 + (16 * v_MWidthC_1 * v_w_id_38520) + (v_MWidthC_1 * v_i_38522))]); \n        }\n        /* end map_seq */\n        int v_tmp_38616 = 0; \n        v__38542 = v_tmp_38616; \n        /* reduce_seq */\n        for (int v_i_38523 = 0; v_i_38523 < 16; v_i_38523 = (1 + v_i_38523)) {\n          v__38542 = bool_or(v__38542, v__38541[(v_i_38523 + (16 * v_MWidthC_1 * v_w_id_38520) + (16 * v_l_id_38521))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38524 = 0; \n          v__38546[v_l_id_38521] = id(v__38542); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_38525 = get_local_id(0); \n        int v_tmp_38619 = 0; \n        v__33541 = v_tmp_38619; \n        /* reduce_seq */\n        for (int v_i_38526 = 0; v_i_38526 < v_MWidthC_1; v_i_38526 = (1 + v_i_38526)) {\n          v__33541 = bool_or(v__33541, v__38546[(v_i_38526 + (v_MWidthC_1 * v_l_id_38525))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38527 = 0; \n          v__38551[v_w_id_38520] = doubleAndOr(v__33541, v__38532, v__38531[v_w_id_38520], v__38533); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_38520 = atomic_inc(v_work_idx_2760); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__38528",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38529",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38530",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38531",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38532",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38533",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__38541",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38535",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__38551",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38546",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}