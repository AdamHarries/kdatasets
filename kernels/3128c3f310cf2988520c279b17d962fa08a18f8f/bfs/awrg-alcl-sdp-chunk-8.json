{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35823, const global int* restrict v__35824, const global int* restrict v__35825, const global int* restrict v__35826, int v__35827, int v__35828, global int* v__35842, global int* v__35836, global int* v__35830, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35832; \n  int v__35837; \n  /* Private Memory */\n  int v__35834_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2505 = v__35830; \n    local int v_w_id_35818; \n    if (get_local_id(0) == 0) {\n      v_w_id_35818 = atomic_inc(v_work_idx_2505); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35818 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2503; \n        v_work_idx_2503 = 0; \n        int v_l_id_35819 = atomic_inc(&(v_work_idx_2503)); \n        while((v_l_id_35819 < 8)){\n          /* map_seq */\n          for (int v_i_35820 = 0; v_i_35820 < v_MWidthC_1; v_i_35820 = (1 + v_i_35820)) {\n            int v_tmp_35881 = 0; \n            v__35832 = v_tmp_35881; \n            int v_index_35882 = v__35823[(v_i_35820 + (8 * v_MWidthC_1 * v_w_id_35818) + (v_MWidthC_1 * v_l_id_35819))]; \n            if (v_index_35882 < 0) {\n              v__35834_0 = v__35832; \n            } else {\n              if (v_index_35882 >= v_VLength_3) {\n                v__35834_0 = v__35832; \n              } else {\n                v__35834_0 = v__35825[v_index_35882]; \n              }\n            }\n            v__35836[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_35818) + (-1 * v_i_35820) + (v_MWidthC_1 * v_l_id_35819))] = bool_and(v__35834_0, v__35824[(v_i_35820 + (8 * v_MWidthC_1 * v_w_id_35818) + (v_MWidthC_1 * v_l_id_35819))]); \n          }\n          /* end map_seq */\n          int v_tmp_35883 = 0; \n          v__35837 = v_tmp_35883; \n          /* reduce_seq */\n          for (int v_i_35821 = 0; v_i_35821 < v_MWidthC_1; v_i_35821 = (1 + v_i_35821)) {\n            v__35837 = bool_or(v__35837, v__35836[(v_i_35821 + (8 * v_MWidthC_1 * v_w_id_35818) + (v_MWidthC_1 * v_l_id_35819))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_35822 = 0; \n            v__35842[(v_l_id_35819 + (8 * v_w_id_35818))] = doubleAndOr(v__35837, v__35827, v__35826[(v_l_id_35819 + (8 * v_w_id_35818))], v__35828); \n          }\n          /* end map_seq */\n          v_l_id_35819 = atomic_inc(&(v_work_idx_2503)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_35818 = atomic_inc(v_work_idx_2505); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__35823",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35824",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35825",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35826",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35827",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35828",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35836",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35830",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35842",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}