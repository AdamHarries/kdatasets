{
  "name" : "swrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41042, const global int* restrict v__41043, const global int* restrict v__41044, const global int* restrict v__41045, int v__41046, int v__41047, global int* v__41064, global int* v__41054, local int* v__41059, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41050; \n  int v__41055; \n  int v__33541; \n  /* Private Memory */\n  int v__41052_0;\n  \n  for (int v_wg_id_41034 = get_group_id(0); v_wg_id_41034 < v_MHeight_2; v_wg_id_41034 = (v_wg_id_41034 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2993; \n      v_work_idx_2993 = 0; \n      int v_l_id_41035 = atomic_inc(&(v_work_idx_2993)); \n      while((v_l_id_41035 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_41036 = 0; v_i_41036 < 32; v_i_41036 = (1 + v_i_41036)) {\n          int v_tmp_41121 = 0; \n          v__41050 = v_tmp_41121; \n          int v_index_41122 = v__41042[(v_l_id_41035 + (32 * v_MWidthC_1 * v_wg_id_41034) + (v_MWidthC_1 * v_i_41036))]; \n          if (v_index_41122 < 0) {\n            v__41052_0 = v__41050; \n          } else {\n            if (v_index_41122 >= v_VLength_3) {\n              v__41052_0 = v__41050; \n            } else {\n              v__41052_0 = v__41044[v_index_41122]; \n            }\n          }\n          v__41054[(31 + (32 * v_MWidthC_1 * v_wg_id_41034) + (-1 * v_i_41036) + (32 * v_l_id_41035))] = bool_and(v__41052_0, v__41043[(v_l_id_41035 + (32 * v_MWidthC_1 * v_wg_id_41034) + (v_MWidthC_1 * v_i_41036))]); \n        }\n        /* end map_seq */\n        int v_tmp_41123 = 0; \n        v__41055 = v_tmp_41123; \n        /* reduce_seq */\n        for (int v_i_41037 = 0; v_i_41037 < 32; v_i_41037 = (1 + v_i_41037)) {\n          v__41055 = bool_or(v__41055, v__41054[(v_i_41037 + (32 * v_MWidthC_1 * v_wg_id_41034) + (32 * v_l_id_41035))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41038 = 0; \n          v__41059[v_l_id_41035] = id(v__41055); \n        }\n        /* end map_seq */\n        v_l_id_41035 = atomic_inc(&(v_work_idx_2993)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_41039 = get_local_id(0); \n      int v_tmp_41126 = 0; \n      v__33541 = v_tmp_41126; \n      /* reduce_seq */\n      for (int v_i_41040 = 0; v_i_41040 < v_MWidthC_1; v_i_41040 = (1 + v_i_41040)) {\n        v__33541 = bool_or(v__33541, v__41059[(v_i_41040 + (v_MWidthC_1 * v_l_id_41039))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_41041 = 0; \n        v__41064[v_wg_id_41034] = doubleAndOr(v__33541, v__41046, v__41045[v_wg_id_41034], v__41047); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41042",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41043",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41044",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41045",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41046",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41047",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41054",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41059",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}