{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43946, const global int* restrict v__43947, const global int* restrict v__43948, const global int* restrict v__43949, int v__43950, int v__43951, global int* v__43968, local int* v__43963, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43954; \n  int v__43956; \n  int v__33541; \n  /* Private Memory */\n  int v__43958_0;\n  \n  int v__43960_0;\n  \n  for (int v_wg_id_43939 = get_group_id(0); v_wg_id_43939 < v_MHeight_2; v_wg_id_43939 = (v_wg_id_43939 + get_num_groups(0))) {\n    for (int v_l_id_43940 = get_local_id(0); v_l_id_43940 < v_MWidthC_1; v_l_id_43940 = (v_l_id_43940 + get_local_size(0))) {\n      int v_tmp_44029 = 0; \n      v__43954 = v_tmp_44029; \n      /* reduce_seq */\n      for (int v_i_43941 = 0; v_i_43941 < 64; v_i_43941 = (1 + v_i_43941)) {\n        int v_tmp_44030 = 0; \n        v__43956 = v_tmp_44030; \n        int v_index_44031 = v__43946[(v_l_id_43940 + (64 * v_MWidthC_1 * v_wg_id_43939) + (v_MWidthC_1 * v_i_43941))]; \n        if (v_index_44031 < 0) {\n          v__43958_0 = v__43956; \n        } else {\n          if (v_index_44031 >= v_VLength_3) {\n            v__43958_0 = v__43956; \n          } else {\n            v__43958_0 = v__43948[v_index_44031]; \n          }\n        }\n        v__43960_0 = bool_and(v__43958_0, v__43947[(v_l_id_43940 + (64 * v_MWidthC_1 * v_wg_id_43939) + (v_MWidthC_1 * v_i_43941))]); \n        v__43954 = bool_or(v__43960_0, v__43954); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_43942 = 0; \n        v__43963[v_l_id_43940] = id(v__43954); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3263; \n      v_work_idx_3263 = 0; \n      int v_l_id_43943 = atomic_inc(&(v_work_idx_3263)); \n      while((v_l_id_43943 < 1)){\n        int v_tmp_44034 = 0; \n        v__33541 = v_tmp_44034; \n        /* reduce_seq */\n        for (int v_i_43944 = 0; v_i_43944 < v_MWidthC_1; v_i_43944 = (1 + v_i_43944)) {\n          v__33541 = bool_or(v__33541, v__43963[(v_i_43944 + (v_MWidthC_1 * v_l_id_43943))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_43945 = 0; \n          v__43968[v_wg_id_43939] = doubleAndOr(v__33541, v__43950, v__43949[v_wg_id_43939], v__43951); \n        }\n        /* end map_seq */\n        v_l_id_43943 = atomic_inc(&(v_work_idx_3263)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__43946",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43947",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43948",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43950",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43951",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__43968",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43963",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}