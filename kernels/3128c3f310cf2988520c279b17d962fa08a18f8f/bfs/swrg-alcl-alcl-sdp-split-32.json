{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41342, const global int* restrict v__41343, const global int* restrict v__41344, const global int* restrict v__41345, int v__41346, int v__41347, global int* v__41364, global int* v__41354, local int* v__41359, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41350; \n  int v__41355; \n  int v__33541; \n  /* Private Memory */\n  int v__41352_0;\n  \n  for (int v_wg_id_41334 = get_group_id(0); v_wg_id_41334 < v_MHeight_2; v_wg_id_41334 = (v_wg_id_41334 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3022; \n      v_work_idx_3022 = 0; \n      int v_l_id_41335 = atomic_inc(&(v_work_idx_3022)); \n      while((v_l_id_41335 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_41336 = 0; v_i_41336 < 32; v_i_41336 = (1 + v_i_41336)) {\n          int v_tmp_41417 = 0; \n          v__41350 = v_tmp_41417; \n          int v_index_41418 = v__41342[(v_l_id_41335 + (32 * v_MWidthC_1 * v_wg_id_41334) + (v_MWidthC_1 * v_i_41336))]; \n          if (v_index_41418 < 0) {\n            v__41352_0 = v__41350; \n          } else {\n            if (v_index_41418 >= v_VLength_3) {\n              v__41352_0 = v__41350; \n            } else {\n              v__41352_0 = v__41344[v_index_41418]; \n            }\n          }\n          v__41354[(31 + (32 * v_MWidthC_1 * v_wg_id_41334) + (-1 * v_i_41336) + (32 * v_l_id_41335))] = bool_and(v__41352_0, v__41343[(v_l_id_41335 + (32 * v_MWidthC_1 * v_wg_id_41334) + (v_MWidthC_1 * v_i_41336))]); \n        }\n        /* end map_seq */\n        int v_tmp_41419 = 0; \n        v__41355 = v_tmp_41419; \n        /* reduce_seq */\n        for (int v_i_41337 = 0; v_i_41337 < 32; v_i_41337 = (1 + v_i_41337)) {\n          v__41355 = bool_or(v__41355, v__41354[(v_i_41337 + (32 * v_MWidthC_1 * v_wg_id_41334) + (32 * v_l_id_41335))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41338 = 0; \n          v__41359[v_l_id_41335] = id(v__41355); \n        }\n        /* end map_seq */\n        v_l_id_41335 = atomic_inc(&(v_work_idx_3022)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3016; \n      v_work_idx_3016 = 0; \n      int v_l_id_41339 = atomic_inc(&(v_work_idx_3016)); \n      while((v_l_id_41339 < 1)){\n        int v_tmp_41422 = 0; \n        v__33541 = v_tmp_41422; \n        /* reduce_seq */\n        for (int v_i_41340 = 0; v_i_41340 < v_MWidthC_1; v_i_41340 = (1 + v_i_41340)) {\n          v__33541 = bool_or(v__33541, v__41359[(v_i_41340 + (v_MWidthC_1 * v_l_id_41339))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41341 = 0; \n          v__41364[v_wg_id_41334] = doubleAndOr(v__33541, v__41346, v__41345[v_wg_id_41334], v__41347); \n        }\n        /* end map_seq */\n        v_l_id_41339 = atomic_inc(&(v_work_idx_3016)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__41342",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41343",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41344",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41346",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41347",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__41354",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__41364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41359",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}