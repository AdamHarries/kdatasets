{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__35038, const global int* restrict v__35039, const global int* restrict v__35040, const global int* restrict v__35041, int v__35042, int v__35043, global int* v__35057, global int* v__35045, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__35047; \n  int v__35049; \n  /* Private Memory */\n  int v__35051_0;\n  \n  int v__35053_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2432 = v__35045; \n    local int v_w_id_35034; \n    if (get_local_id(0) == 0) {\n      v_w_id_35034 = atomic_inc(v_work_idx_2432); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_35034 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_35035 = get_local_id(0); v_l_id_35035 < 8; v_l_id_35035 = (v_l_id_35035 + get_local_size(0))) {\n        int v_tmp_35098 = 0; \n        v__35047 = v_tmp_35098; \n        /* reduce_seq */\n        for (int v_i_35036 = 0; v_i_35036 < v_MWidthC_1; v_i_35036 = (1 + v_i_35036)) {\n          int v_tmp_35099 = 0; \n          v__35049 = v_tmp_35099; \n          int v_index_35100 = v__35038[(v_i_35036 + (8 * v_MWidthC_1 * v_w_id_35034) + (v_MWidthC_1 * v_l_id_35035))]; \n          if (v_index_35100 < 0) {\n            v__35051_0 = v__35049; \n          } else {\n            if (v_index_35100 >= v_VLength_3) {\n              v__35051_0 = v__35049; \n            } else {\n              v__35051_0 = v__35040[v_index_35100]; \n            }\n          }\n          v__35053_0 = bool_and(v__35051_0, v__35039[(v_i_35036 + (8 * v_MWidthC_1 * v_w_id_35034) + (v_MWidthC_1 * v_l_id_35035))]); \n          v__35047 = bool_or(v__35053_0, v__35047); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_35037 = 0; \n          v__35057[(v_l_id_35035 + (8 * v_w_id_35034))] = doubleAndOr(v__35047, v__35042, v__35041[(v_l_id_35035 + (8 * v_w_id_35034))], v__35043); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_35034 = atomic_inc(v_work_idx_2432); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__35038",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__35040",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__35041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__35042",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__35043",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__35045",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__35057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}