{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__47625, const global int* restrict v__47626, const global int* restrict v__47627, const global int* restrict v__47628, int v__47629, int v__47630, global int* v__47645, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__47632; \n  int v__47635; \n  /* Private Memory */\n  int v__47637_0;\n  \n  int v__47639_0;\n  \n  int v__47643_0;\n  \n  for (int v_wg_id_47621 = get_group_id(0); v_wg_id_47621 < ((v_MHeight_2)/(128)); v_wg_id_47621 = (v_wg_id_47621 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3607; \n      v_work_idx_3607 = 0; \n      int v_l_id_47622 = atomic_inc(&(v_work_idx_3607)); \n      while((v_l_id_47622 < 128)){\n        int v_tmp_47689 = 0; \n        v__47632 = v_tmp_47689; \n        /* reduce_while_seq */\n        for (int v_i_47623 = 0; v_i_47623 < v_MWidthC_1; v_i_47623 = (1 + v_i_47623)) {\n          v__47643_0 = check(v__47632, v__47625[(v_i_47623 + (128 * v_MWidthC_1 * v_wg_id_47621) + (v_MWidthC_1 * v_l_id_47622))]); \n          if (v__47643_0) {\n          } else {\n            break;\n          }\n          int v_tmp_47690 = 0; \n          v__47635 = v_tmp_47690; \n          int v_index_47691 = v__47625[(v_i_47623 + (128 * v_MWidthC_1 * v_wg_id_47621) + (v_MWidthC_1 * v_l_id_47622))]; \n          if (v_index_47691 < 0) {\n            v__47637_0 = v__47635; \n          } else {\n            if (v_index_47691 >= v_VLength_3) {\n              v__47637_0 = v__47635; \n            } else {\n              v__47637_0 = v__47627[v_index_47691]; \n            }\n          }\n          v__47639_0 = bool_and(v__47637_0, v__47626[(v_i_47623 + (128 * v_MWidthC_1 * v_wg_id_47621) + (v_MWidthC_1 * v_l_id_47622))]); \n          v__47632 = bool_or(v__47639_0, v__47632); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_47624 = 0; \n          v__47645[(v_l_id_47622 + (128 * v_wg_id_47621))] = doubleAndOr(v__47632, v__47629, v__47628[(v_l_id_47622 + (128 * v_wg_id_47621))], v__47630); \n        }\n        /* end map_seq */\n        v_l_id_47622 = atomic_inc(&(v_work_idx_3607)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__47625",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47626",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__47627",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__47628",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__47629",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__47630",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__47645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}