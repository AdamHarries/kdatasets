{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__34772, const global int* restrict v__34773, const global int* restrict v__34774, const global int* restrict v__34775, int v__34776, int v__34777, global int* v__34794, local int* v__34789, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__34780; \n  int v__34782; \n  int v__33541; \n  /* Private Memory */\n  int v__34784_0;\n  \n  int v__34786_0;\n  \n  for (int v_wg_id_34765 = get_group_id(0); v_wg_id_34765 < v_MHeight_2; v_wg_id_34765 = (v_wg_id_34765 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2408; \n      v_work_idx_2408 = 0; \n      int v_l_id_34766 = atomic_inc(&(v_work_idx_2408)); \n      while((v_l_id_34766 < v_MWidthC_1)){\n        int v_tmp_34847 = 0; \n        v__34780 = v_tmp_34847; \n        /* reduce_seq */\n        for (int v_i_34767 = 0; v_i_34767 < 8; v_i_34767 = (1 + v_i_34767)) {\n          int v_tmp_34848 = 0; \n          v__34782 = v_tmp_34848; \n          int v_index_34849 = v__34772[(v_l_id_34766 + (8 * v_MWidthC_1 * v_wg_id_34765) + (v_MWidthC_1 * v_i_34767))]; \n          if (v_index_34849 < 0) {\n            v__34784_0 = v__34782; \n          } else {\n            if (v_index_34849 >= v_VLength_3) {\n              v__34784_0 = v__34782; \n            } else {\n              v__34784_0 = v__34774[v_index_34849]; \n            }\n          }\n          v__34786_0 = bool_and(v__34784_0, v__34773[(v_l_id_34766 + (8 * v_MWidthC_1 * v_wg_id_34765) + (v_MWidthC_1 * v_i_34767))]); \n          v__34780 = bool_or(v__34786_0, v__34780); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34768 = 0; \n          v__34789[v_l_id_34766] = id(v__34780); \n        }\n        /* end map_seq */\n        v_l_id_34766 = atomic_inc(&(v_work_idx_2408)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2403; \n      v_work_idx_2403 = 0; \n      int v_l_id_34769 = atomic_inc(&(v_work_idx_2403)); \n      while((v_l_id_34769 < 1)){\n        int v_tmp_34852 = 0; \n        v__33541 = v_tmp_34852; \n        /* reduce_seq */\n        for (int v_i_34770 = 0; v_i_34770 < v_MWidthC_1; v_i_34770 = (1 + v_i_34770)) {\n          v__33541 = bool_or(v__33541, v__34789[(v_i_34770 + (v_MWidthC_1 * v_l_id_34769))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_34771 = 0; \n          v__34794[v_wg_id_34765] = doubleAndOr(v__33541, v__34776, v__34775[v_wg_id_34765], v__34777); \n        }\n        /* end map_seq */\n        v_l_id_34769 = atomic_inc(&(v_work_idx_2403)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__34772",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34773",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__34774",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__34775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__34776",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__34777",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__34794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__34789",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}