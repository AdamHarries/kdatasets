{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__49372, const global int* restrict v__49373, const global int* restrict v__49374, const global int* restrict v__49375, int v__49376, int v__49377, global int* v__49395, global int* v__49385, global int* v__49379, local int* v__49390, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__49381; \n  int v__49386; \n  int v__33541; \n  /* Private Memory */\n  int v__49383_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3778 = v__49379; \n    local int v_w_id_49364; \n    if (get_local_id(0) == 0) {\n      v_w_id_49364 = atomic_inc(v_work_idx_3778); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_49364 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3776; \n        v_work_idx_3776 = 0; \n        int v_l_id_49365 = atomic_inc(&(v_work_idx_3776)); \n        while((v_l_id_49365 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_49366 = 0; v_i_49366 < 128; v_i_49366 = (1 + v_i_49366)) {\n            int v_tmp_49450 = 0; \n            v__49381 = v_tmp_49450; \n            int v_index_49451 = v__49372[(v_l_id_49365 + (128 * v_MWidthC_1 * v_w_id_49364) + (v_MWidthC_1 * v_i_49366))]; \n            if (v_index_49451 < 0) {\n              v__49383_0 = v__49381; \n            } else {\n              if (v_index_49451 >= v_VLength_3) {\n                v__49383_0 = v__49381; \n              } else {\n                v__49383_0 = v__49374[v_index_49451]; \n              }\n            }\n            v__49385[(127 + (128 * v_MWidthC_1 * v_w_id_49364) + (-1 * v_i_49366) + (128 * v_l_id_49365))] = bool_and(v__49383_0, v__49373[(v_l_id_49365 + (128 * v_MWidthC_1 * v_w_id_49364) + (v_MWidthC_1 * v_i_49366))]); \n          }\n          /* end map_seq */\n          int v_tmp_49452 = 0; \n          v__49386 = v_tmp_49452; \n          /* reduce_seq */\n          for (int v_i_49367 = 0; v_i_49367 < 128; v_i_49367 = (1 + v_i_49367)) {\n            v__49386 = bool_or(v__49386, v__49385[(v_i_49367 + (128 * v_MWidthC_1 * v_w_id_49364) + (128 * v_l_id_49365))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_49368 = 0; \n            v__49390[v_l_id_49365] = id(v__49386); \n          }\n          /* end map_seq */\n          v_l_id_49365 = atomic_inc(&(v_work_idx_3776)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_49369 = get_local_id(0); \n        int v_tmp_49455 = 0; \n        v__33541 = v_tmp_49455; \n        /* reduce_seq */\n        for (int v_i_49370 = 0; v_i_49370 < v_MWidthC_1; v_i_49370 = (1 + v_i_49370)) {\n          v__33541 = bool_or(v__33541, v__49390[(v_i_49370 + (v_MWidthC_1 * v_l_id_49369))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_49371 = 0; \n          v__49395[v_w_id_49364] = doubleAndOr(v__33541, v__49376, v__49375[v_w_id_49364], v__49377); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_49364 = atomic_inc(v_work_idx_3778); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__49372",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49373",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49374",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__49375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__49376",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__49377",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__49385",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__49379",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__49395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__49390",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}