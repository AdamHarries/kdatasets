{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46040, const global int* restrict v__46041, const global int* restrict v__46042, const global int* restrict v__46043, int v__46044, int v__46045, global int* v__46063, global int* v__46053, global int* v__46047, local int* v__46058, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46049; \n  int v__46054; \n  int v__33541; \n  /* Private Memory */\n  int v__46051_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3466 = v__46047; \n    local int v_w_id_46032; \n    if (get_local_id(0) == 0) {\n      v_w_id_46032 = atomic_inc(v_work_idx_3466); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_46032 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3464; \n        v_work_idx_3464 = 0; \n        int v_l_id_46033 = atomic_inc(&(v_work_idx_3464)); \n        while((v_l_id_46033 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_46034 = 0; v_i_46034 < 64; v_i_46034 = (1 + v_i_46034)) {\n            int v_tmp_46118 = 0; \n            v__46049 = v_tmp_46118; \n            int v_index_46119 = v__46040[(v_l_id_46033 + (64 * v_MWidthC_1 * v_w_id_46032) + (v_MWidthC_1 * v_i_46034))]; \n            if (v_index_46119 < 0) {\n              v__46051_0 = v__46049; \n            } else {\n              if (v_index_46119 >= v_VLength_3) {\n                v__46051_0 = v__46049; \n              } else {\n                v__46051_0 = v__46042[v_index_46119]; \n              }\n            }\n            v__46053[(63 + (64 * v_MWidthC_1 * v_w_id_46032) + (-1 * v_i_46034) + (64 * v_l_id_46033))] = bool_and(v__46051_0, v__46041[(v_l_id_46033 + (64 * v_MWidthC_1 * v_w_id_46032) + (v_MWidthC_1 * v_i_46034))]); \n          }\n          /* end map_seq */\n          int v_tmp_46120 = 0; \n          v__46054 = v_tmp_46120; \n          /* reduce_seq */\n          for (int v_i_46035 = 0; v_i_46035 < 64; v_i_46035 = (1 + v_i_46035)) {\n            v__46054 = bool_or(v__46054, v__46053[(v_i_46035 + (64 * v_MWidthC_1 * v_w_id_46032) + (64 * v_l_id_46033))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46036 = 0; \n            v__46058[v_l_id_46033] = id(v__46054); \n          }\n          /* end map_seq */\n          v_l_id_46033 = atomic_inc(&(v_work_idx_3464)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_46037 = get_local_id(0); \n        int v_tmp_46123 = 0; \n        v__33541 = v_tmp_46123; \n        /* reduce_seq */\n        for (int v_i_46038 = 0; v_i_46038 < v_MWidthC_1; v_i_46038 = (1 + v_i_46038)) {\n          v__33541 = bool_or(v__33541, v__46058[(v_i_46038 + (v_MWidthC_1 * v_l_id_46037))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_46039 = 0; \n          v__46063[v_w_id_46032] = doubleAndOr(v__33541, v__46044, v__46043[v_w_id_46032], v__46045); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_46032 = atomic_inc(v_work_idx_3466); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46040",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46041",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46042",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46044",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46045",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46053",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46047",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46058",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}