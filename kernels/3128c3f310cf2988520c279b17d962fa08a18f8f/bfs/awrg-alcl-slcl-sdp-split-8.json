{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36044, const global int* restrict v__36045, const global int* restrict v__36046, const global int* restrict v__36047, int v__36048, int v__36049, global int* v__36067, global int* v__36057, global int* v__36051, local int* v__36062, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36053; \n  int v__36058; \n  int v__33541; \n  /* Private Memory */\n  int v__36055_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2530 = v__36051; \n    local int v_w_id_36036; \n    if (get_local_id(0) == 0) {\n      v_w_id_36036 = atomic_inc(v_work_idx_2530); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_36036 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2528; \n        v_work_idx_2528 = 0; \n        int v_l_id_36037 = atomic_inc(&(v_work_idx_2528)); \n        while((v_l_id_36037 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_36038 = 0; v_i_36038 < 8; v_i_36038 = (1 + v_i_36038)) {\n            int v_tmp_36122 = 0; \n            v__36053 = v_tmp_36122; \n            int v_index_36123 = v__36044[(v_l_id_36037 + (8 * v_MWidthC_1 * v_w_id_36036) + (v_MWidthC_1 * v_i_36038))]; \n            if (v_index_36123 < 0) {\n              v__36055_0 = v__36053; \n            } else {\n              if (v_index_36123 >= v_VLength_3) {\n                v__36055_0 = v__36053; \n              } else {\n                v__36055_0 = v__36046[v_index_36123]; \n              }\n            }\n            v__36057[(7 + (8 * v_MWidthC_1 * v_w_id_36036) + (-1 * v_i_36038) + (8 * v_l_id_36037))] = bool_and(v__36055_0, v__36045[(v_l_id_36037 + (8 * v_MWidthC_1 * v_w_id_36036) + (v_MWidthC_1 * v_i_36038))]); \n          }\n          /* end map_seq */\n          int v_tmp_36124 = 0; \n          v__36058 = v_tmp_36124; \n          /* reduce_seq */\n          for (int v_i_36039 = 0; v_i_36039 < 8; v_i_36039 = (1 + v_i_36039)) {\n            v__36058 = bool_or(v__36058, v__36057[(v_i_36039 + (8 * v_MWidthC_1 * v_w_id_36036) + (8 * v_l_id_36037))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36040 = 0; \n            v__36062[v_l_id_36037] = id(v__36058); \n          }\n          /* end map_seq */\n          v_l_id_36037 = atomic_inc(&(v_work_idx_2528)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_36041 = get_local_id(0); \n        int v_tmp_36127 = 0; \n        v__33541 = v_tmp_36127; \n        /* reduce_seq */\n        for (int v_i_36042 = 0; v_i_36042 < v_MWidthC_1; v_i_36042 = (1 + v_i_36042)) {\n          v__33541 = bool_or(v__33541, v__36062[(v_i_36042 + (v_MWidthC_1 * v_l_id_36041))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_36043 = 0; \n          v__36067[v_w_id_36036] = doubleAndOr(v__33541, v__36048, v__36047[v_w_id_36036], v__36049); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_36036 = atomic_inc(v_work_idx_2530); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__36044",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36045",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36046",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36048",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36049",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36057",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36051",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__36067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36062",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}