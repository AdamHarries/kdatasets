{
  "name" : "swrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54566, const global int* restrict v__54567, const global int* restrict v__54568, const global int* restrict v__54569, int v__54570, int v__54571, global int* v__54590, local int* v__54585, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54574; \n  int v__54576; \n  int v__33541; \n  /* Private Memory */\n  int v__54578_0;\n  \n  int v__54580_0;\n  \n  int v__54584_0;\n  \n  for (int v_wg_id_54559 = get_group_id(0); v_wg_id_54559 < v_MHeight_2; v_wg_id_54559 = (v_wg_id_54559 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4259; \n      v_work_idx_4259 = 0; \n      int v_l_id_54560 = atomic_inc(&(v_work_idx_4259)); \n      while((v_l_id_54560 < v_MWidthC_1)){\n        int v_tmp_54650 = 0; \n        v__54574 = v_tmp_54650; \n        /* reduce_while_seq */\n        for (int v_i_54561 = 0; v_i_54561 < 512; v_i_54561 = (1 + v_i_54561)) {\n          v__54584_0 = check(v__54574, v__54566[(v_l_id_54560 + (512 * v_MWidthC_1 * v_wg_id_54559) + (v_MWidthC_1 * v_i_54561))]); \n          if (v__54584_0) {\n          } else {\n            break;\n          }\n          int v_tmp_54651 = 0; \n          v__54576 = v_tmp_54651; \n          int v_index_54652 = v__54566[(v_l_id_54560 + (512 * v_MWidthC_1 * v_wg_id_54559) + (v_MWidthC_1 * v_i_54561))]; \n          if (v_index_54652 < 0) {\n            v__54578_0 = v__54576; \n          } else {\n            if (v_index_54652 >= v_VLength_3) {\n              v__54578_0 = v__54576; \n            } else {\n              v__54578_0 = v__54568[v_index_54652]; \n            }\n          }\n          v__54580_0 = bool_and(v__54578_0, v__54567[(v_l_id_54560 + (512 * v_MWidthC_1 * v_wg_id_54559) + (v_MWidthC_1 * v_i_54561))]); \n          v__54574 = bool_or(v__54580_0, v__54574); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54562 = 0; \n          v__54585[v_l_id_54560] = id(v__54574); \n        }\n        /* end map_seq */\n        v_l_id_54560 = atomic_inc(&(v_work_idx_4259)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_54563 = get_local_id(0); \n      int v_tmp_54655 = 0; \n      v__33541 = v_tmp_54655; \n      /* reduce_seq */\n      for (int v_i_54564 = 0; v_i_54564 < v_MWidthC_1; v_i_54564 = (1 + v_i_54564)) {\n        v__33541 = bool_or(v__33541, v__54585[(v_i_54564 + (v_MWidthC_1 * v_l_id_54563))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_54565 = 0; \n        v__54590[v_wg_id_54559] = doubleAndOr(v__33541, v__54570, v__54569[v_wg_id_54559], v__54571); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__54566",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54567",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54568",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54569",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54570",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54571",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__54590",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54585",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}