{
  "name" : "swrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__50957, const global int* restrict v__50958, const global int* restrict v__50959, const global int* restrict v__50960, int v__50961, int v__50962, global int* v__50977, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__50964; \n  int v__50967; \n  /* Private Memory */\n  int v__50969_0;\n  \n  int v__50971_0;\n  \n  int v__50975_0;\n  \n  for (int v_wg_id_50953 = get_group_id(0); v_wg_id_50953 < ((v_MHeight_2)/(256)); v_wg_id_50953 = (v_wg_id_50953 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3919; \n      v_work_idx_3919 = 0; \n      int v_l_id_50954 = atomic_inc(&(v_work_idx_3919)); \n      while((v_l_id_50954 < 256)){\n        int v_tmp_51021 = 0; \n        v__50964 = v_tmp_51021; \n        /* reduce_while_seq */\n        for (int v_i_50955 = 0; v_i_50955 < v_MWidthC_1; v_i_50955 = (1 + v_i_50955)) {\n          v__50975_0 = check(v__50964, v__50957[(v_i_50955 + (256 * v_MWidthC_1 * v_wg_id_50953) + (v_MWidthC_1 * v_l_id_50954))]); \n          if (v__50975_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51022 = 0; \n          v__50967 = v_tmp_51022; \n          int v_index_51023 = v__50957[(v_i_50955 + (256 * v_MWidthC_1 * v_wg_id_50953) + (v_MWidthC_1 * v_l_id_50954))]; \n          if (v_index_51023 < 0) {\n            v__50969_0 = v__50967; \n          } else {\n            if (v_index_51023 >= v_VLength_3) {\n              v__50969_0 = v__50967; \n            } else {\n              v__50969_0 = v__50959[v_index_51023]; \n            }\n          }\n          v__50971_0 = bool_and(v__50969_0, v__50958[(v_i_50955 + (256 * v_MWidthC_1 * v_wg_id_50953) + (v_MWidthC_1 * v_l_id_50954))]); \n          v__50964 = bool_or(v__50971_0, v__50964); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_50956 = 0; \n          v__50977[(v_l_id_50954 + (256 * v_wg_id_50953))] = doubleAndOr(v__50964, v__50961, v__50960[(v_l_id_50954 + (256 * v_wg_id_50953))], v__50962); \n        }\n        /* end map_seq */\n        v_l_id_50954 = atomic_inc(&(v_work_idx_3919)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__50957",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50958",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__50959",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__50960",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__50961",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__50962",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__50977",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}