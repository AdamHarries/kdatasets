{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__43098, const global int* restrict v__43099, const global int* restrict v__43100, const global int* restrict v__43101, int v__43102, int v__43103, global int* v__43121, global int* v__43105, local int* v__43116, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__43107; \n  int v__43109; \n  int v__33541; \n  /* Private Memory */\n  int v__43111_0;\n  \n  int v__43113_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3197 = v__43105; \n    local int v_w_id_43091; \n    if (get_local_id(0) == 0) {\n      v_w_id_43091 = atomic_inc(v_work_idx_3197); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_43091 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3195; \n        v_work_idx_3195 = 0; \n        int v_l_id_43092 = atomic_inc(&(v_work_idx_3195)); \n        while((v_l_id_43092 < v_MWidthC_1)){\n          int v_tmp_43172 = 0; \n          v__43107 = v_tmp_43172; \n          /* reduce_seq */\n          for (int v_i_43093 = 0; v_i_43093 < 32; v_i_43093 = (1 + v_i_43093)) {\n            int v_tmp_43173 = 0; \n            v__43109 = v_tmp_43173; \n            int v_index_43174 = v__43098[(v_l_id_43092 + (32 * v_MWidthC_1 * v_w_id_43091) + (v_MWidthC_1 * v_i_43093))]; \n            if (v_index_43174 < 0) {\n              v__43111_0 = v__43109; \n            } else {\n              if (v_index_43174 >= v_VLength_3) {\n                v__43111_0 = v__43109; \n              } else {\n                v__43111_0 = v__43100[v_index_43174]; \n              }\n            }\n            v__43113_0 = bool_and(v__43111_0, v__43099[(v_l_id_43092 + (32 * v_MWidthC_1 * v_w_id_43091) + (v_MWidthC_1 * v_i_43093))]); \n            v__43107 = bool_or(v__43113_0, v__43107); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43094 = 0; \n            v__43116[v_l_id_43092] = id(v__43107); \n          }\n          /* end map_seq */\n          v_l_id_43092 = atomic_inc(&(v_work_idx_3195)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3190; \n        v_work_idx_3190 = 0; \n        int v_l_id_43095 = atomic_inc(&(v_work_idx_3190)); \n        while((v_l_id_43095 < 1)){\n          int v_tmp_43177 = 0; \n          v__33541 = v_tmp_43177; \n          /* reduce_seq */\n          for (int v_i_43096 = 0; v_i_43096 < v_MWidthC_1; v_i_43096 = (1 + v_i_43096)) {\n            v__33541 = bool_or(v__33541, v__43116[(v_i_43096 + (v_MWidthC_1 * v_l_id_43095))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_43097 = 0; \n            v__43121[v_w_id_43091] = doubleAndOr(v__33541, v__43102, v__43101[v_w_id_43091], v__43103); \n          }\n          /* end map_seq */\n          v_l_id_43095 = atomic_inc(&(v_work_idx_3190)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_43091 = atomic_inc(v_work_idx_3197); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__43098",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43099",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__43100",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__43101",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__43102",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__43103",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__43105",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__43121",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__43116",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}