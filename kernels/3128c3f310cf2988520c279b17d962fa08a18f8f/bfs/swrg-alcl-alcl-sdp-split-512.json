{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__54670, const global int* restrict v__54671, const global int* restrict v__54672, const global int* restrict v__54673, int v__54674, int v__54675, global int* v__54692, global int* v__54682, local int* v__54687, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__54678; \n  int v__54683; \n  int v__33541; \n  /* Private Memory */\n  int v__54680_0;\n  \n  for (int v_wg_id_54662 = get_group_id(0); v_wg_id_54662 < v_MHeight_2; v_wg_id_54662 = (v_wg_id_54662 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4270; \n      v_work_idx_4270 = 0; \n      int v_l_id_54663 = atomic_inc(&(v_work_idx_4270)); \n      while((v_l_id_54663 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_54664 = 0; v_i_54664 < 512; v_i_54664 = (1 + v_i_54664)) {\n          int v_tmp_54745 = 0; \n          v__54678 = v_tmp_54745; \n          int v_index_54746 = v__54670[(v_l_id_54663 + (512 * v_MWidthC_1 * v_wg_id_54662) + (v_MWidthC_1 * v_i_54664))]; \n          if (v_index_54746 < 0) {\n            v__54680_0 = v__54678; \n          } else {\n            if (v_index_54746 >= v_VLength_3) {\n              v__54680_0 = v__54678; \n            } else {\n              v__54680_0 = v__54672[v_index_54746]; \n            }\n          }\n          v__54682[(511 + (512 * v_MWidthC_1 * v_wg_id_54662) + (-1 * v_i_54664) + (512 * v_l_id_54663))] = bool_and(v__54680_0, v__54671[(v_l_id_54663 + (512 * v_MWidthC_1 * v_wg_id_54662) + (v_MWidthC_1 * v_i_54664))]); \n        }\n        /* end map_seq */\n        int v_tmp_54747 = 0; \n        v__54683 = v_tmp_54747; \n        /* reduce_seq */\n        for (int v_i_54665 = 0; v_i_54665 < 512; v_i_54665 = (1 + v_i_54665)) {\n          v__54683 = bool_or(v__54683, v__54682[(v_i_54665 + (512 * v_MWidthC_1 * v_wg_id_54662) + (512 * v_l_id_54663))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54666 = 0; \n          v__54687[v_l_id_54663] = id(v__54683); \n        }\n        /* end map_seq */\n        v_l_id_54663 = atomic_inc(&(v_work_idx_4270)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4264; \n      v_work_idx_4264 = 0; \n      int v_l_id_54667 = atomic_inc(&(v_work_idx_4264)); \n      while((v_l_id_54667 < 1)){\n        int v_tmp_54750 = 0; \n        v__33541 = v_tmp_54750; \n        /* reduce_seq */\n        for (int v_i_54668 = 0; v_i_54668 < v_MWidthC_1; v_i_54668 = (1 + v_i_54668)) {\n          v__33541 = bool_or(v__33541, v__54687[(v_i_54668 + (v_MWidthC_1 * v_l_id_54667))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_54669 = 0; \n          v__54692[v_wg_id_54662] = doubleAndOr(v__33541, v__54674, v__54673[v_wg_id_54662], v__54675); \n        }\n        /* end map_seq */\n        v_l_id_54667 = atomic_inc(&(v_work_idx_4264)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__54670",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54671",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__54672",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__54673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__54674",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__54675",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__54682",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__54692",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__54687",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}