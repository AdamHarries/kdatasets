{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48734, const global int* restrict v__48735, const global int* restrict v__48736, const global int* restrict v__48737, int v__48738, int v__48739, global int* v__48759, global int* v__48741, local int* v__48754, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48743; \n  int v__48745; \n  int v__33541; \n  /* Private Memory */\n  int v__48747_0;\n  \n  int v__48749_0;\n  \n  int v__48753_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3714 = v__48741; \n    local int v_w_id_48727; \n    if (get_local_id(0) == 0) {\n      v_w_id_48727 = atomic_inc(v_work_idx_3714); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48727 < v_MHeight_2)){\n      for (int v_l_id_48728 = get_local_id(0); v_l_id_48728 < v_MWidthC_1; v_l_id_48728 = (v_l_id_48728 + get_local_size(0))) {\n        int v_tmp_48825 = 0; \n        v__48743 = v_tmp_48825; \n        /* reduce_while_seq */\n        for (int v_i_48729 = 0; v_i_48729 < 128; v_i_48729 = (1 + v_i_48729)) {\n          v__48753_0 = check(v__48743, v__48734[(v_l_id_48728 + (128 * v_MWidthC_1 * v_w_id_48727) + (v_MWidthC_1 * v_i_48729))]); \n          if (v__48753_0) {\n          } else {\n            break;\n          }\n          int v_tmp_48826 = 0; \n          v__48745 = v_tmp_48826; \n          int v_index_48827 = v__48734[(v_l_id_48728 + (128 * v_MWidthC_1 * v_w_id_48727) + (v_MWidthC_1 * v_i_48729))]; \n          if (v_index_48827 < 0) {\n            v__48747_0 = v__48745; \n          } else {\n            if (v_index_48827 >= v_VLength_3) {\n              v__48747_0 = v__48745; \n            } else {\n              v__48747_0 = v__48736[v_index_48827]; \n            }\n          }\n          v__48749_0 = bool_and(v__48747_0, v__48735[(v_l_id_48728 + (128 * v_MWidthC_1 * v_w_id_48727) + (v_MWidthC_1 * v_i_48729))]); \n          v__48743 = bool_or(v__48749_0, v__48743); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48730 = 0; \n          v__48754[v_l_id_48728] = id(v__48743); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_48731 = get_local_id(0); \n        int v_tmp_48830 = 0; \n        v__33541 = v_tmp_48830; \n        /* reduce_seq */\n        for (int v_i_48732 = 0; v_i_48732 < v_MWidthC_1; v_i_48732 = (1 + v_i_48732)) {\n          v__33541 = bool_or(v__33541, v__48754[(v_i_48732 + (v_MWidthC_1 * v_l_id_48731))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48733 = 0; \n          v__48759[v_w_id_48727] = doubleAndOr(v__33541, v__48738, v__48737[v_w_id_48727], v__48739); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_48727 = atomic_inc(v_work_idx_3714); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__48734",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48735",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48741",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48759",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__48754",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}