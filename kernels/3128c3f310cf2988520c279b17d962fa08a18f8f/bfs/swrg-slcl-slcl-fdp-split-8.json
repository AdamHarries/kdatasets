{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33630, const global int* restrict v__33631, const global int* restrict v__33632, const global int* restrict v__33633, int v__33634, int v__33635, global int* v__33652, local int* v__33647, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33638; \n  int v__33640; \n  int v__33541; \n  /* Private Memory */\n  int v__33642_0;\n  \n  int v__33644_0;\n  \n  for (int v_wg_id_33623 = get_group_id(0); v_wg_id_33623 < v_MHeight_2; v_wg_id_33623 = (v_wg_id_33623 + get_num_groups(0))) {\n    for (int v_l_id_33624 = get_local_id(0); v_l_id_33624 < v_MWidthC_1; v_l_id_33624 = (v_l_id_33624 + get_local_size(0))) {\n      int v_tmp_33717 = 0; \n      v__33638 = v_tmp_33717; \n      /* reduce_seq */\n      for (int v_i_33625 = 0; v_i_33625 < 8; v_i_33625 = (1 + v_i_33625)) {\n        int v_tmp_33718 = 0; \n        v__33640 = v_tmp_33718; \n        int v_index_33719 = v__33630[(v_l_id_33624 + (8 * v_MWidthC_1 * v_wg_id_33623) + (v_MWidthC_1 * v_i_33625))]; \n        if (v_index_33719 < 0) {\n          v__33642_0 = v__33640; \n        } else {\n          if (v_index_33719 >= v_VLength_3) {\n            v__33642_0 = v__33640; \n          } else {\n            v__33642_0 = v__33632[v_index_33719]; \n          }\n        }\n        v__33644_0 = bool_and(v__33642_0, v__33631[(v_l_id_33624 + (8 * v_MWidthC_1 * v_wg_id_33623) + (v_MWidthC_1 * v_i_33625))]); \n        v__33638 = bool_or(v__33644_0, v__33638); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33626 = 0; \n        v__33647[v_l_id_33624] = id(v__33638); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_33627 = get_local_id(0); \n      int v_tmp_33722 = 0; \n      v__33541 = v_tmp_33722; \n      /* reduce_seq */\n      for (int v_i_33628 = 0; v_i_33628 < v_MWidthC_1; v_i_33628 = (1 + v_i_33628)) {\n        v__33541 = bool_or(v__33541, v__33647[(v_i_33628 + (v_MWidthC_1 * v_l_id_33627))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33629 = 0; \n        v__33652[v_wg_id_33623] = doubleAndOr(v__33541, v__33634, v__33633[v_wg_id_33623], v__33635); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__33630",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33631",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33632",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33633",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33634",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33635",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__33652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__33647",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}