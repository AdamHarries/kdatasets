{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45402, const global int* restrict v__45403, const global int* restrict v__45404, const global int* restrict v__45405, int v__45406, int v__45407, global int* v__45427, global int* v__45409, local int* v__45422, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45411; \n  int v__45413; \n  int v__33541; \n  /* Private Memory */\n  int v__45415_0;\n  \n  int v__45417_0;\n  \n  int v__45421_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3402 = v__45409; \n    local int v_w_id_45395; \n    if (get_local_id(0) == 0) {\n      v_w_id_45395 = atomic_inc(v_work_idx_3402); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45395 < v_MHeight_2)){\n      for (int v_l_id_45396 = get_local_id(0); v_l_id_45396 < v_MWidthC_1; v_l_id_45396 = (v_l_id_45396 + get_local_size(0))) {\n        int v_tmp_45493 = 0; \n        v__45411 = v_tmp_45493; \n        /* reduce_while_seq */\n        for (int v_i_45397 = 0; v_i_45397 < 64; v_i_45397 = (1 + v_i_45397)) {\n          v__45421_0 = check(v__45411, v__45402[(v_l_id_45396 + (64 * v_MWidthC_1 * v_w_id_45395) + (v_MWidthC_1 * v_i_45397))]); \n          if (v__45421_0) {\n          } else {\n            break;\n          }\n          int v_tmp_45494 = 0; \n          v__45413 = v_tmp_45494; \n          int v_index_45495 = v__45402[(v_l_id_45396 + (64 * v_MWidthC_1 * v_w_id_45395) + (v_MWidthC_1 * v_i_45397))]; \n          if (v_index_45495 < 0) {\n            v__45415_0 = v__45413; \n          } else {\n            if (v_index_45495 >= v_VLength_3) {\n              v__45415_0 = v__45413; \n            } else {\n              v__45415_0 = v__45404[v_index_45495]; \n            }\n          }\n          v__45417_0 = bool_and(v__45415_0, v__45403[(v_l_id_45396 + (64 * v_MWidthC_1 * v_w_id_45395) + (v_MWidthC_1 * v_i_45397))]); \n          v__45411 = bool_or(v__45417_0, v__45411); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45398 = 0; \n          v__45422[v_l_id_45396] = id(v__45411); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_45399 = get_local_id(0); \n        int v_tmp_45498 = 0; \n        v__33541 = v_tmp_45498; \n        /* reduce_seq */\n        for (int v_i_45400 = 0; v_i_45400 < v_MWidthC_1; v_i_45400 = (1 + v_i_45400)) {\n          v__33541 = bool_or(v__33541, v__45422[(v_i_45400 + (v_MWidthC_1 * v_l_id_45399))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_45401 = 0; \n          v__45427[v_w_id_45395] = doubleAndOr(v__33541, v__45406, v__45405[v_w_id_45395], v__45407); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45395 = atomic_inc(v_work_idx_3402); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__45402",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45403",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45404",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45406",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45407",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45409",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45427",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__45422",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}