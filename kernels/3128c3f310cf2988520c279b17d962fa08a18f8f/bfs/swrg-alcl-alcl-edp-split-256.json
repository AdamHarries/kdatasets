{
  "name" : "swrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__51526, const global int* restrict v__51527, const global int* restrict v__51528, const global int* restrict v__51529, int v__51530, int v__51531, global int* v__51550, local int* v__51545, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__51534; \n  int v__51536; \n  int v__33541; \n  /* Private Memory */\n  int v__51538_0;\n  \n  int v__51540_0;\n  \n  int v__51544_0;\n  \n  for (int v_wg_id_51519 = get_group_id(0); v_wg_id_51519 < v_MHeight_2; v_wg_id_51519 = (v_wg_id_51519 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3978; \n      v_work_idx_3978 = 0; \n      int v_l_id_51520 = atomic_inc(&(v_work_idx_3978)); \n      while((v_l_id_51520 < v_MWidthC_1)){\n        int v_tmp_51606 = 0; \n        v__51534 = v_tmp_51606; \n        /* reduce_while_seq */\n        for (int v_i_51521 = 0; v_i_51521 < 256; v_i_51521 = (1 + v_i_51521)) {\n          v__51544_0 = check(v__51534, v__51526[(v_l_id_51520 + (256 * v_MWidthC_1 * v_wg_id_51519) + (v_MWidthC_1 * v_i_51521))]); \n          if (v__51544_0) {\n          } else {\n            break;\n          }\n          int v_tmp_51607 = 0; \n          v__51536 = v_tmp_51607; \n          int v_index_51608 = v__51526[(v_l_id_51520 + (256 * v_MWidthC_1 * v_wg_id_51519) + (v_MWidthC_1 * v_i_51521))]; \n          if (v_index_51608 < 0) {\n            v__51538_0 = v__51536; \n          } else {\n            if (v_index_51608 >= v_VLength_3) {\n              v__51538_0 = v__51536; \n            } else {\n              v__51538_0 = v__51528[v_index_51608]; \n            }\n          }\n          v__51540_0 = bool_and(v__51538_0, v__51527[(v_l_id_51520 + (256 * v_MWidthC_1 * v_wg_id_51519) + (v_MWidthC_1 * v_i_51521))]); \n          v__51534 = bool_or(v__51540_0, v__51534); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51522 = 0; \n          v__51545[v_l_id_51520] = id(v__51534); \n        }\n        /* end map_seq */\n        v_l_id_51520 = atomic_inc(&(v_work_idx_3978)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3973; \n      v_work_idx_3973 = 0; \n      int v_l_id_51523 = atomic_inc(&(v_work_idx_3973)); \n      while((v_l_id_51523 < 1)){\n        int v_tmp_51611 = 0; \n        v__33541 = v_tmp_51611; \n        /* reduce_seq */\n        for (int v_i_51524 = 0; v_i_51524 < v_MWidthC_1; v_i_51524 = (1 + v_i_51524)) {\n          v__33541 = bool_or(v__33541, v__51545[(v_i_51524 + (v_MWidthC_1 * v_l_id_51523))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_51525 = 0; \n          v__51550[v_wg_id_51519] = doubleAndOr(v__33541, v__51530, v__51529[v_wg_id_51519], v__51531); \n        }\n        /* end map_seq */\n        v_l_id_51523 = atomic_inc(&(v_work_idx_3973)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__51526",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51527",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__51528",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__51529",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__51530",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__51531",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__51550",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__51545",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}