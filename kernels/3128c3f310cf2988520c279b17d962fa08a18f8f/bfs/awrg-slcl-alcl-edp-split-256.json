{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52379, const global int* restrict v__52380, const global int* restrict v__52381, const global int* restrict v__52382, int v__52383, int v__52384, global int* v__52404, global int* v__52386, local int* v__52399, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52388; \n  int v__52390; \n  int v__33541; \n  /* Private Memory */\n  int v__52392_0;\n  \n  int v__52394_0;\n  \n  int v__52398_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4057 = v__52386; \n    local int v_w_id_52372; \n    if (get_local_id(0) == 0) {\n      v_w_id_52372 = atomic_inc(v_work_idx_4057); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52372 < v_MHeight_2)){\n      for (int v_l_id_52373 = get_local_id(0); v_l_id_52373 < v_MWidthC_1; v_l_id_52373 = (v_l_id_52373 + get_local_size(0))) {\n        int v_tmp_52466 = 0; \n        v__52388 = v_tmp_52466; \n        /* reduce_while_seq */\n        for (int v_i_52374 = 0; v_i_52374 < 256; v_i_52374 = (1 + v_i_52374)) {\n          v__52398_0 = check(v__52388, v__52379[(v_l_id_52373 + (256 * v_MWidthC_1 * v_w_id_52372) + (v_MWidthC_1 * v_i_52374))]); \n          if (v__52398_0) {\n          } else {\n            break;\n          }\n          int v_tmp_52467 = 0; \n          v__52390 = v_tmp_52467; \n          int v_index_52468 = v__52379[(v_l_id_52373 + (256 * v_MWidthC_1 * v_w_id_52372) + (v_MWidthC_1 * v_i_52374))]; \n          if (v_index_52468 < 0) {\n            v__52392_0 = v__52390; \n          } else {\n            if (v_index_52468 >= v_VLength_3) {\n              v__52392_0 = v__52390; \n            } else {\n              v__52392_0 = v__52381[v_index_52468]; \n            }\n          }\n          v__52394_0 = bool_and(v__52392_0, v__52380[(v_l_id_52373 + (256 * v_MWidthC_1 * v_w_id_52372) + (v_MWidthC_1 * v_i_52374))]); \n          v__52388 = bool_or(v__52394_0, v__52388); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52375 = 0; \n          v__52399[v_l_id_52373] = id(v__52388); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4051; \n        v_work_idx_4051 = 0; \n        int v_l_id_52376 = atomic_inc(&(v_work_idx_4051)); \n        while((v_l_id_52376 < 1)){\n          int v_tmp_52471 = 0; \n          v__33541 = v_tmp_52471; \n          /* reduce_seq */\n          for (int v_i_52377 = 0; v_i_52377 < v_MWidthC_1; v_i_52377 = (1 + v_i_52377)) {\n            v__33541 = bool_or(v__33541, v__52399[(v_i_52377 + (v_MWidthC_1 * v_l_id_52376))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52378 = 0; \n            v__52404[v_w_id_52372] = doubleAndOr(v__33541, v__52383, v__52382[v_w_id_52372], v__52384); \n          }\n          /* end map_seq */\n          v_l_id_52376 = atomic_inc(&(v_work_idx_4051)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52372 = atomic_inc(v_work_idx_4057); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__52379",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52380",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52381",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52382",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52383",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52384",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52386",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52404",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52399",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}