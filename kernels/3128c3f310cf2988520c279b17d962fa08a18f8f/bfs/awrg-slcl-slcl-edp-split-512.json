{
  "name" : "awrg-slcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55398, const global int* restrict v__55399, const global int* restrict v__55400, const global int* restrict v__55401, int v__55402, int v__55403, global int* v__55423, global int* v__55405, local int* v__55418, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55407; \n  int v__55409; \n  int v__33541; \n  /* Private Memory */\n  int v__55411_0;\n  \n  int v__55413_0;\n  \n  int v__55417_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4338 = v__55405; \n    local int v_w_id_55391; \n    if (get_local_id(0) == 0) {\n      v_w_id_55391 = atomic_inc(v_work_idx_4338); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55391 < v_MHeight_2)){\n      for (int v_l_id_55392 = get_local_id(0); v_l_id_55392 < v_MWidthC_1; v_l_id_55392 = (v_l_id_55392 + get_local_size(0))) {\n        int v_tmp_55489 = 0; \n        v__55407 = v_tmp_55489; \n        /* reduce_while_seq */\n        for (int v_i_55393 = 0; v_i_55393 < 512; v_i_55393 = (1 + v_i_55393)) {\n          v__55417_0 = check(v__55407, v__55398[(v_l_id_55392 + (512 * v_MWidthC_1 * v_w_id_55391) + (v_MWidthC_1 * v_i_55393))]); \n          if (v__55417_0) {\n          } else {\n            break;\n          }\n          int v_tmp_55490 = 0; \n          v__55409 = v_tmp_55490; \n          int v_index_55491 = v__55398[(v_l_id_55392 + (512 * v_MWidthC_1 * v_w_id_55391) + (v_MWidthC_1 * v_i_55393))]; \n          if (v_index_55491 < 0) {\n            v__55411_0 = v__55409; \n          } else {\n            if (v_index_55491 >= v_VLength_3) {\n              v__55411_0 = v__55409; \n            } else {\n              v__55411_0 = v__55400[v_index_55491]; \n            }\n          }\n          v__55413_0 = bool_and(v__55411_0, v__55399[(v_l_id_55392 + (512 * v_MWidthC_1 * v_w_id_55391) + (v_MWidthC_1 * v_i_55393))]); \n          v__55407 = bool_or(v__55413_0, v__55407); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55394 = 0; \n          v__55418[v_l_id_55392] = id(v__55407); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_55395 = get_local_id(0); \n        int v_tmp_55494 = 0; \n        v__33541 = v_tmp_55494; \n        /* reduce_seq */\n        for (int v_i_55396 = 0; v_i_55396 < v_MWidthC_1; v_i_55396 = (1 + v_i_55396)) {\n          v__33541 = bool_or(v__33541, v__55418[(v_i_55396 + (v_MWidthC_1 * v_l_id_55395))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55397 = 0; \n          v__55423[v_w_id_55391] = doubleAndOr(v__33541, v__55402, v__55401[v_w_id_55391], v__55403); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55391 = atomic_inc(v_work_idx_4338); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__55398",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55399",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55400",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55401",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55402",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55403",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55405",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55423",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55418",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}