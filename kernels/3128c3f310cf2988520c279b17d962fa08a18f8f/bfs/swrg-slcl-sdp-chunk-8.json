{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__33290, const global int* restrict v__33291, const global int* restrict v__33292, const global int* restrict v__33293, int v__33294, int v__33295, global int* v__33308, global int* v__33302, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__33298; \n  int v__33303; \n  /* Private Memory */\n  int v__33300_0;\n  \n  for (int v_wg_id_33285 = get_group_id(0); v_wg_id_33285 < ((v_MHeight_2)/(8)); v_wg_id_33285 = (v_wg_id_33285 + get_num_groups(0))) {\n    for (int v_l_id_33286 = get_local_id(0); v_l_id_33286 < 8; v_l_id_33286 = (v_l_id_33286 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_33287 = 0; v_i_33287 < v_MWidthC_1; v_i_33287 = (1 + v_i_33287)) {\n        int v_tmp_33352 = 0; \n        v__33298 = v_tmp_33352; \n        int v_index_33353 = v__33290[(v_i_33287 + (8 * v_MWidthC_1 * v_wg_id_33285) + (v_MWidthC_1 * v_l_id_33286))]; \n        if (v_index_33353 < 0) {\n          v__33300_0 = v__33298; \n        } else {\n          if (v_index_33353 >= v_VLength_3) {\n            v__33300_0 = v__33298; \n          } else {\n            v__33300_0 = v__33292[v_index_33353]; \n          }\n        }\n        v__33302[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_33285) + (-1 * v_i_33287) + (v_MWidthC_1 * v_l_id_33286))] = bool_and(v__33300_0, v__33291[(v_i_33287 + (8 * v_MWidthC_1 * v_wg_id_33285) + (v_MWidthC_1 * v_l_id_33286))]); \n      }\n      /* end map_seq */\n      int v_tmp_33354 = 0; \n      v__33303 = v_tmp_33354; \n      /* reduce_seq */\n      for (int v_i_33288 = 0; v_i_33288 < v_MWidthC_1; v_i_33288 = (1 + v_i_33288)) {\n        v__33303 = bool_or(v__33303, v__33302[(v_i_33288 + (8 * v_MWidthC_1 * v_wg_id_33285) + (v_MWidthC_1 * v_l_id_33286))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_33289 = 0; \n        v__33308[(v_l_id_33286 + (8 * v_wg_id_33285))] = doubleAndOr(v__33303, v__33294, v__33293[(v_l_id_33286 + (8 * v_wg_id_33285))], v__33295); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__33290",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__33292",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__33293",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__33294",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__33295",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__33302",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__33308",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}