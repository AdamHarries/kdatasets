{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__38104, const global int* restrict v__38105, const global int* restrict v__38106, const global int* restrict v__38107, int v__38108, int v__38109, global int* v__38126, local int* v__38121, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__38112; \n  int v__38114; \n  int v__33541; \n  /* Private Memory */\n  int v__38116_0;\n  \n  int v__38118_0;\n  \n  for (int v_wg_id_38097 = get_group_id(0); v_wg_id_38097 < v_MHeight_2; v_wg_id_38097 = (v_wg_id_38097 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2720; \n      v_work_idx_2720 = 0; \n      int v_l_id_38098 = atomic_inc(&(v_work_idx_2720)); \n      while((v_l_id_38098 < v_MWidthC_1)){\n        int v_tmp_38179 = 0; \n        v__38112 = v_tmp_38179; \n        /* reduce_seq */\n        for (int v_i_38099 = 0; v_i_38099 < 16; v_i_38099 = (1 + v_i_38099)) {\n          int v_tmp_38180 = 0; \n          v__38114 = v_tmp_38180; \n          int v_index_38181 = v__38104[(v_l_id_38098 + (16 * v_MWidthC_1 * v_wg_id_38097) + (v_MWidthC_1 * v_i_38099))]; \n          if (v_index_38181 < 0) {\n            v__38116_0 = v__38114; \n          } else {\n            if (v_index_38181 >= v_VLength_3) {\n              v__38116_0 = v__38114; \n            } else {\n              v__38116_0 = v__38106[v_index_38181]; \n            }\n          }\n          v__38118_0 = bool_and(v__38116_0, v__38105[(v_l_id_38098 + (16 * v_MWidthC_1 * v_wg_id_38097) + (v_MWidthC_1 * v_i_38099))]); \n          v__38112 = bool_or(v__38118_0, v__38112); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38100 = 0; \n          v__38121[v_l_id_38098] = id(v__38112); \n        }\n        /* end map_seq */\n        v_l_id_38098 = atomic_inc(&(v_work_idx_2720)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2715; \n      v_work_idx_2715 = 0; \n      int v_l_id_38101 = atomic_inc(&(v_work_idx_2715)); \n      while((v_l_id_38101 < 1)){\n        int v_tmp_38184 = 0; \n        v__33541 = v_tmp_38184; \n        /* reduce_seq */\n        for (int v_i_38102 = 0; v_i_38102 < v_MWidthC_1; v_i_38102 = (1 + v_i_38102)) {\n          v__33541 = bool_or(v__33541, v__38121[(v_i_38102 + (v_MWidthC_1 * v_l_id_38101))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_38103 = 0; \n          v__38126[v_wg_id_38097] = doubleAndOr(v__33541, v__38108, v__38107[v_wg_id_38097], v__38109); \n        }\n        /* end map_seq */\n        v_l_id_38101 = atomic_inc(&(v_work_idx_2715)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__38104",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38105",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__38106",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__38107",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__38108",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__38109",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__38126",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__38121",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}