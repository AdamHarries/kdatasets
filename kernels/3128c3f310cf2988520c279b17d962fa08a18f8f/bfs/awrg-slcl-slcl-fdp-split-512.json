{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55293, const global int* restrict v__55294, const global int* restrict v__55295, const global int* restrict v__55296, int v__55297, int v__55298, global int* v__55316, global int* v__55300, local int* v__55311, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55302; \n  int v__55304; \n  int v__33541; \n  /* Private Memory */\n  int v__55306_0;\n  \n  int v__55308_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4329 = v__55300; \n    local int v_w_id_55286; \n    if (get_local_id(0) == 0) {\n      v_w_id_55286 = atomic_inc(v_work_idx_4329); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55286 < v_MHeight_2)){\n      for (int v_l_id_55287 = get_local_id(0); v_l_id_55287 < v_MWidthC_1; v_l_id_55287 = (v_l_id_55287 + get_local_size(0))) {\n        int v_tmp_55379 = 0; \n        v__55302 = v_tmp_55379; \n        /* reduce_seq */\n        for (int v_i_55288 = 0; v_i_55288 < 512; v_i_55288 = (1 + v_i_55288)) {\n          int v_tmp_55380 = 0; \n          v__55304 = v_tmp_55380; \n          int v_index_55381 = v__55293[(v_l_id_55287 + (512 * v_MWidthC_1 * v_w_id_55286) + (v_MWidthC_1 * v_i_55288))]; \n          if (v_index_55381 < 0) {\n            v__55306_0 = v__55304; \n          } else {\n            if (v_index_55381 >= v_VLength_3) {\n              v__55306_0 = v__55304; \n            } else {\n              v__55306_0 = v__55295[v_index_55381]; \n            }\n          }\n          v__55308_0 = bool_and(v__55306_0, v__55294[(v_l_id_55287 + (512 * v_MWidthC_1 * v_w_id_55286) + (v_MWidthC_1 * v_i_55288))]); \n          v__55302 = bool_or(v__55308_0, v__55302); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55289 = 0; \n          v__55311[v_l_id_55287] = id(v__55302); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_55290 = get_local_id(0); \n        int v_tmp_55384 = 0; \n        v__33541 = v_tmp_55384; \n        /* reduce_seq */\n        for (int v_i_55291 = 0; v_i_55291 < v_MWidthC_1; v_i_55291 = (1 + v_i_55291)) {\n          v__33541 = bool_or(v__33541, v__55311[(v_i_55291 + (v_MWidthC_1 * v_l_id_55290))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55292 = 0; \n          v__55316[v_w_id_55286] = doubleAndOr(v__33541, v__55297, v__55296[v_w_id_55286], v__55298); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55286 = atomic_inc(v_work_idx_4329); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__55293",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55294",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55295",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55297",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55298",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55300",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55316",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55311",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}