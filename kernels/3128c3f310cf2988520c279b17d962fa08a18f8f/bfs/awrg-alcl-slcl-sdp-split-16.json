{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__39376, const global int* restrict v__39377, const global int* restrict v__39378, const global int* restrict v__39379, int v__39380, int v__39381, global int* v__39399, global int* v__39389, global int* v__39383, local int* v__39394, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__39385; \n  int v__39390; \n  int v__33541; \n  /* Private Memory */\n  int v__39387_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2842 = v__39383; \n    local int v_w_id_39368; \n    if (get_local_id(0) == 0) {\n      v_w_id_39368 = atomic_inc(v_work_idx_2842); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_39368 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2840; \n        v_work_idx_2840 = 0; \n        int v_l_id_39369 = atomic_inc(&(v_work_idx_2840)); \n        while((v_l_id_39369 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_39370 = 0; v_i_39370 < 16; v_i_39370 = (1 + v_i_39370)) {\n            int v_tmp_39454 = 0; \n            v__39385 = v_tmp_39454; \n            int v_index_39455 = v__39376[(v_l_id_39369 + (16 * v_MWidthC_1 * v_w_id_39368) + (v_MWidthC_1 * v_i_39370))]; \n            if (v_index_39455 < 0) {\n              v__39387_0 = v__39385; \n            } else {\n              if (v_index_39455 >= v_VLength_3) {\n                v__39387_0 = v__39385; \n              } else {\n                v__39387_0 = v__39378[v_index_39455]; \n              }\n            }\n            v__39389[(15 + (16 * v_MWidthC_1 * v_w_id_39368) + (-1 * v_i_39370) + (16 * v_l_id_39369))] = bool_and(v__39387_0, v__39377[(v_l_id_39369 + (16 * v_MWidthC_1 * v_w_id_39368) + (v_MWidthC_1 * v_i_39370))]); \n          }\n          /* end map_seq */\n          int v_tmp_39456 = 0; \n          v__39390 = v_tmp_39456; \n          /* reduce_seq */\n          for (int v_i_39371 = 0; v_i_39371 < 16; v_i_39371 = (1 + v_i_39371)) {\n            v__39390 = bool_or(v__39390, v__39389[(v_i_39371 + (16 * v_MWidthC_1 * v_w_id_39368) + (16 * v_l_id_39369))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_39372 = 0; \n            v__39394[v_l_id_39369] = id(v__39390); \n          }\n          /* end map_seq */\n          v_l_id_39369 = atomic_inc(&(v_work_idx_2840)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_39373 = get_local_id(0); \n        int v_tmp_39459 = 0; \n        v__33541 = v_tmp_39459; \n        /* reduce_seq */\n        for (int v_i_39374 = 0; v_i_39374 < v_MWidthC_1; v_i_39374 = (1 + v_i_39374)) {\n          v__33541 = bool_or(v__33541, v__39394[(v_i_39374 + (v_MWidthC_1 * v_l_id_39373))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_39375 = 0; \n          v__39399[v_w_id_39368] = doubleAndOr(v__33541, v__39380, v__39379[v_w_id_39368], v__39381); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_39368 = atomic_inc(v_work_idx_2842); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__39376",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39377",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39378",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__39379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__39380",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__39381",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__39389",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__39383",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__39399",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__39394",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}