{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__42708, const global int* restrict v__42709, const global int* restrict v__42710, const global int* restrict v__42711, int v__42712, int v__42713, global int* v__42731, global int* v__42721, global int* v__42715, local int* v__42726, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__42717; \n  int v__42722; \n  int v__33541; \n  /* Private Memory */\n  int v__42719_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3154 = v__42715; \n    local int v_w_id_42700; \n    if (get_local_id(0) == 0) {\n      v_w_id_42700 = atomic_inc(v_work_idx_3154); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_42700 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3152; \n        v_work_idx_3152 = 0; \n        int v_l_id_42701 = atomic_inc(&(v_work_idx_3152)); \n        while((v_l_id_42701 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_42702 = 0; v_i_42702 < 32; v_i_42702 = (1 + v_i_42702)) {\n            int v_tmp_42786 = 0; \n            v__42717 = v_tmp_42786; \n            int v_index_42787 = v__42708[(v_l_id_42701 + (32 * v_MWidthC_1 * v_w_id_42700) + (v_MWidthC_1 * v_i_42702))]; \n            if (v_index_42787 < 0) {\n              v__42719_0 = v__42717; \n            } else {\n              if (v_index_42787 >= v_VLength_3) {\n                v__42719_0 = v__42717; \n              } else {\n                v__42719_0 = v__42710[v_index_42787]; \n              }\n            }\n            v__42721[(31 + (32 * v_MWidthC_1 * v_w_id_42700) + (-1 * v_i_42702) + (32 * v_l_id_42701))] = bool_and(v__42719_0, v__42709[(v_l_id_42701 + (32 * v_MWidthC_1 * v_w_id_42700) + (v_MWidthC_1 * v_i_42702))]); \n          }\n          /* end map_seq */\n          int v_tmp_42788 = 0; \n          v__42722 = v_tmp_42788; \n          /* reduce_seq */\n          for (int v_i_42703 = 0; v_i_42703 < 32; v_i_42703 = (1 + v_i_42703)) {\n            v__42722 = bool_or(v__42722, v__42721[(v_i_42703 + (32 * v_MWidthC_1 * v_w_id_42700) + (32 * v_l_id_42701))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_42704 = 0; \n            v__42726[v_l_id_42701] = id(v__42722); \n          }\n          /* end map_seq */\n          v_l_id_42701 = atomic_inc(&(v_work_idx_3152)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_42705 = get_local_id(0); \n        int v_tmp_42791 = 0; \n        v__33541 = v_tmp_42791; \n        /* reduce_seq */\n        for (int v_i_42706 = 0; v_i_42706 < v_MWidthC_1; v_i_42706 = (1 + v_i_42706)) {\n          v__33541 = bool_or(v__33541, v__42726[(v_i_42706 + (v_MWidthC_1 * v_l_id_42705))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_42707 = 0; \n          v__42731[v_w_id_42700] = doubleAndOr(v__33541, v__42712, v__42711[v_w_id_42700], v__42713); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_42700 = atomic_inc(v_work_idx_3154); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__42708",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42709",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42710",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__42711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__42712",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__42713",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__42721",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__42715",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__42731",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__42726",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}