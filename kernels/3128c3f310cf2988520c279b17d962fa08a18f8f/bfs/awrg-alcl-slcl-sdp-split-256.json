{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__52704, const global int* restrict v__52705, const global int* restrict v__52706, const global int* restrict v__52707, int v__52708, int v__52709, global int* v__52727, global int* v__52717, global int* v__52711, local int* v__52722, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__52713; \n  int v__52718; \n  int v__33541; \n  /* Private Memory */\n  int v__52715_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4090 = v__52711; \n    local int v_w_id_52696; \n    if (get_local_id(0) == 0) {\n      v_w_id_52696 = atomic_inc(v_work_idx_4090); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_52696 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4088; \n        v_work_idx_4088 = 0; \n        int v_l_id_52697 = atomic_inc(&(v_work_idx_4088)); \n        while((v_l_id_52697 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_52698 = 0; v_i_52698 < 256; v_i_52698 = (1 + v_i_52698)) {\n            int v_tmp_52782 = 0; \n            v__52713 = v_tmp_52782; \n            int v_index_52783 = v__52704[(v_l_id_52697 + (256 * v_MWidthC_1 * v_w_id_52696) + (v_MWidthC_1 * v_i_52698))]; \n            if (v_index_52783 < 0) {\n              v__52715_0 = v__52713; \n            } else {\n              if (v_index_52783 >= v_VLength_3) {\n                v__52715_0 = v__52713; \n              } else {\n                v__52715_0 = v__52706[v_index_52783]; \n              }\n            }\n            v__52717[(255 + (256 * v_MWidthC_1 * v_w_id_52696) + (-1 * v_i_52698) + (256 * v_l_id_52697))] = bool_and(v__52715_0, v__52705[(v_l_id_52697 + (256 * v_MWidthC_1 * v_w_id_52696) + (v_MWidthC_1 * v_i_52698))]); \n          }\n          /* end map_seq */\n          int v_tmp_52784 = 0; \n          v__52718 = v_tmp_52784; \n          /* reduce_seq */\n          for (int v_i_52699 = 0; v_i_52699 < 256; v_i_52699 = (1 + v_i_52699)) {\n            v__52718 = bool_or(v__52718, v__52717[(v_i_52699 + (256 * v_MWidthC_1 * v_w_id_52696) + (256 * v_l_id_52697))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_52700 = 0; \n            v__52722[v_l_id_52697] = id(v__52718); \n          }\n          /* end map_seq */\n          v_l_id_52697 = atomic_inc(&(v_work_idx_4088)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_52701 = get_local_id(0); \n        int v_tmp_52787 = 0; \n        v__33541 = v_tmp_52787; \n        /* reduce_seq */\n        for (int v_i_52702 = 0; v_i_52702 < v_MWidthC_1; v_i_52702 = (1 + v_i_52702)) {\n          v__33541 = bool_or(v__33541, v__52722[(v_i_52702 + (v_MWidthC_1 * v_l_id_52701))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_52703 = 0; \n          v__52727[v_w_id_52696] = doubleAndOr(v__33541, v__52708, v__52707[v_w_id_52696], v__52709); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_52696 = atomic_inc(v_work_idx_4090); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__52704",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52705",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52706",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__52707",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__52708",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__52709",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__52717",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__52711",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__52727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__52722",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}