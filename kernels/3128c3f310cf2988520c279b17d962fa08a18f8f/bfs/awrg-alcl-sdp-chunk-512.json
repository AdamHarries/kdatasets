{
  "name" : "awrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55815, const global int* restrict v__55816, const global int* restrict v__55817, const global int* restrict v__55818, int v__55819, int v__55820, global int* v__55834, global int* v__55828, global int* v__55822, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55824; \n  int v__55829; \n  /* Private Memory */\n  int v__55826_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4377 = v__55822; \n    local int v_w_id_55810; \n    if (get_local_id(0) == 0) {\n      v_w_id_55810 = atomic_inc(v_work_idx_4377); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55810 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4375; \n        v_work_idx_4375 = 0; \n        int v_l_id_55811 = atomic_inc(&(v_work_idx_4375)); \n        while((v_l_id_55811 < 512)){\n          /* map_seq */\n          for (int v_i_55812 = 0; v_i_55812 < v_MWidthC_1; v_i_55812 = (1 + v_i_55812)) {\n            int v_tmp_55873 = 0; \n            v__55824 = v_tmp_55873; \n            int v_index_55874 = v__55815[(v_i_55812 + (512 * v_MWidthC_1 * v_w_id_55810) + (v_MWidthC_1 * v_l_id_55811))]; \n            if (v_index_55874 < 0) {\n              v__55826_0 = v__55824; \n            } else {\n              if (v_index_55874 >= v_VLength_3) {\n                v__55826_0 = v__55824; \n              } else {\n                v__55826_0 = v__55817[v_index_55874]; \n              }\n            }\n            v__55828[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_55810) + (-1 * v_i_55812) + (v_MWidthC_1 * v_l_id_55811))] = bool_and(v__55826_0, v__55816[(v_i_55812 + (512 * v_MWidthC_1 * v_w_id_55810) + (v_MWidthC_1 * v_l_id_55811))]); \n          }\n          /* end map_seq */\n          int v_tmp_55875 = 0; \n          v__55829 = v_tmp_55875; \n          /* reduce_seq */\n          for (int v_i_55813 = 0; v_i_55813 < v_MWidthC_1; v_i_55813 = (1 + v_i_55813)) {\n            v__55829 = bool_or(v__55829, v__55828[(v_i_55813 + (512 * v_MWidthC_1 * v_w_id_55810) + (v_MWidthC_1 * v_l_id_55811))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_55814 = 0; \n            v__55834[(v_l_id_55811 + (512 * v_w_id_55810))] = doubleAndOr(v__55829, v__55819, v__55818[(v_l_id_55811 + (512 * v_w_id_55810))], v__55820); \n          }\n          /* end map_seq */\n          v_l_id_55811 = atomic_inc(&(v_work_idx_4375)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55810 = atomic_inc(v_work_idx_4377); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__55815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55816",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55817",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55818",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55819",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55820",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55822",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55834",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}