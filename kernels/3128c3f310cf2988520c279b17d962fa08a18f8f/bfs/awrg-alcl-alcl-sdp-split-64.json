{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__46337, const global int* restrict v__46338, const global int* restrict v__46339, const global int* restrict v__46340, int v__46341, int v__46342, global int* v__46360, global int* v__46350, global int* v__46344, local int* v__46355, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__46346; \n  int v__46351; \n  int v__33541; \n  /* Private Memory */\n  int v__46348_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3498 = v__46344; \n    local int v_w_id_46329; \n    if (get_local_id(0) == 0) {\n      v_w_id_46329 = atomic_inc(v_work_idx_3498); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_46329 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3496; \n        v_work_idx_3496 = 0; \n        int v_l_id_46330 = atomic_inc(&(v_work_idx_3496)); \n        while((v_l_id_46330 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_46331 = 0; v_i_46331 < 64; v_i_46331 = (1 + v_i_46331)) {\n            int v_tmp_46411 = 0; \n            v__46346 = v_tmp_46411; \n            int v_index_46412 = v__46337[(v_l_id_46330 + (64 * v_MWidthC_1 * v_w_id_46329) + (v_MWidthC_1 * v_i_46331))]; \n            if (v_index_46412 < 0) {\n              v__46348_0 = v__46346; \n            } else {\n              if (v_index_46412 >= v_VLength_3) {\n                v__46348_0 = v__46346; \n              } else {\n                v__46348_0 = v__46339[v_index_46412]; \n              }\n            }\n            v__46350[(63 + (64 * v_MWidthC_1 * v_w_id_46329) + (-1 * v_i_46331) + (64 * v_l_id_46330))] = bool_and(v__46348_0, v__46338[(v_l_id_46330 + (64 * v_MWidthC_1 * v_w_id_46329) + (v_MWidthC_1 * v_i_46331))]); \n          }\n          /* end map_seq */\n          int v_tmp_46413 = 0; \n          v__46351 = v_tmp_46413; \n          /* reduce_seq */\n          for (int v_i_46332 = 0; v_i_46332 < 64; v_i_46332 = (1 + v_i_46332)) {\n            v__46351 = bool_or(v__46351, v__46350[(v_i_46332 + (64 * v_MWidthC_1 * v_w_id_46329) + (64 * v_l_id_46330))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46333 = 0; \n            v__46355[v_l_id_46330] = id(v__46351); \n          }\n          /* end map_seq */\n          v_l_id_46330 = atomic_inc(&(v_work_idx_3496)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_3490; \n        v_work_idx_3490 = 0; \n        int v_l_id_46334 = atomic_inc(&(v_work_idx_3490)); \n        while((v_l_id_46334 < 1)){\n          int v_tmp_46416 = 0; \n          v__33541 = v_tmp_46416; \n          /* reduce_seq */\n          for (int v_i_46335 = 0; v_i_46335 < v_MWidthC_1; v_i_46335 = (1 + v_i_46335)) {\n            v__33541 = bool_or(v__33541, v__46355[(v_i_46335 + (v_MWidthC_1 * v_l_id_46334))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_46336 = 0; \n            v__46360[v_w_id_46329] = doubleAndOr(v__33541, v__46341, v__46340[v_w_id_46329], v__46342); \n          }\n          /* end map_seq */\n          v_l_id_46334 = atomic_inc(&(v_work_idx_3490)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_46329 = atomic_inc(v_work_idx_3498); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__46337",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46338",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46339",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__46340",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__46341",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__46342",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__46350",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__46344",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__46360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__46355",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}