{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__48439, const global int* restrict v__48440, const global int* restrict v__48441, const global int* restrict v__48442, int v__48443, int v__48444, global int* v__48460, global int* v__48446, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__48447; \n  int v__48450; \n  /* Private Memory */\n  int v__48452_0;\n  \n  int v__48454_0;\n  \n  int v__48458_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3686 = v__48446; \n    local int v_w_id_48435; \n    if (get_local_id(0) == 0) {\n      v_w_id_48435 = atomic_inc(v_work_idx_3686); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_48435 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_48436 = get_local_id(0); v_l_id_48436 < 128; v_l_id_48436 = (v_l_id_48436 + get_local_size(0))) {\n        int v_tmp_48507 = 0; \n        v__48447 = v_tmp_48507; \n        /* reduce_while_seq */\n        for (int v_i_48437 = 0; v_i_48437 < v_MWidthC_1; v_i_48437 = (1 + v_i_48437)) {\n          v__48458_0 = check(v__48447, v__48439[(v_i_48437 + (128 * v_MWidthC_1 * v_w_id_48435) + (v_MWidthC_1 * v_l_id_48436))]); \n          if (v__48458_0) {\n          } else {\n            break;\n          }\n          int v_tmp_48508 = 0; \n          v__48450 = v_tmp_48508; \n          int v_index_48509 = v__48439[(v_i_48437 + (128 * v_MWidthC_1 * v_w_id_48435) + (v_MWidthC_1 * v_l_id_48436))]; \n          if (v_index_48509 < 0) {\n            v__48452_0 = v__48450; \n          } else {\n            if (v_index_48509 >= v_VLength_3) {\n              v__48452_0 = v__48450; \n            } else {\n              v__48452_0 = v__48441[v_index_48509]; \n            }\n          }\n          v__48454_0 = bool_and(v__48452_0, v__48440[(v_i_48437 + (128 * v_MWidthC_1 * v_w_id_48435) + (v_MWidthC_1 * v_l_id_48436))]); \n          v__48447 = bool_or(v__48454_0, v__48447); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_48438 = 0; \n          v__48460[(v_l_id_48436 + (128 * v_w_id_48435))] = doubleAndOr(v__48447, v__48443, v__48442[(v_l_id_48436 + (128 * v_w_id_48435))], v__48444); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_48435 = atomic_inc(v_work_idx_3686); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__48439",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48440",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__48441",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__48442",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__48443",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__48444",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__48446",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__48460",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}