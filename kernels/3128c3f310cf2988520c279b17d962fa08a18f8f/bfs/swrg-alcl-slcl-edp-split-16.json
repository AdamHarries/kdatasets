{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__37906, const global int* restrict v__37907, const global int* restrict v__37908, const global int* restrict v__37909, int v__37910, int v__37911, global int* v__37930, local int* v__37925, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__37914; \n  int v__37916; \n  int v__33541; \n  /* Private Memory */\n  int v__37918_0;\n  \n  int v__37920_0;\n  \n  int v__37924_0;\n  \n  for (int v_wg_id_37899 = get_group_id(0); v_wg_id_37899 < v_MHeight_2; v_wg_id_37899 = (v_wg_id_37899 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2699; \n      v_work_idx_2699 = 0; \n      int v_l_id_37900 = atomic_inc(&(v_work_idx_2699)); \n      while((v_l_id_37900 < v_MWidthC_1)){\n        int v_tmp_37990 = 0; \n        v__37914 = v_tmp_37990; \n        /* reduce_while_seq */\n        for (int v_i_37901 = 0; v_i_37901 < 16; v_i_37901 = (1 + v_i_37901)) {\n          v__37924_0 = check(v__37914, v__37906[(v_l_id_37900 + (16 * v_MWidthC_1 * v_wg_id_37899) + (v_MWidthC_1 * v_i_37901))]); \n          if (v__37924_0) {\n          } else {\n            break;\n          }\n          int v_tmp_37991 = 0; \n          v__37916 = v_tmp_37991; \n          int v_index_37992 = v__37906[(v_l_id_37900 + (16 * v_MWidthC_1 * v_wg_id_37899) + (v_MWidthC_1 * v_i_37901))]; \n          if (v_index_37992 < 0) {\n            v__37918_0 = v__37916; \n          } else {\n            if (v_index_37992 >= v_VLength_3) {\n              v__37918_0 = v__37916; \n            } else {\n              v__37918_0 = v__37908[v_index_37992]; \n            }\n          }\n          v__37920_0 = bool_and(v__37918_0, v__37907[(v_l_id_37900 + (16 * v_MWidthC_1 * v_wg_id_37899) + (v_MWidthC_1 * v_i_37901))]); \n          v__37914 = bool_or(v__37920_0, v__37914); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_37902 = 0; \n          v__37925[v_l_id_37900] = id(v__37914); \n        }\n        /* end map_seq */\n        v_l_id_37900 = atomic_inc(&(v_work_idx_2699)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_37903 = get_local_id(0); \n      int v_tmp_37995 = 0; \n      v__33541 = v_tmp_37995; \n      /* reduce_seq */\n      for (int v_i_37904 = 0; v_i_37904 < v_MWidthC_1; v_i_37904 = (1 + v_i_37904)) {\n        v__33541 = bool_or(v__33541, v__37925[(v_i_37904 + (v_MWidthC_1 * v_l_id_37903))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_37905 = 0; \n        v__37930[v_wg_id_37899] = doubleAndOr(v__33541, v__37910, v__37909[v_wg_id_37899], v__37911); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__37906",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37907",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__37908",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__37909",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__37910",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__37911",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__37930",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__37925",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}