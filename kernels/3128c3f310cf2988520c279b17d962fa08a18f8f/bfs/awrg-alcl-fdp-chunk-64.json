{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__45890, const global int* restrict v__45891, const global int* restrict v__45892, const global int* restrict v__45893, int v__45894, int v__45895, global int* v__45909, global int* v__45897, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__45899; \n  int v__45901; \n  /* Private Memory */\n  int v__45903_0;\n  \n  int v__45905_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_3448 = v__45897; \n    local int v_w_id_45886; \n    if (get_local_id(0) == 0) {\n      v_w_id_45886 = atomic_inc(v_work_idx_3448); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_45886 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_3446; \n        v_work_idx_3446 = 0; \n        int v_l_id_45887 = atomic_inc(&(v_work_idx_3446)); \n        while((v_l_id_45887 < 64)){\n          int v_tmp_45946 = 0; \n          v__45899 = v_tmp_45946; \n          /* reduce_seq */\n          for (int v_i_45888 = 0; v_i_45888 < v_MWidthC_1; v_i_45888 = (1 + v_i_45888)) {\n            int v_tmp_45947 = 0; \n            v__45901 = v_tmp_45947; \n            int v_index_45948 = v__45890[(v_i_45888 + (64 * v_MWidthC_1 * v_w_id_45886) + (v_MWidthC_1 * v_l_id_45887))]; \n            if (v_index_45948 < 0) {\n              v__45903_0 = v__45901; \n            } else {\n              if (v_index_45948 >= v_VLength_3) {\n                v__45903_0 = v__45901; \n              } else {\n                v__45903_0 = v__45892[v_index_45948]; \n              }\n            }\n            v__45905_0 = bool_and(v__45903_0, v__45891[(v_i_45888 + (64 * v_MWidthC_1 * v_w_id_45886) + (v_MWidthC_1 * v_l_id_45887))]); \n            v__45899 = bool_or(v__45905_0, v__45899); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_45889 = 0; \n            v__45909[(v_l_id_45887 + (64 * v_w_id_45886))] = doubleAndOr(v__45899, v__45894, v__45893[(v_l_id_45887 + (64 * v_w_id_45886))], v__45895); \n          }\n          /* end map_seq */\n          v_l_id_45887 = atomic_inc(&(v_work_idx_3446)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_45886 = atomic_inc(v_work_idx_3448); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__45890",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__45892",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__45893",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__45894",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__45895",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__45897",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__45909",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}