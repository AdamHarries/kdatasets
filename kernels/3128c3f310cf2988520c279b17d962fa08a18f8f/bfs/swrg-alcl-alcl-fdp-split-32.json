{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__41436, const global int* restrict v__41437, const global int* restrict v__41438, const global int* restrict v__41439, int v__41440, int v__41441, global int* v__41458, local int* v__41453, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__41444; \n  int v__41446; \n  int v__33541; \n  /* Private Memory */\n  int v__41448_0;\n  \n  int v__41450_0;\n  \n  for (int v_wg_id_41429 = get_group_id(0); v_wg_id_41429 < v_MHeight_2; v_wg_id_41429 = (v_wg_id_41429 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_3032; \n      v_work_idx_3032 = 0; \n      int v_l_id_41430 = atomic_inc(&(v_work_idx_3032)); \n      while((v_l_id_41430 < v_MWidthC_1)){\n        int v_tmp_41511 = 0; \n        v__41444 = v_tmp_41511; \n        /* reduce_seq */\n        for (int v_i_41431 = 0; v_i_41431 < 32; v_i_41431 = (1 + v_i_41431)) {\n          int v_tmp_41512 = 0; \n          v__41446 = v_tmp_41512; \n          int v_index_41513 = v__41436[(v_l_id_41430 + (32 * v_MWidthC_1 * v_wg_id_41429) + (v_MWidthC_1 * v_i_41431))]; \n          if (v_index_41513 < 0) {\n            v__41448_0 = v__41446; \n          } else {\n            if (v_index_41513 >= v_VLength_3) {\n              v__41448_0 = v__41446; \n            } else {\n              v__41448_0 = v__41438[v_index_41513]; \n            }\n          }\n          v__41450_0 = bool_and(v__41448_0, v__41437[(v_l_id_41430 + (32 * v_MWidthC_1 * v_wg_id_41429) + (v_MWidthC_1 * v_i_41431))]); \n          v__41444 = bool_or(v__41450_0, v__41444); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41432 = 0; \n          v__41453[v_l_id_41430] = id(v__41444); \n        }\n        /* end map_seq */\n        v_l_id_41430 = atomic_inc(&(v_work_idx_3032)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_3027; \n      v_work_idx_3027 = 0; \n      int v_l_id_41433 = atomic_inc(&(v_work_idx_3027)); \n      while((v_l_id_41433 < 1)){\n        int v_tmp_41516 = 0; \n        v__33541 = v_tmp_41516; \n        /* reduce_seq */\n        for (int v_i_41434 = 0; v_i_41434 < v_MWidthC_1; v_i_41434 = (1 + v_i_41434)) {\n          v__33541 = bool_or(v__33541, v__41453[(v_i_41434 + (v_MWidthC_1 * v_l_id_41433))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_41435 = 0; \n          v__41458[v_wg_id_41429] = doubleAndOr(v__33541, v__41440, v__41439[v_wg_id_41429], v__41441); \n        }\n        /* end map_seq */\n        v_l_id_41433 = atomic_inc(&(v_work_idx_3027)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__41436",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41437",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__41438",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__41439",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__41440",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__41441",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__41458",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__41453",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}