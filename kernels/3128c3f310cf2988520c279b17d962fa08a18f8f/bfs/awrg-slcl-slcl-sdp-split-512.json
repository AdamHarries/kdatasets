{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__55188, const global int* restrict v__55189, const global int* restrict v__55190, const global int* restrict v__55191, int v__55192, int v__55193, global int* v__55211, global int* v__55201, global int* v__55195, local int* v__55206, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__55197; \n  int v__55202; \n  int v__33541; \n  /* Private Memory */\n  int v__55199_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4320 = v__55195; \n    local int v_w_id_55180; \n    if (get_local_id(0) == 0) {\n      v_w_id_55180 = atomic_inc(v_work_idx_4320); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_55180 < v_MHeight_2)){\n      for (int v_l_id_55181 = get_local_id(0); v_l_id_55181 < v_MWidthC_1; v_l_id_55181 = (v_l_id_55181 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_55182 = 0; v_i_55182 < 512; v_i_55182 = (1 + v_i_55182)) {\n          int v_tmp_55274 = 0; \n          v__55197 = v_tmp_55274; \n          int v_index_55275 = v__55188[(v_l_id_55181 + (512 * v_MWidthC_1 * v_w_id_55180) + (v_MWidthC_1 * v_i_55182))]; \n          if (v_index_55275 < 0) {\n            v__55199_0 = v__55197; \n          } else {\n            if (v_index_55275 >= v_VLength_3) {\n              v__55199_0 = v__55197; \n            } else {\n              v__55199_0 = v__55190[v_index_55275]; \n            }\n          }\n          v__55201[(511 + (512 * v_MWidthC_1 * v_w_id_55180) + (-1 * v_i_55182) + (512 * v_l_id_55181))] = bool_and(v__55199_0, v__55189[(v_l_id_55181 + (512 * v_MWidthC_1 * v_w_id_55180) + (v_MWidthC_1 * v_i_55182))]); \n        }\n        /* end map_seq */\n        int v_tmp_55276 = 0; \n        v__55202 = v_tmp_55276; \n        /* reduce_seq */\n        for (int v_i_55183 = 0; v_i_55183 < 512; v_i_55183 = (1 + v_i_55183)) {\n          v__55202 = bool_or(v__55202, v__55201[(v_i_55183 + (512 * v_MWidthC_1 * v_w_id_55180) + (512 * v_l_id_55181))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55184 = 0; \n          v__55206[v_l_id_55181] = id(v__55202); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_55185 = get_local_id(0); \n        int v_tmp_55279 = 0; \n        v__33541 = v_tmp_55279; \n        /* reduce_seq */\n        for (int v_i_55186 = 0; v_i_55186 < v_MWidthC_1; v_i_55186 = (1 + v_i_55186)) {\n          v__33541 = bool_or(v__33541, v__55206[(v_i_55186 + (v_MWidthC_1 * v_l_id_55185))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_55187 = 0; \n          v__55211[v_w_id_55180] = doubleAndOr(v__33541, v__55192, v__55191[v_w_id_55180], v__55193); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_55180 = atomic_inc(v_work_idx_4320); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__55188",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55189",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55190",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__55191",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__55192",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__55193",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__55201",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__55195",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__55211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__55206",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}