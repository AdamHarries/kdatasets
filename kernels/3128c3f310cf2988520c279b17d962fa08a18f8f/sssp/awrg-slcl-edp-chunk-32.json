{
  "name" : "awrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65623, const global float* restrict v__65624, const global float* restrict v__65625, const global float* restrict v__65626, float v__65627, float v__65628, global float* v__65644, global int* v__65630, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65631; \n  float v__65634; \n  /* Private Memory */\n  float v__65636_0;\n  \n  float v__65638_0;\n  \n  int v__65642_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5289 = v__65630; \n    local int v_w_id_65619; \n    if (get_local_id(0) == 0) {\n      v_w_id_65619 = atomic_inc(v_work_idx_5289); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65619 < ((v_MHeight_2)/(32)))){\n      for (int v_l_id_65620 = get_local_id(0); v_l_id_65620 < 32; v_l_id_65620 = (v_l_id_65620 + get_local_size(0))) {\n        float v_tmp_65691 = 3.4028235E38f; \n        v__65631 = v_tmp_65691; \n        /* reduce_while_seq */\n        for (int v_i_65621 = 0; v_i_65621 < v_MWidthC_1; v_i_65621 = (1 + v_i_65621)) {\n          v__65642_0 = check(v__65631, v__65623[(v_i_65621 + (32 * v_MWidthC_1 * v_w_id_65619) + (v_MWidthC_1 * v_l_id_65620))]); \n          if (v__65642_0) {\n          } else {\n            break;\n          }\n          float v_tmp_65692 = 3.4028235E38f; \n          v__65634 = v_tmp_65692; \n          int v_index_65693 = v__65623[(v_i_65621 + (32 * v_MWidthC_1 * v_w_id_65619) + (v_MWidthC_1 * v_l_id_65620))]; \n          if (v_index_65693 < 0) {\n            v__65636_0 = v__65634; \n          } else {\n            if (v_index_65693 >= v_VLength_3) {\n              v__65636_0 = v__65634; \n            } else {\n              v__65636_0 = v__65625[v_index_65693]; \n            }\n          }\n          v__65638_0 = absadd(v__65636_0, v__65624[(v_i_65621 + (32 * v_MWidthC_1 * v_w_id_65619) + (v_MWidthC_1 * v_l_id_65620))]); \n          v__65631 = clmin(v__65638_0, v__65631); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65622 = 0; \n          v__65644[(v_l_id_65620 + (32 * v_w_id_65619))] = doubleMultiplyAdd(v__65631, v__65627, v__65626[(v_l_id_65620 + (32 * v_w_id_65619))], v__65628); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_65619 = atomic_inc(v_work_idx_5289); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65624",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65625",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65626",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65627",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65628",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65630",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65644",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}