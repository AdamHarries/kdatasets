{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79458, const global float* restrict v__79459, const global float* restrict v__79460, const global float* restrict v__79461, float v__79462, float v__79463, global float* v__79481, global int* v__79465, local float* v__79476, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79467; \n  float v__79469; \n  float v__57389; \n  /* Private Memory */\n  float v__79471_0;\n  \n  float v__79473_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6586 = v__79465; \n    local int v_w_id_79451; \n    if (get_local_id(0) == 0) {\n      v_w_id_79451 = atomic_inc(v_work_idx_6586); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79451 < v_MHeight_2)){\n      for (int v_l_id_79452 = get_local_id(0); v_l_id_79452 < v_MWidthC_1; v_l_id_79452 = (v_l_id_79452 + get_local_size(0))) {\n        float v_tmp_79540 = 3.4028235E38f; \n        v__79467 = v_tmp_79540; \n        /* reduce_seq */\n        for (int v_i_79453 = 0; v_i_79453 < 512; v_i_79453 = (1 + v_i_79453)) {\n          float v_tmp_79541 = 3.4028235E38f; \n          v__79469 = v_tmp_79541; \n          int v_index_79542 = v__79458[(v_l_id_79452 + (512 * v_MWidthC_1 * v_w_id_79451) + (v_MWidthC_1 * v_i_79453))]; \n          if (v_index_79542 < 0) {\n            v__79471_0 = v__79469; \n          } else {\n            if (v_index_79542 >= v_VLength_3) {\n              v__79471_0 = v__79469; \n            } else {\n              v__79471_0 = v__79460[v_index_79542]; \n            }\n          }\n          v__79473_0 = absadd(v__79471_0, v__79459[(v_l_id_79452 + (512 * v_MWidthC_1 * v_w_id_79451) + (v_MWidthC_1 * v_i_79453))]); \n          v__79467 = clmin(v__79473_0, v__79467); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79454 = 0; \n          v__79476[v_l_id_79452] = id(v__79467); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6580; \n        v_work_idx_6580 = 0; \n        int v_l_id_79455 = atomic_inc(&(v_work_idx_6580)); \n        while((v_l_id_79455 < 1)){\n          float v_tmp_79545 = 3.4028235E38f; \n          v__57389 = v_tmp_79545; \n          /* reduce_seq */\n          for (int v_i_79456 = 0; v_i_79456 < v_MWidthC_1; v_i_79456 = (1 + v_i_79456)) {\n            v__57389 = clmin(v__57389, v__79476[(v_i_79456 + (v_MWidthC_1 * v_l_id_79455))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79457 = 0; \n            v__79481[v_w_id_79451] = doubleMultiplyAdd(v__57389, v__79462, v__79461[v_w_id_79451], v__79463); \n          }\n          /* end map_seq */\n          v_l_id_79455 = atomic_inc(&(v_work_idx_6580)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79451 = atomic_inc(v_work_idx_6586); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79458",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79459",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79460",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79461",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79462",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79463",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79465",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79476",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}