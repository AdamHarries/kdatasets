{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62697, const global float* restrict v__62698, const global float* restrict v__62699, const global float* restrict v__62700, float v__62701, float v__62702, global float* v__62720, global float* v__62710, global int* v__62704, local float* v__62715, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62706; \n  float v__62711; \n  float v__57389; \n  /* Private Memory */\n  float v__62708_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5016 = v__62704; \n    local int v_w_id_62689; \n    if (get_local_id(0) == 0) {\n      v_w_id_62689 = atomic_inc(v_work_idx_5016); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62689 < v_MHeight_2)){\n      for (int v_l_id_62690 = get_local_id(0); v_l_id_62690 < v_MWidthC_1; v_l_id_62690 = (v_l_id_62690 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_62691 = 0; v_i_62691 < 16; v_i_62691 = (1 + v_i_62691)) {\n          float v_tmp_62779 = 3.4028235E38f; \n          v__62706 = v_tmp_62779; \n          int v_index_62780 = v__62697[(v_l_id_62690 + (16 * v_MWidthC_1 * v_w_id_62689) + (v_MWidthC_1 * v_i_62691))]; \n          if (v_index_62780 < 0) {\n            v__62708_0 = v__62706; \n          } else {\n            if (v_index_62780 >= v_VLength_3) {\n              v__62708_0 = v__62706; \n            } else {\n              v__62708_0 = v__62699[v_index_62780]; \n            }\n          }\n          v__62710[(15 + (16 * v_MWidthC_1 * v_w_id_62689) + (-1 * v_i_62691) + (16 * v_l_id_62690))] = absadd(v__62708_0, v__62698[(v_l_id_62690 + (16 * v_MWidthC_1 * v_w_id_62689) + (v_MWidthC_1 * v_i_62691))]); \n        }\n        /* end map_seq */\n        float v_tmp_62781 = 3.4028235E38f; \n        v__62711 = v_tmp_62781; \n        /* reduce_seq */\n        for (int v_i_62692 = 0; v_i_62692 < 16; v_i_62692 = (1 + v_i_62692)) {\n          v__62711 = clmin(v__62711, v__62710[(v_i_62692 + (16 * v_MWidthC_1 * v_w_id_62689) + (16 * v_l_id_62690))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62693 = 0; \n          v__62715[v_l_id_62690] = id(v__62711); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5009; \n        v_work_idx_5009 = 0; \n        int v_l_id_62694 = atomic_inc(&(v_work_idx_5009)); \n        while((v_l_id_62694 < 1)){\n          float v_tmp_62784 = 3.4028235E38f; \n          v__57389 = v_tmp_62784; \n          /* reduce_seq */\n          for (int v_i_62695 = 0; v_i_62695 < v_MWidthC_1; v_i_62695 = (1 + v_i_62695)) {\n            v__57389 = clmin(v__57389, v__62715[(v_i_62695 + (v_MWidthC_1 * v_l_id_62694))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62696 = 0; \n            v__62720[v_w_id_62689] = doubleMultiplyAdd(v__57389, v__62701, v__62700[v_w_id_62689], v__62702); \n          }\n          /* end map_seq */\n          v_l_id_62694 = atomic_inc(&(v_work_idx_5009)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62689 = atomic_inc(v_work_idx_5016); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62697",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62698",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62699",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62701",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62702",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62710",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62704",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62720",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62715",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}