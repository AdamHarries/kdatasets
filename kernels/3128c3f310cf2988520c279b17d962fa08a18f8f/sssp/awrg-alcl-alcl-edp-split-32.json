{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__67039, const global float* restrict v__67040, const global float* restrict v__67041, const global float* restrict v__67042, float v__67043, float v__67044, global float* v__67064, global int* v__67046, local float* v__67059, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67048; \n  float v__67050; \n  float v__57389; \n  /* Private Memory */\n  float v__67052_0;\n  \n  float v__67054_0;\n  \n  int v__67058_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5435 = v__67046; \n    local int v_w_id_67032; \n    if (get_local_id(0) == 0) {\n      v_w_id_67032 = atomic_inc(v_work_idx_5435); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_67032 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5433; \n        v_work_idx_5433 = 0; \n        int v_l_id_67033 = atomic_inc(&(v_work_idx_5433)); \n        while((v_l_id_67033 < v_MWidthC_1)){\n          float v_tmp_67118 = 3.4028235E38f; \n          v__67048 = v_tmp_67118; \n          /* reduce_while_seq */\n          for (int v_i_67034 = 0; v_i_67034 < 32; v_i_67034 = (1 + v_i_67034)) {\n            v__67058_0 = check(v__67048, v__67039[(v_l_id_67033 + (32 * v_MWidthC_1 * v_w_id_67032) + (v_MWidthC_1 * v_i_67034))]); \n            if (v__67058_0) {\n            } else {\n              break;\n            }\n            float v_tmp_67119 = 3.4028235E38f; \n            v__67050 = v_tmp_67119; \n            int v_index_67120 = v__67039[(v_l_id_67033 + (32 * v_MWidthC_1 * v_w_id_67032) + (v_MWidthC_1 * v_i_67034))]; \n            if (v_index_67120 < 0) {\n              v__67052_0 = v__67050; \n            } else {\n              if (v_index_67120 >= v_VLength_3) {\n                v__67052_0 = v__67050; \n              } else {\n                v__67052_0 = v__67041[v_index_67120]; \n              }\n            }\n            v__67054_0 = absadd(v__67052_0, v__67040[(v_l_id_67033 + (32 * v_MWidthC_1 * v_w_id_67032) + (v_MWidthC_1 * v_i_67034))]); \n            v__67048 = clmin(v__67054_0, v__67048); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_67035 = 0; \n            v__67059[v_l_id_67033] = id(v__67048); \n          }\n          /* end map_seq */\n          v_l_id_67033 = atomic_inc(&(v_work_idx_5433)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5428; \n        v_work_idx_5428 = 0; \n        int v_l_id_67036 = atomic_inc(&(v_work_idx_5428)); \n        while((v_l_id_67036 < 1)){\n          float v_tmp_67123 = 3.4028235E38f; \n          v__57389 = v_tmp_67123; \n          /* reduce_seq */\n          for (int v_i_67037 = 0; v_i_67037 < v_MWidthC_1; v_i_67037 = (1 + v_i_67037)) {\n            v__57389 = clmin(v__57389, v__67059[(v_i_67037 + (v_MWidthC_1 * v_l_id_67036))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_67038 = 0; \n            v__67064[v_w_id_67032] = doubleMultiplyAdd(v__57389, v__67043, v__67042[v_w_id_67032], v__67044); \n          }\n          /* end map_seq */\n          v_l_id_67036 = atomic_inc(&(v_work_idx_5428)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_67032 = atomic_inc(v_work_idx_5435); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__67039",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67040",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67041",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67042",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67043",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67044",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67046",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__67064",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67059",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}