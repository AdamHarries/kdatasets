{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71652, const global float* restrict v__71653, const global float* restrict v__71654, const global float* restrict v__71655, float v__71656, float v__71657, global float* v__71674, local float* v__71669, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71660; \n  float v__71662; \n  float v__57389; \n  /* Private Memory */\n  float v__71664_0;\n  \n  float v__71666_0;\n  \n  for (int v_wg_id_71645 = get_group_id(0); v_wg_id_71645 < v_MHeight_2; v_wg_id_71645 = (v_wg_id_71645 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5853; \n      v_work_idx_5853 = 0; \n      int v_l_id_71646 = atomic_inc(&(v_work_idx_5853)); \n      while((v_l_id_71646 < v_MWidthC_1)){\n        float v_tmp_71731 = 3.4028235E38f; \n        v__71660 = v_tmp_71731; \n        /* reduce_seq */\n        for (int v_i_71647 = 0; v_i_71647 < 128; v_i_71647 = (1 + v_i_71647)) {\n          float v_tmp_71732 = 3.4028235E38f; \n          v__71662 = v_tmp_71732; \n          int v_index_71733 = v__71652[(v_l_id_71646 + (128 * v_MWidthC_1 * v_wg_id_71645) + (v_MWidthC_1 * v_i_71647))]; \n          if (v_index_71733 < 0) {\n            v__71664_0 = v__71662; \n          } else {\n            if (v_index_71733 >= v_VLength_3) {\n              v__71664_0 = v__71662; \n            } else {\n              v__71664_0 = v__71654[v_index_71733]; \n            }\n          }\n          v__71666_0 = absadd(v__71664_0, v__71653[(v_l_id_71646 + (128 * v_MWidthC_1 * v_wg_id_71645) + (v_MWidthC_1 * v_i_71647))]); \n          v__71660 = clmin(v__71666_0, v__71660); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71648 = 0; \n          v__71669[v_l_id_71646] = id(v__71660); \n        }\n        /* end map_seq */\n        v_l_id_71646 = atomic_inc(&(v_work_idx_5853)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_71649 = get_local_id(0); \n      float v_tmp_71736 = 3.4028235E38f; \n      v__57389 = v_tmp_71736; \n      /* reduce_seq */\n      for (int v_i_71650 = 0; v_i_71650 < v_MWidthC_1; v_i_71650 = (1 + v_i_71650)) {\n        v__57389 = clmin(v__57389, v__71669[(v_i_71650 + (v_MWidthC_1 * v_l_id_71649))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71651 = 0; \n        v__71674[v_wg_id_71645] = doubleMultiplyAdd(v__57389, v__71656, v__71655[v_wg_id_71645], v__71657); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__71652",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71653",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71654",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71656",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71657",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71674",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71669",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}