{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66130, const global float* restrict v__66131, const global float* restrict v__66132, const global float* restrict v__66133, float v__66134, float v__66135, global float* v__66153, global int* v__66137, local float* v__66148, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66139; \n  float v__66141; \n  float v__57389; \n  /* Private Memory */\n  float v__66143_0;\n  \n  float v__66145_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5338 = v__66137; \n    local int v_w_id_66123; \n    if (get_local_id(0) == 0) {\n      v_w_id_66123 = atomic_inc(v_work_idx_5338); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66123 < v_MHeight_2)){\n      for (int v_l_id_66124 = get_local_id(0); v_l_id_66124 < v_MWidthC_1; v_l_id_66124 = (v_l_id_66124 + get_local_size(0))) {\n        float v_tmp_66212 = 3.4028235E38f; \n        v__66139 = v_tmp_66212; \n        /* reduce_seq */\n        for (int v_i_66125 = 0; v_i_66125 < 32; v_i_66125 = (1 + v_i_66125)) {\n          float v_tmp_66213 = 3.4028235E38f; \n          v__66141 = v_tmp_66213; \n          int v_index_66214 = v__66130[(v_l_id_66124 + (32 * v_MWidthC_1 * v_w_id_66123) + (v_MWidthC_1 * v_i_66125))]; \n          if (v_index_66214 < 0) {\n            v__66143_0 = v__66141; \n          } else {\n            if (v_index_66214 >= v_VLength_3) {\n              v__66143_0 = v__66141; \n            } else {\n              v__66143_0 = v__66132[v_index_66214]; \n            }\n          }\n          v__66145_0 = absadd(v__66143_0, v__66131[(v_l_id_66124 + (32 * v_MWidthC_1 * v_w_id_66123) + (v_MWidthC_1 * v_i_66125))]); \n          v__66139 = clmin(v__66145_0, v__66139); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66126 = 0; \n          v__66148[v_l_id_66124] = id(v__66139); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5332; \n        v_work_idx_5332 = 0; \n        int v_l_id_66127 = atomic_inc(&(v_work_idx_5332)); \n        while((v_l_id_66127 < 1)){\n          float v_tmp_66217 = 3.4028235E38f; \n          v__57389 = v_tmp_66217; \n          /* reduce_seq */\n          for (int v_i_66128 = 0; v_i_66128 < v_MWidthC_1; v_i_66128 = (1 + v_i_66128)) {\n            v__57389 = clmin(v__57389, v__66148[(v_i_66128 + (v_MWidthC_1 * v_l_id_66127))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66129 = 0; \n            v__66153[v_w_id_66123] = doubleMultiplyAdd(v__57389, v__66134, v__66133[v_w_id_66123], v__66135); \n          }\n          /* end map_seq */\n          v_l_id_66127 = atomic_inc(&(v_work_idx_5332)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66123 = atomic_inc(v_work_idx_5338); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66130",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66131",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66132",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66134",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66135",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66137",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66148",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}