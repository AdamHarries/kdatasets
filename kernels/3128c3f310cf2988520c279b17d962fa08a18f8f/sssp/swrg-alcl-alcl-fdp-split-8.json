{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58620, const global float* restrict v__58621, const global float* restrict v__58622, const global float* restrict v__58623, float v__58624, float v__58625, global float* v__58642, local float* v__58637, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58628; \n  float v__58630; \n  float v__57389; \n  /* Private Memory */\n  float v__58632_0;\n  \n  float v__58634_0;\n  \n  for (int v_wg_id_58613 = get_group_id(0); v_wg_id_58613 < v_MHeight_2; v_wg_id_58613 = (v_wg_id_58613 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4635; \n      v_work_idx_4635 = 0; \n      int v_l_id_58614 = atomic_inc(&(v_work_idx_4635)); \n      while((v_l_id_58614 < v_MWidthC_1)){\n        float v_tmp_58695 = 3.4028235E38f; \n        v__58628 = v_tmp_58695; \n        /* reduce_seq */\n        for (int v_i_58615 = 0; v_i_58615 < 8; v_i_58615 = (1 + v_i_58615)) {\n          float v_tmp_58696 = 3.4028235E38f; \n          v__58630 = v_tmp_58696; \n          int v_index_58697 = v__58620[(v_l_id_58614 + (8 * v_MWidthC_1 * v_wg_id_58613) + (v_MWidthC_1 * v_i_58615))]; \n          if (v_index_58697 < 0) {\n            v__58632_0 = v__58630; \n          } else {\n            if (v_index_58697 >= v_VLength_3) {\n              v__58632_0 = v__58630; \n            } else {\n              v__58632_0 = v__58622[v_index_58697]; \n            }\n          }\n          v__58634_0 = absadd(v__58632_0, v__58621[(v_l_id_58614 + (8 * v_MWidthC_1 * v_wg_id_58613) + (v_MWidthC_1 * v_i_58615))]); \n          v__58628 = clmin(v__58634_0, v__58628); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58616 = 0; \n          v__58637[v_l_id_58614] = id(v__58628); \n        }\n        /* end map_seq */\n        v_l_id_58614 = atomic_inc(&(v_work_idx_4635)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4630; \n      v_work_idx_4630 = 0; \n      int v_l_id_58617 = atomic_inc(&(v_work_idx_4630)); \n      while((v_l_id_58617 < 1)){\n        float v_tmp_58700 = 3.4028235E38f; \n        v__57389 = v_tmp_58700; \n        /* reduce_seq */\n        for (int v_i_58618 = 0; v_i_58618 < v_MWidthC_1; v_i_58618 = (1 + v_i_58618)) {\n          v__57389 = clmin(v__57389, v__58637[(v_i_58618 + (v_MWidthC_1 * v_l_id_58617))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58619 = 0; \n          v__58642[v_wg_id_58613] = doubleMultiplyAdd(v__57389, v__58624, v__58623[v_wg_id_58613], v__58625); \n        }\n        /* end map_seq */\n        v_l_id_58617 = atomic_inc(&(v_work_idx_4630)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58620",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58621",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58622",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58624",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58625",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58642",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58637",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}