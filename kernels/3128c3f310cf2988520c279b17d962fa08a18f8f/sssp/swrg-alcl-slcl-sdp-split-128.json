{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71554, const global float* restrict v__71555, const global float* restrict v__71556, const global float* restrict v__71557, float v__71558, float v__71559, global float* v__71576, global float* v__71566, local float* v__71571, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71562; \n  float v__71567; \n  float v__57389; \n  /* Private Memory */\n  float v__71564_0;\n  \n  for (int v_wg_id_71546 = get_group_id(0); v_wg_id_71546 < v_MHeight_2; v_wg_id_71546 = (v_wg_id_71546 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5844; \n      v_work_idx_5844 = 0; \n      int v_l_id_71547 = atomic_inc(&(v_work_idx_5844)); \n      while((v_l_id_71547 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_71548 = 0; v_i_71548 < 128; v_i_71548 = (1 + v_i_71548)) {\n          float v_tmp_71633 = 3.4028235E38f; \n          v__71562 = v_tmp_71633; \n          int v_index_71634 = v__71554[(v_l_id_71547 + (128 * v_MWidthC_1 * v_wg_id_71546) + (v_MWidthC_1 * v_i_71548))]; \n          if (v_index_71634 < 0) {\n            v__71564_0 = v__71562; \n          } else {\n            if (v_index_71634 >= v_VLength_3) {\n              v__71564_0 = v__71562; \n            } else {\n              v__71564_0 = v__71556[v_index_71634]; \n            }\n          }\n          v__71566[(127 + (128 * v_MWidthC_1 * v_wg_id_71546) + (-1 * v_i_71548) + (128 * v_l_id_71547))] = absadd(v__71564_0, v__71555[(v_l_id_71547 + (128 * v_MWidthC_1 * v_wg_id_71546) + (v_MWidthC_1 * v_i_71548))]); \n        }\n        /* end map_seq */\n        float v_tmp_71635 = 3.4028235E38f; \n        v__71567 = v_tmp_71635; \n        /* reduce_seq */\n        for (int v_i_71549 = 0; v_i_71549 < 128; v_i_71549 = (1 + v_i_71549)) {\n          v__71567 = clmin(v__71567, v__71566[(v_i_71549 + (128 * v_MWidthC_1 * v_wg_id_71546) + (128 * v_l_id_71547))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71550 = 0; \n          v__71571[v_l_id_71547] = id(v__71567); \n        }\n        /* end map_seq */\n        v_l_id_71547 = atomic_inc(&(v_work_idx_5844)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_71551 = get_local_id(0); \n      float v_tmp_71638 = 3.4028235E38f; \n      v__57389 = v_tmp_71638; \n      /* reduce_seq */\n      for (int v_i_71552 = 0; v_i_71552 < v_MWidthC_1; v_i_71552 = (1 + v_i_71552)) {\n        v__57389 = clmin(v__57389, v__71571[(v_i_71552 + (v_MWidthC_1 * v_l_id_71551))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71553 = 0; \n        v__71576[v_wg_id_71546] = doubleMultiplyAdd(v__57389, v__71558, v__71557[v_wg_id_71546], v__71559); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71554",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71555",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71556",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71557",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71558",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71559",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71566",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71576",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71571",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}