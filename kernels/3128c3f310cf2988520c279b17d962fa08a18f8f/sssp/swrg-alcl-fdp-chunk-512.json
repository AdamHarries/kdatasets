{
  "name" : "swrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78068, const global float* restrict v__78069, const global float* restrict v__78070, const global float* restrict v__78071, float v__78072, float v__78073, global float* v__78086, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78076; \n  float v__78078; \n  /* Private Memory */\n  float v__78080_0;\n  \n  float v__78082_0;\n  \n  for (int v_wg_id_78064 = get_group_id(0); v_wg_id_78064 < ((v_MHeight_2)/(512)); v_wg_id_78064 = (v_wg_id_78064 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6452; \n      v_work_idx_6452 = 0; \n      int v_l_id_78065 = atomic_inc(&(v_work_idx_6452)); \n      while((v_l_id_78065 < 512)){\n        float v_tmp_78124 = 3.4028235E38f; \n        v__78076 = v_tmp_78124; \n        /* reduce_seq */\n        for (int v_i_78066 = 0; v_i_78066 < v_MWidthC_1; v_i_78066 = (1 + v_i_78066)) {\n          float v_tmp_78125 = 3.4028235E38f; \n          v__78078 = v_tmp_78125; \n          int v_index_78126 = v__78068[(v_i_78066 + (512 * v_MWidthC_1 * v_wg_id_78064) + (v_MWidthC_1 * v_l_id_78065))]; \n          if (v_index_78126 < 0) {\n            v__78080_0 = v__78078; \n          } else {\n            if (v_index_78126 >= v_VLength_3) {\n              v__78080_0 = v__78078; \n            } else {\n              v__78080_0 = v__78070[v_index_78126]; \n            }\n          }\n          v__78082_0 = absadd(v__78080_0, v__78069[(v_i_78066 + (512 * v_MWidthC_1 * v_wg_id_78064) + (v_MWidthC_1 * v_l_id_78065))]); \n          v__78076 = clmin(v__78082_0, v__78076); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78067 = 0; \n          v__78086[(v_l_id_78065 + (512 * v_wg_id_78064))] = doubleMultiplyAdd(v__78076, v__78072, v__78071[(v_l_id_78065 + (512 * v_wg_id_78064))], v__78073); \n        }\n        /* end map_seq */\n        v_l_id_78065 = atomic_inc(&(v_work_idx_6452)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78068",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78070",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}