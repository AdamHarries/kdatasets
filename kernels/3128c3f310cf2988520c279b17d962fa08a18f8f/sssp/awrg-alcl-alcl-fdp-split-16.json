{
  "name" : "awrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63614, const global float* restrict v__63615, const global float* restrict v__63616, const global float* restrict v__63617, float v__63618, float v__63619, global float* v__63637, global int* v__63621, local float* v__63632, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63623; \n  float v__63625; \n  float v__57389; \n  /* Private Memory */\n  float v__63627_0;\n  \n  float v__63629_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5112 = v__63621; \n    local int v_w_id_63607; \n    if (get_local_id(0) == 0) {\n      v_w_id_63607 = atomic_inc(v_work_idx_5112); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63607 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5110; \n        v_work_idx_5110 = 0; \n        int v_l_id_63608 = atomic_inc(&(v_work_idx_5110)); \n        while((v_l_id_63608 < v_MWidthC_1)){\n          float v_tmp_63688 = 3.4028235E38f; \n          v__63623 = v_tmp_63688; \n          /* reduce_seq */\n          for (int v_i_63609 = 0; v_i_63609 < 16; v_i_63609 = (1 + v_i_63609)) {\n            float v_tmp_63689 = 3.4028235E38f; \n            v__63625 = v_tmp_63689; \n            int v_index_63690 = v__63614[(v_l_id_63608 + (16 * v_MWidthC_1 * v_w_id_63607) + (v_MWidthC_1 * v_i_63609))]; \n            if (v_index_63690 < 0) {\n              v__63627_0 = v__63625; \n            } else {\n              if (v_index_63690 >= v_VLength_3) {\n                v__63627_0 = v__63625; \n              } else {\n                v__63627_0 = v__63616[v_index_63690]; \n              }\n            }\n            v__63629_0 = absadd(v__63627_0, v__63615[(v_l_id_63608 + (16 * v_MWidthC_1 * v_w_id_63607) + (v_MWidthC_1 * v_i_63609))]); \n            v__63623 = clmin(v__63629_0, v__63623); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63610 = 0; \n            v__63632[v_l_id_63608] = id(v__63623); \n          }\n          /* end map_seq */\n          v_l_id_63608 = atomic_inc(&(v_work_idx_5110)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5105; \n        v_work_idx_5105 = 0; \n        int v_l_id_63611 = atomic_inc(&(v_work_idx_5105)); \n        while((v_l_id_63611 < 1)){\n          float v_tmp_63693 = 3.4028235E38f; \n          v__57389 = v_tmp_63693; \n          /* reduce_seq */\n          for (int v_i_63612 = 0; v_i_63612 < v_MWidthC_1; v_i_63612 = (1 + v_i_63612)) {\n            v__57389 = clmin(v__57389, v__63632[(v_i_63612 + (v_MWidthC_1 * v_l_id_63611))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63613 = 0; \n            v__63637[v_w_id_63607] = doubleMultiplyAdd(v__57389, v__63618, v__63617[v_w_id_63607], v__63619); \n          }\n          /* end map_seq */\n          v_l_id_63611 = atomic_inc(&(v_work_idx_5105)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63607 = atomic_inc(v_work_idx_5112); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63614",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63615",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63616",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63617",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63618",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63619",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63621",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63637",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63632",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}