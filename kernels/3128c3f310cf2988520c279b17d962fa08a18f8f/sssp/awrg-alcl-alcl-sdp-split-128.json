{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73517, const global float* restrict v__73518, const global float* restrict v__73519, const global float* restrict v__73520, float v__73521, float v__73522, global float* v__73540, global float* v__73530, global int* v__73524, local float* v__73535, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73526; \n  float v__73531; \n  float v__57389; \n  /* Private Memory */\n  float v__73528_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6037 = v__73524; \n    local int v_w_id_73509; \n    if (get_local_id(0) == 0) {\n      v_w_id_73509 = atomic_inc(v_work_idx_6037); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73509 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6035; \n        v_work_idx_6035 = 0; \n        int v_l_id_73510 = atomic_inc(&(v_work_idx_6035)); \n        while((v_l_id_73510 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_73511 = 0; v_i_73511 < 128; v_i_73511 = (1 + v_i_73511)) {\n            float v_tmp_73591 = 3.4028235E38f; \n            v__73526 = v_tmp_73591; \n            int v_index_73592 = v__73517[(v_l_id_73510 + (128 * v_MWidthC_1 * v_w_id_73509) + (v_MWidthC_1 * v_i_73511))]; \n            if (v_index_73592 < 0) {\n              v__73528_0 = v__73526; \n            } else {\n              if (v_index_73592 >= v_VLength_3) {\n                v__73528_0 = v__73526; \n              } else {\n                v__73528_0 = v__73519[v_index_73592]; \n              }\n            }\n            v__73530[(127 + (128 * v_MWidthC_1 * v_w_id_73509) + (-1 * v_i_73511) + (128 * v_l_id_73510))] = absadd(v__73528_0, v__73518[(v_l_id_73510 + (128 * v_MWidthC_1 * v_w_id_73509) + (v_MWidthC_1 * v_i_73511))]); \n          }\n          /* end map_seq */\n          float v_tmp_73593 = 3.4028235E38f; \n          v__73531 = v_tmp_73593; \n          /* reduce_seq */\n          for (int v_i_73512 = 0; v_i_73512 < 128; v_i_73512 = (1 + v_i_73512)) {\n            v__73531 = clmin(v__73531, v__73530[(v_i_73512 + (128 * v_MWidthC_1 * v_w_id_73509) + (128 * v_l_id_73510))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73513 = 0; \n            v__73535[v_l_id_73510] = id(v__73531); \n          }\n          /* end map_seq */\n          v_l_id_73510 = atomic_inc(&(v_work_idx_6035)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6029; \n        v_work_idx_6029 = 0; \n        int v_l_id_73514 = atomic_inc(&(v_work_idx_6029)); \n        while((v_l_id_73514 < 1)){\n          float v_tmp_73596 = 3.4028235E38f; \n          v__57389 = v_tmp_73596; \n          /* reduce_seq */\n          for (int v_i_73515 = 0; v_i_73515 < v_MWidthC_1; v_i_73515 = (1 + v_i_73515)) {\n            v__57389 = clmin(v__57389, v__73535[(v_i_73515 + (v_MWidthC_1 * v_l_id_73514))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73516 = 0; \n            v__73540[v_w_id_73509] = doubleMultiplyAdd(v__57389, v__73521, v__73520[v_w_id_73509], v__73522); \n          }\n          /* end map_seq */\n          v_l_id_73514 = atomic_inc(&(v_work_idx_6029)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73509 = atomic_inc(v_work_idx_6037); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__73517",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73518",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73519",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73521",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73522",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73530",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73524",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73540",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73535",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}