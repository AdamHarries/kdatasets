{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__79559, const global float* restrict v__79560, const global float* restrict v__79561, const global float* restrict v__79562, float v__79563, float v__79564, global float* v__79584, global int* v__79566, local float* v__79579, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79568; \n  float v__79570; \n  float v__57389; \n  /* Private Memory */\n  float v__79572_0;\n  \n  float v__79574_0;\n  \n  int v__79578_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6596 = v__79566; \n    local int v_w_id_79552; \n    if (get_local_id(0) == 0) {\n      v_w_id_79552 = atomic_inc(v_work_idx_6596); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79552 < v_MHeight_2)){\n      for (int v_l_id_79553 = get_local_id(0); v_l_id_79553 < v_MWidthC_1; v_l_id_79553 = (v_l_id_79553 + get_local_size(0))) {\n        float v_tmp_79646 = 3.4028235E38f; \n        v__79568 = v_tmp_79646; \n        /* reduce_while_seq */\n        for (int v_i_79554 = 0; v_i_79554 < 512; v_i_79554 = (1 + v_i_79554)) {\n          v__79578_0 = check(v__79568, v__79559[(v_l_id_79553 + (512 * v_MWidthC_1 * v_w_id_79552) + (v_MWidthC_1 * v_i_79554))]); \n          if (v__79578_0) {\n          } else {\n            break;\n          }\n          float v_tmp_79647 = 3.4028235E38f; \n          v__79570 = v_tmp_79647; \n          int v_index_79648 = v__79559[(v_l_id_79553 + (512 * v_MWidthC_1 * v_w_id_79552) + (v_MWidthC_1 * v_i_79554))]; \n          if (v_index_79648 < 0) {\n            v__79572_0 = v__79570; \n          } else {\n            if (v_index_79648 >= v_VLength_3) {\n              v__79572_0 = v__79570; \n            } else {\n              v__79572_0 = v__79561[v_index_79648]; \n            }\n          }\n          v__79574_0 = absadd(v__79572_0, v__79560[(v_l_id_79553 + (512 * v_MWidthC_1 * v_w_id_79552) + (v_MWidthC_1 * v_i_79554))]); \n          v__79568 = clmin(v__79574_0, v__79568); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79555 = 0; \n          v__79579[v_l_id_79553] = id(v__79568); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6590; \n        v_work_idx_6590 = 0; \n        int v_l_id_79556 = atomic_inc(&(v_work_idx_6590)); \n        while((v_l_id_79556 < 1)){\n          float v_tmp_79651 = 3.4028235E38f; \n          v__57389 = v_tmp_79651; \n          /* reduce_seq */\n          for (int v_i_79557 = 0; v_i_79557 < v_MWidthC_1; v_i_79557 = (1 + v_i_79557)) {\n            v__57389 = clmin(v__57389, v__79579[(v_i_79557 + (v_MWidthC_1 * v_l_id_79556))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79558 = 0; \n            v__79584[v_w_id_79552] = doubleMultiplyAdd(v__57389, v__79563, v__79562[v_w_id_79552], v__79564); \n          }\n          /* end map_seq */\n          v_l_id_79556 = atomic_inc(&(v_work_idx_6590)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79552 = atomic_inc(v_work_idx_6596); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79559",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79560",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79561",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79562",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79563",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79564",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79566",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79579",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}