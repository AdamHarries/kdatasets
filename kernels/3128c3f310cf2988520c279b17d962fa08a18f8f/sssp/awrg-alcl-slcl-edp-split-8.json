{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__60086, const global float* restrict v__60087, const global float* restrict v__60088, const global float* restrict v__60089, float v__60090, float v__60091, global float* v__60111, global int* v__60093, local float* v__60106, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60095; \n  float v__60097; \n  float v__57389; \n  /* Private Memory */\n  float v__60099_0;\n  \n  float v__60101_0;\n  \n  int v__60105_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4777 = v__60093; \n    local int v_w_id_60079; \n    if (get_local_id(0) == 0) {\n      v_w_id_60079 = atomic_inc(v_work_idx_4777); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60079 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4775; \n        v_work_idx_4775 = 0; \n        int v_l_id_60080 = atomic_inc(&(v_work_idx_4775)); \n        while((v_l_id_60080 < v_MWidthC_1)){\n          float v_tmp_60169 = 3.4028235E38f; \n          v__60095 = v_tmp_60169; \n          /* reduce_while_seq */\n          for (int v_i_60081 = 0; v_i_60081 < 8; v_i_60081 = (1 + v_i_60081)) {\n            v__60105_0 = check(v__60095, v__60086[(v_l_id_60080 + (8 * v_MWidthC_1 * v_w_id_60079) + (v_MWidthC_1 * v_i_60081))]); \n            if (v__60105_0) {\n            } else {\n              break;\n            }\n            float v_tmp_60170 = 3.4028235E38f; \n            v__60097 = v_tmp_60170; \n            int v_index_60171 = v__60086[(v_l_id_60080 + (8 * v_MWidthC_1 * v_w_id_60079) + (v_MWidthC_1 * v_i_60081))]; \n            if (v_index_60171 < 0) {\n              v__60099_0 = v__60097; \n            } else {\n              if (v_index_60171 >= v_VLength_3) {\n                v__60099_0 = v__60097; \n              } else {\n                v__60099_0 = v__60088[v_index_60171]; \n              }\n            }\n            v__60101_0 = absadd(v__60099_0, v__60087[(v_l_id_60080 + (8 * v_MWidthC_1 * v_w_id_60079) + (v_MWidthC_1 * v_i_60081))]); \n            v__60095 = clmin(v__60101_0, v__60095); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60082 = 0; \n            v__60106[v_l_id_60080] = id(v__60095); \n          }\n          /* end map_seq */\n          v_l_id_60080 = atomic_inc(&(v_work_idx_4775)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_60083 = get_local_id(0); \n        float v_tmp_60174 = 3.4028235E38f; \n        v__57389 = v_tmp_60174; \n        /* reduce_seq */\n        for (int v_i_60084 = 0; v_i_60084 < v_MWidthC_1; v_i_60084 = (1 + v_i_60084)) {\n          v__57389 = clmin(v__57389, v__60106[(v_i_60084 + (v_MWidthC_1 * v_l_id_60083))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_60085 = 0; \n          v__60111[v_w_id_60079] = doubleMultiplyAdd(v__57389, v__60090, v__60089[v_w_id_60079], v__60091); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60079 = atomic_inc(v_work_idx_4777); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__60086",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60087",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60088",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60089",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60090",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60091",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60093",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60106",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}