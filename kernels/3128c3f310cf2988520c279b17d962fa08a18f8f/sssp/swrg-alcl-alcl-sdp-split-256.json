{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75186, const global float* restrict v__75187, const global float* restrict v__75188, const global float* restrict v__75189, float v__75190, float v__75191, global float* v__75208, global float* v__75198, local float* v__75203, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75194; \n  float v__75199; \n  float v__57389; \n  /* Private Memory */\n  float v__75196_0;\n  \n  for (int v_wg_id_75178 = get_group_id(0); v_wg_id_75178 < v_MHeight_2; v_wg_id_75178 = (v_wg_id_75178 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6185; \n      v_work_idx_6185 = 0; \n      int v_l_id_75179 = atomic_inc(&(v_work_idx_6185)); \n      while((v_l_id_75179 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_75180 = 0; v_i_75180 < 256; v_i_75180 = (1 + v_i_75180)) {\n          float v_tmp_75261 = 3.4028235E38f; \n          v__75194 = v_tmp_75261; \n          int v_index_75262 = v__75186[(v_l_id_75179 + (256 * v_MWidthC_1 * v_wg_id_75178) + (v_MWidthC_1 * v_i_75180))]; \n          if (v_index_75262 < 0) {\n            v__75196_0 = v__75194; \n          } else {\n            if (v_index_75262 >= v_VLength_3) {\n              v__75196_0 = v__75194; \n            } else {\n              v__75196_0 = v__75188[v_index_75262]; \n            }\n          }\n          v__75198[(255 + (256 * v_MWidthC_1 * v_wg_id_75178) + (-1 * v_i_75180) + (256 * v_l_id_75179))] = absadd(v__75196_0, v__75187[(v_l_id_75179 + (256 * v_MWidthC_1 * v_wg_id_75178) + (v_MWidthC_1 * v_i_75180))]); \n        }\n        /* end map_seq */\n        float v_tmp_75263 = 3.4028235E38f; \n        v__75199 = v_tmp_75263; \n        /* reduce_seq */\n        for (int v_i_75181 = 0; v_i_75181 < 256; v_i_75181 = (1 + v_i_75181)) {\n          v__75199 = clmin(v__75199, v__75198[(v_i_75181 + (256 * v_MWidthC_1 * v_wg_id_75178) + (256 * v_l_id_75179))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75182 = 0; \n          v__75203[v_l_id_75179] = id(v__75199); \n        }\n        /* end map_seq */\n        v_l_id_75179 = atomic_inc(&(v_work_idx_6185)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6179; \n      v_work_idx_6179 = 0; \n      int v_l_id_75183 = atomic_inc(&(v_work_idx_6179)); \n      while((v_l_id_75183 < 1)){\n        float v_tmp_75266 = 3.4028235E38f; \n        v__57389 = v_tmp_75266; \n        /* reduce_seq */\n        for (int v_i_75184 = 0; v_i_75184 < v_MWidthC_1; v_i_75184 = (1 + v_i_75184)) {\n          v__57389 = clmin(v__57389, v__75203[(v_i_75184 + (v_MWidthC_1 * v_l_id_75183))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75185 = 0; \n          v__75208[v_wg_id_75178] = doubleMultiplyAdd(v__57389, v__75190, v__75189[v_wg_id_75178], v__75191); \n        }\n        /* end map_seq */\n        v_l_id_75183 = atomic_inc(&(v_work_idx_6179)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__75186",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75187",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75188",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75190",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75191",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75198",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__75208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75203",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}