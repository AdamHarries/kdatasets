{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__68710, const global float* restrict v__68711, const global float* restrict v__68712, const global float* restrict v__68713, float v__68714, float v__68715, global float* v__68734, local float* v__68729, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68718; \n  float v__68720; \n  float v__57389; \n  /* Private Memory */\n  float v__68722_0;\n  \n  float v__68724_0;\n  \n  int v__68728_0;\n  \n  for (int v_wg_id_68703 = get_group_id(0); v_wg_id_68703 < v_MHeight_2; v_wg_id_68703 = (v_wg_id_68703 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5581; \n      v_work_idx_5581 = 0; \n      int v_l_id_68704 = atomic_inc(&(v_work_idx_5581)); \n      while((v_l_id_68704 < v_MWidthC_1)){\n        float v_tmp_68790 = 3.4028235E38f; \n        v__68718 = v_tmp_68790; \n        /* reduce_while_seq */\n        for (int v_i_68705 = 0; v_i_68705 < 64; v_i_68705 = (1 + v_i_68705)) {\n          v__68728_0 = check(v__68718, v__68710[(v_l_id_68704 + (64 * v_MWidthC_1 * v_wg_id_68703) + (v_MWidthC_1 * v_i_68705))]); \n          if (v__68728_0) {\n          } else {\n            break;\n          }\n          float v_tmp_68791 = 3.4028235E38f; \n          v__68720 = v_tmp_68791; \n          int v_index_68792 = v__68710[(v_l_id_68704 + (64 * v_MWidthC_1 * v_wg_id_68703) + (v_MWidthC_1 * v_i_68705))]; \n          if (v_index_68792 < 0) {\n            v__68722_0 = v__68720; \n          } else {\n            if (v_index_68792 >= v_VLength_3) {\n              v__68722_0 = v__68720; \n            } else {\n              v__68722_0 = v__68712[v_index_68792]; \n            }\n          }\n          v__68724_0 = absadd(v__68722_0, v__68711[(v_l_id_68704 + (64 * v_MWidthC_1 * v_wg_id_68703) + (v_MWidthC_1 * v_i_68705))]); \n          v__68718 = clmin(v__68724_0, v__68718); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68706 = 0; \n          v__68729[v_l_id_68704] = id(v__68718); \n        }\n        /* end map_seq */\n        v_l_id_68704 = atomic_inc(&(v_work_idx_5581)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5576; \n      v_work_idx_5576 = 0; \n      int v_l_id_68707 = atomic_inc(&(v_work_idx_5576)); \n      while((v_l_id_68707 < 1)){\n        float v_tmp_68795 = 3.4028235E38f; \n        v__57389 = v_tmp_68795; \n        /* reduce_seq */\n        for (int v_i_68708 = 0; v_i_68708 < v_MWidthC_1; v_i_68708 = (1 + v_i_68708)) {\n          v__57389 = clmin(v__57389, v__68729[(v_i_68708 + (v_MWidthC_1 * v_l_id_68707))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68709 = 0; \n          v__68734[v_wg_id_68703] = doubleMultiplyAdd(v__57389, v__68714, v__68713[v_wg_id_68703], v__68715); \n        }\n        /* end map_seq */\n        v_l_id_68707 = atomic_inc(&(v_work_idx_5576)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__68710",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68711",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68712",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68713",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68714",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68715",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68729",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}