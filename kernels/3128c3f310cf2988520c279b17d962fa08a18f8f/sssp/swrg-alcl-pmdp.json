{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56943, const global float* restrict v__56944, const global float* restrict v__56945, const global float* restrict v__56946, float v__56947, float v__56948, global float* v__56961, global float* v__56955, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__56951; \n  float v__56956; \n  /* Private Memory */\n  float v__56953_0;\n  \n  for (int v_wg_id_56939 = get_group_id(0); v_wg_id_56939 < v_MHeight_2; v_wg_id_56939 = (v_wg_id_56939 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_4486; \n      v_l_id_4486 = 0; \n      int v_l_id_56940 = atomic_inc(&(v_l_id_4486)); \n      while((v_l_id_56940 < v_MWidthC_1)){\n        float v_tmp_56993 = 3.4028235E38f; \n        v__56951 = v_tmp_56993; \n        int v_index_56994 = v__56943[(v_l_id_56940 + (v_MWidthC_1 * v_wg_id_56939))]; \n        if (v_index_56994 < 0) {\n          v__56953_0 = v__56951; \n        } else {\n          if (v_index_56994 >= v_VLength_3) {\n            v__56953_0 = v__56951; \n          } else {\n            v__56953_0 = v__56945[v_index_56994]; \n          }\n        }\n        v__56955[(-1 + v_MWidthC_1 + (-1 * v_l_id_56940) + (v_MWidthC_1 * v_wg_id_56939))] = absadd(v__56953_0, v__56944[(v_l_id_56940 + (v_MWidthC_1 * v_wg_id_56939))]); \n        v_l_id_56940 = atomic_inc(&(v_l_id_4486)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_56995 = 3.4028235E38f; \n    v__56956 = v_tmp_56995; \n    /* reduce_seq */\n    for (int v_i_56941 = 0; v_i_56941 < v_MWidthC_1; v_i_56941 = (1 + v_i_56941)) {\n      v__56956 = clmin(v__56956, v__56955[(v_i_56941 + (v_MWidthC_1 * v_wg_id_56939))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_56942 = 0; \n      v__56961[v_wg_id_56939] = doubleMultiplyAdd(v__56956, v__56947, v__56946[v_wg_id_56939], v__56948); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__56943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56944",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56945",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56946",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56947",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56948",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__56955",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__56961",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}