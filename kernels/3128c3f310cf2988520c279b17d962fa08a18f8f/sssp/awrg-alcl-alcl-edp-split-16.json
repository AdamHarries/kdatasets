{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__63707, const global float* restrict v__63708, const global float* restrict v__63709, const global float* restrict v__63710, float v__63711, float v__63712, global float* v__63732, global int* v__63714, local float* v__63727, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63716; \n  float v__63718; \n  float v__57389; \n  /* Private Memory */\n  float v__63720_0;\n  \n  float v__63722_0;\n  \n  int v__63726_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5123 = v__63714; \n    local int v_w_id_63700; \n    if (get_local_id(0) == 0) {\n      v_w_id_63700 = atomic_inc(v_work_idx_5123); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63700 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5121; \n        v_work_idx_5121 = 0; \n        int v_l_id_63701 = atomic_inc(&(v_work_idx_5121)); \n        while((v_l_id_63701 < v_MWidthC_1)){\n          float v_tmp_63786 = 3.4028235E38f; \n          v__63716 = v_tmp_63786; \n          /* reduce_while_seq */\n          for (int v_i_63702 = 0; v_i_63702 < 16; v_i_63702 = (1 + v_i_63702)) {\n            v__63726_0 = check(v__63716, v__63707[(v_l_id_63701 + (16 * v_MWidthC_1 * v_w_id_63700) + (v_MWidthC_1 * v_i_63702))]); \n            if (v__63726_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63787 = 3.4028235E38f; \n            v__63718 = v_tmp_63787; \n            int v_index_63788 = v__63707[(v_l_id_63701 + (16 * v_MWidthC_1 * v_w_id_63700) + (v_MWidthC_1 * v_i_63702))]; \n            if (v_index_63788 < 0) {\n              v__63720_0 = v__63718; \n            } else {\n              if (v_index_63788 >= v_VLength_3) {\n                v__63720_0 = v__63718; \n              } else {\n                v__63720_0 = v__63709[v_index_63788]; \n              }\n            }\n            v__63722_0 = absadd(v__63720_0, v__63708[(v_l_id_63701 + (16 * v_MWidthC_1 * v_w_id_63700) + (v_MWidthC_1 * v_i_63702))]); \n            v__63716 = clmin(v__63722_0, v__63716); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63703 = 0; \n            v__63727[v_l_id_63701] = id(v__63716); \n          }\n          /* end map_seq */\n          v_l_id_63701 = atomic_inc(&(v_work_idx_5121)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5116; \n        v_work_idx_5116 = 0; \n        int v_l_id_63704 = atomic_inc(&(v_work_idx_5116)); \n        while((v_l_id_63704 < 1)){\n          float v_tmp_63791 = 3.4028235E38f; \n          v__57389 = v_tmp_63791; \n          /* reduce_seq */\n          for (int v_i_63705 = 0; v_i_63705 < v_MWidthC_1; v_i_63705 = (1 + v_i_63705)) {\n            v__57389 = clmin(v__57389, v__63727[(v_i_63705 + (v_MWidthC_1 * v_l_id_63704))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63706 = 0; \n            v__63732[v_w_id_63700] = doubleMultiplyAdd(v__57389, v__63711, v__63710[v_w_id_63700], v__63712); \n          }\n          /* end map_seq */\n          v_l_id_63704 = atomic_inc(&(v_work_idx_5116)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63700 = atomic_inc(v_work_idx_5123); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63707",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63708",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63709",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63711",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63712",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63714",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63732",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63727",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}