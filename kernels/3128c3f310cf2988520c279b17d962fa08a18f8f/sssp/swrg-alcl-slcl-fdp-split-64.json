{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68320, const global float* restrict v__68321, const global float* restrict v__68322, const global float* restrict v__68323, float v__68324, float v__68325, global float* v__68342, local float* v__68337, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68328; \n  float v__68330; \n  float v__57389; \n  /* Private Memory */\n  float v__68332_0;\n  \n  float v__68334_0;\n  \n  for (int v_wg_id_68313 = get_group_id(0); v_wg_id_68313 < v_MHeight_2; v_wg_id_68313 = (v_wg_id_68313 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5541; \n      v_work_idx_5541 = 0; \n      int v_l_id_68314 = atomic_inc(&(v_work_idx_5541)); \n      while((v_l_id_68314 < v_MWidthC_1)){\n        float v_tmp_68399 = 3.4028235E38f; \n        v__68328 = v_tmp_68399; \n        /* reduce_seq */\n        for (int v_i_68315 = 0; v_i_68315 < 64; v_i_68315 = (1 + v_i_68315)) {\n          float v_tmp_68400 = 3.4028235E38f; \n          v__68330 = v_tmp_68400; \n          int v_index_68401 = v__68320[(v_l_id_68314 + (64 * v_MWidthC_1 * v_wg_id_68313) + (v_MWidthC_1 * v_i_68315))]; \n          if (v_index_68401 < 0) {\n            v__68332_0 = v__68330; \n          } else {\n            if (v_index_68401 >= v_VLength_3) {\n              v__68332_0 = v__68330; \n            } else {\n              v__68332_0 = v__68322[v_index_68401]; \n            }\n          }\n          v__68334_0 = absadd(v__68332_0, v__68321[(v_l_id_68314 + (64 * v_MWidthC_1 * v_wg_id_68313) + (v_MWidthC_1 * v_i_68315))]); \n          v__68328 = clmin(v__68334_0, v__68328); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68316 = 0; \n          v__68337[v_l_id_68314] = id(v__68328); \n        }\n        /* end map_seq */\n        v_l_id_68314 = atomic_inc(&(v_work_idx_5541)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_68317 = get_local_id(0); \n      float v_tmp_68404 = 3.4028235E38f; \n      v__57389 = v_tmp_68404; \n      /* reduce_seq */\n      for (int v_i_68318 = 0; v_i_68318 < v_MWidthC_1; v_i_68318 = (1 + v_i_68318)) {\n        v__57389 = clmin(v__57389, v__68337[(v_i_68318 + (v_MWidthC_1 * v_l_id_68317))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_68319 = 0; \n        v__68342[v_wg_id_68313] = doubleMultiplyAdd(v__57389, v__68324, v__68323[v_wg_id_68313], v__68325); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__68320",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68321",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68322",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68323",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68324",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68325",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__68342",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68337",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}