{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72477, const global float* restrict v__72478, const global float* restrict v__72479, const global float* restrict v__72480, float v__72481, float v__72482, global float* v__72500, global int* v__72484, local float* v__72495, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72486; \n  float v__72488; \n  float v__57389; \n  /* Private Memory */\n  float v__72490_0;\n  \n  float v__72492_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5932 = v__72484; \n    local int v_w_id_72470; \n    if (get_local_id(0) == 0) {\n      v_w_id_72470 = atomic_inc(v_work_idx_5932); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72470 < v_MHeight_2)){\n      for (int v_l_id_72471 = get_local_id(0); v_l_id_72471 < v_MWidthC_1; v_l_id_72471 = (v_l_id_72471 + get_local_size(0))) {\n        float v_tmp_72563 = 3.4028235E38f; \n        v__72486 = v_tmp_72563; \n        /* reduce_seq */\n        for (int v_i_72472 = 0; v_i_72472 < 128; v_i_72472 = (1 + v_i_72472)) {\n          float v_tmp_72564 = 3.4028235E38f; \n          v__72488 = v_tmp_72564; \n          int v_index_72565 = v__72477[(v_l_id_72471 + (128 * v_MWidthC_1 * v_w_id_72470) + (v_MWidthC_1 * v_i_72472))]; \n          if (v_index_72565 < 0) {\n            v__72490_0 = v__72488; \n          } else {\n            if (v_index_72565 >= v_VLength_3) {\n              v__72490_0 = v__72488; \n            } else {\n              v__72490_0 = v__72479[v_index_72565]; \n            }\n          }\n          v__72492_0 = absadd(v__72490_0, v__72478[(v_l_id_72471 + (128 * v_MWidthC_1 * v_w_id_72470) + (v_MWidthC_1 * v_i_72472))]); \n          v__72486 = clmin(v__72492_0, v__72486); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72473 = 0; \n          v__72495[v_l_id_72471] = id(v__72486); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72474 = get_local_id(0); \n        float v_tmp_72568 = 3.4028235E38f; \n        v__57389 = v_tmp_72568; \n        /* reduce_seq */\n        for (int v_i_72475 = 0; v_i_72475 < v_MWidthC_1; v_i_72475 = (1 + v_i_72475)) {\n          v__57389 = clmin(v__57389, v__72495[(v_i_72475 + (v_MWidthC_1 * v_l_id_72474))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72476 = 0; \n          v__72500[v_w_id_72470] = doubleMultiplyAdd(v__57389, v__72481, v__72480[v_w_id_72470], v__72482); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72470 = atomic_inc(v_work_idx_5932); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__72477",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72478",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72479",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72481",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72482",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72484",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72500",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72495",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}