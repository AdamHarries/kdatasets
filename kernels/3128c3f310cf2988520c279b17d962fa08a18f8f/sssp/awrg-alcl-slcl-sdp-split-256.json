{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76552, const global float* restrict v__76553, const global float* restrict v__76554, const global float* restrict v__76555, float v__76556, float v__76557, global float* v__76575, global float* v__76565, global int* v__76559, local float* v__76570, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76561; \n  float v__76566; \n  float v__57389; \n  /* Private Memory */\n  float v__76563_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6317 = v__76559; \n    local int v_w_id_76544; \n    if (get_local_id(0) == 0) {\n      v_w_id_76544 = atomic_inc(v_work_idx_6317); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76544 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6315; \n        v_work_idx_6315 = 0; \n        int v_l_id_76545 = atomic_inc(&(v_work_idx_6315)); \n        while((v_l_id_76545 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_76546 = 0; v_i_76546 < 256; v_i_76546 = (1 + v_i_76546)) {\n            float v_tmp_76630 = 3.4028235E38f; \n            v__76561 = v_tmp_76630; \n            int v_index_76631 = v__76552[(v_l_id_76545 + (256 * v_MWidthC_1 * v_w_id_76544) + (v_MWidthC_1 * v_i_76546))]; \n            if (v_index_76631 < 0) {\n              v__76563_0 = v__76561; \n            } else {\n              if (v_index_76631 >= v_VLength_3) {\n                v__76563_0 = v__76561; \n              } else {\n                v__76563_0 = v__76554[v_index_76631]; \n              }\n            }\n            v__76565[(255 + (256 * v_MWidthC_1 * v_w_id_76544) + (-1 * v_i_76546) + (256 * v_l_id_76545))] = absadd(v__76563_0, v__76553[(v_l_id_76545 + (256 * v_MWidthC_1 * v_w_id_76544) + (v_MWidthC_1 * v_i_76546))]); \n          }\n          /* end map_seq */\n          float v_tmp_76632 = 3.4028235E38f; \n          v__76566 = v_tmp_76632; \n          /* reduce_seq */\n          for (int v_i_76547 = 0; v_i_76547 < 256; v_i_76547 = (1 + v_i_76547)) {\n            v__76566 = clmin(v__76566, v__76565[(v_i_76547 + (256 * v_MWidthC_1 * v_w_id_76544) + (256 * v_l_id_76545))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76548 = 0; \n            v__76570[v_l_id_76545] = id(v__76566); \n          }\n          /* end map_seq */\n          v_l_id_76545 = atomic_inc(&(v_work_idx_6315)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_76549 = get_local_id(0); \n        float v_tmp_76635 = 3.4028235E38f; \n        v__57389 = v_tmp_76635; \n        /* reduce_seq */\n        for (int v_i_76550 = 0; v_i_76550 < v_MWidthC_1; v_i_76550 = (1 + v_i_76550)) {\n          v__57389 = clmin(v__57389, v__76570[(v_i_76550 + (v_MWidthC_1 * v_l_id_76549))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76551 = 0; \n          v__76575[v_w_id_76544] = doubleMultiplyAdd(v__57389, v__76556, v__76555[v_w_id_76544], v__76557); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76544 = atomic_inc(v_work_idx_6317); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76552",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76553",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76554",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76555",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76556",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76557",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76565",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76559",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76575",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76570",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}