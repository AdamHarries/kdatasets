{
  "name" : "swrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63878, const global float* restrict v__63879, const global float* restrict v__63880, const global float* restrict v__63881, float v__63882, float v__63883, global float* v__63896, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63886; \n  float v__63888; \n  /* Private Memory */\n  float v__63890_0;\n  \n  float v__63892_0;\n  \n  for (int v_wg_id_63874 = get_group_id(0); v_wg_id_63874 < ((v_MHeight_2)/(32)); v_wg_id_63874 = (v_wg_id_63874 + get_num_groups(0))) {\n    for (int v_l_id_63875 = get_local_id(0); v_l_id_63875 < 32; v_l_id_63875 = (v_l_id_63875 + get_local_size(0))) {\n      float v_tmp_63938 = 3.4028235E38f; \n      v__63886 = v_tmp_63938; \n      /* reduce_seq */\n      for (int v_i_63876 = 0; v_i_63876 < v_MWidthC_1; v_i_63876 = (1 + v_i_63876)) {\n        float v_tmp_63939 = 3.4028235E38f; \n        v__63888 = v_tmp_63939; \n        int v_index_63940 = v__63878[(v_i_63876 + (32 * v_MWidthC_1 * v_wg_id_63874) + (v_MWidthC_1 * v_l_id_63875))]; \n        if (v_index_63940 < 0) {\n          v__63890_0 = v__63888; \n        } else {\n          if (v_index_63940 >= v_VLength_3) {\n            v__63890_0 = v__63888; \n          } else {\n            v__63890_0 = v__63880[v_index_63940]; \n          }\n        }\n        v__63892_0 = absadd(v__63890_0, v__63879[(v_i_63876 + (32 * v_MWidthC_1 * v_wg_id_63874) + (v_MWidthC_1 * v_l_id_63875))]); \n        v__63886 = clmin(v__63892_0, v__63886); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_63877 = 0; \n        v__63896[(v_l_id_63875 + (32 * v_wg_id_63874))] = doubleMultiplyAdd(v__63886, v__63882, v__63881[(v_l_id_63875 + (32 * v_wg_id_63874))], v__63883); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63878",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63880",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63881",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63882",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63883",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__63896",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}