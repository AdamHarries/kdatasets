{
  "name" : "swrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64988, const global float* restrict v__64989, const global float* restrict v__64990, const global float* restrict v__64991, float v__64992, float v__64993, global float* v__65010, local float* v__65005, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64996; \n  float v__64998; \n  float v__57389; \n  /* Private Memory */\n  float v__65000_0;\n  \n  float v__65002_0;\n  \n  for (int v_wg_id_64981 = get_group_id(0); v_wg_id_64981 < v_MHeight_2; v_wg_id_64981 = (v_wg_id_64981 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5229; \n      v_work_idx_5229 = 0; \n      int v_l_id_64982 = atomic_inc(&(v_work_idx_5229)); \n      while((v_l_id_64982 < v_MWidthC_1)){\n        float v_tmp_65067 = 3.4028235E38f; \n        v__64996 = v_tmp_65067; \n        /* reduce_seq */\n        for (int v_i_64983 = 0; v_i_64983 < 32; v_i_64983 = (1 + v_i_64983)) {\n          float v_tmp_65068 = 3.4028235E38f; \n          v__64998 = v_tmp_65068; \n          int v_index_65069 = v__64988[(v_l_id_64982 + (32 * v_MWidthC_1 * v_wg_id_64981) + (v_MWidthC_1 * v_i_64983))]; \n          if (v_index_65069 < 0) {\n            v__65000_0 = v__64998; \n          } else {\n            if (v_index_65069 >= v_VLength_3) {\n              v__65000_0 = v__64998; \n            } else {\n              v__65000_0 = v__64990[v_index_65069]; \n            }\n          }\n          v__65002_0 = absadd(v__65000_0, v__64989[(v_l_id_64982 + (32 * v_MWidthC_1 * v_wg_id_64981) + (v_MWidthC_1 * v_i_64983))]); \n          v__64996 = clmin(v__65002_0, v__64996); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64984 = 0; \n          v__65005[v_l_id_64982] = id(v__64996); \n        }\n        /* end map_seq */\n        v_l_id_64982 = atomic_inc(&(v_work_idx_5229)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_64985 = get_local_id(0); \n      float v_tmp_65072 = 3.4028235E38f; \n      v__57389 = v_tmp_65072; \n      /* reduce_seq */\n      for (int v_i_64986 = 0; v_i_64986 < v_MWidthC_1; v_i_64986 = (1 + v_i_64986)) {\n        v__57389 = clmin(v__57389, v__65005[(v_i_64986 + (v_MWidthC_1 * v_l_id_64985))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64987 = 0; \n        v__65010[v_wg_id_64981] = doubleMultiplyAdd(v__57389, v__64992, v__64991[v_wg_id_64981], v__64993); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__64988",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64989",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64990",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64991",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64992",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64993",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65005",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}