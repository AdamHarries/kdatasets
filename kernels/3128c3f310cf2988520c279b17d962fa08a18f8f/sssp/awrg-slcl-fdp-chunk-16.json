{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62218, const global float* restrict v__62219, const global float* restrict v__62220, const global float* restrict v__62221, float v__62222, float v__62223, global float* v__62237, global int* v__62225, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62227; \n  float v__62229; \n  /* Private Memory */\n  float v__62231_0;\n  \n  float v__62233_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4971 = v__62225; \n    local int v_w_id_62214; \n    if (get_local_id(0) == 0) {\n      v_w_id_62214 = atomic_inc(v_work_idx_4971); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62214 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_62215 = get_local_id(0); v_l_id_62215 < 16; v_l_id_62215 = (v_l_id_62215 + get_local_size(0))) {\n        float v_tmp_62278 = 3.4028235E38f; \n        v__62227 = v_tmp_62278; \n        /* reduce_seq */\n        for (int v_i_62216 = 0; v_i_62216 < v_MWidthC_1; v_i_62216 = (1 + v_i_62216)) {\n          float v_tmp_62279 = 3.4028235E38f; \n          v__62229 = v_tmp_62279; \n          int v_index_62280 = v__62218[(v_i_62216 + (16 * v_MWidthC_1 * v_w_id_62214) + (v_MWidthC_1 * v_l_id_62215))]; \n          if (v_index_62280 < 0) {\n            v__62231_0 = v__62229; \n          } else {\n            if (v_index_62280 >= v_VLength_3) {\n              v__62231_0 = v__62229; \n            } else {\n              v__62231_0 = v__62220[v_index_62280]; \n            }\n          }\n          v__62233_0 = absadd(v__62231_0, v__62219[(v_i_62216 + (16 * v_MWidthC_1 * v_w_id_62214) + (v_MWidthC_1 * v_l_id_62215))]); \n          v__62227 = clmin(v__62233_0, v__62227); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62217 = 0; \n          v__62237[(v_l_id_62215 + (16 * v_w_id_62214))] = doubleMultiplyAdd(v__62227, v__62222, v__62221[(v_l_id_62215 + (16 * v_w_id_62214))], v__62223); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_62214 = atomic_inc(v_work_idx_4971); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62218",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62219",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62220",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62221",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62222",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62223",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62225",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62237",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}