{
  "name" : "awrg-alcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79734, const global float* restrict v__79735, const global float* restrict v__79736, const global float* restrict v__79737, float v__79738, float v__79739, global float* v__79753, global int* v__79741, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79743; \n  float v__79745; \n  /* Private Memory */\n  float v__79747_0;\n  \n  float v__79749_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6611 = v__79741; \n    local int v_w_id_79730; \n    if (get_local_id(0) == 0) {\n      v_w_id_79730 = atomic_inc(v_work_idx_6611); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79730 < ((v_MHeight_2)/(512)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6609; \n        v_work_idx_6609 = 0; \n        int v_l_id_79731 = atomic_inc(&(v_work_idx_6609)); \n        while((v_l_id_79731 < 512)){\n          float v_tmp_79790 = 3.4028235E38f; \n          v__79743 = v_tmp_79790; \n          /* reduce_seq */\n          for (int v_i_79732 = 0; v_i_79732 < v_MWidthC_1; v_i_79732 = (1 + v_i_79732)) {\n            float v_tmp_79791 = 3.4028235E38f; \n            v__79745 = v_tmp_79791; \n            int v_index_79792 = v__79734[(v_i_79732 + (512 * v_MWidthC_1 * v_w_id_79730) + (v_MWidthC_1 * v_l_id_79731))]; \n            if (v_index_79792 < 0) {\n              v__79747_0 = v__79745; \n            } else {\n              if (v_index_79792 >= v_VLength_3) {\n                v__79747_0 = v__79745; \n              } else {\n                v__79747_0 = v__79736[v_index_79792]; \n              }\n            }\n            v__79749_0 = absadd(v__79747_0, v__79735[(v_i_79732 + (512 * v_MWidthC_1 * v_w_id_79730) + (v_MWidthC_1 * v_l_id_79731))]); \n            v__79743 = clmin(v__79749_0, v__79743); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79733 = 0; \n            v__79753[(v_l_id_79731 + (512 * v_w_id_79730))] = doubleMultiplyAdd(v__79743, v__79738, v__79737[(v_l_id_79731 + (512 * v_w_id_79730))], v__79739); \n          }\n          /* end map_seq */\n          v_l_id_79731 = atomic_inc(&(v_work_idx_6609)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79730 = atomic_inc(v_work_idx_6611); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79741",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}