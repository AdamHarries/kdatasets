{
  "name" : "awrg-alcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79981, const global float* restrict v__79982, const global float* restrict v__79983, const global float* restrict v__79984, float v__79985, float v__79986, global float* v__80004, global int* v__79988, local float* v__79999, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79990; \n  float v__79992; \n  float v__57389; \n  /* Private Memory */\n  float v__79994_0;\n  \n  float v__79996_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6639 = v__79988; \n    local int v_w_id_79974; \n    if (get_local_id(0) == 0) {\n      v_w_id_79974 = atomic_inc(v_work_idx_6639); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79974 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6637; \n        v_work_idx_6637 = 0; \n        int v_l_id_79975 = atomic_inc(&(v_work_idx_6637)); \n        while((v_l_id_79975 < v_MWidthC_1)){\n          float v_tmp_80059 = 3.4028235E38f; \n          v__79990 = v_tmp_80059; \n          /* reduce_seq */\n          for (int v_i_79976 = 0; v_i_79976 < 512; v_i_79976 = (1 + v_i_79976)) {\n            float v_tmp_80060 = 3.4028235E38f; \n            v__79992 = v_tmp_80060; \n            int v_index_80061 = v__79981[(v_l_id_79975 + (512 * v_MWidthC_1 * v_w_id_79974) + (v_MWidthC_1 * v_i_79976))]; \n            if (v_index_80061 < 0) {\n              v__79994_0 = v__79992; \n            } else {\n              if (v_index_80061 >= v_VLength_3) {\n                v__79994_0 = v__79992; \n              } else {\n                v__79994_0 = v__79983[v_index_80061]; \n              }\n            }\n            v__79996_0 = absadd(v__79994_0, v__79982[(v_l_id_79975 + (512 * v_MWidthC_1 * v_w_id_79974) + (v_MWidthC_1 * v_i_79976))]); \n            v__79990 = clmin(v__79996_0, v__79990); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79977 = 0; \n            v__79999[v_l_id_79975] = id(v__79990); \n          }\n          /* end map_seq */\n          v_l_id_79975 = atomic_inc(&(v_work_idx_6637)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79978 = get_local_id(0); \n        float v_tmp_80064 = 3.4028235E38f; \n        v__57389 = v_tmp_80064; \n        /* reduce_seq */\n        for (int v_i_79979 = 0; v_i_79979 < v_MWidthC_1; v_i_79979 = (1 + v_i_79979)) {\n          v__57389 = clmin(v__57389, v__79999[(v_i_79979 + (v_MWidthC_1 * v_l_id_79978))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79980 = 0; \n          v__80004[v_w_id_79974] = doubleMultiplyAdd(v__57389, v__79985, v__79984[v_w_id_79974], v__79986); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79974 = atomic_inc(v_work_idx_6639); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__79981",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79982",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79983",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79985",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79986",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79988",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79999",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}