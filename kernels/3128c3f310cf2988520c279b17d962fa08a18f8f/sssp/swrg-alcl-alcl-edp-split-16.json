{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__62046, const global float* restrict v__62047, const global float* restrict v__62048, const global float* restrict v__62049, float v__62050, float v__62051, global float* v__62070, local float* v__62065, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62054; \n  float v__62056; \n  float v__57389; \n  /* Private Memory */\n  float v__62058_0;\n  \n  float v__62060_0;\n  \n  int v__62064_0;\n  \n  for (int v_wg_id_62039 = get_group_id(0); v_wg_id_62039 < v_MHeight_2; v_wg_id_62039 = (v_wg_id_62039 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4957; \n      v_work_idx_4957 = 0; \n      int v_l_id_62040 = atomic_inc(&(v_work_idx_4957)); \n      while((v_l_id_62040 < v_MWidthC_1)){\n        float v_tmp_62126 = 3.4028235E38f; \n        v__62054 = v_tmp_62126; \n        /* reduce_while_seq */\n        for (int v_i_62041 = 0; v_i_62041 < 16; v_i_62041 = (1 + v_i_62041)) {\n          v__62064_0 = check(v__62054, v__62046[(v_l_id_62040 + (16 * v_MWidthC_1 * v_wg_id_62039) + (v_MWidthC_1 * v_i_62041))]); \n          if (v__62064_0) {\n          } else {\n            break;\n          }\n          float v_tmp_62127 = 3.4028235E38f; \n          v__62056 = v_tmp_62127; \n          int v_index_62128 = v__62046[(v_l_id_62040 + (16 * v_MWidthC_1 * v_wg_id_62039) + (v_MWidthC_1 * v_i_62041))]; \n          if (v_index_62128 < 0) {\n            v__62058_0 = v__62056; \n          } else {\n            if (v_index_62128 >= v_VLength_3) {\n              v__62058_0 = v__62056; \n            } else {\n              v__62058_0 = v__62048[v_index_62128]; \n            }\n          }\n          v__62060_0 = absadd(v__62058_0, v__62047[(v_l_id_62040 + (16 * v_MWidthC_1 * v_wg_id_62039) + (v_MWidthC_1 * v_i_62041))]); \n          v__62054 = clmin(v__62060_0, v__62054); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62042 = 0; \n          v__62065[v_l_id_62040] = id(v__62054); \n        }\n        /* end map_seq */\n        v_l_id_62040 = atomic_inc(&(v_work_idx_4957)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4952; \n      v_work_idx_4952 = 0; \n      int v_l_id_62043 = atomic_inc(&(v_work_idx_4952)); \n      while((v_l_id_62043 < 1)){\n        float v_tmp_62131 = 3.4028235E38f; \n        v__57389 = v_tmp_62131; \n        /* reduce_seq */\n        for (int v_i_62044 = 0; v_i_62044 < v_MWidthC_1; v_i_62044 = (1 + v_i_62044)) {\n          v__57389 = clmin(v__57389, v__62065[(v_i_62044 + (v_MWidthC_1 * v_l_id_62043))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62045 = 0; \n          v__62070[v_wg_id_62039] = doubleMultiplyAdd(v__57389, v__62050, v__62049[v_wg_id_62039], v__62051); \n        }\n        /* end map_seq */\n        v_l_id_62043 = atomic_inc(&(v_work_idx_4952)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62046",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62047",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62048",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62049",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62050",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62051",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__62070",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62065",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}