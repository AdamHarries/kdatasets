{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__70371, const global float* restrict v__70372, const global float* restrict v__70373, const global float* restrict v__70374, float v__70375, float v__70376, global float* v__70396, global int* v__70378, local float* v__70391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70380; \n  float v__70382; \n  float v__57389; \n  /* Private Memory */\n  float v__70384_0;\n  \n  float v__70386_0;\n  \n  int v__70390_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5747 = v__70378; \n    local int v_w_id_70364; \n    if (get_local_id(0) == 0) {\n      v_w_id_70364 = atomic_inc(v_work_idx_5747); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70364 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5745; \n        v_work_idx_5745 = 0; \n        int v_l_id_70365 = atomic_inc(&(v_work_idx_5745)); \n        while((v_l_id_70365 < v_MWidthC_1)){\n          float v_tmp_70450 = 3.4028235E38f; \n          v__70380 = v_tmp_70450; \n          /* reduce_while_seq */\n          for (int v_i_70366 = 0; v_i_70366 < 64; v_i_70366 = (1 + v_i_70366)) {\n            v__70390_0 = check(v__70380, v__70371[(v_l_id_70365 + (64 * v_MWidthC_1 * v_w_id_70364) + (v_MWidthC_1 * v_i_70366))]); \n            if (v__70390_0) {\n            } else {\n              break;\n            }\n            float v_tmp_70451 = 3.4028235E38f; \n            v__70382 = v_tmp_70451; \n            int v_index_70452 = v__70371[(v_l_id_70365 + (64 * v_MWidthC_1 * v_w_id_70364) + (v_MWidthC_1 * v_i_70366))]; \n            if (v_index_70452 < 0) {\n              v__70384_0 = v__70382; \n            } else {\n              if (v_index_70452 >= v_VLength_3) {\n                v__70384_0 = v__70382; \n              } else {\n                v__70384_0 = v__70373[v_index_70452]; \n              }\n            }\n            v__70386_0 = absadd(v__70384_0, v__70372[(v_l_id_70365 + (64 * v_MWidthC_1 * v_w_id_70364) + (v_MWidthC_1 * v_i_70366))]); \n            v__70380 = clmin(v__70386_0, v__70380); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70367 = 0; \n            v__70391[v_l_id_70365] = id(v__70380); \n          }\n          /* end map_seq */\n          v_l_id_70365 = atomic_inc(&(v_work_idx_5745)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5740; \n        v_work_idx_5740 = 0; \n        int v_l_id_70368 = atomic_inc(&(v_work_idx_5740)); \n        while((v_l_id_70368 < 1)){\n          float v_tmp_70455 = 3.4028235E38f; \n          v__57389 = v_tmp_70455; \n          /* reduce_seq */\n          for (int v_i_70369 = 0; v_i_70369 < v_MWidthC_1; v_i_70369 = (1 + v_i_70369)) {\n            v__57389 = clmin(v__57389, v__70391[(v_i_70369 + (v_MWidthC_1 * v_l_id_70368))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70370 = 0; \n            v__70396[v_w_id_70364] = doubleMultiplyAdd(v__57389, v__70375, v__70374[v_w_id_70364], v__70376); \n          }\n          /* end map_seq */\n          v_l_id_70368 = atomic_inc(&(v_work_idx_5740)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70364 = atomic_inc(v_work_idx_5747); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__70371",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70372",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70373",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70374",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70375",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70376",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70378",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}