{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71854, const global float* restrict v__71855, const global float* restrict v__71856, const global float* restrict v__71857, float v__71858, float v__71859, global float* v__71876, global float* v__71866, local float* v__71871, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71862; \n  float v__71867; \n  float v__57389; \n  /* Private Memory */\n  float v__71864_0;\n  \n  for (int v_wg_id_71846 = get_group_id(0); v_wg_id_71846 < v_MHeight_2; v_wg_id_71846 = (v_wg_id_71846 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5873; \n      v_work_idx_5873 = 0; \n      int v_l_id_71847 = atomic_inc(&(v_work_idx_5873)); \n      while((v_l_id_71847 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_71848 = 0; v_i_71848 < 128; v_i_71848 = (1 + v_i_71848)) {\n          float v_tmp_71929 = 3.4028235E38f; \n          v__71862 = v_tmp_71929; \n          int v_index_71930 = v__71854[(v_l_id_71847 + (128 * v_MWidthC_1 * v_wg_id_71846) + (v_MWidthC_1 * v_i_71848))]; \n          if (v_index_71930 < 0) {\n            v__71864_0 = v__71862; \n          } else {\n            if (v_index_71930 >= v_VLength_3) {\n              v__71864_0 = v__71862; \n            } else {\n              v__71864_0 = v__71856[v_index_71930]; \n            }\n          }\n          v__71866[(127 + (128 * v_MWidthC_1 * v_wg_id_71846) + (-1 * v_i_71848) + (128 * v_l_id_71847))] = absadd(v__71864_0, v__71855[(v_l_id_71847 + (128 * v_MWidthC_1 * v_wg_id_71846) + (v_MWidthC_1 * v_i_71848))]); \n        }\n        /* end map_seq */\n        float v_tmp_71931 = 3.4028235E38f; \n        v__71867 = v_tmp_71931; \n        /* reduce_seq */\n        for (int v_i_71849 = 0; v_i_71849 < 128; v_i_71849 = (1 + v_i_71849)) {\n          v__71867 = clmin(v__71867, v__71866[(v_i_71849 + (128 * v_MWidthC_1 * v_wg_id_71846) + (128 * v_l_id_71847))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71850 = 0; \n          v__71871[v_l_id_71847] = id(v__71867); \n        }\n        /* end map_seq */\n        v_l_id_71847 = atomic_inc(&(v_work_idx_5873)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5867; \n      v_work_idx_5867 = 0; \n      int v_l_id_71851 = atomic_inc(&(v_work_idx_5867)); \n      while((v_l_id_71851 < 1)){\n        float v_tmp_71934 = 3.4028235E38f; \n        v__57389 = v_tmp_71934; \n        /* reduce_seq */\n        for (int v_i_71852 = 0; v_i_71852 < v_MWidthC_1; v_i_71852 = (1 + v_i_71852)) {\n          v__57389 = clmin(v__57389, v__71871[(v_i_71852 + (v_MWidthC_1 * v_l_id_71851))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71853 = 0; \n          v__71876[v_wg_id_71846] = doubleMultiplyAdd(v__57389, v__71858, v__71857[v_wg_id_71846], v__71859); \n        }\n        /* end map_seq */\n        v_l_id_71851 = atomic_inc(&(v_work_idx_5867)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71854",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71855",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71866",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71876",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71871",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}