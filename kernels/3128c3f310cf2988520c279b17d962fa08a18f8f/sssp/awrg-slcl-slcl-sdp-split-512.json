{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79036, const global float* restrict v__79037, const global float* restrict v__79038, const global float* restrict v__79039, float v__79040, float v__79041, global float* v__79059, global float* v__79049, global int* v__79043, local float* v__79054, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79045; \n  float v__79050; \n  float v__57389; \n  /* Private Memory */\n  float v__79047_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6547 = v__79043; \n    local int v_w_id_79028; \n    if (get_local_id(0) == 0) {\n      v_w_id_79028 = atomic_inc(v_work_idx_6547); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79028 < v_MHeight_2)){\n      for (int v_l_id_79029 = get_local_id(0); v_l_id_79029 < v_MWidthC_1; v_l_id_79029 = (v_l_id_79029 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_79030 = 0; v_i_79030 < 512; v_i_79030 = (1 + v_i_79030)) {\n          float v_tmp_79122 = 3.4028235E38f; \n          v__79045 = v_tmp_79122; \n          int v_index_79123 = v__79036[(v_l_id_79029 + (512 * v_MWidthC_1 * v_w_id_79028) + (v_MWidthC_1 * v_i_79030))]; \n          if (v_index_79123 < 0) {\n            v__79047_0 = v__79045; \n          } else {\n            if (v_index_79123 >= v_VLength_3) {\n              v__79047_0 = v__79045; \n            } else {\n              v__79047_0 = v__79038[v_index_79123]; \n            }\n          }\n          v__79049[(511 + (512 * v_MWidthC_1 * v_w_id_79028) + (-1 * v_i_79030) + (512 * v_l_id_79029))] = absadd(v__79047_0, v__79037[(v_l_id_79029 + (512 * v_MWidthC_1 * v_w_id_79028) + (v_MWidthC_1 * v_i_79030))]); \n        }\n        /* end map_seq */\n        float v_tmp_79124 = 3.4028235E38f; \n        v__79050 = v_tmp_79124; \n        /* reduce_seq */\n        for (int v_i_79031 = 0; v_i_79031 < 512; v_i_79031 = (1 + v_i_79031)) {\n          v__79050 = clmin(v__79050, v__79049[(v_i_79031 + (512 * v_MWidthC_1 * v_w_id_79028) + (512 * v_l_id_79029))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79032 = 0; \n          v__79054[v_l_id_79029] = id(v__79050); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79033 = get_local_id(0); \n        float v_tmp_79127 = 3.4028235E38f; \n        v__57389 = v_tmp_79127; \n        /* reduce_seq */\n        for (int v_i_79034 = 0; v_i_79034 < v_MWidthC_1; v_i_79034 = (1 + v_i_79034)) {\n          v__57389 = clmin(v__57389, v__79054[(v_i_79034 + (v_MWidthC_1 * v_l_id_79033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79035 = 0; \n          v__79059[v_w_id_79028] = doubleMultiplyAdd(v__57389, v__79040, v__79039[v_w_id_79028], v__79041); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79028 = atomic_inc(v_work_idx_6547); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79036",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79037",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79038",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79040",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79041",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79049",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79043",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79059",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79054",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}