{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59892, const global float* restrict v__59893, const global float* restrict v__59894, const global float* restrict v__59895, float v__59896, float v__59897, global float* v__59915, global float* v__59905, global int* v__59899, local float* v__59910, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59901; \n  float v__59906; \n  float v__57389; \n  /* Private Memory */\n  float v__59903_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4757 = v__59899; \n    local int v_w_id_59884; \n    if (get_local_id(0) == 0) {\n      v_w_id_59884 = atomic_inc(v_work_idx_4757); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59884 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4755; \n        v_work_idx_4755 = 0; \n        int v_l_id_59885 = atomic_inc(&(v_work_idx_4755)); \n        while((v_l_id_59885 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_59886 = 0; v_i_59886 < 8; v_i_59886 = (1 + v_i_59886)) {\n            float v_tmp_59970 = 3.4028235E38f; \n            v__59901 = v_tmp_59970; \n            int v_index_59971 = v__59892[(v_l_id_59885 + (8 * v_MWidthC_1 * v_w_id_59884) + (v_MWidthC_1 * v_i_59886))]; \n            if (v_index_59971 < 0) {\n              v__59903_0 = v__59901; \n            } else {\n              if (v_index_59971 >= v_VLength_3) {\n                v__59903_0 = v__59901; \n              } else {\n                v__59903_0 = v__59894[v_index_59971]; \n              }\n            }\n            v__59905[(7 + (8 * v_MWidthC_1 * v_w_id_59884) + (-1 * v_i_59886) + (8 * v_l_id_59885))] = absadd(v__59903_0, v__59893[(v_l_id_59885 + (8 * v_MWidthC_1 * v_w_id_59884) + (v_MWidthC_1 * v_i_59886))]); \n          }\n          /* end map_seq */\n          float v_tmp_59972 = 3.4028235E38f; \n          v__59906 = v_tmp_59972; \n          /* reduce_seq */\n          for (int v_i_59887 = 0; v_i_59887 < 8; v_i_59887 = (1 + v_i_59887)) {\n            v__59906 = clmin(v__59906, v__59905[(v_i_59887 + (8 * v_MWidthC_1 * v_w_id_59884) + (8 * v_l_id_59885))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59888 = 0; \n            v__59910[v_l_id_59885] = id(v__59906); \n          }\n          /* end map_seq */\n          v_l_id_59885 = atomic_inc(&(v_work_idx_4755)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59889 = get_local_id(0); \n        float v_tmp_59975 = 3.4028235E38f; \n        v__57389 = v_tmp_59975; \n        /* reduce_seq */\n        for (int v_i_59890 = 0; v_i_59890 < v_MWidthC_1; v_i_59890 = (1 + v_i_59890)) {\n          v__57389 = clmin(v__57389, v__59910[(v_i_59890 + (v_MWidthC_1 * v_l_id_59889))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59891 = 0; \n          v__59915[v_w_id_59884] = doubleMultiplyAdd(v__57389, v__59896, v__59895[v_w_id_59884], v__59897); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59884 = atomic_inc(v_work_idx_4757); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59892",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59893",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59894",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59895",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59896",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59897",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59905",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59899",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59915",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59910",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}