{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__69250, const global float* restrict v__69251, const global float* restrict v__69252, const global float* restrict v__69253, float v__69254, float v__69255, global float* v__69275, global int* v__69257, local float* v__69270, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69259; \n  float v__69261; \n  float v__57389; \n  /* Private Memory */\n  float v__69263_0;\n  \n  float v__69265_0;\n  \n  int v__69269_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5629 = v__69257; \n    local int v_w_id_69243; \n    if (get_local_id(0) == 0) {\n      v_w_id_69243 = atomic_inc(v_work_idx_5629); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69243 < v_MHeight_2)){\n      for (int v_l_id_69244 = get_local_id(0); v_l_id_69244 < v_MWidthC_1; v_l_id_69244 = (v_l_id_69244 + get_local_size(0))) {\n        float v_tmp_69341 = 3.4028235E38f; \n        v__69259 = v_tmp_69341; \n        /* reduce_while_seq */\n        for (int v_i_69245 = 0; v_i_69245 < 64; v_i_69245 = (1 + v_i_69245)) {\n          v__69269_0 = check(v__69259, v__69250[(v_l_id_69244 + (64 * v_MWidthC_1 * v_w_id_69243) + (v_MWidthC_1 * v_i_69245))]); \n          if (v__69269_0) {\n          } else {\n            break;\n          }\n          float v_tmp_69342 = 3.4028235E38f; \n          v__69261 = v_tmp_69342; \n          int v_index_69343 = v__69250[(v_l_id_69244 + (64 * v_MWidthC_1 * v_w_id_69243) + (v_MWidthC_1 * v_i_69245))]; \n          if (v_index_69343 < 0) {\n            v__69263_0 = v__69261; \n          } else {\n            if (v_index_69343 >= v_VLength_3) {\n              v__69263_0 = v__69261; \n            } else {\n              v__69263_0 = v__69252[v_index_69343]; \n            }\n          }\n          v__69265_0 = absadd(v__69263_0, v__69251[(v_l_id_69244 + (64 * v_MWidthC_1 * v_w_id_69243) + (v_MWidthC_1 * v_i_69245))]); \n          v__69259 = clmin(v__69265_0, v__69259); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69246 = 0; \n          v__69270[v_l_id_69244] = id(v__69259); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69247 = get_local_id(0); \n        float v_tmp_69346 = 3.4028235E38f; \n        v__57389 = v_tmp_69346; \n        /* reduce_seq */\n        for (int v_i_69248 = 0; v_i_69248 < v_MWidthC_1; v_i_69248 = (1 + v_i_69248)) {\n          v__57389 = clmin(v__57389, v__69270[(v_i_69248 + (v_MWidthC_1 * v_l_id_69247))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69249 = 0; \n          v__69275[v_w_id_69243] = doubleMultiplyAdd(v__57389, v__69254, v__69253[v_w_id_69243], v__69255); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69243 = atomic_inc(v_work_idx_5629); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__69250",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69251",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69252",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69253",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69254",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69255",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69257",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69275",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69270",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}