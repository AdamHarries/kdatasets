{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69145, const global float* restrict v__69146, const global float* restrict v__69147, const global float* restrict v__69148, float v__69149, float v__69150, global float* v__69168, global int* v__69152, local float* v__69163, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69154; \n  float v__69156; \n  float v__57389; \n  /* Private Memory */\n  float v__69158_0;\n  \n  float v__69160_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5620 = v__69152; \n    local int v_w_id_69138; \n    if (get_local_id(0) == 0) {\n      v_w_id_69138 = atomic_inc(v_work_idx_5620); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69138 < v_MHeight_2)){\n      for (int v_l_id_69139 = get_local_id(0); v_l_id_69139 < v_MWidthC_1; v_l_id_69139 = (v_l_id_69139 + get_local_size(0))) {\n        float v_tmp_69231 = 3.4028235E38f; \n        v__69154 = v_tmp_69231; \n        /* reduce_seq */\n        for (int v_i_69140 = 0; v_i_69140 < 64; v_i_69140 = (1 + v_i_69140)) {\n          float v_tmp_69232 = 3.4028235E38f; \n          v__69156 = v_tmp_69232; \n          int v_index_69233 = v__69145[(v_l_id_69139 + (64 * v_MWidthC_1 * v_w_id_69138) + (v_MWidthC_1 * v_i_69140))]; \n          if (v_index_69233 < 0) {\n            v__69158_0 = v__69156; \n          } else {\n            if (v_index_69233 >= v_VLength_3) {\n              v__69158_0 = v__69156; \n            } else {\n              v__69158_0 = v__69147[v_index_69233]; \n            }\n          }\n          v__69160_0 = absadd(v__69158_0, v__69146[(v_l_id_69139 + (64 * v_MWidthC_1 * v_w_id_69138) + (v_MWidthC_1 * v_i_69140))]); \n          v__69154 = clmin(v__69160_0, v__69154); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69141 = 0; \n          v__69163[v_l_id_69139] = id(v__69154); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69142 = get_local_id(0); \n        float v_tmp_69236 = 3.4028235E38f; \n        v__57389 = v_tmp_69236; \n        /* reduce_seq */\n        for (int v_i_69143 = 0; v_i_69143 < v_MWidthC_1; v_i_69143 = (1 + v_i_69143)) {\n          v__57389 = clmin(v__57389, v__69163[(v_i_69143 + (v_MWidthC_1 * v_l_id_69142))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69144 = 0; \n          v__69168[v_w_id_69138] = doubleMultiplyAdd(v__57389, v__69149, v__69148[v_w_id_69138], v__69150); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69138 = atomic_inc(v_work_idx_5620); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69145",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69146",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69147",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69148",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69149",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69150",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69152",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69163",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}