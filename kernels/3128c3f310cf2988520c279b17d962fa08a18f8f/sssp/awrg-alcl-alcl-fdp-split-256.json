{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76942, const global float* restrict v__76943, const global float* restrict v__76944, const global float* restrict v__76945, float v__76946, float v__76947, global float* v__76965, global int* v__76949, local float* v__76960, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76951; \n  float v__76953; \n  float v__57389; \n  /* Private Memory */\n  float v__76955_0;\n  \n  float v__76957_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6360 = v__76949; \n    local int v_w_id_76935; \n    if (get_local_id(0) == 0) {\n      v_w_id_76935 = atomic_inc(v_work_idx_6360); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76935 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6358; \n        v_work_idx_6358 = 0; \n        int v_l_id_76936 = atomic_inc(&(v_work_idx_6358)); \n        while((v_l_id_76936 < v_MWidthC_1)){\n          float v_tmp_77016 = 3.4028235E38f; \n          v__76951 = v_tmp_77016; \n          /* reduce_seq */\n          for (int v_i_76937 = 0; v_i_76937 < 256; v_i_76937 = (1 + v_i_76937)) {\n            float v_tmp_77017 = 3.4028235E38f; \n            v__76953 = v_tmp_77017; \n            int v_index_77018 = v__76942[(v_l_id_76936 + (256 * v_MWidthC_1 * v_w_id_76935) + (v_MWidthC_1 * v_i_76937))]; \n            if (v_index_77018 < 0) {\n              v__76955_0 = v__76953; \n            } else {\n              if (v_index_77018 >= v_VLength_3) {\n                v__76955_0 = v__76953; \n              } else {\n                v__76955_0 = v__76944[v_index_77018]; \n              }\n            }\n            v__76957_0 = absadd(v__76955_0, v__76943[(v_l_id_76936 + (256 * v_MWidthC_1 * v_w_id_76935) + (v_MWidthC_1 * v_i_76937))]); \n            v__76951 = clmin(v__76957_0, v__76951); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76938 = 0; \n            v__76960[v_l_id_76936] = id(v__76951); \n          }\n          /* end map_seq */\n          v_l_id_76936 = atomic_inc(&(v_work_idx_6358)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6353; \n        v_work_idx_6353 = 0; \n        int v_l_id_76939 = atomic_inc(&(v_work_idx_6353)); \n        while((v_l_id_76939 < 1)){\n          float v_tmp_77021 = 3.4028235E38f; \n          v__57389 = v_tmp_77021; \n          /* reduce_seq */\n          for (int v_i_76940 = 0; v_i_76940 < v_MWidthC_1; v_i_76940 = (1 + v_i_76940)) {\n            v__57389 = clmin(v__57389, v__76960[(v_i_76940 + (v_MWidthC_1 * v_l_id_76939))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76941 = 0; \n            v__76965[v_w_id_76935] = doubleMultiplyAdd(v__57389, v__76946, v__76945[v_w_id_76935], v__76947); \n          }\n          /* end map_seq */\n          v_l_id_76939 = atomic_inc(&(v_work_idx_6353)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76935 = atomic_inc(v_work_idx_6360); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__76942",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76943",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76944",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76945",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76946",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76947",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76949",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76960",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}