{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72372, const global float* restrict v__72373, const global float* restrict v__72374, const global float* restrict v__72375, float v__72376, float v__72377, global float* v__72395, global float* v__72385, global int* v__72379, local float* v__72390, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72381; \n  float v__72386; \n  float v__57389; \n  /* Private Memory */\n  float v__72383_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5923 = v__72379; \n    local int v_w_id_72364; \n    if (get_local_id(0) == 0) {\n      v_w_id_72364 = atomic_inc(v_work_idx_5923); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72364 < v_MHeight_2)){\n      for (int v_l_id_72365 = get_local_id(0); v_l_id_72365 < v_MWidthC_1; v_l_id_72365 = (v_l_id_72365 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72366 = 0; v_i_72366 < 128; v_i_72366 = (1 + v_i_72366)) {\n          float v_tmp_72458 = 3.4028235E38f; \n          v__72381 = v_tmp_72458; \n          int v_index_72459 = v__72372[(v_l_id_72365 + (128 * v_MWidthC_1 * v_w_id_72364) + (v_MWidthC_1 * v_i_72366))]; \n          if (v_index_72459 < 0) {\n            v__72383_0 = v__72381; \n          } else {\n            if (v_index_72459 >= v_VLength_3) {\n              v__72383_0 = v__72381; \n            } else {\n              v__72383_0 = v__72374[v_index_72459]; \n            }\n          }\n          v__72385[(127 + (128 * v_MWidthC_1 * v_w_id_72364) + (-1 * v_i_72366) + (128 * v_l_id_72365))] = absadd(v__72383_0, v__72373[(v_l_id_72365 + (128 * v_MWidthC_1 * v_w_id_72364) + (v_MWidthC_1 * v_i_72366))]); \n        }\n        /* end map_seq */\n        float v_tmp_72460 = 3.4028235E38f; \n        v__72386 = v_tmp_72460; \n        /* reduce_seq */\n        for (int v_i_72367 = 0; v_i_72367 < 128; v_i_72367 = (1 + v_i_72367)) {\n          v__72386 = clmin(v__72386, v__72385[(v_i_72367 + (128 * v_MWidthC_1 * v_w_id_72364) + (128 * v_l_id_72365))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72368 = 0; \n          v__72390[v_l_id_72365] = id(v__72386); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72369 = get_local_id(0); \n        float v_tmp_72463 = 3.4028235E38f; \n        v__57389 = v_tmp_72463; \n        /* reduce_seq */\n        for (int v_i_72370 = 0; v_i_72370 < v_MWidthC_1; v_i_72370 = (1 + v_i_72370)) {\n          v__57389 = clmin(v__57389, v__72390[(v_i_72370 + (v_MWidthC_1 * v_l_id_72369))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72371 = 0; \n          v__72395[v_w_id_72364] = doubleMultiplyAdd(v__57389, v__72376, v__72375[v_w_id_72364], v__72377); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72364 = atomic_inc(v_work_idx_5923); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72372",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72373",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72374",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72376",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72377",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72385",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72379",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72390",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}