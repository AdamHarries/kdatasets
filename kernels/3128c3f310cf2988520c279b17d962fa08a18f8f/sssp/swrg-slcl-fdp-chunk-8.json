{
  "name" : "swrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__57213, const global float* restrict v__57214, const global float* restrict v__57215, const global float* restrict v__57216, float v__57217, float v__57218, global float* v__57231, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57221; \n  float v__57223; \n  /* Private Memory */\n  float v__57225_0;\n  \n  float v__57227_0;\n  \n  for (int v_wg_id_57209 = get_group_id(0); v_wg_id_57209 < ((v_MHeight_2)/(8)); v_wg_id_57209 = (v_wg_id_57209 + get_num_groups(0))) {\n    for (int v_l_id_57210 = get_local_id(0); v_l_id_57210 < 8; v_l_id_57210 = (v_l_id_57210 + get_local_size(0))) {\n      float v_tmp_57273 = 3.4028235E38f; \n      v__57221 = v_tmp_57273; \n      /* reduce_seq */\n      for (int v_i_57211 = 0; v_i_57211 < v_MWidthC_1; v_i_57211 = (1 + v_i_57211)) {\n        float v_tmp_57274 = 3.4028235E38f; \n        v__57223 = v_tmp_57274; \n        int v_index_57275 = v__57213[(v_i_57211 + (8 * v_MWidthC_1 * v_wg_id_57209) + (v_MWidthC_1 * v_l_id_57210))]; \n        if (v_index_57275 < 0) {\n          v__57225_0 = v__57223; \n        } else {\n          if (v_index_57275 >= v_VLength_3) {\n            v__57225_0 = v__57223; \n          } else {\n            v__57225_0 = v__57215[v_index_57275]; \n          }\n        }\n        v__57227_0 = absadd(v__57225_0, v__57214[(v_i_57211 + (8 * v_MWidthC_1 * v_wg_id_57209) + (v_MWidthC_1 * v_l_id_57210))]); \n        v__57221 = clmin(v__57227_0, v__57221); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_57212 = 0; \n        v__57231[(v_l_id_57210 + (8 * v_wg_id_57209))] = doubleMultiplyAdd(v__57221, v__57217, v__57216[(v_l_id_57210 + (8 * v_wg_id_57209))], v__57218); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__57213",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57214",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__57215",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__57216",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57217",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57218",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__57231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}