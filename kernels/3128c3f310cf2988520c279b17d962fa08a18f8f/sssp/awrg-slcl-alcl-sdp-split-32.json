{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66029, const global float* restrict v__66030, const global float* restrict v__66031, const global float* restrict v__66032, float v__66033, float v__66034, global float* v__66052, global float* v__66042, global int* v__66036, local float* v__66047, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66038; \n  float v__66043; \n  float v__57389; \n  /* Private Memory */\n  float v__66040_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5328 = v__66036; \n    local int v_w_id_66021; \n    if (get_local_id(0) == 0) {\n      v_w_id_66021 = atomic_inc(v_work_idx_5328); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66021 < v_MHeight_2)){\n      for (int v_l_id_66022 = get_local_id(0); v_l_id_66022 < v_MWidthC_1; v_l_id_66022 = (v_l_id_66022 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_66023 = 0; v_i_66023 < 32; v_i_66023 = (1 + v_i_66023)) {\n          float v_tmp_66111 = 3.4028235E38f; \n          v__66038 = v_tmp_66111; \n          int v_index_66112 = v__66029[(v_l_id_66022 + (32 * v_MWidthC_1 * v_w_id_66021) + (v_MWidthC_1 * v_i_66023))]; \n          if (v_index_66112 < 0) {\n            v__66040_0 = v__66038; \n          } else {\n            if (v_index_66112 >= v_VLength_3) {\n              v__66040_0 = v__66038; \n            } else {\n              v__66040_0 = v__66031[v_index_66112]; \n            }\n          }\n          v__66042[(31 + (32 * v_MWidthC_1 * v_w_id_66021) + (-1 * v_i_66023) + (32 * v_l_id_66022))] = absadd(v__66040_0, v__66030[(v_l_id_66022 + (32 * v_MWidthC_1 * v_w_id_66021) + (v_MWidthC_1 * v_i_66023))]); \n        }\n        /* end map_seq */\n        float v_tmp_66113 = 3.4028235E38f; \n        v__66043 = v_tmp_66113; \n        /* reduce_seq */\n        for (int v_i_66024 = 0; v_i_66024 < 32; v_i_66024 = (1 + v_i_66024)) {\n          v__66043 = clmin(v__66043, v__66042[(v_i_66024 + (32 * v_MWidthC_1 * v_w_id_66021) + (32 * v_l_id_66022))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66025 = 0; \n          v__66047[v_l_id_66022] = id(v__66043); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5321; \n        v_work_idx_5321 = 0; \n        int v_l_id_66026 = atomic_inc(&(v_work_idx_5321)); \n        while((v_l_id_66026 < 1)){\n          float v_tmp_66116 = 3.4028235E38f; \n          v__57389 = v_tmp_66116; \n          /* reduce_seq */\n          for (int v_i_66027 = 0; v_i_66027 < v_MWidthC_1; v_i_66027 = (1 + v_i_66027)) {\n            v__57389 = clmin(v__57389, v__66047[(v_i_66027 + (v_MWidthC_1 * v_l_id_66026))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66028 = 0; \n            v__66052[v_w_id_66021] = doubleMultiplyAdd(v__57389, v__66033, v__66032[v_w_id_66021], v__66034); \n          }\n          /* end map_seq */\n          v_l_id_66026 = atomic_inc(&(v_work_idx_5321)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66021 = atomic_inc(v_work_idx_5328); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66029",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66030",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66031",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66032",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66033",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66034",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66042",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66036",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66052",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66047",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}