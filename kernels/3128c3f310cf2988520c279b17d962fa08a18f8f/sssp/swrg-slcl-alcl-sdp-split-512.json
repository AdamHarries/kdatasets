{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__77688, const global float* restrict v__77689, const global float* restrict v__77690, const global float* restrict v__77691, float v__77692, float v__77693, global float* v__77710, global float* v__77700, local float* v__77705, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77696; \n  float v__77701; \n  float v__57389; \n  /* Private Memory */\n  float v__77698_0;\n  \n  for (int v_wg_id_77680 = get_group_id(0); v_wg_id_77680 < v_MHeight_2; v_wg_id_77680 = (v_wg_id_77680 + get_num_groups(0))) {\n    for (int v_l_id_77681 = get_local_id(0); v_l_id_77681 < v_MWidthC_1; v_l_id_77681 = (v_l_id_77681 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_77682 = 0; v_i_77682 < 512; v_i_77682 = (1 + v_i_77682)) {\n        float v_tmp_77771 = 3.4028235E38f; \n        v__77696 = v_tmp_77771; \n        int v_index_77772 = v__77688[(v_l_id_77681 + (512 * v_MWidthC_1 * v_wg_id_77680) + (v_MWidthC_1 * v_i_77682))]; \n        if (v_index_77772 < 0) {\n          v__77698_0 = v__77696; \n        } else {\n          if (v_index_77772 >= v_VLength_3) {\n            v__77698_0 = v__77696; \n          } else {\n            v__77698_0 = v__77690[v_index_77772]; \n          }\n        }\n        v__77700[(511 + (512 * v_MWidthC_1 * v_wg_id_77680) + (-1 * v_i_77682) + (512 * v_l_id_77681))] = absadd(v__77698_0, v__77689[(v_l_id_77681 + (512 * v_MWidthC_1 * v_wg_id_77680) + (v_MWidthC_1 * v_i_77682))]); \n      }\n      /* end map_seq */\n      float v_tmp_77773 = 3.4028235E38f; \n      v__77701 = v_tmp_77773; \n      /* reduce_seq */\n      for (int v_i_77683 = 0; v_i_77683 < 512; v_i_77683 = (1 + v_i_77683)) {\n        v__77701 = clmin(v__77701, v__77700[(v_i_77683 + (512 * v_MWidthC_1 * v_wg_id_77680) + (512 * v_l_id_77681))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_77684 = 0; \n        v__77705[v_l_id_77681] = id(v__77701); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6416; \n      v_work_idx_6416 = 0; \n      int v_l_id_77685 = atomic_inc(&(v_work_idx_6416)); \n      while((v_l_id_77685 < 1)){\n        float v_tmp_77776 = 3.4028235E38f; \n        v__57389 = v_tmp_77776; \n        /* reduce_seq */\n        for (int v_i_77686 = 0; v_i_77686 < v_MWidthC_1; v_i_77686 = (1 + v_i_77686)) {\n          v__57389 = clmin(v__57389, v__77705[(v_i_77686 + (v_MWidthC_1 * v_l_id_77685))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_77687 = 0; \n          v__77710[v_wg_id_77680] = doubleMultiplyAdd(v__57389, v__77692, v__77691[v_wg_id_77680], v__77693); \n        }\n        /* end map_seq */\n        v_l_id_77685 = atomic_inc(&(v_work_idx_6416)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__77688",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77689",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77690",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77691",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77692",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77693",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77700",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__77710",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77705",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}