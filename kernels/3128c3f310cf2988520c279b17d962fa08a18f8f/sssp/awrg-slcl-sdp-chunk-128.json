{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72139, const global float* restrict v__72140, const global float* restrict v__72141, const global float* restrict v__72142, float v__72143, float v__72144, global float* v__72158, global float* v__72152, global int* v__72146, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72148; \n  float v__72153; \n  /* Private Memory */\n  float v__72150_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5901 = v__72146; \n    local int v_w_id_72134; \n    if (get_local_id(0) == 0) {\n      v_w_id_72134 = atomic_inc(v_work_idx_5901); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72134 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_72135 = get_local_id(0); v_l_id_72135 < 128; v_l_id_72135 = (v_l_id_72135 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_72136 = 0; v_i_72136 < v_MWidthC_1; v_i_72136 = (1 + v_i_72136)) {\n          float v_tmp_72201 = 3.4028235E38f; \n          v__72148 = v_tmp_72201; \n          int v_index_72202 = v__72139[(v_i_72136 + (128 * v_MWidthC_1 * v_w_id_72134) + (v_MWidthC_1 * v_l_id_72135))]; \n          if (v_index_72202 < 0) {\n            v__72150_0 = v__72148; \n          } else {\n            if (v_index_72202 >= v_VLength_3) {\n              v__72150_0 = v__72148; \n            } else {\n              v__72150_0 = v__72141[v_index_72202]; \n            }\n          }\n          v__72152[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_72134) + (-1 * v_i_72136) + (v_MWidthC_1 * v_l_id_72135))] = absadd(v__72150_0, v__72140[(v_i_72136 + (128 * v_MWidthC_1 * v_w_id_72134) + (v_MWidthC_1 * v_l_id_72135))]); \n        }\n        /* end map_seq */\n        float v_tmp_72203 = 3.4028235E38f; \n        v__72153 = v_tmp_72203; \n        /* reduce_seq */\n        for (int v_i_72137 = 0; v_i_72137 < v_MWidthC_1; v_i_72137 = (1 + v_i_72137)) {\n          v__72153 = clmin(v__72153, v__72152[(v_i_72137 + (128 * v_MWidthC_1 * v_w_id_72134) + (v_MWidthC_1 * v_l_id_72135))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72138 = 0; \n          v__72158[(v_l_id_72135 + (128 * v_w_id_72134))] = doubleMultiplyAdd(v__72153, v__72143, v__72142[(v_l_id_72135 + (128 * v_w_id_72134))], v__72144); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_72134 = atomic_inc(v_work_idx_5901); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__72139",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72140",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72141",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72142",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72143",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72144",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72146",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72158",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}