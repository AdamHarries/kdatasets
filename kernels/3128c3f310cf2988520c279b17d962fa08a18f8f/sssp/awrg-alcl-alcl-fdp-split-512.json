{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80274, const global float* restrict v__80275, const global float* restrict v__80276, const global float* restrict v__80277, float v__80278, float v__80279, global float* v__80297, global int* v__80281, local float* v__80292, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80283; \n  float v__80285; \n  float v__57389; \n  /* Private Memory */\n  float v__80287_0;\n  \n  float v__80289_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6672 = v__80281; \n    local int v_w_id_80267; \n    if (get_local_id(0) == 0) {\n      v_w_id_80267 = atomic_inc(v_work_idx_6672); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80267 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6670; \n        v_work_idx_6670 = 0; \n        int v_l_id_80268 = atomic_inc(&(v_work_idx_6670)); \n        while((v_l_id_80268 < v_MWidthC_1)){\n          float v_tmp_80348 = 3.4028235E38f; \n          v__80283 = v_tmp_80348; \n          /* reduce_seq */\n          for (int v_i_80269 = 0; v_i_80269 < 512; v_i_80269 = (1 + v_i_80269)) {\n            float v_tmp_80349 = 3.4028235E38f; \n            v__80285 = v_tmp_80349; \n            int v_index_80350 = v__80274[(v_l_id_80268 + (512 * v_MWidthC_1 * v_w_id_80267) + (v_MWidthC_1 * v_i_80269))]; \n            if (v_index_80350 < 0) {\n              v__80287_0 = v__80285; \n            } else {\n              if (v_index_80350 >= v_VLength_3) {\n                v__80287_0 = v__80285; \n              } else {\n                v__80287_0 = v__80276[v_index_80350]; \n              }\n            }\n            v__80289_0 = absadd(v__80287_0, v__80275[(v_l_id_80268 + (512 * v_MWidthC_1 * v_w_id_80267) + (v_MWidthC_1 * v_i_80269))]); \n            v__80283 = clmin(v__80289_0, v__80283); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80270 = 0; \n            v__80292[v_l_id_80268] = id(v__80283); \n          }\n          /* end map_seq */\n          v_l_id_80268 = atomic_inc(&(v_work_idx_6670)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6665; \n        v_work_idx_6665 = 0; \n        int v_l_id_80271 = atomic_inc(&(v_work_idx_6665)); \n        while((v_l_id_80271 < 1)){\n          float v_tmp_80353 = 3.4028235E38f; \n          v__57389 = v_tmp_80353; \n          /* reduce_seq */\n          for (int v_i_80272 = 0; v_i_80272 < v_MWidthC_1; v_i_80272 = (1 + v_i_80272)) {\n            v__57389 = clmin(v__57389, v__80292[(v_i_80272 + (v_MWidthC_1 * v_l_id_80271))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80273 = 0; \n            v__80297[v_w_id_80267] = doubleMultiplyAdd(v__57389, v__80278, v__80277[v_w_id_80267], v__80279); \n          }\n          /* end map_seq */\n          v_l_id_80271 = atomic_inc(&(v_work_idx_6665)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80267 = atomic_inc(v_work_idx_6672); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__80274",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80275",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80276",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80277",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80278",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80279",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80281",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80297",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80292",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}