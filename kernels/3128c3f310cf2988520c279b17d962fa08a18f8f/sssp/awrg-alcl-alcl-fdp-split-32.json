{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66946, const global float* restrict v__66947, const global float* restrict v__66948, const global float* restrict v__66949, float v__66950, float v__66951, global float* v__66969, global int* v__66953, local float* v__66964, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66955; \n  float v__66957; \n  float v__57389; \n  /* Private Memory */\n  float v__66959_0;\n  \n  float v__66961_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5424 = v__66953; \n    local int v_w_id_66939; \n    if (get_local_id(0) == 0) {\n      v_w_id_66939 = atomic_inc(v_work_idx_5424); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66939 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5422; \n        v_work_idx_5422 = 0; \n        int v_l_id_66940 = atomic_inc(&(v_work_idx_5422)); \n        while((v_l_id_66940 < v_MWidthC_1)){\n          float v_tmp_67020 = 3.4028235E38f; \n          v__66955 = v_tmp_67020; \n          /* reduce_seq */\n          for (int v_i_66941 = 0; v_i_66941 < 32; v_i_66941 = (1 + v_i_66941)) {\n            float v_tmp_67021 = 3.4028235E38f; \n            v__66957 = v_tmp_67021; \n            int v_index_67022 = v__66946[(v_l_id_66940 + (32 * v_MWidthC_1 * v_w_id_66939) + (v_MWidthC_1 * v_i_66941))]; \n            if (v_index_67022 < 0) {\n              v__66959_0 = v__66957; \n            } else {\n              if (v_index_67022 >= v_VLength_3) {\n                v__66959_0 = v__66957; \n              } else {\n                v__66959_0 = v__66948[v_index_67022]; \n              }\n            }\n            v__66961_0 = absadd(v__66959_0, v__66947[(v_l_id_66940 + (32 * v_MWidthC_1 * v_w_id_66939) + (v_MWidthC_1 * v_i_66941))]); \n            v__66955 = clmin(v__66961_0, v__66955); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66942 = 0; \n            v__66964[v_l_id_66940] = id(v__66955); \n          }\n          /* end map_seq */\n          v_l_id_66940 = atomic_inc(&(v_work_idx_5422)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5417; \n        v_work_idx_5417 = 0; \n        int v_l_id_66943 = atomic_inc(&(v_work_idx_5417)); \n        while((v_l_id_66943 < 1)){\n          float v_tmp_67025 = 3.4028235E38f; \n          v__57389 = v_tmp_67025; \n          /* reduce_seq */\n          for (int v_i_66944 = 0; v_i_66944 < v_MWidthC_1; v_i_66944 = (1 + v_i_66944)) {\n            v__57389 = clmin(v__57389, v__66964[(v_i_66944 + (v_MWidthC_1 * v_l_id_66943))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66945 = 0; \n            v__66969[v_w_id_66939] = doubleMultiplyAdd(v__57389, v__66950, v__66949[v_w_id_66939], v__66951); \n          }\n          /* end map_seq */\n          v_l_id_66943 = atomic_inc(&(v_work_idx_5417)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66939 = atomic_inc(v_work_idx_5424); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66946",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66947",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66948",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66949",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66950",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66951",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66953",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66969",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66964",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}