{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__63418, const global float* restrict v__63419, const global float* restrict v__63420, const global float* restrict v__63421, float v__63422, float v__63423, global float* v__63443, global int* v__63425, local float* v__63438, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63427; \n  float v__63429; \n  float v__57389; \n  /* Private Memory */\n  float v__63431_0;\n  \n  float v__63433_0;\n  \n  int v__63437_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5089 = v__63425; \n    local int v_w_id_63411; \n    if (get_local_id(0) == 0) {\n      v_w_id_63411 = atomic_inc(v_work_idx_5089); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63411 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5087; \n        v_work_idx_5087 = 0; \n        int v_l_id_63412 = atomic_inc(&(v_work_idx_5087)); \n        while((v_l_id_63412 < v_MWidthC_1)){\n          float v_tmp_63501 = 3.4028235E38f; \n          v__63427 = v_tmp_63501; \n          /* reduce_while_seq */\n          for (int v_i_63413 = 0; v_i_63413 < 16; v_i_63413 = (1 + v_i_63413)) {\n            v__63437_0 = check(v__63427, v__63418[(v_l_id_63412 + (16 * v_MWidthC_1 * v_w_id_63411) + (v_MWidthC_1 * v_i_63413))]); \n            if (v__63437_0) {\n            } else {\n              break;\n            }\n            float v_tmp_63502 = 3.4028235E38f; \n            v__63429 = v_tmp_63502; \n            int v_index_63503 = v__63418[(v_l_id_63412 + (16 * v_MWidthC_1 * v_w_id_63411) + (v_MWidthC_1 * v_i_63413))]; \n            if (v_index_63503 < 0) {\n              v__63431_0 = v__63429; \n            } else {\n              if (v_index_63503 >= v_VLength_3) {\n                v__63431_0 = v__63429; \n              } else {\n                v__63431_0 = v__63420[v_index_63503]; \n              }\n            }\n            v__63433_0 = absadd(v__63431_0, v__63419[(v_l_id_63412 + (16 * v_MWidthC_1 * v_w_id_63411) + (v_MWidthC_1 * v_i_63413))]); \n            v__63427 = clmin(v__63433_0, v__63427); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63414 = 0; \n            v__63438[v_l_id_63412] = id(v__63427); \n          }\n          /* end map_seq */\n          v_l_id_63412 = atomic_inc(&(v_work_idx_5087)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_63415 = get_local_id(0); \n        float v_tmp_63506 = 3.4028235E38f; \n        v__57389 = v_tmp_63506; \n        /* reduce_seq */\n        for (int v_i_63416 = 0; v_i_63416 < v_MWidthC_1; v_i_63416 = (1 + v_i_63416)) {\n          v__57389 = clmin(v__57389, v__63438[(v_i_63416 + (v_MWidthC_1 * v_l_id_63415))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63417 = 0; \n          v__63443[v_w_id_63411] = doubleMultiplyAdd(v__57389, v__63422, v__63421[v_w_id_63411], v__63423); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63411 = atomic_inc(v_work_idx_5089); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__63418",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63419",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63420",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63421",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63422",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63423",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63425",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63443",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63438",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}