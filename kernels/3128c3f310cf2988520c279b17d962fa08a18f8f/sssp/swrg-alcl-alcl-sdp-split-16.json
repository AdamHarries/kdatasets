{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61858, const global float* restrict v__61859, const global float* restrict v__61860, const global float* restrict v__61861, float v__61862, float v__61863, global float* v__61880, global float* v__61870, local float* v__61875, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61866; \n  float v__61871; \n  float v__57389; \n  /* Private Memory */\n  float v__61868_0;\n  \n  for (int v_wg_id_61850 = get_group_id(0); v_wg_id_61850 < v_MHeight_2; v_wg_id_61850 = (v_wg_id_61850 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4937; \n      v_work_idx_4937 = 0; \n      int v_l_id_61851 = atomic_inc(&(v_work_idx_4937)); \n      while((v_l_id_61851 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_61852 = 0; v_i_61852 < 16; v_i_61852 = (1 + v_i_61852)) {\n          float v_tmp_61933 = 3.4028235E38f; \n          v__61866 = v_tmp_61933; \n          int v_index_61934 = v__61858[(v_l_id_61851 + (16 * v_MWidthC_1 * v_wg_id_61850) + (v_MWidthC_1 * v_i_61852))]; \n          if (v_index_61934 < 0) {\n            v__61868_0 = v__61866; \n          } else {\n            if (v_index_61934 >= v_VLength_3) {\n              v__61868_0 = v__61866; \n            } else {\n              v__61868_0 = v__61860[v_index_61934]; \n            }\n          }\n          v__61870[(15 + (16 * v_MWidthC_1 * v_wg_id_61850) + (-1 * v_i_61852) + (16 * v_l_id_61851))] = absadd(v__61868_0, v__61859[(v_l_id_61851 + (16 * v_MWidthC_1 * v_wg_id_61850) + (v_MWidthC_1 * v_i_61852))]); \n        }\n        /* end map_seq */\n        float v_tmp_61935 = 3.4028235E38f; \n        v__61871 = v_tmp_61935; \n        /* reduce_seq */\n        for (int v_i_61853 = 0; v_i_61853 < 16; v_i_61853 = (1 + v_i_61853)) {\n          v__61871 = clmin(v__61871, v__61870[(v_i_61853 + (16 * v_MWidthC_1 * v_wg_id_61850) + (16 * v_l_id_61851))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61854 = 0; \n          v__61875[v_l_id_61851] = id(v__61871); \n        }\n        /* end map_seq */\n        v_l_id_61851 = atomic_inc(&(v_work_idx_4937)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4931; \n      v_work_idx_4931 = 0; \n      int v_l_id_61855 = atomic_inc(&(v_work_idx_4931)); \n      while((v_l_id_61855 < 1)){\n        float v_tmp_61938 = 3.4028235E38f; \n        v__57389 = v_tmp_61938; \n        /* reduce_seq */\n        for (int v_i_61856 = 0; v_i_61856 < v_MWidthC_1; v_i_61856 = (1 + v_i_61856)) {\n          v__57389 = clmin(v__57389, v__61875[(v_i_61856 + (v_MWidthC_1 * v_l_id_61855))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61857 = 0; \n          v__61880[v_wg_id_61850] = doubleMultiplyAdd(v__57389, v__61862, v__61861[v_wg_id_61850], v__61863); \n        }\n        /* end map_seq */\n        v_l_id_61855 = atomic_inc(&(v_work_idx_4931)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__61858",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61859",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61860",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61862",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61863",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__61870",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__61880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61875",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}