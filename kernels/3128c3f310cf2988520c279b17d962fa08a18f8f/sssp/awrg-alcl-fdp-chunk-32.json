{
  "name" : "awrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66406, const global float* restrict v__66407, const global float* restrict v__66408, const global float* restrict v__66409, float v__66410, float v__66411, global float* v__66425, global int* v__66413, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66415; \n  float v__66417; \n  /* Private Memory */\n  float v__66419_0;\n  \n  float v__66421_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5363 = v__66413; \n    local int v_w_id_66402; \n    if (get_local_id(0) == 0) {\n      v_w_id_66402 = atomic_inc(v_work_idx_5363); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66402 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5361; \n        v_work_idx_5361 = 0; \n        int v_l_id_66403 = atomic_inc(&(v_work_idx_5361)); \n        while((v_l_id_66403 < 32)){\n          float v_tmp_66462 = 3.4028235E38f; \n          v__66415 = v_tmp_66462; \n          /* reduce_seq */\n          for (int v_i_66404 = 0; v_i_66404 < v_MWidthC_1; v_i_66404 = (1 + v_i_66404)) {\n            float v_tmp_66463 = 3.4028235E38f; \n            v__66417 = v_tmp_66463; \n            int v_index_66464 = v__66406[(v_i_66404 + (32 * v_MWidthC_1 * v_w_id_66402) + (v_MWidthC_1 * v_l_id_66403))]; \n            if (v_index_66464 < 0) {\n              v__66419_0 = v__66417; \n            } else {\n              if (v_index_66464 >= v_VLength_3) {\n                v__66419_0 = v__66417; \n              } else {\n                v__66419_0 = v__66408[v_index_66464]; \n              }\n            }\n            v__66421_0 = absadd(v__66419_0, v__66407[(v_i_66404 + (32 * v_MWidthC_1 * v_w_id_66402) + (v_MWidthC_1 * v_l_id_66403))]); \n            v__66415 = clmin(v__66421_0, v__66415); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66405 = 0; \n            v__66425[(v_l_id_66403 + (32 * v_w_id_66402))] = doubleMultiplyAdd(v__66415, v__66410, v__66409[(v_l_id_66403 + (32 * v_w_id_66402))], v__66411); \n          }\n          /* end map_seq */\n          v_l_id_66403 = atomic_inc(&(v_work_idx_5361)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66402 = atomic_inc(v_work_idx_5363); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__66406",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66407",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66408",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66409",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66410",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66411",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66413",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66425",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}