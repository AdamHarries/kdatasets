{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65190, const global float* restrict v__65191, const global float* restrict v__65192, const global float* restrict v__65193, float v__65194, float v__65195, global float* v__65212, global float* v__65202, local float* v__65207, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65198; \n  float v__65203; \n  float v__57389; \n  /* Private Memory */\n  float v__65200_0;\n  \n  for (int v_wg_id_65182 = get_group_id(0); v_wg_id_65182 < v_MHeight_2; v_wg_id_65182 = (v_wg_id_65182 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5249; \n      v_work_idx_5249 = 0; \n      int v_l_id_65183 = atomic_inc(&(v_work_idx_5249)); \n      while((v_l_id_65183 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_65184 = 0; v_i_65184 < 32; v_i_65184 = (1 + v_i_65184)) {\n          float v_tmp_65265 = 3.4028235E38f; \n          v__65198 = v_tmp_65265; \n          int v_index_65266 = v__65190[(v_l_id_65183 + (32 * v_MWidthC_1 * v_wg_id_65182) + (v_MWidthC_1 * v_i_65184))]; \n          if (v_index_65266 < 0) {\n            v__65200_0 = v__65198; \n          } else {\n            if (v_index_65266 >= v_VLength_3) {\n              v__65200_0 = v__65198; \n            } else {\n              v__65200_0 = v__65192[v_index_65266]; \n            }\n          }\n          v__65202[(31 + (32 * v_MWidthC_1 * v_wg_id_65182) + (-1 * v_i_65184) + (32 * v_l_id_65183))] = absadd(v__65200_0, v__65191[(v_l_id_65183 + (32 * v_MWidthC_1 * v_wg_id_65182) + (v_MWidthC_1 * v_i_65184))]); \n        }\n        /* end map_seq */\n        float v_tmp_65267 = 3.4028235E38f; \n        v__65203 = v_tmp_65267; \n        /* reduce_seq */\n        for (int v_i_65185 = 0; v_i_65185 < 32; v_i_65185 = (1 + v_i_65185)) {\n          v__65203 = clmin(v__65203, v__65202[(v_i_65185 + (32 * v_MWidthC_1 * v_wg_id_65182) + (32 * v_l_id_65183))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65186 = 0; \n          v__65207[v_l_id_65183] = id(v__65203); \n        }\n        /* end map_seq */\n        v_l_id_65183 = atomic_inc(&(v_work_idx_5249)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5243; \n      v_work_idx_5243 = 0; \n      int v_l_id_65187 = atomic_inc(&(v_work_idx_5243)); \n      while((v_l_id_65187 < 1)){\n        float v_tmp_65270 = 3.4028235E38f; \n        v__57389 = v_tmp_65270; \n        /* reduce_seq */\n        for (int v_i_65188 = 0; v_i_65188 < v_MWidthC_1; v_i_65188 = (1 + v_i_65188)) {\n          v__57389 = clmin(v__57389, v__65207[(v_i_65188 + (v_MWidthC_1 * v_l_id_65187))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65189 = 0; \n          v__65212[v_wg_id_65182] = doubleMultiplyAdd(v__57389, v__65194, v__65193[v_wg_id_65182], v__65195); \n        }\n        /* end map_seq */\n        v_l_id_65187 = atomic_inc(&(v_work_idx_5243)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65190",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65191",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65192",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65194",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65195",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65202",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__65212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65207",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}