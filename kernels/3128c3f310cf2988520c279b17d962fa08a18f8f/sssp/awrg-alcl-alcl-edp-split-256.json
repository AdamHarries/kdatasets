{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__77035, const global float* restrict v__77036, const global float* restrict v__77037, const global float* restrict v__77038, float v__77039, float v__77040, global float* v__77060, global int* v__77042, local float* v__77055, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__77044; \n  float v__77046; \n  float v__57389; \n  /* Private Memory */\n  float v__77048_0;\n  \n  float v__77050_0;\n  \n  int v__77054_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6371 = v__77042; \n    local int v_w_id_77028; \n    if (get_local_id(0) == 0) {\n      v_w_id_77028 = atomic_inc(v_work_idx_6371); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_77028 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6369; \n        v_work_idx_6369 = 0; \n        int v_l_id_77029 = atomic_inc(&(v_work_idx_6369)); \n        while((v_l_id_77029 < v_MWidthC_1)){\n          float v_tmp_77114 = 3.4028235E38f; \n          v__77044 = v_tmp_77114; \n          /* reduce_while_seq */\n          for (int v_i_77030 = 0; v_i_77030 < 256; v_i_77030 = (1 + v_i_77030)) {\n            v__77054_0 = check(v__77044, v__77035[(v_l_id_77029 + (256 * v_MWidthC_1 * v_w_id_77028) + (v_MWidthC_1 * v_i_77030))]); \n            if (v__77054_0) {\n            } else {\n              break;\n            }\n            float v_tmp_77115 = 3.4028235E38f; \n            v__77046 = v_tmp_77115; \n            int v_index_77116 = v__77035[(v_l_id_77029 + (256 * v_MWidthC_1 * v_w_id_77028) + (v_MWidthC_1 * v_i_77030))]; \n            if (v_index_77116 < 0) {\n              v__77048_0 = v__77046; \n            } else {\n              if (v_index_77116 >= v_VLength_3) {\n                v__77048_0 = v__77046; \n              } else {\n                v__77048_0 = v__77037[v_index_77116]; \n              }\n            }\n            v__77050_0 = absadd(v__77048_0, v__77036[(v_l_id_77029 + (256 * v_MWidthC_1 * v_w_id_77028) + (v_MWidthC_1 * v_i_77030))]); \n            v__77044 = clmin(v__77050_0, v__77044); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_77031 = 0; \n            v__77055[v_l_id_77029] = id(v__77044); \n          }\n          /* end map_seq */\n          v_l_id_77029 = atomic_inc(&(v_work_idx_6369)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6364; \n        v_work_idx_6364 = 0; \n        int v_l_id_77032 = atomic_inc(&(v_work_idx_6364)); \n        while((v_l_id_77032 < 1)){\n          float v_tmp_77119 = 3.4028235E38f; \n          v__57389 = v_tmp_77119; \n          /* reduce_seq */\n          for (int v_i_77033 = 0; v_i_77033 < v_MWidthC_1; v_i_77033 = (1 + v_i_77033)) {\n            v__57389 = clmin(v__57389, v__77055[(v_i_77033 + (v_MWidthC_1 * v_l_id_77032))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_77034 = 0; \n            v__77060[v_w_id_77028] = doubleMultiplyAdd(v__57389, v__77039, v__77038[v_w_id_77028], v__77040); \n          }\n          /* end map_seq */\n          v_l_id_77032 = atomic_inc(&(v_work_idx_6364)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_77028 = atomic_inc(v_work_idx_6371); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__77035",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77036",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__77037",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__77038",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__77039",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__77040",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__77042",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__77060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__77055",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}