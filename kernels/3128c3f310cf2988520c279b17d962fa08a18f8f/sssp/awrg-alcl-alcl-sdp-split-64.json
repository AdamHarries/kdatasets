{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70185, const global float* restrict v__70186, const global float* restrict v__70187, const global float* restrict v__70188, float v__70189, float v__70190, global float* v__70208, global float* v__70198, global int* v__70192, local float* v__70203, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70194; \n  float v__70199; \n  float v__57389; \n  /* Private Memory */\n  float v__70196_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5725 = v__70192; \n    local int v_w_id_70177; \n    if (get_local_id(0) == 0) {\n      v_w_id_70177 = atomic_inc(v_work_idx_5725); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70177 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5723; \n        v_work_idx_5723 = 0; \n        int v_l_id_70178 = atomic_inc(&(v_work_idx_5723)); \n        while((v_l_id_70178 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_70179 = 0; v_i_70179 < 64; v_i_70179 = (1 + v_i_70179)) {\n            float v_tmp_70259 = 3.4028235E38f; \n            v__70194 = v_tmp_70259; \n            int v_index_70260 = v__70185[(v_l_id_70178 + (64 * v_MWidthC_1 * v_w_id_70177) + (v_MWidthC_1 * v_i_70179))]; \n            if (v_index_70260 < 0) {\n              v__70196_0 = v__70194; \n            } else {\n              if (v_index_70260 >= v_VLength_3) {\n                v__70196_0 = v__70194; \n              } else {\n                v__70196_0 = v__70187[v_index_70260]; \n              }\n            }\n            v__70198[(63 + (64 * v_MWidthC_1 * v_w_id_70177) + (-1 * v_i_70179) + (64 * v_l_id_70178))] = absadd(v__70196_0, v__70186[(v_l_id_70178 + (64 * v_MWidthC_1 * v_w_id_70177) + (v_MWidthC_1 * v_i_70179))]); \n          }\n          /* end map_seq */\n          float v_tmp_70261 = 3.4028235E38f; \n          v__70199 = v_tmp_70261; \n          /* reduce_seq */\n          for (int v_i_70180 = 0; v_i_70180 < 64; v_i_70180 = (1 + v_i_70180)) {\n            v__70199 = clmin(v__70199, v__70198[(v_i_70180 + (64 * v_MWidthC_1 * v_w_id_70177) + (64 * v_l_id_70178))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70181 = 0; \n            v__70203[v_l_id_70178] = id(v__70199); \n          }\n          /* end map_seq */\n          v_l_id_70178 = atomic_inc(&(v_work_idx_5723)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5717; \n        v_work_idx_5717 = 0; \n        int v_l_id_70182 = atomic_inc(&(v_work_idx_5717)); \n        while((v_l_id_70182 < 1)){\n          float v_tmp_70264 = 3.4028235E38f; \n          v__57389 = v_tmp_70264; \n          /* reduce_seq */\n          for (int v_i_70183 = 0; v_i_70183 < v_MWidthC_1; v_i_70183 = (1 + v_i_70183)) {\n            v__57389 = clmin(v__57389, v__70203[(v_i_70183 + (v_MWidthC_1 * v_l_id_70182))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70184 = 0; \n            v__70208[v_w_id_70177] = doubleMultiplyAdd(v__57389, v__70189, v__70188[v_w_id_70177], v__70190); \n          }\n          /* end map_seq */\n          v_l_id_70182 = atomic_inc(&(v_work_idx_5717)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70177 = atomic_inc(v_work_idx_5725); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__70185",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70186",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70187",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70189",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70190",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70198",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70192",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70203",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}