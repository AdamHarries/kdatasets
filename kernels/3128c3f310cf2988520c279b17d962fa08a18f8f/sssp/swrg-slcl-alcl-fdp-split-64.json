{
  "name" : "swrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67794, const global float* restrict v__67795, const global float* restrict v__67796, const global float* restrict v__67797, float v__67798, float v__67799, global float* v__67816, local float* v__67811, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67802; \n  float v__67804; \n  float v__57389; \n  /* Private Memory */\n  float v__67806_0;\n  \n  float v__67808_0;\n  \n  for (int v_wg_id_67787 = get_group_id(0); v_wg_id_67787 < v_MHeight_2; v_wg_id_67787 = (v_wg_id_67787 + get_num_groups(0))) {\n    for (int v_l_id_67788 = get_local_id(0); v_l_id_67788 < v_MWidthC_1; v_l_id_67788 = (v_l_id_67788 + get_local_size(0))) {\n      float v_tmp_67877 = 3.4028235E38f; \n      v__67802 = v_tmp_67877; \n      /* reduce_seq */\n      for (int v_i_67789 = 0; v_i_67789 < 64; v_i_67789 = (1 + v_i_67789)) {\n        float v_tmp_67878 = 3.4028235E38f; \n        v__67804 = v_tmp_67878; \n        int v_index_67879 = v__67794[(v_l_id_67788 + (64 * v_MWidthC_1 * v_wg_id_67787) + (v_MWidthC_1 * v_i_67789))]; \n        if (v_index_67879 < 0) {\n          v__67806_0 = v__67804; \n        } else {\n          if (v_index_67879 >= v_VLength_3) {\n            v__67806_0 = v__67804; \n          } else {\n            v__67806_0 = v__67796[v_index_67879]; \n          }\n        }\n        v__67808_0 = absadd(v__67806_0, v__67795[(v_l_id_67788 + (64 * v_MWidthC_1 * v_wg_id_67787) + (v_MWidthC_1 * v_i_67789))]); \n        v__67802 = clmin(v__67808_0, v__67802); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67790 = 0; \n        v__67811[v_l_id_67788] = id(v__67802); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5490; \n      v_work_idx_5490 = 0; \n      int v_l_id_67791 = atomic_inc(&(v_work_idx_5490)); \n      while((v_l_id_67791 < 1)){\n        float v_tmp_67882 = 3.4028235E38f; \n        v__57389 = v_tmp_67882; \n        /* reduce_seq */\n        for (int v_i_67792 = 0; v_i_67792 < v_MWidthC_1; v_i_67792 = (1 + v_i_67792)) {\n          v__57389 = clmin(v__57389, v__67811[(v_i_67792 + (v_MWidthC_1 * v_l_id_67791))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67793 = 0; \n          v__67816[v_wg_id_67787] = doubleMultiplyAdd(v__57389, v__67798, v__67797[v_wg_id_67787], v__67799); \n        }\n        /* end map_seq */\n        v_l_id_67791 = atomic_inc(&(v_work_idx_5490)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__67794",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67795",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67796",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67797",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67798",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67799",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__67816",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67811",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}