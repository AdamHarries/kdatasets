{
  "name" : "awrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69738, const global float* restrict v__69739, const global float* restrict v__69740, const global float* restrict v__69741, float v__69742, float v__69743, global float* v__69757, global int* v__69745, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69747; \n  float v__69749; \n  /* Private Memory */\n  float v__69751_0;\n  \n  float v__69753_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5675 = v__69745; \n    local int v_w_id_69734; \n    if (get_local_id(0) == 0) {\n      v_w_id_69734 = atomic_inc(v_work_idx_5675); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69734 < ((v_MHeight_2)/(64)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5673; \n        v_work_idx_5673 = 0; \n        int v_l_id_69735 = atomic_inc(&(v_work_idx_5673)); \n        while((v_l_id_69735 < 64)){\n          float v_tmp_69794 = 3.4028235E38f; \n          v__69747 = v_tmp_69794; \n          /* reduce_seq */\n          for (int v_i_69736 = 0; v_i_69736 < v_MWidthC_1; v_i_69736 = (1 + v_i_69736)) {\n            float v_tmp_69795 = 3.4028235E38f; \n            v__69749 = v_tmp_69795; \n            int v_index_69796 = v__69738[(v_i_69736 + (64 * v_MWidthC_1 * v_w_id_69734) + (v_MWidthC_1 * v_l_id_69735))]; \n            if (v_index_69796 < 0) {\n              v__69751_0 = v__69749; \n            } else {\n              if (v_index_69796 >= v_VLength_3) {\n                v__69751_0 = v__69749; \n              } else {\n                v__69751_0 = v__69740[v_index_69796]; \n              }\n            }\n            v__69753_0 = absadd(v__69751_0, v__69739[(v_i_69736 + (64 * v_MWidthC_1 * v_w_id_69734) + (v_MWidthC_1 * v_l_id_69735))]); \n            v__69747 = clmin(v__69753_0, v__69747); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69737 = 0; \n            v__69757[(v_l_id_69735 + (64 * v_w_id_69734))] = doubleMultiplyAdd(v__69747, v__69742, v__69741[(v_l_id_69735 + (64 * v_w_id_69734))], v__69743); \n          }\n          /* end map_seq */\n          v_l_id_69735 = atomic_inc(&(v_work_idx_5673)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69734 = atomic_inc(v_work_idx_5675); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69738",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69740",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69741",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69742",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69743",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69745",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69757",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}