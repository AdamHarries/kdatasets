{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__59254, const global float* restrict v__59255, const global float* restrict v__59256, const global float* restrict v__59257, float v__59258, float v__59259, global float* v__59279, global int* v__59261, local float* v__59274, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59263; \n  float v__59265; \n  float v__57389; \n  /* Private Memory */\n  float v__59267_0;\n  \n  float v__59269_0;\n  \n  int v__59273_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4693 = v__59261; \n    local int v_w_id_59247; \n    if (get_local_id(0) == 0) {\n      v_w_id_59247 = atomic_inc(v_work_idx_4693); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59247 < v_MHeight_2)){\n      for (int v_l_id_59248 = get_local_id(0); v_l_id_59248 < v_MWidthC_1; v_l_id_59248 = (v_l_id_59248 + get_local_size(0))) {\n        float v_tmp_59345 = 3.4028235E38f; \n        v__59263 = v_tmp_59345; \n        /* reduce_while_seq */\n        for (int v_i_59249 = 0; v_i_59249 < 8; v_i_59249 = (1 + v_i_59249)) {\n          v__59273_0 = check(v__59263, v__59254[(v_l_id_59248 + (8 * v_MWidthC_1 * v_w_id_59247) + (v_MWidthC_1 * v_i_59249))]); \n          if (v__59273_0) {\n          } else {\n            break;\n          }\n          float v_tmp_59346 = 3.4028235E38f; \n          v__59265 = v_tmp_59346; \n          int v_index_59347 = v__59254[(v_l_id_59248 + (8 * v_MWidthC_1 * v_w_id_59247) + (v_MWidthC_1 * v_i_59249))]; \n          if (v_index_59347 < 0) {\n            v__59267_0 = v__59265; \n          } else {\n            if (v_index_59347 >= v_VLength_3) {\n              v__59267_0 = v__59265; \n            } else {\n              v__59267_0 = v__59256[v_index_59347]; \n            }\n          }\n          v__59269_0 = absadd(v__59267_0, v__59255[(v_l_id_59248 + (8 * v_MWidthC_1 * v_w_id_59247) + (v_MWidthC_1 * v_i_59249))]); \n          v__59263 = clmin(v__59269_0, v__59263); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59250 = 0; \n          v__59274[v_l_id_59248] = id(v__59263); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59251 = get_local_id(0); \n        float v_tmp_59350 = 3.4028235E38f; \n        v__57389 = v_tmp_59350; \n        /* reduce_seq */\n        for (int v_i_59252 = 0; v_i_59252 < v_MWidthC_1; v_i_59252 = (1 + v_i_59252)) {\n          v__57389 = clmin(v__57389, v__59274[(v_i_59252 + (v_MWidthC_1 * v_l_id_59251))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59253 = 0; \n          v__59279[v_w_id_59247] = doubleMultiplyAdd(v__57389, v__59258, v__59257[v_w_id_59247], v__59259); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59247 = atomic_inc(v_work_idx_4693); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__59254",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59255",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59256",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59257",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59258",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59259",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59261",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59279",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59274",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}