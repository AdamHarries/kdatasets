{
  "name" : "swrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__71750, const global float* restrict v__71751, const global float* restrict v__71752, const global float* restrict v__71753, float v__71754, float v__71755, global float* v__71774, local float* v__71769, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71758; \n  float v__71760; \n  float v__57389; \n  /* Private Memory */\n  float v__71762_0;\n  \n  float v__71764_0;\n  \n  int v__71768_0;\n  \n  for (int v_wg_id_71743 = get_group_id(0); v_wg_id_71743 < v_MHeight_2; v_wg_id_71743 = (v_wg_id_71743 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5862; \n      v_work_idx_5862 = 0; \n      int v_l_id_71744 = atomic_inc(&(v_work_idx_5862)); \n      while((v_l_id_71744 < v_MWidthC_1)){\n        float v_tmp_71834 = 3.4028235E38f; \n        v__71758 = v_tmp_71834; \n        /* reduce_while_seq */\n        for (int v_i_71745 = 0; v_i_71745 < 128; v_i_71745 = (1 + v_i_71745)) {\n          v__71768_0 = check(v__71758, v__71750[(v_l_id_71744 + (128 * v_MWidthC_1 * v_wg_id_71743) + (v_MWidthC_1 * v_i_71745))]); \n          if (v__71768_0) {\n          } else {\n            break;\n          }\n          float v_tmp_71835 = 3.4028235E38f; \n          v__71760 = v_tmp_71835; \n          int v_index_71836 = v__71750[(v_l_id_71744 + (128 * v_MWidthC_1 * v_wg_id_71743) + (v_MWidthC_1 * v_i_71745))]; \n          if (v_index_71836 < 0) {\n            v__71762_0 = v__71760; \n          } else {\n            if (v_index_71836 >= v_VLength_3) {\n              v__71762_0 = v__71760; \n            } else {\n              v__71762_0 = v__71752[v_index_71836]; \n            }\n          }\n          v__71764_0 = absadd(v__71762_0, v__71751[(v_l_id_71744 + (128 * v_MWidthC_1 * v_wg_id_71743) + (v_MWidthC_1 * v_i_71745))]); \n          v__71758 = clmin(v__71764_0, v__71758); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71746 = 0; \n          v__71769[v_l_id_71744] = id(v__71758); \n        }\n        /* end map_seq */\n        v_l_id_71744 = atomic_inc(&(v_work_idx_5862)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_71747 = get_local_id(0); \n      float v_tmp_71839 = 3.4028235E38f; \n      v__57389 = v_tmp_71839; \n      /* reduce_seq */\n      for (int v_i_71748 = 0; v_i_71748 < v_MWidthC_1; v_i_71748 = (1 + v_i_71748)) {\n        v__57389 = clmin(v__57389, v__71769[(v_i_71748 + (v_MWidthC_1 * v_l_id_71747))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71749 = 0; \n        v__71774[v_wg_id_71743] = doubleMultiplyAdd(v__57389, v__71754, v__71753[v_wg_id_71743], v__71755); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__71750",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71751",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71752",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71754",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71755",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71774",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71769",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}