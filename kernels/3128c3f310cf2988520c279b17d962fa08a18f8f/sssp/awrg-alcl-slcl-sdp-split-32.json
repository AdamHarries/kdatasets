{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66556, const global float* restrict v__66557, const global float* restrict v__66558, const global float* restrict v__66559, float v__66560, float v__66561, global float* v__66579, global float* v__66569, global int* v__66563, local float* v__66574, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66565; \n  float v__66570; \n  float v__57389; \n  /* Private Memory */\n  float v__66567_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5381 = v__66563; \n    local int v_w_id_66548; \n    if (get_local_id(0) == 0) {\n      v_w_id_66548 = atomic_inc(v_work_idx_5381); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66548 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5379; \n        v_work_idx_5379 = 0; \n        int v_l_id_66549 = atomic_inc(&(v_work_idx_5379)); \n        while((v_l_id_66549 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66550 = 0; v_i_66550 < 32; v_i_66550 = (1 + v_i_66550)) {\n            float v_tmp_66634 = 3.4028235E38f; \n            v__66565 = v_tmp_66634; \n            int v_index_66635 = v__66556[(v_l_id_66549 + (32 * v_MWidthC_1 * v_w_id_66548) + (v_MWidthC_1 * v_i_66550))]; \n            if (v_index_66635 < 0) {\n              v__66567_0 = v__66565; \n            } else {\n              if (v_index_66635 >= v_VLength_3) {\n                v__66567_0 = v__66565; \n              } else {\n                v__66567_0 = v__66558[v_index_66635]; \n              }\n            }\n            v__66569[(31 + (32 * v_MWidthC_1 * v_w_id_66548) + (-1 * v_i_66550) + (32 * v_l_id_66549))] = absadd(v__66567_0, v__66557[(v_l_id_66549 + (32 * v_MWidthC_1 * v_w_id_66548) + (v_MWidthC_1 * v_i_66550))]); \n          }\n          /* end map_seq */\n          float v_tmp_66636 = 3.4028235E38f; \n          v__66570 = v_tmp_66636; \n          /* reduce_seq */\n          for (int v_i_66551 = 0; v_i_66551 < 32; v_i_66551 = (1 + v_i_66551)) {\n            v__66570 = clmin(v__66570, v__66569[(v_i_66551 + (32 * v_MWidthC_1 * v_w_id_66548) + (32 * v_l_id_66549))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66552 = 0; \n            v__66574[v_l_id_66549] = id(v__66570); \n          }\n          /* end map_seq */\n          v_l_id_66549 = atomic_inc(&(v_work_idx_5379)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66553 = get_local_id(0); \n        float v_tmp_66639 = 3.4028235E38f; \n        v__57389 = v_tmp_66639; \n        /* reduce_seq */\n        for (int v_i_66554 = 0; v_i_66554 < v_MWidthC_1; v_i_66554 = (1 + v_i_66554)) {\n          v__57389 = clmin(v__57389, v__66574[(v_i_66554 + (v_MWidthC_1 * v_l_id_66553))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66555 = 0; \n          v__66579[v_w_id_66548] = doubleMultiplyAdd(v__57389, v__66560, v__66559[v_w_id_66548], v__66561); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66548 = atomic_inc(v_work_idx_5381); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66556",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66557",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66558",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66559",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66560",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66561",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66569",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66563",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66579",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66574",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}