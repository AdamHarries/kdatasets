{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__66750, const global float* restrict v__66751, const global float* restrict v__66752, const global float* restrict v__66753, float v__66754, float v__66755, global float* v__66775, global int* v__66757, local float* v__66770, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66759; \n  float v__66761; \n  float v__57389; \n  /* Private Memory */\n  float v__66763_0;\n  \n  float v__66765_0;\n  \n  int v__66769_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5401 = v__66757; \n    local int v_w_id_66743; \n    if (get_local_id(0) == 0) {\n      v_w_id_66743 = atomic_inc(v_work_idx_5401); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66743 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5399; \n        v_work_idx_5399 = 0; \n        int v_l_id_66744 = atomic_inc(&(v_work_idx_5399)); \n        while((v_l_id_66744 < v_MWidthC_1)){\n          float v_tmp_66833 = 3.4028235E38f; \n          v__66759 = v_tmp_66833; \n          /* reduce_while_seq */\n          for (int v_i_66745 = 0; v_i_66745 < 32; v_i_66745 = (1 + v_i_66745)) {\n            v__66769_0 = check(v__66759, v__66750[(v_l_id_66744 + (32 * v_MWidthC_1 * v_w_id_66743) + (v_MWidthC_1 * v_i_66745))]); \n            if (v__66769_0) {\n            } else {\n              break;\n            }\n            float v_tmp_66834 = 3.4028235E38f; \n            v__66761 = v_tmp_66834; \n            int v_index_66835 = v__66750[(v_l_id_66744 + (32 * v_MWidthC_1 * v_w_id_66743) + (v_MWidthC_1 * v_i_66745))]; \n            if (v_index_66835 < 0) {\n              v__66763_0 = v__66761; \n            } else {\n              if (v_index_66835 >= v_VLength_3) {\n                v__66763_0 = v__66761; \n              } else {\n                v__66763_0 = v__66752[v_index_66835]; \n              }\n            }\n            v__66765_0 = absadd(v__66763_0, v__66751[(v_l_id_66744 + (32 * v_MWidthC_1 * v_w_id_66743) + (v_MWidthC_1 * v_i_66745))]); \n            v__66759 = clmin(v__66765_0, v__66759); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66746 = 0; \n            v__66770[v_l_id_66744] = id(v__66759); \n          }\n          /* end map_seq */\n          v_l_id_66744 = atomic_inc(&(v_work_idx_5399)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_66747 = get_local_id(0); \n        float v_tmp_66838 = 3.4028235E38f; \n        v__57389 = v_tmp_66838; \n        /* reduce_seq */\n        for (int v_i_66748 = 0; v_i_66748 < v_MWidthC_1; v_i_66748 = (1 + v_i_66748)) {\n          v__57389 = clmin(v__57389, v__66770[(v_i_66748 + (v_MWidthC_1 * v_l_id_66747))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_66749 = 0; \n          v__66775[v_w_id_66743] = doubleMultiplyAdd(v__57389, v__66754, v__66753[v_w_id_66743], v__66755); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66743 = atomic_inc(v_work_idx_5401); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__66750",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66751",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66752",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66754",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66755",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66757",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66775",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66770",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}