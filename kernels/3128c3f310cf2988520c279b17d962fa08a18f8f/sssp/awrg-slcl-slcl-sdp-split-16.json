{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62376, const global float* restrict v__62377, const global float* restrict v__62378, const global float* restrict v__62379, float v__62380, float v__62381, global float* v__62399, global float* v__62389, global int* v__62383, local float* v__62394, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62385; \n  float v__62390; \n  float v__57389; \n  /* Private Memory */\n  float v__62387_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4987 = v__62383; \n    local int v_w_id_62368; \n    if (get_local_id(0) == 0) {\n      v_w_id_62368 = atomic_inc(v_work_idx_4987); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62368 < v_MHeight_2)){\n      for (int v_l_id_62369 = get_local_id(0); v_l_id_62369 < v_MWidthC_1; v_l_id_62369 = (v_l_id_62369 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_62370 = 0; v_i_62370 < 16; v_i_62370 = (1 + v_i_62370)) {\n          float v_tmp_62462 = 3.4028235E38f; \n          v__62385 = v_tmp_62462; \n          int v_index_62463 = v__62376[(v_l_id_62369 + (16 * v_MWidthC_1 * v_w_id_62368) + (v_MWidthC_1 * v_i_62370))]; \n          if (v_index_62463 < 0) {\n            v__62387_0 = v__62385; \n          } else {\n            if (v_index_62463 >= v_VLength_3) {\n              v__62387_0 = v__62385; \n            } else {\n              v__62387_0 = v__62378[v_index_62463]; \n            }\n          }\n          v__62389[(15 + (16 * v_MWidthC_1 * v_w_id_62368) + (-1 * v_i_62370) + (16 * v_l_id_62369))] = absadd(v__62387_0, v__62377[(v_l_id_62369 + (16 * v_MWidthC_1 * v_w_id_62368) + (v_MWidthC_1 * v_i_62370))]); \n        }\n        /* end map_seq */\n        float v_tmp_62464 = 3.4028235E38f; \n        v__62390 = v_tmp_62464; \n        /* reduce_seq */\n        for (int v_i_62371 = 0; v_i_62371 < 16; v_i_62371 = (1 + v_i_62371)) {\n          v__62390 = clmin(v__62390, v__62389[(v_i_62371 + (16 * v_MWidthC_1 * v_w_id_62368) + (16 * v_l_id_62369))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62372 = 0; \n          v__62394[v_l_id_62369] = id(v__62390); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_62373 = get_local_id(0); \n        float v_tmp_62467 = 3.4028235E38f; \n        v__57389 = v_tmp_62467; \n        /* reduce_seq */\n        for (int v_i_62374 = 0; v_i_62374 < v_MWidthC_1; v_i_62374 = (1 + v_i_62374)) {\n          v__57389 = clmin(v__57389, v__62394[(v_i_62374 + (v_MWidthC_1 * v_l_id_62373))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62375 = 0; \n          v__62399[v_w_id_62368] = doubleMultiplyAdd(v__57389, v__62380, v__62379[v_w_id_62368], v__62381); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62368 = atomic_inc(v_work_idx_4987); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__62376",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62377",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62378",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62379",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62380",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62381",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62389",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62383",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62399",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62394",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}