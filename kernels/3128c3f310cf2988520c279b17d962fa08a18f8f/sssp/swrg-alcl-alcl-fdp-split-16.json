{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__61952, const global float* restrict v__61953, const global float* restrict v__61954, const global float* restrict v__61955, float v__61956, float v__61957, global float* v__61974, local float* v__61969, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61960; \n  float v__61962; \n  float v__57389; \n  /* Private Memory */\n  float v__61964_0;\n  \n  float v__61966_0;\n  \n  for (int v_wg_id_61945 = get_group_id(0); v_wg_id_61945 < v_MHeight_2; v_wg_id_61945 = (v_wg_id_61945 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4947; \n      v_work_idx_4947 = 0; \n      int v_l_id_61946 = atomic_inc(&(v_work_idx_4947)); \n      while((v_l_id_61946 < v_MWidthC_1)){\n        float v_tmp_62027 = 3.4028235E38f; \n        v__61960 = v_tmp_62027; \n        /* reduce_seq */\n        for (int v_i_61947 = 0; v_i_61947 < 16; v_i_61947 = (1 + v_i_61947)) {\n          float v_tmp_62028 = 3.4028235E38f; \n          v__61962 = v_tmp_62028; \n          int v_index_62029 = v__61952[(v_l_id_61946 + (16 * v_MWidthC_1 * v_wg_id_61945) + (v_MWidthC_1 * v_i_61947))]; \n          if (v_index_62029 < 0) {\n            v__61964_0 = v__61962; \n          } else {\n            if (v_index_62029 >= v_VLength_3) {\n              v__61964_0 = v__61962; \n            } else {\n              v__61964_0 = v__61954[v_index_62029]; \n            }\n          }\n          v__61966_0 = absadd(v__61964_0, v__61953[(v_l_id_61946 + (16 * v_MWidthC_1 * v_wg_id_61945) + (v_MWidthC_1 * v_i_61947))]); \n          v__61960 = clmin(v__61966_0, v__61960); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61948 = 0; \n          v__61969[v_l_id_61946] = id(v__61960); \n        }\n        /* end map_seq */\n        v_l_id_61946 = atomic_inc(&(v_work_idx_4947)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4942; \n      v_work_idx_4942 = 0; \n      int v_l_id_61949 = atomic_inc(&(v_work_idx_4942)); \n      while((v_l_id_61949 < 1)){\n        float v_tmp_62032 = 3.4028235E38f; \n        v__57389 = v_tmp_62032; \n        /* reduce_seq */\n        for (int v_i_61950 = 0; v_i_61950 < v_MWidthC_1; v_i_61950 = (1 + v_i_61950)) {\n          v__57389 = clmin(v__57389, v__61969[(v_i_61950 + (v_MWidthC_1 * v_l_id_61949))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61951 = 0; \n          v__61974[v_wg_id_61945] = doubleMultiplyAdd(v__57389, v__61956, v__61955[v_wg_id_61945], v__61957); \n        }\n        /* end map_seq */\n        v_l_id_61949 = atomic_inc(&(v_work_idx_4942)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__61952",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61953",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61954",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61955",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61956",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61957",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61974",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61969",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}