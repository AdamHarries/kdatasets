{
  "name" : "awrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63003, const global float* restrict v__63004, const global float* restrict v__63005, const global float* restrict v__63006, float v__63007, float v__63008, global float* v__63022, global float* v__63016, global int* v__63010, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63012; \n  float v__63017; \n  /* Private Memory */\n  float v__63014_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5044 = v__63010; \n    local int v_w_id_62998; \n    if (get_local_id(0) == 0) {\n      v_w_id_62998 = atomic_inc(v_work_idx_5044); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62998 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5042; \n        v_work_idx_5042 = 0; \n        int v_l_id_62999 = atomic_inc(&(v_work_idx_5042)); \n        while((v_l_id_62999 < 16)){\n          /* map_seq */\n          for (int v_i_63000 = 0; v_i_63000 < v_MWidthC_1; v_i_63000 = (1 + v_i_63000)) {\n            float v_tmp_63061 = 3.4028235E38f; \n            v__63012 = v_tmp_63061; \n            int v_index_63062 = v__63003[(v_i_63000 + (16 * v_MWidthC_1 * v_w_id_62998) + (v_MWidthC_1 * v_l_id_62999))]; \n            if (v_index_63062 < 0) {\n              v__63014_0 = v__63012; \n            } else {\n              if (v_index_63062 >= v_VLength_3) {\n                v__63014_0 = v__63012; \n              } else {\n                v__63014_0 = v__63005[v_index_63062]; \n              }\n            }\n            v__63016[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_62998) + (-1 * v_i_63000) + (v_MWidthC_1 * v_l_id_62999))] = absadd(v__63014_0, v__63004[(v_i_63000 + (16 * v_MWidthC_1 * v_w_id_62998) + (v_MWidthC_1 * v_l_id_62999))]); \n          }\n          /* end map_seq */\n          float v_tmp_63063 = 3.4028235E38f; \n          v__63017 = v_tmp_63063; \n          /* reduce_seq */\n          for (int v_i_63001 = 0; v_i_63001 < v_MWidthC_1; v_i_63001 = (1 + v_i_63001)) {\n            v__63017 = clmin(v__63017, v__63016[(v_i_63001 + (16 * v_MWidthC_1 * v_w_id_62998) + (v_MWidthC_1 * v_l_id_62999))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63002 = 0; \n            v__63022[(v_l_id_62999 + (16 * v_w_id_62998))] = doubleMultiplyAdd(v__63017, v__63007, v__63006[(v_l_id_62999 + (16 * v_w_id_62998))], v__63008); \n          }\n          /* end map_seq */\n          v_l_id_62999 = atomic_inc(&(v_work_idx_5042)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62998 = atomic_inc(v_work_idx_5044); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63003",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63005",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63006",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63007",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63008",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63010",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63022",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}