{
  "name" : "awrg-alcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76471, const global float* restrict v__76472, const global float* restrict v__76473, const global float* restrict v__76474, float v__76475, float v__76476, global float* v__76492, global int* v__76478, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76479; \n  float v__76482; \n  /* Private Memory */\n  float v__76484_0;\n  \n  float v__76486_0;\n  \n  int v__76490_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6306 = v__76478; \n    local int v_w_id_76467; \n    if (get_local_id(0) == 0) {\n      v_w_id_76467 = atomic_inc(v_work_idx_6306); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76467 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6304; \n        v_work_idx_6304 = 0; \n        int v_l_id_76468 = atomic_inc(&(v_work_idx_6304)); \n        while((v_l_id_76468 < 256)){\n          float v_tmp_76535 = 3.4028235E38f; \n          v__76479 = v_tmp_76535; \n          /* reduce_while_seq */\n          for (int v_i_76469 = 0; v_i_76469 < v_MWidthC_1; v_i_76469 = (1 + v_i_76469)) {\n            v__76490_0 = check(v__76479, v__76471[(v_i_76469 + (256 * v_MWidthC_1 * v_w_id_76467) + (v_MWidthC_1 * v_l_id_76468))]); \n            if (v__76490_0) {\n            } else {\n              break;\n            }\n            float v_tmp_76536 = 3.4028235E38f; \n            v__76482 = v_tmp_76536; \n            int v_index_76537 = v__76471[(v_i_76469 + (256 * v_MWidthC_1 * v_w_id_76467) + (v_MWidthC_1 * v_l_id_76468))]; \n            if (v_index_76537 < 0) {\n              v__76484_0 = v__76482; \n            } else {\n              if (v_index_76537 >= v_VLength_3) {\n                v__76484_0 = v__76482; \n              } else {\n                v__76484_0 = v__76473[v_index_76537]; \n              }\n            }\n            v__76486_0 = absadd(v__76484_0, v__76472[(v_i_76469 + (256 * v_MWidthC_1 * v_w_id_76467) + (v_MWidthC_1 * v_l_id_76468))]); \n            v__76479 = clmin(v__76486_0, v__76479); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76470 = 0; \n            v__76492[(v_l_id_76468 + (256 * v_w_id_76467))] = doubleMultiplyAdd(v__76479, v__76475, v__76474[(v_l_id_76468 + (256 * v_w_id_76467))], v__76476); \n          }\n          /* end map_seq */\n          v_l_id_76468 = atomic_inc(&(v_work_idx_6304)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76467 = atomic_inc(v_work_idx_6306); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__76471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76472",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76473",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76474",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76475",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76476",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76478",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76492",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}