{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__65378, const global float* restrict v__65379, const global float* restrict v__65380, const global float* restrict v__65381, float v__65382, float v__65383, global float* v__65402, local float* v__65397, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65386; \n  float v__65388; \n  float v__57389; \n  /* Private Memory */\n  float v__65390_0;\n  \n  float v__65392_0;\n  \n  int v__65396_0;\n  \n  for (int v_wg_id_65371 = get_group_id(0); v_wg_id_65371 < v_MHeight_2; v_wg_id_65371 = (v_wg_id_65371 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5269; \n      v_work_idx_5269 = 0; \n      int v_l_id_65372 = atomic_inc(&(v_work_idx_5269)); \n      while((v_l_id_65372 < v_MWidthC_1)){\n        float v_tmp_65458 = 3.4028235E38f; \n        v__65386 = v_tmp_65458; \n        /* reduce_while_seq */\n        for (int v_i_65373 = 0; v_i_65373 < 32; v_i_65373 = (1 + v_i_65373)) {\n          v__65396_0 = check(v__65386, v__65378[(v_l_id_65372 + (32 * v_MWidthC_1 * v_wg_id_65371) + (v_MWidthC_1 * v_i_65373))]); \n          if (v__65396_0) {\n          } else {\n            break;\n          }\n          float v_tmp_65459 = 3.4028235E38f; \n          v__65388 = v_tmp_65459; \n          int v_index_65460 = v__65378[(v_l_id_65372 + (32 * v_MWidthC_1 * v_wg_id_65371) + (v_MWidthC_1 * v_i_65373))]; \n          if (v_index_65460 < 0) {\n            v__65390_0 = v__65388; \n          } else {\n            if (v_index_65460 >= v_VLength_3) {\n              v__65390_0 = v__65388; \n            } else {\n              v__65390_0 = v__65380[v_index_65460]; \n            }\n          }\n          v__65392_0 = absadd(v__65390_0, v__65379[(v_l_id_65372 + (32 * v_MWidthC_1 * v_wg_id_65371) + (v_MWidthC_1 * v_i_65373))]); \n          v__65386 = clmin(v__65392_0, v__65386); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65374 = 0; \n          v__65397[v_l_id_65372] = id(v__65386); \n        }\n        /* end map_seq */\n        v_l_id_65372 = atomic_inc(&(v_work_idx_5269)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5264; \n      v_work_idx_5264 = 0; \n      int v_l_id_65375 = atomic_inc(&(v_work_idx_5264)); \n      while((v_l_id_65375 < 1)){\n        float v_tmp_65463 = 3.4028235E38f; \n        v__57389 = v_tmp_65463; \n        /* reduce_seq */\n        for (int v_i_65376 = 0; v_i_65376 < v_MWidthC_1; v_i_65376 = (1 + v_i_65376)) {\n          v__57389 = clmin(v__57389, v__65397[(v_i_65376 + (v_MWidthC_1 * v_l_id_65375))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65377 = 0; \n          v__65402[v_wg_id_65371] = doubleMultiplyAdd(v__57389, v__65382, v__65381[v_wg_id_65371], v__65383); \n        }\n        /* end map_seq */\n        v_l_id_65375 = atomic_inc(&(v_work_idx_5264)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65378",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65379",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65380",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65381",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65382",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65383",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65402",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65397",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}