{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75280, const global float* restrict v__75281, const global float* restrict v__75282, const global float* restrict v__75283, float v__75284, float v__75285, global float* v__75302, local float* v__75297, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75288; \n  float v__75290; \n  float v__57389; \n  /* Private Memory */\n  float v__75292_0;\n  \n  float v__75294_0;\n  \n  for (int v_wg_id_75273 = get_group_id(0); v_wg_id_75273 < v_MHeight_2; v_wg_id_75273 = (v_wg_id_75273 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6195; \n      v_work_idx_6195 = 0; \n      int v_l_id_75274 = atomic_inc(&(v_work_idx_6195)); \n      while((v_l_id_75274 < v_MWidthC_1)){\n        float v_tmp_75355 = 3.4028235E38f; \n        v__75288 = v_tmp_75355; \n        /* reduce_seq */\n        for (int v_i_75275 = 0; v_i_75275 < 256; v_i_75275 = (1 + v_i_75275)) {\n          float v_tmp_75356 = 3.4028235E38f; \n          v__75290 = v_tmp_75356; \n          int v_index_75357 = v__75280[(v_l_id_75274 + (256 * v_MWidthC_1 * v_wg_id_75273) + (v_MWidthC_1 * v_i_75275))]; \n          if (v_index_75357 < 0) {\n            v__75292_0 = v__75290; \n          } else {\n            if (v_index_75357 >= v_VLength_3) {\n              v__75292_0 = v__75290; \n            } else {\n              v__75292_0 = v__75282[v_index_75357]; \n            }\n          }\n          v__75294_0 = absadd(v__75292_0, v__75281[(v_l_id_75274 + (256 * v_MWidthC_1 * v_wg_id_75273) + (v_MWidthC_1 * v_i_75275))]); \n          v__75288 = clmin(v__75294_0, v__75288); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75276 = 0; \n          v__75297[v_l_id_75274] = id(v__75288); \n        }\n        /* end map_seq */\n        v_l_id_75274 = atomic_inc(&(v_work_idx_6195)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6190; \n      v_work_idx_6190 = 0; \n      int v_l_id_75277 = atomic_inc(&(v_work_idx_6190)); \n      while((v_l_id_75277 < 1)){\n        float v_tmp_75360 = 3.4028235E38f; \n        v__57389 = v_tmp_75360; \n        /* reduce_seq */\n        for (int v_i_75278 = 0; v_i_75278 < v_MWidthC_1; v_i_75278 = (1 + v_i_75278)) {\n          v__57389 = clmin(v__57389, v__75297[(v_i_75278 + (v_MWidthC_1 * v_l_id_75277))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75279 = 0; \n          v__75302[v_wg_id_75273] = doubleMultiplyAdd(v__57389, v__75284, v__75283[v_wg_id_75273], v__75285); \n        }\n        /* end map_seq */\n        v_l_id_75277 = atomic_inc(&(v_work_idx_6190)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__75280",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75281",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75282",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75283",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75284",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75285",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75302",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75297",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}