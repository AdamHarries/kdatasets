{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__75704, const global float* restrict v__75705, const global float* restrict v__75706, const global float* restrict v__75707, float v__75708, float v__75709, global float* v__75727, global float* v__75717, global int* v__75711, local float* v__75722, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__75713; \n  float v__75718; \n  float v__57389; \n  /* Private Memory */\n  float v__75715_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6235 = v__75711; \n    local int v_w_id_75696; \n    if (get_local_id(0) == 0) {\n      v_w_id_75696 = atomic_inc(v_work_idx_6235); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_75696 < v_MHeight_2)){\n      for (int v_l_id_75697 = get_local_id(0); v_l_id_75697 < v_MWidthC_1; v_l_id_75697 = (v_l_id_75697 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_75698 = 0; v_i_75698 < 256; v_i_75698 = (1 + v_i_75698)) {\n          float v_tmp_75790 = 3.4028235E38f; \n          v__75713 = v_tmp_75790; \n          int v_index_75791 = v__75704[(v_l_id_75697 + (256 * v_MWidthC_1 * v_w_id_75696) + (v_MWidthC_1 * v_i_75698))]; \n          if (v_index_75791 < 0) {\n            v__75715_0 = v__75713; \n          } else {\n            if (v_index_75791 >= v_VLength_3) {\n              v__75715_0 = v__75713; \n            } else {\n              v__75715_0 = v__75706[v_index_75791]; \n            }\n          }\n          v__75717[(255 + (256 * v_MWidthC_1 * v_w_id_75696) + (-1 * v_i_75698) + (256 * v_l_id_75697))] = absadd(v__75715_0, v__75705[(v_l_id_75697 + (256 * v_MWidthC_1 * v_w_id_75696) + (v_MWidthC_1 * v_i_75698))]); \n        }\n        /* end map_seq */\n        float v_tmp_75792 = 3.4028235E38f; \n        v__75718 = v_tmp_75792; \n        /* reduce_seq */\n        for (int v_i_75699 = 0; v_i_75699 < 256; v_i_75699 = (1 + v_i_75699)) {\n          v__75718 = clmin(v__75718, v__75717[(v_i_75699 + (256 * v_MWidthC_1 * v_w_id_75696) + (256 * v_l_id_75697))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75700 = 0; \n          v__75722[v_l_id_75697] = id(v__75718); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_75701 = get_local_id(0); \n        float v_tmp_75795 = 3.4028235E38f; \n        v__57389 = v_tmp_75795; \n        /* reduce_seq */\n        for (int v_i_75702 = 0; v_i_75702 < v_MWidthC_1; v_i_75702 = (1 + v_i_75702)) {\n          v__57389 = clmin(v__57389, v__75722[(v_i_75702 + (v_MWidthC_1 * v_l_id_75701))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_75703 = 0; \n          v__75727[v_w_id_75696] = doubleMultiplyAdd(v__57389, v__75708, v__75707[v_w_id_75696], v__75709); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_75696 = atomic_inc(v_work_idx_6235); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__75704",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75705",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75706",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__75707",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__75708",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__75709",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__75717",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__75711",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__75727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75722",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}