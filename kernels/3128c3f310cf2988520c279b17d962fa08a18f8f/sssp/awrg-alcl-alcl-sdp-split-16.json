{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63521, const global float* restrict v__63522, const global float* restrict v__63523, const global float* restrict v__63524, float v__63525, float v__63526, global float* v__63544, global float* v__63534, global int* v__63528, local float* v__63539, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63530; \n  float v__63535; \n  float v__57389; \n  /* Private Memory */\n  float v__63532_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5101 = v__63528; \n    local int v_w_id_63513; \n    if (get_local_id(0) == 0) {\n      v_w_id_63513 = atomic_inc(v_work_idx_5101); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63513 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5099; \n        v_work_idx_5099 = 0; \n        int v_l_id_63514 = atomic_inc(&(v_work_idx_5099)); \n        while((v_l_id_63514 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_63515 = 0; v_i_63515 < 16; v_i_63515 = (1 + v_i_63515)) {\n            float v_tmp_63595 = 3.4028235E38f; \n            v__63530 = v_tmp_63595; \n            int v_index_63596 = v__63521[(v_l_id_63514 + (16 * v_MWidthC_1 * v_w_id_63513) + (v_MWidthC_1 * v_i_63515))]; \n            if (v_index_63596 < 0) {\n              v__63532_0 = v__63530; \n            } else {\n              if (v_index_63596 >= v_VLength_3) {\n                v__63532_0 = v__63530; \n              } else {\n                v__63532_0 = v__63523[v_index_63596]; \n              }\n            }\n            v__63534[(15 + (16 * v_MWidthC_1 * v_w_id_63513) + (-1 * v_i_63515) + (16 * v_l_id_63514))] = absadd(v__63532_0, v__63522[(v_l_id_63514 + (16 * v_MWidthC_1 * v_w_id_63513) + (v_MWidthC_1 * v_i_63515))]); \n          }\n          /* end map_seq */\n          float v_tmp_63597 = 3.4028235E38f; \n          v__63535 = v_tmp_63597; \n          /* reduce_seq */\n          for (int v_i_63516 = 0; v_i_63516 < 16; v_i_63516 = (1 + v_i_63516)) {\n            v__63535 = clmin(v__63535, v__63534[(v_i_63516 + (16 * v_MWidthC_1 * v_w_id_63513) + (16 * v_l_id_63514))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63517 = 0; \n            v__63539[v_l_id_63514] = id(v__63535); \n          }\n          /* end map_seq */\n          v_l_id_63514 = atomic_inc(&(v_work_idx_5099)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5093; \n        v_work_idx_5093 = 0; \n        int v_l_id_63518 = atomic_inc(&(v_work_idx_5093)); \n        while((v_l_id_63518 < 1)){\n          float v_tmp_63600 = 3.4028235E38f; \n          v__57389 = v_tmp_63600; \n          /* reduce_seq */\n          for (int v_i_63519 = 0; v_i_63519 < v_MWidthC_1; v_i_63519 = (1 + v_i_63519)) {\n            v__57389 = clmin(v__57389, v__63539[(v_i_63519 + (v_MWidthC_1 * v_l_id_63518))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63520 = 0; \n            v__63544[v_w_id_63513] = doubleMultiplyAdd(v__57389, v__63525, v__63524[v_w_id_63513], v__63526); \n          }\n          /* end map_seq */\n          v_l_id_63518 = atomic_inc(&(v_work_idx_5093)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63513 = atomic_inc(v_work_idx_5101); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63521",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63522",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63523",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63524",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63525",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63526",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63534",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63528",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63539",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}