{
  "name" : "swrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58076, const global float* restrict v__58077, const global float* restrict v__58078, const global float* restrict v__58079, float v__58080, float v__58081, global float* v__58094, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58084; \n  float v__58086; \n  /* Private Memory */\n  float v__58088_0;\n  \n  float v__58090_0;\n  \n  for (int v_wg_id_58072 = get_group_id(0); v_wg_id_58072 < ((v_MHeight_2)/(8)); v_wg_id_58072 = (v_wg_id_58072 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4580; \n      v_work_idx_4580 = 0; \n      int v_l_id_58073 = atomic_inc(&(v_work_idx_4580)); \n      while((v_l_id_58073 < 8)){\n        float v_tmp_58132 = 3.4028235E38f; \n        v__58084 = v_tmp_58132; \n        /* reduce_seq */\n        for (int v_i_58074 = 0; v_i_58074 < v_MWidthC_1; v_i_58074 = (1 + v_i_58074)) {\n          float v_tmp_58133 = 3.4028235E38f; \n          v__58086 = v_tmp_58133; \n          int v_index_58134 = v__58076[(v_i_58074 + (8 * v_MWidthC_1 * v_wg_id_58072) + (v_MWidthC_1 * v_l_id_58073))]; \n          if (v_index_58134 < 0) {\n            v__58088_0 = v__58086; \n          } else {\n            if (v_index_58134 >= v_VLength_3) {\n              v__58088_0 = v__58086; \n            } else {\n              v__58088_0 = v__58078[v_index_58134]; \n            }\n          }\n          v__58090_0 = absadd(v__58088_0, v__58077[(v_i_58074 + (8 * v_MWidthC_1 * v_wg_id_58072) + (v_MWidthC_1 * v_l_id_58073))]); \n          v__58084 = clmin(v__58090_0, v__58084); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58075 = 0; \n          v__58094[(v_l_id_58073 + (8 * v_wg_id_58072))] = doubleMultiplyAdd(v__58084, v__58080, v__58079[(v_l_id_58073 + (8 * v_wg_id_58072))], v__58081); \n        }\n        /* end map_seq */\n        v_l_id_58073 = atomic_inc(&(v_work_idx_4580)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58076",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58077",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58078",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58079",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58080",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58081",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58094",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}