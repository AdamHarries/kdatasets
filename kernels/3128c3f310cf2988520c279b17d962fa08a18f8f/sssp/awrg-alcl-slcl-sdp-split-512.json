{
  "name" : "awrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79884, const global float* restrict v__79885, const global float* restrict v__79886, const global float* restrict v__79887, float v__79888, float v__79889, global float* v__79907, global float* v__79897, global int* v__79891, local float* v__79902, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79893; \n  float v__79898; \n  float v__57389; \n  /* Private Memory */\n  float v__79895_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6629 = v__79891; \n    local int v_w_id_79876; \n    if (get_local_id(0) == 0) {\n      v_w_id_79876 = atomic_inc(v_work_idx_6629); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79876 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6627; \n        v_work_idx_6627 = 0; \n        int v_l_id_79877 = atomic_inc(&(v_work_idx_6627)); \n        while((v_l_id_79877 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_79878 = 0; v_i_79878 < 512; v_i_79878 = (1 + v_i_79878)) {\n            float v_tmp_79962 = 3.4028235E38f; \n            v__79893 = v_tmp_79962; \n            int v_index_79963 = v__79884[(v_l_id_79877 + (512 * v_MWidthC_1 * v_w_id_79876) + (v_MWidthC_1 * v_i_79878))]; \n            if (v_index_79963 < 0) {\n              v__79895_0 = v__79893; \n            } else {\n              if (v_index_79963 >= v_VLength_3) {\n                v__79895_0 = v__79893; \n              } else {\n                v__79895_0 = v__79886[v_index_79963]; \n              }\n            }\n            v__79897[(511 + (512 * v_MWidthC_1 * v_w_id_79876) + (-1 * v_i_79878) + (512 * v_l_id_79877))] = absadd(v__79895_0, v__79885[(v_l_id_79877 + (512 * v_MWidthC_1 * v_w_id_79876) + (v_MWidthC_1 * v_i_79878))]); \n          }\n          /* end map_seq */\n          float v_tmp_79964 = 3.4028235E38f; \n          v__79898 = v_tmp_79964; \n          /* reduce_seq */\n          for (int v_i_79879 = 0; v_i_79879 < 512; v_i_79879 = (1 + v_i_79879)) {\n            v__79898 = clmin(v__79898, v__79897[(v_i_79879 + (512 * v_MWidthC_1 * v_w_id_79876) + (512 * v_l_id_79877))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79880 = 0; \n            v__79902[v_l_id_79877] = id(v__79898); \n          }\n          /* end map_seq */\n          v_l_id_79877 = atomic_inc(&(v_work_idx_6627)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_79881 = get_local_id(0); \n        float v_tmp_79967 = 3.4028235E38f; \n        v__57389 = v_tmp_79967; \n        /* reduce_seq */\n        for (int v_i_79882 = 0; v_i_79882 < v_MWidthC_1; v_i_79882 = (1 + v_i_79882)) {\n          v__57389 = clmin(v__57389, v__79902[(v_i_79882 + (v_MWidthC_1 * v_l_id_79881))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79883 = 0; \n          v__79907[v_w_id_79876] = doubleMultiplyAdd(v__57389, v__79888, v__79887[v_w_id_79876], v__79889); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79876 = atomic_inc(v_work_idx_6629); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79884",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79885",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79886",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79887",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79888",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79889",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79897",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79891",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79907",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79902",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}