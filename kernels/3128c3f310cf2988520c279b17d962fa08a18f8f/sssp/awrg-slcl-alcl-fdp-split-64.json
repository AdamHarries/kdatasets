{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69462, const global float* restrict v__69463, const global float* restrict v__69464, const global float* restrict v__69465, float v__69466, float v__69467, global float* v__69485, global int* v__69469, local float* v__69480, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69471; \n  float v__69473; \n  float v__57389; \n  /* Private Memory */\n  float v__69475_0;\n  \n  float v__69477_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5650 = v__69469; \n    local int v_w_id_69455; \n    if (get_local_id(0) == 0) {\n      v_w_id_69455 = atomic_inc(v_work_idx_5650); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69455 < v_MHeight_2)){\n      for (int v_l_id_69456 = get_local_id(0); v_l_id_69456 < v_MWidthC_1; v_l_id_69456 = (v_l_id_69456 + get_local_size(0))) {\n        float v_tmp_69544 = 3.4028235E38f; \n        v__69471 = v_tmp_69544; \n        /* reduce_seq */\n        for (int v_i_69457 = 0; v_i_69457 < 64; v_i_69457 = (1 + v_i_69457)) {\n          float v_tmp_69545 = 3.4028235E38f; \n          v__69473 = v_tmp_69545; \n          int v_index_69546 = v__69462[(v_l_id_69456 + (64 * v_MWidthC_1 * v_w_id_69455) + (v_MWidthC_1 * v_i_69457))]; \n          if (v_index_69546 < 0) {\n            v__69475_0 = v__69473; \n          } else {\n            if (v_index_69546 >= v_VLength_3) {\n              v__69475_0 = v__69473; \n            } else {\n              v__69475_0 = v__69464[v_index_69546]; \n            }\n          }\n          v__69477_0 = absadd(v__69475_0, v__69463[(v_l_id_69456 + (64 * v_MWidthC_1 * v_w_id_69455) + (v_MWidthC_1 * v_i_69457))]); \n          v__69471 = clmin(v__69477_0, v__69471); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69458 = 0; \n          v__69480[v_l_id_69456] = id(v__69471); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5644; \n        v_work_idx_5644 = 0; \n        int v_l_id_69459 = atomic_inc(&(v_work_idx_5644)); \n        while((v_l_id_69459 < 1)){\n          float v_tmp_69549 = 3.4028235E38f; \n          v__57389 = v_tmp_69549; \n          /* reduce_seq */\n          for (int v_i_69460 = 0; v_i_69460 < v_MWidthC_1; v_i_69460 = (1 + v_i_69460)) {\n            v__57389 = clmin(v__57389, v__69480[(v_i_69460 + (v_MWidthC_1 * v_l_id_69459))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69461 = 0; \n            v__69485[v_w_id_69455] = doubleMultiplyAdd(v__57389, v__69466, v__69465[v_w_id_69455], v__69467); \n          }\n          /* end map_seq */\n          v_l_id_69459 = atomic_inc(&(v_work_idx_5644)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69455 = atomic_inc(v_work_idx_5650); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69462",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69463",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69464",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69466",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69467",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69469",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69485",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69480",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}