{
  "name" : "swrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__64462, const global float* restrict v__64463, const global float* restrict v__64464, const global float* restrict v__64465, float v__64466, float v__64467, global float* v__64484, local float* v__64479, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__64470; \n  float v__64472; \n  float v__57389; \n  /* Private Memory */\n  float v__64474_0;\n  \n  float v__64476_0;\n  \n  for (int v_wg_id_64455 = get_group_id(0); v_wg_id_64455 < v_MHeight_2; v_wg_id_64455 = (v_wg_id_64455 + get_num_groups(0))) {\n    for (int v_l_id_64456 = get_local_id(0); v_l_id_64456 < v_MWidthC_1; v_l_id_64456 = (v_l_id_64456 + get_local_size(0))) {\n      float v_tmp_64545 = 3.4028235E38f; \n      v__64470 = v_tmp_64545; \n      /* reduce_seq */\n      for (int v_i_64457 = 0; v_i_64457 < 32; v_i_64457 = (1 + v_i_64457)) {\n        float v_tmp_64546 = 3.4028235E38f; \n        v__64472 = v_tmp_64546; \n        int v_index_64547 = v__64462[(v_l_id_64456 + (32 * v_MWidthC_1 * v_wg_id_64455) + (v_MWidthC_1 * v_i_64457))]; \n        if (v_index_64547 < 0) {\n          v__64474_0 = v__64472; \n        } else {\n          if (v_index_64547 >= v_VLength_3) {\n            v__64474_0 = v__64472; \n          } else {\n            v__64474_0 = v__64464[v_index_64547]; \n          }\n        }\n        v__64476_0 = absadd(v__64474_0, v__64463[(v_l_id_64456 + (32 * v_MWidthC_1 * v_wg_id_64455) + (v_MWidthC_1 * v_i_64457))]); \n        v__64470 = clmin(v__64476_0, v__64470); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_64458 = 0; \n        v__64479[v_l_id_64456] = id(v__64470); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5178; \n      v_work_idx_5178 = 0; \n      int v_l_id_64459 = atomic_inc(&(v_work_idx_5178)); \n      while((v_l_id_64459 < 1)){\n        float v_tmp_64550 = 3.4028235E38f; \n        v__57389 = v_tmp_64550; \n        /* reduce_seq */\n        for (int v_i_64460 = 0; v_i_64460 < v_MWidthC_1; v_i_64460 = (1 + v_i_64460)) {\n          v__57389 = clmin(v__57389, v__64479[(v_i_64460 + (v_MWidthC_1 * v_l_id_64459))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_64461 = 0; \n          v__64484[v_wg_id_64455] = doubleMultiplyAdd(v__57389, v__64466, v__64465[v_wg_id_64455], v__64467); \n        }\n        /* end map_seq */\n        v_l_id_64459 = atomic_inc(&(v_work_idx_5178)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__64462",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64463",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__64464",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__64465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__64466",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__64467",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__64484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__64479",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}