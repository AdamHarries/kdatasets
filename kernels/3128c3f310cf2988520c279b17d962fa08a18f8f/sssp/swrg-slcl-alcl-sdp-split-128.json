{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71024, const global float* restrict v__71025, const global float* restrict v__71026, const global float* restrict v__71027, float v__71028, float v__71029, global float* v__71046, global float* v__71036, local float* v__71041, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71032; \n  float v__71037; \n  float v__57389; \n  /* Private Memory */\n  float v__71034_0;\n  \n  for (int v_wg_id_71016 = get_group_id(0); v_wg_id_71016 < v_MHeight_2; v_wg_id_71016 = (v_wg_id_71016 + get_num_groups(0))) {\n    for (int v_l_id_71017 = get_local_id(0); v_l_id_71017 < v_MWidthC_1; v_l_id_71017 = (v_l_id_71017 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_71018 = 0; v_i_71018 < 128; v_i_71018 = (1 + v_i_71018)) {\n        float v_tmp_71107 = 3.4028235E38f; \n        v__71032 = v_tmp_71107; \n        int v_index_71108 = v__71024[(v_l_id_71017 + (128 * v_MWidthC_1 * v_wg_id_71016) + (v_MWidthC_1 * v_i_71018))]; \n        if (v_index_71108 < 0) {\n          v__71034_0 = v__71032; \n        } else {\n          if (v_index_71108 >= v_VLength_3) {\n            v__71034_0 = v__71032; \n          } else {\n            v__71034_0 = v__71026[v_index_71108]; \n          }\n        }\n        v__71036[(127 + (128 * v_MWidthC_1 * v_wg_id_71016) + (-1 * v_i_71018) + (128 * v_l_id_71017))] = absadd(v__71034_0, v__71025[(v_l_id_71017 + (128 * v_MWidthC_1 * v_wg_id_71016) + (v_MWidthC_1 * v_i_71018))]); \n      }\n      /* end map_seq */\n      float v_tmp_71109 = 3.4028235E38f; \n      v__71037 = v_tmp_71109; \n      /* reduce_seq */\n      for (int v_i_71019 = 0; v_i_71019 < 128; v_i_71019 = (1 + v_i_71019)) {\n        v__71037 = clmin(v__71037, v__71036[(v_i_71019 + (128 * v_MWidthC_1 * v_wg_id_71016) + (128 * v_l_id_71017))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71020 = 0; \n        v__71041[v_l_id_71017] = id(v__71037); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5792; \n      v_work_idx_5792 = 0; \n      int v_l_id_71021 = atomic_inc(&(v_work_idx_5792)); \n      while((v_l_id_71021 < 1)){\n        float v_tmp_71112 = 3.4028235E38f; \n        v__57389 = v_tmp_71112; \n        /* reduce_seq */\n        for (int v_i_71022 = 0; v_i_71022 < v_MWidthC_1; v_i_71022 = (1 + v_i_71022)) {\n          v__57389 = clmin(v__57389, v__71041[(v_i_71022 + (v_MWidthC_1 * v_l_id_71021))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71023 = 0; \n          v__71046[v_wg_id_71016] = doubleMultiplyAdd(v__57389, v__71028, v__71027[v_wg_id_71016], v__71029); \n        }\n        /* end map_seq */\n        v_l_id_71021 = atomic_inc(&(v_work_idx_5792)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71024",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71025",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71026",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71028",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71029",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71036",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71046",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71041",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}