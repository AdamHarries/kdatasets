{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76025, const global float* restrict v__76026, const global float* restrict v__76027, const global float* restrict v__76028, float v__76029, float v__76030, global float* v__76048, global float* v__76038, global int* v__76032, local float* v__76043, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76034; \n  float v__76039; \n  float v__57389; \n  /* Private Memory */\n  float v__76036_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6264 = v__76032; \n    local int v_w_id_76017; \n    if (get_local_id(0) == 0) {\n      v_w_id_76017 = atomic_inc(v_work_idx_6264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76017 < v_MHeight_2)){\n      for (int v_l_id_76018 = get_local_id(0); v_l_id_76018 < v_MWidthC_1; v_l_id_76018 = (v_l_id_76018 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_76019 = 0; v_i_76019 < 256; v_i_76019 = (1 + v_i_76019)) {\n          float v_tmp_76107 = 3.4028235E38f; \n          v__76034 = v_tmp_76107; \n          int v_index_76108 = v__76025[(v_l_id_76018 + (256 * v_MWidthC_1 * v_w_id_76017) + (v_MWidthC_1 * v_i_76019))]; \n          if (v_index_76108 < 0) {\n            v__76036_0 = v__76034; \n          } else {\n            if (v_index_76108 >= v_VLength_3) {\n              v__76036_0 = v__76034; \n            } else {\n              v__76036_0 = v__76027[v_index_76108]; \n            }\n          }\n          v__76038[(255 + (256 * v_MWidthC_1 * v_w_id_76017) + (-1 * v_i_76019) + (256 * v_l_id_76018))] = absadd(v__76036_0, v__76026[(v_l_id_76018 + (256 * v_MWidthC_1 * v_w_id_76017) + (v_MWidthC_1 * v_i_76019))]); \n        }\n        /* end map_seq */\n        float v_tmp_76109 = 3.4028235E38f; \n        v__76039 = v_tmp_76109; \n        /* reduce_seq */\n        for (int v_i_76020 = 0; v_i_76020 < 256; v_i_76020 = (1 + v_i_76020)) {\n          v__76039 = clmin(v__76039, v__76038[(v_i_76020 + (256 * v_MWidthC_1 * v_w_id_76017) + (256 * v_l_id_76018))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_76021 = 0; \n          v__76043[v_l_id_76018] = id(v__76039); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6257; \n        v_work_idx_6257 = 0; \n        int v_l_id_76022 = atomic_inc(&(v_work_idx_6257)); \n        while((v_l_id_76022 < 1)){\n          float v_tmp_76112 = 3.4028235E38f; \n          v__57389 = v_tmp_76112; \n          /* reduce_seq */\n          for (int v_i_76023 = 0; v_i_76023 < v_MWidthC_1; v_i_76023 = (1 + v_i_76023)) {\n            v__57389 = clmin(v__57389, v__76043[(v_i_76023 + (v_MWidthC_1 * v_l_id_76022))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76024 = 0; \n            v__76048[v_w_id_76017] = doubleMultiplyAdd(v__57389, v__76029, v__76028[v_w_id_76017], v__76030); \n          }\n          /* end map_seq */\n          v_l_id_76022 = atomic_inc(&(v_work_idx_6257)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76017 = atomic_inc(v_work_idx_6264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76025",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76026",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76027",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76028",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76029",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76030",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76038",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76032",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76048",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76043",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}