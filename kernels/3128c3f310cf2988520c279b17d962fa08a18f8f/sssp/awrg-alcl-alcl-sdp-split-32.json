{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__66853, const global float* restrict v__66854, const global float* restrict v__66855, const global float* restrict v__66856, float v__66857, float v__66858, global float* v__66876, global float* v__66866, global int* v__66860, local float* v__66871, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__66862; \n  float v__66867; \n  float v__57389; \n  /* Private Memory */\n  float v__66864_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5413 = v__66860; \n    local int v_w_id_66845; \n    if (get_local_id(0) == 0) {\n      v_w_id_66845 = atomic_inc(v_work_idx_5413); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_66845 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5411; \n        v_work_idx_5411 = 0; \n        int v_l_id_66846 = atomic_inc(&(v_work_idx_5411)); \n        while((v_l_id_66846 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_66847 = 0; v_i_66847 < 32; v_i_66847 = (1 + v_i_66847)) {\n            float v_tmp_66927 = 3.4028235E38f; \n            v__66862 = v_tmp_66927; \n            int v_index_66928 = v__66853[(v_l_id_66846 + (32 * v_MWidthC_1 * v_w_id_66845) + (v_MWidthC_1 * v_i_66847))]; \n            if (v_index_66928 < 0) {\n              v__66864_0 = v__66862; \n            } else {\n              if (v_index_66928 >= v_VLength_3) {\n                v__66864_0 = v__66862; \n              } else {\n                v__66864_0 = v__66855[v_index_66928]; \n              }\n            }\n            v__66866[(31 + (32 * v_MWidthC_1 * v_w_id_66845) + (-1 * v_i_66847) + (32 * v_l_id_66846))] = absadd(v__66864_0, v__66854[(v_l_id_66846 + (32 * v_MWidthC_1 * v_w_id_66845) + (v_MWidthC_1 * v_i_66847))]); \n          }\n          /* end map_seq */\n          float v_tmp_66929 = 3.4028235E38f; \n          v__66867 = v_tmp_66929; \n          /* reduce_seq */\n          for (int v_i_66848 = 0; v_i_66848 < 32; v_i_66848 = (1 + v_i_66848)) {\n            v__66867 = clmin(v__66867, v__66866[(v_i_66848 + (32 * v_MWidthC_1 * v_w_id_66845) + (32 * v_l_id_66846))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66849 = 0; \n            v__66871[v_l_id_66846] = id(v__66867); \n          }\n          /* end map_seq */\n          v_l_id_66846 = atomic_inc(&(v_work_idx_5411)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5405; \n        v_work_idx_5405 = 0; \n        int v_l_id_66850 = atomic_inc(&(v_work_idx_5405)); \n        while((v_l_id_66850 < 1)){\n          float v_tmp_66932 = 3.4028235E38f; \n          v__57389 = v_tmp_66932; \n          /* reduce_seq */\n          for (int v_i_66851 = 0; v_i_66851 < v_MWidthC_1; v_i_66851 = (1 + v_i_66851)) {\n            v__57389 = clmin(v__57389, v__66871[(v_i_66851 + (v_MWidthC_1 * v_l_id_66850))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_66852 = 0; \n            v__66876[v_w_id_66845] = doubleMultiplyAdd(v__57389, v__66857, v__66856[v_w_id_66845], v__66858); \n          }\n          /* end map_seq */\n          v_l_id_66850 = atomic_inc(&(v_work_idx_5405)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_66845 = atomic_inc(v_work_idx_5413); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__66853",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66854",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66855",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__66856",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__66857",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__66858",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__66866",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__66860",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__66876",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__66871",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}