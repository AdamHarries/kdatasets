{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65284, const global float* restrict v__65285, const global float* restrict v__65286, const global float* restrict v__65287, float v__65288, float v__65289, global float* v__65306, local float* v__65301, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65292; \n  float v__65294; \n  float v__57389; \n  /* Private Memory */\n  float v__65296_0;\n  \n  float v__65298_0;\n  \n  for (int v_wg_id_65277 = get_group_id(0); v_wg_id_65277 < v_MHeight_2; v_wg_id_65277 = (v_wg_id_65277 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5259; \n      v_work_idx_5259 = 0; \n      int v_l_id_65278 = atomic_inc(&(v_work_idx_5259)); \n      while((v_l_id_65278 < v_MWidthC_1)){\n        float v_tmp_65359 = 3.4028235E38f; \n        v__65292 = v_tmp_65359; \n        /* reduce_seq */\n        for (int v_i_65279 = 0; v_i_65279 < 32; v_i_65279 = (1 + v_i_65279)) {\n          float v_tmp_65360 = 3.4028235E38f; \n          v__65294 = v_tmp_65360; \n          int v_index_65361 = v__65284[(v_l_id_65278 + (32 * v_MWidthC_1 * v_wg_id_65277) + (v_MWidthC_1 * v_i_65279))]; \n          if (v_index_65361 < 0) {\n            v__65296_0 = v__65294; \n          } else {\n            if (v_index_65361 >= v_VLength_3) {\n              v__65296_0 = v__65294; \n            } else {\n              v__65296_0 = v__65286[v_index_65361]; \n            }\n          }\n          v__65298_0 = absadd(v__65296_0, v__65285[(v_l_id_65278 + (32 * v_MWidthC_1 * v_wg_id_65277) + (v_MWidthC_1 * v_i_65279))]); \n          v__65292 = clmin(v__65298_0, v__65292); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65280 = 0; \n          v__65301[v_l_id_65278] = id(v__65292); \n        }\n        /* end map_seq */\n        v_l_id_65278 = atomic_inc(&(v_work_idx_5259)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5254; \n      v_work_idx_5254 = 0; \n      int v_l_id_65281 = atomic_inc(&(v_work_idx_5254)); \n      while((v_l_id_65281 < 1)){\n        float v_tmp_65364 = 3.4028235E38f; \n        v__57389 = v_tmp_65364; \n        /* reduce_seq */\n        for (int v_i_65282 = 0; v_i_65282 < v_MWidthC_1; v_i_65282 = (1 + v_i_65282)) {\n          v__57389 = clmin(v__57389, v__65301[(v_i_65282 + (v_MWidthC_1 * v_l_id_65281))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65283 = 0; \n          v__65306[v_wg_id_65277] = doubleMultiplyAdd(v__57389, v__65288, v__65287[v_wg_id_65277], v__65289); \n        }\n        /* end map_seq */\n        v_l_id_65281 = atomic_inc(&(v_work_idx_5254)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__65284",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65285",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65286",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65287",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65288",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65289",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__65306",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65301",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}