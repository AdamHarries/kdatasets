{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__60189, const global float* restrict v__60190, const global float* restrict v__60191, const global float* restrict v__60192, float v__60193, float v__60194, global float* v__60212, global float* v__60202, global int* v__60196, local float* v__60207, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60198; \n  float v__60203; \n  float v__57389; \n  /* Private Memory */\n  float v__60200_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4789 = v__60196; \n    local int v_w_id_60181; \n    if (get_local_id(0) == 0) {\n      v_w_id_60181 = atomic_inc(v_work_idx_4789); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60181 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4787; \n        v_work_idx_4787 = 0; \n        int v_l_id_60182 = atomic_inc(&(v_work_idx_4787)); \n        while((v_l_id_60182 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_60183 = 0; v_i_60183 < 8; v_i_60183 = (1 + v_i_60183)) {\n            float v_tmp_60263 = 3.4028235E38f; \n            v__60198 = v_tmp_60263; \n            int v_index_60264 = v__60189[(v_l_id_60182 + (8 * v_MWidthC_1 * v_w_id_60181) + (v_MWidthC_1 * v_i_60183))]; \n            if (v_index_60264 < 0) {\n              v__60200_0 = v__60198; \n            } else {\n              if (v_index_60264 >= v_VLength_3) {\n                v__60200_0 = v__60198; \n              } else {\n                v__60200_0 = v__60191[v_index_60264]; \n              }\n            }\n            v__60202[(7 + (8 * v_MWidthC_1 * v_w_id_60181) + (-1 * v_i_60183) + (8 * v_l_id_60182))] = absadd(v__60200_0, v__60190[(v_l_id_60182 + (8 * v_MWidthC_1 * v_w_id_60181) + (v_MWidthC_1 * v_i_60183))]); \n          }\n          /* end map_seq */\n          float v_tmp_60265 = 3.4028235E38f; \n          v__60203 = v_tmp_60265; \n          /* reduce_seq */\n          for (int v_i_60184 = 0; v_i_60184 < 8; v_i_60184 = (1 + v_i_60184)) {\n            v__60203 = clmin(v__60203, v__60202[(v_i_60184 + (8 * v_MWidthC_1 * v_w_id_60181) + (8 * v_l_id_60182))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60185 = 0; \n            v__60207[v_l_id_60182] = id(v__60203); \n          }\n          /* end map_seq */\n          v_l_id_60182 = atomic_inc(&(v_work_idx_4787)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4781; \n        v_work_idx_4781 = 0; \n        int v_l_id_60186 = atomic_inc(&(v_work_idx_4781)); \n        while((v_l_id_60186 < 1)){\n          float v_tmp_60268 = 3.4028235E38f; \n          v__57389 = v_tmp_60268; \n          /* reduce_seq */\n          for (int v_i_60187 = 0; v_i_60187 < v_MWidthC_1; v_i_60187 = (1 + v_i_60187)) {\n            v__57389 = clmin(v__57389, v__60207[(v_i_60187 + (v_MWidthC_1 * v_l_id_60186))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60188 = 0; \n            v__60212[v_w_id_60181] = doubleMultiplyAdd(v__57389, v__60193, v__60192[v_w_id_60181], v__60194); \n          }\n          /* end map_seq */\n          v_l_id_60186 = atomic_inc(&(v_work_idx_4781)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60181 = atomic_inc(v_work_idx_4789); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__60189",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60190",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60191",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60192",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60193",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60194",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60202",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60196",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60207",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}