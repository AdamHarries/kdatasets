{
  "name" : "awrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69985, const global float* restrict v__69986, const global float* restrict v__69987, const global float* restrict v__69988, float v__69989, float v__69990, global float* v__70008, global int* v__69992, local float* v__70003, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69994; \n  float v__69996; \n  float v__57389; \n  /* Private Memory */\n  float v__69998_0;\n  \n  float v__70000_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5703 = v__69992; \n    local int v_w_id_69978; \n    if (get_local_id(0) == 0) {\n      v_w_id_69978 = atomic_inc(v_work_idx_5703); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69978 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5701; \n        v_work_idx_5701 = 0; \n        int v_l_id_69979 = atomic_inc(&(v_work_idx_5701)); \n        while((v_l_id_69979 < v_MWidthC_1)){\n          float v_tmp_70063 = 3.4028235E38f; \n          v__69994 = v_tmp_70063; \n          /* reduce_seq */\n          for (int v_i_69980 = 0; v_i_69980 < 64; v_i_69980 = (1 + v_i_69980)) {\n            float v_tmp_70064 = 3.4028235E38f; \n            v__69996 = v_tmp_70064; \n            int v_index_70065 = v__69985[(v_l_id_69979 + (64 * v_MWidthC_1 * v_w_id_69978) + (v_MWidthC_1 * v_i_69980))]; \n            if (v_index_70065 < 0) {\n              v__69998_0 = v__69996; \n            } else {\n              if (v_index_70065 >= v_VLength_3) {\n                v__69998_0 = v__69996; \n              } else {\n                v__69998_0 = v__69987[v_index_70065]; \n              }\n            }\n            v__70000_0 = absadd(v__69998_0, v__69986[(v_l_id_69979 + (64 * v_MWidthC_1 * v_w_id_69978) + (v_MWidthC_1 * v_i_69980))]); \n            v__69994 = clmin(v__70000_0, v__69994); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_69981 = 0; \n            v__70003[v_l_id_69979] = id(v__69994); \n          }\n          /* end map_seq */\n          v_l_id_69979 = atomic_inc(&(v_work_idx_5701)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69982 = get_local_id(0); \n        float v_tmp_70068 = 3.4028235E38f; \n        v__57389 = v_tmp_70068; \n        /* reduce_seq */\n        for (int v_i_69983 = 0; v_i_69983 < v_MWidthC_1; v_i_69983 = (1 + v_i_69983)) {\n          v__57389 = clmin(v__57389, v__70003[(v_i_69983 + (v_MWidthC_1 * v_l_id_69982))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69984 = 0; \n          v__70008[v_w_id_69978] = doubleMultiplyAdd(v__57389, v__69989, v__69988[v_w_id_69978], v__69990); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69978 = atomic_inc(v_work_idx_5703); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__69985",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69986",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69987",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69989",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69990",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69992",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70008",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70003",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}