{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__69040, const global float* restrict v__69041, const global float* restrict v__69042, const global float* restrict v__69043, float v__69044, float v__69045, global float* v__69063, global float* v__69053, global int* v__69047, local float* v__69058, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__69049; \n  float v__69054; \n  float v__57389; \n  /* Private Memory */\n  float v__69051_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5611 = v__69047; \n    local int v_w_id_69032; \n    if (get_local_id(0) == 0) {\n      v_w_id_69032 = atomic_inc(v_work_idx_5611); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_69032 < v_MHeight_2)){\n      for (int v_l_id_69033 = get_local_id(0); v_l_id_69033 < v_MWidthC_1; v_l_id_69033 = (v_l_id_69033 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_69034 = 0; v_i_69034 < 64; v_i_69034 = (1 + v_i_69034)) {\n          float v_tmp_69126 = 3.4028235E38f; \n          v__69049 = v_tmp_69126; \n          int v_index_69127 = v__69040[(v_l_id_69033 + (64 * v_MWidthC_1 * v_w_id_69032) + (v_MWidthC_1 * v_i_69034))]; \n          if (v_index_69127 < 0) {\n            v__69051_0 = v__69049; \n          } else {\n            if (v_index_69127 >= v_VLength_3) {\n              v__69051_0 = v__69049; \n            } else {\n              v__69051_0 = v__69042[v_index_69127]; \n            }\n          }\n          v__69053[(63 + (64 * v_MWidthC_1 * v_w_id_69032) + (-1 * v_i_69034) + (64 * v_l_id_69033))] = absadd(v__69051_0, v__69041[(v_l_id_69033 + (64 * v_MWidthC_1 * v_w_id_69032) + (v_MWidthC_1 * v_i_69034))]); \n        }\n        /* end map_seq */\n        float v_tmp_69128 = 3.4028235E38f; \n        v__69054 = v_tmp_69128; \n        /* reduce_seq */\n        for (int v_i_69035 = 0; v_i_69035 < 64; v_i_69035 = (1 + v_i_69035)) {\n          v__69054 = clmin(v__69054, v__69053[(v_i_69035 + (64 * v_MWidthC_1 * v_w_id_69032) + (64 * v_l_id_69033))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69036 = 0; \n          v__69058[v_l_id_69033] = id(v__69054); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_69037 = get_local_id(0); \n        float v_tmp_69131 = 3.4028235E38f; \n        v__57389 = v_tmp_69131; \n        /* reduce_seq */\n        for (int v_i_69038 = 0; v_i_69038 < v_MWidthC_1; v_i_69038 = (1 + v_i_69038)) {\n          v__57389 = clmin(v__57389, v__69058[(v_i_69038 + (v_MWidthC_1 * v_l_id_69037))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_69039 = 0; \n          v__69063[v_w_id_69032] = doubleMultiplyAdd(v__57389, v__69044, v__69043[v_w_id_69032], v__69045); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_69032 = atomic_inc(v_work_idx_5611); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__69040",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69041",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69042",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__69043",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__69044",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__69045",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__69053",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__69047",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__69063",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__69058",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}