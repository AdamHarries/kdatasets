{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59149, const global float* restrict v__59150, const global float* restrict v__59151, const global float* restrict v__59152, float v__59153, float v__59154, global float* v__59172, global int* v__59156, local float* v__59167, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59158; \n  float v__59160; \n  float v__57389; \n  /* Private Memory */\n  float v__59162_0;\n  \n  float v__59164_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4684 = v__59156; \n    local int v_w_id_59142; \n    if (get_local_id(0) == 0) {\n      v_w_id_59142 = atomic_inc(v_work_idx_4684); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59142 < v_MHeight_2)){\n      for (int v_l_id_59143 = get_local_id(0); v_l_id_59143 < v_MWidthC_1; v_l_id_59143 = (v_l_id_59143 + get_local_size(0))) {\n        float v_tmp_59235 = 3.4028235E38f; \n        v__59158 = v_tmp_59235; \n        /* reduce_seq */\n        for (int v_i_59144 = 0; v_i_59144 < 8; v_i_59144 = (1 + v_i_59144)) {\n          float v_tmp_59236 = 3.4028235E38f; \n          v__59160 = v_tmp_59236; \n          int v_index_59237 = v__59149[(v_l_id_59143 + (8 * v_MWidthC_1 * v_w_id_59142) + (v_MWidthC_1 * v_i_59144))]; \n          if (v_index_59237 < 0) {\n            v__59162_0 = v__59160; \n          } else {\n            if (v_index_59237 >= v_VLength_3) {\n              v__59162_0 = v__59160; \n            } else {\n              v__59162_0 = v__59151[v_index_59237]; \n            }\n          }\n          v__59164_0 = absadd(v__59162_0, v__59150[(v_l_id_59143 + (8 * v_MWidthC_1 * v_w_id_59142) + (v_MWidthC_1 * v_i_59144))]); \n          v__59158 = clmin(v__59164_0, v__59158); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59145 = 0; \n          v__59167[v_l_id_59143] = id(v__59158); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59146 = get_local_id(0); \n        float v_tmp_59240 = 3.4028235E38f; \n        v__57389 = v_tmp_59240; \n        /* reduce_seq */\n        for (int v_i_59147 = 0; v_i_59147 < v_MWidthC_1; v_i_59147 = (1 + v_i_59147)) {\n          v__57389 = clmin(v__57389, v__59167[(v_i_59147 + (v_MWidthC_1 * v_l_id_59146))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59148 = 0; \n          v__59172[v_w_id_59142] = doubleMultiplyAdd(v__57389, v__59153, v__59152[v_w_id_59142], v__59154); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59142 = atomic_inc(v_work_idx_4684); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__59149",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59150",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59151",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59153",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59154",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59156",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59172",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59167",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}