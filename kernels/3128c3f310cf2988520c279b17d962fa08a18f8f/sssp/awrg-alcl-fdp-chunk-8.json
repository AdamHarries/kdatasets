{
  "name" : "awrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59742, const global float* restrict v__59743, const global float* restrict v__59744, const global float* restrict v__59745, float v__59746, float v__59747, global float* v__59761, global int* v__59749, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59751; \n  float v__59753; \n  /* Private Memory */\n  float v__59755_0;\n  \n  float v__59757_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4739 = v__59749; \n    local int v_w_id_59738; \n    if (get_local_id(0) == 0) {\n      v_w_id_59738 = atomic_inc(v_work_idx_4739); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59738 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4737; \n        v_work_idx_4737 = 0; \n        int v_l_id_59739 = atomic_inc(&(v_work_idx_4737)); \n        while((v_l_id_59739 < 8)){\n          float v_tmp_59798 = 3.4028235E38f; \n          v__59751 = v_tmp_59798; \n          /* reduce_seq */\n          for (int v_i_59740 = 0; v_i_59740 < v_MWidthC_1; v_i_59740 = (1 + v_i_59740)) {\n            float v_tmp_59799 = 3.4028235E38f; \n            v__59753 = v_tmp_59799; \n            int v_index_59800 = v__59742[(v_i_59740 + (8 * v_MWidthC_1 * v_w_id_59738) + (v_MWidthC_1 * v_l_id_59739))]; \n            if (v_index_59800 < 0) {\n              v__59755_0 = v__59753; \n            } else {\n              if (v_index_59800 >= v_VLength_3) {\n                v__59755_0 = v__59753; \n              } else {\n                v__59755_0 = v__59744[v_index_59800]; \n              }\n            }\n            v__59757_0 = absadd(v__59755_0, v__59743[(v_i_59740 + (8 * v_MWidthC_1 * v_w_id_59738) + (v_MWidthC_1 * v_l_id_59739))]); \n            v__59751 = clmin(v__59757_0, v__59751); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59741 = 0; \n            v__59761[(v_l_id_59739 + (8 * v_w_id_59738))] = doubleMultiplyAdd(v__59751, v__59746, v__59745[(v_l_id_59739 + (8 * v_w_id_59738))], v__59747); \n          }\n          /* end map_seq */\n          v_l_id_59739 = atomic_inc(&(v_work_idx_4737)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59738 = atomic_inc(v_work_idx_4739); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__59742",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59744",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59745",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59746",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59747",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59749",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59761",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}