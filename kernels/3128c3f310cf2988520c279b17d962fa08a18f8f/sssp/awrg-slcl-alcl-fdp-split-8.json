{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59466, const global float* restrict v__59467, const global float* restrict v__59468, const global float* restrict v__59469, float v__59470, float v__59471, global float* v__59489, global int* v__59473, local float* v__59484, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59475; \n  float v__59477; \n  float v__57389; \n  /* Private Memory */\n  float v__59479_0;\n  \n  float v__59481_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4714 = v__59473; \n    local int v_w_id_59459; \n    if (get_local_id(0) == 0) {\n      v_w_id_59459 = atomic_inc(v_work_idx_4714); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59459 < v_MHeight_2)){\n      for (int v_l_id_59460 = get_local_id(0); v_l_id_59460 < v_MWidthC_1; v_l_id_59460 = (v_l_id_59460 + get_local_size(0))) {\n        float v_tmp_59548 = 3.4028235E38f; \n        v__59475 = v_tmp_59548; \n        /* reduce_seq */\n        for (int v_i_59461 = 0; v_i_59461 < 8; v_i_59461 = (1 + v_i_59461)) {\n          float v_tmp_59549 = 3.4028235E38f; \n          v__59477 = v_tmp_59549; \n          int v_index_59550 = v__59466[(v_l_id_59460 + (8 * v_MWidthC_1 * v_w_id_59459) + (v_MWidthC_1 * v_i_59461))]; \n          if (v_index_59550 < 0) {\n            v__59479_0 = v__59477; \n          } else {\n            if (v_index_59550 >= v_VLength_3) {\n              v__59479_0 = v__59477; \n            } else {\n              v__59479_0 = v__59468[v_index_59550]; \n            }\n          }\n          v__59481_0 = absadd(v__59479_0, v__59467[(v_l_id_59460 + (8 * v_MWidthC_1 * v_w_id_59459) + (v_MWidthC_1 * v_i_59461))]); \n          v__59475 = clmin(v__59481_0, v__59475); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59462 = 0; \n          v__59484[v_l_id_59460] = id(v__59475); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4708; \n        v_work_idx_4708 = 0; \n        int v_l_id_59463 = atomic_inc(&(v_work_idx_4708)); \n        while((v_l_id_59463 < 1)){\n          float v_tmp_59553 = 3.4028235E38f; \n          v__57389 = v_tmp_59553; \n          /* reduce_seq */\n          for (int v_i_59464 = 0; v_i_59464 < v_MWidthC_1; v_i_59464 = (1 + v_i_59464)) {\n            v__57389 = clmin(v__57389, v__59484[(v_i_59464 + (v_MWidthC_1 * v_l_id_59463))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59465 = 0; \n            v__59489[v_w_id_59459] = doubleMultiplyAdd(v__57389, v__59470, v__59469[v_w_id_59459], v__59471); \n          }\n          /* end map_seq */\n          v_l_id_59463 = atomic_inc(&(v_work_idx_4708)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59459 = atomic_inc(v_work_idx_4714); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__59466",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59467",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59468",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59469",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59470",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59471",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59473",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59489",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59484",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}