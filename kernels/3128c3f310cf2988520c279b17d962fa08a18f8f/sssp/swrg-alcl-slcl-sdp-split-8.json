{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58226, const global float* restrict v__58227, const global float* restrict v__58228, const global float* restrict v__58229, float v__58230, float v__58231, global float* v__58248, global float* v__58238, local float* v__58243, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58234; \n  float v__58239; \n  float v__57389; \n  /* Private Memory */\n  float v__58236_0;\n  \n  for (int v_wg_id_58218 = get_group_id(0); v_wg_id_58218 < v_MHeight_2; v_wg_id_58218 = (v_wg_id_58218 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4596; \n      v_work_idx_4596 = 0; \n      int v_l_id_58219 = atomic_inc(&(v_work_idx_4596)); \n      while((v_l_id_58219 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58220 = 0; v_i_58220 < 8; v_i_58220 = (1 + v_i_58220)) {\n          float v_tmp_58305 = 3.4028235E38f; \n          v__58234 = v_tmp_58305; \n          int v_index_58306 = v__58226[(v_l_id_58219 + (8 * v_MWidthC_1 * v_wg_id_58218) + (v_MWidthC_1 * v_i_58220))]; \n          if (v_index_58306 < 0) {\n            v__58236_0 = v__58234; \n          } else {\n            if (v_index_58306 >= v_VLength_3) {\n              v__58236_0 = v__58234; \n            } else {\n              v__58236_0 = v__58228[v_index_58306]; \n            }\n          }\n          v__58238[(7 + (8 * v_MWidthC_1 * v_wg_id_58218) + (-1 * v_i_58220) + (8 * v_l_id_58219))] = absadd(v__58236_0, v__58227[(v_l_id_58219 + (8 * v_MWidthC_1 * v_wg_id_58218) + (v_MWidthC_1 * v_i_58220))]); \n        }\n        /* end map_seq */\n        float v_tmp_58307 = 3.4028235E38f; \n        v__58239 = v_tmp_58307; \n        /* reduce_seq */\n        for (int v_i_58221 = 0; v_i_58221 < 8; v_i_58221 = (1 + v_i_58221)) {\n          v__58239 = clmin(v__58239, v__58238[(v_i_58221 + (8 * v_MWidthC_1 * v_wg_id_58218) + (8 * v_l_id_58219))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58222 = 0; \n          v__58243[v_l_id_58219] = id(v__58239); \n        }\n        /* end map_seq */\n        v_l_id_58219 = atomic_inc(&(v_work_idx_4596)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_58223 = get_local_id(0); \n      float v_tmp_58310 = 3.4028235E38f; \n      v__57389 = v_tmp_58310; \n      /* reduce_seq */\n      for (int v_i_58224 = 0; v_i_58224 < v_MWidthC_1; v_i_58224 = (1 + v_i_58224)) {\n        v__57389 = clmin(v__57389, v__58243[(v_i_58224 + (v_MWidthC_1 * v_l_id_58223))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58225 = 0; \n        v__58248[v_wg_id_58218] = doubleMultiplyAdd(v__57389, v__58230, v__58229[v_wg_id_58218], v__58231); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58226",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58227",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58228",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58230",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58231",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58238",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58243",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}