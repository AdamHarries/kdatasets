{
  "name" : "awrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__65708, const global float* restrict v__65709, const global float* restrict v__65710, const global float* restrict v__65711, float v__65712, float v__65713, global float* v__65731, global float* v__65721, global int* v__65715, local float* v__65726, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65717; \n  float v__65722; \n  float v__57389; \n  /* Private Memory */\n  float v__65719_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5299 = v__65715; \n    local int v_w_id_65700; \n    if (get_local_id(0) == 0) {\n      v_w_id_65700 = atomic_inc(v_work_idx_5299); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65700 < v_MHeight_2)){\n      for (int v_l_id_65701 = get_local_id(0); v_l_id_65701 < v_MWidthC_1; v_l_id_65701 = (v_l_id_65701 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_65702 = 0; v_i_65702 < 32; v_i_65702 = (1 + v_i_65702)) {\n          float v_tmp_65794 = 3.4028235E38f; \n          v__65717 = v_tmp_65794; \n          int v_index_65795 = v__65708[(v_l_id_65701 + (32 * v_MWidthC_1 * v_w_id_65700) + (v_MWidthC_1 * v_i_65702))]; \n          if (v_index_65795 < 0) {\n            v__65719_0 = v__65717; \n          } else {\n            if (v_index_65795 >= v_VLength_3) {\n              v__65719_0 = v__65717; \n            } else {\n              v__65719_0 = v__65710[v_index_65795]; \n            }\n          }\n          v__65721[(31 + (32 * v_MWidthC_1 * v_w_id_65700) + (-1 * v_i_65702) + (32 * v_l_id_65701))] = absadd(v__65719_0, v__65709[(v_l_id_65701 + (32 * v_MWidthC_1 * v_w_id_65700) + (v_MWidthC_1 * v_i_65702))]); \n        }\n        /* end map_seq */\n        float v_tmp_65796 = 3.4028235E38f; \n        v__65722 = v_tmp_65796; \n        /* reduce_seq */\n        for (int v_i_65703 = 0; v_i_65703 < 32; v_i_65703 = (1 + v_i_65703)) {\n          v__65722 = clmin(v__65722, v__65721[(v_i_65703 + (32 * v_MWidthC_1 * v_w_id_65700) + (32 * v_l_id_65701))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65704 = 0; \n          v__65726[v_l_id_65701] = id(v__65722); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65705 = get_local_id(0); \n        float v_tmp_65799 = 3.4028235E38f; \n        v__57389 = v_tmp_65799; \n        /* reduce_seq */\n        for (int v_i_65706 = 0; v_i_65706 < v_MWidthC_1; v_i_65706 = (1 + v_i_65706)) {\n          v__57389 = clmin(v__57389, v__65726[(v_i_65706 + (v_MWidthC_1 * v_l_id_65705))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65707 = 0; \n          v__65731[v_w_id_65700] = doubleMultiplyAdd(v__57389, v__65712, v__65711[v_w_id_65700], v__65713); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65700 = atomic_inc(v_work_idx_5299); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__65708",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65709",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65710",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65712",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65713",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65721",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65715",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65731",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65726",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}