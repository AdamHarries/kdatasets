{
  "name" : "swrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70542, const global float* restrict v__70543, const global float* restrict v__70544, const global float* restrict v__70545, float v__70546, float v__70547, global float* v__70560, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70550; \n  float v__70552; \n  /* Private Memory */\n  float v__70554_0;\n  \n  float v__70556_0;\n  \n  for (int v_wg_id_70538 = get_group_id(0); v_wg_id_70538 < ((v_MHeight_2)/(128)); v_wg_id_70538 = (v_wg_id_70538 + get_num_groups(0))) {\n    for (int v_l_id_70539 = get_local_id(0); v_l_id_70539 < 128; v_l_id_70539 = (v_l_id_70539 + get_local_size(0))) {\n      float v_tmp_70602 = 3.4028235E38f; \n      v__70550 = v_tmp_70602; \n      /* reduce_seq */\n      for (int v_i_70540 = 0; v_i_70540 < v_MWidthC_1; v_i_70540 = (1 + v_i_70540)) {\n        float v_tmp_70603 = 3.4028235E38f; \n        v__70552 = v_tmp_70603; \n        int v_index_70604 = v__70542[(v_i_70540 + (128 * v_MWidthC_1 * v_wg_id_70538) + (v_MWidthC_1 * v_l_id_70539))]; \n        if (v_index_70604 < 0) {\n          v__70554_0 = v__70552; \n        } else {\n          if (v_index_70604 >= v_VLength_3) {\n            v__70554_0 = v__70552; \n          } else {\n            v__70554_0 = v__70544[v_index_70604]; \n          }\n        }\n        v__70556_0 = absadd(v__70554_0, v__70543[(v_i_70540 + (128 * v_MWidthC_1 * v_wg_id_70538) + (v_MWidthC_1 * v_l_id_70539))]); \n        v__70550 = clmin(v__70556_0, v__70550); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70541 = 0; \n        v__70560[(v_l_id_70539 + (128 * v_wg_id_70538))] = doubleMultiplyAdd(v__70550, v__70546, v__70545[(v_l_id_70539 + (128 * v_wg_id_70538))], v__70547); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__70542",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70543",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70544",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70545",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70546",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70547",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__70560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}