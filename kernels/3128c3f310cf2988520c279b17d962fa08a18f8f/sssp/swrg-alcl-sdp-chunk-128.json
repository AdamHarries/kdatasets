{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__71333, const global float* restrict v__71334, const global float* restrict v__71335, const global float* restrict v__71336, float v__71337, float v__71338, global float* v__71351, global float* v__71345, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71341; \n  float v__71346; \n  /* Private Memory */\n  float v__71343_0;\n  \n  for (int v_wg_id_71328 = get_group_id(0); v_wg_id_71328 < ((v_MHeight_2)/(128)); v_wg_id_71328 = (v_wg_id_71328 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5822; \n      v_work_idx_5822 = 0; \n      int v_l_id_71329 = atomic_inc(&(v_work_idx_5822)); \n      while((v_l_id_71329 < 128)){\n        /* map_seq */\n        for (int v_i_71330 = 0; v_i_71330 < v_MWidthC_1; v_i_71330 = (1 + v_i_71330)) {\n          float v_tmp_71391 = 3.4028235E38f; \n          v__71341 = v_tmp_71391; \n          int v_index_71392 = v__71333[(v_i_71330 + (128 * v_MWidthC_1 * v_wg_id_71328) + (v_MWidthC_1 * v_l_id_71329))]; \n          if (v_index_71392 < 0) {\n            v__71343_0 = v__71341; \n          } else {\n            if (v_index_71392 >= v_VLength_3) {\n              v__71343_0 = v__71341; \n            } else {\n              v__71343_0 = v__71335[v_index_71392]; \n            }\n          }\n          v__71345[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_71328) + (-1 * v_i_71330) + (v_MWidthC_1 * v_l_id_71329))] = absadd(v__71343_0, v__71334[(v_i_71330 + (128 * v_MWidthC_1 * v_wg_id_71328) + (v_MWidthC_1 * v_l_id_71329))]); \n        }\n        /* end map_seq */\n        float v_tmp_71393 = 3.4028235E38f; \n        v__71346 = v_tmp_71393; \n        /* reduce_seq */\n        for (int v_i_71331 = 0; v_i_71331 < v_MWidthC_1; v_i_71331 = (1 + v_i_71331)) {\n          v__71346 = clmin(v__71346, v__71345[(v_i_71331 + (128 * v_MWidthC_1 * v_wg_id_71328) + (v_MWidthC_1 * v_l_id_71329))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71332 = 0; \n          v__71351[(v_l_id_71329 + (128 * v_wg_id_71328))] = doubleMultiplyAdd(v__71346, v__71337, v__71336[(v_l_id_71329 + (128 * v_wg_id_71328))], v__71338); \n        }\n        /* end map_seq */\n        v_l_id_71329 = atomic_inc(&(v_work_idx_5822)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__71333",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71334",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71335",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71337",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71338",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__71345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__71351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}