{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70278, const global float* restrict v__70279, const global float* restrict v__70280, const global float* restrict v__70281, float v__70282, float v__70283, global float* v__70301, global int* v__70285, local float* v__70296, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70287; \n  float v__70289; \n  float v__57389; \n  /* Private Memory */\n  float v__70291_0;\n  \n  float v__70293_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5736 = v__70285; \n    local int v_w_id_70271; \n    if (get_local_id(0) == 0) {\n      v_w_id_70271 = atomic_inc(v_work_idx_5736); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70271 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5734; \n        v_work_idx_5734 = 0; \n        int v_l_id_70272 = atomic_inc(&(v_work_idx_5734)); \n        while((v_l_id_70272 < v_MWidthC_1)){\n          float v_tmp_70352 = 3.4028235E38f; \n          v__70287 = v_tmp_70352; \n          /* reduce_seq */\n          for (int v_i_70273 = 0; v_i_70273 < 64; v_i_70273 = (1 + v_i_70273)) {\n            float v_tmp_70353 = 3.4028235E38f; \n            v__70289 = v_tmp_70353; \n            int v_index_70354 = v__70278[(v_l_id_70272 + (64 * v_MWidthC_1 * v_w_id_70271) + (v_MWidthC_1 * v_i_70273))]; \n            if (v_index_70354 < 0) {\n              v__70291_0 = v__70289; \n            } else {\n              if (v_index_70354 >= v_VLength_3) {\n                v__70291_0 = v__70289; \n              } else {\n                v__70291_0 = v__70280[v_index_70354]; \n              }\n            }\n            v__70293_0 = absadd(v__70291_0, v__70279[(v_l_id_70272 + (64 * v_MWidthC_1 * v_w_id_70271) + (v_MWidthC_1 * v_i_70273))]); \n            v__70287 = clmin(v__70293_0, v__70287); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70274 = 0; \n            v__70296[v_l_id_70272] = id(v__70287); \n          }\n          /* end map_seq */\n          v_l_id_70272 = atomic_inc(&(v_work_idx_5734)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5729; \n        v_work_idx_5729 = 0; \n        int v_l_id_70275 = atomic_inc(&(v_work_idx_5729)); \n        while((v_l_id_70275 < 1)){\n          float v_tmp_70357 = 3.4028235E38f; \n          v__57389 = v_tmp_70357; \n          /* reduce_seq */\n          for (int v_i_70276 = 0; v_i_70276 < v_MWidthC_1; v_i_70276 = (1 + v_i_70276)) {\n            v__57389 = clmin(v__57389, v__70296[(v_i_70276 + (v_MWidthC_1 * v_l_id_70275))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70277 = 0; \n            v__70301[v_w_id_70271] = doubleMultiplyAdd(v__57389, v__70282, v__70281[v_w_id_70271], v__70283); \n          }\n          /* end map_seq */\n          v_l_id_70275 = atomic_inc(&(v_work_idx_5729)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70271 = atomic_inc(v_work_idx_5736); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__70278",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70279",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70280",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70281",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70282",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70283",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70285",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70296",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}