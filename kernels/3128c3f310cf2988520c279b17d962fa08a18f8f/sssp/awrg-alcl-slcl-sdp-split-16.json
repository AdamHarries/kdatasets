{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63224, const global float* restrict v__63225, const global float* restrict v__63226, const global float* restrict v__63227, float v__63228, float v__63229, global float* v__63247, global float* v__63237, global int* v__63231, local float* v__63242, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63233; \n  float v__63238; \n  float v__57389; \n  /* Private Memory */\n  float v__63235_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5069 = v__63231; \n    local int v_w_id_63216; \n    if (get_local_id(0) == 0) {\n      v_w_id_63216 = atomic_inc(v_work_idx_5069); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63216 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5067; \n        v_work_idx_5067 = 0; \n        int v_l_id_63217 = atomic_inc(&(v_work_idx_5067)); \n        while((v_l_id_63217 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_63218 = 0; v_i_63218 < 16; v_i_63218 = (1 + v_i_63218)) {\n            float v_tmp_63302 = 3.4028235E38f; \n            v__63233 = v_tmp_63302; \n            int v_index_63303 = v__63224[(v_l_id_63217 + (16 * v_MWidthC_1 * v_w_id_63216) + (v_MWidthC_1 * v_i_63218))]; \n            if (v_index_63303 < 0) {\n              v__63235_0 = v__63233; \n            } else {\n              if (v_index_63303 >= v_VLength_3) {\n                v__63235_0 = v__63233; \n              } else {\n                v__63235_0 = v__63226[v_index_63303]; \n              }\n            }\n            v__63237[(15 + (16 * v_MWidthC_1 * v_w_id_63216) + (-1 * v_i_63218) + (16 * v_l_id_63217))] = absadd(v__63235_0, v__63225[(v_l_id_63217 + (16 * v_MWidthC_1 * v_w_id_63216) + (v_MWidthC_1 * v_i_63218))]); \n          }\n          /* end map_seq */\n          float v_tmp_63304 = 3.4028235E38f; \n          v__63238 = v_tmp_63304; \n          /* reduce_seq */\n          for (int v_i_63219 = 0; v_i_63219 < 16; v_i_63219 = (1 + v_i_63219)) {\n            v__63238 = clmin(v__63238, v__63237[(v_i_63219 + (16 * v_MWidthC_1 * v_w_id_63216) + (16 * v_l_id_63217))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63220 = 0; \n            v__63242[v_l_id_63217] = id(v__63238); \n          }\n          /* end map_seq */\n          v_l_id_63217 = atomic_inc(&(v_work_idx_5067)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_63221 = get_local_id(0); \n        float v_tmp_63307 = 3.4028235E38f; \n        v__57389 = v_tmp_63307; \n        /* reduce_seq */\n        for (int v_i_63222 = 0; v_i_63222 < v_MWidthC_1; v_i_63222 = (1 + v_i_63222)) {\n          v__57389 = clmin(v__57389, v__63242[(v_i_63222 + (v_MWidthC_1 * v_l_id_63221))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_63223 = 0; \n          v__63247[v_w_id_63216] = doubleMultiplyAdd(v__57389, v__63228, v__63227[v_w_id_63216], v__63229); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63216 = atomic_inc(v_work_idx_5069); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__63224",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63225",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63226",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63227",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63228",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63229",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63237",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63231",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63247",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__63242",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}