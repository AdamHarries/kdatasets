{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79357, const global float* restrict v__79358, const global float* restrict v__79359, const global float* restrict v__79360, float v__79361, float v__79362, global float* v__79380, global float* v__79370, global int* v__79364, local float* v__79375, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79366; \n  float v__79371; \n  float v__57389; \n  /* Private Memory */\n  float v__79368_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6576 = v__79364; \n    local int v_w_id_79349; \n    if (get_local_id(0) == 0) {\n      v_w_id_79349 = atomic_inc(v_work_idx_6576); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79349 < v_MHeight_2)){\n      for (int v_l_id_79350 = get_local_id(0); v_l_id_79350 < v_MWidthC_1; v_l_id_79350 = (v_l_id_79350 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_79351 = 0; v_i_79351 < 512; v_i_79351 = (1 + v_i_79351)) {\n          float v_tmp_79439 = 3.4028235E38f; \n          v__79366 = v_tmp_79439; \n          int v_index_79440 = v__79357[(v_l_id_79350 + (512 * v_MWidthC_1 * v_w_id_79349) + (v_MWidthC_1 * v_i_79351))]; \n          if (v_index_79440 < 0) {\n            v__79368_0 = v__79366; \n          } else {\n            if (v_index_79440 >= v_VLength_3) {\n              v__79368_0 = v__79366; \n            } else {\n              v__79368_0 = v__79359[v_index_79440]; \n            }\n          }\n          v__79370[(511 + (512 * v_MWidthC_1 * v_w_id_79349) + (-1 * v_i_79351) + (512 * v_l_id_79350))] = absadd(v__79368_0, v__79358[(v_l_id_79350 + (512 * v_MWidthC_1 * v_w_id_79349) + (v_MWidthC_1 * v_i_79351))]); \n        }\n        /* end map_seq */\n        float v_tmp_79441 = 3.4028235E38f; \n        v__79371 = v_tmp_79441; \n        /* reduce_seq */\n        for (int v_i_79352 = 0; v_i_79352 < 512; v_i_79352 = (1 + v_i_79352)) {\n          v__79371 = clmin(v__79371, v__79370[(v_i_79352 + (512 * v_MWidthC_1 * v_w_id_79349) + (512 * v_l_id_79350))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_79353 = 0; \n          v__79375[v_l_id_79350] = id(v__79371); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6569; \n        v_work_idx_6569 = 0; \n        int v_l_id_79354 = atomic_inc(&(v_work_idx_6569)); \n        while((v_l_id_79354 < 1)){\n          float v_tmp_79444 = 3.4028235E38f; \n          v__57389 = v_tmp_79444; \n          /* reduce_seq */\n          for (int v_i_79355 = 0; v_i_79355 < v_MWidthC_1; v_i_79355 = (1 + v_i_79355)) {\n            v__57389 = clmin(v__57389, v__79375[(v_i_79355 + (v_MWidthC_1 * v_l_id_79354))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79356 = 0; \n            v__79380[v_w_id_79349] = doubleMultiplyAdd(v__57389, v__79361, v__79360[v_w_id_79349], v__79362); \n          }\n          /* end map_seq */\n          v_l_id_79354 = atomic_inc(&(v_work_idx_6569)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79349 = atomic_inc(v_work_idx_6576); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__79357",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79358",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79359",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79360",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79361",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79362",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79370",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79364",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79380",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79375",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}