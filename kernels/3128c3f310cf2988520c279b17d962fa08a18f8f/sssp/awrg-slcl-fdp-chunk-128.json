{
  "name" : "awrg-slcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__72214, const global float* restrict v__72215, const global float* restrict v__72216, const global float* restrict v__72217, float v__72218, float v__72219, global float* v__72233, global int* v__72221, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72223; \n  float v__72225; \n  /* Private Memory */\n  float v__72227_0;\n  \n  float v__72229_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5907 = v__72221; \n    local int v_w_id_72210; \n    if (get_local_id(0) == 0) {\n      v_w_id_72210 = atomic_inc(v_work_idx_5907); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72210 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_72211 = get_local_id(0); v_l_id_72211 < 128; v_l_id_72211 = (v_l_id_72211 + get_local_size(0))) {\n        float v_tmp_72274 = 3.4028235E38f; \n        v__72223 = v_tmp_72274; \n        /* reduce_seq */\n        for (int v_i_72212 = 0; v_i_72212 < v_MWidthC_1; v_i_72212 = (1 + v_i_72212)) {\n          float v_tmp_72275 = 3.4028235E38f; \n          v__72225 = v_tmp_72275; \n          int v_index_72276 = v__72214[(v_i_72212 + (128 * v_MWidthC_1 * v_w_id_72210) + (v_MWidthC_1 * v_l_id_72211))]; \n          if (v_index_72276 < 0) {\n            v__72227_0 = v__72225; \n          } else {\n            if (v_index_72276 >= v_VLength_3) {\n              v__72227_0 = v__72225; \n            } else {\n              v__72227_0 = v__72216[v_index_72276]; \n            }\n          }\n          v__72229_0 = absadd(v__72227_0, v__72215[(v_i_72212 + (128 * v_MWidthC_1 * v_w_id_72210) + (v_MWidthC_1 * v_l_id_72211))]); \n          v__72223 = clmin(v__72229_0, v__72223); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72213 = 0; \n          v__72233[(v_l_id_72211 + (128 * v_w_id_72210))] = doubleMultiplyAdd(v__72223, v__72218, v__72217[(v_l_id_72211 + (128 * v_w_id_72210))], v__72219); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_72210 = atomic_inc(v_work_idx_5907); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__72214",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72216",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72217",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72218",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72219",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72221",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}