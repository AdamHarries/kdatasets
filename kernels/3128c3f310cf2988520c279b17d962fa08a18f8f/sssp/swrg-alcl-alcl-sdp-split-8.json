{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58526, const global float* restrict v__58527, const global float* restrict v__58528, const global float* restrict v__58529, float v__58530, float v__58531, global float* v__58548, global float* v__58538, local float* v__58543, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58534; \n  float v__58539; \n  float v__57389; \n  /* Private Memory */\n  float v__58536_0;\n  \n  for (int v_wg_id_58518 = get_group_id(0); v_wg_id_58518 < v_MHeight_2; v_wg_id_58518 = (v_wg_id_58518 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4625; \n      v_work_idx_4625 = 0; \n      int v_l_id_58519 = atomic_inc(&(v_work_idx_4625)); \n      while((v_l_id_58519 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_58520 = 0; v_i_58520 < 8; v_i_58520 = (1 + v_i_58520)) {\n          float v_tmp_58601 = 3.4028235E38f; \n          v__58534 = v_tmp_58601; \n          int v_index_58602 = v__58526[(v_l_id_58519 + (8 * v_MWidthC_1 * v_wg_id_58518) + (v_MWidthC_1 * v_i_58520))]; \n          if (v_index_58602 < 0) {\n            v__58536_0 = v__58534; \n          } else {\n            if (v_index_58602 >= v_VLength_3) {\n              v__58536_0 = v__58534; \n            } else {\n              v__58536_0 = v__58528[v_index_58602]; \n            }\n          }\n          v__58538[(7 + (8 * v_MWidthC_1 * v_wg_id_58518) + (-1 * v_i_58520) + (8 * v_l_id_58519))] = absadd(v__58536_0, v__58527[(v_l_id_58519 + (8 * v_MWidthC_1 * v_wg_id_58518) + (v_MWidthC_1 * v_i_58520))]); \n        }\n        /* end map_seq */\n        float v_tmp_58603 = 3.4028235E38f; \n        v__58539 = v_tmp_58603; \n        /* reduce_seq */\n        for (int v_i_58521 = 0; v_i_58521 < 8; v_i_58521 = (1 + v_i_58521)) {\n          v__58539 = clmin(v__58539, v__58538[(v_i_58521 + (8 * v_MWidthC_1 * v_wg_id_58518) + (8 * v_l_id_58519))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58522 = 0; \n          v__58543[v_l_id_58519] = id(v__58539); \n        }\n        /* end map_seq */\n        v_l_id_58519 = atomic_inc(&(v_work_idx_4625)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4619; \n      v_work_idx_4619 = 0; \n      int v_l_id_58523 = atomic_inc(&(v_work_idx_4619)); \n      while((v_l_id_58523 < 1)){\n        float v_tmp_58606 = 3.4028235E38f; \n        v__57389 = v_tmp_58606; \n        /* reduce_seq */\n        for (int v_i_58524 = 0; v_i_58524 < v_MWidthC_1; v_i_58524 = (1 + v_i_58524)) {\n          v__57389 = clmin(v__57389, v__58543[(v_i_58524 + (v_MWidthC_1 * v_l_id_58523))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58525 = 0; \n          v__58548[v_wg_id_58518] = doubleMultiplyAdd(v__57389, v__58530, v__58529[v_wg_id_58518], v__58531); \n        }\n        /* end map_seq */\n        v_l_id_58523 = atomic_inc(&(v_work_idx_4619)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__58526",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58527",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58528",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58529",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58530",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58531",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__58538",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__58548",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58543",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}