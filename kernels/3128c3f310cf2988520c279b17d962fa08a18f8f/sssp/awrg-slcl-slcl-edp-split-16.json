{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__62586, const global float* restrict v__62587, const global float* restrict v__62588, const global float* restrict v__62589, float v__62590, float v__62591, global float* v__62611, global int* v__62593, local float* v__62606, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62595; \n  float v__62597; \n  float v__57389; \n  /* Private Memory */\n  float v__62599_0;\n  \n  float v__62601_0;\n  \n  int v__62605_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5005 = v__62593; \n    local int v_w_id_62579; \n    if (get_local_id(0) == 0) {\n      v_w_id_62579 = atomic_inc(v_work_idx_5005); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62579 < v_MHeight_2)){\n      for (int v_l_id_62580 = get_local_id(0); v_l_id_62580 < v_MWidthC_1; v_l_id_62580 = (v_l_id_62580 + get_local_size(0))) {\n        float v_tmp_62677 = 3.4028235E38f; \n        v__62595 = v_tmp_62677; \n        /* reduce_while_seq */\n        for (int v_i_62581 = 0; v_i_62581 < 16; v_i_62581 = (1 + v_i_62581)) {\n          v__62605_0 = check(v__62595, v__62586[(v_l_id_62580 + (16 * v_MWidthC_1 * v_w_id_62579) + (v_MWidthC_1 * v_i_62581))]); \n          if (v__62605_0) {\n          } else {\n            break;\n          }\n          float v_tmp_62678 = 3.4028235E38f; \n          v__62597 = v_tmp_62678; \n          int v_index_62679 = v__62586[(v_l_id_62580 + (16 * v_MWidthC_1 * v_w_id_62579) + (v_MWidthC_1 * v_i_62581))]; \n          if (v_index_62679 < 0) {\n            v__62599_0 = v__62597; \n          } else {\n            if (v_index_62679 >= v_VLength_3) {\n              v__62599_0 = v__62597; \n            } else {\n              v__62599_0 = v__62588[v_index_62679]; \n            }\n          }\n          v__62601_0 = absadd(v__62599_0, v__62587[(v_l_id_62580 + (16 * v_MWidthC_1 * v_w_id_62579) + (v_MWidthC_1 * v_i_62581))]); \n          v__62595 = clmin(v__62601_0, v__62595); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62582 = 0; \n          v__62606[v_l_id_62580] = id(v__62595); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_62583 = get_local_id(0); \n        float v_tmp_62682 = 3.4028235E38f; \n        v__57389 = v_tmp_62682; \n        /* reduce_seq */\n        for (int v_i_62584 = 0; v_i_62584 < v_MWidthC_1; v_i_62584 = (1 + v_i_62584)) {\n          v__57389 = clmin(v__57389, v__62606[(v_i_62584 + (v_MWidthC_1 * v_l_id_62583))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62585 = 0; \n          v__62611[v_w_id_62579] = doubleMultiplyAdd(v__57389, v__62590, v__62589[v_w_id_62579], v__62591); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62579 = atomic_inc(v_work_idx_5005); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62586",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62587",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62588",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62589",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62590",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62591",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62593",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62611",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62606",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}