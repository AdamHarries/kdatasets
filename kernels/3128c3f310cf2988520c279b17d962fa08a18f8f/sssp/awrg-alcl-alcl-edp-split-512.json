{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__80367, const global float* restrict v__80368, const global float* restrict v__80369, const global float* restrict v__80370, float v__80371, float v__80372, global float* v__80392, global int* v__80374, local float* v__80387, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80376; \n  float v__80378; \n  float v__57389; \n  /* Private Memory */\n  float v__80380_0;\n  \n  float v__80382_0;\n  \n  int v__80386_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6683 = v__80374; \n    local int v_w_id_80360; \n    if (get_local_id(0) == 0) {\n      v_w_id_80360 = atomic_inc(v_work_idx_6683); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80360 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6681; \n        v_work_idx_6681 = 0; \n        int v_l_id_80361 = atomic_inc(&(v_work_idx_6681)); \n        while((v_l_id_80361 < v_MWidthC_1)){\n          float v_tmp_80446 = 3.4028235E38f; \n          v__80376 = v_tmp_80446; \n          /* reduce_while_seq */\n          for (int v_i_80362 = 0; v_i_80362 < 512; v_i_80362 = (1 + v_i_80362)) {\n            v__80386_0 = check(v__80376, v__80367[(v_l_id_80361 + (512 * v_MWidthC_1 * v_w_id_80360) + (v_MWidthC_1 * v_i_80362))]); \n            if (v__80386_0) {\n            } else {\n              break;\n            }\n            float v_tmp_80447 = 3.4028235E38f; \n            v__80378 = v_tmp_80447; \n            int v_index_80448 = v__80367[(v_l_id_80361 + (512 * v_MWidthC_1 * v_w_id_80360) + (v_MWidthC_1 * v_i_80362))]; \n            if (v_index_80448 < 0) {\n              v__80380_0 = v__80378; \n            } else {\n              if (v_index_80448 >= v_VLength_3) {\n                v__80380_0 = v__80378; \n              } else {\n                v__80380_0 = v__80369[v_index_80448]; \n              }\n            }\n            v__80382_0 = absadd(v__80380_0, v__80368[(v_l_id_80361 + (512 * v_MWidthC_1 * v_w_id_80360) + (v_MWidthC_1 * v_i_80362))]); \n            v__80376 = clmin(v__80382_0, v__80376); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80363 = 0; \n            v__80387[v_l_id_80361] = id(v__80376); \n          }\n          /* end map_seq */\n          v_l_id_80361 = atomic_inc(&(v_work_idx_6681)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6676; \n        v_work_idx_6676 = 0; \n        int v_l_id_80364 = atomic_inc(&(v_work_idx_6676)); \n        while((v_l_id_80364 < 1)){\n          float v_tmp_80451 = 3.4028235E38f; \n          v__57389 = v_tmp_80451; \n          /* reduce_seq */\n          for (int v_i_80365 = 0; v_i_80365 < v_MWidthC_1; v_i_80365 = (1 + v_i_80365)) {\n            v__57389 = clmin(v__57389, v__80387[(v_i_80365 + (v_MWidthC_1 * v_l_id_80364))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80366 = 0; \n            v__80392[v_w_id_80360] = doubleMultiplyAdd(v__57389, v__80371, v__80370[v_w_id_80360], v__80372); \n          }\n          /* end map_seq */\n          v_l_id_80364 = atomic_inc(&(v_work_idx_6676)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80360 = atomic_inc(v_work_idx_6683); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80367",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80368",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80369",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80370",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80371",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80372",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80374",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80387",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}