{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78612, const global float* restrict v__78613, const global float* restrict v__78614, const global float* restrict v__78615, float v__78616, float v__78617, global float* v__78634, local float* v__78629, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78620; \n  float v__78622; \n  float v__57389; \n  /* Private Memory */\n  float v__78624_0;\n  \n  float v__78626_0;\n  \n  for (int v_wg_id_78605 = get_group_id(0); v_wg_id_78605 < v_MHeight_2; v_wg_id_78605 = (v_wg_id_78605 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6507; \n      v_work_idx_6507 = 0; \n      int v_l_id_78606 = atomic_inc(&(v_work_idx_6507)); \n      while((v_l_id_78606 < v_MWidthC_1)){\n        float v_tmp_78687 = 3.4028235E38f; \n        v__78620 = v_tmp_78687; \n        /* reduce_seq */\n        for (int v_i_78607 = 0; v_i_78607 < 512; v_i_78607 = (1 + v_i_78607)) {\n          float v_tmp_78688 = 3.4028235E38f; \n          v__78622 = v_tmp_78688; \n          int v_index_78689 = v__78612[(v_l_id_78606 + (512 * v_MWidthC_1 * v_wg_id_78605) + (v_MWidthC_1 * v_i_78607))]; \n          if (v_index_78689 < 0) {\n            v__78624_0 = v__78622; \n          } else {\n            if (v_index_78689 >= v_VLength_3) {\n              v__78624_0 = v__78622; \n            } else {\n              v__78624_0 = v__78614[v_index_78689]; \n            }\n          }\n          v__78626_0 = absadd(v__78624_0, v__78613[(v_l_id_78606 + (512 * v_MWidthC_1 * v_wg_id_78605) + (v_MWidthC_1 * v_i_78607))]); \n          v__78620 = clmin(v__78626_0, v__78620); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78608 = 0; \n          v__78629[v_l_id_78606] = id(v__78620); \n        }\n        /* end map_seq */\n        v_l_id_78606 = atomic_inc(&(v_work_idx_6507)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6502; \n      v_work_idx_6502 = 0; \n      int v_l_id_78609 = atomic_inc(&(v_work_idx_6502)); \n      while((v_l_id_78609 < 1)){\n        float v_tmp_78692 = 3.4028235E38f; \n        v__57389 = v_tmp_78692; \n        /* reduce_seq */\n        for (int v_i_78610 = 0; v_i_78610 < v_MWidthC_1; v_i_78610 = (1 + v_i_78610)) {\n          v__57389 = clmin(v__57389, v__78629[(v_i_78610 + (v_MWidthC_1 * v_l_id_78609))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78611 = 0; \n          v__78634[v_wg_id_78605] = doubleMultiplyAdd(v__57389, v__78616, v__78615[v_wg_id_78605], v__78617); \n        }\n        /* end map_seq */\n        v_l_id_78609 = atomic_inc(&(v_work_idx_6502)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78612",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78613",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78614",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78615",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78616",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78617",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__78634",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__78629",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}