{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__73703, const global float* restrict v__73704, const global float* restrict v__73705, const global float* restrict v__73706, float v__73707, float v__73708, global float* v__73728, global int* v__73710, local float* v__73723, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73712; \n  float v__73714; \n  float v__57389; \n  /* Private Memory */\n  float v__73716_0;\n  \n  float v__73718_0;\n  \n  int v__73722_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6059 = v__73710; \n    local int v_w_id_73696; \n    if (get_local_id(0) == 0) {\n      v_w_id_73696 = atomic_inc(v_work_idx_6059); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_73696 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6057; \n        v_work_idx_6057 = 0; \n        int v_l_id_73697 = atomic_inc(&(v_work_idx_6057)); \n        while((v_l_id_73697 < v_MWidthC_1)){\n          float v_tmp_73782 = 3.4028235E38f; \n          v__73712 = v_tmp_73782; \n          /* reduce_while_seq */\n          for (int v_i_73698 = 0; v_i_73698 < 128; v_i_73698 = (1 + v_i_73698)) {\n            v__73722_0 = check(v__73712, v__73703[(v_l_id_73697 + (128 * v_MWidthC_1 * v_w_id_73696) + (v_MWidthC_1 * v_i_73698))]); \n            if (v__73722_0) {\n            } else {\n              break;\n            }\n            float v_tmp_73783 = 3.4028235E38f; \n            v__73714 = v_tmp_73783; \n            int v_index_73784 = v__73703[(v_l_id_73697 + (128 * v_MWidthC_1 * v_w_id_73696) + (v_MWidthC_1 * v_i_73698))]; \n            if (v_index_73784 < 0) {\n              v__73716_0 = v__73714; \n            } else {\n              if (v_index_73784 >= v_VLength_3) {\n                v__73716_0 = v__73714; \n              } else {\n                v__73716_0 = v__73705[v_index_73784]; \n              }\n            }\n            v__73718_0 = absadd(v__73716_0, v__73704[(v_l_id_73697 + (128 * v_MWidthC_1 * v_w_id_73696) + (v_MWidthC_1 * v_i_73698))]); \n            v__73712 = clmin(v__73718_0, v__73712); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73699 = 0; \n            v__73723[v_l_id_73697] = id(v__73712); \n          }\n          /* end map_seq */\n          v_l_id_73697 = atomic_inc(&(v_work_idx_6057)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6052; \n        v_work_idx_6052 = 0; \n        int v_l_id_73700 = atomic_inc(&(v_work_idx_6052)); \n        while((v_l_id_73700 < 1)){\n          float v_tmp_73787 = 3.4028235E38f; \n          v__57389 = v_tmp_73787; \n          /* reduce_seq */\n          for (int v_i_73701 = 0; v_i_73701 < v_MWidthC_1; v_i_73701 = (1 + v_i_73701)) {\n            v__57389 = clmin(v__57389, v__73723[(v_i_73701 + (v_MWidthC_1 * v_l_id_73700))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_73702 = 0; \n            v__73728[v_w_id_73696] = doubleMultiplyAdd(v__57389, v__73707, v__73706[v_w_id_73696], v__73708); \n          }\n          /* end map_seq */\n          v_l_id_73700 = atomic_inc(&(v_work_idx_6052)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_73696 = atomic_inc(v_work_idx_6059); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__73703",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73704",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73705",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73706",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73707",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73708",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__73710",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__73728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__73723",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}