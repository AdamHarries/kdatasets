{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__78803, const global float* restrict v__78804, const global float* restrict v__78805, const global float* restrict v__78806, float v__78807, float v__78808, global float* v__78822, global float* v__78816, global int* v__78810, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78812; \n  float v__78817; \n  /* Private Memory */\n  float v__78814_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6525 = v__78810; \n    local int v_w_id_78798; \n    if (get_local_id(0) == 0) {\n      v_w_id_78798 = atomic_inc(v_work_idx_6525); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78798 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_78799 = get_local_id(0); v_l_id_78799 < 512; v_l_id_78799 = (v_l_id_78799 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_78800 = 0; v_i_78800 < v_MWidthC_1; v_i_78800 = (1 + v_i_78800)) {\n          float v_tmp_78865 = 3.4028235E38f; \n          v__78812 = v_tmp_78865; \n          int v_index_78866 = v__78803[(v_i_78800 + (512 * v_MWidthC_1 * v_w_id_78798) + (v_MWidthC_1 * v_l_id_78799))]; \n          if (v_index_78866 < 0) {\n            v__78814_0 = v__78812; \n          } else {\n            if (v_index_78866 >= v_VLength_3) {\n              v__78814_0 = v__78812; \n            } else {\n              v__78814_0 = v__78805[v_index_78866]; \n            }\n          }\n          v__78816[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_78798) + (-1 * v_i_78800) + (v_MWidthC_1 * v_l_id_78799))] = absadd(v__78814_0, v__78804[(v_i_78800 + (512 * v_MWidthC_1 * v_w_id_78798) + (v_MWidthC_1 * v_l_id_78799))]); \n        }\n        /* end map_seq */\n        float v_tmp_78867 = 3.4028235E38f; \n        v__78817 = v_tmp_78867; \n        /* reduce_seq */\n        for (int v_i_78801 = 0; v_i_78801 < v_MWidthC_1; v_i_78801 = (1 + v_i_78801)) {\n          v__78817 = clmin(v__78817, v__78816[(v_i_78801 + (512 * v_MWidthC_1 * v_w_id_78798) + (v_MWidthC_1 * v_l_id_78799))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_78802 = 0; \n          v__78822[(v_l_id_78799 + (512 * v_w_id_78798))] = doubleMultiplyAdd(v__78817, v__78807, v__78806[(v_l_id_78799 + (512 * v_w_id_78798))], v__78808); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_78798 = atomic_inc(v_work_idx_6525); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__78803",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78804",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78805",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__78806",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78807",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78808",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78816",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__78810",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}