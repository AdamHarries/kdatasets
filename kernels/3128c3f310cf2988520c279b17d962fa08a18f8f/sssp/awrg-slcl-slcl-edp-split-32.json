{
  "name" : "awrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__65918, const global float* restrict v__65919, const global float* restrict v__65920, const global float* restrict v__65921, float v__65922, float v__65923, global float* v__65943, global int* v__65925, local float* v__65938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__65927; \n  float v__65929; \n  float v__57389; \n  /* Private Memory */\n  float v__65931_0;\n  \n  float v__65933_0;\n  \n  int v__65937_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5317 = v__65925; \n    local int v_w_id_65911; \n    if (get_local_id(0) == 0) {\n      v_w_id_65911 = atomic_inc(v_work_idx_5317); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_65911 < v_MHeight_2)){\n      for (int v_l_id_65912 = get_local_id(0); v_l_id_65912 < v_MWidthC_1; v_l_id_65912 = (v_l_id_65912 + get_local_size(0))) {\n        float v_tmp_66009 = 3.4028235E38f; \n        v__65927 = v_tmp_66009; \n        /* reduce_while_seq */\n        for (int v_i_65913 = 0; v_i_65913 < 32; v_i_65913 = (1 + v_i_65913)) {\n          v__65937_0 = check(v__65927, v__65918[(v_l_id_65912 + (32 * v_MWidthC_1 * v_w_id_65911) + (v_MWidthC_1 * v_i_65913))]); \n          if (v__65937_0) {\n          } else {\n            break;\n          }\n          float v_tmp_66010 = 3.4028235E38f; \n          v__65929 = v_tmp_66010; \n          int v_index_66011 = v__65918[(v_l_id_65912 + (32 * v_MWidthC_1 * v_w_id_65911) + (v_MWidthC_1 * v_i_65913))]; \n          if (v_index_66011 < 0) {\n            v__65931_0 = v__65929; \n          } else {\n            if (v_index_66011 >= v_VLength_3) {\n              v__65931_0 = v__65929; \n            } else {\n              v__65931_0 = v__65920[v_index_66011]; \n            }\n          }\n          v__65933_0 = absadd(v__65931_0, v__65919[(v_l_id_65912 + (32 * v_MWidthC_1 * v_w_id_65911) + (v_MWidthC_1 * v_i_65913))]); \n          v__65927 = clmin(v__65933_0, v__65927); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65914 = 0; \n          v__65938[v_l_id_65912] = id(v__65927); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_65915 = get_local_id(0); \n        float v_tmp_66014 = 3.4028235E38f; \n        v__57389 = v_tmp_66014; \n        /* reduce_seq */\n        for (int v_i_65916 = 0; v_i_65916 < v_MWidthC_1; v_i_65916 = (1 + v_i_65916)) {\n          v__57389 = clmin(v__57389, v__65938[(v_i_65916 + (v_MWidthC_1 * v_l_id_65915))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_65917 = 0; \n          v__65943[v_w_id_65911] = doubleMultiplyAdd(v__57389, v__65922, v__65921[v_w_id_65911], v__65923); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_65911 = atomic_inc(v_work_idx_5317); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__65918",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65919",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__65920",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__65921",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__65922",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__65923",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__65925",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__65943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__65938",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}