{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__62899, const global float* restrict v__62900, const global float* restrict v__62901, const global float* restrict v__62902, float v__62903, float v__62904, global float* v__62924, global int* v__62906, local float* v__62919, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62908; \n  float v__62910; \n  float v__57389; \n  /* Private Memory */\n  float v__62912_0;\n  \n  float v__62914_0;\n  \n  int v__62918_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5036 = v__62906; \n    local int v_w_id_62892; \n    if (get_local_id(0) == 0) {\n      v_w_id_62892 = atomic_inc(v_work_idx_5036); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62892 < v_MHeight_2)){\n      for (int v_l_id_62893 = get_local_id(0); v_l_id_62893 < v_MWidthC_1; v_l_id_62893 = (v_l_id_62893 + get_local_size(0))) {\n        float v_tmp_62986 = 3.4028235E38f; \n        v__62908 = v_tmp_62986; \n        /* reduce_while_seq */\n        for (int v_i_62894 = 0; v_i_62894 < 16; v_i_62894 = (1 + v_i_62894)) {\n          v__62918_0 = check(v__62908, v__62899[(v_l_id_62893 + (16 * v_MWidthC_1 * v_w_id_62892) + (v_MWidthC_1 * v_i_62894))]); \n          if (v__62918_0) {\n          } else {\n            break;\n          }\n          float v_tmp_62987 = 3.4028235E38f; \n          v__62910 = v_tmp_62987; \n          int v_index_62988 = v__62899[(v_l_id_62893 + (16 * v_MWidthC_1 * v_w_id_62892) + (v_MWidthC_1 * v_i_62894))]; \n          if (v_index_62988 < 0) {\n            v__62912_0 = v__62910; \n          } else {\n            if (v_index_62988 >= v_VLength_3) {\n              v__62912_0 = v__62910; \n            } else {\n              v__62912_0 = v__62901[v_index_62988]; \n            }\n          }\n          v__62914_0 = absadd(v__62912_0, v__62900[(v_l_id_62893 + (16 * v_MWidthC_1 * v_w_id_62892) + (v_MWidthC_1 * v_i_62894))]); \n          v__62908 = clmin(v__62914_0, v__62908); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62895 = 0; \n          v__62919[v_l_id_62893] = id(v__62908); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5030; \n        v_work_idx_5030 = 0; \n        int v_l_id_62896 = atomic_inc(&(v_work_idx_5030)); \n        while((v_l_id_62896 < 1)){\n          float v_tmp_62991 = 3.4028235E38f; \n          v__57389 = v_tmp_62991; \n          /* reduce_seq */\n          for (int v_i_62897 = 0; v_i_62897 < v_MWidthC_1; v_i_62897 = (1 + v_i_62897)) {\n            v__57389 = clmin(v__57389, v__62919[(v_i_62897 + (v_MWidthC_1 * v_l_id_62896))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_62898 = 0; \n            v__62924[v_w_id_62892] = doubleMultiplyAdd(v__57389, v__62903, v__62902[v_w_id_62892], v__62904); \n          }\n          /* end map_seq */\n          v_l_id_62896 = atomic_inc(&(v_work_idx_5030)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62892 = atomic_inc(v_work_idx_5036); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__62899",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62900",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62901",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62902",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62903",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62904",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62906",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62919",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}