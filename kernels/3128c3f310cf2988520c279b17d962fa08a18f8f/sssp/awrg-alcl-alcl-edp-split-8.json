{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__60375, const global float* restrict v__60376, const global float* restrict v__60377, const global float* restrict v__60378, float v__60379, float v__60380, global float* v__60400, global int* v__60382, local float* v__60395, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60384; \n  float v__60386; \n  float v__57389; \n  /* Private Memory */\n  float v__60388_0;\n  \n  float v__60390_0;\n  \n  int v__60394_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4811 = v__60382; \n    local int v_w_id_60368; \n    if (get_local_id(0) == 0) {\n      v_w_id_60368 = atomic_inc(v_work_idx_4811); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60368 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4809; \n        v_work_idx_4809 = 0; \n        int v_l_id_60369 = atomic_inc(&(v_work_idx_4809)); \n        while((v_l_id_60369 < v_MWidthC_1)){\n          float v_tmp_60454 = 3.4028235E38f; \n          v__60384 = v_tmp_60454; \n          /* reduce_while_seq */\n          for (int v_i_60370 = 0; v_i_60370 < 8; v_i_60370 = (1 + v_i_60370)) {\n            v__60394_0 = check(v__60384, v__60375[(v_l_id_60369 + (8 * v_MWidthC_1 * v_w_id_60368) + (v_MWidthC_1 * v_i_60370))]); \n            if (v__60394_0) {\n            } else {\n              break;\n            }\n            float v_tmp_60455 = 3.4028235E38f; \n            v__60386 = v_tmp_60455; \n            int v_index_60456 = v__60375[(v_l_id_60369 + (8 * v_MWidthC_1 * v_w_id_60368) + (v_MWidthC_1 * v_i_60370))]; \n            if (v_index_60456 < 0) {\n              v__60388_0 = v__60386; \n            } else {\n              if (v_index_60456 >= v_VLength_3) {\n                v__60388_0 = v__60386; \n              } else {\n                v__60388_0 = v__60377[v_index_60456]; \n              }\n            }\n            v__60390_0 = absadd(v__60388_0, v__60376[(v_l_id_60369 + (8 * v_MWidthC_1 * v_w_id_60368) + (v_MWidthC_1 * v_i_60370))]); \n            v__60384 = clmin(v__60390_0, v__60384); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60371 = 0; \n            v__60395[v_l_id_60369] = id(v__60384); \n          }\n          /* end map_seq */\n          v_l_id_60369 = atomic_inc(&(v_work_idx_4809)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4804; \n        v_work_idx_4804 = 0; \n        int v_l_id_60372 = atomic_inc(&(v_work_idx_4804)); \n        while((v_l_id_60372 < 1)){\n          float v_tmp_60459 = 3.4028235E38f; \n          v__57389 = v_tmp_60459; \n          /* reduce_seq */\n          for (int v_i_60373 = 0; v_i_60373 < v_MWidthC_1; v_i_60373 = (1 + v_i_60373)) {\n            v__57389 = clmin(v__57389, v__60395[(v_i_60373 + (v_MWidthC_1 * v_l_id_60372))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60374 = 0; \n            v__60400[v_w_id_60368] = doubleMultiplyAdd(v__57389, v__60379, v__60378[v_w_id_60368], v__60380); \n          }\n          /* end map_seq */\n          v_l_id_60372 = atomic_inc(&(v_work_idx_4804)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60368 = atomic_inc(v_work_idx_4811); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__60375",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60376",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60377",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60378",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60379",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60380",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60382",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60400",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60395",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}