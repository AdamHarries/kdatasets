{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__70082, const global float* restrict v__70083, const global float* restrict v__70084, const global float* restrict v__70085, float v__70086, float v__70087, global float* v__70107, global int* v__70089, local float* v__70102, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70091; \n  float v__70093; \n  float v__57389; \n  /* Private Memory */\n  float v__70095_0;\n  \n  float v__70097_0;\n  \n  int v__70101_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5713 = v__70089; \n    local int v_w_id_70075; \n    if (get_local_id(0) == 0) {\n      v_w_id_70075 = atomic_inc(v_work_idx_5713); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_70075 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5711; \n        v_work_idx_5711 = 0; \n        int v_l_id_70076 = atomic_inc(&(v_work_idx_5711)); \n        while((v_l_id_70076 < v_MWidthC_1)){\n          float v_tmp_70165 = 3.4028235E38f; \n          v__70091 = v_tmp_70165; \n          /* reduce_while_seq */\n          for (int v_i_70077 = 0; v_i_70077 < 64; v_i_70077 = (1 + v_i_70077)) {\n            v__70101_0 = check(v__70091, v__70082[(v_l_id_70076 + (64 * v_MWidthC_1 * v_w_id_70075) + (v_MWidthC_1 * v_i_70077))]); \n            if (v__70101_0) {\n            } else {\n              break;\n            }\n            float v_tmp_70166 = 3.4028235E38f; \n            v__70093 = v_tmp_70166; \n            int v_index_70167 = v__70082[(v_l_id_70076 + (64 * v_MWidthC_1 * v_w_id_70075) + (v_MWidthC_1 * v_i_70077))]; \n            if (v_index_70167 < 0) {\n              v__70095_0 = v__70093; \n            } else {\n              if (v_index_70167 >= v_VLength_3) {\n                v__70095_0 = v__70093; \n              } else {\n                v__70095_0 = v__70084[v_index_70167]; \n              }\n            }\n            v__70097_0 = absadd(v__70095_0, v__70083[(v_l_id_70076 + (64 * v_MWidthC_1 * v_w_id_70075) + (v_MWidthC_1 * v_i_70077))]); \n            v__70091 = clmin(v__70097_0, v__70091); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_70078 = 0; \n            v__70102[v_l_id_70076] = id(v__70091); \n          }\n          /* end map_seq */\n          v_l_id_70076 = atomic_inc(&(v_work_idx_5711)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_70079 = get_local_id(0); \n        float v_tmp_70170 = 3.4028235E38f; \n        v__57389 = v_tmp_70170; \n        /* reduce_seq */\n        for (int v_i_70080 = 0; v_i_70080 < v_MWidthC_1; v_i_70080 = (1 + v_i_70080)) {\n          v__57389 = clmin(v__57389, v__70102[(v_i_70080 + (v_MWidthC_1 * v_l_id_70079))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_70081 = 0; \n          v__70107[v_w_id_70075] = doubleMultiplyAdd(v__57389, v__70086, v__70085[v_w_id_70075], v__70087); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_70075 = atomic_inc(v_work_idx_5713); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__70082",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70083",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70084",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70086",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70087",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__70089",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__70107",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70102",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}