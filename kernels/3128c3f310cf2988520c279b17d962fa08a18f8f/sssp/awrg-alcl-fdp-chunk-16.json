{
  "name" : "awrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__63074, const global float* restrict v__63075, const global float* restrict v__63076, const global float* restrict v__63077, float v__63078, float v__63079, global float* v__63093, global int* v__63081, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__63083; \n  float v__63085; \n  /* Private Memory */\n  float v__63087_0;\n  \n  float v__63089_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5051 = v__63081; \n    local int v_w_id_63070; \n    if (get_local_id(0) == 0) {\n      v_w_id_63070 = atomic_inc(v_work_idx_5051); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_63070 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5049; \n        v_work_idx_5049 = 0; \n        int v_l_id_63071 = atomic_inc(&(v_work_idx_5049)); \n        while((v_l_id_63071 < 16)){\n          float v_tmp_63130 = 3.4028235E38f; \n          v__63083 = v_tmp_63130; \n          /* reduce_seq */\n          for (int v_i_63072 = 0; v_i_63072 < v_MWidthC_1; v_i_63072 = (1 + v_i_63072)) {\n            float v_tmp_63131 = 3.4028235E38f; \n            v__63085 = v_tmp_63131; \n            int v_index_63132 = v__63074[(v_i_63072 + (16 * v_MWidthC_1 * v_w_id_63070) + (v_MWidthC_1 * v_l_id_63071))]; \n            if (v_index_63132 < 0) {\n              v__63087_0 = v__63085; \n            } else {\n              if (v_index_63132 >= v_VLength_3) {\n                v__63087_0 = v__63085; \n              } else {\n                v__63087_0 = v__63076[v_index_63132]; \n              }\n            }\n            v__63089_0 = absadd(v__63087_0, v__63075[(v_i_63072 + (16 * v_MWidthC_1 * v_w_id_63070) + (v_MWidthC_1 * v_l_id_63071))]); \n            v__63083 = clmin(v__63089_0, v__63083); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_63073 = 0; \n            v__63093[(v_l_id_63071 + (16 * v_w_id_63070))] = doubleMultiplyAdd(v__63083, v__63078, v__63077[(v_l_id_63071 + (16 * v_w_id_63070))], v__63079); \n          }\n          /* end map_seq */\n          v_l_id_63071 = atomic_inc(&(v_work_idx_5049)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_63070 = atomic_inc(v_work_idx_5051); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__63074",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63075",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__63076",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__63077",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__63078",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__63079",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__63081",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__63093",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}