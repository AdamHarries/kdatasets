{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__73947, const global float* restrict v__73948, const global float* restrict v__73949, const global float* restrict v__73950, float v__73951, float v__73952, global float* v__73967, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__73954; \n  float v__73957; \n  /* Private Memory */\n  float v__73959_0;\n  \n  float v__73961_0;\n  \n  int v__73965_0;\n  \n  for (int v_wg_id_73943 = get_group_id(0); v_wg_id_73943 < ((v_MHeight_2)/(256)); v_wg_id_73943 = (v_wg_id_73943 + get_num_groups(0))) {\n    for (int v_l_id_73944 = get_local_id(0); v_l_id_73944 < 256; v_l_id_73944 = (v_l_id_73944 + get_local_size(0))) {\n      float v_tmp_74015 = 3.4028235E38f; \n      v__73954 = v_tmp_74015; \n      /* reduce_while_seq */\n      for (int v_i_73945 = 0; v_i_73945 < v_MWidthC_1; v_i_73945 = (1 + v_i_73945)) {\n        v__73965_0 = check(v__73954, v__73947[(v_i_73945 + (256 * v_MWidthC_1 * v_wg_id_73943) + (v_MWidthC_1 * v_l_id_73944))]); \n        if (v__73965_0) {\n        } else {\n          break;\n        }\n        float v_tmp_74016 = 3.4028235E38f; \n        v__73957 = v_tmp_74016; \n        int v_index_74017 = v__73947[(v_i_73945 + (256 * v_MWidthC_1 * v_wg_id_73943) + (v_MWidthC_1 * v_l_id_73944))]; \n        if (v_index_74017 < 0) {\n          v__73959_0 = v__73957; \n        } else {\n          if (v_index_74017 >= v_VLength_3) {\n            v__73959_0 = v__73957; \n          } else {\n            v__73959_0 = v__73949[v_index_74017]; \n          }\n        }\n        v__73961_0 = absadd(v__73959_0, v__73948[(v_i_73945 + (256 * v_MWidthC_1 * v_wg_id_73943) + (v_MWidthC_1 * v_l_id_73944))]); \n        v__73954 = clmin(v__73961_0, v__73954); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_73946 = 0; \n        v__73967[(v_l_id_73944 + (256 * v_wg_id_73943))] = doubleMultiplyAdd(v__73954, v__73951, v__73950[(v_l_id_73944 + (256 * v_wg_id_73943))], v__73952); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__73947",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73948",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__73949",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__73950",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__73951",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__73952",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__73967",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}