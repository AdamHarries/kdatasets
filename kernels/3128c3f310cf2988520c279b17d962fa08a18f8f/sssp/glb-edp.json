{
  "name" : "glb-edp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__56736, const global float* restrict v__56737, const global float* restrict v__56738, const global float* restrict v__56739, float v__56740, float v__56741, global float* v__56756, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__56743; \n  float v__56746; \n  /* Private Memory */\n  float v__56748; \n  float v__56750; \n  int v__56754; \n  for (int v_gl_id_56733 = get_global_id(0); v_gl_id_56733 < v_MHeight_2; v_gl_id_56733 = (v_gl_id_56733 + get_global_size(0))) {\n    float v_tmp_56789 = 3.4028235E38f; \n    v__56743 = v_tmp_56789; \n    /* reduce_while_seq */\n    for (int v_i_56734 = 0; v_i_56734 < v_MWidthC_1; v_i_56734 = (1 + v_i_56734)) {\n      v__56754 = check(v__56743, v__56736[(v_i_56734 + (v_MWidthC_1 * v_gl_id_56733))]); \n      if (v__56754) {\n      } else {\n        break;\n      }\n      float v_tmp_56790 = 3.4028235E38f; \n      v__56746 = v_tmp_56790; \n      int v_index_56791 = v__56736[(v_i_56734 + (v_MWidthC_1 * v_gl_id_56733))]; \n      if (v_index_56791 < 0) {\n        v__56748 = v__56746; \n      } else {\n        if (v_index_56791 >= v_VLength_3) {\n          v__56748 = v__56746; \n        } else {\n          v__56748 = v__56738[v_index_56791]; \n        }\n      }\n      v__56750 = absadd(v__56748, v__56737[(v_i_56734 + (v_MWidthC_1 * v_gl_id_56733))]); \n      v__56743 = clmin(v__56750, v__56743); \n    }\n    /* end reduce_while_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_56735 = 0; \n      v__56756[v_gl_id_56733] = doubleMultiplyAdd(v__56743, v__56740, v__56739[v_gl_id_56733], v__56741); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__56736",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__56738",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__56739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__56740",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__56741",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__56756",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}