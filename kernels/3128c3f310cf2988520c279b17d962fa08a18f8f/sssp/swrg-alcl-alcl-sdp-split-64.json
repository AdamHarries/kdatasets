{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__68522, const global float* restrict v__68523, const global float* restrict v__68524, const global float* restrict v__68525, float v__68526, float v__68527, global float* v__68544, global float* v__68534, local float* v__68539, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__68530; \n  float v__68535; \n  float v__57389; \n  /* Private Memory */\n  float v__68532_0;\n  \n  for (int v_wg_id_68514 = get_group_id(0); v_wg_id_68514 < v_MHeight_2; v_wg_id_68514 = (v_wg_id_68514 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_5561; \n      v_work_idx_5561 = 0; \n      int v_l_id_68515 = atomic_inc(&(v_work_idx_5561)); \n      while((v_l_id_68515 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_68516 = 0; v_i_68516 < 64; v_i_68516 = (1 + v_i_68516)) {\n          float v_tmp_68597 = 3.4028235E38f; \n          v__68530 = v_tmp_68597; \n          int v_index_68598 = v__68522[(v_l_id_68515 + (64 * v_MWidthC_1 * v_wg_id_68514) + (v_MWidthC_1 * v_i_68516))]; \n          if (v_index_68598 < 0) {\n            v__68532_0 = v__68530; \n          } else {\n            if (v_index_68598 >= v_VLength_3) {\n              v__68532_0 = v__68530; \n            } else {\n              v__68532_0 = v__68524[v_index_68598]; \n            }\n          }\n          v__68534[(63 + (64 * v_MWidthC_1 * v_wg_id_68514) + (-1 * v_i_68516) + (64 * v_l_id_68515))] = absadd(v__68532_0, v__68523[(v_l_id_68515 + (64 * v_MWidthC_1 * v_wg_id_68514) + (v_MWidthC_1 * v_i_68516))]); \n        }\n        /* end map_seq */\n        float v_tmp_68599 = 3.4028235E38f; \n        v__68535 = v_tmp_68599; \n        /* reduce_seq */\n        for (int v_i_68517 = 0; v_i_68517 < 64; v_i_68517 = (1 + v_i_68517)) {\n          v__68535 = clmin(v__68535, v__68534[(v_i_68517 + (64 * v_MWidthC_1 * v_wg_id_68514) + (64 * v_l_id_68515))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68518 = 0; \n          v__68539[v_l_id_68515] = id(v__68535); \n        }\n        /* end map_seq */\n        v_l_id_68515 = atomic_inc(&(v_work_idx_5561)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5555; \n      v_work_idx_5555 = 0; \n      int v_l_id_68519 = atomic_inc(&(v_work_idx_5555)); \n      while((v_l_id_68519 < 1)){\n        float v_tmp_68602 = 3.4028235E38f; \n        v__57389 = v_tmp_68602; \n        /* reduce_seq */\n        for (int v_i_68520 = 0; v_i_68520 < v_MWidthC_1; v_i_68520 = (1 + v_i_68520)) {\n          v__57389 = clmin(v__57389, v__68539[(v_i_68520 + (v_MWidthC_1 * v_l_id_68519))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_68521 = 0; \n          v__68544[v_wg_id_68514] = doubleMultiplyAdd(v__57389, v__68526, v__68525[v_wg_id_68514], v__68527); \n        }\n        /* end map_seq */\n        v_l_id_68519 = atomic_inc(&(v_work_idx_5555)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__68522",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68523",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__68524",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__68525",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__68526",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__68527",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__68534",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__68544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__68539",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}