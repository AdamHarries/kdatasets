{
  "name" : "swrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__67692, const global float* restrict v__67693, const global float* restrict v__67694, const global float* restrict v__67695, float v__67696, float v__67697, global float* v__67714, global float* v__67704, local float* v__67709, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__67700; \n  float v__67705; \n  float v__57389; \n  /* Private Memory */\n  float v__67702_0;\n  \n  for (int v_wg_id_67684 = get_group_id(0); v_wg_id_67684 < v_MHeight_2; v_wg_id_67684 = (v_wg_id_67684 + get_num_groups(0))) {\n    for (int v_l_id_67685 = get_local_id(0); v_l_id_67685 < v_MWidthC_1; v_l_id_67685 = (v_l_id_67685 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_67686 = 0; v_i_67686 < 64; v_i_67686 = (1 + v_i_67686)) {\n        float v_tmp_67775 = 3.4028235E38f; \n        v__67700 = v_tmp_67775; \n        int v_index_67776 = v__67692[(v_l_id_67685 + (64 * v_MWidthC_1 * v_wg_id_67684) + (v_MWidthC_1 * v_i_67686))]; \n        if (v_index_67776 < 0) {\n          v__67702_0 = v__67700; \n        } else {\n          if (v_index_67776 >= v_VLength_3) {\n            v__67702_0 = v__67700; \n          } else {\n            v__67702_0 = v__67694[v_index_67776]; \n          }\n        }\n        v__67704[(63 + (64 * v_MWidthC_1 * v_wg_id_67684) + (-1 * v_i_67686) + (64 * v_l_id_67685))] = absadd(v__67702_0, v__67693[(v_l_id_67685 + (64 * v_MWidthC_1 * v_wg_id_67684) + (v_MWidthC_1 * v_i_67686))]); \n      }\n      /* end map_seq */\n      float v_tmp_67777 = 3.4028235E38f; \n      v__67705 = v_tmp_67777; \n      /* reduce_seq */\n      for (int v_i_67687 = 0; v_i_67687 < 64; v_i_67687 = (1 + v_i_67687)) {\n        v__67705 = clmin(v__67705, v__67704[(v_i_67687 + (64 * v_MWidthC_1 * v_wg_id_67684) + (64 * v_l_id_67685))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_67688 = 0; \n        v__67709[v_l_id_67685] = id(v__67705); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5480; \n      v_work_idx_5480 = 0; \n      int v_l_id_67689 = atomic_inc(&(v_work_idx_5480)); \n      while((v_l_id_67689 < 1)){\n        float v_tmp_67780 = 3.4028235E38f; \n        v__57389 = v_tmp_67780; \n        /* reduce_seq */\n        for (int v_i_67690 = 0; v_i_67690 < v_MWidthC_1; v_i_67690 = (1 + v_i_67690)) {\n          v__57389 = clmin(v__57389, v__67709[(v_i_67690 + (v_MWidthC_1 * v_l_id_67689))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_67691 = 0; \n          v__67714[v_wg_id_67684] = doubleMultiplyAdd(v__57389, v__67696, v__67695[v_wg_id_67684], v__67697); \n        }\n        /* end map_seq */\n        v_l_id_67689 = atomic_inc(&(v_work_idx_5480)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__67692",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67693",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__67694",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__67695",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__67696",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__67697",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__67704",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__67714",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__67709",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}