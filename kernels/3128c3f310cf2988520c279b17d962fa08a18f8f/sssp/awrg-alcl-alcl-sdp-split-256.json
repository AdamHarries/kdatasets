{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76849, const global float* restrict v__76850, const global float* restrict v__76851, const global float* restrict v__76852, float v__76853, float v__76854, global float* v__76872, global float* v__76862, global int* v__76856, local float* v__76867, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76858; \n  float v__76863; \n  float v__57389; \n  /* Private Memory */\n  float v__76860_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6349 = v__76856; \n    local int v_w_id_76841; \n    if (get_local_id(0) == 0) {\n      v_w_id_76841 = atomic_inc(v_work_idx_6349); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76841 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6347; \n        v_work_idx_6347 = 0; \n        int v_l_id_76842 = atomic_inc(&(v_work_idx_6347)); \n        while((v_l_id_76842 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_76843 = 0; v_i_76843 < 256; v_i_76843 = (1 + v_i_76843)) {\n            float v_tmp_76923 = 3.4028235E38f; \n            v__76858 = v_tmp_76923; \n            int v_index_76924 = v__76849[(v_l_id_76842 + (256 * v_MWidthC_1 * v_w_id_76841) + (v_MWidthC_1 * v_i_76843))]; \n            if (v_index_76924 < 0) {\n              v__76860_0 = v__76858; \n            } else {\n              if (v_index_76924 >= v_VLength_3) {\n                v__76860_0 = v__76858; \n              } else {\n                v__76860_0 = v__76851[v_index_76924]; \n              }\n            }\n            v__76862[(255 + (256 * v_MWidthC_1 * v_w_id_76841) + (-1 * v_i_76843) + (256 * v_l_id_76842))] = absadd(v__76860_0, v__76850[(v_l_id_76842 + (256 * v_MWidthC_1 * v_w_id_76841) + (v_MWidthC_1 * v_i_76843))]); \n          }\n          /* end map_seq */\n          float v_tmp_76925 = 3.4028235E38f; \n          v__76863 = v_tmp_76925; \n          /* reduce_seq */\n          for (int v_i_76844 = 0; v_i_76844 < 256; v_i_76844 = (1 + v_i_76844)) {\n            v__76863 = clmin(v__76863, v__76862[(v_i_76844 + (256 * v_MWidthC_1 * v_w_id_76841) + (256 * v_l_id_76842))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76845 = 0; \n            v__76867[v_l_id_76842] = id(v__76863); \n          }\n          /* end map_seq */\n          v_l_id_76842 = atomic_inc(&(v_work_idx_6347)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6341; \n        v_work_idx_6341 = 0; \n        int v_l_id_76846 = atomic_inc(&(v_work_idx_6341)); \n        while((v_l_id_76846 < 1)){\n          float v_tmp_76928 = 3.4028235E38f; \n          v__57389 = v_tmp_76928; \n          /* reduce_seq */\n          for (int v_i_76847 = 0; v_i_76847 < v_MWidthC_1; v_i_76847 = (1 + v_i_76847)) {\n            v__57389 = clmin(v__57389, v__76867[(v_i_76847 + (v_MWidthC_1 * v_l_id_76846))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76848 = 0; \n            v__76872[v_w_id_76841] = doubleMultiplyAdd(v__57389, v__76853, v__76852[v_w_id_76841], v__76854); \n          }\n          /* end map_seq */\n          v_l_id_76846 = atomic_inc(&(v_work_idx_6341)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76841 = atomic_inc(v_work_idx_6349); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76849",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76850",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76851",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76852",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76853",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76854",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76862",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76856",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__76867",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}