{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__58714, const global float* restrict v__58715, const global float* restrict v__58716, const global float* restrict v__58717, float v__58718, float v__58719, global float* v__58738, local float* v__58733, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58722; \n  float v__58724; \n  float v__57389; \n  /* Private Memory */\n  float v__58726_0;\n  \n  float v__58728_0;\n  \n  int v__58732_0;\n  \n  for (int v_wg_id_58707 = get_group_id(0); v_wg_id_58707 < v_MHeight_2; v_wg_id_58707 = (v_wg_id_58707 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4645; \n      v_work_idx_4645 = 0; \n      int v_l_id_58708 = atomic_inc(&(v_work_idx_4645)); \n      while((v_l_id_58708 < v_MWidthC_1)){\n        float v_tmp_58794 = 3.4028235E38f; \n        v__58722 = v_tmp_58794; \n        /* reduce_while_seq */\n        for (int v_i_58709 = 0; v_i_58709 < 8; v_i_58709 = (1 + v_i_58709)) {\n          v__58732_0 = check(v__58722, v__58714[(v_l_id_58708 + (8 * v_MWidthC_1 * v_wg_id_58707) + (v_MWidthC_1 * v_i_58709))]); \n          if (v__58732_0) {\n          } else {\n            break;\n          }\n          float v_tmp_58795 = 3.4028235E38f; \n          v__58724 = v_tmp_58795; \n          int v_index_58796 = v__58714[(v_l_id_58708 + (8 * v_MWidthC_1 * v_wg_id_58707) + (v_MWidthC_1 * v_i_58709))]; \n          if (v_index_58796 < 0) {\n            v__58726_0 = v__58724; \n          } else {\n            if (v_index_58796 >= v_VLength_3) {\n              v__58726_0 = v__58724; \n            } else {\n              v__58726_0 = v__58716[v_index_58796]; \n            }\n          }\n          v__58728_0 = absadd(v__58726_0, v__58715[(v_l_id_58708 + (8 * v_MWidthC_1 * v_wg_id_58707) + (v_MWidthC_1 * v_i_58709))]); \n          v__58722 = clmin(v__58728_0, v__58722); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58710 = 0; \n          v__58733[v_l_id_58708] = id(v__58722); \n        }\n        /* end map_seq */\n        v_l_id_58708 = atomic_inc(&(v_work_idx_4645)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4640; \n      v_work_idx_4640 = 0; \n      int v_l_id_58711 = atomic_inc(&(v_work_idx_4640)); \n      while((v_l_id_58711 < 1)){\n        float v_tmp_58799 = 3.4028235E38f; \n        v__57389 = v_tmp_58799; \n        /* reduce_seq */\n        for (int v_i_58712 = 0; v_i_58712 < v_MWidthC_1; v_i_58712 = (1 + v_i_58712)) {\n          v__57389 = clmin(v__57389, v__58733[(v_i_58712 + (v_MWidthC_1 * v_l_id_58711))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58713 = 0; \n          v__58738[v_wg_id_58707] = doubleMultiplyAdd(v__57389, v__58718, v__58717[v_wg_id_58707], v__58719); \n        }\n        /* end map_seq */\n        v_l_id_58711 = atomic_inc(&(v_work_idx_4640)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__58714",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58715",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58716",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58717",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58718",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58719",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58738",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58733",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}