{
  "name" : "awrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__76331, const global float* restrict v__76332, const global float* restrict v__76333, const global float* restrict v__76334, float v__76335, float v__76336, global float* v__76350, global float* v__76344, global int* v__76338, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__76340; \n  float v__76345; \n  /* Private Memory */\n  float v__76342_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6292 = v__76338; \n    local int v_w_id_76326; \n    if (get_local_id(0) == 0) {\n      v_w_id_76326 = atomic_inc(v_work_idx_6292); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_76326 < ((v_MHeight_2)/(256)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6290; \n        v_work_idx_6290 = 0; \n        int v_l_id_76327 = atomic_inc(&(v_work_idx_6290)); \n        while((v_l_id_76327 < 256)){\n          /* map_seq */\n          for (int v_i_76328 = 0; v_i_76328 < v_MWidthC_1; v_i_76328 = (1 + v_i_76328)) {\n            float v_tmp_76389 = 3.4028235E38f; \n            v__76340 = v_tmp_76389; \n            int v_index_76390 = v__76331[(v_i_76328 + (256 * v_MWidthC_1 * v_w_id_76326) + (v_MWidthC_1 * v_l_id_76327))]; \n            if (v_index_76390 < 0) {\n              v__76342_0 = v__76340; \n            } else {\n              if (v_index_76390 >= v_VLength_3) {\n                v__76342_0 = v__76340; \n              } else {\n                v__76342_0 = v__76333[v_index_76390]; \n              }\n            }\n            v__76344[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_76326) + (-1 * v_i_76328) + (v_MWidthC_1 * v_l_id_76327))] = absadd(v__76342_0, v__76332[(v_i_76328 + (256 * v_MWidthC_1 * v_w_id_76326) + (v_MWidthC_1 * v_l_id_76327))]); \n          }\n          /* end map_seq */\n          float v_tmp_76391 = 3.4028235E38f; \n          v__76345 = v_tmp_76391; \n          /* reduce_seq */\n          for (int v_i_76329 = 0; v_i_76329 < v_MWidthC_1; v_i_76329 = (1 + v_i_76329)) {\n            v__76345 = clmin(v__76345, v__76344[(v_i_76329 + (256 * v_MWidthC_1 * v_w_id_76326) + (v_MWidthC_1 * v_l_id_76327))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_76330 = 0; \n            v__76350[(v_l_id_76327 + (256 * v_w_id_76326))] = doubleMultiplyAdd(v__76345, v__76335, v__76334[(v_l_id_76327 + (256 * v_w_id_76326))], v__76336); \n          }\n          /* end map_seq */\n          v_l_id_76327 = atomic_inc(&(v_work_idx_6290)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_76326 = atomic_inc(v_work_idx_6292); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__76331",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76333",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__76334",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__76335",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__76336",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__76344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__76338",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__76350",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}