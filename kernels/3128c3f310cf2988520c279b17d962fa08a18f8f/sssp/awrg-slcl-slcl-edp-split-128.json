{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__72582, const global float* restrict v__72583, const global float* restrict v__72584, const global float* restrict v__72585, float v__72586, float v__72587, global float* v__72607, global int* v__72589, local float* v__72602, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__72591; \n  float v__72593; \n  float v__57389; \n  /* Private Memory */\n  float v__72595_0;\n  \n  float v__72597_0;\n  \n  int v__72601_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5941 = v__72589; \n    local int v_w_id_72575; \n    if (get_local_id(0) == 0) {\n      v_w_id_72575 = atomic_inc(v_work_idx_5941); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_72575 < v_MHeight_2)){\n      for (int v_l_id_72576 = get_local_id(0); v_l_id_72576 < v_MWidthC_1; v_l_id_72576 = (v_l_id_72576 + get_local_size(0))) {\n        float v_tmp_72673 = 3.4028235E38f; \n        v__72591 = v_tmp_72673; \n        /* reduce_while_seq */\n        for (int v_i_72577 = 0; v_i_72577 < 128; v_i_72577 = (1 + v_i_72577)) {\n          v__72601_0 = check(v__72591, v__72582[(v_l_id_72576 + (128 * v_MWidthC_1 * v_w_id_72575) + (v_MWidthC_1 * v_i_72577))]); \n          if (v__72601_0) {\n          } else {\n            break;\n          }\n          float v_tmp_72674 = 3.4028235E38f; \n          v__72593 = v_tmp_72674; \n          int v_index_72675 = v__72582[(v_l_id_72576 + (128 * v_MWidthC_1 * v_w_id_72575) + (v_MWidthC_1 * v_i_72577))]; \n          if (v_index_72675 < 0) {\n            v__72595_0 = v__72593; \n          } else {\n            if (v_index_72675 >= v_VLength_3) {\n              v__72595_0 = v__72593; \n            } else {\n              v__72595_0 = v__72584[v_index_72675]; \n            }\n          }\n          v__72597_0 = absadd(v__72595_0, v__72583[(v_l_id_72576 + (128 * v_MWidthC_1 * v_w_id_72575) + (v_MWidthC_1 * v_i_72577))]); \n          v__72591 = clmin(v__72597_0, v__72591); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72578 = 0; \n          v__72602[v_l_id_72576] = id(v__72591); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_72579 = get_local_id(0); \n        float v_tmp_72678 = 3.4028235E38f; \n        v__57389 = v_tmp_72678; \n        /* reduce_seq */\n        for (int v_i_72580 = 0; v_i_72580 < v_MWidthC_1; v_i_72580 = (1 + v_i_72580)) {\n          v__57389 = clmin(v__57389, v__72602[(v_i_72580 + (v_MWidthC_1 * v_l_id_72579))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_72581 = 0; \n          v__72607[v_w_id_72575] = doubleMultiplyAdd(v__57389, v__72586, v__72585[v_w_id_72575], v__72587); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_72575 = atomic_inc(v_work_idx_5941); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__72582",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72583",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__72584",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__72585",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__72586",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__72587",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__72589",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__72607",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__72602",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}