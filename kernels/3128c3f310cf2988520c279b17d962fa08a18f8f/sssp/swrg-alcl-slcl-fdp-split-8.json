{
  "name" : "swrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__58324, const global float* restrict v__58325, const global float* restrict v__58326, const global float* restrict v__58327, float v__58328, float v__58329, global float* v__58346, local float* v__58341, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__58332; \n  float v__58334; \n  float v__57389; \n  /* Private Memory */\n  float v__58336_0;\n  \n  float v__58338_0;\n  \n  for (int v_wg_id_58317 = get_group_id(0); v_wg_id_58317 < v_MHeight_2; v_wg_id_58317 = (v_wg_id_58317 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_4605; \n      v_work_idx_4605 = 0; \n      int v_l_id_58318 = atomic_inc(&(v_work_idx_4605)); \n      while((v_l_id_58318 < v_MWidthC_1)){\n        float v_tmp_58403 = 3.4028235E38f; \n        v__58332 = v_tmp_58403; \n        /* reduce_seq */\n        for (int v_i_58319 = 0; v_i_58319 < 8; v_i_58319 = (1 + v_i_58319)) {\n          float v_tmp_58404 = 3.4028235E38f; \n          v__58334 = v_tmp_58404; \n          int v_index_58405 = v__58324[(v_l_id_58318 + (8 * v_MWidthC_1 * v_wg_id_58317) + (v_MWidthC_1 * v_i_58319))]; \n          if (v_index_58405 < 0) {\n            v__58336_0 = v__58334; \n          } else {\n            if (v_index_58405 >= v_VLength_3) {\n              v__58336_0 = v__58334; \n            } else {\n              v__58336_0 = v__58326[v_index_58405]; \n            }\n          }\n          v__58338_0 = absadd(v__58336_0, v__58325[(v_l_id_58318 + (8 * v_MWidthC_1 * v_wg_id_58317) + (v_MWidthC_1 * v_i_58319))]); \n          v__58332 = clmin(v__58338_0, v__58332); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_58320 = 0; \n          v__58341[v_l_id_58318] = id(v__58332); \n        }\n        /* end map_seq */\n        v_l_id_58318 = atomic_inc(&(v_work_idx_4605)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_58321 = get_local_id(0); \n      float v_tmp_58408 = 3.4028235E38f; \n      v__57389 = v_tmp_58408; \n      /* reduce_seq */\n      for (int v_i_58322 = 0; v_i_58322 < v_MWidthC_1; v_i_58322 = (1 + v_i_58322)) {\n        v__57389 = clmin(v__57389, v__58341[(v_i_58322 + (v_MWidthC_1 * v_l_id_58321))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_58323 = 0; \n        v__58346[v_wg_id_58317] = doubleMultiplyAdd(v__57389, v__58328, v__58327[v_wg_id_58317], v__58329); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__58324",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58325",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__58326",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__58327",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__58328",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__58329",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__58346",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__58341",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}