{
  "name" : "swrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__71228, const global float* restrict v__71229, const global float* restrict v__71230, const global float* restrict v__71231, float v__71232, float v__71233, global float* v__71252, local float* v__71247, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__71236; \n  float v__71238; \n  float v__57389; \n  /* Private Memory */\n  float v__71240_0;\n  \n  float v__71242_0;\n  \n  int v__71246_0;\n  \n  for (int v_wg_id_71221 = get_group_id(0); v_wg_id_71221 < v_MHeight_2; v_wg_id_71221 = (v_wg_id_71221 + get_num_groups(0))) {\n    for (int v_l_id_71222 = get_local_id(0); v_l_id_71222 < v_MWidthC_1; v_l_id_71222 = (v_l_id_71222 + get_local_size(0))) {\n      float v_tmp_71316 = 3.4028235E38f; \n      v__71236 = v_tmp_71316; \n      /* reduce_while_seq */\n      for (int v_i_71223 = 0; v_i_71223 < 128; v_i_71223 = (1 + v_i_71223)) {\n        v__71246_0 = check(v__71236, v__71228[(v_l_id_71222 + (128 * v_MWidthC_1 * v_wg_id_71221) + (v_MWidthC_1 * v_i_71223))]); \n        if (v__71246_0) {\n        } else {\n          break;\n        }\n        float v_tmp_71317 = 3.4028235E38f; \n        v__71238 = v_tmp_71317; \n        int v_index_71318 = v__71228[(v_l_id_71222 + (128 * v_MWidthC_1 * v_wg_id_71221) + (v_MWidthC_1 * v_i_71223))]; \n        if (v_index_71318 < 0) {\n          v__71240_0 = v__71238; \n        } else {\n          if (v_index_71318 >= v_VLength_3) {\n            v__71240_0 = v__71238; \n          } else {\n            v__71240_0 = v__71230[v_index_71318]; \n          }\n        }\n        v__71242_0 = absadd(v__71240_0, v__71229[(v_l_id_71222 + (128 * v_MWidthC_1 * v_wg_id_71221) + (v_MWidthC_1 * v_i_71223))]); \n        v__71236 = clmin(v__71242_0, v__71236); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_71224 = 0; \n        v__71247[v_l_id_71222] = id(v__71236); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_5811; \n      v_work_idx_5811 = 0; \n      int v_l_id_71225 = atomic_inc(&(v_work_idx_5811)); \n      while((v_l_id_71225 < 1)){\n        float v_tmp_71321 = 3.4028235E38f; \n        v__57389 = v_tmp_71321; \n        /* reduce_seq */\n        for (int v_i_71226 = 0; v_i_71226 < v_MWidthC_1; v_i_71226 = (1 + v_i_71226)) {\n          v__57389 = clmin(v__57389, v__71247[(v_i_71226 + (v_MWidthC_1 * v_l_id_71225))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_71227 = 0; \n          v__71252[v_wg_id_71221] = doubleMultiplyAdd(v__57389, v__71232, v__71231[v_wg_id_71221], v__71233); \n        }\n        /* end map_seq */\n        v_l_id_71225 = atomic_inc(&(v_work_idx_5811)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__71228",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71229",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__71230",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__71231",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__71232",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__71233",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__71252",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__71247",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}