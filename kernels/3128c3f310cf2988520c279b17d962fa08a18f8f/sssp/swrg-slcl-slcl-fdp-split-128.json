{
  "name" : "swrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__70806, const global float* restrict v__70807, const global float* restrict v__70808, const global float* restrict v__70809, float v__70810, float v__70811, global float* v__70828, local float* v__70823, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__70814; \n  float v__70816; \n  float v__57389; \n  /* Private Memory */\n  float v__70818_0;\n  \n  float v__70820_0;\n  \n  for (int v_wg_id_70799 = get_group_id(0); v_wg_id_70799 < v_MHeight_2; v_wg_id_70799 = (v_wg_id_70799 + get_num_groups(0))) {\n    for (int v_l_id_70800 = get_local_id(0); v_l_id_70800 < v_MWidthC_1; v_l_id_70800 = (v_l_id_70800 + get_local_size(0))) {\n      float v_tmp_70893 = 3.4028235E38f; \n      v__70814 = v_tmp_70893; \n      /* reduce_seq */\n      for (int v_i_70801 = 0; v_i_70801 < 128; v_i_70801 = (1 + v_i_70801)) {\n        float v_tmp_70894 = 3.4028235E38f; \n        v__70816 = v_tmp_70894; \n        int v_index_70895 = v__70806[(v_l_id_70800 + (128 * v_MWidthC_1 * v_wg_id_70799) + (v_MWidthC_1 * v_i_70801))]; \n        if (v_index_70895 < 0) {\n          v__70818_0 = v__70816; \n        } else {\n          if (v_index_70895 >= v_VLength_3) {\n            v__70818_0 = v__70816; \n          } else {\n            v__70818_0 = v__70808[v_index_70895]; \n          }\n        }\n        v__70820_0 = absadd(v__70818_0, v__70807[(v_l_id_70800 + (128 * v_MWidthC_1 * v_wg_id_70799) + (v_MWidthC_1 * v_i_70801))]); \n        v__70814 = clmin(v__70820_0, v__70814); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70802 = 0; \n        v__70823[v_l_id_70800] = id(v__70814); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_70803 = get_local_id(0); \n      float v_tmp_70898 = 3.4028235E38f; \n      v__57389 = v_tmp_70898; \n      /* reduce_seq */\n      for (int v_i_70804 = 0; v_i_70804 < v_MWidthC_1; v_i_70804 = (1 + v_i_70804)) {\n        v__57389 = clmin(v__57389, v__70823[(v_i_70804 + (v_MWidthC_1 * v_l_id_70803))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_70805 = 0; \n        v__70828[v_wg_id_70799] = doubleMultiplyAdd(v__57389, v__70810, v__70809[v_wg_id_70799], v__70811); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__70806",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70807",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__70808",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__70809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__70810",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__70811",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__70828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__70823",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}