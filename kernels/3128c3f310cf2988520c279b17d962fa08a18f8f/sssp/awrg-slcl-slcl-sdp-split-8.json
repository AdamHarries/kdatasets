{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59044, const global float* restrict v__59045, const global float* restrict v__59046, const global float* restrict v__59047, float v__59048, float v__59049, global float* v__59067, global float* v__59057, global int* v__59051, local float* v__59062, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59053; \n  float v__59058; \n  float v__57389; \n  /* Private Memory */\n  float v__59055_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4675 = v__59051; \n    local int v_w_id_59036; \n    if (get_local_id(0) == 0) {\n      v_w_id_59036 = atomic_inc(v_work_idx_4675); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59036 < v_MHeight_2)){\n      for (int v_l_id_59037 = get_local_id(0); v_l_id_59037 < v_MWidthC_1; v_l_id_59037 = (v_l_id_59037 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59038 = 0; v_i_59038 < 8; v_i_59038 = (1 + v_i_59038)) {\n          float v_tmp_59130 = 3.4028235E38f; \n          v__59053 = v_tmp_59130; \n          int v_index_59131 = v__59044[(v_l_id_59037 + (8 * v_MWidthC_1 * v_w_id_59036) + (v_MWidthC_1 * v_i_59038))]; \n          if (v_index_59131 < 0) {\n            v__59055_0 = v__59053; \n          } else {\n            if (v_index_59131 >= v_VLength_3) {\n              v__59055_0 = v__59053; \n            } else {\n              v__59055_0 = v__59046[v_index_59131]; \n            }\n          }\n          v__59057[(7 + (8 * v_MWidthC_1 * v_w_id_59036) + (-1 * v_i_59038) + (8 * v_l_id_59037))] = absadd(v__59055_0, v__59045[(v_l_id_59037 + (8 * v_MWidthC_1 * v_w_id_59036) + (v_MWidthC_1 * v_i_59038))]); \n        }\n        /* end map_seq */\n        float v_tmp_59132 = 3.4028235E38f; \n        v__59058 = v_tmp_59132; \n        /* reduce_seq */\n        for (int v_i_59039 = 0; v_i_59039 < 8; v_i_59039 = (1 + v_i_59039)) {\n          v__59058 = clmin(v__59058, v__59057[(v_i_59039 + (8 * v_MWidthC_1 * v_w_id_59036) + (8 * v_l_id_59037))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59040 = 0; \n          v__59062[v_l_id_59037] = id(v__59058); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_59041 = get_local_id(0); \n        float v_tmp_59135 = 3.4028235E38f; \n        v__57389 = v_tmp_59135; \n        /* reduce_seq */\n        for (int v_i_59042 = 0; v_i_59042 < v_MWidthC_1; v_i_59042 = (1 + v_i_59042)) {\n          v__57389 = clmin(v__57389, v__59062[(v_i_59042 + (v_MWidthC_1 * v_l_id_59041))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59043 = 0; \n          v__59067[v_w_id_59036] = doubleMultiplyAdd(v__57389, v__59048, v__59047[v_w_id_59036], v__59049); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59036 = atomic_inc(v_work_idx_4675); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59044",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59045",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59046",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59048",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59049",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59057",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59051",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59062",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}