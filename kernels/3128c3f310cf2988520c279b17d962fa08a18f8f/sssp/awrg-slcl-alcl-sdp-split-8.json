{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59365, const global float* restrict v__59366, const global float* restrict v__59367, const global float* restrict v__59368, float v__59369, float v__59370, global float* v__59388, global float* v__59378, global int* v__59372, local float* v__59383, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59374; \n  float v__59379; \n  float v__57389; \n  /* Private Memory */\n  float v__59376_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4704 = v__59372; \n    local int v_w_id_59357; \n    if (get_local_id(0) == 0) {\n      v_w_id_59357 = atomic_inc(v_work_idx_4704); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59357 < v_MHeight_2)){\n      for (int v_l_id_59358 = get_local_id(0); v_l_id_59358 < v_MWidthC_1; v_l_id_59358 = (v_l_id_59358 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_59359 = 0; v_i_59359 < 8; v_i_59359 = (1 + v_i_59359)) {\n          float v_tmp_59447 = 3.4028235E38f; \n          v__59374 = v_tmp_59447; \n          int v_index_59448 = v__59365[(v_l_id_59358 + (8 * v_MWidthC_1 * v_w_id_59357) + (v_MWidthC_1 * v_i_59359))]; \n          if (v_index_59448 < 0) {\n            v__59376_0 = v__59374; \n          } else {\n            if (v_index_59448 >= v_VLength_3) {\n              v__59376_0 = v__59374; \n            } else {\n              v__59376_0 = v__59367[v_index_59448]; \n            }\n          }\n          v__59378[(7 + (8 * v_MWidthC_1 * v_w_id_59357) + (-1 * v_i_59359) + (8 * v_l_id_59358))] = absadd(v__59376_0, v__59366[(v_l_id_59358 + (8 * v_MWidthC_1 * v_w_id_59357) + (v_MWidthC_1 * v_i_59359))]); \n        }\n        /* end map_seq */\n        float v_tmp_59449 = 3.4028235E38f; \n        v__59379 = v_tmp_59449; \n        /* reduce_seq */\n        for (int v_i_59360 = 0; v_i_59360 < 8; v_i_59360 = (1 + v_i_59360)) {\n          v__59379 = clmin(v__59379, v__59378[(v_i_59360 + (8 * v_MWidthC_1 * v_w_id_59357) + (8 * v_l_id_59358))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_59361 = 0; \n          v__59383[v_l_id_59358] = id(v__59379); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4697; \n        v_work_idx_4697 = 0; \n        int v_l_id_59362 = atomic_inc(&(v_work_idx_4697)); \n        while((v_l_id_59362 < 1)){\n          float v_tmp_59452 = 3.4028235E38f; \n          v__57389 = v_tmp_59452; \n          /* reduce_seq */\n          for (int v_i_59363 = 0; v_i_59363 < v_MWidthC_1; v_i_59363 = (1 + v_i_59363)) {\n            v__57389 = clmin(v__57389, v__59383[(v_i_59363 + (v_MWidthC_1 * v_l_id_59362))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59364 = 0; \n            v__59388[v_w_id_59357] = doubleMultiplyAdd(v__57389, v__59369, v__59368[v_w_id_59357], v__59370); \n          }\n          /* end map_seq */\n          v_l_id_59362 = atomic_inc(&(v_work_idx_4697)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59357 = atomic_inc(v_work_idx_4704); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__59365",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59366",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59367",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59368",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59369",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59370",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59378",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59372",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59388",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__59383",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}