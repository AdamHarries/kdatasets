{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__74984, const global float* restrict v__74985, const global float* restrict v__74986, const global float* restrict v__74987, float v__74988, float v__74989, global float* v__75006, local float* v__75001, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__74992; \n  float v__74994; \n  float v__57389; \n  /* Private Memory */\n  float v__74996_0;\n  \n  float v__74998_0;\n  \n  for (int v_wg_id_74977 = get_group_id(0); v_wg_id_74977 < v_MHeight_2; v_wg_id_74977 = (v_wg_id_74977 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6165; \n      v_work_idx_6165 = 0; \n      int v_l_id_74978 = atomic_inc(&(v_work_idx_6165)); \n      while((v_l_id_74978 < v_MWidthC_1)){\n        float v_tmp_75063 = 3.4028235E38f; \n        v__74992 = v_tmp_75063; \n        /* reduce_seq */\n        for (int v_i_74979 = 0; v_i_74979 < 256; v_i_74979 = (1 + v_i_74979)) {\n          float v_tmp_75064 = 3.4028235E38f; \n          v__74994 = v_tmp_75064; \n          int v_index_75065 = v__74984[(v_l_id_74978 + (256 * v_MWidthC_1 * v_wg_id_74977) + (v_MWidthC_1 * v_i_74979))]; \n          if (v_index_75065 < 0) {\n            v__74996_0 = v__74994; \n          } else {\n            if (v_index_75065 >= v_VLength_3) {\n              v__74996_0 = v__74994; \n            } else {\n              v__74996_0 = v__74986[v_index_75065]; \n            }\n          }\n          v__74998_0 = absadd(v__74996_0, v__74985[(v_l_id_74978 + (256 * v_MWidthC_1 * v_wg_id_74977) + (v_MWidthC_1 * v_i_74979))]); \n          v__74992 = clmin(v__74998_0, v__74992); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_74980 = 0; \n          v__75001[v_l_id_74978] = id(v__74992); \n        }\n        /* end map_seq */\n        v_l_id_74978 = atomic_inc(&(v_work_idx_6165)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_74981 = get_local_id(0); \n      float v_tmp_75068 = 3.4028235E38f; \n      v__57389 = v_tmp_75068; \n      /* reduce_seq */\n      for (int v_i_74982 = 0; v_i_74982 < v_MWidthC_1; v_i_74982 = (1 + v_i_74982)) {\n        v__57389 = clmin(v__57389, v__75001[(v_i_74982 + (v_MWidthC_1 * v_l_id_74981))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_74983 = 0; \n        v__75006[v_wg_id_74977] = doubleMultiplyAdd(v__57389, v__74988, v__74987[v_wg_id_74977], v__74989); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__74984",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74985",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__74986",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__74987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__74988",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__74989",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__75006",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__75001",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}