{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__62481, const global float* restrict v__62482, const global float* restrict v__62483, const global float* restrict v__62484, float v__62485, float v__62486, global float* v__62504, global int* v__62488, local float* v__62499, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__62490; \n  float v__62492; \n  float v__57389; \n  /* Private Memory */\n  float v__62494_0;\n  \n  float v__62496_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4996 = v__62488; \n    local int v_w_id_62474; \n    if (get_local_id(0) == 0) {\n      v_w_id_62474 = atomic_inc(v_work_idx_4996); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_62474 < v_MHeight_2)){\n      for (int v_l_id_62475 = get_local_id(0); v_l_id_62475 < v_MWidthC_1; v_l_id_62475 = (v_l_id_62475 + get_local_size(0))) {\n        float v_tmp_62567 = 3.4028235E38f; \n        v__62490 = v_tmp_62567; \n        /* reduce_seq */\n        for (int v_i_62476 = 0; v_i_62476 < 16; v_i_62476 = (1 + v_i_62476)) {\n          float v_tmp_62568 = 3.4028235E38f; \n          v__62492 = v_tmp_62568; \n          int v_index_62569 = v__62481[(v_l_id_62475 + (16 * v_MWidthC_1 * v_w_id_62474) + (v_MWidthC_1 * v_i_62476))]; \n          if (v_index_62569 < 0) {\n            v__62494_0 = v__62492; \n          } else {\n            if (v_index_62569 >= v_VLength_3) {\n              v__62494_0 = v__62492; \n            } else {\n              v__62494_0 = v__62483[v_index_62569]; \n            }\n          }\n          v__62496_0 = absadd(v__62494_0, v__62482[(v_l_id_62475 + (16 * v_MWidthC_1 * v_w_id_62474) + (v_MWidthC_1 * v_i_62476))]); \n          v__62490 = clmin(v__62496_0, v__62490); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62477 = 0; \n          v__62499[v_l_id_62475] = id(v__62490); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_62478 = get_local_id(0); \n        float v_tmp_62572 = 3.4028235E38f; \n        v__57389 = v_tmp_62572; \n        /* reduce_seq */\n        for (int v_i_62479 = 0; v_i_62479 < v_MWidthC_1; v_i_62479 = (1 + v_i_62479)) {\n          v__57389 = clmin(v__57389, v__62499[(v_i_62479 + (v_MWidthC_1 * v_l_id_62478))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_62480 = 0; \n          v__62504[v_w_id_62474] = doubleMultiplyAdd(v__57389, v__62485, v__62484[v_w_id_62474], v__62486); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_62474 = atomic_inc(v_work_idx_4996); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__62481",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62482",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__62483",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__62484",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__62485",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__62486",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__62488",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__62504",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__62499",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}