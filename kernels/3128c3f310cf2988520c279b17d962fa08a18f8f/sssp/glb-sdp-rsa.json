{
  "name" : "glb-sdp-rsa",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__57068, const global float* restrict v__57069, const global float* restrict v__57070, const global float* restrict v__57071, float v__57072, float v__57073, global float* v__57087, global float* v__57086, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__57075; \n  float v__57078; \n  /* Private Memory */\n  float v__57080; \n  float v__57082; \n  for (int v_gl_id_57064 = get_global_id(0); v_gl_id_57064 < v_MHeight_2; v_gl_id_57064 = (v_gl_id_57064 + get_global_size(0))) {\n    float v_tmp_57112 = 3.4028235E38f; \n    v__57075 = v_tmp_57112; \n    /* reduce_seq */\n    int v_stop_57113 = min(v__57068[(1 + (v__57068[v_gl_id_57064] / 4))], ((global int*)(v__57069 + (((global int*)(v__57069))[v_gl_id_57064] / 4)))[1]); \n    for (int v_i_57065 = 0; v_i_57065 < v_stop_57113; v_i_57065 = (1 + v_i_57065)) {\n      float v_tmp_57121 = 3.4028235E38f; \n      v__57078 = v_tmp_57121; \n      int v_index_57123 = v__57068[(2 + v_i_57065 + (v__57068[v_gl_id_57064] / 4))]; \n      if (v_index_57123 < 0) {\n        v__57080 = v__57078; \n      } else {\n        if (v_index_57123 >= v_MWidthC_1) {\n          v__57080 = v__57078; \n        } else {\n          v__57080 = v__57070[v_index_57123]; \n        }\n      }\n      v__57082 = absadd(v__57069[(2 + v_i_57065 + (((global int*)(v__57069))[v_gl_id_57064] / 4))], v__57080); \n      v__57075 = clmin(v__57075, v__57082); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_57066 = 0; \n      v__57086[v_gl_id_57064] = doubleMultiplyAdd(v__57075, v__57072, v__57071[v_gl_id_57064], v__57073); \n    }\n    /* end map_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_57067 = 0; \n      v__57087[v_gl_id_57064] = id(v__57086[v_gl_id_57064]); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "arrayType" : "ragged"
  },
  "inputArgs" : [ {
    "variable" : "v__57068",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__57069",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__57070",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__57071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__57072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__57073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__57086",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__57087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}