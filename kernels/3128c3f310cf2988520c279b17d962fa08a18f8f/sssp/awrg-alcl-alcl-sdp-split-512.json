{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__80181, const global float* restrict v__80182, const global float* restrict v__80183, const global float* restrict v__80184, float v__80185, float v__80186, global float* v__80204, global float* v__80194, global int* v__80188, local float* v__80199, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80190; \n  float v__80195; \n  float v__57389; \n  /* Private Memory */\n  float v__80192_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6661 = v__80188; \n    local int v_w_id_80173; \n    if (get_local_id(0) == 0) {\n      v_w_id_80173 = atomic_inc(v_work_idx_6661); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80173 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6659; \n        v_work_idx_6659 = 0; \n        int v_l_id_80174 = atomic_inc(&(v_work_idx_6659)); \n        while((v_l_id_80174 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_80175 = 0; v_i_80175 < 512; v_i_80175 = (1 + v_i_80175)) {\n            float v_tmp_80255 = 3.4028235E38f; \n            v__80190 = v_tmp_80255; \n            int v_index_80256 = v__80181[(v_l_id_80174 + (512 * v_MWidthC_1 * v_w_id_80173) + (v_MWidthC_1 * v_i_80175))]; \n            if (v_index_80256 < 0) {\n              v__80192_0 = v__80190; \n            } else {\n              if (v_index_80256 >= v_VLength_3) {\n                v__80192_0 = v__80190; \n              } else {\n                v__80192_0 = v__80183[v_index_80256]; \n              }\n            }\n            v__80194[(511 + (512 * v_MWidthC_1 * v_w_id_80173) + (-1 * v_i_80175) + (512 * v_l_id_80174))] = absadd(v__80192_0, v__80182[(v_l_id_80174 + (512 * v_MWidthC_1 * v_w_id_80173) + (v_MWidthC_1 * v_i_80175))]); \n          }\n          /* end map_seq */\n          float v_tmp_80257 = 3.4028235E38f; \n          v__80195 = v_tmp_80257; \n          /* reduce_seq */\n          for (int v_i_80176 = 0; v_i_80176 < 512; v_i_80176 = (1 + v_i_80176)) {\n            v__80195 = clmin(v__80195, v__80194[(v_i_80176 + (512 * v_MWidthC_1 * v_w_id_80173) + (512 * v_l_id_80174))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80177 = 0; \n            v__80199[v_l_id_80174] = id(v__80195); \n          }\n          /* end map_seq */\n          v_l_id_80174 = atomic_inc(&(v_work_idx_6659)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6653; \n        v_work_idx_6653 = 0; \n        int v_l_id_80178 = atomic_inc(&(v_work_idx_6653)); \n        while((v_l_id_80178 < 1)){\n          float v_tmp_80260 = 3.4028235E38f; \n          v__57389 = v_tmp_80260; \n          /* reduce_seq */\n          for (int v_i_80179 = 0; v_i_80179 < v_MWidthC_1; v_i_80179 = (1 + v_i_80179)) {\n            v__57389 = clmin(v__57389, v__80199[(v_i_80179 + (v_MWidthC_1 * v_l_id_80178))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80180 = 0; \n            v__80204[v_w_id_80173] = doubleMultiplyAdd(v__57389, v__80185, v__80184[v_w_id_80173], v__80186); \n          }\n          /* end map_seq */\n          v_l_id_80178 = atomic_inc(&(v_work_idx_6653)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80173 = atomic_inc(v_work_idx_6661); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80181",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80182",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80183",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80185",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80186",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80194",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80188",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80204",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80199",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}