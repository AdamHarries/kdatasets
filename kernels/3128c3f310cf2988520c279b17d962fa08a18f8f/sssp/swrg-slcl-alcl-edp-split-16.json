{
  "name" : "swrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__61232, const global float* restrict v__61233, const global float* restrict v__61234, const global float* restrict v__61235, float v__61236, float v__61237, global float* v__61256, local float* v__61251, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__61240; \n  float v__61242; \n  float v__57389; \n  /* Private Memory */\n  float v__61244_0;\n  \n  float v__61246_0;\n  \n  int v__61250_0;\n  \n  for (int v_wg_id_61225 = get_group_id(0); v_wg_id_61225 < v_MHeight_2; v_wg_id_61225 = (v_wg_id_61225 + get_num_groups(0))) {\n    for (int v_l_id_61226 = get_local_id(0); v_l_id_61226 < v_MWidthC_1; v_l_id_61226 = (v_l_id_61226 + get_local_size(0))) {\n      float v_tmp_61320 = 3.4028235E38f; \n      v__61240 = v_tmp_61320; \n      /* reduce_while_seq */\n      for (int v_i_61227 = 0; v_i_61227 < 16; v_i_61227 = (1 + v_i_61227)) {\n        v__61250_0 = check(v__61240, v__61232[(v_l_id_61226 + (16 * v_MWidthC_1 * v_wg_id_61225) + (v_MWidthC_1 * v_i_61227))]); \n        if (v__61250_0) {\n        } else {\n          break;\n        }\n        float v_tmp_61321 = 3.4028235E38f; \n        v__61242 = v_tmp_61321; \n        int v_index_61322 = v__61232[(v_l_id_61226 + (16 * v_MWidthC_1 * v_wg_id_61225) + (v_MWidthC_1 * v_i_61227))]; \n        if (v_index_61322 < 0) {\n          v__61244_0 = v__61242; \n        } else {\n          if (v_index_61322 >= v_VLength_3) {\n            v__61244_0 = v__61242; \n          } else {\n            v__61244_0 = v__61234[v_index_61322]; \n          }\n        }\n        v__61246_0 = absadd(v__61244_0, v__61233[(v_l_id_61226 + (16 * v_MWidthC_1 * v_wg_id_61225) + (v_MWidthC_1 * v_i_61227))]); \n        v__61240 = clmin(v__61246_0, v__61240); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_61228 = 0; \n        v__61251[v_l_id_61226] = id(v__61240); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_4875; \n      v_work_idx_4875 = 0; \n      int v_l_id_61229 = atomic_inc(&(v_work_idx_4875)); \n      while((v_l_id_61229 < 1)){\n        float v_tmp_61325 = 3.4028235E38f; \n        v__57389 = v_tmp_61325; \n        /* reduce_seq */\n        for (int v_i_61230 = 0; v_i_61230 < v_MWidthC_1; v_i_61230 = (1 + v_i_61230)) {\n          v__57389 = clmin(v__57389, v__61251[(v_i_61230 + (v_MWidthC_1 * v_l_id_61229))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_61231 = 0; \n          v__61256[v_wg_id_61225] = doubleMultiplyAdd(v__57389, v__61236, v__61235[v_wg_id_61225], v__61237); \n        }\n        /* end map_seq */\n        v_l_id_61229 = atomic_inc(&(v_work_idx_4875)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__61232",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61233",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__61234",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__61235",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__61236",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__61237",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__61256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__61251",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}