{
  "name" : "awrg-alcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__59811, const global float* restrict v__59812, const global float* restrict v__59813, const global float* restrict v__59814, float v__59815, float v__59816, global float* v__59832, global int* v__59818, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__59819; \n  float v__59822; \n  /* Private Memory */\n  float v__59824_0;\n  \n  float v__59826_0;\n  \n  int v__59830_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4746 = v__59818; \n    local int v_w_id_59807; \n    if (get_local_id(0) == 0) {\n      v_w_id_59807 = atomic_inc(v_work_idx_4746); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_59807 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4744; \n        v_work_idx_4744 = 0; \n        int v_l_id_59808 = atomic_inc(&(v_work_idx_4744)); \n        while((v_l_id_59808 < 8)){\n          float v_tmp_59875 = 3.4028235E38f; \n          v__59819 = v_tmp_59875; \n          /* reduce_while_seq */\n          for (int v_i_59809 = 0; v_i_59809 < v_MWidthC_1; v_i_59809 = (1 + v_i_59809)) {\n            v__59830_0 = check(v__59819, v__59811[(v_i_59809 + (8 * v_MWidthC_1 * v_w_id_59807) + (v_MWidthC_1 * v_l_id_59808))]); \n            if (v__59830_0) {\n            } else {\n              break;\n            }\n            float v_tmp_59876 = 3.4028235E38f; \n            v__59822 = v_tmp_59876; \n            int v_index_59877 = v__59811[(v_i_59809 + (8 * v_MWidthC_1 * v_w_id_59807) + (v_MWidthC_1 * v_l_id_59808))]; \n            if (v_index_59877 < 0) {\n              v__59824_0 = v__59822; \n            } else {\n              if (v_index_59877 >= v_VLength_3) {\n                v__59824_0 = v__59822; \n              } else {\n                v__59824_0 = v__59813[v_index_59877]; \n              }\n            }\n            v__59826_0 = absadd(v__59824_0, v__59812[(v_i_59809 + (8 * v_MWidthC_1 * v_w_id_59807) + (v_MWidthC_1 * v_l_id_59808))]); \n            v__59819 = clmin(v__59826_0, v__59819); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_59810 = 0; \n            v__59832[(v_l_id_59808 + (8 * v_w_id_59807))] = doubleMultiplyAdd(v__59819, v__59815, v__59814[(v_l_id_59808 + (8 * v_w_id_59807))], v__59816); \n          }\n          /* end map_seq */\n          v_l_id_59808 = atomic_inc(&(v_work_idx_4744)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_59807 = atomic_inc(v_work_idx_4746); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__59811",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59812",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__59813",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__59814",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__59815",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__59816",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__59818",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__59832",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}