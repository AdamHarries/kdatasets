{
  "name" : "swrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94315, const global float* restrict v__94316, const global float* restrict v__94317, const global float* restrict v__94318, float v__94319, float v__94320, global float* v__94333, global float* v__94327, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94323; \n  float v__94328; \n  /* Private Memory */\n  float v__94325_0;\n  \n  for (int v_wg_id_94310 = get_group_id(0); v_wg_id_94310 < ((v_MHeight_2)/(128)); v_wg_id_94310 = (v_wg_id_94310 + get_num_groups(0))) {\n    for (int v_l_id_94311 = get_local_id(0); v_l_id_94311 < 128; v_l_id_94311 = (v_l_id_94311 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_94312 = 0; v_i_94312 < v_MWidthC_1; v_i_94312 = (1 + v_i_94312)) {\n        float v_tmp_94377 = 0.0f; \n        v__94323 = v_tmp_94377; \n        int v_index_94378 = v__94315[(v_i_94312 + (128 * v_MWidthC_1 * v_wg_id_94310) + (v_MWidthC_1 * v_l_id_94311))]; \n        if (v_index_94378 < 0) {\n          v__94325_0 = v__94323; \n        } else {\n          if (v_index_94378 >= v_VLength_3) {\n            v__94325_0 = v__94323; \n          } else {\n            v__94325_0 = v__94317[v_index_94378]; \n          }\n        }\n        v__94327[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_94310) + (-1 * v_i_94312) + (v_MWidthC_1 * v_l_id_94311))] = mult(v__94325_0, v__94316[(v_i_94312 + (128 * v_MWidthC_1 * v_wg_id_94310) + (v_MWidthC_1 * v_l_id_94311))]); \n      }\n      /* end map_seq */\n      float v_tmp_94379 = 0.0f; \n      v__94328 = v_tmp_94379; \n      /* reduce_seq */\n      for (int v_i_94313 = 0; v_i_94313 < v_MWidthC_1; v_i_94313 = (1 + v_i_94313)) {\n        v__94328 = add(v__94328, v__94327[(v_i_94313 + (128 * v_MWidthC_1 * v_wg_id_94310) + (v_MWidthC_1 * v_l_id_94311))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94314 = 0; \n        v__94333[(v_l_id_94311 + (128 * v_wg_id_94310))] = doubleMultiplyAdd(v__94328, v__94319, v__94318[(v_l_id_94311 + (128 * v_wg_id_94310))], v__94320); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94315",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94316",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94317",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94319",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94320",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94327",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__94333",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}