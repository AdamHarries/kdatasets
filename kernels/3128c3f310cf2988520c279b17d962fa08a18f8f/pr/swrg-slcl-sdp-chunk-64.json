{
  "name" : "swrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90983, const global float* restrict v__90984, const global float* restrict v__90985, const global float* restrict v__90986, float v__90987, float v__90988, global float* v__91001, global float* v__90995, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90991; \n  float v__90996; \n  /* Private Memory */\n  float v__90993_0;\n  \n  for (int v_wg_id_90978 = get_group_id(0); v_wg_id_90978 < ((v_MHeight_2)/(64)); v_wg_id_90978 = (v_wg_id_90978 + get_num_groups(0))) {\n    for (int v_l_id_90979 = get_local_id(0); v_l_id_90979 < 64; v_l_id_90979 = (v_l_id_90979 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_90980 = 0; v_i_90980 < v_MWidthC_1; v_i_90980 = (1 + v_i_90980)) {\n        float v_tmp_91045 = 0.0f; \n        v__90991 = v_tmp_91045; \n        int v_index_91046 = v__90983[(v_i_90980 + (64 * v_MWidthC_1 * v_wg_id_90978) + (v_MWidthC_1 * v_l_id_90979))]; \n        if (v_index_91046 < 0) {\n          v__90993_0 = v__90991; \n        } else {\n          if (v_index_91046 >= v_VLength_3) {\n            v__90993_0 = v__90991; \n          } else {\n            v__90993_0 = v__90985[v_index_91046]; \n          }\n        }\n        v__90995[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_90978) + (-1 * v_i_90980) + (v_MWidthC_1 * v_l_id_90979))] = mult(v__90993_0, v__90984[(v_i_90980 + (64 * v_MWidthC_1 * v_wg_id_90978) + (v_MWidthC_1 * v_l_id_90979))]); \n      }\n      /* end map_seq */\n      float v_tmp_91047 = 0.0f; \n      v__90996 = v_tmp_91047; \n      /* reduce_seq */\n      for (int v_i_90981 = 0; v_i_90981 < v_MWidthC_1; v_i_90981 = (1 + v_i_90981)) {\n        v__90996 = add(v__90996, v__90995[(v_i_90981 + (64 * v_MWidthC_1 * v_wg_id_90978) + (v_MWidthC_1 * v_l_id_90979))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_90982 = 0; \n        v__91001[(v_l_id_90979 + (64 * v_wg_id_90978))] = doubleMultiplyAdd(v__90996, v__90987, v__90986[(v_l_id_90979 + (64 * v_wg_id_90978))], v__90988); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90983",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90984",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90985",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90987",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90988",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90995",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__91001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}