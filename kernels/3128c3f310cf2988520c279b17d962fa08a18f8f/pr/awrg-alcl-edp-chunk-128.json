{
  "name" : "awrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96987, const global float* restrict v__96988, const global float* restrict v__96989, const global float* restrict v__96990, float v__96991, float v__96992, global float* v__97008, global int* v__96994, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96995; \n  float v__96998; \n  /* Private Memory */\n  float v__97000_0;\n  \n  float v__97002_0;\n  \n  int v__97006_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8221 = v__96994; \n    local int v_w_id_96983; \n    if (get_local_id(0) == 0) {\n      v_w_id_96983 = atomic_inc(v_work_idx_8221); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96983 < ((v_MHeight_2)/(128)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8219; \n        v_work_idx_8219 = 0; \n        int v_l_id_96984 = atomic_inc(&(v_work_idx_8219)); \n        while((v_l_id_96984 < 128)){\n          float v_tmp_97051 = 0.0f; \n          v__96995 = v_tmp_97051; \n          /* reduce_while_seq */\n          for (int v_i_96985 = 0; v_i_96985 < v_MWidthC_1; v_i_96985 = (1 + v_i_96985)) {\n            v__97006_0 = check(v__96995, v__96987[(v_i_96985 + (128 * v_MWidthC_1 * v_w_id_96983) + (v_MWidthC_1 * v_l_id_96984))]); \n            if (v__97006_0) {\n            } else {\n              break;\n            }\n            float v_tmp_97052 = 0.0f; \n            v__96998 = v_tmp_97052; \n            int v_index_97053 = v__96987[(v_i_96985 + (128 * v_MWidthC_1 * v_w_id_96983) + (v_MWidthC_1 * v_l_id_96984))]; \n            if (v_index_97053 < 0) {\n              v__97000_0 = v__96998; \n            } else {\n              if (v_index_97053 >= v_VLength_3) {\n                v__97000_0 = v__96998; \n              } else {\n                v__97000_0 = v__96989[v_index_97053]; \n              }\n            }\n            v__97002_0 = mult(v__97000_0, v__96988[(v_i_96985 + (128 * v_MWidthC_1 * v_w_id_96983) + (v_MWidthC_1 * v_l_id_96984))]); \n            v__96995 = add(v__97002_0, v__96995); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96986 = 0; \n            v__97008[(v_l_id_96984 + (128 * v_w_id_96983))] = doubleMultiplyAdd(v__96995, v__96991, v__96990[(v_l_id_96984 + (128 * v_w_id_96983))], v__96992); \n          }\n          /* end map_seq */\n          v_l_id_96984 = atomic_inc(&(v_work_idx_8219)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96983 = atomic_inc(v_work_idx_8221); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96989",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96991",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96992",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96994",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97008",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}