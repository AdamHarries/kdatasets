{
  "name" : "swrg-alcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85185, const global float* restrict v__85186, const global float* restrict v__85187, const global float* restrict v__85188, float v__85189, float v__85190, global float* v__85203, global float* v__85197, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85193; \n  float v__85198; \n  /* Private Memory */\n  float v__85195_0;\n  \n  for (int v_wg_id_85180 = get_group_id(0); v_wg_id_85180 < ((v_MHeight_2)/(16)); v_wg_id_85180 = (v_wg_id_85180 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7113; \n      v_work_idx_7113 = 0; \n      int v_l_id_85181 = atomic_inc(&(v_work_idx_7113)); \n      while((v_l_id_85181 < 16)){\n        /* map_seq */\n        for (int v_i_85182 = 0; v_i_85182 < v_MWidthC_1; v_i_85182 = (1 + v_i_85182)) {\n          float v_tmp_85243 = 0.0f; \n          v__85193 = v_tmp_85243; \n          int v_index_85244 = v__85185[(v_i_85182 + (16 * v_MWidthC_1 * v_wg_id_85180) + (v_MWidthC_1 * v_l_id_85181))]; \n          if (v_index_85244 < 0) {\n            v__85195_0 = v__85193; \n          } else {\n            if (v_index_85244 >= v_VLength_3) {\n              v__85195_0 = v__85193; \n            } else {\n              v__85195_0 = v__85187[v_index_85244]; \n            }\n          }\n          v__85197[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_85180) + (-1 * v_i_85182) + (v_MWidthC_1 * v_l_id_85181))] = mult(v__85195_0, v__85186[(v_i_85182 + (16 * v_MWidthC_1 * v_wg_id_85180) + (v_MWidthC_1 * v_l_id_85181))]); \n        }\n        /* end map_seq */\n        float v_tmp_85245 = 0.0f; \n        v__85198 = v_tmp_85245; \n        /* reduce_seq */\n        for (int v_i_85183 = 0; v_i_85183 < v_MWidthC_1; v_i_85183 = (1 + v_i_85183)) {\n          v__85198 = add(v__85198, v__85197[(v_i_85183 + (16 * v_MWidthC_1 * v_wg_id_85180) + (v_MWidthC_1 * v_l_id_85181))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85184 = 0; \n          v__85203[(v_l_id_85181 + (16 * v_wg_id_85180))] = doubleMultiplyAdd(v__85198, v__85189, v__85188[(v_l_id_85181 + (16 * v_wg_id_85180))], v__85190); \n        }\n        /* end map_seq */\n        v_l_id_85181 = atomic_inc(&(v_work_idx_7113)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85186",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85187",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85189",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85190",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85197",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85203",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}