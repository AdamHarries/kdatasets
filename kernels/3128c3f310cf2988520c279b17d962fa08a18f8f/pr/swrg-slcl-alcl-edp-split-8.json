{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__81748, const global float* restrict v__81749, const global float* restrict v__81750, const global float* restrict v__81751, float v__81752, float v__81753, global float* v__81772, local float* v__81767, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81756; \n  float v__81758; \n  float v__81237; \n  /* Private Memory */\n  float v__81760_0;\n  \n  float v__81762_0;\n  \n  int v__81766_0;\n  \n  for (int v_wg_id_81741 = get_group_id(0); v_wg_id_81741 < v_MHeight_2; v_wg_id_81741 = (v_wg_id_81741 + get_num_groups(0))) {\n    for (int v_l_id_81742 = get_local_id(0); v_l_id_81742 < v_MWidthC_1; v_l_id_81742 = (v_l_id_81742 + get_local_size(0))) {\n      float v_tmp_81836 = 0.0f; \n      v__81756 = v_tmp_81836; \n      /* reduce_while_seq */\n      for (int v_i_81743 = 0; v_i_81743 < 8; v_i_81743 = (1 + v_i_81743)) {\n        v__81766_0 = check(v__81756, v__81748[(v_l_id_81742 + (8 * v_MWidthC_1 * v_wg_id_81741) + (v_MWidthC_1 * v_i_81743))]); \n        if (v__81766_0) {\n        } else {\n          break;\n        }\n        float v_tmp_81837 = 0.0f; \n        v__81758 = v_tmp_81837; \n        int v_index_81838 = v__81748[(v_l_id_81742 + (8 * v_MWidthC_1 * v_wg_id_81741) + (v_MWidthC_1 * v_i_81743))]; \n        if (v_index_81838 < 0) {\n          v__81760_0 = v__81758; \n        } else {\n          if (v_index_81838 >= v_VLength_3) {\n            v__81760_0 = v__81758; \n          } else {\n            v__81760_0 = v__81750[v_index_81838]; \n          }\n        }\n        v__81762_0 = mult(v__81760_0, v__81749[(v_l_id_81742 + (8 * v_MWidthC_1 * v_wg_id_81741) + (v_MWidthC_1 * v_i_81743))]); \n        v__81756 = add(v__81762_0, v__81756); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81744 = 0; \n        v__81767[v_l_id_81742] = id(v__81756); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6790; \n      v_work_idx_6790 = 0; \n      int v_l_id_81745 = atomic_inc(&(v_work_idx_6790)); \n      while((v_l_id_81745 < 1)){\n        float v_tmp_81841 = 0.0f; \n        v__81237 = v_tmp_81841; \n        /* reduce_seq */\n        for (int v_i_81746 = 0; v_i_81746 < v_MWidthC_1; v_i_81746 = (1 + v_i_81746)) {\n          v__81237 = add(v__81237, v__81767[(v_i_81746 + (v_MWidthC_1 * v_l_id_81745))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81747 = 0; \n          v__81772[v_wg_id_81741] = doubleMultiplyAdd(v__81237, v__81752, v__81751[v_wg_id_81741], v__81753); \n        }\n        /* end map_seq */\n        v_l_id_81745 = atomic_inc(&(v_work_idx_6790)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__81748",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81749",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81750",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81751",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81752",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81753",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81767",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}