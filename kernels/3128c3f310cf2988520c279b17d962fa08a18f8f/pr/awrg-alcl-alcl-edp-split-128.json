{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__97551, const global float* restrict v__97552, const global float* restrict v__97553, const global float* restrict v__97554, float v__97555, float v__97556, global float* v__97576, global int* v__97558, local float* v__97571, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97560; \n  float v__97562; \n  float v__81237; \n  /* Private Memory */\n  float v__97564_0;\n  \n  float v__97566_0;\n  \n  int v__97570_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8286 = v__97558; \n    local int v_w_id_97544; \n    if (get_local_id(0) == 0) {\n      v_w_id_97544 = atomic_inc(v_work_idx_8286); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97544 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8284; \n        v_work_idx_8284 = 0; \n        int v_l_id_97545 = atomic_inc(&(v_work_idx_8284)); \n        while((v_l_id_97545 < v_MWidthC_1)){\n          float v_tmp_97630 = 0.0f; \n          v__97560 = v_tmp_97630; \n          /* reduce_while_seq */\n          for (int v_i_97546 = 0; v_i_97546 < 128; v_i_97546 = (1 + v_i_97546)) {\n            v__97570_0 = check(v__97560, v__97551[(v_l_id_97545 + (128 * v_MWidthC_1 * v_w_id_97544) + (v_MWidthC_1 * v_i_97546))]); \n            if (v__97570_0) {\n            } else {\n              break;\n            }\n            float v_tmp_97631 = 0.0f; \n            v__97562 = v_tmp_97631; \n            int v_index_97632 = v__97551[(v_l_id_97545 + (128 * v_MWidthC_1 * v_w_id_97544) + (v_MWidthC_1 * v_i_97546))]; \n            if (v_index_97632 < 0) {\n              v__97564_0 = v__97562; \n            } else {\n              if (v_index_97632 >= v_VLength_3) {\n                v__97564_0 = v__97562; \n              } else {\n                v__97564_0 = v__97553[v_index_97632]; \n              }\n            }\n            v__97566_0 = mult(v__97564_0, v__97552[(v_l_id_97545 + (128 * v_MWidthC_1 * v_w_id_97544) + (v_MWidthC_1 * v_i_97546))]); \n            v__97560 = add(v__97566_0, v__97560); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97547 = 0; \n            v__97571[v_l_id_97545] = id(v__97560); \n          }\n          /* end map_seq */\n          v_l_id_97545 = atomic_inc(&(v_work_idx_8284)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8279; \n        v_work_idx_8279 = 0; \n        int v_l_id_97548 = atomic_inc(&(v_work_idx_8279)); \n        while((v_l_id_97548 < 1)){\n          float v_tmp_97635 = 0.0f; \n          v__81237 = v_tmp_97635; \n          /* reduce_seq */\n          for (int v_i_97549 = 0; v_i_97549 < v_MWidthC_1; v_i_97549 = (1 + v_i_97549)) {\n            v__81237 = add(v__81237, v__97571[(v_i_97549 + (v_MWidthC_1 * v_l_id_97548))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97550 = 0; \n            v__97576[v_w_id_97544] = doubleMultiplyAdd(v__81237, v__97555, v__97554[v_w_id_97544], v__97556); \n          }\n          /* end map_seq */\n          v_l_id_97548 = atomic_inc(&(v_work_idx_8279)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97544 = atomic_inc(v_work_idx_8286); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97551",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97552",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97553",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97555",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97556",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97558",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97576",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97571",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}