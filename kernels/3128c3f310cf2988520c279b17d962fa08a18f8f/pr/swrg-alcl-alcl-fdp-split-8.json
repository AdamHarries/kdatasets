{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82468, const global float* restrict v__82469, const global float* restrict v__82470, const global float* restrict v__82471, float v__82472, float v__82473, global float* v__82490, local float* v__82485, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82476; \n  float v__82478; \n  float v__81237; \n  /* Private Memory */\n  float v__82480_0;\n  \n  float v__82482_0;\n  \n  for (int v_wg_id_82461 = get_group_id(0); v_wg_id_82461 < v_MHeight_2; v_wg_id_82461 = (v_wg_id_82461 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6862; \n      v_work_idx_6862 = 0; \n      int v_l_id_82462 = atomic_inc(&(v_work_idx_6862)); \n      while((v_l_id_82462 < v_MWidthC_1)){\n        float v_tmp_82543 = 0.0f; \n        v__82476 = v_tmp_82543; \n        /* reduce_seq */\n        for (int v_i_82463 = 0; v_i_82463 < 8; v_i_82463 = (1 + v_i_82463)) {\n          float v_tmp_82544 = 0.0f; \n          v__82478 = v_tmp_82544; \n          int v_index_82545 = v__82468[(v_l_id_82462 + (8 * v_MWidthC_1 * v_wg_id_82461) + (v_MWidthC_1 * v_i_82463))]; \n          if (v_index_82545 < 0) {\n            v__82480_0 = v__82478; \n          } else {\n            if (v_index_82545 >= v_VLength_3) {\n              v__82480_0 = v__82478; \n            } else {\n              v__82480_0 = v__82470[v_index_82545]; \n            }\n          }\n          v__82482_0 = mult(v__82480_0, v__82469[(v_l_id_82462 + (8 * v_MWidthC_1 * v_wg_id_82461) + (v_MWidthC_1 * v_i_82463))]); \n          v__82476 = add(v__82482_0, v__82476); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82464 = 0; \n          v__82485[v_l_id_82462] = id(v__82476); \n        }\n        /* end map_seq */\n        v_l_id_82462 = atomic_inc(&(v_work_idx_6862)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6857; \n      v_work_idx_6857 = 0; \n      int v_l_id_82465 = atomic_inc(&(v_work_idx_6857)); \n      while((v_l_id_82465 < 1)){\n        float v_tmp_82548 = 0.0f; \n        v__81237 = v_tmp_82548; \n        /* reduce_seq */\n        for (int v_i_82466 = 0; v_i_82466 < v_MWidthC_1; v_i_82466 = (1 + v_i_82466)) {\n          v__81237 = add(v__81237, v__82485[(v_i_82466 + (v_MWidthC_1 * v_l_id_82465))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82467 = 0; \n          v__82490[v_wg_id_82461] = doubleMultiplyAdd(v__81237, v__82472, v__82471[v_wg_id_82461], v__82473); \n        }\n        /* end map_seq */\n        v_l_id_82465 = atomic_inc(&(v_work_idx_6857)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82468",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82469",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82470",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82471",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82472",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82473",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82490",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82485",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}