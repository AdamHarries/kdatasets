{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95702, const global float* restrict v__95703, const global float* restrict v__95704, const global float* restrict v__95705, float v__95706, float v__95707, global float* v__95724, global float* v__95714, local float* v__95719, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95710; \n  float v__95715; \n  float v__81237; \n  /* Private Memory */\n  float v__95712_0;\n  \n  for (int v_wg_id_95694 = get_group_id(0); v_wg_id_95694 < v_MHeight_2; v_wg_id_95694 = (v_wg_id_95694 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8100; \n      v_work_idx_8100 = 0; \n      int v_l_id_95695 = atomic_inc(&(v_work_idx_8100)); \n      while((v_l_id_95695 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_95696 = 0; v_i_95696 < 128; v_i_95696 = (1 + v_i_95696)) {\n          float v_tmp_95777 = 0.0f; \n          v__95710 = v_tmp_95777; \n          int v_index_95778 = v__95702[(v_l_id_95695 + (128 * v_MWidthC_1 * v_wg_id_95694) + (v_MWidthC_1 * v_i_95696))]; \n          if (v_index_95778 < 0) {\n            v__95712_0 = v__95710; \n          } else {\n            if (v_index_95778 >= v_VLength_3) {\n              v__95712_0 = v__95710; \n            } else {\n              v__95712_0 = v__95704[v_index_95778]; \n            }\n          }\n          v__95714[(127 + (128 * v_MWidthC_1 * v_wg_id_95694) + (-1 * v_i_95696) + (128 * v_l_id_95695))] = mult(v__95712_0, v__95703[(v_l_id_95695 + (128 * v_MWidthC_1 * v_wg_id_95694) + (v_MWidthC_1 * v_i_95696))]); \n        }\n        /* end map_seq */\n        float v_tmp_95779 = 0.0f; \n        v__95715 = v_tmp_95779; \n        /* reduce_seq */\n        for (int v_i_95697 = 0; v_i_95697 < 128; v_i_95697 = (1 + v_i_95697)) {\n          v__95715 = add(v__95715, v__95714[(v_i_95697 + (128 * v_MWidthC_1 * v_wg_id_95694) + (128 * v_l_id_95695))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95698 = 0; \n          v__95719[v_l_id_95695] = id(v__95715); \n        }\n        /* end map_seq */\n        v_l_id_95695 = atomic_inc(&(v_work_idx_8100)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8094; \n      v_work_idx_8094 = 0; \n      int v_l_id_95699 = atomic_inc(&(v_work_idx_8094)); \n      while((v_l_id_95699 < 1)){\n        float v_tmp_95782 = 0.0f; \n        v__81237 = v_tmp_95782; \n        /* reduce_seq */\n        for (int v_i_95700 = 0; v_i_95700 < v_MWidthC_1; v_i_95700 = (1 + v_i_95700)) {\n          v__81237 = add(v__81237, v__95719[(v_i_95700 + (v_MWidthC_1 * v_l_id_95699))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95701 = 0; \n          v__95724[v_wg_id_95694] = doubleMultiplyAdd(v__81237, v__95706, v__95705[v_wg_id_95694], v__95707); \n        }\n        /* end map_seq */\n        v_l_id_95699 = atomic_inc(&(v_work_idx_8094)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95702",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95703",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95704",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95705",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95706",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95707",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95714",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95724",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95719",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}