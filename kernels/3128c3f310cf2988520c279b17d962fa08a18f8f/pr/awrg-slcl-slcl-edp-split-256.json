{
  "name" : "awrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__99762, const global float* restrict v__99763, const global float* restrict v__99764, const global float* restrict v__99765, float v__99766, float v__99767, global float* v__99787, global int* v__99769, local float* v__99782, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99771; \n  float v__99773; \n  float v__81237; \n  /* Private Memory */\n  float v__99775_0;\n  \n  float v__99777_0;\n  \n  int v__99781_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8480 = v__99769; \n    local int v_w_id_99755; \n    if (get_local_id(0) == 0) {\n      v_w_id_99755 = atomic_inc(v_work_idx_8480); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99755 < v_MHeight_2)){\n      for (int v_l_id_99756 = get_local_id(0); v_l_id_99756 < v_MWidthC_1; v_l_id_99756 = (v_l_id_99756 + get_local_size(0))) {\n        float v_tmp_99853 = 0.0f; \n        v__99771 = v_tmp_99853; \n        /* reduce_while_seq */\n        for (int v_i_99757 = 0; v_i_99757 < 256; v_i_99757 = (1 + v_i_99757)) {\n          v__99781_0 = check(v__99771, v__99762[(v_l_id_99756 + (256 * v_MWidthC_1 * v_w_id_99755) + (v_MWidthC_1 * v_i_99757))]); \n          if (v__99781_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99854 = 0.0f; \n          v__99773 = v_tmp_99854; \n          int v_index_99855 = v__99762[(v_l_id_99756 + (256 * v_MWidthC_1 * v_w_id_99755) + (v_MWidthC_1 * v_i_99757))]; \n          if (v_index_99855 < 0) {\n            v__99775_0 = v__99773; \n          } else {\n            if (v_index_99855 >= v_VLength_3) {\n              v__99775_0 = v__99773; \n            } else {\n              v__99775_0 = v__99764[v_index_99855]; \n            }\n          }\n          v__99777_0 = mult(v__99775_0, v__99763[(v_l_id_99756 + (256 * v_MWidthC_1 * v_w_id_99755) + (v_MWidthC_1 * v_i_99757))]); \n          v__99771 = add(v__99777_0, v__99771); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99758 = 0; \n          v__99782[v_l_id_99756] = id(v__99771); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99759 = get_local_id(0); \n        float v_tmp_99858 = 0.0f; \n        v__81237 = v_tmp_99858; \n        /* reduce_seq */\n        for (int v_i_99760 = 0; v_i_99760 < v_MWidthC_1; v_i_99760 = (1 + v_i_99760)) {\n          v__81237 = add(v__81237, v__99782[(v_i_99760 + (v_MWidthC_1 * v_l_id_99759))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99761 = 0; \n          v__99787[v_w_id_99755] = doubleMultiplyAdd(v__81237, v__99766, v__99765[v_w_id_99755], v__99767); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99755 = atomic_inc(v_work_idx_8480); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__99762",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99763",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99764",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99765",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99766",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99767",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99769",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99787",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99782",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}