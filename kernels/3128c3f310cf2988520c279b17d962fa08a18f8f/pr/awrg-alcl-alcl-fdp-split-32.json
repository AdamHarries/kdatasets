{
  "name" : "awrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90794, const global float* restrict v__90795, const global float* restrict v__90796, const global float* restrict v__90797, float v__90798, float v__90799, global float* v__90817, global int* v__90801, local float* v__90812, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90803; \n  float v__90805; \n  float v__81237; \n  /* Private Memory */\n  float v__90807_0;\n  \n  float v__90809_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7651 = v__90801; \n    local int v_w_id_90787; \n    if (get_local_id(0) == 0) {\n      v_w_id_90787 = atomic_inc(v_work_idx_7651); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90787 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7649; \n        v_work_idx_7649 = 0; \n        int v_l_id_90788 = atomic_inc(&(v_work_idx_7649)); \n        while((v_l_id_90788 < v_MWidthC_1)){\n          float v_tmp_90868 = 0.0f; \n          v__90803 = v_tmp_90868; \n          /* reduce_seq */\n          for (int v_i_90789 = 0; v_i_90789 < 32; v_i_90789 = (1 + v_i_90789)) {\n            float v_tmp_90869 = 0.0f; \n            v__90805 = v_tmp_90869; \n            int v_index_90870 = v__90794[(v_l_id_90788 + (32 * v_MWidthC_1 * v_w_id_90787) + (v_MWidthC_1 * v_i_90789))]; \n            if (v_index_90870 < 0) {\n              v__90807_0 = v__90805; \n            } else {\n              if (v_index_90870 >= v_VLength_3) {\n                v__90807_0 = v__90805; \n              } else {\n                v__90807_0 = v__90796[v_index_90870]; \n              }\n            }\n            v__90809_0 = mult(v__90807_0, v__90795[(v_l_id_90788 + (32 * v_MWidthC_1 * v_w_id_90787) + (v_MWidthC_1 * v_i_90789))]); \n            v__90803 = add(v__90809_0, v__90803); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90790 = 0; \n            v__90812[v_l_id_90788] = id(v__90803); \n          }\n          /* end map_seq */\n          v_l_id_90788 = atomic_inc(&(v_work_idx_7649)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7644; \n        v_work_idx_7644 = 0; \n        int v_l_id_90791 = atomic_inc(&(v_work_idx_7644)); \n        while((v_l_id_90791 < 1)){\n          float v_tmp_90873 = 0.0f; \n          v__81237 = v_tmp_90873; \n          /* reduce_seq */\n          for (int v_i_90792 = 0; v_i_90792 < v_MWidthC_1; v_i_90792 = (1 + v_i_90792)) {\n            v__81237 = add(v__81237, v__90812[(v_i_90792 + (v_MWidthC_1 * v_l_id_90791))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90793 = 0; \n            v__90817[v_w_id_90787] = doubleMultiplyAdd(v__81237, v__90798, v__90797[v_w_id_90787], v__90799); \n          }\n          /* end map_seq */\n          v_l_id_90791 = atomic_inc(&(v_work_idx_7644)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90787 = atomic_inc(v_work_idx_7651); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__90794",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90795",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90796",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90797",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90798",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90799",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90801",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90817",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90812",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}