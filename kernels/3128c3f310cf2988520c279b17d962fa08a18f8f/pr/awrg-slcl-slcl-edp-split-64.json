{
  "name" : "awrg-slcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93098, const global float* restrict v__93099, const global float* restrict v__93100, const global float* restrict v__93101, float v__93102, float v__93103, global float* v__93123, global int* v__93105, local float* v__93118, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93107; \n  float v__93109; \n  float v__81237; \n  /* Private Memory */\n  float v__93111_0;\n  \n  float v__93113_0;\n  \n  int v__93117_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7856 = v__93105; \n    local int v_w_id_93091; \n    if (get_local_id(0) == 0) {\n      v_w_id_93091 = atomic_inc(v_work_idx_7856); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93091 < v_MHeight_2)){\n      for (int v_l_id_93092 = get_local_id(0); v_l_id_93092 < v_MWidthC_1; v_l_id_93092 = (v_l_id_93092 + get_local_size(0))) {\n        float v_tmp_93189 = 0.0f; \n        v__93107 = v_tmp_93189; \n        /* reduce_while_seq */\n        for (int v_i_93093 = 0; v_i_93093 < 64; v_i_93093 = (1 + v_i_93093)) {\n          v__93117_0 = check(v__93107, v__93098[(v_l_id_93092 + (64 * v_MWidthC_1 * v_w_id_93091) + (v_MWidthC_1 * v_i_93093))]); \n          if (v__93117_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93190 = 0.0f; \n          v__93109 = v_tmp_93190; \n          int v_index_93191 = v__93098[(v_l_id_93092 + (64 * v_MWidthC_1 * v_w_id_93091) + (v_MWidthC_1 * v_i_93093))]; \n          if (v_index_93191 < 0) {\n            v__93111_0 = v__93109; \n          } else {\n            if (v_index_93191 >= v_VLength_3) {\n              v__93111_0 = v__93109; \n            } else {\n              v__93111_0 = v__93100[v_index_93191]; \n            }\n          }\n          v__93113_0 = mult(v__93111_0, v__93099[(v_l_id_93092 + (64 * v_MWidthC_1 * v_w_id_93091) + (v_MWidthC_1 * v_i_93093))]); \n          v__93107 = add(v__93113_0, v__93107); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93094 = 0; \n          v__93118[v_l_id_93092] = id(v__93107); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93095 = get_local_id(0); \n        float v_tmp_93194 = 0.0f; \n        v__81237 = v_tmp_93194; \n        /* reduce_seq */\n        for (int v_i_93096 = 0; v_i_93096 < v_MWidthC_1; v_i_93096 = (1 + v_i_93096)) {\n          v__81237 = add(v__81237, v__93118[(v_i_93096 + (v_MWidthC_1 * v_l_id_93095))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93097 = 0; \n          v__93123[v_w_id_93091] = doubleMultiplyAdd(v__81237, v__93102, v__93101[v_w_id_93091], v__93103); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93091 = atomic_inc(v_work_idx_7856); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93098",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93099",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93100",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93101",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93102",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93103",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93105",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93123",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93118",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}