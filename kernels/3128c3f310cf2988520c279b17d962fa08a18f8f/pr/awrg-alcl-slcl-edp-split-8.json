{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83934, const global float* restrict v__83935, const global float* restrict v__83936, const global float* restrict v__83937, float v__83938, float v__83939, global float* v__83959, global int* v__83941, local float* v__83954, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83943; \n  float v__83945; \n  float v__81237; \n  /* Private Memory */\n  float v__83947_0;\n  \n  float v__83949_0;\n  \n  int v__83953_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7004 = v__83941; \n    local int v_w_id_83927; \n    if (get_local_id(0) == 0) {\n      v_w_id_83927 = atomic_inc(v_work_idx_7004); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83927 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7002; \n        v_work_idx_7002 = 0; \n        int v_l_id_83928 = atomic_inc(&(v_work_idx_7002)); \n        while((v_l_id_83928 < v_MWidthC_1)){\n          float v_tmp_84017 = 0.0f; \n          v__83943 = v_tmp_84017; \n          /* reduce_while_seq */\n          for (int v_i_83929 = 0; v_i_83929 < 8; v_i_83929 = (1 + v_i_83929)) {\n            v__83953_0 = check(v__83943, v__83934[(v_l_id_83928 + (8 * v_MWidthC_1 * v_w_id_83927) + (v_MWidthC_1 * v_i_83929))]); \n            if (v__83953_0) {\n            } else {\n              break;\n            }\n            float v_tmp_84018 = 0.0f; \n            v__83945 = v_tmp_84018; \n            int v_index_84019 = v__83934[(v_l_id_83928 + (8 * v_MWidthC_1 * v_w_id_83927) + (v_MWidthC_1 * v_i_83929))]; \n            if (v_index_84019 < 0) {\n              v__83947_0 = v__83945; \n            } else {\n              if (v_index_84019 >= v_VLength_3) {\n                v__83947_0 = v__83945; \n              } else {\n                v__83947_0 = v__83936[v_index_84019]; \n              }\n            }\n            v__83949_0 = mult(v__83947_0, v__83935[(v_l_id_83928 + (8 * v_MWidthC_1 * v_w_id_83927) + (v_MWidthC_1 * v_i_83929))]); \n            v__83943 = add(v__83949_0, v__83943); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83930 = 0; \n            v__83954[v_l_id_83928] = id(v__83943); \n          }\n          /* end map_seq */\n          v_l_id_83928 = atomic_inc(&(v_work_idx_7002)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83931 = get_local_id(0); \n        float v_tmp_84022 = 0.0f; \n        v__81237 = v_tmp_84022; \n        /* reduce_seq */\n        for (int v_i_83932 = 0; v_i_83932 < v_MWidthC_1; v_i_83932 = (1 + v_i_83932)) {\n          v__81237 = add(v__81237, v__83954[(v_i_83932 + (v_MWidthC_1 * v_l_id_83931))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83933 = 0; \n          v__83959[v_w_id_83927] = doubleMultiplyAdd(v__81237, v__83938, v__83937[v_w_id_83927], v__83939); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83927 = atomic_inc(v_work_idx_7004); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83934",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83935",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83936",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83937",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83938",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83939",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83941",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83959",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83954",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}