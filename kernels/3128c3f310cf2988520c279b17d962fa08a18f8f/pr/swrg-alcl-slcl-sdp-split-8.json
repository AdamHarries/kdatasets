{
  "name" : "swrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82074, const global float* restrict v__82075, const global float* restrict v__82076, const global float* restrict v__82077, float v__82078, float v__82079, global float* v__82096, global float* v__82086, local float* v__82091, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82082; \n  float v__82087; \n  float v__81237; \n  /* Private Memory */\n  float v__82084_0;\n  \n  for (int v_wg_id_82066 = get_group_id(0); v_wg_id_82066 < v_MHeight_2; v_wg_id_82066 = (v_wg_id_82066 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6823; \n      v_work_idx_6823 = 0; \n      int v_l_id_82067 = atomic_inc(&(v_work_idx_6823)); \n      while((v_l_id_82067 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_82068 = 0; v_i_82068 < 8; v_i_82068 = (1 + v_i_82068)) {\n          float v_tmp_82153 = 0.0f; \n          v__82082 = v_tmp_82153; \n          int v_index_82154 = v__82074[(v_l_id_82067 + (8 * v_MWidthC_1 * v_wg_id_82066) + (v_MWidthC_1 * v_i_82068))]; \n          if (v_index_82154 < 0) {\n            v__82084_0 = v__82082; \n          } else {\n            if (v_index_82154 >= v_VLength_3) {\n              v__82084_0 = v__82082; \n            } else {\n              v__82084_0 = v__82076[v_index_82154]; \n            }\n          }\n          v__82086[(7 + (8 * v_MWidthC_1 * v_wg_id_82066) + (-1 * v_i_82068) + (8 * v_l_id_82067))] = mult(v__82084_0, v__82075[(v_l_id_82067 + (8 * v_MWidthC_1 * v_wg_id_82066) + (v_MWidthC_1 * v_i_82068))]); \n        }\n        /* end map_seq */\n        float v_tmp_82155 = 0.0f; \n        v__82087 = v_tmp_82155; \n        /* reduce_seq */\n        for (int v_i_82069 = 0; v_i_82069 < 8; v_i_82069 = (1 + v_i_82069)) {\n          v__82087 = add(v__82087, v__82086[(v_i_82069 + (8 * v_MWidthC_1 * v_wg_id_82066) + (8 * v_l_id_82067))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82070 = 0; \n          v__82091[v_l_id_82067] = id(v__82087); \n        }\n        /* end map_seq */\n        v_l_id_82067 = atomic_inc(&(v_work_idx_6823)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_82071 = get_local_id(0); \n      float v_tmp_82158 = 0.0f; \n      v__81237 = v_tmp_82158; \n      /* reduce_seq */\n      for (int v_i_82072 = 0; v_i_82072 < v_MWidthC_1; v_i_82072 = (1 + v_i_82072)) {\n        v__81237 = add(v__81237, v__82091[(v_i_82072 + (v_MWidthC_1 * v_l_id_82071))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_82073 = 0; \n        v__82096[v_wg_id_82066] = doubleMultiplyAdd(v__81237, v__82078, v__82077[v_wg_id_82066], v__82079); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82074",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82075",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82076",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82077",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82078",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82079",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82086",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__82096",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82091",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}