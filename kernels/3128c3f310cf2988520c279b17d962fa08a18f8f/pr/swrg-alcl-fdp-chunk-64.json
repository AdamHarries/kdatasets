{
  "name" : "swrg-alcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91920, const global float* restrict v__91921, const global float* restrict v__91922, const global float* restrict v__91923, float v__91924, float v__91925, global float* v__91938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91928; \n  float v__91930; \n  /* Private Memory */\n  float v__91932_0;\n  \n  float v__91934_0;\n  \n  for (int v_wg_id_91916 = get_group_id(0); v_wg_id_91916 < ((v_MHeight_2)/(64)); v_wg_id_91916 = (v_wg_id_91916 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7743; \n      v_work_idx_7743 = 0; \n      int v_l_id_91917 = atomic_inc(&(v_work_idx_7743)); \n      while((v_l_id_91917 < 64)){\n        float v_tmp_91976 = 0.0f; \n        v__91928 = v_tmp_91976; \n        /* reduce_seq */\n        for (int v_i_91918 = 0; v_i_91918 < v_MWidthC_1; v_i_91918 = (1 + v_i_91918)) {\n          float v_tmp_91977 = 0.0f; \n          v__91930 = v_tmp_91977; \n          int v_index_91978 = v__91920[(v_i_91918 + (64 * v_MWidthC_1 * v_wg_id_91916) + (v_MWidthC_1 * v_l_id_91917))]; \n          if (v_index_91978 < 0) {\n            v__91932_0 = v__91930; \n          } else {\n            if (v_index_91978 >= v_VLength_3) {\n              v__91932_0 = v__91930; \n            } else {\n              v__91932_0 = v__91922[v_index_91978]; \n            }\n          }\n          v__91934_0 = mult(v__91932_0, v__91921[(v_i_91918 + (64 * v_MWidthC_1 * v_wg_id_91916) + (v_MWidthC_1 * v_l_id_91917))]); \n          v__91928 = add(v__91934_0, v__91928); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91919 = 0; \n          v__91938[(v_l_id_91917 + (64 * v_wg_id_91916))] = doubleMultiplyAdd(v__91928, v__91924, v__91923[(v_l_id_91917 + (64 * v_wg_id_91916))], v__91925); \n        }\n        /* end map_seq */\n        v_l_id_91917 = atomic_inc(&(v_work_idx_7743)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91920",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91921",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91922",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91923",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91924",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91925",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91938",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}