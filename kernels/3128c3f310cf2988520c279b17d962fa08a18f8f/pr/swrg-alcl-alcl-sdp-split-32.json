{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89038, const global float* restrict v__89039, const global float* restrict v__89040, const global float* restrict v__89041, float v__89042, float v__89043, global float* v__89060, global float* v__89050, local float* v__89055, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89046; \n  float v__89051; \n  float v__81237; \n  /* Private Memory */\n  float v__89048_0;\n  \n  for (int v_wg_id_89030 = get_group_id(0); v_wg_id_89030 < v_MHeight_2; v_wg_id_89030 = (v_wg_id_89030 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7476; \n      v_work_idx_7476 = 0; \n      int v_l_id_89031 = atomic_inc(&(v_work_idx_7476)); \n      while((v_l_id_89031 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_89032 = 0; v_i_89032 < 32; v_i_89032 = (1 + v_i_89032)) {\n          float v_tmp_89113 = 0.0f; \n          v__89046 = v_tmp_89113; \n          int v_index_89114 = v__89038[(v_l_id_89031 + (32 * v_MWidthC_1 * v_wg_id_89030) + (v_MWidthC_1 * v_i_89032))]; \n          if (v_index_89114 < 0) {\n            v__89048_0 = v__89046; \n          } else {\n            if (v_index_89114 >= v_VLength_3) {\n              v__89048_0 = v__89046; \n            } else {\n              v__89048_0 = v__89040[v_index_89114]; \n            }\n          }\n          v__89050[(31 + (32 * v_MWidthC_1 * v_wg_id_89030) + (-1 * v_i_89032) + (32 * v_l_id_89031))] = mult(v__89048_0, v__89039[(v_l_id_89031 + (32 * v_MWidthC_1 * v_wg_id_89030) + (v_MWidthC_1 * v_i_89032))]); \n        }\n        /* end map_seq */\n        float v_tmp_89115 = 0.0f; \n        v__89051 = v_tmp_89115; \n        /* reduce_seq */\n        for (int v_i_89033 = 0; v_i_89033 < 32; v_i_89033 = (1 + v_i_89033)) {\n          v__89051 = add(v__89051, v__89050[(v_i_89033 + (32 * v_MWidthC_1 * v_wg_id_89030) + (32 * v_l_id_89031))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89034 = 0; \n          v__89055[v_l_id_89031] = id(v__89051); \n        }\n        /* end map_seq */\n        v_l_id_89031 = atomic_inc(&(v_work_idx_7476)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7470; \n      v_work_idx_7470 = 0; \n      int v_l_id_89035 = atomic_inc(&(v_work_idx_7470)); \n      while((v_l_id_89035 < 1)){\n        float v_tmp_89118 = 0.0f; \n        v__81237 = v_tmp_89118; \n        /* reduce_seq */\n        for (int v_i_89036 = 0; v_i_89036 < v_MWidthC_1; v_i_89036 = (1 + v_i_89036)) {\n          v__81237 = add(v__81237, v__89055[(v_i_89036 + (v_MWidthC_1 * v_l_id_89035))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89037 = 0; \n          v__89060[v_wg_id_89030] = doubleMultiplyAdd(v__81237, v__89042, v__89041[v_wg_id_89030], v__89043); \n        }\n        /* end map_seq */\n        v_l_id_89035 = atomic_inc(&(v_work_idx_7470)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89038",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89039",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89040",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89041",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89042",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89043",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89050",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__89060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89055",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}