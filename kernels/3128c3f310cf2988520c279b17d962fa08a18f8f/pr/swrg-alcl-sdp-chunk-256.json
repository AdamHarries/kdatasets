{
  "name" : "swrg-alcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98513, const global float* restrict v__98514, const global float* restrict v__98515, const global float* restrict v__98516, float v__98517, float v__98518, global float* v__98531, global float* v__98525, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98521; \n  float v__98526; \n  /* Private Memory */\n  float v__98523_0;\n  \n  for (int v_wg_id_98508 = get_group_id(0); v_wg_id_98508 < ((v_MHeight_2)/(256)); v_wg_id_98508 = (v_wg_id_98508 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8361; \n      v_work_idx_8361 = 0; \n      int v_l_id_98509 = atomic_inc(&(v_work_idx_8361)); \n      while((v_l_id_98509 < 256)){\n        /* map_seq */\n        for (int v_i_98510 = 0; v_i_98510 < v_MWidthC_1; v_i_98510 = (1 + v_i_98510)) {\n          float v_tmp_98571 = 0.0f; \n          v__98521 = v_tmp_98571; \n          int v_index_98572 = v__98513[(v_i_98510 + (256 * v_MWidthC_1 * v_wg_id_98508) + (v_MWidthC_1 * v_l_id_98509))]; \n          if (v_index_98572 < 0) {\n            v__98523_0 = v__98521; \n          } else {\n            if (v_index_98572 >= v_VLength_3) {\n              v__98523_0 = v__98521; \n            } else {\n              v__98523_0 = v__98515[v_index_98572]; \n            }\n          }\n          v__98525[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_98508) + (-1 * v_i_98510) + (v_MWidthC_1 * v_l_id_98509))] = mult(v__98523_0, v__98514[(v_i_98510 + (256 * v_MWidthC_1 * v_wg_id_98508) + (v_MWidthC_1 * v_l_id_98509))]); \n        }\n        /* end map_seq */\n        float v_tmp_98573 = 0.0f; \n        v__98526 = v_tmp_98573; \n        /* reduce_seq */\n        for (int v_i_98511 = 0; v_i_98511 < v_MWidthC_1; v_i_98511 = (1 + v_i_98511)) {\n          v__98526 = add(v__98526, v__98525[(v_i_98511 + (256 * v_MWidthC_1 * v_wg_id_98508) + (v_MWidthC_1 * v_l_id_98509))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98512 = 0; \n          v__98531[(v_l_id_98509 + (256 * v_wg_id_98508))] = doubleMultiplyAdd(v__98526, v__98517, v__98516[(v_l_id_98509 + (256 * v_wg_id_98508))], v__98518); \n        }\n        /* end map_seq */\n        v_l_id_98509 = atomic_inc(&(v_work_idx_8361)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98513",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98514",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98515",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98516",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98517",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98518",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98525",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98531",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}