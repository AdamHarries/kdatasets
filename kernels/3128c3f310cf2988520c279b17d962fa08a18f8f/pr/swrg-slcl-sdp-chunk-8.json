{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80986, const global float* restrict v__80987, const global float* restrict v__80988, const global float* restrict v__80989, float v__80990, float v__80991, global float* v__81004, global float* v__80998, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80994; \n  float v__80999; \n  /* Private Memory */\n  float v__80996_0;\n  \n  for (int v_wg_id_80981 = get_group_id(0); v_wg_id_80981 < ((v_MHeight_2)/(8)); v_wg_id_80981 = (v_wg_id_80981 + get_num_groups(0))) {\n    for (int v_l_id_80982 = get_local_id(0); v_l_id_80982 < 8; v_l_id_80982 = (v_l_id_80982 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_80983 = 0; v_i_80983 < v_MWidthC_1; v_i_80983 = (1 + v_i_80983)) {\n        float v_tmp_81048 = 0.0f; \n        v__80994 = v_tmp_81048; \n        int v_index_81049 = v__80986[(v_i_80983 + (8 * v_MWidthC_1 * v_wg_id_80981) + (v_MWidthC_1 * v_l_id_80982))]; \n        if (v_index_81049 < 0) {\n          v__80996_0 = v__80994; \n        } else {\n          if (v_index_81049 >= v_VLength_3) {\n            v__80996_0 = v__80994; \n          } else {\n            v__80996_0 = v__80988[v_index_81049]; \n          }\n        }\n        v__80998[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_80981) + (-1 * v_i_80983) + (v_MWidthC_1 * v_l_id_80982))] = mult(v__80996_0, v__80987[(v_i_80983 + (8 * v_MWidthC_1 * v_wg_id_80981) + (v_MWidthC_1 * v_l_id_80982))]); \n      }\n      /* end map_seq */\n      float v_tmp_81050 = 0.0f; \n      v__80999 = v_tmp_81050; \n      /* reduce_seq */\n      for (int v_i_80984 = 0; v_i_80984 < v_MWidthC_1; v_i_80984 = (1 + v_i_80984)) {\n        v__80999 = add(v__80999, v__80998[(v_i_80984 + (8 * v_MWidthC_1 * v_wg_id_80981) + (v_MWidthC_1 * v_l_id_80982))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80985 = 0; \n        v__81004[(v_l_id_80982 + (8 * v_wg_id_80981))] = doubleMultiplyAdd(v__80999, v__80990, v__80989[(v_l_id_80982 + (8 * v_wg_id_80981))], v__80991); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80988",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80989",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80990",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80991",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80998",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}