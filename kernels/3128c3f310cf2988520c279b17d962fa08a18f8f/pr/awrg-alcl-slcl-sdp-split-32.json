{
  "name" : "awrg-alcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90404, const global float* restrict v__90405, const global float* restrict v__90406, const global float* restrict v__90407, float v__90408, float v__90409, global float* v__90427, global float* v__90417, global int* v__90411, local float* v__90422, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90413; \n  float v__90418; \n  float v__81237; \n  /* Private Memory */\n  float v__90415_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7608 = v__90411; \n    local int v_w_id_90396; \n    if (get_local_id(0) == 0) {\n      v_w_id_90396 = atomic_inc(v_work_idx_7608); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90396 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7606; \n        v_work_idx_7606 = 0; \n        int v_l_id_90397 = atomic_inc(&(v_work_idx_7606)); \n        while((v_l_id_90397 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_90398 = 0; v_i_90398 < 32; v_i_90398 = (1 + v_i_90398)) {\n            float v_tmp_90482 = 0.0f; \n            v__90413 = v_tmp_90482; \n            int v_index_90483 = v__90404[(v_l_id_90397 + (32 * v_MWidthC_1 * v_w_id_90396) + (v_MWidthC_1 * v_i_90398))]; \n            if (v_index_90483 < 0) {\n              v__90415_0 = v__90413; \n            } else {\n              if (v_index_90483 >= v_VLength_3) {\n                v__90415_0 = v__90413; \n              } else {\n                v__90415_0 = v__90406[v_index_90483]; \n              }\n            }\n            v__90417[(31 + (32 * v_MWidthC_1 * v_w_id_90396) + (-1 * v_i_90398) + (32 * v_l_id_90397))] = mult(v__90415_0, v__90405[(v_l_id_90397 + (32 * v_MWidthC_1 * v_w_id_90396) + (v_MWidthC_1 * v_i_90398))]); \n          }\n          /* end map_seq */\n          float v_tmp_90484 = 0.0f; \n          v__90418 = v_tmp_90484; \n          /* reduce_seq */\n          for (int v_i_90399 = 0; v_i_90399 < 32; v_i_90399 = (1 + v_i_90399)) {\n            v__90418 = add(v__90418, v__90417[(v_i_90399 + (32 * v_MWidthC_1 * v_w_id_90396) + (32 * v_l_id_90397))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90400 = 0; \n            v__90422[v_l_id_90397] = id(v__90418); \n          }\n          /* end map_seq */\n          v_l_id_90397 = atomic_inc(&(v_work_idx_7606)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90401 = get_local_id(0); \n        float v_tmp_90487 = 0.0f; \n        v__81237 = v_tmp_90487; \n        /* reduce_seq */\n        for (int v_i_90402 = 0; v_i_90402 < v_MWidthC_1; v_i_90402 = (1 + v_i_90402)) {\n          v__81237 = add(v__81237, v__90422[(v_i_90402 + (v_MWidthC_1 * v_l_id_90401))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90403 = 0; \n          v__90427[v_w_id_90396] = doubleMultiplyAdd(v__81237, v__90408, v__90407[v_w_id_90396], v__90409); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90396 = atomic_inc(v_work_idx_7608); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90404",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90405",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90406",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90407",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90408",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90409",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90417",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90411",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90427",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90422",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}