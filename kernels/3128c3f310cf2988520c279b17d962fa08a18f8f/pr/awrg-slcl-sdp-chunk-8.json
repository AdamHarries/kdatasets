{
  "name" : "awrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82659, const global float* restrict v__82660, const global float* restrict v__82661, const global float* restrict v__82662, float v__82663, float v__82664, global float* v__82678, global float* v__82672, global int* v__82666, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82668; \n  float v__82673; \n  /* Private Memory */\n  float v__82670_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6880 = v__82666; \n    local int v_w_id_82654; \n    if (get_local_id(0) == 0) {\n      v_w_id_82654 = atomic_inc(v_work_idx_6880); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82654 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_82655 = get_local_id(0); v_l_id_82655 < 8; v_l_id_82655 = (v_l_id_82655 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_82656 = 0; v_i_82656 < v_MWidthC_1; v_i_82656 = (1 + v_i_82656)) {\n          float v_tmp_82721 = 0.0f; \n          v__82668 = v_tmp_82721; \n          int v_index_82722 = v__82659[(v_i_82656 + (8 * v_MWidthC_1 * v_w_id_82654) + (v_MWidthC_1 * v_l_id_82655))]; \n          if (v_index_82722 < 0) {\n            v__82670_0 = v__82668; \n          } else {\n            if (v_index_82722 >= v_VLength_3) {\n              v__82670_0 = v__82668; \n            } else {\n              v__82670_0 = v__82661[v_index_82722]; \n            }\n          }\n          v__82672[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_82654) + (-1 * v_i_82656) + (v_MWidthC_1 * v_l_id_82655))] = mult(v__82670_0, v__82660[(v_i_82656 + (8 * v_MWidthC_1 * v_w_id_82654) + (v_MWidthC_1 * v_l_id_82655))]); \n        }\n        /* end map_seq */\n        float v_tmp_82723 = 0.0f; \n        v__82673 = v_tmp_82723; \n        /* reduce_seq */\n        for (int v_i_82657 = 0; v_i_82657 < v_MWidthC_1; v_i_82657 = (1 + v_i_82657)) {\n          v__82673 = add(v__82673, v__82672[(v_i_82657 + (8 * v_MWidthC_1 * v_w_id_82654) + (v_MWidthC_1 * v_l_id_82655))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82658 = 0; \n          v__82678[(v_l_id_82655 + (8 * v_w_id_82654))] = doubleMultiplyAdd(v__82673, v__82663, v__82662[(v_l_id_82655 + (8 * v_w_id_82654))], v__82664); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_82654 = atomic_inc(v_work_idx_6880); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82659",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82661",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82663",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82664",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82672",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82666",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82678",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}