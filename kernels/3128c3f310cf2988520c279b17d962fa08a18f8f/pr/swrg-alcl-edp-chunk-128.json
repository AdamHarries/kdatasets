{
  "name" : "swrg-alcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95321, const global float* restrict v__95322, const global float* restrict v__95323, const global float* restrict v__95324, float v__95325, float v__95326, global float* v__95341, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95328; \n  float v__95331; \n  /* Private Memory */\n  float v__95333_0;\n  \n  float v__95335_0;\n  \n  int v__95339_0;\n  \n  for (int v_wg_id_95317 = get_group_id(0); v_wg_id_95317 < ((v_MHeight_2)/(128)); v_wg_id_95317 = (v_wg_id_95317 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8061; \n      v_work_idx_8061 = 0; \n      int v_l_id_95318 = atomic_inc(&(v_work_idx_8061)); \n      while((v_l_id_95318 < 128)){\n        float v_tmp_95385 = 0.0f; \n        v__95328 = v_tmp_95385; \n        /* reduce_while_seq */\n        for (int v_i_95319 = 0; v_i_95319 < v_MWidthC_1; v_i_95319 = (1 + v_i_95319)) {\n          v__95339_0 = check(v__95328, v__95321[(v_i_95319 + (128 * v_MWidthC_1 * v_wg_id_95317) + (v_MWidthC_1 * v_l_id_95318))]); \n          if (v__95339_0) {\n          } else {\n            break;\n          }\n          float v_tmp_95386 = 0.0f; \n          v__95331 = v_tmp_95386; \n          int v_index_95387 = v__95321[(v_i_95319 + (128 * v_MWidthC_1 * v_wg_id_95317) + (v_MWidthC_1 * v_l_id_95318))]; \n          if (v_index_95387 < 0) {\n            v__95333_0 = v__95331; \n          } else {\n            if (v_index_95387 >= v_VLength_3) {\n              v__95333_0 = v__95331; \n            } else {\n              v__95333_0 = v__95323[v_index_95387]; \n            }\n          }\n          v__95335_0 = mult(v__95333_0, v__95322[(v_i_95319 + (128 * v_MWidthC_1 * v_wg_id_95317) + (v_MWidthC_1 * v_l_id_95318))]); \n          v__95328 = add(v__95335_0, v__95328); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95320 = 0; \n          v__95341[(v_l_id_95318 + (128 * v_wg_id_95317))] = doubleMultiplyAdd(v__95328, v__95325, v__95324[(v_l_id_95318 + (128 * v_wg_id_95317))], v__95326); \n        }\n        /* end map_seq */\n        v_l_id_95318 = atomic_inc(&(v_work_idx_8061)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95323",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95324",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95325",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95326",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95341",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}