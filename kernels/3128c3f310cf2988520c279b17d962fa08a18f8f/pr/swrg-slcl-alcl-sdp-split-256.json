{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98204, const global float* restrict v__98205, const global float* restrict v__98206, const global float* restrict v__98207, float v__98208, float v__98209, global float* v__98226, global float* v__98216, local float* v__98221, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98212; \n  float v__98217; \n  float v__81237; \n  /* Private Memory */\n  float v__98214_0;\n  \n  for (int v_wg_id_98196 = get_group_id(0); v_wg_id_98196 < v_MHeight_2; v_wg_id_98196 = (v_wg_id_98196 + get_num_groups(0))) {\n    for (int v_l_id_98197 = get_local_id(0); v_l_id_98197 < v_MWidthC_1; v_l_id_98197 = (v_l_id_98197 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_98198 = 0; v_i_98198 < 256; v_i_98198 = (1 + v_i_98198)) {\n        float v_tmp_98287 = 0.0f; \n        v__98212 = v_tmp_98287; \n        int v_index_98288 = v__98204[(v_l_id_98197 + (256 * v_MWidthC_1 * v_wg_id_98196) + (v_MWidthC_1 * v_i_98198))]; \n        if (v_index_98288 < 0) {\n          v__98214_0 = v__98212; \n        } else {\n          if (v_index_98288 >= v_VLength_3) {\n            v__98214_0 = v__98212; \n          } else {\n            v__98214_0 = v__98206[v_index_98288]; \n          }\n        }\n        v__98216[(255 + (256 * v_MWidthC_1 * v_wg_id_98196) + (-1 * v_i_98198) + (256 * v_l_id_98197))] = mult(v__98214_0, v__98205[(v_l_id_98197 + (256 * v_MWidthC_1 * v_wg_id_98196) + (v_MWidthC_1 * v_i_98198))]); \n      }\n      /* end map_seq */\n      float v_tmp_98289 = 0.0f; \n      v__98217 = v_tmp_98289; \n      /* reduce_seq */\n      for (int v_i_98199 = 0; v_i_98199 < 256; v_i_98199 = (1 + v_i_98199)) {\n        v__98217 = add(v__98217, v__98216[(v_i_98199 + (256 * v_MWidthC_1 * v_wg_id_98196) + (256 * v_l_id_98197))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98200 = 0; \n        v__98221[v_l_id_98197] = id(v__98217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8331; \n      v_work_idx_8331 = 0; \n      int v_l_id_98201 = atomic_inc(&(v_work_idx_8331)); \n      while((v_l_id_98201 < 1)){\n        float v_tmp_98292 = 0.0f; \n        v__81237 = v_tmp_98292; \n        /* reduce_seq */\n        for (int v_i_98202 = 0; v_i_98202 < v_MWidthC_1; v_i_98202 = (1 + v_i_98202)) {\n          v__81237 = add(v__81237, v__98221[(v_i_98202 + (v_MWidthC_1 * v_l_id_98201))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98203 = 0; \n          v__98226[v_wg_id_98196] = doubleMultiplyAdd(v__81237, v__98208, v__98207[v_wg_id_98196], v__98209); \n        }\n        /* end map_seq */\n        v_l_id_98201 = atomic_inc(&(v_work_idx_8331)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98204",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98205",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98206",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98207",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98208",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98209",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98216",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98221",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}