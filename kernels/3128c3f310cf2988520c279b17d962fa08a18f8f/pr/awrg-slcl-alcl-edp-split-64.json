{
  "name" : "awrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__93411, const global float* restrict v__93412, const global float* restrict v__93413, const global float* restrict v__93414, float v__93415, float v__93416, global float* v__93436, global int* v__93418, local float* v__93431, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93420; \n  float v__93422; \n  float v__81237; \n  /* Private Memory */\n  float v__93424_0;\n  \n  float v__93426_0;\n  \n  int v__93430_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7887 = v__93418; \n    local int v_w_id_93404; \n    if (get_local_id(0) == 0) {\n      v_w_id_93404 = atomic_inc(v_work_idx_7887); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93404 < v_MHeight_2)){\n      for (int v_l_id_93405 = get_local_id(0); v_l_id_93405 < v_MWidthC_1; v_l_id_93405 = (v_l_id_93405 + get_local_size(0))) {\n        float v_tmp_93498 = 0.0f; \n        v__93420 = v_tmp_93498; \n        /* reduce_while_seq */\n        for (int v_i_93406 = 0; v_i_93406 < 64; v_i_93406 = (1 + v_i_93406)) {\n          v__93430_0 = check(v__93420, v__93411[(v_l_id_93405 + (64 * v_MWidthC_1 * v_w_id_93404) + (v_MWidthC_1 * v_i_93406))]); \n          if (v__93430_0) {\n          } else {\n            break;\n          }\n          float v_tmp_93499 = 0.0f; \n          v__93422 = v_tmp_93499; \n          int v_index_93500 = v__93411[(v_l_id_93405 + (64 * v_MWidthC_1 * v_w_id_93404) + (v_MWidthC_1 * v_i_93406))]; \n          if (v_index_93500 < 0) {\n            v__93424_0 = v__93422; \n          } else {\n            if (v_index_93500 >= v_VLength_3) {\n              v__93424_0 = v__93422; \n            } else {\n              v__93424_0 = v__93413[v_index_93500]; \n            }\n          }\n          v__93426_0 = mult(v__93424_0, v__93412[(v_l_id_93405 + (64 * v_MWidthC_1 * v_w_id_93404) + (v_MWidthC_1 * v_i_93406))]); \n          v__93420 = add(v__93426_0, v__93420); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93407 = 0; \n          v__93431[v_l_id_93405] = id(v__93420); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7881; \n        v_work_idx_7881 = 0; \n        int v_l_id_93408 = atomic_inc(&(v_work_idx_7881)); \n        while((v_l_id_93408 < 1)){\n          float v_tmp_93503 = 0.0f; \n          v__81237 = v_tmp_93503; \n          /* reduce_seq */\n          for (int v_i_93409 = 0; v_i_93409 < v_MWidthC_1; v_i_93409 = (1 + v_i_93409)) {\n            v__81237 = add(v__81237, v__93431[(v_i_93409 + (v_MWidthC_1 * v_l_id_93408))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93410 = 0; \n            v__93436[v_w_id_93404] = doubleMultiplyAdd(v__81237, v__93415, v__93414[v_w_id_93404], v__93416); \n          }\n          /* end map_seq */\n          v_l_id_93408 = atomic_inc(&(v_work_idx_7881)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93404 = atomic_inc(v_work_idx_7887); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__93411",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93412",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93413",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93414",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93415",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93416",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93418",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93431",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}