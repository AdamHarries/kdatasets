{
  "name" : "swrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92070, const global float* restrict v__92071, const global float* restrict v__92072, const global float* restrict v__92073, float v__92074, float v__92075, global float* v__92092, global float* v__92082, local float* v__92087, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92078; \n  float v__92083; \n  float v__81237; \n  /* Private Memory */\n  float v__92080_0;\n  \n  for (int v_wg_id_92062 = get_group_id(0); v_wg_id_92062 < v_MHeight_2; v_wg_id_92062 = (v_wg_id_92062 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7759; \n      v_work_idx_7759 = 0; \n      int v_l_id_92063 = atomic_inc(&(v_work_idx_7759)); \n      while((v_l_id_92063 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_92064 = 0; v_i_92064 < 64; v_i_92064 = (1 + v_i_92064)) {\n          float v_tmp_92149 = 0.0f; \n          v__92078 = v_tmp_92149; \n          int v_index_92150 = v__92070[(v_l_id_92063 + (64 * v_MWidthC_1 * v_wg_id_92062) + (v_MWidthC_1 * v_i_92064))]; \n          if (v_index_92150 < 0) {\n            v__92080_0 = v__92078; \n          } else {\n            if (v_index_92150 >= v_VLength_3) {\n              v__92080_0 = v__92078; \n            } else {\n              v__92080_0 = v__92072[v_index_92150]; \n            }\n          }\n          v__92082[(63 + (64 * v_MWidthC_1 * v_wg_id_92062) + (-1 * v_i_92064) + (64 * v_l_id_92063))] = mult(v__92080_0, v__92071[(v_l_id_92063 + (64 * v_MWidthC_1 * v_wg_id_92062) + (v_MWidthC_1 * v_i_92064))]); \n        }\n        /* end map_seq */\n        float v_tmp_92151 = 0.0f; \n        v__92083 = v_tmp_92151; \n        /* reduce_seq */\n        for (int v_i_92065 = 0; v_i_92065 < 64; v_i_92065 = (1 + v_i_92065)) {\n          v__92083 = add(v__92083, v__92082[(v_i_92065 + (64 * v_MWidthC_1 * v_wg_id_92062) + (64 * v_l_id_92063))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92066 = 0; \n          v__92087[v_l_id_92063] = id(v__92083); \n        }\n        /* end map_seq */\n        v_l_id_92063 = atomic_inc(&(v_work_idx_7759)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92067 = get_local_id(0); \n      float v_tmp_92154 = 0.0f; \n      v__81237 = v_tmp_92154; \n      /* reduce_seq */\n      for (int v_i_92068 = 0; v_i_92068 < v_MWidthC_1; v_i_92068 = (1 + v_i_92068)) {\n        v__81237 = add(v__81237, v__92087[(v_i_92068 + (v_MWidthC_1 * v_l_id_92067))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92069 = 0; \n        v__92092[v_wg_id_92062] = doubleMultiplyAdd(v__81237, v__92074, v__92073[v_wg_id_92062], v__92075); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92070",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92071",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92072",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92073",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92074",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92075",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92082",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92092",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92087",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}