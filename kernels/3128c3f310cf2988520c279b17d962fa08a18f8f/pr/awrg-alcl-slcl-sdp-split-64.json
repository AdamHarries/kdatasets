{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93736, const global float* restrict v__93737, const global float* restrict v__93738, const global float* restrict v__93739, float v__93740, float v__93741, global float* v__93759, global float* v__93749, global int* v__93743, local float* v__93754, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93745; \n  float v__93750; \n  float v__81237; \n  /* Private Memory */\n  float v__93747_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7920 = v__93743; \n    local int v_w_id_93728; \n    if (get_local_id(0) == 0) {\n      v_w_id_93728 = atomic_inc(v_work_idx_7920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93728 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7918; \n        v_work_idx_7918 = 0; \n        int v_l_id_93729 = atomic_inc(&(v_work_idx_7918)); \n        while((v_l_id_93729 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_93730 = 0; v_i_93730 < 64; v_i_93730 = (1 + v_i_93730)) {\n            float v_tmp_93814 = 0.0f; \n            v__93745 = v_tmp_93814; \n            int v_index_93815 = v__93736[(v_l_id_93729 + (64 * v_MWidthC_1 * v_w_id_93728) + (v_MWidthC_1 * v_i_93730))]; \n            if (v_index_93815 < 0) {\n              v__93747_0 = v__93745; \n            } else {\n              if (v_index_93815 >= v_VLength_3) {\n                v__93747_0 = v__93745; \n              } else {\n                v__93747_0 = v__93738[v_index_93815]; \n              }\n            }\n            v__93749[(63 + (64 * v_MWidthC_1 * v_w_id_93728) + (-1 * v_i_93730) + (64 * v_l_id_93729))] = mult(v__93747_0, v__93737[(v_l_id_93729 + (64 * v_MWidthC_1 * v_w_id_93728) + (v_MWidthC_1 * v_i_93730))]); \n          }\n          /* end map_seq */\n          float v_tmp_93816 = 0.0f; \n          v__93750 = v_tmp_93816; \n          /* reduce_seq */\n          for (int v_i_93731 = 0; v_i_93731 < 64; v_i_93731 = (1 + v_i_93731)) {\n            v__93750 = add(v__93750, v__93749[(v_i_93731 + (64 * v_MWidthC_1 * v_w_id_93728) + (64 * v_l_id_93729))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93732 = 0; \n            v__93754[v_l_id_93729] = id(v__93750); \n          }\n          /* end map_seq */\n          v_l_id_93729 = atomic_inc(&(v_work_idx_7918)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_93733 = get_local_id(0); \n        float v_tmp_93819 = 0.0f; \n        v__81237 = v_tmp_93819; \n        /* reduce_seq */\n        for (int v_i_93734 = 0; v_i_93734 < v_MWidthC_1; v_i_93734 = (1 + v_i_93734)) {\n          v__81237 = add(v__81237, v__93754[(v_i_93734 + (v_MWidthC_1 * v_l_id_93733))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93735 = 0; \n          v__93759[v_w_id_93728] = doubleMultiplyAdd(v__81237, v__93740, v__93739[v_w_id_93728], v__93741); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93728 = atomic_inc(v_work_idx_7920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93736",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93737",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93738",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93739",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93740",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93741",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93749",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93743",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93759",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93754",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}