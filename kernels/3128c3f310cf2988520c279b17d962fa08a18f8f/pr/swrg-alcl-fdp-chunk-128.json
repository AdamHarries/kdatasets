{
  "name" : "swrg-alcl-fdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95252, const global float* restrict v__95253, const global float* restrict v__95254, const global float* restrict v__95255, float v__95256, float v__95257, global float* v__95270, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95260; \n  float v__95262; \n  /* Private Memory */\n  float v__95264_0;\n  \n  float v__95266_0;\n  \n  for (int v_wg_id_95248 = get_group_id(0); v_wg_id_95248 < ((v_MHeight_2)/(128)); v_wg_id_95248 = (v_wg_id_95248 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8055; \n      v_work_idx_8055 = 0; \n      int v_l_id_95249 = atomic_inc(&(v_work_idx_8055)); \n      while((v_l_id_95249 < 128)){\n        float v_tmp_95308 = 0.0f; \n        v__95260 = v_tmp_95308; \n        /* reduce_seq */\n        for (int v_i_95250 = 0; v_i_95250 < v_MWidthC_1; v_i_95250 = (1 + v_i_95250)) {\n          float v_tmp_95309 = 0.0f; \n          v__95262 = v_tmp_95309; \n          int v_index_95310 = v__95252[(v_i_95250 + (128 * v_MWidthC_1 * v_wg_id_95248) + (v_MWidthC_1 * v_l_id_95249))]; \n          if (v_index_95310 < 0) {\n            v__95264_0 = v__95262; \n          } else {\n            if (v_index_95310 >= v_VLength_3) {\n              v__95264_0 = v__95262; \n            } else {\n              v__95264_0 = v__95254[v_index_95310]; \n            }\n          }\n          v__95266_0 = mult(v__95264_0, v__95253[(v_i_95250 + (128 * v_MWidthC_1 * v_wg_id_95248) + (v_MWidthC_1 * v_l_id_95249))]); \n          v__95260 = add(v__95266_0, v__95260); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95251 = 0; \n          v__95270[(v_l_id_95249 + (128 * v_wg_id_95248))] = doubleMultiplyAdd(v__95260, v__95256, v__95255[(v_l_id_95249 + (128 * v_wg_id_95248))], v__95257); \n        }\n        /* end map_seq */\n        v_l_id_95249 = atomic_inc(&(v_work_idx_8055)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__95252",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95253",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95254",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95255",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95256",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95257",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95270",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}