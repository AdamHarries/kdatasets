{
  "name" : "swrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__85894, const global float* restrict v__85895, const global float* restrict v__85896, const global float* restrict v__85897, float v__85898, float v__85899, global float* v__85918, local float* v__85913, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85902; \n  float v__85904; \n  float v__81237; \n  /* Private Memory */\n  float v__85906_0;\n  \n  float v__85908_0;\n  \n  int v__85912_0;\n  \n  for (int v_wg_id_85887 = get_group_id(0); v_wg_id_85887 < v_MHeight_2; v_wg_id_85887 = (v_wg_id_85887 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7184; \n      v_work_idx_7184 = 0; \n      int v_l_id_85888 = atomic_inc(&(v_work_idx_7184)); \n      while((v_l_id_85888 < v_MWidthC_1)){\n        float v_tmp_85974 = 0.0f; \n        v__85902 = v_tmp_85974; \n        /* reduce_while_seq */\n        for (int v_i_85889 = 0; v_i_85889 < 16; v_i_85889 = (1 + v_i_85889)) {\n          v__85912_0 = check(v__85902, v__85894[(v_l_id_85888 + (16 * v_MWidthC_1 * v_wg_id_85887) + (v_MWidthC_1 * v_i_85889))]); \n          if (v__85912_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85975 = 0.0f; \n          v__85904 = v_tmp_85975; \n          int v_index_85976 = v__85894[(v_l_id_85888 + (16 * v_MWidthC_1 * v_wg_id_85887) + (v_MWidthC_1 * v_i_85889))]; \n          if (v_index_85976 < 0) {\n            v__85906_0 = v__85904; \n          } else {\n            if (v_index_85976 >= v_VLength_3) {\n              v__85906_0 = v__85904; \n            } else {\n              v__85906_0 = v__85896[v_index_85976]; \n            }\n          }\n          v__85908_0 = mult(v__85906_0, v__85895[(v_l_id_85888 + (16 * v_MWidthC_1 * v_wg_id_85887) + (v_MWidthC_1 * v_i_85889))]); \n          v__85902 = add(v__85908_0, v__85902); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85890 = 0; \n          v__85913[v_l_id_85888] = id(v__85902); \n        }\n        /* end map_seq */\n        v_l_id_85888 = atomic_inc(&(v_work_idx_7184)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7179; \n      v_work_idx_7179 = 0; \n      int v_l_id_85891 = atomic_inc(&(v_work_idx_7179)); \n      while((v_l_id_85891 < 1)){\n        float v_tmp_85979 = 0.0f; \n        v__81237 = v_tmp_85979; \n        /* reduce_seq */\n        for (int v_i_85892 = 0; v_i_85892 < v_MWidthC_1; v_i_85892 = (1 + v_i_85892)) {\n          v__81237 = add(v__81237, v__85913[(v_i_85892 + (v_MWidthC_1 * v_l_id_85891))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85893 = 0; \n          v__85918[v_wg_id_85887] = doubleMultiplyAdd(v__81237, v__85898, v__85897[v_wg_id_85887], v__85899); \n        }\n        /* end map_seq */\n        v_l_id_85891 = atomic_inc(&(v_work_idx_7179)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85894",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85895",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85896",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85897",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85898",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85899",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85918",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85913",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}