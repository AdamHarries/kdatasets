{
  "name" : "awrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97458, const global float* restrict v__97459, const global float* restrict v__97460, const global float* restrict v__97461, float v__97462, float v__97463, global float* v__97481, global int* v__97465, local float* v__97476, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97467; \n  float v__97469; \n  float v__81237; \n  /* Private Memory */\n  float v__97471_0;\n  \n  float v__97473_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8275 = v__97465; \n    local int v_w_id_97451; \n    if (get_local_id(0) == 0) {\n      v_w_id_97451 = atomic_inc(v_work_idx_8275); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97451 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8273; \n        v_work_idx_8273 = 0; \n        int v_l_id_97452 = atomic_inc(&(v_work_idx_8273)); \n        while((v_l_id_97452 < v_MWidthC_1)){\n          float v_tmp_97532 = 0.0f; \n          v__97467 = v_tmp_97532; \n          /* reduce_seq */\n          for (int v_i_97453 = 0; v_i_97453 < 128; v_i_97453 = (1 + v_i_97453)) {\n            float v_tmp_97533 = 0.0f; \n            v__97469 = v_tmp_97533; \n            int v_index_97534 = v__97458[(v_l_id_97452 + (128 * v_MWidthC_1 * v_w_id_97451) + (v_MWidthC_1 * v_i_97453))]; \n            if (v_index_97534 < 0) {\n              v__97471_0 = v__97469; \n            } else {\n              if (v_index_97534 >= v_VLength_3) {\n                v__97471_0 = v__97469; \n              } else {\n                v__97471_0 = v__97460[v_index_97534]; \n              }\n            }\n            v__97473_0 = mult(v__97471_0, v__97459[(v_l_id_97452 + (128 * v_MWidthC_1 * v_w_id_97451) + (v_MWidthC_1 * v_i_97453))]); \n            v__97467 = add(v__97473_0, v__97467); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97454 = 0; \n            v__97476[v_l_id_97452] = id(v__97467); \n          }\n          /* end map_seq */\n          v_l_id_97452 = atomic_inc(&(v_work_idx_8273)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8268; \n        v_work_idx_8268 = 0; \n        int v_l_id_97455 = atomic_inc(&(v_work_idx_8268)); \n        while((v_l_id_97455 < 1)){\n          float v_tmp_97537 = 0.0f; \n          v__81237 = v_tmp_97537; \n          /* reduce_seq */\n          for (int v_i_97456 = 0; v_i_97456 < v_MWidthC_1; v_i_97456 = (1 + v_i_97456)) {\n            v__81237 = add(v__81237, v__97476[(v_i_97456 + (v_MWidthC_1 * v_l_id_97455))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97457 = 0; \n            v__97481[v_w_id_97451] = doubleMultiplyAdd(v__81237, v__97462, v__97461[v_w_id_97451], v__97463); \n          }\n          /* end map_seq */\n          v_l_id_97455 = atomic_inc(&(v_work_idx_8268)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97451 = atomic_inc(v_work_idx_8275); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__97458",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97459",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97460",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97461",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97462",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97463",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97465",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97481",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97476",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}