{
  "name" : "awrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92655, const global float* restrict v__92656, const global float* restrict v__92657, const global float* restrict v__92658, float v__92659, float v__92660, global float* v__92674, global float* v__92668, global int* v__92662, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92664; \n  float v__92669; \n  /* Private Memory */\n  float v__92666_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7816 = v__92662; \n    local int v_w_id_92650; \n    if (get_local_id(0) == 0) {\n      v_w_id_92650 = atomic_inc(v_work_idx_7816); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92650 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_92651 = get_local_id(0); v_l_id_92651 < 64; v_l_id_92651 = (v_l_id_92651 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_92652 = 0; v_i_92652 < v_MWidthC_1; v_i_92652 = (1 + v_i_92652)) {\n          float v_tmp_92717 = 0.0f; \n          v__92664 = v_tmp_92717; \n          int v_index_92718 = v__92655[(v_i_92652 + (64 * v_MWidthC_1 * v_w_id_92650) + (v_MWidthC_1 * v_l_id_92651))]; \n          if (v_index_92718 < 0) {\n            v__92666_0 = v__92664; \n          } else {\n            if (v_index_92718 >= v_VLength_3) {\n              v__92666_0 = v__92664; \n            } else {\n              v__92666_0 = v__92657[v_index_92718]; \n            }\n          }\n          v__92668[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_w_id_92650) + (-1 * v_i_92652) + (v_MWidthC_1 * v_l_id_92651))] = mult(v__92666_0, v__92656[(v_i_92652 + (64 * v_MWidthC_1 * v_w_id_92650) + (v_MWidthC_1 * v_l_id_92651))]); \n        }\n        /* end map_seq */\n        float v_tmp_92719 = 0.0f; \n        v__92669 = v_tmp_92719; \n        /* reduce_seq */\n        for (int v_i_92653 = 0; v_i_92653 < v_MWidthC_1; v_i_92653 = (1 + v_i_92653)) {\n          v__92669 = add(v__92669, v__92668[(v_i_92653 + (64 * v_MWidthC_1 * v_w_id_92650) + (v_MWidthC_1 * v_l_id_92651))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92654 = 0; \n          v__92674[(v_l_id_92651 + (64 * v_w_id_92650))] = doubleMultiplyAdd(v__92669, v__92659, v__92658[(v_l_id_92651 + (64 * v_w_id_92650))], v__92660); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_92650 = atomic_inc(v_work_idx_7816); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92655",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92656",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92657",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92658",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92659",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92660",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92662",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__92674",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}