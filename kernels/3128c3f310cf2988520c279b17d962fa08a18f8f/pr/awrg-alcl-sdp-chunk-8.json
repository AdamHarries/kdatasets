{
  "name" : "awrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83519, const global float* restrict v__83520, const global float* restrict v__83521, const global float* restrict v__83522, float v__83523, float v__83524, global float* v__83538, global float* v__83532, global int* v__83526, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83528; \n  float v__83533; \n  /* Private Memory */\n  float v__83530_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6959 = v__83526; \n    local int v_w_id_83514; \n    if (get_local_id(0) == 0) {\n      v_w_id_83514 = atomic_inc(v_work_idx_6959); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83514 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6957; \n        v_work_idx_6957 = 0; \n        int v_l_id_83515 = atomic_inc(&(v_work_idx_6957)); \n        while((v_l_id_83515 < 8)){\n          /* map_seq */\n          for (int v_i_83516 = 0; v_i_83516 < v_MWidthC_1; v_i_83516 = (1 + v_i_83516)) {\n            float v_tmp_83577 = 0.0f; \n            v__83528 = v_tmp_83577; \n            int v_index_83578 = v__83519[(v_i_83516 + (8 * v_MWidthC_1 * v_w_id_83514) + (v_MWidthC_1 * v_l_id_83515))]; \n            if (v_index_83578 < 0) {\n              v__83530_0 = v__83528; \n            } else {\n              if (v_index_83578 >= v_VLength_3) {\n                v__83530_0 = v__83528; \n              } else {\n                v__83530_0 = v__83521[v_index_83578]; \n              }\n            }\n            v__83532[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_w_id_83514) + (-1 * v_i_83516) + (v_MWidthC_1 * v_l_id_83515))] = mult(v__83530_0, v__83520[(v_i_83516 + (8 * v_MWidthC_1 * v_w_id_83514) + (v_MWidthC_1 * v_l_id_83515))]); \n          }\n          /* end map_seq */\n          float v_tmp_83579 = 0.0f; \n          v__83533 = v_tmp_83579; \n          /* reduce_seq */\n          for (int v_i_83517 = 0; v_i_83517 < v_MWidthC_1; v_i_83517 = (1 + v_i_83517)) {\n            v__83533 = add(v__83533, v__83532[(v_i_83517 + (8 * v_MWidthC_1 * v_w_id_83514) + (v_MWidthC_1 * v_l_id_83515))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83518 = 0; \n            v__83538[(v_l_id_83515 + (8 * v_w_id_83514))] = doubleMultiplyAdd(v__83533, v__83523, v__83522[(v_l_id_83515 + (8 * v_w_id_83514))], v__83524); \n          }\n          /* end map_seq */\n          v_l_id_83515 = atomic_inc(&(v_work_idx_6957)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83514 = atomic_inc(v_work_idx_6959); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83519",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83521",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83522",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83523",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83524",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83526",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83538",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}