{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88517, const global float* restrict v__88518, const global float* restrict v__88519, const global float* restrict v__88520, float v__88521, float v__88522, global float* v__88535, global float* v__88529, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88525; \n  float v__88530; \n  /* Private Memory */\n  float v__88527_0;\n  \n  for (int v_wg_id_88512 = get_group_id(0); v_wg_id_88512 < ((v_MHeight_2)/(32)); v_wg_id_88512 = (v_wg_id_88512 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7425; \n      v_work_idx_7425 = 0; \n      int v_l_id_88513 = atomic_inc(&(v_work_idx_7425)); \n      while((v_l_id_88513 < 32)){\n        /* map_seq */\n        for (int v_i_88514 = 0; v_i_88514 < v_MWidthC_1; v_i_88514 = (1 + v_i_88514)) {\n          float v_tmp_88575 = 0.0f; \n          v__88525 = v_tmp_88575; \n          int v_index_88576 = v__88517[(v_i_88514 + (32 * v_MWidthC_1 * v_wg_id_88512) + (v_MWidthC_1 * v_l_id_88513))]; \n          if (v_index_88576 < 0) {\n            v__88527_0 = v__88525; \n          } else {\n            if (v_index_88576 >= v_VLength_3) {\n              v__88527_0 = v__88525; \n            } else {\n              v__88527_0 = v__88519[v_index_88576]; \n            }\n          }\n          v__88529[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_88512) + (-1 * v_i_88514) + (v_MWidthC_1 * v_l_id_88513))] = mult(v__88527_0, v__88518[(v_i_88514 + (32 * v_MWidthC_1 * v_wg_id_88512) + (v_MWidthC_1 * v_l_id_88513))]); \n        }\n        /* end map_seq */\n        float v_tmp_88577 = 0.0f; \n        v__88530 = v_tmp_88577; \n        /* reduce_seq */\n        for (int v_i_88515 = 0; v_i_88515 < v_MWidthC_1; v_i_88515 = (1 + v_i_88515)) {\n          v__88530 = add(v__88530, v__88529[(v_i_88515 + (32 * v_MWidthC_1 * v_wg_id_88512) + (v_MWidthC_1 * v_l_id_88513))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88516 = 0; \n          v__88535[(v_l_id_88513 + (32 * v_wg_id_88512))] = doubleMultiplyAdd(v__88530, v__88521, v__88520[(v_l_id_88513 + (32 * v_wg_id_88512))], v__88522); \n        }\n        /* end map_seq */\n        v_l_id_88513 = atomic_inc(&(v_work_idx_7425)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88518",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88519",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88521",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88522",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88529",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88535",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}