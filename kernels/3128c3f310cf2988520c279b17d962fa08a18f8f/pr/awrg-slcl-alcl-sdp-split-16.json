{
  "name" : "awrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86545, const global float* restrict v__86546, const global float* restrict v__86547, const global float* restrict v__86548, float v__86549, float v__86550, global float* v__86568, global float* v__86558, global int* v__86552, local float* v__86563, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86554; \n  float v__86559; \n  float v__81237; \n  /* Private Memory */\n  float v__86556_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7243 = v__86552; \n    local int v_w_id_86537; \n    if (get_local_id(0) == 0) {\n      v_w_id_86537 = atomic_inc(v_work_idx_7243); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86537 < v_MHeight_2)){\n      for (int v_l_id_86538 = get_local_id(0); v_l_id_86538 < v_MWidthC_1; v_l_id_86538 = (v_l_id_86538 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_86539 = 0; v_i_86539 < 16; v_i_86539 = (1 + v_i_86539)) {\n          float v_tmp_86627 = 0.0f; \n          v__86554 = v_tmp_86627; \n          int v_index_86628 = v__86545[(v_l_id_86538 + (16 * v_MWidthC_1 * v_w_id_86537) + (v_MWidthC_1 * v_i_86539))]; \n          if (v_index_86628 < 0) {\n            v__86556_0 = v__86554; \n          } else {\n            if (v_index_86628 >= v_VLength_3) {\n              v__86556_0 = v__86554; \n            } else {\n              v__86556_0 = v__86547[v_index_86628]; \n            }\n          }\n          v__86558[(15 + (16 * v_MWidthC_1 * v_w_id_86537) + (-1 * v_i_86539) + (16 * v_l_id_86538))] = mult(v__86556_0, v__86546[(v_l_id_86538 + (16 * v_MWidthC_1 * v_w_id_86537) + (v_MWidthC_1 * v_i_86539))]); \n        }\n        /* end map_seq */\n        float v_tmp_86629 = 0.0f; \n        v__86559 = v_tmp_86629; \n        /* reduce_seq */\n        for (int v_i_86540 = 0; v_i_86540 < 16; v_i_86540 = (1 + v_i_86540)) {\n          v__86559 = add(v__86559, v__86558[(v_i_86540 + (16 * v_MWidthC_1 * v_w_id_86537) + (16 * v_l_id_86538))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86541 = 0; \n          v__86563[v_l_id_86538] = id(v__86559); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7236; \n        v_work_idx_7236 = 0; \n        int v_l_id_86542 = atomic_inc(&(v_work_idx_7236)); \n        while((v_l_id_86542 < 1)){\n          float v_tmp_86632 = 0.0f; \n          v__81237 = v_tmp_86632; \n          /* reduce_seq */\n          for (int v_i_86543 = 0; v_i_86543 < v_MWidthC_1; v_i_86543 = (1 + v_i_86543)) {\n            v__81237 = add(v__81237, v__86563[(v_i_86543 + (v_MWidthC_1 * v_l_id_86542))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86544 = 0; \n            v__86568[v_w_id_86537] = doubleMultiplyAdd(v__81237, v__86549, v__86548[v_w_id_86537], v__86550); \n          }\n          /* end map_seq */\n          v_l_id_86542 = atomic_inc(&(v_work_idx_7236)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86537 = atomic_inc(v_work_idx_7243); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__86545",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86546",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86547",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86548",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86549",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86550",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86558",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86552",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86568",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86563",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}