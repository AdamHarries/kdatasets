{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99034, const global float* restrict v__99035, const global float* restrict v__99036, const global float* restrict v__99037, float v__99038, float v__99039, global float* v__99056, global float* v__99046, local float* v__99051, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99042; \n  float v__99047; \n  float v__81237; \n  /* Private Memory */\n  float v__99044_0;\n  \n  for (int v_wg_id_99026 = get_group_id(0); v_wg_id_99026 < v_MHeight_2; v_wg_id_99026 = (v_wg_id_99026 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8412; \n      v_work_idx_8412 = 0; \n      int v_l_id_99027 = atomic_inc(&(v_work_idx_8412)); \n      while((v_l_id_99027 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_99028 = 0; v_i_99028 < 256; v_i_99028 = (1 + v_i_99028)) {\n          float v_tmp_99109 = 0.0f; \n          v__99042 = v_tmp_99109; \n          int v_index_99110 = v__99034[(v_l_id_99027 + (256 * v_MWidthC_1 * v_wg_id_99026) + (v_MWidthC_1 * v_i_99028))]; \n          if (v_index_99110 < 0) {\n            v__99044_0 = v__99042; \n          } else {\n            if (v_index_99110 >= v_VLength_3) {\n              v__99044_0 = v__99042; \n            } else {\n              v__99044_0 = v__99036[v_index_99110]; \n            }\n          }\n          v__99046[(255 + (256 * v_MWidthC_1 * v_wg_id_99026) + (-1 * v_i_99028) + (256 * v_l_id_99027))] = mult(v__99044_0, v__99035[(v_l_id_99027 + (256 * v_MWidthC_1 * v_wg_id_99026) + (v_MWidthC_1 * v_i_99028))]); \n        }\n        /* end map_seq */\n        float v_tmp_99111 = 0.0f; \n        v__99047 = v_tmp_99111; \n        /* reduce_seq */\n        for (int v_i_99029 = 0; v_i_99029 < 256; v_i_99029 = (1 + v_i_99029)) {\n          v__99047 = add(v__99047, v__99046[(v_i_99029 + (256 * v_MWidthC_1 * v_wg_id_99026) + (256 * v_l_id_99027))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99030 = 0; \n          v__99051[v_l_id_99027] = id(v__99047); \n        }\n        /* end map_seq */\n        v_l_id_99027 = atomic_inc(&(v_work_idx_8412)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8406; \n      v_work_idx_8406 = 0; \n      int v_l_id_99031 = atomic_inc(&(v_work_idx_8406)); \n      while((v_l_id_99031 < 1)){\n        float v_tmp_99114 = 0.0f; \n        v__81237 = v_tmp_99114; \n        /* reduce_seq */\n        for (int v_i_99032 = 0; v_i_99032 < v_MWidthC_1; v_i_99032 = (1 + v_i_99032)) {\n          v__81237 = add(v__81237, v__99051[(v_i_99032 + (v_MWidthC_1 * v_l_id_99031))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99033 = 0; \n          v__99056[v_wg_id_99026] = doubleMultiplyAdd(v__81237, v__99038, v__99037[v_wg_id_99026], v__99039); \n        }\n        /* end map_seq */\n        v_l_id_99031 = atomic_inc(&(v_work_idx_8406)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99034",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99035",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99036",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99038",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99039",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99046",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__99056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99051",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}