{
  "name" : "awrg-slcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99657, const global float* restrict v__99658, const global float* restrict v__99659, const global float* restrict v__99660, float v__99661, float v__99662, global float* v__99680, global int* v__99664, local float* v__99675, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99666; \n  float v__99668; \n  float v__81237; \n  /* Private Memory */\n  float v__99670_0;\n  \n  float v__99672_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8471 = v__99664; \n    local int v_w_id_99650; \n    if (get_local_id(0) == 0) {\n      v_w_id_99650 = atomic_inc(v_work_idx_8471); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99650 < v_MHeight_2)){\n      for (int v_l_id_99651 = get_local_id(0); v_l_id_99651 < v_MWidthC_1; v_l_id_99651 = (v_l_id_99651 + get_local_size(0))) {\n        float v_tmp_99743 = 0.0f; \n        v__99666 = v_tmp_99743; \n        /* reduce_seq */\n        for (int v_i_99652 = 0; v_i_99652 < 256; v_i_99652 = (1 + v_i_99652)) {\n          float v_tmp_99744 = 0.0f; \n          v__99668 = v_tmp_99744; \n          int v_index_99745 = v__99657[(v_l_id_99651 + (256 * v_MWidthC_1 * v_w_id_99650) + (v_MWidthC_1 * v_i_99652))]; \n          if (v_index_99745 < 0) {\n            v__99670_0 = v__99668; \n          } else {\n            if (v_index_99745 >= v_VLength_3) {\n              v__99670_0 = v__99668; \n            } else {\n              v__99670_0 = v__99659[v_index_99745]; \n            }\n          }\n          v__99672_0 = mult(v__99670_0, v__99658[(v_l_id_99651 + (256 * v_MWidthC_1 * v_w_id_99650) + (v_MWidthC_1 * v_i_99652))]); \n          v__99666 = add(v__99672_0, v__99666); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99653 = 0; \n          v__99675[v_l_id_99651] = id(v__99666); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99654 = get_local_id(0); \n        float v_tmp_99748 = 0.0f; \n        v__81237 = v_tmp_99748; \n        /* reduce_seq */\n        for (int v_i_99655 = 0; v_i_99655 < v_MWidthC_1; v_i_99655 = (1 + v_i_99655)) {\n          v__81237 = add(v__81237, v__99675[(v_i_99655 + (v_MWidthC_1 * v_l_id_99654))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99656 = 0; \n          v__99680[v_w_id_99650] = doubleMultiplyAdd(v__81237, v__99661, v__99660[v_w_id_99650], v__99662); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99650 = atomic_inc(v_work_idx_8471); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99657",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99658",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99659",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99661",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99662",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99664",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99680",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99675",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}