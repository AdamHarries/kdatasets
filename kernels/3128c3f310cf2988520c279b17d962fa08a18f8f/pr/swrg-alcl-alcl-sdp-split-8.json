{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82374, const global float* restrict v__82375, const global float* restrict v__82376, const global float* restrict v__82377, float v__82378, float v__82379, global float* v__82396, global float* v__82386, local float* v__82391, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82382; \n  float v__82387; \n  float v__81237; \n  /* Private Memory */\n  float v__82384_0;\n  \n  for (int v_wg_id_82366 = get_group_id(0); v_wg_id_82366 < v_MHeight_2; v_wg_id_82366 = (v_wg_id_82366 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6852; \n      v_work_idx_6852 = 0; \n      int v_l_id_82367 = atomic_inc(&(v_work_idx_6852)); \n      while((v_l_id_82367 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_82368 = 0; v_i_82368 < 8; v_i_82368 = (1 + v_i_82368)) {\n          float v_tmp_82449 = 0.0f; \n          v__82382 = v_tmp_82449; \n          int v_index_82450 = v__82374[(v_l_id_82367 + (8 * v_MWidthC_1 * v_wg_id_82366) + (v_MWidthC_1 * v_i_82368))]; \n          if (v_index_82450 < 0) {\n            v__82384_0 = v__82382; \n          } else {\n            if (v_index_82450 >= v_VLength_3) {\n              v__82384_0 = v__82382; \n            } else {\n              v__82384_0 = v__82376[v_index_82450]; \n            }\n          }\n          v__82386[(7 + (8 * v_MWidthC_1 * v_wg_id_82366) + (-1 * v_i_82368) + (8 * v_l_id_82367))] = mult(v__82384_0, v__82375[(v_l_id_82367 + (8 * v_MWidthC_1 * v_wg_id_82366) + (v_MWidthC_1 * v_i_82368))]); \n        }\n        /* end map_seq */\n        float v_tmp_82451 = 0.0f; \n        v__82387 = v_tmp_82451; \n        /* reduce_seq */\n        for (int v_i_82369 = 0; v_i_82369 < 8; v_i_82369 = (1 + v_i_82369)) {\n          v__82387 = add(v__82387, v__82386[(v_i_82369 + (8 * v_MWidthC_1 * v_wg_id_82366) + (8 * v_l_id_82367))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82370 = 0; \n          v__82391[v_l_id_82367] = id(v__82387); \n        }\n        /* end map_seq */\n        v_l_id_82367 = atomic_inc(&(v_work_idx_6852)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6846; \n      v_work_idx_6846 = 0; \n      int v_l_id_82371 = atomic_inc(&(v_work_idx_6846)); \n      while((v_l_id_82371 < 1)){\n        float v_tmp_82454 = 0.0f; \n        v__81237 = v_tmp_82454; \n        /* reduce_seq */\n        for (int v_i_82372 = 0; v_i_82372 < v_MWidthC_1; v_i_82372 = (1 + v_i_82372)) {\n          v__81237 = add(v__81237, v__82391[(v_i_82372 + (v_MWidthC_1 * v_l_id_82371))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82373 = 0; \n          v__82396[v_wg_id_82366] = doubleMultiplyAdd(v__81237, v__82378, v__82377[v_wg_id_82366], v__82379); \n        }\n        /* end map_seq */\n        v_l_id_82371 = atomic_inc(&(v_work_idx_6846)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82374",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82375",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82376",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82377",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82378",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82379",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82386",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__82396",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82391",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}