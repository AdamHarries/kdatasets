{
  "name" : "awrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100400, const global float* restrict v__100401, const global float* restrict v__100402, const global float* restrict v__100403, float v__100404, float v__100405, global float* v__100423, global float* v__100413, global int* v__100407, local float* v__100418, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100409; \n  float v__100414; \n  float v__81237; \n  /* Private Memory */\n  float v__100411_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8544 = v__100407; \n    local int v_w_id_100392; \n    if (get_local_id(0) == 0) {\n      v_w_id_100392 = atomic_inc(v_work_idx_8544); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100392 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8542; \n        v_work_idx_8542 = 0; \n        int v_l_id_100393 = atomic_inc(&(v_work_idx_8542)); \n        while((v_l_id_100393 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100394 = 0; v_i_100394 < 256; v_i_100394 = (1 + v_i_100394)) {\n            float v_tmp_100478 = 0.0f; \n            v__100409 = v_tmp_100478; \n            int v_index_100479 = v__100400[(v_l_id_100393 + (256 * v_MWidthC_1 * v_w_id_100392) + (v_MWidthC_1 * v_i_100394))]; \n            if (v_index_100479 < 0) {\n              v__100411_0 = v__100409; \n            } else {\n              if (v_index_100479 >= v_VLength_3) {\n                v__100411_0 = v__100409; \n              } else {\n                v__100411_0 = v__100402[v_index_100479]; \n              }\n            }\n            v__100413[(255 + (256 * v_MWidthC_1 * v_w_id_100392) + (-1 * v_i_100394) + (256 * v_l_id_100393))] = mult(v__100411_0, v__100401[(v_l_id_100393 + (256 * v_MWidthC_1 * v_w_id_100392) + (v_MWidthC_1 * v_i_100394))]); \n          }\n          /* end map_seq */\n          float v_tmp_100480 = 0.0f; \n          v__100414 = v_tmp_100480; \n          /* reduce_seq */\n          for (int v_i_100395 = 0; v_i_100395 < 256; v_i_100395 = (1 + v_i_100395)) {\n            v__100414 = add(v__100414, v__100413[(v_i_100395 + (256 * v_MWidthC_1 * v_w_id_100392) + (256 * v_l_id_100393))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100396 = 0; \n            v__100418[v_l_id_100393] = id(v__100414); \n          }\n          /* end map_seq */\n          v_l_id_100393 = atomic_inc(&(v_work_idx_8542)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100397 = get_local_id(0); \n        float v_tmp_100483 = 0.0f; \n        v__81237 = v_tmp_100483; \n        /* reduce_seq */\n        for (int v_i_100398 = 0; v_i_100398 < v_MWidthC_1; v_i_100398 = (1 + v_i_100398)) {\n          v__81237 = add(v__81237, v__100418[(v_i_100398 + (v_MWidthC_1 * v_l_id_100397))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100399 = 0; \n          v__100423[v_w_id_100392] = doubleMultiplyAdd(v__81237, v__100404, v__100403[v_w_id_100392], v__100405); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100392 = atomic_inc(v_work_idx_8544); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100400",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100401",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100402",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100403",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100404",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100405",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100413",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100407",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100423",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100418",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}