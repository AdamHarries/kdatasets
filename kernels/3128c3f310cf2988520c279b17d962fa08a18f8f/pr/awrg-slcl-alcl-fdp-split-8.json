{
  "name" : "awrg-slcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83314, const global float* restrict v__83315, const global float* restrict v__83316, const global float* restrict v__83317, float v__83318, float v__83319, global float* v__83337, global int* v__83321, local float* v__83332, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83323; \n  float v__83325; \n  float v__81237; \n  /* Private Memory */\n  float v__83327_0;\n  \n  float v__83329_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6941 = v__83321; \n    local int v_w_id_83307; \n    if (get_local_id(0) == 0) {\n      v_w_id_83307 = atomic_inc(v_work_idx_6941); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83307 < v_MHeight_2)){\n      for (int v_l_id_83308 = get_local_id(0); v_l_id_83308 < v_MWidthC_1; v_l_id_83308 = (v_l_id_83308 + get_local_size(0))) {\n        float v_tmp_83396 = 0.0f; \n        v__83323 = v_tmp_83396; \n        /* reduce_seq */\n        for (int v_i_83309 = 0; v_i_83309 < 8; v_i_83309 = (1 + v_i_83309)) {\n          float v_tmp_83397 = 0.0f; \n          v__83325 = v_tmp_83397; \n          int v_index_83398 = v__83314[(v_l_id_83308 + (8 * v_MWidthC_1 * v_w_id_83307) + (v_MWidthC_1 * v_i_83309))]; \n          if (v_index_83398 < 0) {\n            v__83327_0 = v__83325; \n          } else {\n            if (v_index_83398 >= v_VLength_3) {\n              v__83327_0 = v__83325; \n            } else {\n              v__83327_0 = v__83316[v_index_83398]; \n            }\n          }\n          v__83329_0 = mult(v__83327_0, v__83315[(v_l_id_83308 + (8 * v_MWidthC_1 * v_w_id_83307) + (v_MWidthC_1 * v_i_83309))]); \n          v__83323 = add(v__83329_0, v__83323); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83310 = 0; \n          v__83332[v_l_id_83308] = id(v__83323); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6935; \n        v_work_idx_6935 = 0; \n        int v_l_id_83311 = atomic_inc(&(v_work_idx_6935)); \n        while((v_l_id_83311 < 1)){\n          float v_tmp_83401 = 0.0f; \n          v__81237 = v_tmp_83401; \n          /* reduce_seq */\n          for (int v_i_83312 = 0; v_i_83312 < v_MWidthC_1; v_i_83312 = (1 + v_i_83312)) {\n            v__81237 = add(v__81237, v__83332[(v_i_83312 + (v_MWidthC_1 * v_l_id_83311))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83313 = 0; \n            v__83337[v_w_id_83307] = doubleMultiplyAdd(v__81237, v__83318, v__83317[v_w_id_83307], v__83319); \n          }\n          /* end map_seq */\n          v_l_id_83311 = atomic_inc(&(v_work_idx_6935)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83307 = atomic_inc(v_work_idx_6941); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83314",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83315",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83316",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83318",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83319",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83321",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83337",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83332",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}