{
  "name" : "awrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102799, const global float* restrict v__102800, const global float* restrict v__102801, const global float* restrict v__102802, float v__102803, float v__102804, global float* v__102820, global int* v__102806, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102807; \n  float v__102810; \n  /* Private Memory */\n  float v__102812_0;\n  \n  float v__102814_0;\n  \n  int v__102818_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8764 = v__102806; \n    local int v_w_id_102795; \n    if (get_local_id(0) == 0) {\n      v_w_id_102795 = atomic_inc(v_work_idx_8764); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102795 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_102796 = get_local_id(0); v_l_id_102796 < 512; v_l_id_102796 = (v_l_id_102796 + get_local_size(0))) {\n        float v_tmp_102867 = 0.0f; \n        v__102807 = v_tmp_102867; \n        /* reduce_while_seq */\n        for (int v_i_102797 = 0; v_i_102797 < v_MWidthC_1; v_i_102797 = (1 + v_i_102797)) {\n          v__102818_0 = check(v__102807, v__102799[(v_i_102797 + (512 * v_MWidthC_1 * v_w_id_102795) + (v_MWidthC_1 * v_l_id_102796))]); \n          if (v__102818_0) {\n          } else {\n            break;\n          }\n          float v_tmp_102868 = 0.0f; \n          v__102810 = v_tmp_102868; \n          int v_index_102869 = v__102799[(v_i_102797 + (512 * v_MWidthC_1 * v_w_id_102795) + (v_MWidthC_1 * v_l_id_102796))]; \n          if (v_index_102869 < 0) {\n            v__102812_0 = v__102810; \n          } else {\n            if (v_index_102869 >= v_VLength_3) {\n              v__102812_0 = v__102810; \n            } else {\n              v__102812_0 = v__102801[v_index_102869]; \n            }\n          }\n          v__102814_0 = mult(v__102812_0, v__102800[(v_i_102797 + (512 * v_MWidthC_1 * v_w_id_102795) + (v_MWidthC_1 * v_l_id_102796))]); \n          v__102807 = add(v__102814_0, v__102807); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102798 = 0; \n          v__102820[(v_l_id_102796 + (512 * v_w_id_102795))] = doubleMultiplyAdd(v__102807, v__102803, v__102802[(v_l_id_102796 + (512 * v_w_id_102795))], v__102804); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_102795 = atomic_inc(v_work_idx_8764); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__102799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102800",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102801",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102802",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102803",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102804",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102806",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__102820",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}