{
  "name" : "awrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82892, const global float* restrict v__82893, const global float* restrict v__82894, const global float* restrict v__82895, float v__82896, float v__82897, global float* v__82915, global float* v__82905, global int* v__82899, local float* v__82910, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82901; \n  float v__82906; \n  float v__81237; \n  /* Private Memory */\n  float v__82903_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6902 = v__82899; \n    local int v_w_id_82884; \n    if (get_local_id(0) == 0) {\n      v_w_id_82884 = atomic_inc(v_work_idx_6902); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82884 < v_MHeight_2)){\n      for (int v_l_id_82885 = get_local_id(0); v_l_id_82885 < v_MWidthC_1; v_l_id_82885 = (v_l_id_82885 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_82886 = 0; v_i_82886 < 8; v_i_82886 = (1 + v_i_82886)) {\n          float v_tmp_82978 = 0.0f; \n          v__82901 = v_tmp_82978; \n          int v_index_82979 = v__82892[(v_l_id_82885 + (8 * v_MWidthC_1 * v_w_id_82884) + (v_MWidthC_1 * v_i_82886))]; \n          if (v_index_82979 < 0) {\n            v__82903_0 = v__82901; \n          } else {\n            if (v_index_82979 >= v_VLength_3) {\n              v__82903_0 = v__82901; \n            } else {\n              v__82903_0 = v__82894[v_index_82979]; \n            }\n          }\n          v__82905[(7 + (8 * v_MWidthC_1 * v_w_id_82884) + (-1 * v_i_82886) + (8 * v_l_id_82885))] = mult(v__82903_0, v__82893[(v_l_id_82885 + (8 * v_MWidthC_1 * v_w_id_82884) + (v_MWidthC_1 * v_i_82886))]); \n        }\n        /* end map_seq */\n        float v_tmp_82980 = 0.0f; \n        v__82906 = v_tmp_82980; \n        /* reduce_seq */\n        for (int v_i_82887 = 0; v_i_82887 < 8; v_i_82887 = (1 + v_i_82887)) {\n          v__82906 = add(v__82906, v__82905[(v_i_82887 + (8 * v_MWidthC_1 * v_w_id_82884) + (8 * v_l_id_82885))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82888 = 0; \n          v__82910[v_l_id_82885] = id(v__82906); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_82889 = get_local_id(0); \n        float v_tmp_82983 = 0.0f; \n        v__81237 = v_tmp_82983; \n        /* reduce_seq */\n        for (int v_i_82890 = 0; v_i_82890 < v_MWidthC_1; v_i_82890 = (1 + v_i_82890)) {\n          v__81237 = add(v__81237, v__82910[(v_i_82890 + (v_MWidthC_1 * v_l_id_82889))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82891 = 0; \n          v__82915[v_w_id_82884] = doubleMultiplyAdd(v__81237, v__82896, v__82895[v_w_id_82884], v__82897); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82884 = atomic_inc(v_work_idx_6902); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__82892",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82893",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82894",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82895",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82896",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82897",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82905",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82899",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82915",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82910",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}