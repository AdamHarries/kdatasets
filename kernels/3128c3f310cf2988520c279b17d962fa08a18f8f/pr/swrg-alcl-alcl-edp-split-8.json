{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82562, const global float* restrict v__82563, const global float* restrict v__82564, const global float* restrict v__82565, float v__82566, float v__82567, global float* v__82586, local float* v__82581, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82570; \n  float v__82572; \n  float v__81237; \n  /* Private Memory */\n  float v__82574_0;\n  \n  float v__82576_0;\n  \n  int v__82580_0;\n  \n  for (int v_wg_id_82555 = get_group_id(0); v_wg_id_82555 < v_MHeight_2; v_wg_id_82555 = (v_wg_id_82555 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6872; \n      v_work_idx_6872 = 0; \n      int v_l_id_82556 = atomic_inc(&(v_work_idx_6872)); \n      while((v_l_id_82556 < v_MWidthC_1)){\n        float v_tmp_82642 = 0.0f; \n        v__82570 = v_tmp_82642; \n        /* reduce_while_seq */\n        for (int v_i_82557 = 0; v_i_82557 < 8; v_i_82557 = (1 + v_i_82557)) {\n          v__82580_0 = check(v__82570, v__82562[(v_l_id_82556 + (8 * v_MWidthC_1 * v_wg_id_82555) + (v_MWidthC_1 * v_i_82557))]); \n          if (v__82580_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82643 = 0.0f; \n          v__82572 = v_tmp_82643; \n          int v_index_82644 = v__82562[(v_l_id_82556 + (8 * v_MWidthC_1 * v_wg_id_82555) + (v_MWidthC_1 * v_i_82557))]; \n          if (v_index_82644 < 0) {\n            v__82574_0 = v__82572; \n          } else {\n            if (v_index_82644 >= v_VLength_3) {\n              v__82574_0 = v__82572; \n            } else {\n              v__82574_0 = v__82564[v_index_82644]; \n            }\n          }\n          v__82576_0 = mult(v__82574_0, v__82563[(v_l_id_82556 + (8 * v_MWidthC_1 * v_wg_id_82555) + (v_MWidthC_1 * v_i_82557))]); \n          v__82570 = add(v__82576_0, v__82570); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82558 = 0; \n          v__82581[v_l_id_82556] = id(v__82570); \n        }\n        /* end map_seq */\n        v_l_id_82556 = atomic_inc(&(v_work_idx_6872)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_6867; \n      v_work_idx_6867 = 0; \n      int v_l_id_82559 = atomic_inc(&(v_work_idx_6867)); \n      while((v_l_id_82559 < 1)){\n        float v_tmp_82647 = 0.0f; \n        v__81237 = v_tmp_82647; \n        /* reduce_seq */\n        for (int v_i_82560 = 0; v_i_82560 < v_MWidthC_1; v_i_82560 = (1 + v_i_82560)) {\n          v__81237 = add(v__81237, v__82581[(v_i_82560 + (v_MWidthC_1 * v_l_id_82559))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82561 = 0; \n          v__82586[v_wg_id_82555] = doubleMultiplyAdd(v__81237, v__82566, v__82565[v_wg_id_82555], v__82567); \n        }\n        /* end map_seq */\n        v_l_id_82559 = atomic_inc(&(v_work_idx_6867)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82562",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82563",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82564",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82565",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82566",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82567",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82586",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82581",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}