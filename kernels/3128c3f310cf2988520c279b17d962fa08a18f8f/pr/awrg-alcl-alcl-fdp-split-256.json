{
  "name" : "awrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100790, const global float* restrict v__100791, const global float* restrict v__100792, const global float* restrict v__100793, float v__100794, float v__100795, global float* v__100813, global int* v__100797, local float* v__100808, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100799; \n  float v__100801; \n  float v__81237; \n  /* Private Memory */\n  float v__100803_0;\n  \n  float v__100805_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8587 = v__100797; \n    local int v_w_id_100783; \n    if (get_local_id(0) == 0) {\n      v_w_id_100783 = atomic_inc(v_work_idx_8587); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100783 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8585; \n        v_work_idx_8585 = 0; \n        int v_l_id_100784 = atomic_inc(&(v_work_idx_8585)); \n        while((v_l_id_100784 < v_MWidthC_1)){\n          float v_tmp_100864 = 0.0f; \n          v__100799 = v_tmp_100864; \n          /* reduce_seq */\n          for (int v_i_100785 = 0; v_i_100785 < 256; v_i_100785 = (1 + v_i_100785)) {\n            float v_tmp_100865 = 0.0f; \n            v__100801 = v_tmp_100865; \n            int v_index_100866 = v__100790[(v_l_id_100784 + (256 * v_MWidthC_1 * v_w_id_100783) + (v_MWidthC_1 * v_i_100785))]; \n            if (v_index_100866 < 0) {\n              v__100803_0 = v__100801; \n            } else {\n              if (v_index_100866 >= v_VLength_3) {\n                v__100803_0 = v__100801; \n              } else {\n                v__100803_0 = v__100792[v_index_100866]; \n              }\n            }\n            v__100805_0 = mult(v__100803_0, v__100791[(v_l_id_100784 + (256 * v_MWidthC_1 * v_w_id_100783) + (v_MWidthC_1 * v_i_100785))]); \n            v__100799 = add(v__100805_0, v__100799); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100786 = 0; \n            v__100808[v_l_id_100784] = id(v__100799); \n          }\n          /* end map_seq */\n          v_l_id_100784 = atomic_inc(&(v_work_idx_8585)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8580; \n        v_work_idx_8580 = 0; \n        int v_l_id_100787 = atomic_inc(&(v_work_idx_8580)); \n        while((v_l_id_100787 < 1)){\n          float v_tmp_100869 = 0.0f; \n          v__81237 = v_tmp_100869; \n          /* reduce_seq */\n          for (int v_i_100788 = 0; v_i_100788 < v_MWidthC_1; v_i_100788 = (1 + v_i_100788)) {\n            v__81237 = add(v__81237, v__100808[(v_i_100788 + (v_MWidthC_1 * v_l_id_100787))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100789 = 0; \n            v__100813[v_w_id_100783] = doubleMultiplyAdd(v__81237, v__100794, v__100793[v_w_id_100783], v__100795); \n          }\n          /* end map_seq */\n          v_l_id_100787 = atomic_inc(&(v_work_idx_8580)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100783 = atomic_inc(v_work_idx_8587); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100790",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100791",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100792",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100793",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100794",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100795",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100797",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100813",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100808",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}