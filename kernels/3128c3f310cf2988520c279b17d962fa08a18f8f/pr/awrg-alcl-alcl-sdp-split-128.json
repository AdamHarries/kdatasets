{
  "name" : "awrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97365, const global float* restrict v__97366, const global float* restrict v__97367, const global float* restrict v__97368, float v__97369, float v__97370, global float* v__97388, global float* v__97378, global int* v__97372, local float* v__97383, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97374; \n  float v__97379; \n  float v__81237; \n  /* Private Memory */\n  float v__97376_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8264 = v__97372; \n    local int v_w_id_97357; \n    if (get_local_id(0) == 0) {\n      v_w_id_97357 = atomic_inc(v_work_idx_8264); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97357 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8262; \n        v_work_idx_8262 = 0; \n        int v_l_id_97358 = atomic_inc(&(v_work_idx_8262)); \n        while((v_l_id_97358 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_97359 = 0; v_i_97359 < 128; v_i_97359 = (1 + v_i_97359)) {\n            float v_tmp_97439 = 0.0f; \n            v__97374 = v_tmp_97439; \n            int v_index_97440 = v__97365[(v_l_id_97358 + (128 * v_MWidthC_1 * v_w_id_97357) + (v_MWidthC_1 * v_i_97359))]; \n            if (v_index_97440 < 0) {\n              v__97376_0 = v__97374; \n            } else {\n              if (v_index_97440 >= v_VLength_3) {\n                v__97376_0 = v__97374; \n              } else {\n                v__97376_0 = v__97367[v_index_97440]; \n              }\n            }\n            v__97378[(127 + (128 * v_MWidthC_1 * v_w_id_97357) + (-1 * v_i_97359) + (128 * v_l_id_97358))] = mult(v__97376_0, v__97366[(v_l_id_97358 + (128 * v_MWidthC_1 * v_w_id_97357) + (v_MWidthC_1 * v_i_97359))]); \n          }\n          /* end map_seq */\n          float v_tmp_97441 = 0.0f; \n          v__97379 = v_tmp_97441; \n          /* reduce_seq */\n          for (int v_i_97360 = 0; v_i_97360 < 128; v_i_97360 = (1 + v_i_97360)) {\n            v__97379 = add(v__97379, v__97378[(v_i_97360 + (128 * v_MWidthC_1 * v_w_id_97357) + (128 * v_l_id_97358))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97361 = 0; \n            v__97383[v_l_id_97358] = id(v__97379); \n          }\n          /* end map_seq */\n          v_l_id_97358 = atomic_inc(&(v_work_idx_8262)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8256; \n        v_work_idx_8256 = 0; \n        int v_l_id_97362 = atomic_inc(&(v_work_idx_8256)); \n        while((v_l_id_97362 < 1)){\n          float v_tmp_97444 = 0.0f; \n          v__81237 = v_tmp_97444; \n          /* reduce_seq */\n          for (int v_i_97363 = 0; v_i_97363 < v_MWidthC_1; v_i_97363 = (1 + v_i_97363)) {\n            v__81237 = add(v__81237, v__97383[(v_i_97363 + (v_MWidthC_1 * v_l_id_97362))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97364 = 0; \n            v__97388[v_w_id_97357] = doubleMultiplyAdd(v__81237, v__97369, v__97368[v_w_id_97357], v__97370); \n          }\n          /* end map_seq */\n          v_l_id_97362 = atomic_inc(&(v_work_idx_8256)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97357 = atomic_inc(v_work_idx_8264); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97365",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97366",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97367",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97368",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97369",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97370",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97378",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97372",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97388",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97383",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}