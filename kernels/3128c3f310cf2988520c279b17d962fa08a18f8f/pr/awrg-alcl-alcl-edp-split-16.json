{
  "name" : "awrg-alcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__87555, const global float* restrict v__87556, const global float* restrict v__87557, const global float* restrict v__87558, float v__87559, float v__87560, global float* v__87580, global int* v__87562, local float* v__87575, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87564; \n  float v__87566; \n  float v__81237; \n  /* Private Memory */\n  float v__87568_0;\n  \n  float v__87570_0;\n  \n  int v__87574_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7350 = v__87562; \n    local int v_w_id_87548; \n    if (get_local_id(0) == 0) {\n      v_w_id_87548 = atomic_inc(v_work_idx_7350); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87548 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7348; \n        v_work_idx_7348 = 0; \n        int v_l_id_87549 = atomic_inc(&(v_work_idx_7348)); \n        while((v_l_id_87549 < v_MWidthC_1)){\n          float v_tmp_87634 = 0.0f; \n          v__87564 = v_tmp_87634; \n          /* reduce_while_seq */\n          for (int v_i_87550 = 0; v_i_87550 < 16; v_i_87550 = (1 + v_i_87550)) {\n            v__87574_0 = check(v__87564, v__87555[(v_l_id_87549 + (16 * v_MWidthC_1 * v_w_id_87548) + (v_MWidthC_1 * v_i_87550))]); \n            if (v__87574_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87635 = 0.0f; \n            v__87566 = v_tmp_87635; \n            int v_index_87636 = v__87555[(v_l_id_87549 + (16 * v_MWidthC_1 * v_w_id_87548) + (v_MWidthC_1 * v_i_87550))]; \n            if (v_index_87636 < 0) {\n              v__87568_0 = v__87566; \n            } else {\n              if (v_index_87636 >= v_VLength_3) {\n                v__87568_0 = v__87566; \n              } else {\n                v__87568_0 = v__87557[v_index_87636]; \n              }\n            }\n            v__87570_0 = mult(v__87568_0, v__87556[(v_l_id_87549 + (16 * v_MWidthC_1 * v_w_id_87548) + (v_MWidthC_1 * v_i_87550))]); \n            v__87564 = add(v__87570_0, v__87564); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87551 = 0; \n            v__87575[v_l_id_87549] = id(v__87564); \n          }\n          /* end map_seq */\n          v_l_id_87549 = atomic_inc(&(v_work_idx_7348)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7343; \n        v_work_idx_7343 = 0; \n        int v_l_id_87552 = atomic_inc(&(v_work_idx_7343)); \n        while((v_l_id_87552 < 1)){\n          float v_tmp_87639 = 0.0f; \n          v__81237 = v_tmp_87639; \n          /* reduce_seq */\n          for (int v_i_87553 = 0; v_i_87553 < v_MWidthC_1; v_i_87553 = (1 + v_i_87553)) {\n            v__81237 = add(v__81237, v__87575[(v_i_87553 + (v_MWidthC_1 * v_l_id_87552))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87554 = 0; \n            v__87580[v_w_id_87548] = doubleMultiplyAdd(v__81237, v__87559, v__87558[v_w_id_87548], v__87560); \n          }\n          /* end map_seq */\n          v_l_id_87552 = atomic_inc(&(v_work_idx_7343)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87548 = atomic_inc(v_work_idx_7350); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87555",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87556",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87557",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87559",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87560",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87562",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87580",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87575",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}