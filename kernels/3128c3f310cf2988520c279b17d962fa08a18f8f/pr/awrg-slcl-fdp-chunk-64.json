{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92730, const global float* restrict v__92731, const global float* restrict v__92732, const global float* restrict v__92733, float v__92734, float v__92735, global float* v__92749, global int* v__92737, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92739; \n  float v__92741; \n  /* Private Memory */\n  float v__92743_0;\n  \n  float v__92745_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7822 = v__92737; \n    local int v_w_id_92726; \n    if (get_local_id(0) == 0) {\n      v_w_id_92726 = atomic_inc(v_work_idx_7822); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92726 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_92727 = get_local_id(0); v_l_id_92727 < 64; v_l_id_92727 = (v_l_id_92727 + get_local_size(0))) {\n        float v_tmp_92790 = 0.0f; \n        v__92739 = v_tmp_92790; \n        /* reduce_seq */\n        for (int v_i_92728 = 0; v_i_92728 < v_MWidthC_1; v_i_92728 = (1 + v_i_92728)) {\n          float v_tmp_92791 = 0.0f; \n          v__92741 = v_tmp_92791; \n          int v_index_92792 = v__92730[(v_i_92728 + (64 * v_MWidthC_1 * v_w_id_92726) + (v_MWidthC_1 * v_l_id_92727))]; \n          if (v_index_92792 < 0) {\n            v__92743_0 = v__92741; \n          } else {\n            if (v_index_92792 >= v_VLength_3) {\n              v__92743_0 = v__92741; \n            } else {\n              v__92743_0 = v__92732[v_index_92792]; \n            }\n          }\n          v__92745_0 = mult(v__92743_0, v__92731[(v_i_92728 + (64 * v_MWidthC_1 * v_w_id_92726) + (v_MWidthC_1 * v_l_id_92727))]); \n          v__92739 = add(v__92745_0, v__92739); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92729 = 0; \n          v__92749[(v_l_id_92727 + (64 * v_w_id_92726))] = doubleMultiplyAdd(v__92739, v__92734, v__92733[(v_l_id_92727 + (64 * v_w_id_92726))], v__92735); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_92726 = atomic_inc(v_work_idx_7822); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92730",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92731",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92732",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92733",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92734",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92735",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92737",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__92749",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}