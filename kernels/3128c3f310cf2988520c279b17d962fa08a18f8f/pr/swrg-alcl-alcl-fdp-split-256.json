{
  "name" : "swrg-alcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99128, const global float* restrict v__99129, const global float* restrict v__99130, const global float* restrict v__99131, float v__99132, float v__99133, global float* v__99150, local float* v__99145, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99136; \n  float v__99138; \n  float v__81237; \n  /* Private Memory */\n  float v__99140_0;\n  \n  float v__99142_0;\n  \n  for (int v_wg_id_99121 = get_group_id(0); v_wg_id_99121 < v_MHeight_2; v_wg_id_99121 = (v_wg_id_99121 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8422; \n      v_work_idx_8422 = 0; \n      int v_l_id_99122 = atomic_inc(&(v_work_idx_8422)); \n      while((v_l_id_99122 < v_MWidthC_1)){\n        float v_tmp_99203 = 0.0f; \n        v__99136 = v_tmp_99203; \n        /* reduce_seq */\n        for (int v_i_99123 = 0; v_i_99123 < 256; v_i_99123 = (1 + v_i_99123)) {\n          float v_tmp_99204 = 0.0f; \n          v__99138 = v_tmp_99204; \n          int v_index_99205 = v__99128[(v_l_id_99122 + (256 * v_MWidthC_1 * v_wg_id_99121) + (v_MWidthC_1 * v_i_99123))]; \n          if (v_index_99205 < 0) {\n            v__99140_0 = v__99138; \n          } else {\n            if (v_index_99205 >= v_VLength_3) {\n              v__99140_0 = v__99138; \n            } else {\n              v__99140_0 = v__99130[v_index_99205]; \n            }\n          }\n          v__99142_0 = mult(v__99140_0, v__99129[(v_l_id_99122 + (256 * v_MWidthC_1 * v_wg_id_99121) + (v_MWidthC_1 * v_i_99123))]); \n          v__99136 = add(v__99142_0, v__99136); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99124 = 0; \n          v__99145[v_l_id_99122] = id(v__99136); \n        }\n        /* end map_seq */\n        v_l_id_99122 = atomic_inc(&(v_work_idx_8422)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8417; \n      v_work_idx_8417 = 0; \n      int v_l_id_99125 = atomic_inc(&(v_work_idx_8417)); \n      while((v_l_id_99125 < 1)){\n        float v_tmp_99208 = 0.0f; \n        v__81237 = v_tmp_99208; \n        /* reduce_seq */\n        for (int v_i_99126 = 0; v_i_99126 < v_MWidthC_1; v_i_99126 = (1 + v_i_99126)) {\n          v__81237 = add(v__81237, v__99145[(v_i_99126 + (v_MWidthC_1 * v_l_id_99125))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99127 = 0; \n          v__99150[v_wg_id_99121] = doubleMultiplyAdd(v__81237, v__99132, v__99131[v_wg_id_99121], v__99133); \n        }\n        /* end map_seq */\n        v_l_id_99125 = atomic_inc(&(v_work_idx_8417)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99128",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99129",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99130",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99131",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99132",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99133",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__99150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99145",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}