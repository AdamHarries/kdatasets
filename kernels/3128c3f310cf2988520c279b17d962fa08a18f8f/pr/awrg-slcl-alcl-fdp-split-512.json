{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103306, const global float* restrict v__103307, const global float* restrict v__103308, const global float* restrict v__103309, float v__103310, float v__103311, global float* v__103329, global int* v__103313, local float* v__103324, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103315; \n  float v__103317; \n  float v__81237; \n  /* Private Memory */\n  float v__103319_0;\n  \n  float v__103321_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8813 = v__103313; \n    local int v_w_id_103299; \n    if (get_local_id(0) == 0) {\n      v_w_id_103299 = atomic_inc(v_work_idx_8813); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103299 < v_MHeight_2)){\n      for (int v_l_id_103300 = get_local_id(0); v_l_id_103300 < v_MWidthC_1; v_l_id_103300 = (v_l_id_103300 + get_local_size(0))) {\n        float v_tmp_103388 = 0.0f; \n        v__103315 = v_tmp_103388; \n        /* reduce_seq */\n        for (int v_i_103301 = 0; v_i_103301 < 512; v_i_103301 = (1 + v_i_103301)) {\n          float v_tmp_103389 = 0.0f; \n          v__103317 = v_tmp_103389; \n          int v_index_103390 = v__103306[(v_l_id_103300 + (512 * v_MWidthC_1 * v_w_id_103299) + (v_MWidthC_1 * v_i_103301))]; \n          if (v_index_103390 < 0) {\n            v__103319_0 = v__103317; \n          } else {\n            if (v_index_103390 >= v_VLength_3) {\n              v__103319_0 = v__103317; \n            } else {\n              v__103319_0 = v__103308[v_index_103390]; \n            }\n          }\n          v__103321_0 = mult(v__103319_0, v__103307[(v_l_id_103300 + (512 * v_MWidthC_1 * v_w_id_103299) + (v_MWidthC_1 * v_i_103301))]); \n          v__103315 = add(v__103321_0, v__103315); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103302 = 0; \n          v__103324[v_l_id_103300] = id(v__103315); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8807; \n        v_work_idx_8807 = 0; \n        int v_l_id_103303 = atomic_inc(&(v_work_idx_8807)); \n        while((v_l_id_103303 < 1)){\n          float v_tmp_103393 = 0.0f; \n          v__81237 = v_tmp_103393; \n          /* reduce_seq */\n          for (int v_i_103304 = 0; v_i_103304 < v_MWidthC_1; v_i_103304 = (1 + v_i_103304)) {\n            v__81237 = add(v__81237, v__103324[(v_i_103304 + (v_MWidthC_1 * v_l_id_103303))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103305 = 0; \n            v__103329[v_w_id_103299] = doubleMultiplyAdd(v__81237, v__103310, v__103309[v_w_id_103299], v__103311); \n          }\n          /* end map_seq */\n          v_l_id_103303 = atomic_inc(&(v_work_idx_8807)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103299 = atomic_inc(v_work_idx_8813); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__103306",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103307",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103308",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103309",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103310",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103311",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103313",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103324",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}