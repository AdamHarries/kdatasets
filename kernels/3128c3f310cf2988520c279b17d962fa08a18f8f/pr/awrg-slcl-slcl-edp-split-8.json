{
  "name" : "awrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83102, const global float* restrict v__83103, const global float* restrict v__83104, const global float* restrict v__83105, float v__83106, float v__83107, global float* v__83127, global int* v__83109, local float* v__83122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83111; \n  float v__83113; \n  float v__81237; \n  /* Private Memory */\n  float v__83115_0;\n  \n  float v__83117_0;\n  \n  int v__83121_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6920 = v__83109; \n    local int v_w_id_83095; \n    if (get_local_id(0) == 0) {\n      v_w_id_83095 = atomic_inc(v_work_idx_6920); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83095 < v_MHeight_2)){\n      for (int v_l_id_83096 = get_local_id(0); v_l_id_83096 < v_MWidthC_1; v_l_id_83096 = (v_l_id_83096 + get_local_size(0))) {\n        float v_tmp_83193 = 0.0f; \n        v__83111 = v_tmp_83193; \n        /* reduce_while_seq */\n        for (int v_i_83097 = 0; v_i_83097 < 8; v_i_83097 = (1 + v_i_83097)) {\n          v__83121_0 = check(v__83111, v__83102[(v_l_id_83096 + (8 * v_MWidthC_1 * v_w_id_83095) + (v_MWidthC_1 * v_i_83097))]); \n          if (v__83121_0) {\n          } else {\n            break;\n          }\n          float v_tmp_83194 = 0.0f; \n          v__83113 = v_tmp_83194; \n          int v_index_83195 = v__83102[(v_l_id_83096 + (8 * v_MWidthC_1 * v_w_id_83095) + (v_MWidthC_1 * v_i_83097))]; \n          if (v_index_83195 < 0) {\n            v__83115_0 = v__83113; \n          } else {\n            if (v_index_83195 >= v_VLength_3) {\n              v__83115_0 = v__83113; \n            } else {\n              v__83115_0 = v__83104[v_index_83195]; \n            }\n          }\n          v__83117_0 = mult(v__83115_0, v__83103[(v_l_id_83096 + (8 * v_MWidthC_1 * v_w_id_83095) + (v_MWidthC_1 * v_i_83097))]); \n          v__83111 = add(v__83117_0, v__83111); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83098 = 0; \n          v__83122[v_l_id_83096] = id(v__83111); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83099 = get_local_id(0); \n        float v_tmp_83198 = 0.0f; \n        v__81237 = v_tmp_83198; \n        /* reduce_seq */\n        for (int v_i_83100 = 0; v_i_83100 < v_MWidthC_1; v_i_83100 = (1 + v_i_83100)) {\n          v__81237 = add(v__81237, v__83122[(v_i_83100 + (v_MWidthC_1 * v_l_id_83099))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83101 = 0; \n          v__83127[v_w_id_83095] = doubleMultiplyAdd(v__81237, v__83106, v__83105[v_w_id_83095], v__83107); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83095 = atomic_inc(v_work_idx_6920); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83102",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83103",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83104",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83106",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83107",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83109",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83122",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}