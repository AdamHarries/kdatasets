{
  "name" : "swrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101054, const global float* restrict v__101055, const global float* restrict v__101056, const global float* restrict v__101057, float v__101058, float v__101059, global float* v__101072, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101062; \n  float v__101064; \n  /* Private Memory */\n  float v__101066_0;\n  \n  float v__101068_0;\n  \n  for (int v_wg_id_101050 = get_group_id(0); v_wg_id_101050 < ((v_MHeight_2)/(512)); v_wg_id_101050 = (v_wg_id_101050 + get_num_groups(0))) {\n    for (int v_l_id_101051 = get_local_id(0); v_l_id_101051 < 512; v_l_id_101051 = (v_l_id_101051 + get_local_size(0))) {\n      float v_tmp_101114 = 0.0f; \n      v__101062 = v_tmp_101114; \n      /* reduce_seq */\n      for (int v_i_101052 = 0; v_i_101052 < v_MWidthC_1; v_i_101052 = (1 + v_i_101052)) {\n        float v_tmp_101115 = 0.0f; \n        v__101064 = v_tmp_101115; \n        int v_index_101116 = v__101054[(v_i_101052 + (512 * v_MWidthC_1 * v_wg_id_101050) + (v_MWidthC_1 * v_l_id_101051))]; \n        if (v_index_101116 < 0) {\n          v__101066_0 = v__101064; \n        } else {\n          if (v_index_101116 >= v_VLength_3) {\n            v__101066_0 = v__101064; \n          } else {\n            v__101066_0 = v__101056[v_index_101116]; \n          }\n        }\n        v__101068_0 = mult(v__101066_0, v__101055[(v_i_101052 + (512 * v_MWidthC_1 * v_wg_id_101050) + (v_MWidthC_1 * v_l_id_101051))]); \n        v__101062 = add(v__101068_0, v__101062); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101053 = 0; \n        v__101072[(v_l_id_101051 + (512 * v_wg_id_101050))] = doubleMultiplyAdd(v__101062, v__101058, v__101057[(v_l_id_101051 + (512 * v_wg_id_101050))], v__101059); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101054",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101055",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101056",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101057",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101058",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101059",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101072",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}