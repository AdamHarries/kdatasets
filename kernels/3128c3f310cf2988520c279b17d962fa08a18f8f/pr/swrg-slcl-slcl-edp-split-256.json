{
  "name" : "swrg-slcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__98092, const global float* restrict v__98093, const global float* restrict v__98094, const global float* restrict v__98095, float v__98096, float v__98097, global float* v__98116, local float* v__98111, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98100; \n  float v__98102; \n  float v__81237; \n  /* Private Memory */\n  float v__98104_0;\n  \n  float v__98106_0;\n  \n  int v__98110_0;\n  \n  for (int v_wg_id_98085 = get_group_id(0); v_wg_id_98085 < v_MHeight_2; v_wg_id_98085 = (v_wg_id_98085 + get_num_groups(0))) {\n    for (int v_l_id_98086 = get_local_id(0); v_l_id_98086 < v_MWidthC_1; v_l_id_98086 = (v_l_id_98086 + get_local_size(0))) {\n      float v_tmp_98184 = 0.0f; \n      v__98100 = v_tmp_98184; \n      /* reduce_while_seq */\n      for (int v_i_98087 = 0; v_i_98087 < 256; v_i_98087 = (1 + v_i_98087)) {\n        v__98110_0 = check(v__98100, v__98092[(v_l_id_98086 + (256 * v_MWidthC_1 * v_wg_id_98085) + (v_MWidthC_1 * v_i_98087))]); \n        if (v__98110_0) {\n        } else {\n          break;\n        }\n        float v_tmp_98185 = 0.0f; \n        v__98102 = v_tmp_98185; \n        int v_index_98186 = v__98092[(v_l_id_98086 + (256 * v_MWidthC_1 * v_wg_id_98085) + (v_MWidthC_1 * v_i_98087))]; \n        if (v_index_98186 < 0) {\n          v__98104_0 = v__98102; \n        } else {\n          if (v_index_98186 >= v_VLength_3) {\n            v__98104_0 = v__98102; \n          } else {\n            v__98104_0 = v__98094[v_index_98186]; \n          }\n        }\n        v__98106_0 = mult(v__98104_0, v__98093[(v_l_id_98086 + (256 * v_MWidthC_1 * v_wg_id_98085) + (v_MWidthC_1 * v_i_98087))]); \n        v__98100 = add(v__98106_0, v__98100); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98088 = 0; \n        v__98111[v_l_id_98086] = id(v__98100); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98089 = get_local_id(0); \n      float v_tmp_98189 = 0.0f; \n      v__81237 = v_tmp_98189; \n      /* reduce_seq */\n      for (int v_i_98090 = 0; v_i_98090 < v_MWidthC_1; v_i_98090 = (1 + v_i_98090)) {\n        v__81237 = add(v__81237, v__98111[(v_i_98090 + (v_MWidthC_1 * v_l_id_98089))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98091 = 0; \n        v__98116[v_wg_id_98085] = doubleMultiplyAdd(v__81237, v__98096, v__98095[v_wg_id_98085], v__98097); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98092",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98093",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98094",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98095",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98096",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98097",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98116",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98111",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}