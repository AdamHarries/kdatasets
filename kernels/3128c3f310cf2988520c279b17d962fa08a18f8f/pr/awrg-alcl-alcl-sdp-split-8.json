{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84037, const global float* restrict v__84038, const global float* restrict v__84039, const global float* restrict v__84040, float v__84041, float v__84042, global float* v__84060, global float* v__84050, global int* v__84044, local float* v__84055, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84046; \n  float v__84051; \n  float v__81237; \n  /* Private Memory */\n  float v__84048_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7016 = v__84044; \n    local int v_w_id_84029; \n    if (get_local_id(0) == 0) {\n      v_w_id_84029 = atomic_inc(v_work_idx_7016); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_84029 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7014; \n        v_work_idx_7014 = 0; \n        int v_l_id_84030 = atomic_inc(&(v_work_idx_7014)); \n        while((v_l_id_84030 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_84031 = 0; v_i_84031 < 8; v_i_84031 = (1 + v_i_84031)) {\n            float v_tmp_84111 = 0.0f; \n            v__84046 = v_tmp_84111; \n            int v_index_84112 = v__84037[(v_l_id_84030 + (8 * v_MWidthC_1 * v_w_id_84029) + (v_MWidthC_1 * v_i_84031))]; \n            if (v_index_84112 < 0) {\n              v__84048_0 = v__84046; \n            } else {\n              if (v_index_84112 >= v_VLength_3) {\n                v__84048_0 = v__84046; \n              } else {\n                v__84048_0 = v__84039[v_index_84112]; \n              }\n            }\n            v__84050[(7 + (8 * v_MWidthC_1 * v_w_id_84029) + (-1 * v_i_84031) + (8 * v_l_id_84030))] = mult(v__84048_0, v__84038[(v_l_id_84030 + (8 * v_MWidthC_1 * v_w_id_84029) + (v_MWidthC_1 * v_i_84031))]); \n          }\n          /* end map_seq */\n          float v_tmp_84113 = 0.0f; \n          v__84051 = v_tmp_84113; \n          /* reduce_seq */\n          for (int v_i_84032 = 0; v_i_84032 < 8; v_i_84032 = (1 + v_i_84032)) {\n            v__84051 = add(v__84051, v__84050[(v_i_84032 + (8 * v_MWidthC_1 * v_w_id_84029) + (8 * v_l_id_84030))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84033 = 0; \n            v__84055[v_l_id_84030] = id(v__84051); \n          }\n          /* end map_seq */\n          v_l_id_84030 = atomic_inc(&(v_work_idx_7014)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7008; \n        v_work_idx_7008 = 0; \n        int v_l_id_84034 = atomic_inc(&(v_work_idx_7008)); \n        while((v_l_id_84034 < 1)){\n          float v_tmp_84116 = 0.0f; \n          v__81237 = v_tmp_84116; \n          /* reduce_seq */\n          for (int v_i_84035 = 0; v_i_84035 < v_MWidthC_1; v_i_84035 = (1 + v_i_84035)) {\n            v__81237 = add(v__81237, v__84055[(v_i_84035 + (v_MWidthC_1 * v_l_id_84034))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84036 = 0; \n            v__84060[v_w_id_84029] = doubleMultiplyAdd(v__81237, v__84041, v__84040[v_w_id_84029], v__84042); \n          }\n          /* end map_seq */\n          v_l_id_84034 = atomic_inc(&(v_work_idx_7008)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_84029 = atomic_inc(v_work_idx_7016); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84037",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84038",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84039",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84040",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84041",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84042",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84050",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84044",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__84060",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84055",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}