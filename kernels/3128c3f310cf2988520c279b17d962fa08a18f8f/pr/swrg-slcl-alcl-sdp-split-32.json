{
  "name" : "swrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88208, const global float* restrict v__88209, const global float* restrict v__88210, const global float* restrict v__88211, float v__88212, float v__88213, global float* v__88230, global float* v__88220, local float* v__88225, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88216; \n  float v__88221; \n  float v__81237; \n  /* Private Memory */\n  float v__88218_0;\n  \n  for (int v_wg_id_88200 = get_group_id(0); v_wg_id_88200 < v_MHeight_2; v_wg_id_88200 = (v_wg_id_88200 + get_num_groups(0))) {\n    for (int v_l_id_88201 = get_local_id(0); v_l_id_88201 < v_MWidthC_1; v_l_id_88201 = (v_l_id_88201 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_88202 = 0; v_i_88202 < 32; v_i_88202 = (1 + v_i_88202)) {\n        float v_tmp_88291 = 0.0f; \n        v__88216 = v_tmp_88291; \n        int v_index_88292 = v__88208[(v_l_id_88201 + (32 * v_MWidthC_1 * v_wg_id_88200) + (v_MWidthC_1 * v_i_88202))]; \n        if (v_index_88292 < 0) {\n          v__88218_0 = v__88216; \n        } else {\n          if (v_index_88292 >= v_VLength_3) {\n            v__88218_0 = v__88216; \n          } else {\n            v__88218_0 = v__88210[v_index_88292]; \n          }\n        }\n        v__88220[(31 + (32 * v_MWidthC_1 * v_wg_id_88200) + (-1 * v_i_88202) + (32 * v_l_id_88201))] = mult(v__88218_0, v__88209[(v_l_id_88201 + (32 * v_MWidthC_1 * v_wg_id_88200) + (v_MWidthC_1 * v_i_88202))]); \n      }\n      /* end map_seq */\n      float v_tmp_88293 = 0.0f; \n      v__88221 = v_tmp_88293; \n      /* reduce_seq */\n      for (int v_i_88203 = 0; v_i_88203 < 32; v_i_88203 = (1 + v_i_88203)) {\n        v__88221 = add(v__88221, v__88220[(v_i_88203 + (32 * v_MWidthC_1 * v_wg_id_88200) + (32 * v_l_id_88201))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88204 = 0; \n        v__88225[v_l_id_88201] = id(v__88221); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7395; \n      v_work_idx_7395 = 0; \n      int v_l_id_88205 = atomic_inc(&(v_work_idx_7395)); \n      while((v_l_id_88205 < 1)){\n        float v_tmp_88296 = 0.0f; \n        v__81237 = v_tmp_88296; \n        /* reduce_seq */\n        for (int v_i_88206 = 0; v_i_88206 < v_MWidthC_1; v_i_88206 = (1 + v_i_88206)) {\n          v__81237 = add(v__81237, v__88225[(v_i_88206 + (v_MWidthC_1 * v_l_id_88205))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88207 = 0; \n          v__88230[v_wg_id_88200] = doubleMultiplyAdd(v__81237, v__88212, v__88211[v_wg_id_88200], v__88213); \n        }\n        /* end map_seq */\n        v_l_id_88205 = atomic_inc(&(v_work_idx_7395)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__88208",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88209",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88210",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88211",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88212",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88213",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__88220",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__88230",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88225",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}