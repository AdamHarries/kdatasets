{
  "name" : "swrg-slcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87799, const global float* restrict v__87800, const global float* restrict v__87801, const global float* restrict v__87802, float v__87803, float v__87804, global float* v__87819, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87806; \n  float v__87809; \n  /* Private Memory */\n  float v__87811_0;\n  \n  float v__87813_0;\n  \n  int v__87817_0;\n  \n  for (int v_wg_id_87795 = get_group_id(0); v_wg_id_87795 < ((v_MHeight_2)/(32)); v_wg_id_87795 = (v_wg_id_87795 + get_num_groups(0))) {\n    for (int v_l_id_87796 = get_local_id(0); v_l_id_87796 < 32; v_l_id_87796 = (v_l_id_87796 + get_local_size(0))) {\n      float v_tmp_87867 = 0.0f; \n      v__87806 = v_tmp_87867; \n      /* reduce_while_seq */\n      for (int v_i_87797 = 0; v_i_87797 < v_MWidthC_1; v_i_87797 = (1 + v_i_87797)) {\n        v__87817_0 = check(v__87806, v__87799[(v_i_87797 + (32 * v_MWidthC_1 * v_wg_id_87795) + (v_MWidthC_1 * v_l_id_87796))]); \n        if (v__87817_0) {\n        } else {\n          break;\n        }\n        float v_tmp_87868 = 0.0f; \n        v__87809 = v_tmp_87868; \n        int v_index_87869 = v__87799[(v_i_87797 + (32 * v_MWidthC_1 * v_wg_id_87795) + (v_MWidthC_1 * v_l_id_87796))]; \n        if (v_index_87869 < 0) {\n          v__87811_0 = v__87809; \n        } else {\n          if (v_index_87869 >= v_VLength_3) {\n            v__87811_0 = v__87809; \n          } else {\n            v__87811_0 = v__87801[v_index_87869]; \n          }\n        }\n        v__87813_0 = mult(v__87811_0, v__87800[(v_i_87797 + (32 * v_MWidthC_1 * v_wg_id_87795) + (v_MWidthC_1 * v_l_id_87796))]); \n        v__87806 = add(v__87813_0, v__87806); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87798 = 0; \n        v__87819[(v_l_id_87796 + (32 * v_wg_id_87795))] = doubleMultiplyAdd(v__87806, v__87803, v__87802[(v_l_id_87796 + (32 * v_wg_id_87795))], v__87804); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87800",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87801",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87802",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87803",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87804",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__87819",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}