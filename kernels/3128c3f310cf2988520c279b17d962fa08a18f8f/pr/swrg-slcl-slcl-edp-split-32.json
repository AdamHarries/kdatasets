{
  "name" : "swrg-slcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__88096, const global float* restrict v__88097, const global float* restrict v__88098, const global float* restrict v__88099, float v__88100, float v__88101, global float* v__88120, local float* v__88115, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88104; \n  float v__88106; \n  float v__81237; \n  /* Private Memory */\n  float v__88108_0;\n  \n  float v__88110_0;\n  \n  int v__88114_0;\n  \n  for (int v_wg_id_88089 = get_group_id(0); v_wg_id_88089 < v_MHeight_2; v_wg_id_88089 = (v_wg_id_88089 + get_num_groups(0))) {\n    for (int v_l_id_88090 = get_local_id(0); v_l_id_88090 < v_MWidthC_1; v_l_id_88090 = (v_l_id_88090 + get_local_size(0))) {\n      float v_tmp_88188 = 0.0f; \n      v__88104 = v_tmp_88188; \n      /* reduce_while_seq */\n      for (int v_i_88091 = 0; v_i_88091 < 32; v_i_88091 = (1 + v_i_88091)) {\n        v__88114_0 = check(v__88104, v__88096[(v_l_id_88090 + (32 * v_MWidthC_1 * v_wg_id_88089) + (v_MWidthC_1 * v_i_88091))]); \n        if (v__88114_0) {\n        } else {\n          break;\n        }\n        float v_tmp_88189 = 0.0f; \n        v__88106 = v_tmp_88189; \n        int v_index_88190 = v__88096[(v_l_id_88090 + (32 * v_MWidthC_1 * v_wg_id_88089) + (v_MWidthC_1 * v_i_88091))]; \n        if (v_index_88190 < 0) {\n          v__88108_0 = v__88106; \n        } else {\n          if (v_index_88190 >= v_VLength_3) {\n            v__88108_0 = v__88106; \n          } else {\n            v__88108_0 = v__88098[v_index_88190]; \n          }\n        }\n        v__88110_0 = mult(v__88108_0, v__88097[(v_l_id_88090 + (32 * v_MWidthC_1 * v_wg_id_88089) + (v_MWidthC_1 * v_i_88091))]); \n        v__88104 = add(v__88110_0, v__88104); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88092 = 0; \n        v__88115[v_l_id_88090] = id(v__88104); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_88093 = get_local_id(0); \n      float v_tmp_88193 = 0.0f; \n      v__81237 = v_tmp_88193; \n      /* reduce_seq */\n      for (int v_i_88094 = 0; v_i_88094 < v_MWidthC_1; v_i_88094 = (1 + v_i_88094)) {\n        v__81237 = add(v__81237, v__88115[(v_i_88094 + (v_MWidthC_1 * v_l_id_88093))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88095 = 0; \n        v__88120[v_wg_id_88089] = doubleMultiplyAdd(v__81237, v__88100, v__88099[v_wg_id_88089], v__88101); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__88096",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88097",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88098",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88099",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88100",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88101",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88120",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88115",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}