{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94126, const global float* restrict v__94127, const global float* restrict v__94128, const global float* restrict v__94129, float v__94130, float v__94131, global float* v__94149, global int* v__94133, local float* v__94144, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94135; \n  float v__94137; \n  float v__81237; \n  /* Private Memory */\n  float v__94139_0;\n  \n  float v__94141_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7963 = v__94133; \n    local int v_w_id_94119; \n    if (get_local_id(0) == 0) {\n      v_w_id_94119 = atomic_inc(v_work_idx_7963); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94119 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7961; \n        v_work_idx_7961 = 0; \n        int v_l_id_94120 = atomic_inc(&(v_work_idx_7961)); \n        while((v_l_id_94120 < v_MWidthC_1)){\n          float v_tmp_94200 = 0.0f; \n          v__94135 = v_tmp_94200; \n          /* reduce_seq */\n          for (int v_i_94121 = 0; v_i_94121 < 64; v_i_94121 = (1 + v_i_94121)) {\n            float v_tmp_94201 = 0.0f; \n            v__94137 = v_tmp_94201; \n            int v_index_94202 = v__94126[(v_l_id_94120 + (64 * v_MWidthC_1 * v_w_id_94119) + (v_MWidthC_1 * v_i_94121))]; \n            if (v_index_94202 < 0) {\n              v__94139_0 = v__94137; \n            } else {\n              if (v_index_94202 >= v_VLength_3) {\n                v__94139_0 = v__94137; \n              } else {\n                v__94139_0 = v__94128[v_index_94202]; \n              }\n            }\n            v__94141_0 = mult(v__94139_0, v__94127[(v_l_id_94120 + (64 * v_MWidthC_1 * v_w_id_94119) + (v_MWidthC_1 * v_i_94121))]); \n            v__94135 = add(v__94141_0, v__94135); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94122 = 0; \n            v__94144[v_l_id_94120] = id(v__94135); \n          }\n          /* end map_seq */\n          v_l_id_94120 = atomic_inc(&(v_work_idx_7961)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7956; \n        v_work_idx_7956 = 0; \n        int v_l_id_94123 = atomic_inc(&(v_work_idx_7956)); \n        while((v_l_id_94123 < 1)){\n          float v_tmp_94205 = 0.0f; \n          v__81237 = v_tmp_94205; \n          /* reduce_seq */\n          for (int v_i_94124 = 0; v_i_94124 < v_MWidthC_1; v_i_94124 = (1 + v_i_94124)) {\n            v__81237 = add(v__81237, v__94144[(v_i_94124 + (v_MWidthC_1 * v_l_id_94123))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94125 = 0; \n            v__94149[v_w_id_94119] = doubleMultiplyAdd(v__81237, v__94130, v__94129[v_w_id_94119], v__94131); \n          }\n          /* end map_seq */\n          v_l_id_94123 = atomic_inc(&(v_work_idx_7956)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94119 = atomic_inc(v_work_idx_7963); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94126",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94127",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94128",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94129",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94130",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94131",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94133",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94149",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94144",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}