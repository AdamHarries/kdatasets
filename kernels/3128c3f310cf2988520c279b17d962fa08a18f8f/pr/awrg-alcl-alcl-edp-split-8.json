{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__84223, const global float* restrict v__84224, const global float* restrict v__84225, const global float* restrict v__84226, float v__84227, float v__84228, global float* v__84248, global int* v__84230, local float* v__84243, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84232; \n  float v__84234; \n  float v__81237; \n  /* Private Memory */\n  float v__84236_0;\n  \n  float v__84238_0;\n  \n  int v__84242_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7038 = v__84230; \n    local int v_w_id_84216; \n    if (get_local_id(0) == 0) {\n      v_w_id_84216 = atomic_inc(v_work_idx_7038); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_84216 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7036; \n        v_work_idx_7036 = 0; \n        int v_l_id_84217 = atomic_inc(&(v_work_idx_7036)); \n        while((v_l_id_84217 < v_MWidthC_1)){\n          float v_tmp_84302 = 0.0f; \n          v__84232 = v_tmp_84302; \n          /* reduce_while_seq */\n          for (int v_i_84218 = 0; v_i_84218 < 8; v_i_84218 = (1 + v_i_84218)) {\n            v__84242_0 = check(v__84232, v__84223[(v_l_id_84217 + (8 * v_MWidthC_1 * v_w_id_84216) + (v_MWidthC_1 * v_i_84218))]); \n            if (v__84242_0) {\n            } else {\n              break;\n            }\n            float v_tmp_84303 = 0.0f; \n            v__84234 = v_tmp_84303; \n            int v_index_84304 = v__84223[(v_l_id_84217 + (8 * v_MWidthC_1 * v_w_id_84216) + (v_MWidthC_1 * v_i_84218))]; \n            if (v_index_84304 < 0) {\n              v__84236_0 = v__84234; \n            } else {\n              if (v_index_84304 >= v_VLength_3) {\n                v__84236_0 = v__84234; \n              } else {\n                v__84236_0 = v__84225[v_index_84304]; \n              }\n            }\n            v__84238_0 = mult(v__84236_0, v__84224[(v_l_id_84217 + (8 * v_MWidthC_1 * v_w_id_84216) + (v_MWidthC_1 * v_i_84218))]); \n            v__84232 = add(v__84238_0, v__84232); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84219 = 0; \n            v__84243[v_l_id_84217] = id(v__84232); \n          }\n          /* end map_seq */\n          v_l_id_84217 = atomic_inc(&(v_work_idx_7036)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7031; \n        v_work_idx_7031 = 0; \n        int v_l_id_84220 = atomic_inc(&(v_work_idx_7031)); \n        while((v_l_id_84220 < 1)){\n          float v_tmp_84307 = 0.0f; \n          v__81237 = v_tmp_84307; \n          /* reduce_seq */\n          for (int v_i_84221 = 0; v_i_84221 < v_MWidthC_1; v_i_84221 = (1 + v_i_84221)) {\n            v__81237 = add(v__81237, v__84243[(v_i_84221 + (v_MWidthC_1 * v_l_id_84220))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84222 = 0; \n            v__84248[v_w_id_84216] = doubleMultiplyAdd(v__81237, v__84227, v__84226[v_w_id_84216], v__84228); \n          }\n          /* end map_seq */\n          v_l_id_84220 = atomic_inc(&(v_work_idx_7031)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_84216 = atomic_inc(v_work_idx_7038); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__84223",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84224",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84225",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84226",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84227",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84228",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84230",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__84248",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84243",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}