{
  "name" : "swrg-alcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95796, const global float* restrict v__95797, const global float* restrict v__95798, const global float* restrict v__95799, float v__95800, float v__95801, global float* v__95818, local float* v__95813, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95804; \n  float v__95806; \n  float v__81237; \n  /* Private Memory */\n  float v__95808_0;\n  \n  float v__95810_0;\n  \n  for (int v_wg_id_95789 = get_group_id(0); v_wg_id_95789 < v_MHeight_2; v_wg_id_95789 = (v_wg_id_95789 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8110; \n      v_work_idx_8110 = 0; \n      int v_l_id_95790 = atomic_inc(&(v_work_idx_8110)); \n      while((v_l_id_95790 < v_MWidthC_1)){\n        float v_tmp_95871 = 0.0f; \n        v__95804 = v_tmp_95871; \n        /* reduce_seq */\n        for (int v_i_95791 = 0; v_i_95791 < 128; v_i_95791 = (1 + v_i_95791)) {\n          float v_tmp_95872 = 0.0f; \n          v__95806 = v_tmp_95872; \n          int v_index_95873 = v__95796[(v_l_id_95790 + (128 * v_MWidthC_1 * v_wg_id_95789) + (v_MWidthC_1 * v_i_95791))]; \n          if (v_index_95873 < 0) {\n            v__95808_0 = v__95806; \n          } else {\n            if (v_index_95873 >= v_VLength_3) {\n              v__95808_0 = v__95806; \n            } else {\n              v__95808_0 = v__95798[v_index_95873]; \n            }\n          }\n          v__95810_0 = mult(v__95808_0, v__95797[(v_l_id_95790 + (128 * v_MWidthC_1 * v_wg_id_95789) + (v_MWidthC_1 * v_i_95791))]); \n          v__95804 = add(v__95810_0, v__95804); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95792 = 0; \n          v__95813[v_l_id_95790] = id(v__95804); \n        }\n        /* end map_seq */\n        v_l_id_95790 = atomic_inc(&(v_work_idx_8110)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8105; \n      v_work_idx_8105 = 0; \n      int v_l_id_95793 = atomic_inc(&(v_work_idx_8105)); \n      while((v_l_id_95793 < 1)){\n        float v_tmp_95876 = 0.0f; \n        v__81237 = v_tmp_95876; \n        /* reduce_seq */\n        for (int v_i_95794 = 0; v_i_95794 < v_MWidthC_1; v_i_95794 = (1 + v_i_95794)) {\n          v__81237 = add(v__81237, v__95813[(v_i_95794 + (v_MWidthC_1 * v_l_id_95793))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95795 = 0; \n          v__95818[v_wg_id_95789] = doubleMultiplyAdd(v__81237, v__95800, v__95799[v_wg_id_95789], v__95801); \n        }\n        /* end map_seq */\n        v_l_id_95793 = atomic_inc(&(v_work_idx_8105)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__95796",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95797",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95798",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95799",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95800",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95801",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95818",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95813",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}