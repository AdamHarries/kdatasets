{
  "name" : "awrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87072, const global float* restrict v__87073, const global float* restrict v__87074, const global float* restrict v__87075, float v__87076, float v__87077, global float* v__87095, global float* v__87085, global int* v__87079, local float* v__87090, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87081; \n  float v__87086; \n  float v__81237; \n  /* Private Memory */\n  float v__87083_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7296 = v__87079; \n    local int v_w_id_87064; \n    if (get_local_id(0) == 0) {\n      v_w_id_87064 = atomic_inc(v_work_idx_7296); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87064 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7294; \n        v_work_idx_7294 = 0; \n        int v_l_id_87065 = atomic_inc(&(v_work_idx_7294)); \n        while((v_l_id_87065 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_87066 = 0; v_i_87066 < 16; v_i_87066 = (1 + v_i_87066)) {\n            float v_tmp_87150 = 0.0f; \n            v__87081 = v_tmp_87150; \n            int v_index_87151 = v__87072[(v_l_id_87065 + (16 * v_MWidthC_1 * v_w_id_87064) + (v_MWidthC_1 * v_i_87066))]; \n            if (v_index_87151 < 0) {\n              v__87083_0 = v__87081; \n            } else {\n              if (v_index_87151 >= v_VLength_3) {\n                v__87083_0 = v__87081; \n              } else {\n                v__87083_0 = v__87074[v_index_87151]; \n              }\n            }\n            v__87085[(15 + (16 * v_MWidthC_1 * v_w_id_87064) + (-1 * v_i_87066) + (16 * v_l_id_87065))] = mult(v__87083_0, v__87073[(v_l_id_87065 + (16 * v_MWidthC_1 * v_w_id_87064) + (v_MWidthC_1 * v_i_87066))]); \n          }\n          /* end map_seq */\n          float v_tmp_87152 = 0.0f; \n          v__87086 = v_tmp_87152; \n          /* reduce_seq */\n          for (int v_i_87067 = 0; v_i_87067 < 16; v_i_87067 = (1 + v_i_87067)) {\n            v__87086 = add(v__87086, v__87085[(v_i_87067 + (16 * v_MWidthC_1 * v_w_id_87064) + (16 * v_l_id_87065))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87068 = 0; \n            v__87090[v_l_id_87065] = id(v__87086); \n          }\n          /* end map_seq */\n          v_l_id_87065 = atomic_inc(&(v_work_idx_7294)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_87069 = get_local_id(0); \n        float v_tmp_87155 = 0.0f; \n        v__81237 = v_tmp_87155; \n        /* reduce_seq */\n        for (int v_i_87070 = 0; v_i_87070 < v_MWidthC_1; v_i_87070 = (1 + v_i_87070)) {\n          v__81237 = add(v__81237, v__87090[(v_i_87070 + (v_MWidthC_1 * v_l_id_87069))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_87071 = 0; \n          v__87095[v_w_id_87064] = doubleMultiplyAdd(v__81237, v__87076, v__87075[v_w_id_87064], v__87077); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87064 = atomic_inc(v_work_idx_7296); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87072",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87073",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87074",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87075",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87076",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87077",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87085",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87079",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87095",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87090",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}