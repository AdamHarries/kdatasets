{
  "name" : "awrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96135, const global float* restrict v__96136, const global float* restrict v__96137, const global float* restrict v__96138, float v__96139, float v__96140, global float* v__96156, global int* v__96142, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96143; \n  float v__96146; \n  /* Private Memory */\n  float v__96148_0;\n  \n  float v__96150_0;\n  \n  int v__96154_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8140 = v__96142; \n    local int v_w_id_96131; \n    if (get_local_id(0) == 0) {\n      v_w_id_96131 = atomic_inc(v_work_idx_8140); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96131 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_96132 = get_local_id(0); v_l_id_96132 < 128; v_l_id_96132 = (v_l_id_96132 + get_local_size(0))) {\n        float v_tmp_96203 = 0.0f; \n        v__96143 = v_tmp_96203; \n        /* reduce_while_seq */\n        for (int v_i_96133 = 0; v_i_96133 < v_MWidthC_1; v_i_96133 = (1 + v_i_96133)) {\n          v__96154_0 = check(v__96143, v__96135[(v_i_96133 + (128 * v_MWidthC_1 * v_w_id_96131) + (v_MWidthC_1 * v_l_id_96132))]); \n          if (v__96154_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96204 = 0.0f; \n          v__96146 = v_tmp_96204; \n          int v_index_96205 = v__96135[(v_i_96133 + (128 * v_MWidthC_1 * v_w_id_96131) + (v_MWidthC_1 * v_l_id_96132))]; \n          if (v_index_96205 < 0) {\n            v__96148_0 = v__96146; \n          } else {\n            if (v_index_96205 >= v_VLength_3) {\n              v__96148_0 = v__96146; \n            } else {\n              v__96148_0 = v__96137[v_index_96205]; \n            }\n          }\n          v__96150_0 = mult(v__96148_0, v__96136[(v_i_96133 + (128 * v_MWidthC_1 * v_w_id_96131) + (v_MWidthC_1 * v_l_id_96132))]); \n          v__96143 = add(v__96150_0, v__96143); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96134 = 0; \n          v__96156[(v_l_id_96132 + (128 * v_w_id_96131))] = doubleMultiplyAdd(v__96143, v__96139, v__96138[(v_l_id_96132 + (128 * v_w_id_96131))], v__96140); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_96131 = atomic_inc(v_work_idx_8140); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96135",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96136",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96137",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96138",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96139",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96140",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96142",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96156",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}