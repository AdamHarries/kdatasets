{
  "name" : "swrg-alcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95500, const global float* restrict v__95501, const global float* restrict v__95502, const global float* restrict v__95503, float v__95504, float v__95505, global float* v__95522, local float* v__95517, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95508; \n  float v__95510; \n  float v__81237; \n  /* Private Memory */\n  float v__95512_0;\n  \n  float v__95514_0;\n  \n  for (int v_wg_id_95493 = get_group_id(0); v_wg_id_95493 < v_MHeight_2; v_wg_id_95493 = (v_wg_id_95493 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8080; \n      v_work_idx_8080 = 0; \n      int v_l_id_95494 = atomic_inc(&(v_work_idx_8080)); \n      while((v_l_id_95494 < v_MWidthC_1)){\n        float v_tmp_95579 = 0.0f; \n        v__95508 = v_tmp_95579; \n        /* reduce_seq */\n        for (int v_i_95495 = 0; v_i_95495 < 128; v_i_95495 = (1 + v_i_95495)) {\n          float v_tmp_95580 = 0.0f; \n          v__95510 = v_tmp_95580; \n          int v_index_95581 = v__95500[(v_l_id_95494 + (128 * v_MWidthC_1 * v_wg_id_95493) + (v_MWidthC_1 * v_i_95495))]; \n          if (v_index_95581 < 0) {\n            v__95512_0 = v__95510; \n          } else {\n            if (v_index_95581 >= v_VLength_3) {\n              v__95512_0 = v__95510; \n            } else {\n              v__95512_0 = v__95502[v_index_95581]; \n            }\n          }\n          v__95514_0 = mult(v__95512_0, v__95501[(v_l_id_95494 + (128 * v_MWidthC_1 * v_wg_id_95493) + (v_MWidthC_1 * v_i_95495))]); \n          v__95508 = add(v__95514_0, v__95508); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95496 = 0; \n          v__95517[v_l_id_95494] = id(v__95508); \n        }\n        /* end map_seq */\n        v_l_id_95494 = atomic_inc(&(v_work_idx_8080)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_95497 = get_local_id(0); \n      float v_tmp_95584 = 0.0f; \n      v__81237 = v_tmp_95584; \n      /* reduce_seq */\n      for (int v_i_95498 = 0; v_i_95498 < v_MWidthC_1; v_i_95498 = (1 + v_i_95498)) {\n        v__81237 = add(v__81237, v__95517[(v_i_95498 + (v_MWidthC_1 * v_l_id_95497))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_95499 = 0; \n        v__95522[v_wg_id_95493] = doubleMultiplyAdd(v__81237, v__95504, v__95503[v_wg_id_95493], v__95505); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__95500",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95501",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95502",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95503",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95504",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95505",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95522",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95517",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}