{
  "name" : "swrg-alcl-slcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__98930, const global float* restrict v__98931, const global float* restrict v__98932, const global float* restrict v__98933, float v__98934, float v__98935, global float* v__98954, local float* v__98949, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98938; \n  float v__98940; \n  float v__81237; \n  /* Private Memory */\n  float v__98942_0;\n  \n  float v__98944_0;\n  \n  int v__98948_0;\n  \n  for (int v_wg_id_98923 = get_group_id(0); v_wg_id_98923 < v_MHeight_2; v_wg_id_98923 = (v_wg_id_98923 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8401; \n      v_work_idx_8401 = 0; \n      int v_l_id_98924 = atomic_inc(&(v_work_idx_8401)); \n      while((v_l_id_98924 < v_MWidthC_1)){\n        float v_tmp_99014 = 0.0f; \n        v__98938 = v_tmp_99014; \n        /* reduce_while_seq */\n        for (int v_i_98925 = 0; v_i_98925 < 256; v_i_98925 = (1 + v_i_98925)) {\n          v__98948_0 = check(v__98938, v__98930[(v_l_id_98924 + (256 * v_MWidthC_1 * v_wg_id_98923) + (v_MWidthC_1 * v_i_98925))]); \n          if (v__98948_0) {\n          } else {\n            break;\n          }\n          float v_tmp_99015 = 0.0f; \n          v__98940 = v_tmp_99015; \n          int v_index_99016 = v__98930[(v_l_id_98924 + (256 * v_MWidthC_1 * v_wg_id_98923) + (v_MWidthC_1 * v_i_98925))]; \n          if (v_index_99016 < 0) {\n            v__98942_0 = v__98940; \n          } else {\n            if (v_index_99016 >= v_VLength_3) {\n              v__98942_0 = v__98940; \n            } else {\n              v__98942_0 = v__98932[v_index_99016]; \n            }\n          }\n          v__98944_0 = mult(v__98942_0, v__98931[(v_l_id_98924 + (256 * v_MWidthC_1 * v_wg_id_98923) + (v_MWidthC_1 * v_i_98925))]); \n          v__98938 = add(v__98944_0, v__98938); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98926 = 0; \n          v__98949[v_l_id_98924] = id(v__98938); \n        }\n        /* end map_seq */\n        v_l_id_98924 = atomic_inc(&(v_work_idx_8401)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98927 = get_local_id(0); \n      float v_tmp_99019 = 0.0f; \n      v__81237 = v_tmp_99019; \n      /* reduce_seq */\n      for (int v_i_98928 = 0; v_i_98928 < v_MWidthC_1; v_i_98928 = (1 + v_i_98928)) {\n        v__81237 = add(v__81237, v__98949[(v_i_98928 + (v_MWidthC_1 * v_l_id_98927))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98929 = 0; \n        v__98954[v_wg_id_98923] = doubleMultiplyAdd(v__81237, v__98934, v__98933[v_wg_id_98923], v__98935); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__98930",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98931",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98932",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98933",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98934",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98935",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98954",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98949",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}