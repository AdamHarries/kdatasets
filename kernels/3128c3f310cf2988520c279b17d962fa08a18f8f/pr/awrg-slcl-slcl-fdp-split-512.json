{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102989, const global float* restrict v__102990, const global float* restrict v__102991, const global float* restrict v__102992, float v__102993, float v__102994, global float* v__103012, global int* v__102996, local float* v__103007, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102998; \n  float v__103000; \n  float v__81237; \n  /* Private Memory */\n  float v__103002_0;\n  \n  float v__103004_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8783 = v__102996; \n    local int v_w_id_102982; \n    if (get_local_id(0) == 0) {\n      v_w_id_102982 = atomic_inc(v_work_idx_8783); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102982 < v_MHeight_2)){\n      for (int v_l_id_102983 = get_local_id(0); v_l_id_102983 < v_MWidthC_1; v_l_id_102983 = (v_l_id_102983 + get_local_size(0))) {\n        float v_tmp_103075 = 0.0f; \n        v__102998 = v_tmp_103075; \n        /* reduce_seq */\n        for (int v_i_102984 = 0; v_i_102984 < 512; v_i_102984 = (1 + v_i_102984)) {\n          float v_tmp_103076 = 0.0f; \n          v__103000 = v_tmp_103076; \n          int v_index_103077 = v__102989[(v_l_id_102983 + (512 * v_MWidthC_1 * v_w_id_102982) + (v_MWidthC_1 * v_i_102984))]; \n          if (v_index_103077 < 0) {\n            v__103002_0 = v__103000; \n          } else {\n            if (v_index_103077 >= v_VLength_3) {\n              v__103002_0 = v__103000; \n            } else {\n              v__103002_0 = v__102991[v_index_103077]; \n            }\n          }\n          v__103004_0 = mult(v__103002_0, v__102990[(v_l_id_102983 + (512 * v_MWidthC_1 * v_w_id_102982) + (v_MWidthC_1 * v_i_102984))]); \n          v__102998 = add(v__103004_0, v__102998); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102985 = 0; \n          v__103007[v_l_id_102983] = id(v__102998); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_102986 = get_local_id(0); \n        float v_tmp_103080 = 0.0f; \n        v__81237 = v_tmp_103080; \n        /* reduce_seq */\n        for (int v_i_102987 = 0; v_i_102987 < v_MWidthC_1; v_i_102987 = (1 + v_i_102987)) {\n          v__81237 = add(v__81237, v__103007[(v_i_102987 + (v_MWidthC_1 * v_l_id_102986))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102988 = 0; \n          v__103012[v_w_id_102982] = doubleMultiplyAdd(v__81237, v__102993, v__102992[v_w_id_102982], v__102994); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_102982 = atomic_inc(v_work_idx_8783); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__102989",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102990",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102991",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102993",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102994",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102996",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103007",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}