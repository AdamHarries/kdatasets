{
  "name" : "swrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81326, const global float* restrict v__81327, const global float* restrict v__81328, const global float* restrict v__81329, float v__81330, float v__81331, global float* v__81348, local float* v__81343, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81334; \n  float v__81336; \n  float v__81237; \n  /* Private Memory */\n  float v__81338_0;\n  \n  float v__81340_0;\n  \n  for (int v_wg_id_81319 = get_group_id(0); v_wg_id_81319 < v_MHeight_2; v_wg_id_81319 = (v_wg_id_81319 + get_num_groups(0))) {\n    for (int v_l_id_81320 = get_local_id(0); v_l_id_81320 < v_MWidthC_1; v_l_id_81320 = (v_l_id_81320 + get_local_size(0))) {\n      float v_tmp_81413 = 0.0f; \n      v__81334 = v_tmp_81413; \n      /* reduce_seq */\n      for (int v_i_81321 = 0; v_i_81321 < 8; v_i_81321 = (1 + v_i_81321)) {\n        float v_tmp_81414 = 0.0f; \n        v__81336 = v_tmp_81414; \n        int v_index_81415 = v__81326[(v_l_id_81320 + (8 * v_MWidthC_1 * v_wg_id_81319) + (v_MWidthC_1 * v_i_81321))]; \n        if (v_index_81415 < 0) {\n          v__81338_0 = v__81336; \n        } else {\n          if (v_index_81415 >= v_VLength_3) {\n            v__81338_0 = v__81336; \n          } else {\n            v__81338_0 = v__81328[v_index_81415]; \n          }\n        }\n        v__81340_0 = mult(v__81338_0, v__81327[(v_l_id_81320 + (8 * v_MWidthC_1 * v_wg_id_81319) + (v_MWidthC_1 * v_i_81321))]); \n        v__81334 = add(v__81340_0, v__81334); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81322 = 0; \n        v__81343[v_l_id_81320] = id(v__81334); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81323 = get_local_id(0); \n      float v_tmp_81418 = 0.0f; \n      v__81237 = v_tmp_81418; \n      /* reduce_seq */\n      for (int v_i_81324 = 0; v_i_81324 < v_MWidthC_1; v_i_81324 = (1 + v_i_81324)) {\n        v__81237 = add(v__81237, v__81343[(v_i_81324 + (v_MWidthC_1 * v_l_id_81323))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81325 = 0; \n        v__81348[v_wg_id_81319] = doubleMultiplyAdd(v__81237, v__81330, v__81329[v_wg_id_81319], v__81331); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__81326",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81327",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81328",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81329",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81330",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81331",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81343",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}