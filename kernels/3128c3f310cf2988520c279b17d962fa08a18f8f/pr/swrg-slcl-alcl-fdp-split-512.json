{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101638, const global float* restrict v__101639, const global float* restrict v__101640, const global float* restrict v__101641, float v__101642, float v__101643, global float* v__101660, local float* v__101655, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101646; \n  float v__101648; \n  float v__81237; \n  /* Private Memory */\n  float v__101650_0;\n  \n  float v__101652_0;\n  \n  for (int v_wg_id_101631 = get_group_id(0); v_wg_id_101631 < v_MHeight_2; v_wg_id_101631 = (v_wg_id_101631 + get_num_groups(0))) {\n    for (int v_l_id_101632 = get_local_id(0); v_l_id_101632 < v_MWidthC_1; v_l_id_101632 = (v_l_id_101632 + get_local_size(0))) {\n      float v_tmp_101721 = 0.0f; \n      v__101646 = v_tmp_101721; \n      /* reduce_seq */\n      for (int v_i_101633 = 0; v_i_101633 < 512; v_i_101633 = (1 + v_i_101633)) {\n        float v_tmp_101722 = 0.0f; \n        v__101648 = v_tmp_101722; \n        int v_index_101723 = v__101638[(v_l_id_101632 + (512 * v_MWidthC_1 * v_wg_id_101631) + (v_MWidthC_1 * v_i_101633))]; \n        if (v_index_101723 < 0) {\n          v__101650_0 = v__101648; \n        } else {\n          if (v_index_101723 >= v_VLength_3) {\n            v__101650_0 = v__101648; \n          } else {\n            v__101650_0 = v__101640[v_index_101723]; \n          }\n        }\n        v__101652_0 = mult(v__101650_0, v__101639[(v_l_id_101632 + (512 * v_MWidthC_1 * v_wg_id_101631) + (v_MWidthC_1 * v_i_101633))]); \n        v__101646 = add(v__101652_0, v__101646); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101634 = 0; \n        v__101655[v_l_id_101632] = id(v__101646); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8653; \n      v_work_idx_8653 = 0; \n      int v_l_id_101635 = atomic_inc(&(v_work_idx_8653)); \n      while((v_l_id_101635 < 1)){\n        float v_tmp_101726 = 0.0f; \n        v__81237 = v_tmp_101726; \n        /* reduce_seq */\n        for (int v_i_101636 = 0; v_i_101636 < v_MWidthC_1; v_i_101636 = (1 + v_i_101636)) {\n          v__81237 = add(v__81237, v__101655[(v_i_101636 + (v_MWidthC_1 * v_l_id_101635))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101637 = 0; \n          v__101660[v_wg_id_101631] = doubleMultiplyAdd(v__81237, v__101642, v__101641[v_wg_id_101631], v__101643); \n        }\n        /* end map_seq */\n        v_l_id_101635 = atomic_inc(&(v_work_idx_8653)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101638",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101639",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101640",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101641",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101642",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101643",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101660",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101655",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}