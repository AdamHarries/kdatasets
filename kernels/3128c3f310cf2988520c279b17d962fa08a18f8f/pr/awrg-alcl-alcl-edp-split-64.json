{
  "name" : "awrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__94219, const global float* restrict v__94220, const global float* restrict v__94221, const global float* restrict v__94222, float v__94223, float v__94224, global float* v__94244, global int* v__94226, local float* v__94239, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94228; \n  float v__94230; \n  float v__81237; \n  /* Private Memory */\n  float v__94232_0;\n  \n  float v__94234_0;\n  \n  int v__94238_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7974 = v__94226; \n    local int v_w_id_94212; \n    if (get_local_id(0) == 0) {\n      v_w_id_94212 = atomic_inc(v_work_idx_7974); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94212 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7972; \n        v_work_idx_7972 = 0; \n        int v_l_id_94213 = atomic_inc(&(v_work_idx_7972)); \n        while((v_l_id_94213 < v_MWidthC_1)){\n          float v_tmp_94298 = 0.0f; \n          v__94228 = v_tmp_94298; \n          /* reduce_while_seq */\n          for (int v_i_94214 = 0; v_i_94214 < 64; v_i_94214 = (1 + v_i_94214)) {\n            v__94238_0 = check(v__94228, v__94219[(v_l_id_94213 + (64 * v_MWidthC_1 * v_w_id_94212) + (v_MWidthC_1 * v_i_94214))]); \n            if (v__94238_0) {\n            } else {\n              break;\n            }\n            float v_tmp_94299 = 0.0f; \n            v__94230 = v_tmp_94299; \n            int v_index_94300 = v__94219[(v_l_id_94213 + (64 * v_MWidthC_1 * v_w_id_94212) + (v_MWidthC_1 * v_i_94214))]; \n            if (v_index_94300 < 0) {\n              v__94232_0 = v__94230; \n            } else {\n              if (v_index_94300 >= v_VLength_3) {\n                v__94232_0 = v__94230; \n              } else {\n                v__94232_0 = v__94221[v_index_94300]; \n              }\n            }\n            v__94234_0 = mult(v__94232_0, v__94220[(v_l_id_94213 + (64 * v_MWidthC_1 * v_w_id_94212) + (v_MWidthC_1 * v_i_94214))]); \n            v__94228 = add(v__94234_0, v__94228); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94215 = 0; \n            v__94239[v_l_id_94213] = id(v__94228); \n          }\n          /* end map_seq */\n          v_l_id_94213 = atomic_inc(&(v_work_idx_7972)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7967; \n        v_work_idx_7967 = 0; \n        int v_l_id_94216 = atomic_inc(&(v_work_idx_7967)); \n        while((v_l_id_94216 < 1)){\n          float v_tmp_94303 = 0.0f; \n          v__81237 = v_tmp_94303; \n          /* reduce_seq */\n          for (int v_i_94217 = 0; v_i_94217 < v_MWidthC_1; v_i_94217 = (1 + v_i_94217)) {\n            v__81237 = add(v__81237, v__94239[(v_i_94217 + (v_MWidthC_1 * v_l_id_94216))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94218 = 0; \n            v__94244[v_w_id_94212] = doubleMultiplyAdd(v__81237, v__94223, v__94222[v_w_id_94212], v__94224); \n          }\n          /* end map_seq */\n          v_l_id_94216 = atomic_inc(&(v_work_idx_7967)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94212 = atomic_inc(v_work_idx_7974); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94219",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94220",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94221",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94223",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94224",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94226",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94244",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94239",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}