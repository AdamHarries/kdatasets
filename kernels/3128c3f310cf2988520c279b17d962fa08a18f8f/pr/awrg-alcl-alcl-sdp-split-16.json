{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87369, const global float* restrict v__87370, const global float* restrict v__87371, const global float* restrict v__87372, float v__87373, float v__87374, global float* v__87392, global float* v__87382, global int* v__87376, local float* v__87387, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87378; \n  float v__87383; \n  float v__81237; \n  /* Private Memory */\n  float v__87380_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7328 = v__87376; \n    local int v_w_id_87361; \n    if (get_local_id(0) == 0) {\n      v_w_id_87361 = atomic_inc(v_work_idx_7328); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87361 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7326; \n        v_work_idx_7326 = 0; \n        int v_l_id_87362 = atomic_inc(&(v_work_idx_7326)); \n        while((v_l_id_87362 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_87363 = 0; v_i_87363 < 16; v_i_87363 = (1 + v_i_87363)) {\n            float v_tmp_87443 = 0.0f; \n            v__87378 = v_tmp_87443; \n            int v_index_87444 = v__87369[(v_l_id_87362 + (16 * v_MWidthC_1 * v_w_id_87361) + (v_MWidthC_1 * v_i_87363))]; \n            if (v_index_87444 < 0) {\n              v__87380_0 = v__87378; \n            } else {\n              if (v_index_87444 >= v_VLength_3) {\n                v__87380_0 = v__87378; \n              } else {\n                v__87380_0 = v__87371[v_index_87444]; \n              }\n            }\n            v__87382[(15 + (16 * v_MWidthC_1 * v_w_id_87361) + (-1 * v_i_87363) + (16 * v_l_id_87362))] = mult(v__87380_0, v__87370[(v_l_id_87362 + (16 * v_MWidthC_1 * v_w_id_87361) + (v_MWidthC_1 * v_i_87363))]); \n          }\n          /* end map_seq */\n          float v_tmp_87445 = 0.0f; \n          v__87383 = v_tmp_87445; \n          /* reduce_seq */\n          for (int v_i_87364 = 0; v_i_87364 < 16; v_i_87364 = (1 + v_i_87364)) {\n            v__87383 = add(v__87383, v__87382[(v_i_87364 + (16 * v_MWidthC_1 * v_w_id_87361) + (16 * v_l_id_87362))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87365 = 0; \n            v__87387[v_l_id_87362] = id(v__87383); \n          }\n          /* end map_seq */\n          v_l_id_87362 = atomic_inc(&(v_work_idx_7326)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7320; \n        v_work_idx_7320 = 0; \n        int v_l_id_87366 = atomic_inc(&(v_work_idx_7320)); \n        while((v_l_id_87366 < 1)){\n          float v_tmp_87448 = 0.0f; \n          v__81237 = v_tmp_87448; \n          /* reduce_seq */\n          for (int v_i_87367 = 0; v_i_87367 < v_MWidthC_1; v_i_87367 = (1 + v_i_87367)) {\n            v__81237 = add(v__81237, v__87387[(v_i_87367 + (v_MWidthC_1 * v_l_id_87366))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87368 = 0; \n            v__87392[v_w_id_87361] = doubleMultiplyAdd(v__81237, v__87373, v__87372[v_w_id_87361], v__87374); \n          }\n          /* end map_seq */\n          v_l_id_87366 = atomic_inc(&(v_work_idx_7320)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87361 = atomic_inc(v_work_idx_7328); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87369",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87370",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87371",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87372",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87373",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87374",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87382",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87376",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87387",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}