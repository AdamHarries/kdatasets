{
  "name" : "swrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85325, const global float* restrict v__85326, const global float* restrict v__85327, const global float* restrict v__85328, float v__85329, float v__85330, global float* v__85345, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85332; \n  float v__85335; \n  /* Private Memory */\n  float v__85337_0;\n  \n  float v__85339_0;\n  \n  int v__85343_0;\n  \n  for (int v_wg_id_85321 = get_group_id(0); v_wg_id_85321 < ((v_MHeight_2)/(16)); v_wg_id_85321 = (v_wg_id_85321 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7125; \n      v_work_idx_7125 = 0; \n      int v_l_id_85322 = atomic_inc(&(v_work_idx_7125)); \n      while((v_l_id_85322 < 16)){\n        float v_tmp_85389 = 0.0f; \n        v__85332 = v_tmp_85389; \n        /* reduce_while_seq */\n        for (int v_i_85323 = 0; v_i_85323 < v_MWidthC_1; v_i_85323 = (1 + v_i_85323)) {\n          v__85343_0 = check(v__85332, v__85325[(v_i_85323 + (16 * v_MWidthC_1 * v_wg_id_85321) + (v_MWidthC_1 * v_l_id_85322))]); \n          if (v__85343_0) {\n          } else {\n            break;\n          }\n          float v_tmp_85390 = 0.0f; \n          v__85335 = v_tmp_85390; \n          int v_index_85391 = v__85325[(v_i_85323 + (16 * v_MWidthC_1 * v_wg_id_85321) + (v_MWidthC_1 * v_l_id_85322))]; \n          if (v_index_85391 < 0) {\n            v__85337_0 = v__85335; \n          } else {\n            if (v_index_85391 >= v_VLength_3) {\n              v__85337_0 = v__85335; \n            } else {\n              v__85337_0 = v__85327[v_index_85391]; \n            }\n          }\n          v__85339_0 = mult(v__85337_0, v__85326[(v_i_85323 + (16 * v_MWidthC_1 * v_wg_id_85321) + (v_MWidthC_1 * v_l_id_85322))]); \n          v__85332 = add(v__85339_0, v__85332); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85324 = 0; \n          v__85345[(v_l_id_85322 + (16 * v_wg_id_85321))] = doubleMultiplyAdd(v__85332, v__85329, v__85328[(v_l_id_85322 + (16 * v_wg_id_85321))], v__85330); \n        }\n        /* end map_seq */\n        v_l_id_85322 = atomic_inc(&(v_work_idx_7125)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__85325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85326",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85327",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85329",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85330",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85345",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}