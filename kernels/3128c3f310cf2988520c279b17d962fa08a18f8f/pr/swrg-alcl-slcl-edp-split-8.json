{
  "name" : "swrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__82270, const global float* restrict v__82271, const global float* restrict v__82272, const global float* restrict v__82273, float v__82274, float v__82275, global float* v__82294, local float* v__82289, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82278; \n  float v__82280; \n  float v__81237; \n  /* Private Memory */\n  float v__82282_0;\n  \n  float v__82284_0;\n  \n  int v__82288_0;\n  \n  for (int v_wg_id_82263 = get_group_id(0); v_wg_id_82263 < v_MHeight_2; v_wg_id_82263 = (v_wg_id_82263 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6841; \n      v_work_idx_6841 = 0; \n      int v_l_id_82264 = atomic_inc(&(v_work_idx_6841)); \n      while((v_l_id_82264 < v_MWidthC_1)){\n        float v_tmp_82354 = 0.0f; \n        v__82278 = v_tmp_82354; \n        /* reduce_while_seq */\n        for (int v_i_82265 = 0; v_i_82265 < 8; v_i_82265 = (1 + v_i_82265)) {\n          v__82288_0 = check(v__82278, v__82270[(v_l_id_82264 + (8 * v_MWidthC_1 * v_wg_id_82263) + (v_MWidthC_1 * v_i_82265))]); \n          if (v__82288_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82355 = 0.0f; \n          v__82280 = v_tmp_82355; \n          int v_index_82356 = v__82270[(v_l_id_82264 + (8 * v_MWidthC_1 * v_wg_id_82263) + (v_MWidthC_1 * v_i_82265))]; \n          if (v_index_82356 < 0) {\n            v__82282_0 = v__82280; \n          } else {\n            if (v_index_82356 >= v_VLength_3) {\n              v__82282_0 = v__82280; \n            } else {\n              v__82282_0 = v__82272[v_index_82356]; \n            }\n          }\n          v__82284_0 = mult(v__82282_0, v__82271[(v_l_id_82264 + (8 * v_MWidthC_1 * v_wg_id_82263) + (v_MWidthC_1 * v_i_82265))]); \n          v__82278 = add(v__82284_0, v__82278); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82266 = 0; \n          v__82289[v_l_id_82264] = id(v__82278); \n        }\n        /* end map_seq */\n        v_l_id_82264 = atomic_inc(&(v_work_idx_6841)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_82267 = get_local_id(0); \n      float v_tmp_82359 = 0.0f; \n      v__81237 = v_tmp_82359; \n      /* reduce_seq */\n      for (int v_i_82268 = 0; v_i_82268 < v_MWidthC_1; v_i_82268 = (1 + v_i_82268)) {\n        v__81237 = add(v__81237, v__82289[(v_i_82268 + (v_MWidthC_1 * v_l_id_82267))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_82269 = 0; \n        v__82294[v_wg_id_82263] = doubleMultiplyAdd(v__81237, v__82274, v__82273[v_wg_id_82263], v__82275); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82270",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82271",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82272",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82273",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82274",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82275",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__82294",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82289",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}