{
  "name" : "awrg-alcl-slcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90598, const global float* restrict v__90599, const global float* restrict v__90600, const global float* restrict v__90601, float v__90602, float v__90603, global float* v__90623, global int* v__90605, local float* v__90618, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90607; \n  float v__90609; \n  float v__81237; \n  /* Private Memory */\n  float v__90611_0;\n  \n  float v__90613_0;\n  \n  int v__90617_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7628 = v__90605; \n    local int v_w_id_90591; \n    if (get_local_id(0) == 0) {\n      v_w_id_90591 = atomic_inc(v_work_idx_7628); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90591 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7626; \n        v_work_idx_7626 = 0; \n        int v_l_id_90592 = atomic_inc(&(v_work_idx_7626)); \n        while((v_l_id_90592 < v_MWidthC_1)){\n          float v_tmp_90681 = 0.0f; \n          v__90607 = v_tmp_90681; \n          /* reduce_while_seq */\n          for (int v_i_90593 = 0; v_i_90593 < 32; v_i_90593 = (1 + v_i_90593)) {\n            v__90617_0 = check(v__90607, v__90598[(v_l_id_90592 + (32 * v_MWidthC_1 * v_w_id_90591) + (v_MWidthC_1 * v_i_90593))]); \n            if (v__90617_0) {\n            } else {\n              break;\n            }\n            float v_tmp_90682 = 0.0f; \n            v__90609 = v_tmp_90682; \n            int v_index_90683 = v__90598[(v_l_id_90592 + (32 * v_MWidthC_1 * v_w_id_90591) + (v_MWidthC_1 * v_i_90593))]; \n            if (v_index_90683 < 0) {\n              v__90611_0 = v__90609; \n            } else {\n              if (v_index_90683 >= v_VLength_3) {\n                v__90611_0 = v__90609; \n              } else {\n                v__90611_0 = v__90600[v_index_90683]; \n              }\n            }\n            v__90613_0 = mult(v__90611_0, v__90599[(v_l_id_90592 + (32 * v_MWidthC_1 * v_w_id_90591) + (v_MWidthC_1 * v_i_90593))]); \n            v__90607 = add(v__90613_0, v__90607); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90594 = 0; \n            v__90618[v_l_id_90592] = id(v__90607); \n          }\n          /* end map_seq */\n          v_l_id_90592 = atomic_inc(&(v_work_idx_7626)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_90595 = get_local_id(0); \n        float v_tmp_90686 = 0.0f; \n        v__81237 = v_tmp_90686; \n        /* reduce_seq */\n        for (int v_i_90596 = 0; v_i_90596 < v_MWidthC_1; v_i_90596 = (1 + v_i_90596)) {\n          v__81237 = add(v__81237, v__90618[(v_i_90596 + (v_MWidthC_1 * v_l_id_90595))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90597 = 0; \n          v__90623[v_w_id_90591] = doubleMultiplyAdd(v__81237, v__90602, v__90601[v_w_id_90591], v__90603); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90591 = atomic_inc(v_work_idx_7628); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90598",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90599",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90600",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90601",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90602",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90603",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90605",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90618",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}