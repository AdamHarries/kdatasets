{
  "name" : "awrg-slcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92888, const global float* restrict v__92889, const global float* restrict v__92890, const global float* restrict v__92891, float v__92892, float v__92893, global float* v__92911, global float* v__92901, global int* v__92895, local float* v__92906, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92897; \n  float v__92902; \n  float v__81237; \n  /* Private Memory */\n  float v__92899_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7838 = v__92895; \n    local int v_w_id_92880; \n    if (get_local_id(0) == 0) {\n      v_w_id_92880 = atomic_inc(v_work_idx_7838); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92880 < v_MHeight_2)){\n      for (int v_l_id_92881 = get_local_id(0); v_l_id_92881 < v_MWidthC_1; v_l_id_92881 = (v_l_id_92881 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_92882 = 0; v_i_92882 < 64; v_i_92882 = (1 + v_i_92882)) {\n          float v_tmp_92974 = 0.0f; \n          v__92897 = v_tmp_92974; \n          int v_index_92975 = v__92888[(v_l_id_92881 + (64 * v_MWidthC_1 * v_w_id_92880) + (v_MWidthC_1 * v_i_92882))]; \n          if (v_index_92975 < 0) {\n            v__92899_0 = v__92897; \n          } else {\n            if (v_index_92975 >= v_VLength_3) {\n              v__92899_0 = v__92897; \n            } else {\n              v__92899_0 = v__92890[v_index_92975]; \n            }\n          }\n          v__92901[(63 + (64 * v_MWidthC_1 * v_w_id_92880) + (-1 * v_i_92882) + (64 * v_l_id_92881))] = mult(v__92899_0, v__92889[(v_l_id_92881 + (64 * v_MWidthC_1 * v_w_id_92880) + (v_MWidthC_1 * v_i_92882))]); \n        }\n        /* end map_seq */\n        float v_tmp_92976 = 0.0f; \n        v__92902 = v_tmp_92976; \n        /* reduce_seq */\n        for (int v_i_92883 = 0; v_i_92883 < 64; v_i_92883 = (1 + v_i_92883)) {\n          v__92902 = add(v__92902, v__92901[(v_i_92883 + (64 * v_MWidthC_1 * v_w_id_92880) + (64 * v_l_id_92881))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92884 = 0; \n          v__92906[v_l_id_92881] = id(v__92902); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_92885 = get_local_id(0); \n        float v_tmp_92979 = 0.0f; \n        v__81237 = v_tmp_92979; \n        /* reduce_seq */\n        for (int v_i_92886 = 0; v_i_92886 < v_MWidthC_1; v_i_92886 = (1 + v_i_92886)) {\n          v__81237 = add(v__81237, v__92906[(v_i_92886 + (v_MWidthC_1 * v_l_id_92885))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92887 = 0; \n          v__92911[v_w_id_92880] = doubleMultiplyAdd(v__81237, v__92892, v__92891[v_w_id_92880], v__92893); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_92880 = atomic_inc(v_work_idx_7838); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92888",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92889",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92890",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92891",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92892",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92893",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92901",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92895",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__92911",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92906",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}