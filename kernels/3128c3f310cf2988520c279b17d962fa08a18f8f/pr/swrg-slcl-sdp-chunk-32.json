{
  "name" : "swrg-slcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87651, const global float* restrict v__87652, const global float* restrict v__87653, const global float* restrict v__87654, float v__87655, float v__87656, global float* v__87669, global float* v__87663, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87659; \n  float v__87664; \n  /* Private Memory */\n  float v__87661_0;\n  \n  for (int v_wg_id_87646 = get_group_id(0); v_wg_id_87646 < ((v_MHeight_2)/(32)); v_wg_id_87646 = (v_wg_id_87646 + get_num_groups(0))) {\n    for (int v_l_id_87647 = get_local_id(0); v_l_id_87647 < 32; v_l_id_87647 = (v_l_id_87647 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_87648 = 0; v_i_87648 < v_MWidthC_1; v_i_87648 = (1 + v_i_87648)) {\n        float v_tmp_87713 = 0.0f; \n        v__87659 = v_tmp_87713; \n        int v_index_87714 = v__87651[(v_i_87648 + (32 * v_MWidthC_1 * v_wg_id_87646) + (v_MWidthC_1 * v_l_id_87647))]; \n        if (v_index_87714 < 0) {\n          v__87661_0 = v__87659; \n        } else {\n          if (v_index_87714 >= v_VLength_3) {\n            v__87661_0 = v__87659; \n          } else {\n            v__87661_0 = v__87653[v_index_87714]; \n          }\n        }\n        v__87663[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_87646) + (-1 * v_i_87648) + (v_MWidthC_1 * v_l_id_87647))] = mult(v__87661_0, v__87652[(v_i_87648 + (32 * v_MWidthC_1 * v_wg_id_87646) + (v_MWidthC_1 * v_l_id_87647))]); \n      }\n      /* end map_seq */\n      float v_tmp_87715 = 0.0f; \n      v__87664 = v_tmp_87715; \n      /* reduce_seq */\n      for (int v_i_87649 = 0; v_i_87649 < v_MWidthC_1; v_i_87649 = (1 + v_i_87649)) {\n        v__87664 = add(v__87664, v__87663[(v_i_87649 + (32 * v_MWidthC_1 * v_wg_id_87646) + (v_MWidthC_1 * v_l_id_87647))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87650 = 0; \n        v__87669[(v_l_id_87647 + (32 * v_wg_id_87646))] = doubleMultiplyAdd(v__87664, v__87655, v__87654[(v_l_id_87647 + (32 * v_wg_id_87646))], v__87656); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__87651",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87653",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87654",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87655",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87656",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87663",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__87669",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}