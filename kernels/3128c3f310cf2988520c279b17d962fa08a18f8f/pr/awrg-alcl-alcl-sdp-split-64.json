{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94033, const global float* restrict v__94034, const global float* restrict v__94035, const global float* restrict v__94036, float v__94037, float v__94038, global float* v__94056, global float* v__94046, global int* v__94040, local float* v__94051, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94042; \n  float v__94047; \n  float v__81237; \n  /* Private Memory */\n  float v__94044_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7952 = v__94040; \n    local int v_w_id_94025; \n    if (get_local_id(0) == 0) {\n      v_w_id_94025 = atomic_inc(v_work_idx_7952); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_94025 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7950; \n        v_work_idx_7950 = 0; \n        int v_l_id_94026 = atomic_inc(&(v_work_idx_7950)); \n        while((v_l_id_94026 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_94027 = 0; v_i_94027 < 64; v_i_94027 = (1 + v_i_94027)) {\n            float v_tmp_94107 = 0.0f; \n            v__94042 = v_tmp_94107; \n            int v_index_94108 = v__94033[(v_l_id_94026 + (64 * v_MWidthC_1 * v_w_id_94025) + (v_MWidthC_1 * v_i_94027))]; \n            if (v_index_94108 < 0) {\n              v__94044_0 = v__94042; \n            } else {\n              if (v_index_94108 >= v_VLength_3) {\n                v__94044_0 = v__94042; \n              } else {\n                v__94044_0 = v__94035[v_index_94108]; \n              }\n            }\n            v__94046[(63 + (64 * v_MWidthC_1 * v_w_id_94025) + (-1 * v_i_94027) + (64 * v_l_id_94026))] = mult(v__94044_0, v__94034[(v_l_id_94026 + (64 * v_MWidthC_1 * v_w_id_94025) + (v_MWidthC_1 * v_i_94027))]); \n          }\n          /* end map_seq */\n          float v_tmp_94109 = 0.0f; \n          v__94047 = v_tmp_94109; \n          /* reduce_seq */\n          for (int v_i_94028 = 0; v_i_94028 < 64; v_i_94028 = (1 + v_i_94028)) {\n            v__94047 = add(v__94047, v__94046[(v_i_94028 + (64 * v_MWidthC_1 * v_w_id_94025) + (64 * v_l_id_94026))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94029 = 0; \n            v__94051[v_l_id_94026] = id(v__94047); \n          }\n          /* end map_seq */\n          v_l_id_94026 = atomic_inc(&(v_work_idx_7950)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7944; \n        v_work_idx_7944 = 0; \n        int v_l_id_94030 = atomic_inc(&(v_work_idx_7944)); \n        while((v_l_id_94030 < 1)){\n          float v_tmp_94112 = 0.0f; \n          v__81237 = v_tmp_94112; \n          /* reduce_seq */\n          for (int v_i_94031 = 0; v_i_94031 < v_MWidthC_1; v_i_94031 = (1 + v_i_94031)) {\n            v__81237 = add(v__81237, v__94051[(v_i_94031 + (v_MWidthC_1 * v_l_id_94030))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_94032 = 0; \n            v__94056[v_w_id_94025] = doubleMultiplyAdd(v__81237, v__94037, v__94036[v_w_id_94025], v__94038); \n          }\n          /* end map_seq */\n          v_l_id_94030 = atomic_inc(&(v_work_idx_7944)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_94025 = atomic_inc(v_work_idx_7952); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94033",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94034",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94035",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94036",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94037",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94038",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94046",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94040",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__94056",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94051",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}