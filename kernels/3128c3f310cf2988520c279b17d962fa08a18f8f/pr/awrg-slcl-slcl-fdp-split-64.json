{
  "name" : "awrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92993, const global float* restrict v__92994, const global float* restrict v__92995, const global float* restrict v__92996, float v__92997, float v__92998, global float* v__93016, global int* v__93000, local float* v__93011, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93002; \n  float v__93004; \n  float v__81237; \n  /* Private Memory */\n  float v__93006_0;\n  \n  float v__93008_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7847 = v__93000; \n    local int v_w_id_92986; \n    if (get_local_id(0) == 0) {\n      v_w_id_92986 = atomic_inc(v_work_idx_7847); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_92986 < v_MHeight_2)){\n      for (int v_l_id_92987 = get_local_id(0); v_l_id_92987 < v_MWidthC_1; v_l_id_92987 = (v_l_id_92987 + get_local_size(0))) {\n        float v_tmp_93079 = 0.0f; \n        v__93002 = v_tmp_93079; \n        /* reduce_seq */\n        for (int v_i_92988 = 0; v_i_92988 < 64; v_i_92988 = (1 + v_i_92988)) {\n          float v_tmp_93080 = 0.0f; \n          v__93004 = v_tmp_93080; \n          int v_index_93081 = v__92993[(v_l_id_92987 + (64 * v_MWidthC_1 * v_w_id_92986) + (v_MWidthC_1 * v_i_92988))]; \n          if (v_index_93081 < 0) {\n            v__93006_0 = v__93004; \n          } else {\n            if (v_index_93081 >= v_VLength_3) {\n              v__93006_0 = v__93004; \n            } else {\n              v__93006_0 = v__92995[v_index_93081]; \n            }\n          }\n          v__93008_0 = mult(v__93006_0, v__92994[(v_l_id_92987 + (64 * v_MWidthC_1 * v_w_id_92986) + (v_MWidthC_1 * v_i_92988))]); \n          v__93002 = add(v__93008_0, v__93002); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92989 = 0; \n          v__93011[v_l_id_92987] = id(v__93002); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_92990 = get_local_id(0); \n        float v_tmp_93084 = 0.0f; \n        v__81237 = v_tmp_93084; \n        /* reduce_seq */\n        for (int v_i_92991 = 0; v_i_92991 < v_MWidthC_1; v_i_92991 = (1 + v_i_92991)) {\n          v__81237 = add(v__81237, v__93011[(v_i_92991 + (v_MWidthC_1 * v_l_id_92990))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92992 = 0; \n          v__93016[v_w_id_92986] = doubleMultiplyAdd(v__81237, v__92997, v__92996[v_w_id_92986], v__92998); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_92986 = atomic_inc(v_work_idx_7847); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92993",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92994",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92995",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92997",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92998",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93000",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93011",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}