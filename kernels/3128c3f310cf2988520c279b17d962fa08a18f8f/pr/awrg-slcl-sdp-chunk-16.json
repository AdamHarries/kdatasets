{
  "name" : "awrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85991, const global float* restrict v__85992, const global float* restrict v__85993, const global float* restrict v__85994, float v__85995, float v__85996, global float* v__86010, global float* v__86004, global int* v__85998, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86000; \n  float v__86005; \n  /* Private Memory */\n  float v__86002_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7192 = v__85998; \n    local int v_w_id_85986; \n    if (get_local_id(0) == 0) {\n      v_w_id_85986 = atomic_inc(v_work_idx_7192); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_85986 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_85987 = get_local_id(0); v_l_id_85987 < 16; v_l_id_85987 = (v_l_id_85987 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_85988 = 0; v_i_85988 < v_MWidthC_1; v_i_85988 = (1 + v_i_85988)) {\n          float v_tmp_86053 = 0.0f; \n          v__86000 = v_tmp_86053; \n          int v_index_86054 = v__85991[(v_i_85988 + (16 * v_MWidthC_1 * v_w_id_85986) + (v_MWidthC_1 * v_l_id_85987))]; \n          if (v_index_86054 < 0) {\n            v__86002_0 = v__86000; \n          } else {\n            if (v_index_86054 >= v_VLength_3) {\n              v__86002_0 = v__86000; \n            } else {\n              v__86002_0 = v__85993[v_index_86054]; \n            }\n          }\n          v__86004[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_w_id_85986) + (-1 * v_i_85988) + (v_MWidthC_1 * v_l_id_85987))] = mult(v__86002_0, v__85992[(v_i_85988 + (16 * v_MWidthC_1 * v_w_id_85986) + (v_MWidthC_1 * v_l_id_85987))]); \n        }\n        /* end map_seq */\n        float v_tmp_86055 = 0.0f; \n        v__86005 = v_tmp_86055; \n        /* reduce_seq */\n        for (int v_i_85989 = 0; v_i_85989 < v_MWidthC_1; v_i_85989 = (1 + v_i_85989)) {\n          v__86005 = add(v__86005, v__86004[(v_i_85989 + (16 * v_MWidthC_1 * v_w_id_85986) + (v_MWidthC_1 * v_l_id_85987))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85990 = 0; \n          v__86010[(v_l_id_85987 + (16 * v_w_id_85986))] = doubleMultiplyAdd(v__86005, v__85995, v__85994[(v_l_id_85987 + (16 * v_w_id_85986))], v__85996); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_85986 = atomic_inc(v_work_idx_7192); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85991",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85993",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85994",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85995",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85996",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86004",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85998",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86010",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}