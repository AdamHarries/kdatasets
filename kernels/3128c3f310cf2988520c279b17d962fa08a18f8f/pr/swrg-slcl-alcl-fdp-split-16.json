{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84978, const global float* restrict v__84979, const global float* restrict v__84980, const global float* restrict v__84981, float v__84982, float v__84983, global float* v__85000, local float* v__84995, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84986; \n  float v__84988; \n  float v__81237; \n  /* Private Memory */\n  float v__84990_0;\n  \n  float v__84992_0;\n  \n  for (int v_wg_id_84971 = get_group_id(0); v_wg_id_84971 < v_MHeight_2; v_wg_id_84971 = (v_wg_id_84971 + get_num_groups(0))) {\n    for (int v_l_id_84972 = get_local_id(0); v_l_id_84972 < v_MWidthC_1; v_l_id_84972 = (v_l_id_84972 + get_local_size(0))) {\n      float v_tmp_85061 = 0.0f; \n      v__84986 = v_tmp_85061; \n      /* reduce_seq */\n      for (int v_i_84973 = 0; v_i_84973 < 16; v_i_84973 = (1 + v_i_84973)) {\n        float v_tmp_85062 = 0.0f; \n        v__84988 = v_tmp_85062; \n        int v_index_85063 = v__84978[(v_l_id_84972 + (16 * v_MWidthC_1 * v_wg_id_84971) + (v_MWidthC_1 * v_i_84973))]; \n        if (v_index_85063 < 0) {\n          v__84990_0 = v__84988; \n        } else {\n          if (v_index_85063 >= v_VLength_3) {\n            v__84990_0 = v__84988; \n          } else {\n            v__84990_0 = v__84980[v_index_85063]; \n          }\n        }\n        v__84992_0 = mult(v__84990_0, v__84979[(v_l_id_84972 + (16 * v_MWidthC_1 * v_wg_id_84971) + (v_MWidthC_1 * v_i_84973))]); \n        v__84986 = add(v__84992_0, v__84986); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84974 = 0; \n        v__84995[v_l_id_84972] = id(v__84986); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7093; \n      v_work_idx_7093 = 0; \n      int v_l_id_84975 = atomic_inc(&(v_work_idx_7093)); \n      while((v_l_id_84975 < 1)){\n        float v_tmp_85066 = 0.0f; \n        v__81237 = v_tmp_85066; \n        /* reduce_seq */\n        for (int v_i_84976 = 0; v_i_84976 < v_MWidthC_1; v_i_84976 = (1 + v_i_84976)) {\n          v__81237 = add(v__81237, v__84995[(v_i_84976 + (v_MWidthC_1 * v_l_id_84975))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84977 = 0; \n          v__85000[v_wg_id_84971] = doubleMultiplyAdd(v__81237, v__84982, v__84981[v_wg_id_84971], v__84983); \n        }\n        /* end map_seq */\n        v_l_id_84975 = atomic_inc(&(v_work_idx_7093)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__84978",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84979",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84980",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84982",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84983",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84995",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}