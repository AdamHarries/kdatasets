{
  "name" : "swrg-slcl-edp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97795, const global float* restrict v__97796, const global float* restrict v__97797, const global float* restrict v__97798, float v__97799, float v__97800, global float* v__97815, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97802; \n  float v__97805; \n  /* Private Memory */\n  float v__97807_0;\n  \n  float v__97809_0;\n  \n  int v__97813_0;\n  \n  for (int v_wg_id_97791 = get_group_id(0); v_wg_id_97791 < ((v_MHeight_2)/(256)); v_wg_id_97791 = (v_wg_id_97791 + get_num_groups(0))) {\n    for (int v_l_id_97792 = get_local_id(0); v_l_id_97792 < 256; v_l_id_97792 = (v_l_id_97792 + get_local_size(0))) {\n      float v_tmp_97863 = 0.0f; \n      v__97802 = v_tmp_97863; \n      /* reduce_while_seq */\n      for (int v_i_97793 = 0; v_i_97793 < v_MWidthC_1; v_i_97793 = (1 + v_i_97793)) {\n        v__97813_0 = check(v__97802, v__97795[(v_i_97793 + (256 * v_MWidthC_1 * v_wg_id_97791) + (v_MWidthC_1 * v_l_id_97792))]); \n        if (v__97813_0) {\n        } else {\n          break;\n        }\n        float v_tmp_97864 = 0.0f; \n        v__97805 = v_tmp_97864; \n        int v_index_97865 = v__97795[(v_i_97793 + (256 * v_MWidthC_1 * v_wg_id_97791) + (v_MWidthC_1 * v_l_id_97792))]; \n        if (v_index_97865 < 0) {\n          v__97807_0 = v__97805; \n        } else {\n          if (v_index_97865 >= v_VLength_3) {\n            v__97807_0 = v__97805; \n          } else {\n            v__97807_0 = v__97797[v_index_97865]; \n          }\n        }\n        v__97809_0 = mult(v__97807_0, v__97796[(v_i_97793 + (256 * v_MWidthC_1 * v_wg_id_97791) + (v_MWidthC_1 * v_l_id_97792))]); \n        v__97802 = add(v__97809_0, v__97802); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_97794 = 0; \n        v__97815[(v_l_id_97792 + (256 * v_wg_id_97791))] = doubleMultiplyAdd(v__97802, v__97799, v__97798[(v_l_id_97792 + (256 * v_wg_id_97791))], v__97800); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__97795",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97796",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97797",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97798",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97799",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97800",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__97815",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}