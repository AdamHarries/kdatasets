{
  "name" : "awrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__104122, const global float* restrict v__104123, const global float* restrict v__104124, const global float* restrict v__104125, float v__104126, float v__104127, global float* v__104145, global int* v__104129, local float* v__104140, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104131; \n  float v__104133; \n  float v__81237; \n  /* Private Memory */\n  float v__104135_0;\n  \n  float v__104137_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8899 = v__104129; \n    local int v_w_id_104115; \n    if (get_local_id(0) == 0) {\n      v_w_id_104115 = atomic_inc(v_work_idx_8899); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104115 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8897; \n        v_work_idx_8897 = 0; \n        int v_l_id_104116 = atomic_inc(&(v_work_idx_8897)); \n        while((v_l_id_104116 < v_MWidthC_1)){\n          float v_tmp_104196 = 0.0f; \n          v__104131 = v_tmp_104196; \n          /* reduce_seq */\n          for (int v_i_104117 = 0; v_i_104117 < 512; v_i_104117 = (1 + v_i_104117)) {\n            float v_tmp_104197 = 0.0f; \n            v__104133 = v_tmp_104197; \n            int v_index_104198 = v__104122[(v_l_id_104116 + (512 * v_MWidthC_1 * v_w_id_104115) + (v_MWidthC_1 * v_i_104117))]; \n            if (v_index_104198 < 0) {\n              v__104135_0 = v__104133; \n            } else {\n              if (v_index_104198 >= v_VLength_3) {\n                v__104135_0 = v__104133; \n              } else {\n                v__104135_0 = v__104124[v_index_104198]; \n              }\n            }\n            v__104137_0 = mult(v__104135_0, v__104123[(v_l_id_104116 + (512 * v_MWidthC_1 * v_w_id_104115) + (v_MWidthC_1 * v_i_104117))]); \n            v__104131 = add(v__104137_0, v__104131); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104118 = 0; \n            v__104140[v_l_id_104116] = id(v__104131); \n          }\n          /* end map_seq */\n          v_l_id_104116 = atomic_inc(&(v_work_idx_8897)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8892; \n        v_work_idx_8892 = 0; \n        int v_l_id_104119 = atomic_inc(&(v_work_idx_8892)); \n        while((v_l_id_104119 < 1)){\n          float v_tmp_104201 = 0.0f; \n          v__81237 = v_tmp_104201; \n          /* reduce_seq */\n          for (int v_i_104120 = 0; v_i_104120 < v_MWidthC_1; v_i_104120 = (1 + v_i_104120)) {\n            v__81237 = add(v__81237, v__104140[(v_i_104120 + (v_MWidthC_1 * v_l_id_104119))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104121 = 0; \n            v__104145[v_w_id_104115] = doubleMultiplyAdd(v__81237, v__104126, v__104125[v_w_id_104115], v__104127); \n          }\n          /* end map_seq */\n          v_l_id_104119 = atomic_inc(&(v_work_idx_8892)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104115 = atomic_inc(v_work_idx_8899); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__104122",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104123",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104124",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104125",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104126",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104127",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104129",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104145",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104140",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}