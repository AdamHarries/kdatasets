{
  "name" : "swrg-alcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85406, const global float* restrict v__85407, const global float* restrict v__85408, const global float* restrict v__85409, float v__85410, float v__85411, global float* v__85428, global float* v__85418, local float* v__85423, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85414; \n  float v__85419; \n  float v__81237; \n  /* Private Memory */\n  float v__85416_0;\n  \n  for (int v_wg_id_85398 = get_group_id(0); v_wg_id_85398 < v_MHeight_2; v_wg_id_85398 = (v_wg_id_85398 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7135; \n      v_work_idx_7135 = 0; \n      int v_l_id_85399 = atomic_inc(&(v_work_idx_7135)); \n      while((v_l_id_85399 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85400 = 0; v_i_85400 < 16; v_i_85400 = (1 + v_i_85400)) {\n          float v_tmp_85485 = 0.0f; \n          v__85414 = v_tmp_85485; \n          int v_index_85486 = v__85406[(v_l_id_85399 + (16 * v_MWidthC_1 * v_wg_id_85398) + (v_MWidthC_1 * v_i_85400))]; \n          if (v_index_85486 < 0) {\n            v__85416_0 = v__85414; \n          } else {\n            if (v_index_85486 >= v_VLength_3) {\n              v__85416_0 = v__85414; \n            } else {\n              v__85416_0 = v__85408[v_index_85486]; \n            }\n          }\n          v__85418[(15 + (16 * v_MWidthC_1 * v_wg_id_85398) + (-1 * v_i_85400) + (16 * v_l_id_85399))] = mult(v__85416_0, v__85407[(v_l_id_85399 + (16 * v_MWidthC_1 * v_wg_id_85398) + (v_MWidthC_1 * v_i_85400))]); \n        }\n        /* end map_seq */\n        float v_tmp_85487 = 0.0f; \n        v__85419 = v_tmp_85487; \n        /* reduce_seq */\n        for (int v_i_85401 = 0; v_i_85401 < 16; v_i_85401 = (1 + v_i_85401)) {\n          v__85419 = add(v__85419, v__85418[(v_i_85401 + (16 * v_MWidthC_1 * v_wg_id_85398) + (16 * v_l_id_85399))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85402 = 0; \n          v__85423[v_l_id_85399] = id(v__85419); \n        }\n        /* end map_seq */\n        v_l_id_85399 = atomic_inc(&(v_work_idx_7135)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_85403 = get_local_id(0); \n      float v_tmp_85490 = 0.0f; \n      v__81237 = v_tmp_85490; \n      /* reduce_seq */\n      for (int v_i_85404 = 0; v_i_85404 < v_MWidthC_1; v_i_85404 = (1 + v_i_85404)) {\n        v__81237 = add(v__81237, v__85423[(v_i_85404 + (v_MWidthC_1 * v_l_id_85403))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_85405 = 0; \n        v__85428[v_wg_id_85398] = doubleMultiplyAdd(v__81237, v__85410, v__85409[v_wg_id_85398], v__85411); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85406",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85407",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85408",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85409",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85410",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85411",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85418",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85428",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85423",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}