{
  "name" : "swrg-slcl-sdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84319, const global float* restrict v__84320, const global float* restrict v__84321, const global float* restrict v__84322, float v__84323, float v__84324, global float* v__84337, global float* v__84331, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84327; \n  float v__84332; \n  /* Private Memory */\n  float v__84329_0;\n  \n  for (int v_wg_id_84314 = get_group_id(0); v_wg_id_84314 < ((v_MHeight_2)/(16)); v_wg_id_84314 = (v_wg_id_84314 + get_num_groups(0))) {\n    for (int v_l_id_84315 = get_local_id(0); v_l_id_84315 < 16; v_l_id_84315 = (v_l_id_84315 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_84316 = 0; v_i_84316 < v_MWidthC_1; v_i_84316 = (1 + v_i_84316)) {\n        float v_tmp_84381 = 0.0f; \n        v__84327 = v_tmp_84381; \n        int v_index_84382 = v__84319[(v_i_84316 + (16 * v_MWidthC_1 * v_wg_id_84314) + (v_MWidthC_1 * v_l_id_84315))]; \n        if (v_index_84382 < 0) {\n          v__84329_0 = v__84327; \n        } else {\n          if (v_index_84382 >= v_VLength_3) {\n            v__84329_0 = v__84327; \n          } else {\n            v__84329_0 = v__84321[v_index_84382]; \n          }\n        }\n        v__84331[(-1 + v_MWidthC_1 + (16 * v_MWidthC_1 * v_wg_id_84314) + (-1 * v_i_84316) + (v_MWidthC_1 * v_l_id_84315))] = mult(v__84329_0, v__84320[(v_i_84316 + (16 * v_MWidthC_1 * v_wg_id_84314) + (v_MWidthC_1 * v_l_id_84315))]); \n      }\n      /* end map_seq */\n      float v_tmp_84383 = 0.0f; \n      v__84332 = v_tmp_84383; \n      /* reduce_seq */\n      for (int v_i_84317 = 0; v_i_84317 < v_MWidthC_1; v_i_84317 = (1 + v_i_84317)) {\n        v__84332 = add(v__84332, v__84331[(v_i_84317 + (16 * v_MWidthC_1 * v_wg_id_84314) + (v_MWidthC_1 * v_l_id_84315))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84318 = 0; \n        v__84337[(v_l_id_84315 + (16 * v_wg_id_84314))] = doubleMultiplyAdd(v__84332, v__84323, v__84322[(v_l_id_84315 + (16 * v_wg_id_84314))], v__84324); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84320",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84321",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84323",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84324",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84331",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84337",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}