{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92370, const global float* restrict v__92371, const global float* restrict v__92372, const global float* restrict v__92373, float v__92374, float v__92375, global float* v__92392, global float* v__92382, local float* v__92387, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92378; \n  float v__92383; \n  float v__81237; \n  /* Private Memory */\n  float v__92380_0;\n  \n  for (int v_wg_id_92362 = get_group_id(0); v_wg_id_92362 < v_MHeight_2; v_wg_id_92362 = (v_wg_id_92362 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7788; \n      v_work_idx_7788 = 0; \n      int v_l_id_92363 = atomic_inc(&(v_work_idx_7788)); \n      while((v_l_id_92363 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_92364 = 0; v_i_92364 < 64; v_i_92364 = (1 + v_i_92364)) {\n          float v_tmp_92445 = 0.0f; \n          v__92378 = v_tmp_92445; \n          int v_index_92446 = v__92370[(v_l_id_92363 + (64 * v_MWidthC_1 * v_wg_id_92362) + (v_MWidthC_1 * v_i_92364))]; \n          if (v_index_92446 < 0) {\n            v__92380_0 = v__92378; \n          } else {\n            if (v_index_92446 >= v_VLength_3) {\n              v__92380_0 = v__92378; \n            } else {\n              v__92380_0 = v__92372[v_index_92446]; \n            }\n          }\n          v__92382[(63 + (64 * v_MWidthC_1 * v_wg_id_92362) + (-1 * v_i_92364) + (64 * v_l_id_92363))] = mult(v__92380_0, v__92371[(v_l_id_92363 + (64 * v_MWidthC_1 * v_wg_id_92362) + (v_MWidthC_1 * v_i_92364))]); \n        }\n        /* end map_seq */\n        float v_tmp_92447 = 0.0f; \n        v__92383 = v_tmp_92447; \n        /* reduce_seq */\n        for (int v_i_92365 = 0; v_i_92365 < 64; v_i_92365 = (1 + v_i_92365)) {\n          v__92383 = add(v__92383, v__92382[(v_i_92365 + (64 * v_MWidthC_1 * v_wg_id_92362) + (64 * v_l_id_92363))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92366 = 0; \n          v__92387[v_l_id_92363] = id(v__92383); \n        }\n        /* end map_seq */\n        v_l_id_92363 = atomic_inc(&(v_work_idx_7788)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7782; \n      v_work_idx_7782 = 0; \n      int v_l_id_92367 = atomic_inc(&(v_work_idx_7782)); \n      while((v_l_id_92367 < 1)){\n        float v_tmp_92450 = 0.0f; \n        v__81237 = v_tmp_92450; \n        /* reduce_seq */\n        for (int v_i_92368 = 0; v_i_92368 < v_MWidthC_1; v_i_92368 = (1 + v_i_92368)) {\n          v__81237 = add(v__81237, v__92387[(v_i_92368 + (v_MWidthC_1 * v_l_id_92367))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92369 = 0; \n          v__92392[v_wg_id_92362] = doubleMultiplyAdd(v__81237, v__92374, v__92373[v_wg_id_92362], v__92375); \n        }\n        /* end map_seq */\n        v_l_id_92367 = atomic_inc(&(v_work_idx_7782)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__92370",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92371",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92372",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92373",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92374",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92375",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__92382",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__92392",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92387",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}