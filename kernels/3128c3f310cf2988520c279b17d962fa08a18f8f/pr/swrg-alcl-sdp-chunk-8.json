{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81853, const global float* restrict v__81854, const global float* restrict v__81855, const global float* restrict v__81856, float v__81857, float v__81858, global float* v__81871, global float* v__81865, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81861; \n  float v__81866; \n  /* Private Memory */\n  float v__81863_0;\n  \n  for (int v_wg_id_81848 = get_group_id(0); v_wg_id_81848 < ((v_MHeight_2)/(8)); v_wg_id_81848 = (v_wg_id_81848 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6801; \n      v_work_idx_6801 = 0; \n      int v_l_id_81849 = atomic_inc(&(v_work_idx_6801)); \n      while((v_l_id_81849 < 8)){\n        /* map_seq */\n        for (int v_i_81850 = 0; v_i_81850 < v_MWidthC_1; v_i_81850 = (1 + v_i_81850)) {\n          float v_tmp_81911 = 0.0f; \n          v__81861 = v_tmp_81911; \n          int v_index_81912 = v__81853[(v_i_81850 + (8 * v_MWidthC_1 * v_wg_id_81848) + (v_MWidthC_1 * v_l_id_81849))]; \n          if (v_index_81912 < 0) {\n            v__81863_0 = v__81861; \n          } else {\n            if (v_index_81912 >= v_VLength_3) {\n              v__81863_0 = v__81861; \n            } else {\n              v__81863_0 = v__81855[v_index_81912]; \n            }\n          }\n          v__81865[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_81848) + (-1 * v_i_81850) + (v_MWidthC_1 * v_l_id_81849))] = mult(v__81863_0, v__81854[(v_i_81850 + (8 * v_MWidthC_1 * v_wg_id_81848) + (v_MWidthC_1 * v_l_id_81849))]); \n        }\n        /* end map_seq */\n        float v_tmp_81913 = 0.0f; \n        v__81866 = v_tmp_81913; \n        /* reduce_seq */\n        for (int v_i_81851 = 0; v_i_81851 < v_MWidthC_1; v_i_81851 = (1 + v_i_81851)) {\n          v__81866 = add(v__81866, v__81865[(v_i_81851 + (8 * v_MWidthC_1 * v_wg_id_81848) + (v_MWidthC_1 * v_l_id_81849))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81852 = 0; \n          v__81871[(v_l_id_81849 + (8 * v_wg_id_81848))] = doubleMultiplyAdd(v__81866, v__81857, v__81856[(v_l_id_81849 + (8 * v_wg_id_81848))], v__81858); \n        }\n        /* end map_seq */\n        v_l_id_81849 = atomic_inc(&(v_work_idx_6801)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81853",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81855",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81856",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81857",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81858",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81865",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81871",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}