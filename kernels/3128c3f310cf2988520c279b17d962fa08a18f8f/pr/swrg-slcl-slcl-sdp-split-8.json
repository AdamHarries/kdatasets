{
  "name" : "swrg-slcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81219, const global float* restrict v__81220, const global float* restrict v__81221, const global float* restrict v__81222, float v__81223, float v__81224, global float* v__81242, global float* v__81231, local float* v__81236, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81227; \n  float v__81232; \n  float v__81237; \n  /* Private Memory */\n  float v__81229_0;\n  \n  for (int v_wg_id_81211 = get_group_id(0); v_wg_id_81211 < v_MHeight_2; v_wg_id_81211 = (v_wg_id_81211 + get_num_groups(0))) {\n    for (int v_l_id_81212 = get_local_id(0); v_l_id_81212 < v_MWidthC_1; v_l_id_81212 = (v_l_id_81212 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_81213 = 0; v_i_81213 < 8; v_i_81213 = (1 + v_i_81213)) {\n        float v_tmp_81307 = 0.0f; \n        v__81227 = v_tmp_81307; \n        int v_index_81308 = v__81219[(v_l_id_81212 + (8 * v_MWidthC_1 * v_wg_id_81211) + (v_MWidthC_1 * v_i_81213))]; \n        if (v_index_81308 < 0) {\n          v__81229_0 = v__81227; \n        } else {\n          if (v_index_81308 >= v_VLength_3) {\n            v__81229_0 = v__81227; \n          } else {\n            v__81229_0 = v__81221[v_index_81308]; \n          }\n        }\n        v__81231[(7 + (8 * v_MWidthC_1 * v_wg_id_81211) + (-1 * v_i_81213) + (8 * v_l_id_81212))] = mult(v__81229_0, v__81220[(v_l_id_81212 + (8 * v_MWidthC_1 * v_wg_id_81211) + (v_MWidthC_1 * v_i_81213))]); \n      }\n      /* end map_seq */\n      float v_tmp_81309 = 0.0f; \n      v__81232 = v_tmp_81309; \n      /* reduce_seq */\n      for (int v_i_81214 = 0; v_i_81214 < 8; v_i_81214 = (1 + v_i_81214)) {\n        v__81232 = add(v__81232, v__81231[(v_i_81214 + (8 * v_MWidthC_1 * v_wg_id_81211) + (8 * v_l_id_81212))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81215 = 0; \n        v__81236[v_l_id_81212] = id(v__81232); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81216 = get_local_id(0); \n      float v_tmp_81312 = 0.0f; \n      v__81237 = v_tmp_81312; \n      /* reduce_seq */\n      for (int v_i_81217 = 0; v_i_81217 < v_MWidthC_1; v_i_81217 = (1 + v_i_81217)) {\n        v__81237 = add(v__81237, v__81236[(v_i_81217 + (v_MWidthC_1 * v_l_id_81216))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81218 = 0; \n        v__81242[v_wg_id_81211] = doubleMultiplyAdd(v__81237, v__81223, v__81222[v_wg_id_81211], v__81224); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__81219",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81220",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81221",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81222",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81223",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81224",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__81231",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__81242",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81236",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}