{
  "name" : "swrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95402, const global float* restrict v__95403, const global float* restrict v__95404, const global float* restrict v__95405, float v__95406, float v__95407, global float* v__95424, global float* v__95414, local float* v__95419, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95410; \n  float v__95415; \n  float v__81237; \n  /* Private Memory */\n  float v__95412_0;\n  \n  for (int v_wg_id_95394 = get_group_id(0); v_wg_id_95394 < v_MHeight_2; v_wg_id_95394 = (v_wg_id_95394 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8071; \n      v_work_idx_8071 = 0; \n      int v_l_id_95395 = atomic_inc(&(v_work_idx_8071)); \n      while((v_l_id_95395 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_95396 = 0; v_i_95396 < 128; v_i_95396 = (1 + v_i_95396)) {\n          float v_tmp_95481 = 0.0f; \n          v__95410 = v_tmp_95481; \n          int v_index_95482 = v__95402[(v_l_id_95395 + (128 * v_MWidthC_1 * v_wg_id_95394) + (v_MWidthC_1 * v_i_95396))]; \n          if (v_index_95482 < 0) {\n            v__95412_0 = v__95410; \n          } else {\n            if (v_index_95482 >= v_VLength_3) {\n              v__95412_0 = v__95410; \n            } else {\n              v__95412_0 = v__95404[v_index_95482]; \n            }\n          }\n          v__95414[(127 + (128 * v_MWidthC_1 * v_wg_id_95394) + (-1 * v_i_95396) + (128 * v_l_id_95395))] = mult(v__95412_0, v__95403[(v_l_id_95395 + (128 * v_MWidthC_1 * v_wg_id_95394) + (v_MWidthC_1 * v_i_95396))]); \n        }\n        /* end map_seq */\n        float v_tmp_95483 = 0.0f; \n        v__95415 = v_tmp_95483; \n        /* reduce_seq */\n        for (int v_i_95397 = 0; v_i_95397 < 128; v_i_95397 = (1 + v_i_95397)) {\n          v__95415 = add(v__95415, v__95414[(v_i_95397 + (128 * v_MWidthC_1 * v_wg_id_95394) + (128 * v_l_id_95395))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95398 = 0; \n          v__95419[v_l_id_95395] = id(v__95415); \n        }\n        /* end map_seq */\n        v_l_id_95395 = atomic_inc(&(v_work_idx_8071)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_95399 = get_local_id(0); \n      float v_tmp_95486 = 0.0f; \n      v__81237 = v_tmp_95486; \n      /* reduce_seq */\n      for (int v_i_95400 = 0; v_i_95400 < v_MWidthC_1; v_i_95400 = (1 + v_i_95400)) {\n        v__81237 = add(v__81237, v__95419[(v_i_95400 + (v_MWidthC_1 * v_l_id_95399))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_95401 = 0; \n        v__95424[v_wg_id_95394] = doubleMultiplyAdd(v__81237, v__95406, v__95405[v_wg_id_95394], v__95407); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95402",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95403",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95404",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95405",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95406",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95407",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95414",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95424",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95419",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}