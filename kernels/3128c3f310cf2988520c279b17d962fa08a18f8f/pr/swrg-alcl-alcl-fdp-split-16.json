{
  "name" : "swrg-alcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85800, const global float* restrict v__85801, const global float* restrict v__85802, const global float* restrict v__85803, float v__85804, float v__85805, global float* v__85822, local float* v__85817, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85808; \n  float v__85810; \n  float v__81237; \n  /* Private Memory */\n  float v__85812_0;\n  \n  float v__85814_0;\n  \n  for (int v_wg_id_85793 = get_group_id(0); v_wg_id_85793 < v_MHeight_2; v_wg_id_85793 = (v_wg_id_85793 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7174; \n      v_work_idx_7174 = 0; \n      int v_l_id_85794 = atomic_inc(&(v_work_idx_7174)); \n      while((v_l_id_85794 < v_MWidthC_1)){\n        float v_tmp_85875 = 0.0f; \n        v__85808 = v_tmp_85875; \n        /* reduce_seq */\n        for (int v_i_85795 = 0; v_i_85795 < 16; v_i_85795 = (1 + v_i_85795)) {\n          float v_tmp_85876 = 0.0f; \n          v__85810 = v_tmp_85876; \n          int v_index_85877 = v__85800[(v_l_id_85794 + (16 * v_MWidthC_1 * v_wg_id_85793) + (v_MWidthC_1 * v_i_85795))]; \n          if (v_index_85877 < 0) {\n            v__85812_0 = v__85810; \n          } else {\n            if (v_index_85877 >= v_VLength_3) {\n              v__85812_0 = v__85810; \n            } else {\n              v__85812_0 = v__85802[v_index_85877]; \n            }\n          }\n          v__85814_0 = mult(v__85812_0, v__85801[(v_l_id_85794 + (16 * v_MWidthC_1 * v_wg_id_85793) + (v_MWidthC_1 * v_i_85795))]); \n          v__85808 = add(v__85814_0, v__85808); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85796 = 0; \n          v__85817[v_l_id_85794] = id(v__85808); \n        }\n        /* end map_seq */\n        v_l_id_85794 = atomic_inc(&(v_work_idx_7174)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7169; \n      v_work_idx_7169 = 0; \n      int v_l_id_85797 = atomic_inc(&(v_work_idx_7169)); \n      while((v_l_id_85797 < 1)){\n        float v_tmp_85880 = 0.0f; \n        v__81237 = v_tmp_85880; \n        /* reduce_seq */\n        for (int v_i_85798 = 0; v_i_85798 < v_MWidthC_1; v_i_85798 = (1 + v_i_85798)) {\n          v__81237 = add(v__81237, v__85817[(v_i_85798 + (v_MWidthC_1 * v_l_id_85797))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85799 = 0; \n          v__85822[v_wg_id_85793] = doubleMultiplyAdd(v__81237, v__85804, v__85803[v_wg_id_85793], v__85805); \n        }\n        /* end map_seq */\n        v_l_id_85797 = atomic_inc(&(v_work_idx_7169)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85800",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85801",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85802",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85803",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85804",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85805",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85822",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85817",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}