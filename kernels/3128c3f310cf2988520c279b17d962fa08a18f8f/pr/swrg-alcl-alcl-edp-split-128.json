{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__95890, const global float* restrict v__95891, const global float* restrict v__95892, const global float* restrict v__95893, float v__95894, float v__95895, global float* v__95914, local float* v__95909, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95898; \n  float v__95900; \n  float v__81237; \n  /* Private Memory */\n  float v__95902_0;\n  \n  float v__95904_0;\n  \n  int v__95908_0;\n  \n  for (int v_wg_id_95883 = get_group_id(0); v_wg_id_95883 < v_MHeight_2; v_wg_id_95883 = (v_wg_id_95883 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8120; \n      v_work_idx_8120 = 0; \n      int v_l_id_95884 = atomic_inc(&(v_work_idx_8120)); \n      while((v_l_id_95884 < v_MWidthC_1)){\n        float v_tmp_95970 = 0.0f; \n        v__95898 = v_tmp_95970; \n        /* reduce_while_seq */\n        for (int v_i_95885 = 0; v_i_95885 < 128; v_i_95885 = (1 + v_i_95885)) {\n          v__95908_0 = check(v__95898, v__95890[(v_l_id_95884 + (128 * v_MWidthC_1 * v_wg_id_95883) + (v_MWidthC_1 * v_i_95885))]); \n          if (v__95908_0) {\n          } else {\n            break;\n          }\n          float v_tmp_95971 = 0.0f; \n          v__95900 = v_tmp_95971; \n          int v_index_95972 = v__95890[(v_l_id_95884 + (128 * v_MWidthC_1 * v_wg_id_95883) + (v_MWidthC_1 * v_i_95885))]; \n          if (v_index_95972 < 0) {\n            v__95902_0 = v__95900; \n          } else {\n            if (v_index_95972 >= v_VLength_3) {\n              v__95902_0 = v__95900; \n            } else {\n              v__95902_0 = v__95892[v_index_95972]; \n            }\n          }\n          v__95904_0 = mult(v__95902_0, v__95891[(v_l_id_95884 + (128 * v_MWidthC_1 * v_wg_id_95883) + (v_MWidthC_1 * v_i_95885))]); \n          v__95898 = add(v__95904_0, v__95898); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95886 = 0; \n          v__95909[v_l_id_95884] = id(v__95898); \n        }\n        /* end map_seq */\n        v_l_id_95884 = atomic_inc(&(v_work_idx_8120)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8115; \n      v_work_idx_8115 = 0; \n      int v_l_id_95887 = atomic_inc(&(v_work_idx_8115)); \n      while((v_l_id_95887 < 1)){\n        float v_tmp_95975 = 0.0f; \n        v__81237 = v_tmp_95975; \n        /* reduce_seq */\n        for (int v_i_95888 = 0; v_i_95888 < v_MWidthC_1; v_i_95888 = (1 + v_i_95888)) {\n          v__81237 = add(v__81237, v__95909[(v_i_95888 + (v_MWidthC_1 * v_l_id_95887))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95889 = 0; \n          v__95914[v_wg_id_95883] = doubleMultiplyAdd(v__81237, v__95894, v__95893[v_wg_id_95883], v__95895); \n        }\n        /* end map_seq */\n        v_l_id_95887 = atomic_inc(&(v_work_idx_8115)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__95890",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95891",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95892",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95893",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95894",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95895",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__95914",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__95909",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}