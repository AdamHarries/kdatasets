{
  "name" : "swrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80791, const global float* restrict v__80792, const global float* restrict v__80793, const global float* restrict v__80794, float v__80795, float v__80796, global float* v__80809, global float* v__80803, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80799; \n  float v__80804; \n  /* Private Memory */\n  float v__80801_0;\n  \n  for (int v_wg_id_80787 = get_group_id(0); v_wg_id_80787 < v_MHeight_2; v_wg_id_80787 = (v_wg_id_80787 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_l_id_6713; \n      v_l_id_6713 = 0; \n      int v_l_id_80788 = atomic_inc(&(v_l_id_6713)); \n      while((v_l_id_80788 < v_MWidthC_1)){\n        float v_tmp_80841 = 0.0f; \n        v__80799 = v_tmp_80841; \n        int v_index_80842 = v__80791[(v_l_id_80788 + (v_MWidthC_1 * v_wg_id_80787))]; \n        if (v_index_80842 < 0) {\n          v__80801_0 = v__80799; \n        } else {\n          if (v_index_80842 >= v_VLength_3) {\n            v__80801_0 = v__80799; \n          } else {\n            v__80801_0 = v__80793[v_index_80842]; \n          }\n        }\n        v__80803[(-1 + v_MWidthC_1 + (-1 * v_l_id_80788) + (v_MWidthC_1 * v_wg_id_80787))] = mult(v__80801_0, v__80792[(v_l_id_80788 + (v_MWidthC_1 * v_wg_id_80787))]); \n        v_l_id_80788 = atomic_inc(&(v_l_id_6713)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_80843 = 0.0f; \n    v__80804 = v_tmp_80843; \n    /* reduce_seq */\n    for (int v_i_80789 = 0; v_i_80789 < v_MWidthC_1; v_i_80789 = (1 + v_i_80789)) {\n      v__80804 = add(v__80804, v__80803[(v_i_80789 + (v_MWidthC_1 * v_wg_id_80787))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_80790 = 0; \n      v__80809[v_wg_id_80787] = doubleMultiplyAdd(v__80804, v__80795, v__80794[v_wg_id_80787], v__80796); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__80791",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80792",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80793",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80795",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80796",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80803",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}