{
  "name" : "awrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86646, const global float* restrict v__86647, const global float* restrict v__86648, const global float* restrict v__86649, float v__86650, float v__86651, global float* v__86669, global int* v__86653, local float* v__86664, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86655; \n  float v__86657; \n  float v__81237; \n  /* Private Memory */\n  float v__86659_0;\n  \n  float v__86661_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7253 = v__86653; \n    local int v_w_id_86639; \n    if (get_local_id(0) == 0) {\n      v_w_id_86639 = atomic_inc(v_work_idx_7253); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86639 < v_MHeight_2)){\n      for (int v_l_id_86640 = get_local_id(0); v_l_id_86640 < v_MWidthC_1; v_l_id_86640 = (v_l_id_86640 + get_local_size(0))) {\n        float v_tmp_86728 = 0.0f; \n        v__86655 = v_tmp_86728; \n        /* reduce_seq */\n        for (int v_i_86641 = 0; v_i_86641 < 16; v_i_86641 = (1 + v_i_86641)) {\n          float v_tmp_86729 = 0.0f; \n          v__86657 = v_tmp_86729; \n          int v_index_86730 = v__86646[(v_l_id_86640 + (16 * v_MWidthC_1 * v_w_id_86639) + (v_MWidthC_1 * v_i_86641))]; \n          if (v_index_86730 < 0) {\n            v__86659_0 = v__86657; \n          } else {\n            if (v_index_86730 >= v_VLength_3) {\n              v__86659_0 = v__86657; \n            } else {\n              v__86659_0 = v__86648[v_index_86730]; \n            }\n          }\n          v__86661_0 = mult(v__86659_0, v__86647[(v_l_id_86640 + (16 * v_MWidthC_1 * v_w_id_86639) + (v_MWidthC_1 * v_i_86641))]); \n          v__86655 = add(v__86661_0, v__86655); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86642 = 0; \n          v__86664[v_l_id_86640] = id(v__86655); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7247; \n        v_work_idx_7247 = 0; \n        int v_l_id_86643 = atomic_inc(&(v_work_idx_7247)); \n        while((v_l_id_86643 < 1)){\n          float v_tmp_86733 = 0.0f; \n          v__81237 = v_tmp_86733; \n          /* reduce_seq */\n          for (int v_i_86644 = 0; v_i_86644 < v_MWidthC_1; v_i_86644 = (1 + v_i_86644)) {\n            v__81237 = add(v__81237, v__86664[(v_i_86644 + (v_MWidthC_1 * v_l_id_86643))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86645 = 0; \n            v__86669[v_w_id_86639] = doubleMultiplyAdd(v__81237, v__86650, v__86649[v_w_id_86639], v__86651); \n          }\n          /* end map_seq */\n          v_l_id_86643 = atomic_inc(&(v_work_idx_7247)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86639 = atomic_inc(v_work_idx_7253); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86646",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86647",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86648",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86649",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86650",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86651",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86653",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86669",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86664",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}