{
  "name" : "swrg-alcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101985, const global float* restrict v__101986, const global float* restrict v__101987, const global float* restrict v__101988, float v__101989, float v__101990, global float* v__102005, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101992; \n  float v__101995; \n  /* Private Memory */\n  float v__101997_0;\n  \n  float v__101999_0;\n  \n  int v__102003_0;\n  \n  for (int v_wg_id_101981 = get_group_id(0); v_wg_id_101981 < ((v_MHeight_2)/(512)); v_wg_id_101981 = (v_wg_id_101981 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8685; \n      v_work_idx_8685 = 0; \n      int v_l_id_101982 = atomic_inc(&(v_work_idx_8685)); \n      while((v_l_id_101982 < 512)){\n        float v_tmp_102049 = 0.0f; \n        v__101992 = v_tmp_102049; \n        /* reduce_while_seq */\n        for (int v_i_101983 = 0; v_i_101983 < v_MWidthC_1; v_i_101983 = (1 + v_i_101983)) {\n          v__102003_0 = check(v__101992, v__101985[(v_i_101983 + (512 * v_MWidthC_1 * v_wg_id_101981) + (v_MWidthC_1 * v_l_id_101982))]); \n          if (v__102003_0) {\n          } else {\n            break;\n          }\n          float v_tmp_102050 = 0.0f; \n          v__101995 = v_tmp_102050; \n          int v_index_102051 = v__101985[(v_i_101983 + (512 * v_MWidthC_1 * v_wg_id_101981) + (v_MWidthC_1 * v_l_id_101982))]; \n          if (v_index_102051 < 0) {\n            v__101997_0 = v__101995; \n          } else {\n            if (v_index_102051 >= v_VLength_3) {\n              v__101997_0 = v__101995; \n            } else {\n              v__101997_0 = v__101987[v_index_102051]; \n            }\n          }\n          v__101999_0 = mult(v__101997_0, v__101986[(v_i_101983 + (512 * v_MWidthC_1 * v_wg_id_101981) + (v_MWidthC_1 * v_l_id_101982))]); \n          v__101992 = add(v__101999_0, v__101992); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101984 = 0; \n          v__102005[(v_l_id_101982 + (512 * v_wg_id_101981))] = doubleMultiplyAdd(v__101992, v__101989, v__101988[(v_l_id_101982 + (512 * v_wg_id_101981))], v__101990); \n        }\n        /* end map_seq */\n        v_l_id_101982 = atomic_inc(&(v_work_idx_8685)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__101985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101986",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101987",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101989",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101990",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__102005",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}