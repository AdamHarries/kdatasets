{
  "name" : "swrg-slcl-edp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101127, const global float* restrict v__101128, const global float* restrict v__101129, const global float* restrict v__101130, float v__101131, float v__101132, global float* v__101147, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101134; \n  float v__101137; \n  /* Private Memory */\n  float v__101139_0;\n  \n  float v__101141_0;\n  \n  int v__101145_0;\n  \n  for (int v_wg_id_101123 = get_group_id(0); v_wg_id_101123 < ((v_MHeight_2)/(512)); v_wg_id_101123 = (v_wg_id_101123 + get_num_groups(0))) {\n    for (int v_l_id_101124 = get_local_id(0); v_l_id_101124 < 512; v_l_id_101124 = (v_l_id_101124 + get_local_size(0))) {\n      float v_tmp_101195 = 0.0f; \n      v__101134 = v_tmp_101195; \n      /* reduce_while_seq */\n      for (int v_i_101125 = 0; v_i_101125 < v_MWidthC_1; v_i_101125 = (1 + v_i_101125)) {\n        v__101145_0 = check(v__101134, v__101127[(v_i_101125 + (512 * v_MWidthC_1 * v_wg_id_101123) + (v_MWidthC_1 * v_l_id_101124))]); \n        if (v__101145_0) {\n        } else {\n          break;\n        }\n        float v_tmp_101196 = 0.0f; \n        v__101137 = v_tmp_101196; \n        int v_index_101197 = v__101127[(v_i_101125 + (512 * v_MWidthC_1 * v_wg_id_101123) + (v_MWidthC_1 * v_l_id_101124))]; \n        if (v_index_101197 < 0) {\n          v__101139_0 = v__101137; \n        } else {\n          if (v_index_101197 >= v_VLength_3) {\n            v__101139_0 = v__101137; \n          } else {\n            v__101139_0 = v__101129[v_index_101197]; \n          }\n        }\n        v__101141_0 = mult(v__101139_0, v__101128[(v_i_101125 + (512 * v_MWidthC_1 * v_wg_id_101123) + (v_MWidthC_1 * v_l_id_101124))]); \n        v__101134 = add(v__101141_0, v__101134); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101126 = 0; \n        v__101147[(v_l_id_101124 + (512 * v_wg_id_101123))] = doubleMultiplyAdd(v__101134, v__101131, v__101130[(v_l_id_101124 + (512 * v_wg_id_101123))], v__101132); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__101127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101128",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101129",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101130",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101131",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101132",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101147",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}