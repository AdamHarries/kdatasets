{
  "name" : "awrg-slcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86066, const global float* restrict v__86067, const global float* restrict v__86068, const global float* restrict v__86069, float v__86070, float v__86071, global float* v__86085, global int* v__86073, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86075; \n  float v__86077; \n  /* Private Memory */\n  float v__86079_0;\n  \n  float v__86081_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7198 = v__86073; \n    local int v_w_id_86062; \n    if (get_local_id(0) == 0) {\n      v_w_id_86062 = atomic_inc(v_work_idx_7198); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86062 < ((v_MHeight_2)/(16)))){\n      for (int v_l_id_86063 = get_local_id(0); v_l_id_86063 < 16; v_l_id_86063 = (v_l_id_86063 + get_local_size(0))) {\n        float v_tmp_86126 = 0.0f; \n        v__86075 = v_tmp_86126; \n        /* reduce_seq */\n        for (int v_i_86064 = 0; v_i_86064 < v_MWidthC_1; v_i_86064 = (1 + v_i_86064)) {\n          float v_tmp_86127 = 0.0f; \n          v__86077 = v_tmp_86127; \n          int v_index_86128 = v__86066[(v_i_86064 + (16 * v_MWidthC_1 * v_w_id_86062) + (v_MWidthC_1 * v_l_id_86063))]; \n          if (v_index_86128 < 0) {\n            v__86079_0 = v__86077; \n          } else {\n            if (v_index_86128 >= v_VLength_3) {\n              v__86079_0 = v__86077; \n            } else {\n              v__86079_0 = v__86068[v_index_86128]; \n            }\n          }\n          v__86081_0 = mult(v__86079_0, v__86067[(v_i_86064 + (16 * v_MWidthC_1 * v_w_id_86062) + (v_MWidthC_1 * v_l_id_86063))]); \n          v__86075 = add(v__86081_0, v__86075); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86065 = 0; \n          v__86085[(v_l_id_86063 + (16 * v_w_id_86062))] = doubleMultiplyAdd(v__86075, v__86070, v__86069[(v_l_id_86063 + (16 * v_w_id_86062))], v__86071); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_86062 = atomic_inc(v_work_idx_7198); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86068",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86070",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86071",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86073",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86085",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}