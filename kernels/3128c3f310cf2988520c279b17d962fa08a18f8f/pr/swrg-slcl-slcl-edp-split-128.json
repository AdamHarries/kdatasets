{
  "name" : "swrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__94760, const global float* restrict v__94761, const global float* restrict v__94762, const global float* restrict v__94763, float v__94764, float v__94765, global float* v__94784, local float* v__94779, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94768; \n  float v__94770; \n  float v__81237; \n  /* Private Memory */\n  float v__94772_0;\n  \n  float v__94774_0;\n  \n  int v__94778_0;\n  \n  for (int v_wg_id_94753 = get_group_id(0); v_wg_id_94753 < v_MHeight_2; v_wg_id_94753 = (v_wg_id_94753 + get_num_groups(0))) {\n    for (int v_l_id_94754 = get_local_id(0); v_l_id_94754 < v_MWidthC_1; v_l_id_94754 = (v_l_id_94754 + get_local_size(0))) {\n      float v_tmp_94852 = 0.0f; \n      v__94768 = v_tmp_94852; \n      /* reduce_while_seq */\n      for (int v_i_94755 = 0; v_i_94755 < 128; v_i_94755 = (1 + v_i_94755)) {\n        v__94778_0 = check(v__94768, v__94760[(v_l_id_94754 + (128 * v_MWidthC_1 * v_wg_id_94753) + (v_MWidthC_1 * v_i_94755))]); \n        if (v__94778_0) {\n        } else {\n          break;\n        }\n        float v_tmp_94853 = 0.0f; \n        v__94770 = v_tmp_94853; \n        int v_index_94854 = v__94760[(v_l_id_94754 + (128 * v_MWidthC_1 * v_wg_id_94753) + (v_MWidthC_1 * v_i_94755))]; \n        if (v_index_94854 < 0) {\n          v__94772_0 = v__94770; \n        } else {\n          if (v_index_94854 >= v_VLength_3) {\n            v__94772_0 = v__94770; \n          } else {\n            v__94772_0 = v__94762[v_index_94854]; \n          }\n        }\n        v__94774_0 = mult(v__94772_0, v__94761[(v_l_id_94754 + (128 * v_MWidthC_1 * v_wg_id_94753) + (v_MWidthC_1 * v_i_94755))]); \n        v__94768 = add(v__94774_0, v__94768); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94756 = 0; \n        v__94779[v_l_id_94754] = id(v__94768); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_94757 = get_local_id(0); \n      float v_tmp_94857 = 0.0f; \n      v__81237 = v_tmp_94857; \n      /* reduce_seq */\n      for (int v_i_94758 = 0; v_i_94758 < v_MWidthC_1; v_i_94758 = (1 + v_i_94758)) {\n        v__81237 = add(v__81237, v__94779[(v_i_94758 + (v_MWidthC_1 * v_l_id_94757))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94759 = 0; \n        v__94784[v_wg_id_94753] = doubleMultiplyAdd(v__81237, v__94764, v__94763[v_wg_id_94753], v__94765); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94760",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94761",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94762",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94763",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94764",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94765",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94779",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}