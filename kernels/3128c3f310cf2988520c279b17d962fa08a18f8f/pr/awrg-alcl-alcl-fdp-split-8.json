{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84130, const global float* restrict v__84131, const global float* restrict v__84132, const global float* restrict v__84133, float v__84134, float v__84135, global float* v__84153, global int* v__84137, local float* v__84148, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84139; \n  float v__84141; \n  float v__81237; \n  /* Private Memory */\n  float v__84143_0;\n  \n  float v__84145_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7027 = v__84137; \n    local int v_w_id_84123; \n    if (get_local_id(0) == 0) {\n      v_w_id_84123 = atomic_inc(v_work_idx_7027); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_84123 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7025; \n        v_work_idx_7025 = 0; \n        int v_l_id_84124 = atomic_inc(&(v_work_idx_7025)); \n        while((v_l_id_84124 < v_MWidthC_1)){\n          float v_tmp_84204 = 0.0f; \n          v__84139 = v_tmp_84204; \n          /* reduce_seq */\n          for (int v_i_84125 = 0; v_i_84125 < 8; v_i_84125 = (1 + v_i_84125)) {\n            float v_tmp_84205 = 0.0f; \n            v__84141 = v_tmp_84205; \n            int v_index_84206 = v__84130[(v_l_id_84124 + (8 * v_MWidthC_1 * v_w_id_84123) + (v_MWidthC_1 * v_i_84125))]; \n            if (v_index_84206 < 0) {\n              v__84143_0 = v__84141; \n            } else {\n              if (v_index_84206 >= v_VLength_3) {\n                v__84143_0 = v__84141; \n              } else {\n                v__84143_0 = v__84132[v_index_84206]; \n              }\n            }\n            v__84145_0 = mult(v__84143_0, v__84131[(v_l_id_84124 + (8 * v_MWidthC_1 * v_w_id_84123) + (v_MWidthC_1 * v_i_84125))]); \n            v__84139 = add(v__84145_0, v__84139); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84126 = 0; \n            v__84148[v_l_id_84124] = id(v__84139); \n          }\n          /* end map_seq */\n          v_l_id_84124 = atomic_inc(&(v_work_idx_7025)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7020; \n        v_work_idx_7020 = 0; \n        int v_l_id_84127 = atomic_inc(&(v_work_idx_7020)); \n        while((v_l_id_84127 < 1)){\n          float v_tmp_84209 = 0.0f; \n          v__81237 = v_tmp_84209; \n          /* reduce_seq */\n          for (int v_i_84128 = 0; v_i_84128 < v_MWidthC_1; v_i_84128 = (1 + v_i_84128)) {\n            v__81237 = add(v__81237, v__84148[(v_i_84128 + (v_MWidthC_1 * v_l_id_84127))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_84129 = 0; \n            v__84153[v_w_id_84123] = doubleMultiplyAdd(v__81237, v__84134, v__84133[v_w_id_84123], v__84135); \n          }\n          /* end map_seq */\n          v_l_id_84127 = atomic_inc(&(v_work_idx_7020)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_84123 = atomic_inc(v_work_idx_7027); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__84130",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84131",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84132",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84133",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84134",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84135",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84137",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__84153",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84148",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}