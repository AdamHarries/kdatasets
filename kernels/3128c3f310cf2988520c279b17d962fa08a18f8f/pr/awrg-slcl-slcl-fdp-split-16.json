{
  "name" : "awrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86329, const global float* restrict v__86330, const global float* restrict v__86331, const global float* restrict v__86332, float v__86333, float v__86334, global float* v__86352, global int* v__86336, local float* v__86347, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86338; \n  float v__86340; \n  float v__81237; \n  /* Private Memory */\n  float v__86342_0;\n  \n  float v__86344_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7223 = v__86336; \n    local int v_w_id_86322; \n    if (get_local_id(0) == 0) {\n      v_w_id_86322 = atomic_inc(v_work_idx_7223); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86322 < v_MHeight_2)){\n      for (int v_l_id_86323 = get_local_id(0); v_l_id_86323 < v_MWidthC_1; v_l_id_86323 = (v_l_id_86323 + get_local_size(0))) {\n        float v_tmp_86415 = 0.0f; \n        v__86338 = v_tmp_86415; \n        /* reduce_seq */\n        for (int v_i_86324 = 0; v_i_86324 < 16; v_i_86324 = (1 + v_i_86324)) {\n          float v_tmp_86416 = 0.0f; \n          v__86340 = v_tmp_86416; \n          int v_index_86417 = v__86329[(v_l_id_86323 + (16 * v_MWidthC_1 * v_w_id_86322) + (v_MWidthC_1 * v_i_86324))]; \n          if (v_index_86417 < 0) {\n            v__86342_0 = v__86340; \n          } else {\n            if (v_index_86417 >= v_VLength_3) {\n              v__86342_0 = v__86340; \n            } else {\n              v__86342_0 = v__86331[v_index_86417]; \n            }\n          }\n          v__86344_0 = mult(v__86342_0, v__86330[(v_l_id_86323 + (16 * v_MWidthC_1 * v_w_id_86322) + (v_MWidthC_1 * v_i_86324))]); \n          v__86338 = add(v__86344_0, v__86338); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86325 = 0; \n          v__86347[v_l_id_86323] = id(v__86338); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86326 = get_local_id(0); \n        float v_tmp_86420 = 0.0f; \n        v__81237 = v_tmp_86420; \n        /* reduce_seq */\n        for (int v_i_86327 = 0; v_i_86327 < v_MWidthC_1; v_i_86327 = (1 + v_i_86327)) {\n          v__81237 = add(v__81237, v__86347[(v_i_86327 + (v_MWidthC_1 * v_l_id_86326))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86328 = 0; \n          v__86352[v_w_id_86322] = doubleMultiplyAdd(v__81237, v__86333, v__86332[v_w_id_86322], v__86334); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86322 = atomic_inc(v_work_idx_7223); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__86329",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86330",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86331",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86333",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86334",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86336",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86352",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86347",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}