{
  "name" : "swrg-slcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91322, const global float* restrict v__91323, const global float* restrict v__91324, const global float* restrict v__91325, float v__91326, float v__91327, global float* v__91344, local float* v__91339, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91330; \n  float v__91332; \n  float v__81237; \n  /* Private Memory */\n  float v__91334_0;\n  \n  float v__91336_0;\n  \n  for (int v_wg_id_91315 = get_group_id(0); v_wg_id_91315 < v_MHeight_2; v_wg_id_91315 = (v_wg_id_91315 + get_num_groups(0))) {\n    for (int v_l_id_91316 = get_local_id(0); v_l_id_91316 < v_MWidthC_1; v_l_id_91316 = (v_l_id_91316 + get_local_size(0))) {\n      float v_tmp_91409 = 0.0f; \n      v__91330 = v_tmp_91409; \n      /* reduce_seq */\n      for (int v_i_91317 = 0; v_i_91317 < 64; v_i_91317 = (1 + v_i_91317)) {\n        float v_tmp_91410 = 0.0f; \n        v__91332 = v_tmp_91410; \n        int v_index_91411 = v__91322[(v_l_id_91316 + (64 * v_MWidthC_1 * v_wg_id_91315) + (v_MWidthC_1 * v_i_91317))]; \n        if (v_index_91411 < 0) {\n          v__91334_0 = v__91332; \n        } else {\n          if (v_index_91411 >= v_VLength_3) {\n            v__91334_0 = v__91332; \n          } else {\n            v__91334_0 = v__91324[v_index_91411]; \n          }\n        }\n        v__91336_0 = mult(v__91334_0, v__91323[(v_l_id_91316 + (64 * v_MWidthC_1 * v_wg_id_91315) + (v_MWidthC_1 * v_i_91317))]); \n        v__91330 = add(v__91336_0, v__91330); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91318 = 0; \n        v__91339[v_l_id_91316] = id(v__91330); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_91319 = get_local_id(0); \n      float v_tmp_91414 = 0.0f; \n      v__81237 = v_tmp_91414; \n      /* reduce_seq */\n      for (int v_i_91320 = 0; v_i_91320 < v_MWidthC_1; v_i_91320 = (1 + v_i_91320)) {\n        v__81237 = add(v__81237, v__91339[(v_i_91320 + (v_MWidthC_1 * v_l_id_91319))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_91321 = 0; \n        v__91344[v_wg_id_91315] = doubleMultiplyAdd(v__81237, v__91326, v__91325[v_wg_id_91315], v__91327); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__91322",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91323",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91324",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91325",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91326",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91327",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__91344",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__91339",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}