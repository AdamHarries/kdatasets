{
  "name" : "awrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83590, const global float* restrict v__83591, const global float* restrict v__83592, const global float* restrict v__83593, float v__83594, float v__83595, global float* v__83609, global int* v__83597, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83599; \n  float v__83601; \n  /* Private Memory */\n  float v__83603_0;\n  \n  float v__83605_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6966 = v__83597; \n    local int v_w_id_83586; \n    if (get_local_id(0) == 0) {\n      v_w_id_83586 = atomic_inc(v_work_idx_6966); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83586 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6964; \n        v_work_idx_6964 = 0; \n        int v_l_id_83587 = atomic_inc(&(v_work_idx_6964)); \n        while((v_l_id_83587 < 8)){\n          float v_tmp_83646 = 0.0f; \n          v__83599 = v_tmp_83646; \n          /* reduce_seq */\n          for (int v_i_83588 = 0; v_i_83588 < v_MWidthC_1; v_i_83588 = (1 + v_i_83588)) {\n            float v_tmp_83647 = 0.0f; \n            v__83601 = v_tmp_83647; \n            int v_index_83648 = v__83590[(v_i_83588 + (8 * v_MWidthC_1 * v_w_id_83586) + (v_MWidthC_1 * v_l_id_83587))]; \n            if (v_index_83648 < 0) {\n              v__83603_0 = v__83601; \n            } else {\n              if (v_index_83648 >= v_VLength_3) {\n                v__83603_0 = v__83601; \n              } else {\n                v__83603_0 = v__83592[v_index_83648]; \n              }\n            }\n            v__83605_0 = mult(v__83603_0, v__83591[(v_i_83588 + (8 * v_MWidthC_1 * v_w_id_83586) + (v_MWidthC_1 * v_l_id_83587))]); \n            v__83599 = add(v__83605_0, v__83599); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83589 = 0; \n            v__83609[(v_l_id_83587 + (8 * v_w_id_83586))] = doubleMultiplyAdd(v__83599, v__83594, v__83593[(v_l_id_83587 + (8 * v_w_id_83586))], v__83595); \n          }\n          /* end map_seq */\n          v_l_id_83587 = atomic_inc(&(v_work_idx_6964)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83586 = atomic_inc(v_work_idx_6966); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83590",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83591",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83592",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83593",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83594",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83595",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83597",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83609",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}