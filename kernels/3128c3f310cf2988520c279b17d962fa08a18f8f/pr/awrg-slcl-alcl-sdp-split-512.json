{
  "name" : "awrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__103205, const global float* restrict v__103206, const global float* restrict v__103207, const global float* restrict v__103208, float v__103209, float v__103210, global float* v__103228, global float* v__103218, global int* v__103212, local float* v__103223, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103214; \n  float v__103219; \n  float v__81237; \n  /* Private Memory */\n  float v__103216_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8803 = v__103212; \n    local int v_w_id_103197; \n    if (get_local_id(0) == 0) {\n      v_w_id_103197 = atomic_inc(v_work_idx_8803); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103197 < v_MHeight_2)){\n      for (int v_l_id_103198 = get_local_id(0); v_l_id_103198 < v_MWidthC_1; v_l_id_103198 = (v_l_id_103198 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_103199 = 0; v_i_103199 < 512; v_i_103199 = (1 + v_i_103199)) {\n          float v_tmp_103287 = 0.0f; \n          v__103214 = v_tmp_103287; \n          int v_index_103288 = v__103205[(v_l_id_103198 + (512 * v_MWidthC_1 * v_w_id_103197) + (v_MWidthC_1 * v_i_103199))]; \n          if (v_index_103288 < 0) {\n            v__103216_0 = v__103214; \n          } else {\n            if (v_index_103288 >= v_VLength_3) {\n              v__103216_0 = v__103214; \n            } else {\n              v__103216_0 = v__103207[v_index_103288]; \n            }\n          }\n          v__103218[(511 + (512 * v_MWidthC_1 * v_w_id_103197) + (-1 * v_i_103199) + (512 * v_l_id_103198))] = mult(v__103216_0, v__103206[(v_l_id_103198 + (512 * v_MWidthC_1 * v_w_id_103197) + (v_MWidthC_1 * v_i_103199))]); \n        }\n        /* end map_seq */\n        float v_tmp_103289 = 0.0f; \n        v__103219 = v_tmp_103289; \n        /* reduce_seq */\n        for (int v_i_103200 = 0; v_i_103200 < 512; v_i_103200 = (1 + v_i_103200)) {\n          v__103219 = add(v__103219, v__103218[(v_i_103200 + (512 * v_MWidthC_1 * v_w_id_103197) + (512 * v_l_id_103198))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103201 = 0; \n          v__103223[v_l_id_103198] = id(v__103219); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8796; \n        v_work_idx_8796 = 0; \n        int v_l_id_103202 = atomic_inc(&(v_work_idx_8796)); \n        while((v_l_id_103202 < 1)){\n          float v_tmp_103292 = 0.0f; \n          v__81237 = v_tmp_103292; \n          /* reduce_seq */\n          for (int v_i_103203 = 0; v_i_103203 < v_MWidthC_1; v_i_103203 = (1 + v_i_103203)) {\n            v__81237 = add(v__81237, v__103223[(v_i_103203 + (v_MWidthC_1 * v_l_id_103202))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103204 = 0; \n            v__103228[v_w_id_103197] = doubleMultiplyAdd(v__81237, v__103209, v__103208[v_w_id_103197], v__103210); \n          }\n          /* end map_seq */\n          v_l_id_103202 = atomic_inc(&(v_work_idx_8796)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103197 = atomic_inc(v_work_idx_8803); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__103205",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103206",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103218",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103212",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103223",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}