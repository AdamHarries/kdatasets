{
  "name" : "swrg-slcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87726, const global float* restrict v__87727, const global float* restrict v__87728, const global float* restrict v__87729, float v__87730, float v__87731, global float* v__87744, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87734; \n  float v__87736; \n  /* Private Memory */\n  float v__87738_0;\n  \n  float v__87740_0;\n  \n  for (int v_wg_id_87722 = get_group_id(0); v_wg_id_87722 < ((v_MHeight_2)/(32)); v_wg_id_87722 = (v_wg_id_87722 + get_num_groups(0))) {\n    for (int v_l_id_87723 = get_local_id(0); v_l_id_87723 < 32; v_l_id_87723 = (v_l_id_87723 + get_local_size(0))) {\n      float v_tmp_87786 = 0.0f; \n      v__87734 = v_tmp_87786; \n      /* reduce_seq */\n      for (int v_i_87724 = 0; v_i_87724 < v_MWidthC_1; v_i_87724 = (1 + v_i_87724)) {\n        float v_tmp_87787 = 0.0f; \n        v__87736 = v_tmp_87787; \n        int v_index_87788 = v__87726[(v_i_87724 + (32 * v_MWidthC_1 * v_wg_id_87722) + (v_MWidthC_1 * v_l_id_87723))]; \n        if (v_index_87788 < 0) {\n          v__87738_0 = v__87736; \n        } else {\n          if (v_index_87788 >= v_VLength_3) {\n            v__87738_0 = v__87736; \n          } else {\n            v__87738_0 = v__87728[v_index_87788]; \n          }\n        }\n        v__87740_0 = mult(v__87738_0, v__87727[(v_i_87724 + (32 * v_MWidthC_1 * v_wg_id_87722) + (v_MWidthC_1 * v_l_id_87723))]); \n        v__87734 = add(v__87740_0, v__87734); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87725 = 0; \n        v__87744[(v_l_id_87723 + (32 * v_wg_id_87722))] = doubleMultiplyAdd(v__87734, v__87730, v__87729[(v_l_id_87723 + (32 * v_wg_id_87722))], v__87731); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__87726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87727",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87728",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87729",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87730",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87731",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__87744",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}