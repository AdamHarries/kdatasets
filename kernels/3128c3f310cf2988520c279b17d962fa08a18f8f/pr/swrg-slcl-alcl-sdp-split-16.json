{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84876, const global float* restrict v__84877, const global float* restrict v__84878, const global float* restrict v__84879, float v__84880, float v__84881, global float* v__84898, global float* v__84888, local float* v__84893, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84884; \n  float v__84889; \n  float v__81237; \n  /* Private Memory */\n  float v__84886_0;\n  \n  for (int v_wg_id_84868 = get_group_id(0); v_wg_id_84868 < v_MHeight_2; v_wg_id_84868 = (v_wg_id_84868 + get_num_groups(0))) {\n    for (int v_l_id_84869 = get_local_id(0); v_l_id_84869 < v_MWidthC_1; v_l_id_84869 = (v_l_id_84869 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_84870 = 0; v_i_84870 < 16; v_i_84870 = (1 + v_i_84870)) {\n        float v_tmp_84959 = 0.0f; \n        v__84884 = v_tmp_84959; \n        int v_index_84960 = v__84876[(v_l_id_84869 + (16 * v_MWidthC_1 * v_wg_id_84868) + (v_MWidthC_1 * v_i_84870))]; \n        if (v_index_84960 < 0) {\n          v__84886_0 = v__84884; \n        } else {\n          if (v_index_84960 >= v_VLength_3) {\n            v__84886_0 = v__84884; \n          } else {\n            v__84886_0 = v__84878[v_index_84960]; \n          }\n        }\n        v__84888[(15 + (16 * v_MWidthC_1 * v_wg_id_84868) + (-1 * v_i_84870) + (16 * v_l_id_84869))] = mult(v__84886_0, v__84877[(v_l_id_84869 + (16 * v_MWidthC_1 * v_wg_id_84868) + (v_MWidthC_1 * v_i_84870))]); \n      }\n      /* end map_seq */\n      float v_tmp_84961 = 0.0f; \n      v__84889 = v_tmp_84961; \n      /* reduce_seq */\n      for (int v_i_84871 = 0; v_i_84871 < 16; v_i_84871 = (1 + v_i_84871)) {\n        v__84889 = add(v__84889, v__84888[(v_i_84871 + (16 * v_MWidthC_1 * v_wg_id_84868) + (16 * v_l_id_84869))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84872 = 0; \n        v__84893[v_l_id_84869] = id(v__84889); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7083; \n      v_work_idx_7083 = 0; \n      int v_l_id_84873 = atomic_inc(&(v_work_idx_7083)); \n      while((v_l_id_84873 < 1)){\n        float v_tmp_84964 = 0.0f; \n        v__81237 = v_tmp_84964; \n        /* reduce_seq */\n        for (int v_i_84874 = 0; v_i_84874 < v_MWidthC_1; v_i_84874 = (1 + v_i_84874)) {\n          v__81237 = add(v__81237, v__84893[(v_i_84874 + (v_MWidthC_1 * v_l_id_84873))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_84875 = 0; \n          v__84898[v_wg_id_84868] = doubleMultiplyAdd(v__81237, v__84880, v__84879[v_wg_id_84868], v__84881); \n        }\n        /* end map_seq */\n        v_l_id_84873 = atomic_inc(&(v_work_idx_7083)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__84876",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84877",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84878",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84880",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84881",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__84888",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__84898",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84893",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}