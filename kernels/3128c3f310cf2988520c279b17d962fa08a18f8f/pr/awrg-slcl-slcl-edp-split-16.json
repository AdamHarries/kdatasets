{
  "name" : "awrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__86434, const global float* restrict v__86435, const global float* restrict v__86436, const global float* restrict v__86437, float v__86438, float v__86439, global float* v__86459, global int* v__86441, local float* v__86454, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86443; \n  float v__86445; \n  float v__81237; \n  /* Private Memory */\n  float v__86447_0;\n  \n  float v__86449_0;\n  \n  int v__86453_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7232 = v__86441; \n    local int v_w_id_86427; \n    if (get_local_id(0) == 0) {\n      v_w_id_86427 = atomic_inc(v_work_idx_7232); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86427 < v_MHeight_2)){\n      for (int v_l_id_86428 = get_local_id(0); v_l_id_86428 < v_MWidthC_1; v_l_id_86428 = (v_l_id_86428 + get_local_size(0))) {\n        float v_tmp_86525 = 0.0f; \n        v__86443 = v_tmp_86525; \n        /* reduce_while_seq */\n        for (int v_i_86429 = 0; v_i_86429 < 16; v_i_86429 = (1 + v_i_86429)) {\n          v__86453_0 = check(v__86443, v__86434[(v_l_id_86428 + (16 * v_MWidthC_1 * v_w_id_86427) + (v_MWidthC_1 * v_i_86429))]); \n          if (v__86453_0) {\n          } else {\n            break;\n          }\n          float v_tmp_86526 = 0.0f; \n          v__86445 = v_tmp_86526; \n          int v_index_86527 = v__86434[(v_l_id_86428 + (16 * v_MWidthC_1 * v_w_id_86427) + (v_MWidthC_1 * v_i_86429))]; \n          if (v_index_86527 < 0) {\n            v__86447_0 = v__86445; \n          } else {\n            if (v_index_86527 >= v_VLength_3) {\n              v__86447_0 = v__86445; \n            } else {\n              v__86447_0 = v__86436[v_index_86527]; \n            }\n          }\n          v__86449_0 = mult(v__86447_0, v__86435[(v_l_id_86428 + (16 * v_MWidthC_1 * v_w_id_86427) + (v_MWidthC_1 * v_i_86429))]); \n          v__86443 = add(v__86449_0, v__86443); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86430 = 0; \n          v__86454[v_l_id_86428] = id(v__86443); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_86431 = get_local_id(0); \n        float v_tmp_86530 = 0.0f; \n        v__81237 = v_tmp_86530; \n        /* reduce_seq */\n        for (int v_i_86432 = 0; v_i_86432 < v_MWidthC_1; v_i_86432 = (1 + v_i_86432)) {\n          v__81237 = add(v__81237, v__86454[(v_i_86432 + (v_MWidthC_1 * v_l_id_86431))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86433 = 0; \n          v__86459[v_w_id_86427] = doubleMultiplyAdd(v__81237, v__86438, v__86437[v_w_id_86427], v__86439); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86427 = atomic_inc(v_work_idx_7232); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86434",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86435",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86436",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86437",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86438",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86439",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86441",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86454",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}