{
  "name" : "awrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95987, const global float* restrict v__95988, const global float* restrict v__95989, const global float* restrict v__95990, float v__95991, float v__95992, global float* v__96006, global float* v__96000, global int* v__95994, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95996; \n  float v__96001; \n  /* Private Memory */\n  float v__95998_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8128 = v__95994; \n    local int v_w_id_95982; \n    if (get_local_id(0) == 0) {\n      v_w_id_95982 = atomic_inc(v_work_idx_8128); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_95982 < ((v_MHeight_2)/(128)))){\n      for (int v_l_id_95983 = get_local_id(0); v_l_id_95983 < 128; v_l_id_95983 = (v_l_id_95983 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_95984 = 0; v_i_95984 < v_MWidthC_1; v_i_95984 = (1 + v_i_95984)) {\n          float v_tmp_96049 = 0.0f; \n          v__95996 = v_tmp_96049; \n          int v_index_96050 = v__95987[(v_i_95984 + (128 * v_MWidthC_1 * v_w_id_95982) + (v_MWidthC_1 * v_l_id_95983))]; \n          if (v_index_96050 < 0) {\n            v__95998_0 = v__95996; \n          } else {\n            if (v_index_96050 >= v_VLength_3) {\n              v__95998_0 = v__95996; \n            } else {\n              v__95998_0 = v__95989[v_index_96050]; \n            }\n          }\n          v__96000[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_w_id_95982) + (-1 * v_i_95984) + (v_MWidthC_1 * v_l_id_95983))] = mult(v__95998_0, v__95988[(v_i_95984 + (128 * v_MWidthC_1 * v_w_id_95982) + (v_MWidthC_1 * v_l_id_95983))]); \n        }\n        /* end map_seq */\n        float v_tmp_96051 = 0.0f; \n        v__96001 = v_tmp_96051; \n        /* reduce_seq */\n        for (int v_i_95985 = 0; v_i_95985 < v_MWidthC_1; v_i_95985 = (1 + v_i_95985)) {\n          v__96001 = add(v__96001, v__96000[(v_i_95985 + (128 * v_MWidthC_1 * v_w_id_95982) + (v_MWidthC_1 * v_l_id_95983))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95986 = 0; \n          v__96006[(v_l_id_95983 + (128 * v_w_id_95982))] = doubleMultiplyAdd(v__96001, v__95991, v__95990[(v_l_id_95983 + (128 * v_w_id_95982))], v__95992); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_95982 = atomic_inc(v_work_idx_8128); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95987",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95988",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95989",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95991",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95992",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95994",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96006",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}