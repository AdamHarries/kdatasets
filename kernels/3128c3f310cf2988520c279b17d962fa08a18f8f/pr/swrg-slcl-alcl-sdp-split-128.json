{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94872, const global float* restrict v__94873, const global float* restrict v__94874, const global float* restrict v__94875, float v__94876, float v__94877, global float* v__94894, global float* v__94884, local float* v__94889, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94880; \n  float v__94885; \n  float v__81237; \n  /* Private Memory */\n  float v__94882_0;\n  \n  for (int v_wg_id_94864 = get_group_id(0); v_wg_id_94864 < v_MHeight_2; v_wg_id_94864 = (v_wg_id_94864 + get_num_groups(0))) {\n    for (int v_l_id_94865 = get_local_id(0); v_l_id_94865 < v_MWidthC_1; v_l_id_94865 = (v_l_id_94865 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_94866 = 0; v_i_94866 < 128; v_i_94866 = (1 + v_i_94866)) {\n        float v_tmp_94955 = 0.0f; \n        v__94880 = v_tmp_94955; \n        int v_index_94956 = v__94872[(v_l_id_94865 + (128 * v_MWidthC_1 * v_wg_id_94864) + (v_MWidthC_1 * v_i_94866))]; \n        if (v_index_94956 < 0) {\n          v__94882_0 = v__94880; \n        } else {\n          if (v_index_94956 >= v_VLength_3) {\n            v__94882_0 = v__94880; \n          } else {\n            v__94882_0 = v__94874[v_index_94956]; \n          }\n        }\n        v__94884[(127 + (128 * v_MWidthC_1 * v_wg_id_94864) + (-1 * v_i_94866) + (128 * v_l_id_94865))] = mult(v__94882_0, v__94873[(v_l_id_94865 + (128 * v_MWidthC_1 * v_wg_id_94864) + (v_MWidthC_1 * v_i_94866))]); \n      }\n      /* end map_seq */\n      float v_tmp_94957 = 0.0f; \n      v__94885 = v_tmp_94957; \n      /* reduce_seq */\n      for (int v_i_94867 = 0; v_i_94867 < 128; v_i_94867 = (1 + v_i_94867)) {\n        v__94885 = add(v__94885, v__94884[(v_i_94867 + (128 * v_MWidthC_1 * v_wg_id_94864) + (128 * v_l_id_94865))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94868 = 0; \n        v__94889[v_l_id_94865] = id(v__94885); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8019; \n      v_work_idx_8019 = 0; \n      int v_l_id_94869 = atomic_inc(&(v_work_idx_8019)); \n      while((v_l_id_94869 < 1)){\n        float v_tmp_94960 = 0.0f; \n        v__81237 = v_tmp_94960; \n        /* reduce_seq */\n        for (int v_i_94870 = 0; v_i_94870 < v_MWidthC_1; v_i_94870 = (1 + v_i_94870)) {\n          v__81237 = add(v__81237, v__94889[(v_i_94870 + (v_MWidthC_1 * v_l_id_94869))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94871 = 0; \n          v__94894[v_wg_id_94864] = doubleMultiplyAdd(v__81237, v__94876, v__94875[v_wg_id_94864], v__94877); \n        }\n        /* end map_seq */\n        v_l_id_94869 = atomic_inc(&(v_work_idx_8019)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__94872",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94873",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94874",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94875",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94876",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94877",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__94884",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__94894",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94889",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}