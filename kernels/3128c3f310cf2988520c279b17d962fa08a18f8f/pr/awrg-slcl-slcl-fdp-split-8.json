{
  "name" : "awrg-slcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82997, const global float* restrict v__82998, const global float* restrict v__82999, const global float* restrict v__83000, float v__83001, float v__83002, global float* v__83020, global int* v__83004, local float* v__83015, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83006; \n  float v__83008; \n  float v__81237; \n  /* Private Memory */\n  float v__83010_0;\n  \n  float v__83012_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6911 = v__83004; \n    local int v_w_id_82990; \n    if (get_local_id(0) == 0) {\n      v_w_id_82990 = atomic_inc(v_work_idx_6911); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82990 < v_MHeight_2)){\n      for (int v_l_id_82991 = get_local_id(0); v_l_id_82991 < v_MWidthC_1; v_l_id_82991 = (v_l_id_82991 + get_local_size(0))) {\n        float v_tmp_83083 = 0.0f; \n        v__83006 = v_tmp_83083; \n        /* reduce_seq */\n        for (int v_i_82992 = 0; v_i_82992 < 8; v_i_82992 = (1 + v_i_82992)) {\n          float v_tmp_83084 = 0.0f; \n          v__83008 = v_tmp_83084; \n          int v_index_83085 = v__82997[(v_l_id_82991 + (8 * v_MWidthC_1 * v_w_id_82990) + (v_MWidthC_1 * v_i_82992))]; \n          if (v_index_83085 < 0) {\n            v__83010_0 = v__83008; \n          } else {\n            if (v_index_83085 >= v_VLength_3) {\n              v__83010_0 = v__83008; \n            } else {\n              v__83010_0 = v__82999[v_index_83085]; \n            }\n          }\n          v__83012_0 = mult(v__83010_0, v__82998[(v_l_id_82991 + (8 * v_MWidthC_1 * v_w_id_82990) + (v_MWidthC_1 * v_i_82992))]); \n          v__83006 = add(v__83012_0, v__83006); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82993 = 0; \n          v__83015[v_l_id_82991] = id(v__83006); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_82994 = get_local_id(0); \n        float v_tmp_83088 = 0.0f; \n        v__81237 = v_tmp_83088; \n        /* reduce_seq */\n        for (int v_i_82995 = 0; v_i_82995 < v_MWidthC_1; v_i_82995 = (1 + v_i_82995)) {\n          v__81237 = add(v__81237, v__83015[(v_i_82995 + (v_MWidthC_1 * v_l_id_82994))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82996 = 0; \n          v__83020[v_w_id_82990] = doubleMultiplyAdd(v__81237, v__83001, v__83000[v_w_id_82990], v__83002); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82990 = atomic_inc(v_work_idx_6911); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82997",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82998",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82999",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83000",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83001",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83002",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83004",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83020",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83015",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}