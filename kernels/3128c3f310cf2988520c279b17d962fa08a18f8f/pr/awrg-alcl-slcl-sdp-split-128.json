{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__97068, const global float* restrict v__97069, const global float* restrict v__97070, const global float* restrict v__97071, float v__97072, float v__97073, global float* v__97091, global float* v__97081, global int* v__97075, local float* v__97086, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__97077; \n  float v__97082; \n  float v__81237; \n  /* Private Memory */\n  float v__97079_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8232 = v__97075; \n    local int v_w_id_97060; \n    if (get_local_id(0) == 0) {\n      v_w_id_97060 = atomic_inc(v_work_idx_8232); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_97060 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8230; \n        v_work_idx_8230 = 0; \n        int v_l_id_97061 = atomic_inc(&(v_work_idx_8230)); \n        while((v_l_id_97061 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_97062 = 0; v_i_97062 < 128; v_i_97062 = (1 + v_i_97062)) {\n            float v_tmp_97146 = 0.0f; \n            v__97077 = v_tmp_97146; \n            int v_index_97147 = v__97068[(v_l_id_97061 + (128 * v_MWidthC_1 * v_w_id_97060) + (v_MWidthC_1 * v_i_97062))]; \n            if (v_index_97147 < 0) {\n              v__97079_0 = v__97077; \n            } else {\n              if (v_index_97147 >= v_VLength_3) {\n                v__97079_0 = v__97077; \n              } else {\n                v__97079_0 = v__97070[v_index_97147]; \n              }\n            }\n            v__97081[(127 + (128 * v_MWidthC_1 * v_w_id_97060) + (-1 * v_i_97062) + (128 * v_l_id_97061))] = mult(v__97079_0, v__97069[(v_l_id_97061 + (128 * v_MWidthC_1 * v_w_id_97060) + (v_MWidthC_1 * v_i_97062))]); \n          }\n          /* end map_seq */\n          float v_tmp_97148 = 0.0f; \n          v__97082 = v_tmp_97148; \n          /* reduce_seq */\n          for (int v_i_97063 = 0; v_i_97063 < 128; v_i_97063 = (1 + v_i_97063)) {\n            v__97082 = add(v__97082, v__97081[(v_i_97063 + (128 * v_MWidthC_1 * v_w_id_97060) + (128 * v_l_id_97061))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_97064 = 0; \n            v__97086[v_l_id_97061] = id(v__97082); \n          }\n          /* end map_seq */\n          v_l_id_97061 = atomic_inc(&(v_work_idx_8230)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_97065 = get_local_id(0); \n        float v_tmp_97151 = 0.0f; \n        v__81237 = v_tmp_97151; \n        /* reduce_seq */\n        for (int v_i_97066 = 0; v_i_97066 < v_MWidthC_1; v_i_97066 = (1 + v_i_97066)) {\n          v__81237 = add(v__81237, v__97086[(v_i_97066 + (v_MWidthC_1 * v_l_id_97065))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_97067 = 0; \n          v__97091[v_w_id_97060] = doubleMultiplyAdd(v__81237, v__97072, v__97071[v_w_id_97060], v__97073); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_97060 = atomic_inc(v_work_idx_8232); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__97068",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97069",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97070",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__97071",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__97072",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__97073",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__97081",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__97075",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__97091",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__97086",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}