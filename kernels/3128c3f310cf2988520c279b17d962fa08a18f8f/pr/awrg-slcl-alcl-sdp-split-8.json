{
  "name" : "awrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83213, const global float* restrict v__83214, const global float* restrict v__83215, const global float* restrict v__83216, float v__83217, float v__83218, global float* v__83236, global float* v__83226, global int* v__83220, local float* v__83231, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83222; \n  float v__83227; \n  float v__81237; \n  /* Private Memory */\n  float v__83224_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6931 = v__83220; \n    local int v_w_id_83205; \n    if (get_local_id(0) == 0) {\n      v_w_id_83205 = atomic_inc(v_work_idx_6931); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83205 < v_MHeight_2)){\n      for (int v_l_id_83206 = get_local_id(0); v_l_id_83206 < v_MWidthC_1; v_l_id_83206 = (v_l_id_83206 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_83207 = 0; v_i_83207 < 8; v_i_83207 = (1 + v_i_83207)) {\n          float v_tmp_83295 = 0.0f; \n          v__83222 = v_tmp_83295; \n          int v_index_83296 = v__83213[(v_l_id_83206 + (8 * v_MWidthC_1 * v_w_id_83205) + (v_MWidthC_1 * v_i_83207))]; \n          if (v_index_83296 < 0) {\n            v__83224_0 = v__83222; \n          } else {\n            if (v_index_83296 >= v_VLength_3) {\n              v__83224_0 = v__83222; \n            } else {\n              v__83224_0 = v__83215[v_index_83296]; \n            }\n          }\n          v__83226[(7 + (8 * v_MWidthC_1 * v_w_id_83205) + (-1 * v_i_83207) + (8 * v_l_id_83206))] = mult(v__83224_0, v__83214[(v_l_id_83206 + (8 * v_MWidthC_1 * v_w_id_83205) + (v_MWidthC_1 * v_i_83207))]); \n        }\n        /* end map_seq */\n        float v_tmp_83297 = 0.0f; \n        v__83227 = v_tmp_83297; \n        /* reduce_seq */\n        for (int v_i_83208 = 0; v_i_83208 < 8; v_i_83208 = (1 + v_i_83208)) {\n          v__83227 = add(v__83227, v__83226[(v_i_83208 + (8 * v_MWidthC_1 * v_w_id_83205) + (8 * v_l_id_83206))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83209 = 0; \n          v__83231[v_l_id_83206] = id(v__83227); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6924; \n        v_work_idx_6924 = 0; \n        int v_l_id_83210 = atomic_inc(&(v_work_idx_6924)); \n        while((v_l_id_83210 < 1)){\n          float v_tmp_83300 = 0.0f; \n          v__81237 = v_tmp_83300; \n          /* reduce_seq */\n          for (int v_i_83211 = 0; v_i_83211 < v_MWidthC_1; v_i_83211 = (1 + v_i_83211)) {\n            v__81237 = add(v__81237, v__83231[(v_i_83211 + (v_MWidthC_1 * v_l_id_83210))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83212 = 0; \n            v__83236[v_w_id_83205] = doubleMultiplyAdd(v__81237, v__83217, v__83216[v_w_id_83205], v__83218); \n          }\n          /* end map_seq */\n          v_l_id_83210 = atomic_inc(&(v_work_idx_6924)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83205 = atomic_inc(v_work_idx_6931); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83213",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83214",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83215",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83216",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83217",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83218",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83226",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83220",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83236",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83231",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}