{
  "name" : "awrg-slcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__96430, const global float* restrict v__96431, const global float* restrict v__96432, const global float* restrict v__96433, float v__96434, float v__96435, global float* v__96455, global int* v__96437, local float* v__96450, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96439; \n  float v__96441; \n  float v__81237; \n  /* Private Memory */\n  float v__96443_0;\n  \n  float v__96445_0;\n  \n  int v__96449_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8168 = v__96437; \n    local int v_w_id_96423; \n    if (get_local_id(0) == 0) {\n      v_w_id_96423 = atomic_inc(v_work_idx_8168); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96423 < v_MHeight_2)){\n      for (int v_l_id_96424 = get_local_id(0); v_l_id_96424 < v_MWidthC_1; v_l_id_96424 = (v_l_id_96424 + get_local_size(0))) {\n        float v_tmp_96521 = 0.0f; \n        v__96439 = v_tmp_96521; \n        /* reduce_while_seq */\n        for (int v_i_96425 = 0; v_i_96425 < 128; v_i_96425 = (1 + v_i_96425)) {\n          v__96449_0 = check(v__96439, v__96430[(v_l_id_96424 + (128 * v_MWidthC_1 * v_w_id_96423) + (v_MWidthC_1 * v_i_96425))]); \n          if (v__96449_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96522 = 0.0f; \n          v__96441 = v_tmp_96522; \n          int v_index_96523 = v__96430[(v_l_id_96424 + (128 * v_MWidthC_1 * v_w_id_96423) + (v_MWidthC_1 * v_i_96425))]; \n          if (v_index_96523 < 0) {\n            v__96443_0 = v__96441; \n          } else {\n            if (v_index_96523 >= v_VLength_3) {\n              v__96443_0 = v__96441; \n            } else {\n              v__96443_0 = v__96432[v_index_96523]; \n            }\n          }\n          v__96445_0 = mult(v__96443_0, v__96431[(v_l_id_96424 + (128 * v_MWidthC_1 * v_w_id_96423) + (v_MWidthC_1 * v_i_96425))]); \n          v__96439 = add(v__96445_0, v__96439); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96426 = 0; \n          v__96450[v_l_id_96424] = id(v__96439); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96427 = get_local_id(0); \n        float v_tmp_96526 = 0.0f; \n        v__81237 = v_tmp_96526; \n        /* reduce_seq */\n        for (int v_i_96428 = 0; v_i_96428 < v_MWidthC_1; v_i_96428 = (1 + v_i_96428)) {\n          v__81237 = add(v__81237, v__96450[(v_i_96428 + (v_MWidthC_1 * v_l_id_96427))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96429 = 0; \n          v__96455[v_w_id_96423] = doubleMultiplyAdd(v__81237, v__96434, v__96433[v_w_id_96423], v__96435); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96423 = atomic_inc(v_work_idx_8168); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96430",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96431",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96432",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96434",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96435",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96437",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96455",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96450",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}