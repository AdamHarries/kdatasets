{
  "name" : "awrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100497, const global float* restrict v__100498, const global float* restrict v__100499, const global float* restrict v__100500, float v__100501, float v__100502, global float* v__100520, global int* v__100504, local float* v__100515, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100506; \n  float v__100508; \n  float v__81237; \n  /* Private Memory */\n  float v__100510_0;\n  \n  float v__100512_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8554 = v__100504; \n    local int v_w_id_100490; \n    if (get_local_id(0) == 0) {\n      v_w_id_100490 = atomic_inc(v_work_idx_8554); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100490 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8552; \n        v_work_idx_8552 = 0; \n        int v_l_id_100491 = atomic_inc(&(v_work_idx_8552)); \n        while((v_l_id_100491 < v_MWidthC_1)){\n          float v_tmp_100575 = 0.0f; \n          v__100506 = v_tmp_100575; \n          /* reduce_seq */\n          for (int v_i_100492 = 0; v_i_100492 < 256; v_i_100492 = (1 + v_i_100492)) {\n            float v_tmp_100576 = 0.0f; \n            v__100508 = v_tmp_100576; \n            int v_index_100577 = v__100497[(v_l_id_100491 + (256 * v_MWidthC_1 * v_w_id_100490) + (v_MWidthC_1 * v_i_100492))]; \n            if (v_index_100577 < 0) {\n              v__100510_0 = v__100508; \n            } else {\n              if (v_index_100577 >= v_VLength_3) {\n                v__100510_0 = v__100508; \n              } else {\n                v__100510_0 = v__100499[v_index_100577]; \n              }\n            }\n            v__100512_0 = mult(v__100510_0, v__100498[(v_l_id_100491 + (256 * v_MWidthC_1 * v_w_id_100490) + (v_MWidthC_1 * v_i_100492))]); \n            v__100506 = add(v__100512_0, v__100506); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100493 = 0; \n            v__100515[v_l_id_100491] = id(v__100506); \n          }\n          /* end map_seq */\n          v_l_id_100491 = atomic_inc(&(v_work_idx_8552)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_100494 = get_local_id(0); \n        float v_tmp_100580 = 0.0f; \n        v__81237 = v_tmp_100580; \n        /* reduce_seq */\n        for (int v_i_100495 = 0; v_i_100495 < v_MWidthC_1; v_i_100495 = (1 + v_i_100495)) {\n          v__81237 = add(v__81237, v__100515[(v_i_100495 + (v_MWidthC_1 * v_l_id_100494))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100496 = 0; \n          v__100520[v_w_id_100490] = doubleMultiplyAdd(v__81237, v__100501, v__100500[v_w_id_100490], v__100502); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100490 = atomic_inc(v_work_idx_8554); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__100497",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100498",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100499",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100500",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100501",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100502",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100504",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100520",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100515",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}