{
  "name" : "awrg-slcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89978, const global float* restrict v__89979, const global float* restrict v__89980, const global float* restrict v__89981, float v__89982, float v__89983, global float* v__90001, global int* v__89985, local float* v__89996, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89987; \n  float v__89989; \n  float v__81237; \n  /* Private Memory */\n  float v__89991_0;\n  \n  float v__89993_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7565 = v__89985; \n    local int v_w_id_89971; \n    if (get_local_id(0) == 0) {\n      v_w_id_89971 = atomic_inc(v_work_idx_7565); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89971 < v_MHeight_2)){\n      for (int v_l_id_89972 = get_local_id(0); v_l_id_89972 < v_MWidthC_1; v_l_id_89972 = (v_l_id_89972 + get_local_size(0))) {\n        float v_tmp_90060 = 0.0f; \n        v__89987 = v_tmp_90060; \n        /* reduce_seq */\n        for (int v_i_89973 = 0; v_i_89973 < 32; v_i_89973 = (1 + v_i_89973)) {\n          float v_tmp_90061 = 0.0f; \n          v__89989 = v_tmp_90061; \n          int v_index_90062 = v__89978[(v_l_id_89972 + (32 * v_MWidthC_1 * v_w_id_89971) + (v_MWidthC_1 * v_i_89973))]; \n          if (v_index_90062 < 0) {\n            v__89991_0 = v__89989; \n          } else {\n            if (v_index_90062 >= v_VLength_3) {\n              v__89991_0 = v__89989; \n            } else {\n              v__89991_0 = v__89980[v_index_90062]; \n            }\n          }\n          v__89993_0 = mult(v__89991_0, v__89979[(v_l_id_89972 + (32 * v_MWidthC_1 * v_w_id_89971) + (v_MWidthC_1 * v_i_89973))]); \n          v__89987 = add(v__89993_0, v__89987); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89974 = 0; \n          v__89996[v_l_id_89972] = id(v__89987); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7559; \n        v_work_idx_7559 = 0; \n        int v_l_id_89975 = atomic_inc(&(v_work_idx_7559)); \n        while((v_l_id_89975 < 1)){\n          float v_tmp_90065 = 0.0f; \n          v__81237 = v_tmp_90065; \n          /* reduce_seq */\n          for (int v_i_89976 = 0; v_i_89976 < v_MWidthC_1; v_i_89976 = (1 + v_i_89976)) {\n            v__81237 = add(v__81237, v__89996[(v_i_89976 + (v_MWidthC_1 * v_l_id_89975))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89977 = 0; \n            v__90001[v_w_id_89971] = doubleMultiplyAdd(v__81237, v__89982, v__89981[v_w_id_89971], v__89983); \n          }\n          /* end map_seq */\n          v_l_id_89975 = atomic_inc(&(v_work_idx_7559)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89971 = atomic_inc(v_work_idx_7565); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89978",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89979",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89980",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89982",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89983",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89985",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90001",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89996",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}