{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__90701, const global float* restrict v__90702, const global float* restrict v__90703, const global float* restrict v__90704, float v__90705, float v__90706, global float* v__90724, global float* v__90714, global int* v__90708, local float* v__90719, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90710; \n  float v__90715; \n  float v__81237; \n  /* Private Memory */\n  float v__90712_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7640 = v__90708; \n    local int v_w_id_90693; \n    if (get_local_id(0) == 0) {\n      v_w_id_90693 = atomic_inc(v_work_idx_7640); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90693 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7638; \n        v_work_idx_7638 = 0; \n        int v_l_id_90694 = atomic_inc(&(v_work_idx_7638)); \n        while((v_l_id_90694 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_90695 = 0; v_i_90695 < 32; v_i_90695 = (1 + v_i_90695)) {\n            float v_tmp_90775 = 0.0f; \n            v__90710 = v_tmp_90775; \n            int v_index_90776 = v__90701[(v_l_id_90694 + (32 * v_MWidthC_1 * v_w_id_90693) + (v_MWidthC_1 * v_i_90695))]; \n            if (v_index_90776 < 0) {\n              v__90712_0 = v__90710; \n            } else {\n              if (v_index_90776 >= v_VLength_3) {\n                v__90712_0 = v__90710; \n              } else {\n                v__90712_0 = v__90703[v_index_90776]; \n              }\n            }\n            v__90714[(31 + (32 * v_MWidthC_1 * v_w_id_90693) + (-1 * v_i_90695) + (32 * v_l_id_90694))] = mult(v__90712_0, v__90702[(v_l_id_90694 + (32 * v_MWidthC_1 * v_w_id_90693) + (v_MWidthC_1 * v_i_90695))]); \n          }\n          /* end map_seq */\n          float v_tmp_90777 = 0.0f; \n          v__90715 = v_tmp_90777; \n          /* reduce_seq */\n          for (int v_i_90696 = 0; v_i_90696 < 32; v_i_90696 = (1 + v_i_90696)) {\n            v__90715 = add(v__90715, v__90714[(v_i_90696 + (32 * v_MWidthC_1 * v_w_id_90693) + (32 * v_l_id_90694))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90697 = 0; \n            v__90719[v_l_id_90694] = id(v__90715); \n          }\n          /* end map_seq */\n          v_l_id_90694 = atomic_inc(&(v_work_idx_7638)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7632; \n        v_work_idx_7632 = 0; \n        int v_l_id_90698 = atomic_inc(&(v_work_idx_7632)); \n        while((v_l_id_90698 < 1)){\n          float v_tmp_90780 = 0.0f; \n          v__81237 = v_tmp_90780; \n          /* reduce_seq */\n          for (int v_i_90699 = 0; v_i_90699 < v_MWidthC_1; v_i_90699 = (1 + v_i_90699)) {\n            v__81237 = add(v__81237, v__90719[(v_i_90699 + (v_MWidthC_1 * v_l_id_90698))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90700 = 0; \n            v__90724[v_w_id_90693] = doubleMultiplyAdd(v__81237, v__90705, v__90704[v_w_id_90693], v__90706); \n          }\n          /* end map_seq */\n          v_l_id_90698 = atomic_inc(&(v_work_idx_7632)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90693 = atomic_inc(v_work_idx_7640); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__90701",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90702",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90703",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90704",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90705",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90706",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90714",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90708",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90724",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90719",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}