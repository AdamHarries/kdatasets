{
  "name" : "swrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80650, const global float* restrict v__80651, const global float* restrict v__80652, const global float* restrict v__80653, float v__80654, float v__80655, global float* v__80668, global float* v__80662, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80658; \n  float v__80663; \n  /* Private Memory */\n  float v__80660_0;\n  \n  for (int v_wg_id_80646 = get_group_id(0); v_wg_id_80646 < v_MHeight_2; v_wg_id_80646 = (v_wg_id_80646 + get_num_groups(0))) {\n    for (int v_l_id_80647 = get_local_id(0); v_l_id_80647 < v_MWidthC_1; v_l_id_80647 = (v_l_id_80647 + get_local_size(0))) {\n      float v_tmp_80708 = 0.0f; \n      v__80658 = v_tmp_80708; \n      int v_index_80709 = v__80650[(v_l_id_80647 + (v_MWidthC_1 * v_wg_id_80646))]; \n      if (v_index_80709 < 0) {\n        v__80660_0 = v__80658; \n      } else {\n        if (v_index_80709 >= v_VLength_3) {\n          v__80660_0 = v__80658; \n        } else {\n          v__80660_0 = v__80652[v_index_80709]; \n        }\n      }\n      v__80662[(-1 + v_MWidthC_1 + (-1 * v_l_id_80647) + (v_MWidthC_1 * v_wg_id_80646))] = mult(v__80660_0, v__80651[(v_l_id_80647 + (v_MWidthC_1 * v_wg_id_80646))]); \n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_80710 = 0.0f; \n    v__80663 = v_tmp_80710; \n    /* reduce_seq */\n    for (int v_i_80648 = 0; v_i_80648 < v_MWidthC_1; v_i_80648 = (1 + v_i_80648)) {\n      v__80663 = add(v__80663, v__80662[(v_i_80648 + (v_MWidthC_1 * v_wg_id_80646))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_80649 = 0; \n      v__80668[v_wg_id_80646] = doubleMultiplyAdd(v__80663, v__80654, v__80653[v_wg_id_80646], v__80655); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__80650",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80651",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80652",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80653",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80654",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80655",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80662",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}