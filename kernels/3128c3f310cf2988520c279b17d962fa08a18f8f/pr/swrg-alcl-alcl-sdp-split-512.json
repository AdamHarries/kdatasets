{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102366, const global float* restrict v__102367, const global float* restrict v__102368, const global float* restrict v__102369, float v__102370, float v__102371, global float* v__102388, global float* v__102378, local float* v__102383, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102374; \n  float v__102379; \n  float v__81237; \n  /* Private Memory */\n  float v__102376_0;\n  \n  for (int v_wg_id_102358 = get_group_id(0); v_wg_id_102358 < v_MHeight_2; v_wg_id_102358 = (v_wg_id_102358 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8724; \n      v_work_idx_8724 = 0; \n      int v_l_id_102359 = atomic_inc(&(v_work_idx_8724)); \n      while((v_l_id_102359 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102360 = 0; v_i_102360 < 512; v_i_102360 = (1 + v_i_102360)) {\n          float v_tmp_102441 = 0.0f; \n          v__102374 = v_tmp_102441; \n          int v_index_102442 = v__102366[(v_l_id_102359 + (512 * v_MWidthC_1 * v_wg_id_102358) + (v_MWidthC_1 * v_i_102360))]; \n          if (v_index_102442 < 0) {\n            v__102376_0 = v__102374; \n          } else {\n            if (v_index_102442 >= v_VLength_3) {\n              v__102376_0 = v__102374; \n            } else {\n              v__102376_0 = v__102368[v_index_102442]; \n            }\n          }\n          v__102378[(511 + (512 * v_MWidthC_1 * v_wg_id_102358) + (-1 * v_i_102360) + (512 * v_l_id_102359))] = mult(v__102376_0, v__102367[(v_l_id_102359 + (512 * v_MWidthC_1 * v_wg_id_102358) + (v_MWidthC_1 * v_i_102360))]); \n        }\n        /* end map_seq */\n        float v_tmp_102443 = 0.0f; \n        v__102379 = v_tmp_102443; \n        /* reduce_seq */\n        for (int v_i_102361 = 0; v_i_102361 < 512; v_i_102361 = (1 + v_i_102361)) {\n          v__102379 = add(v__102379, v__102378[(v_i_102361 + (512 * v_MWidthC_1 * v_wg_id_102358) + (512 * v_l_id_102359))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102362 = 0; \n          v__102383[v_l_id_102359] = id(v__102379); \n        }\n        /* end map_seq */\n        v_l_id_102359 = atomic_inc(&(v_work_idx_8724)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8718; \n      v_work_idx_8718 = 0; \n      int v_l_id_102363 = atomic_inc(&(v_work_idx_8718)); \n      while((v_l_id_102363 < 1)){\n        float v_tmp_102446 = 0.0f; \n        v__81237 = v_tmp_102446; \n        /* reduce_seq */\n        for (int v_i_102364 = 0; v_i_102364 < v_MWidthC_1; v_i_102364 = (1 + v_i_102364)) {\n          v__81237 = add(v__81237, v__102383[(v_i_102364 + (v_MWidthC_1 * v_l_id_102363))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102365 = 0; \n          v__102388[v_wg_id_102358] = doubleMultiplyAdd(v__81237, v__102370, v__102369[v_wg_id_102358], v__102371); \n        }\n        /* end map_seq */\n        v_l_id_102363 = atomic_inc(&(v_work_idx_8718)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102366",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102367",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102368",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102370",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102371",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102378",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102388",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102383",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}