{
  "name" : "awrg-slcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93310, const global float* restrict v__93311, const global float* restrict v__93312, const global float* restrict v__93313, float v__93314, float v__93315, global float* v__93333, global int* v__93317, local float* v__93328, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93319; \n  float v__93321; \n  float v__81237; \n  /* Private Memory */\n  float v__93323_0;\n  \n  float v__93325_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7877 = v__93317; \n    local int v_w_id_93303; \n    if (get_local_id(0) == 0) {\n      v_w_id_93303 = atomic_inc(v_work_idx_7877); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93303 < v_MHeight_2)){\n      for (int v_l_id_93304 = get_local_id(0); v_l_id_93304 < v_MWidthC_1; v_l_id_93304 = (v_l_id_93304 + get_local_size(0))) {\n        float v_tmp_93392 = 0.0f; \n        v__93319 = v_tmp_93392; \n        /* reduce_seq */\n        for (int v_i_93305 = 0; v_i_93305 < 64; v_i_93305 = (1 + v_i_93305)) {\n          float v_tmp_93393 = 0.0f; \n          v__93321 = v_tmp_93393; \n          int v_index_93394 = v__93310[(v_l_id_93304 + (64 * v_MWidthC_1 * v_w_id_93303) + (v_MWidthC_1 * v_i_93305))]; \n          if (v_index_93394 < 0) {\n            v__93323_0 = v__93321; \n          } else {\n            if (v_index_93394 >= v_VLength_3) {\n              v__93323_0 = v__93321; \n            } else {\n              v__93323_0 = v__93312[v_index_93394]; \n            }\n          }\n          v__93325_0 = mult(v__93323_0, v__93311[(v_l_id_93304 + (64 * v_MWidthC_1 * v_w_id_93303) + (v_MWidthC_1 * v_i_93305))]); \n          v__93319 = add(v__93325_0, v__93319); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93306 = 0; \n          v__93328[v_l_id_93304] = id(v__93319); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7871; \n        v_work_idx_7871 = 0; \n        int v_l_id_93307 = atomic_inc(&(v_work_idx_7871)); \n        while((v_l_id_93307 < 1)){\n          float v_tmp_93397 = 0.0f; \n          v__81237 = v_tmp_93397; \n          /* reduce_seq */\n          for (int v_i_93308 = 0; v_i_93308 < v_MWidthC_1; v_i_93308 = (1 + v_i_93308)) {\n            v__81237 = add(v__81237, v__93328[(v_i_93308 + (v_MWidthC_1 * v_l_id_93307))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93309 = 0; \n            v__93333[v_w_id_93303] = doubleMultiplyAdd(v__81237, v__93314, v__93313[v_w_id_93303], v__93315); \n          }\n          /* end map_seq */\n          v_l_id_93307 = atomic_inc(&(v_work_idx_7871)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93303 = atomic_inc(v_work_idx_7877); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__93310",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93311",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93312",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93313",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93314",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93315",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93317",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93333",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93328",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}