{
  "name" : "glb-fdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80524, const global float* restrict v__80525, const global float* restrict v__80526, const global float* restrict v__80527, float v__80528, float v__80529, global float* v__80542, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80532; \n  float v__80534; \n  /* Private Memory */\n  float v__80536; \n  float v__80538; \n  for (int v_gl_id_80521 = get_global_id(0); v_gl_id_80521 < v_MHeight_2; v_gl_id_80521 = (v_gl_id_80521 + get_global_size(0))) {\n    float v_tmp_80572 = 0.0f; \n    v__80532 = v_tmp_80572; \n    /* reduce_seq */\n    for (int v_i_80522 = 0; v_i_80522 < v_MWidthC_1; v_i_80522 = (1 + v_i_80522)) {\n      float v_tmp_80573 = 0.0f; \n      v__80534 = v_tmp_80573; \n      int v_index_80574 = v__80524[(v_i_80522 + (v_MWidthC_1 * v_gl_id_80521))]; \n      if (v_index_80574 < 0) {\n        v__80536 = v__80534; \n      } else {\n        if (v_index_80574 >= v_VLength_3) {\n          v__80536 = v__80534; \n        } else {\n          v__80536 = v__80526[v_index_80574]; \n        }\n      }\n      v__80538 = mult(v__80536, v__80525[(v_i_80522 + (v_MWidthC_1 * v_gl_id_80521))]); \n      v__80532 = add(v__80538, v__80532); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_80523 = 0; \n      v__80542[v_gl_id_80521] = doubleMultiplyAdd(v__80532, v__80528, v__80527[v_gl_id_80521], v__80529); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__80524",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80525",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80526",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80527",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80528",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80529",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__80542",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}