{
  "name" : "awrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96642, const global float* restrict v__96643, const global float* restrict v__96644, const global float* restrict v__96645, float v__96646, float v__96647, global float* v__96665, global int* v__96649, local float* v__96660, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96651; \n  float v__96653; \n  float v__81237; \n  /* Private Memory */\n  float v__96655_0;\n  \n  float v__96657_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8189 = v__96649; \n    local int v_w_id_96635; \n    if (get_local_id(0) == 0) {\n      v_w_id_96635 = atomic_inc(v_work_idx_8189); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96635 < v_MHeight_2)){\n      for (int v_l_id_96636 = get_local_id(0); v_l_id_96636 < v_MWidthC_1; v_l_id_96636 = (v_l_id_96636 + get_local_size(0))) {\n        float v_tmp_96724 = 0.0f; \n        v__96651 = v_tmp_96724; \n        /* reduce_seq */\n        for (int v_i_96637 = 0; v_i_96637 < 128; v_i_96637 = (1 + v_i_96637)) {\n          float v_tmp_96725 = 0.0f; \n          v__96653 = v_tmp_96725; \n          int v_index_96726 = v__96642[(v_l_id_96636 + (128 * v_MWidthC_1 * v_w_id_96635) + (v_MWidthC_1 * v_i_96637))]; \n          if (v_index_96726 < 0) {\n            v__96655_0 = v__96653; \n          } else {\n            if (v_index_96726 >= v_VLength_3) {\n              v__96655_0 = v__96653; \n            } else {\n              v__96655_0 = v__96644[v_index_96726]; \n            }\n          }\n          v__96657_0 = mult(v__96655_0, v__96643[(v_l_id_96636 + (128 * v_MWidthC_1 * v_w_id_96635) + (v_MWidthC_1 * v_i_96637))]); \n          v__96651 = add(v__96657_0, v__96651); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96638 = 0; \n          v__96660[v_l_id_96636] = id(v__96651); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8183; \n        v_work_idx_8183 = 0; \n        int v_l_id_96639 = atomic_inc(&(v_work_idx_8183)); \n        while((v_l_id_96639 < 1)){\n          float v_tmp_96729 = 0.0f; \n          v__81237 = v_tmp_96729; \n          /* reduce_seq */\n          for (int v_i_96640 = 0; v_i_96640 < v_MWidthC_1; v_i_96640 = (1 + v_i_96640)) {\n            v__81237 = add(v__81237, v__96660[(v_i_96640 + (v_MWidthC_1 * v_l_id_96639))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96641 = 0; \n            v__96665[v_w_id_96635] = doubleMultiplyAdd(v__81237, v__96646, v__96645[v_w_id_96635], v__96647); \n          }\n          /* end map_seq */\n          v_l_id_96639 = atomic_inc(&(v_work_idx_8183)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96635 = atomic_inc(v_work_idx_8189); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__96642",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96643",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96644",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96645",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96646",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96647",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96649",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96665",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96660",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}