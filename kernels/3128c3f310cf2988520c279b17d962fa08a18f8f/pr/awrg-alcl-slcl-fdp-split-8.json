{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83837, const global float* restrict v__83838, const global float* restrict v__83839, const global float* restrict v__83840, float v__83841, float v__83842, global float* v__83860, global int* v__83844, local float* v__83855, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83846; \n  float v__83848; \n  float v__81237; \n  /* Private Memory */\n  float v__83850_0;\n  \n  float v__83852_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6994 = v__83844; \n    local int v_w_id_83830; \n    if (get_local_id(0) == 0) {\n      v_w_id_83830 = atomic_inc(v_work_idx_6994); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83830 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6992; \n        v_work_idx_6992 = 0; \n        int v_l_id_83831 = atomic_inc(&(v_work_idx_6992)); \n        while((v_l_id_83831 < v_MWidthC_1)){\n          float v_tmp_83915 = 0.0f; \n          v__83846 = v_tmp_83915; \n          /* reduce_seq */\n          for (int v_i_83832 = 0; v_i_83832 < 8; v_i_83832 = (1 + v_i_83832)) {\n            float v_tmp_83916 = 0.0f; \n            v__83848 = v_tmp_83916; \n            int v_index_83917 = v__83837[(v_l_id_83831 + (8 * v_MWidthC_1 * v_w_id_83830) + (v_MWidthC_1 * v_i_83832))]; \n            if (v_index_83917 < 0) {\n              v__83850_0 = v__83848; \n            } else {\n              if (v_index_83917 >= v_VLength_3) {\n                v__83850_0 = v__83848; \n              } else {\n                v__83850_0 = v__83839[v_index_83917]; \n              }\n            }\n            v__83852_0 = mult(v__83850_0, v__83838[(v_l_id_83831 + (8 * v_MWidthC_1 * v_w_id_83830) + (v_MWidthC_1 * v_i_83832))]); \n            v__83846 = add(v__83852_0, v__83846); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83833 = 0; \n            v__83855[v_l_id_83831] = id(v__83846); \n          }\n          /* end map_seq */\n          v_l_id_83831 = atomic_inc(&(v_work_idx_6992)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83834 = get_local_id(0); \n        float v_tmp_83920 = 0.0f; \n        v__81237 = v_tmp_83920; \n        /* reduce_seq */\n        for (int v_i_83835 = 0; v_i_83835 < v_MWidthC_1; v_i_83835 = (1 + v_i_83835)) {\n          v__81237 = add(v__81237, v__83855[(v_i_83835 + (v_MWidthC_1 * v_l_id_83834))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83836 = 0; \n          v__83860[v_w_id_83830] = doubleMultiplyAdd(v__81237, v__83841, v__83840[v_w_id_83830], v__83842); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83830 = atomic_inc(v_work_idx_6994); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__83837",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83838",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83839",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83840",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83841",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83842",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83844",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83860",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83855",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}