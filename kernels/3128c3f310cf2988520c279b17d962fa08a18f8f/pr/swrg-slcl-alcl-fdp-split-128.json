{
  "name" : "swrg-slcl-alcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94974, const global float* restrict v__94975, const global float* restrict v__94976, const global float* restrict v__94977, float v__94978, float v__94979, global float* v__94996, local float* v__94991, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94982; \n  float v__94984; \n  float v__81237; \n  /* Private Memory */\n  float v__94986_0;\n  \n  float v__94988_0;\n  \n  for (int v_wg_id_94967 = get_group_id(0); v_wg_id_94967 < v_MHeight_2; v_wg_id_94967 = (v_wg_id_94967 + get_num_groups(0))) {\n    for (int v_l_id_94968 = get_local_id(0); v_l_id_94968 < v_MWidthC_1; v_l_id_94968 = (v_l_id_94968 + get_local_size(0))) {\n      float v_tmp_95057 = 0.0f; \n      v__94982 = v_tmp_95057; \n      /* reduce_seq */\n      for (int v_i_94969 = 0; v_i_94969 < 128; v_i_94969 = (1 + v_i_94969)) {\n        float v_tmp_95058 = 0.0f; \n        v__94984 = v_tmp_95058; \n        int v_index_95059 = v__94974[(v_l_id_94968 + (128 * v_MWidthC_1 * v_wg_id_94967) + (v_MWidthC_1 * v_i_94969))]; \n        if (v_index_95059 < 0) {\n          v__94986_0 = v__94984; \n        } else {\n          if (v_index_95059 >= v_VLength_3) {\n            v__94986_0 = v__94984; \n          } else {\n            v__94986_0 = v__94976[v_index_95059]; \n          }\n        }\n        v__94988_0 = mult(v__94986_0, v__94975[(v_l_id_94968 + (128 * v_MWidthC_1 * v_wg_id_94967) + (v_MWidthC_1 * v_i_94969))]); \n        v__94982 = add(v__94988_0, v__94982); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94970 = 0; \n        v__94991[v_l_id_94968] = id(v__94982); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8029; \n      v_work_idx_8029 = 0; \n      int v_l_id_94971 = atomic_inc(&(v_work_idx_8029)); \n      while((v_l_id_94971 < 1)){\n        float v_tmp_95062 = 0.0f; \n        v__81237 = v_tmp_95062; \n        /* reduce_seq */\n        for (int v_i_94972 = 0; v_i_94972 < v_MWidthC_1; v_i_94972 = (1 + v_i_94972)) {\n          v__81237 = add(v__81237, v__94991[(v_i_94972 + (v_MWidthC_1 * v_l_id_94971))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_94973 = 0; \n          v__94996[v_wg_id_94967] = doubleMultiplyAdd(v__81237, v__94978, v__94977[v_wg_id_94967], v__94979); \n        }\n        /* end map_seq */\n        v_l_id_94971 = atomic_inc(&(v_work_idx_8029)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__94974",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94975",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94976",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94977",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94978",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94979",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__94991",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}