{
  "name" : "awrg-slcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89877, const global float* restrict v__89878, const global float* restrict v__89879, const global float* restrict v__89880, float v__89881, float v__89882, global float* v__89900, global float* v__89890, global int* v__89884, local float* v__89895, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89886; \n  float v__89891; \n  float v__81237; \n  /* Private Memory */\n  float v__89888_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7555 = v__89884; \n    local int v_w_id_89869; \n    if (get_local_id(0) == 0) {\n      v_w_id_89869 = atomic_inc(v_work_idx_7555); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89869 < v_MHeight_2)){\n      for (int v_l_id_89870 = get_local_id(0); v_l_id_89870 < v_MWidthC_1; v_l_id_89870 = (v_l_id_89870 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_89871 = 0; v_i_89871 < 32; v_i_89871 = (1 + v_i_89871)) {\n          float v_tmp_89959 = 0.0f; \n          v__89886 = v_tmp_89959; \n          int v_index_89960 = v__89877[(v_l_id_89870 + (32 * v_MWidthC_1 * v_w_id_89869) + (v_MWidthC_1 * v_i_89871))]; \n          if (v_index_89960 < 0) {\n            v__89888_0 = v__89886; \n          } else {\n            if (v_index_89960 >= v_VLength_3) {\n              v__89888_0 = v__89886; \n            } else {\n              v__89888_0 = v__89879[v_index_89960]; \n            }\n          }\n          v__89890[(31 + (32 * v_MWidthC_1 * v_w_id_89869) + (-1 * v_i_89871) + (32 * v_l_id_89870))] = mult(v__89888_0, v__89878[(v_l_id_89870 + (32 * v_MWidthC_1 * v_w_id_89869) + (v_MWidthC_1 * v_i_89871))]); \n        }\n        /* end map_seq */\n        float v_tmp_89961 = 0.0f; \n        v__89891 = v_tmp_89961; \n        /* reduce_seq */\n        for (int v_i_89872 = 0; v_i_89872 < 32; v_i_89872 = (1 + v_i_89872)) {\n          v__89891 = add(v__89891, v__89890[(v_i_89872 + (32 * v_MWidthC_1 * v_w_id_89869) + (32 * v_l_id_89870))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89873 = 0; \n          v__89895[v_l_id_89870] = id(v__89891); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7548; \n        v_work_idx_7548 = 0; \n        int v_l_id_89874 = atomic_inc(&(v_work_idx_7548)); \n        while((v_l_id_89874 < 1)){\n          float v_tmp_89964 = 0.0f; \n          v__81237 = v_tmp_89964; \n          /* reduce_seq */\n          for (int v_i_89875 = 0; v_i_89875 < v_MWidthC_1; v_i_89875 = (1 + v_i_89875)) {\n            v__81237 = add(v__81237, v__89895[(v_i_89875 + (v_MWidthC_1 * v_l_id_89874))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_89876 = 0; \n            v__89900[v_w_id_89869] = doubleMultiplyAdd(v__81237, v__89881, v__89880[v_w_id_89869], v__89882); \n          }\n          /* end map_seq */\n          v_l_id_89874 = atomic_inc(&(v_work_idx_7548)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89869 = atomic_inc(v_work_idx_7555); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__89877",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89878",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89879",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89880",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89881",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89882",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89890",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89884",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89900",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89895",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}