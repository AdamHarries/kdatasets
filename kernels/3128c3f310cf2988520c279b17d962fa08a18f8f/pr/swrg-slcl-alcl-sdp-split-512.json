{
  "name" : "swrg-slcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101536, const global float* restrict v__101537, const global float* restrict v__101538, const global float* restrict v__101539, float v__101540, float v__101541, global float* v__101558, global float* v__101548, local float* v__101553, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101544; \n  float v__101549; \n  float v__81237; \n  /* Private Memory */\n  float v__101546_0;\n  \n  for (int v_wg_id_101528 = get_group_id(0); v_wg_id_101528 < v_MHeight_2; v_wg_id_101528 = (v_wg_id_101528 + get_num_groups(0))) {\n    for (int v_l_id_101529 = get_local_id(0); v_l_id_101529 < v_MWidthC_1; v_l_id_101529 = (v_l_id_101529 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_101530 = 0; v_i_101530 < 512; v_i_101530 = (1 + v_i_101530)) {\n        float v_tmp_101619 = 0.0f; \n        v__101544 = v_tmp_101619; \n        int v_index_101620 = v__101536[(v_l_id_101529 + (512 * v_MWidthC_1 * v_wg_id_101528) + (v_MWidthC_1 * v_i_101530))]; \n        if (v_index_101620 < 0) {\n          v__101546_0 = v__101544; \n        } else {\n          if (v_index_101620 >= v_VLength_3) {\n            v__101546_0 = v__101544; \n          } else {\n            v__101546_0 = v__101538[v_index_101620]; \n          }\n        }\n        v__101548[(511 + (512 * v_MWidthC_1 * v_wg_id_101528) + (-1 * v_i_101530) + (512 * v_l_id_101529))] = mult(v__101546_0, v__101537[(v_l_id_101529 + (512 * v_MWidthC_1 * v_wg_id_101528) + (v_MWidthC_1 * v_i_101530))]); \n      }\n      /* end map_seq */\n      float v_tmp_101621 = 0.0f; \n      v__101549 = v_tmp_101621; \n      /* reduce_seq */\n      for (int v_i_101531 = 0; v_i_101531 < 512; v_i_101531 = (1 + v_i_101531)) {\n        v__101549 = add(v__101549, v__101548[(v_i_101531 + (512 * v_MWidthC_1 * v_wg_id_101528) + (512 * v_l_id_101529))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101532 = 0; \n        v__101553[v_l_id_101529] = id(v__101549); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8643; \n      v_work_idx_8643 = 0; \n      int v_l_id_101533 = atomic_inc(&(v_work_idx_8643)); \n      while((v_l_id_101533 < 1)){\n        float v_tmp_101624 = 0.0f; \n        v__81237 = v_tmp_101624; \n        /* reduce_seq */\n        for (int v_i_101534 = 0; v_i_101534 < v_MWidthC_1; v_i_101534 = (1 + v_i_101534)) {\n          v__81237 = add(v__81237, v__101553[(v_i_101534 + (v_MWidthC_1 * v_l_id_101533))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101535 = 0; \n          v__101558[v_wg_id_101528] = doubleMultiplyAdd(v__81237, v__101540, v__101539[v_wg_id_101528], v__101541); \n        }\n        /* end map_seq */\n        v_l_id_101533 = atomic_inc(&(v_work_idx_8643)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101536",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101537",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101538",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101539",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101540",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101541",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101548",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101558",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101553",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}