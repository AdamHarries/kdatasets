{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99552, const global float* restrict v__99553, const global float* restrict v__99554, const global float* restrict v__99555, float v__99556, float v__99557, global float* v__99575, global float* v__99565, global int* v__99559, local float* v__99570, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99561; \n  float v__99566; \n  float v__81237; \n  /* Private Memory */\n  float v__99563_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8462 = v__99559; \n    local int v_w_id_99544; \n    if (get_local_id(0) == 0) {\n      v_w_id_99544 = atomic_inc(v_work_idx_8462); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99544 < v_MHeight_2)){\n      for (int v_l_id_99545 = get_local_id(0); v_l_id_99545 < v_MWidthC_1; v_l_id_99545 = (v_l_id_99545 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99546 = 0; v_i_99546 < 256; v_i_99546 = (1 + v_i_99546)) {\n          float v_tmp_99638 = 0.0f; \n          v__99561 = v_tmp_99638; \n          int v_index_99639 = v__99552[(v_l_id_99545 + (256 * v_MWidthC_1 * v_w_id_99544) + (v_MWidthC_1 * v_i_99546))]; \n          if (v_index_99639 < 0) {\n            v__99563_0 = v__99561; \n          } else {\n            if (v_index_99639 >= v_VLength_3) {\n              v__99563_0 = v__99561; \n            } else {\n              v__99563_0 = v__99554[v_index_99639]; \n            }\n          }\n          v__99565[(255 + (256 * v_MWidthC_1 * v_w_id_99544) + (-1 * v_i_99546) + (256 * v_l_id_99545))] = mult(v__99563_0, v__99553[(v_l_id_99545 + (256 * v_MWidthC_1 * v_w_id_99544) + (v_MWidthC_1 * v_i_99546))]); \n        }\n        /* end map_seq */\n        float v_tmp_99640 = 0.0f; \n        v__99566 = v_tmp_99640; \n        /* reduce_seq */\n        for (int v_i_99547 = 0; v_i_99547 < 256; v_i_99547 = (1 + v_i_99547)) {\n          v__99566 = add(v__99566, v__99565[(v_i_99547 + (256 * v_MWidthC_1 * v_w_id_99544) + (256 * v_l_id_99545))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99548 = 0; \n          v__99570[v_l_id_99545] = id(v__99566); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_99549 = get_local_id(0); \n        float v_tmp_99643 = 0.0f; \n        v__81237 = v_tmp_99643; \n        /* reduce_seq */\n        for (int v_i_99550 = 0; v_i_99550 < v_MWidthC_1; v_i_99550 = (1 + v_i_99550)) {\n          v__81237 = add(v__81237, v__99570[(v_i_99550 + (v_MWidthC_1 * v_l_id_99549))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99551 = 0; \n          v__99575[v_w_id_99544] = doubleMultiplyAdd(v__81237, v__99556, v__99555[v_w_id_99544], v__99557); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99544 = atomic_inc(v_work_idx_8462); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99552",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99553",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99554",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99555",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99556",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99557",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99565",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99559",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99575",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99570",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}