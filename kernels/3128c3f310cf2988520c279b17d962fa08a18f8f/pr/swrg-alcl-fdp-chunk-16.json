{
  "name" : "swrg-alcl-fdp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85256, const global float* restrict v__85257, const global float* restrict v__85258, const global float* restrict v__85259, float v__85260, float v__85261, global float* v__85274, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85264; \n  float v__85266; \n  /* Private Memory */\n  float v__85268_0;\n  \n  float v__85270_0;\n  \n  for (int v_wg_id_85252 = get_group_id(0); v_wg_id_85252 < ((v_MHeight_2)/(16)); v_wg_id_85252 = (v_wg_id_85252 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7119; \n      v_work_idx_7119 = 0; \n      int v_l_id_85253 = atomic_inc(&(v_work_idx_7119)); \n      while((v_l_id_85253 < 16)){\n        float v_tmp_85312 = 0.0f; \n        v__85264 = v_tmp_85312; \n        /* reduce_seq */\n        for (int v_i_85254 = 0; v_i_85254 < v_MWidthC_1; v_i_85254 = (1 + v_i_85254)) {\n          float v_tmp_85313 = 0.0f; \n          v__85266 = v_tmp_85313; \n          int v_index_85314 = v__85256[(v_i_85254 + (16 * v_MWidthC_1 * v_wg_id_85252) + (v_MWidthC_1 * v_l_id_85253))]; \n          if (v_index_85314 < 0) {\n            v__85268_0 = v__85266; \n          } else {\n            if (v_index_85314 >= v_VLength_3) {\n              v__85268_0 = v__85266; \n            } else {\n              v__85268_0 = v__85258[v_index_85314]; \n            }\n          }\n          v__85270_0 = mult(v__85268_0, v__85257[(v_i_85254 + (16 * v_MWidthC_1 * v_wg_id_85252) + (v_MWidthC_1 * v_l_id_85253))]); \n          v__85264 = add(v__85270_0, v__85264); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85255 = 0; \n          v__85274[(v_l_id_85253 + (16 * v_wg_id_85252))] = doubleMultiplyAdd(v__85264, v__85260, v__85259[(v_l_id_85253 + (16 * v_wg_id_85252))], v__85261); \n        }\n        /* end map_seq */\n        v_l_id_85253 = atomic_inc(&(v_work_idx_7119)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__85256",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85257",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85258",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85259",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85260",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85261",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__85274",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}