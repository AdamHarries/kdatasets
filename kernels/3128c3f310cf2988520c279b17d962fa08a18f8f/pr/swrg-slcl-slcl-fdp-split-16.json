{
  "name" : "swrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__84658, const global float* restrict v__84659, const global float* restrict v__84660, const global float* restrict v__84661, float v__84662, float v__84663, global float* v__84680, local float* v__84675, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__84666; \n  float v__84668; \n  float v__81237; \n  /* Private Memory */\n  float v__84670_0;\n  \n  float v__84672_0;\n  \n  for (int v_wg_id_84651 = get_group_id(0); v_wg_id_84651 < v_MHeight_2; v_wg_id_84651 = (v_wg_id_84651 + get_num_groups(0))) {\n    for (int v_l_id_84652 = get_local_id(0); v_l_id_84652 < v_MWidthC_1; v_l_id_84652 = (v_l_id_84652 + get_local_size(0))) {\n      float v_tmp_84745 = 0.0f; \n      v__84666 = v_tmp_84745; \n      /* reduce_seq */\n      for (int v_i_84653 = 0; v_i_84653 < 16; v_i_84653 = (1 + v_i_84653)) {\n        float v_tmp_84746 = 0.0f; \n        v__84668 = v_tmp_84746; \n        int v_index_84747 = v__84658[(v_l_id_84652 + (16 * v_MWidthC_1 * v_wg_id_84651) + (v_MWidthC_1 * v_i_84653))]; \n        if (v_index_84747 < 0) {\n          v__84670_0 = v__84668; \n        } else {\n          if (v_index_84747 >= v_VLength_3) {\n            v__84670_0 = v__84668; \n          } else {\n            v__84670_0 = v__84660[v_index_84747]; \n          }\n        }\n        v__84672_0 = mult(v__84670_0, v__84659[(v_l_id_84652 + (16 * v_MWidthC_1 * v_wg_id_84651) + (v_MWidthC_1 * v_i_84653))]); \n        v__84666 = add(v__84672_0, v__84666); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84654 = 0; \n        v__84675[v_l_id_84652] = id(v__84666); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_84655 = get_local_id(0); \n      float v_tmp_84750 = 0.0f; \n      v__81237 = v_tmp_84750; \n      /* reduce_seq */\n      for (int v_i_84656 = 0; v_i_84656 < v_MWidthC_1; v_i_84656 = (1 + v_i_84656)) {\n        v__81237 = add(v__81237, v__84675[(v_i_84656 + (v_MWidthC_1 * v_l_id_84655))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_84657 = 0; \n        v__84680[v_wg_id_84651] = doubleMultiplyAdd(v__81237, v__84662, v__84661[v_wg_id_84651], v__84663); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__84658",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84659",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__84660",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__84661",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__84662",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__84663",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__84680",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__84675",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}