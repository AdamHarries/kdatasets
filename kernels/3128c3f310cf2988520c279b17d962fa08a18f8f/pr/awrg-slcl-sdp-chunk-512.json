{
  "name" : "awrg-slcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102651, const global float* restrict v__102652, const global float* restrict v__102653, const global float* restrict v__102654, float v__102655, float v__102656, global float* v__102670, global float* v__102664, global int* v__102658, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102660; \n  float v__102665; \n  /* Private Memory */\n  float v__102662_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8752 = v__102658; \n    local int v_w_id_102646; \n    if (get_local_id(0) == 0) {\n      v_w_id_102646 = atomic_inc(v_work_idx_8752); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_102646 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_102647 = get_local_id(0); v_l_id_102647 < 512; v_l_id_102647 = (v_l_id_102647 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_102648 = 0; v_i_102648 < v_MWidthC_1; v_i_102648 = (1 + v_i_102648)) {\n          float v_tmp_102713 = 0.0f; \n          v__102660 = v_tmp_102713; \n          int v_index_102714 = v__102651[(v_i_102648 + (512 * v_MWidthC_1 * v_w_id_102646) + (v_MWidthC_1 * v_l_id_102647))]; \n          if (v_index_102714 < 0) {\n            v__102662_0 = v__102660; \n          } else {\n            if (v_index_102714 >= v_VLength_3) {\n              v__102662_0 = v__102660; \n            } else {\n              v__102662_0 = v__102653[v_index_102714]; \n            }\n          }\n          v__102664[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_w_id_102646) + (-1 * v_i_102648) + (v_MWidthC_1 * v_l_id_102647))] = mult(v__102662_0, v__102652[(v_i_102648 + (512 * v_MWidthC_1 * v_w_id_102646) + (v_MWidthC_1 * v_l_id_102647))]); \n        }\n        /* end map_seq */\n        float v_tmp_102715 = 0.0f; \n        v__102665 = v_tmp_102715; \n        /* reduce_seq */\n        for (int v_i_102649 = 0; v_i_102649 < v_MWidthC_1; v_i_102649 = (1 + v_i_102649)) {\n          v__102665 = add(v__102665, v__102664[(v_i_102649 + (512 * v_MWidthC_1 * v_w_id_102646) + (v_MWidthC_1 * v_l_id_102647))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102650 = 0; \n          v__102670[(v_l_id_102647 + (512 * v_w_id_102646))] = doubleMultiplyAdd(v__102665, v__102655, v__102654[(v_l_id_102647 + (512 * v_w_id_102646))], v__102656); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_102646 = atomic_inc(v_work_idx_8752); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102651",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102652",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102653",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102654",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102655",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102656",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102664",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102658",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__102670",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}