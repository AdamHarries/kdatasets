{
  "name" : "swrg-alcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__81924, const global float* restrict v__81925, const global float* restrict v__81926, const global float* restrict v__81927, float v__81928, float v__81929, global float* v__81942, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81932; \n  float v__81934; \n  /* Private Memory */\n  float v__81936_0;\n  \n  float v__81938_0;\n  \n  for (int v_wg_id_81920 = get_group_id(0); v_wg_id_81920 < ((v_MHeight_2)/(8)); v_wg_id_81920 = (v_wg_id_81920 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_6807; \n      v_work_idx_6807 = 0; \n      int v_l_id_81921 = atomic_inc(&(v_work_idx_6807)); \n      while((v_l_id_81921 < 8)){\n        float v_tmp_81980 = 0.0f; \n        v__81932 = v_tmp_81980; \n        /* reduce_seq */\n        for (int v_i_81922 = 0; v_i_81922 < v_MWidthC_1; v_i_81922 = (1 + v_i_81922)) {\n          float v_tmp_81981 = 0.0f; \n          v__81934 = v_tmp_81981; \n          int v_index_81982 = v__81924[(v_i_81922 + (8 * v_MWidthC_1 * v_wg_id_81920) + (v_MWidthC_1 * v_l_id_81921))]; \n          if (v_index_81982 < 0) {\n            v__81936_0 = v__81934; \n          } else {\n            if (v_index_81982 >= v_VLength_3) {\n              v__81936_0 = v__81934; \n            } else {\n              v__81936_0 = v__81926[v_index_81982]; \n            }\n          }\n          v__81938_0 = mult(v__81936_0, v__81925[(v_i_81922 + (8 * v_MWidthC_1 * v_wg_id_81920) + (v_MWidthC_1 * v_l_id_81921))]); \n          v__81932 = add(v__81938_0, v__81932); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_81923 = 0; \n          v__81942[(v_l_id_81921 + (8 * v_wg_id_81920))] = doubleMultiplyAdd(v__81932, v__81928, v__81927[(v_l_id_81921 + (8 * v_wg_id_81920))], v__81929); \n        }\n        /* end map_seq */\n        v_l_id_81921 = atomic_inc(&(v_work_idx_6807)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__81924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81925",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81926",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81927",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81928",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81929",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81942",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}