{
  "name" : "swrg-alcl-slcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98832, const global float* restrict v__98833, const global float* restrict v__98834, const global float* restrict v__98835, float v__98836, float v__98837, global float* v__98854, local float* v__98849, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98840; \n  float v__98842; \n  float v__81237; \n  /* Private Memory */\n  float v__98844_0;\n  \n  float v__98846_0;\n  \n  for (int v_wg_id_98825 = get_group_id(0); v_wg_id_98825 < v_MHeight_2; v_wg_id_98825 = (v_wg_id_98825 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8392; \n      v_work_idx_8392 = 0; \n      int v_l_id_98826 = atomic_inc(&(v_work_idx_8392)); \n      while((v_l_id_98826 < v_MWidthC_1)){\n        float v_tmp_98911 = 0.0f; \n        v__98840 = v_tmp_98911; \n        /* reduce_seq */\n        for (int v_i_98827 = 0; v_i_98827 < 256; v_i_98827 = (1 + v_i_98827)) {\n          float v_tmp_98912 = 0.0f; \n          v__98842 = v_tmp_98912; \n          int v_index_98913 = v__98832[(v_l_id_98826 + (256 * v_MWidthC_1 * v_wg_id_98825) + (v_MWidthC_1 * v_i_98827))]; \n          if (v_index_98913 < 0) {\n            v__98844_0 = v__98842; \n          } else {\n            if (v_index_98913 >= v_VLength_3) {\n              v__98844_0 = v__98842; \n            } else {\n              v__98844_0 = v__98834[v_index_98913]; \n            }\n          }\n          v__98846_0 = mult(v__98844_0, v__98833[(v_l_id_98826 + (256 * v_MWidthC_1 * v_wg_id_98825) + (v_MWidthC_1 * v_i_98827))]); \n          v__98840 = add(v__98846_0, v__98840); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98828 = 0; \n          v__98849[v_l_id_98826] = id(v__98840); \n        }\n        /* end map_seq */\n        v_l_id_98826 = atomic_inc(&(v_work_idx_8392)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98829 = get_local_id(0); \n      float v_tmp_98916 = 0.0f; \n      v__81237 = v_tmp_98916; \n      /* reduce_seq */\n      for (int v_i_98830 = 0; v_i_98830 < v_MWidthC_1; v_i_98830 = (1 + v_i_98830)) {\n        v__81237 = add(v__81237, v__98849[(v_i_98830 + (v_MWidthC_1 * v_l_id_98829))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98831 = 0; \n        v__98854[v_wg_id_98825] = doubleMultiplyAdd(v__81237, v__98836, v__98835[v_wg_id_98825], v__98837); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98832",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98833",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98834",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98835",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98836",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98837",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98849",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}