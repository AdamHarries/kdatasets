{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__92168, const global float* restrict v__92169, const global float* restrict v__92170, const global float* restrict v__92171, float v__92172, float v__92173, global float* v__92190, local float* v__92185, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92176; \n  float v__92178; \n  float v__81237; \n  /* Private Memory */\n  float v__92180_0;\n  \n  float v__92182_0;\n  \n  for (int v_wg_id_92161 = get_group_id(0); v_wg_id_92161 < v_MHeight_2; v_wg_id_92161 = (v_wg_id_92161 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7768; \n      v_work_idx_7768 = 0; \n      int v_l_id_92162 = atomic_inc(&(v_work_idx_7768)); \n      while((v_l_id_92162 < v_MWidthC_1)){\n        float v_tmp_92247 = 0.0f; \n        v__92176 = v_tmp_92247; \n        /* reduce_seq */\n        for (int v_i_92163 = 0; v_i_92163 < 64; v_i_92163 = (1 + v_i_92163)) {\n          float v_tmp_92248 = 0.0f; \n          v__92178 = v_tmp_92248; \n          int v_index_92249 = v__92168[(v_l_id_92162 + (64 * v_MWidthC_1 * v_wg_id_92161) + (v_MWidthC_1 * v_i_92163))]; \n          if (v_index_92249 < 0) {\n            v__92180_0 = v__92178; \n          } else {\n            if (v_index_92249 >= v_VLength_3) {\n              v__92180_0 = v__92178; \n            } else {\n              v__92180_0 = v__92170[v_index_92249]; \n            }\n          }\n          v__92182_0 = mult(v__92180_0, v__92169[(v_l_id_92162 + (64 * v_MWidthC_1 * v_wg_id_92161) + (v_MWidthC_1 * v_i_92163))]); \n          v__92176 = add(v__92182_0, v__92176); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92164 = 0; \n          v__92185[v_l_id_92162] = id(v__92176); \n        }\n        /* end map_seq */\n        v_l_id_92162 = atomic_inc(&(v_work_idx_7768)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_92165 = get_local_id(0); \n      float v_tmp_92252 = 0.0f; \n      v__81237 = v_tmp_92252; \n      /* reduce_seq */\n      for (int v_i_92166 = 0; v_i_92166 < v_MWidthC_1; v_i_92166 = (1 + v_i_92166)) {\n        v__81237 = add(v__81237, v__92185[(v_i_92166 + (v_MWidthC_1 * v_l_id_92165))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_92167 = 0; \n        v__92190[v_wg_id_92161] = doubleMultiplyAdd(v__81237, v__92172, v__92171[v_wg_id_92161], v__92173); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__92168",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92169",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92170",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92171",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92172",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92173",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92185",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}