{
  "name" : "awrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99319, const global float* restrict v__99320, const global float* restrict v__99321, const global float* restrict v__99322, float v__99323, float v__99324, global float* v__99338, global float* v__99332, global int* v__99326, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99328; \n  float v__99333; \n  /* Private Memory */\n  float v__99330_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8440 = v__99326; \n    local int v_w_id_99314; \n    if (get_local_id(0) == 0) {\n      v_w_id_99314 = atomic_inc(v_work_idx_8440); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99314 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_99315 = get_local_id(0); v_l_id_99315 < 256; v_l_id_99315 = (v_l_id_99315 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_99316 = 0; v_i_99316 < v_MWidthC_1; v_i_99316 = (1 + v_i_99316)) {\n          float v_tmp_99381 = 0.0f; \n          v__99328 = v_tmp_99381; \n          int v_index_99382 = v__99319[(v_i_99316 + (256 * v_MWidthC_1 * v_w_id_99314) + (v_MWidthC_1 * v_l_id_99315))]; \n          if (v_index_99382 < 0) {\n            v__99330_0 = v__99328; \n          } else {\n            if (v_index_99382 >= v_VLength_3) {\n              v__99330_0 = v__99328; \n            } else {\n              v__99330_0 = v__99321[v_index_99382]; \n            }\n          }\n          v__99332[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_w_id_99314) + (-1 * v_i_99316) + (v_MWidthC_1 * v_l_id_99315))] = mult(v__99330_0, v__99320[(v_i_99316 + (256 * v_MWidthC_1 * v_w_id_99314) + (v_MWidthC_1 * v_l_id_99315))]); \n        }\n        /* end map_seq */\n        float v_tmp_99383 = 0.0f; \n        v__99333 = v_tmp_99383; \n        /* reduce_seq */\n        for (int v_i_99317 = 0; v_i_99317 < v_MWidthC_1; v_i_99317 = (1 + v_i_99317)) {\n          v__99333 = add(v__99333, v__99332[(v_i_99317 + (256 * v_MWidthC_1 * v_w_id_99314) + (v_MWidthC_1 * v_l_id_99315))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99318 = 0; \n          v__99338[(v_l_id_99315 + (256 * v_w_id_99314))] = doubleMultiplyAdd(v__99333, v__99323, v__99322[(v_l_id_99315 + (256 * v_w_id_99314))], v__99324); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_99314 = atomic_inc(v_work_idx_8440); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__99319",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99320",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99321",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99322",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99323",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99324",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99326",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99338",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}