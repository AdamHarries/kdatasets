{
  "name" : "swrg-alcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__91849, const global float* restrict v__91850, const global float* restrict v__91851, const global float* restrict v__91852, float v__91853, float v__91854, global float* v__91867, global float* v__91861, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__91857; \n  float v__91862; \n  /* Private Memory */\n  float v__91859_0;\n  \n  for (int v_wg_id_91844 = get_group_id(0); v_wg_id_91844 < ((v_MHeight_2)/(64)); v_wg_id_91844 = (v_wg_id_91844 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7737; \n      v_work_idx_7737 = 0; \n      int v_l_id_91845 = atomic_inc(&(v_work_idx_7737)); \n      while((v_l_id_91845 < 64)){\n        /* map_seq */\n        for (int v_i_91846 = 0; v_i_91846 < v_MWidthC_1; v_i_91846 = (1 + v_i_91846)) {\n          float v_tmp_91907 = 0.0f; \n          v__91857 = v_tmp_91907; \n          int v_index_91908 = v__91849[(v_i_91846 + (64 * v_MWidthC_1 * v_wg_id_91844) + (v_MWidthC_1 * v_l_id_91845))]; \n          if (v_index_91908 < 0) {\n            v__91859_0 = v__91857; \n          } else {\n            if (v_index_91908 >= v_VLength_3) {\n              v__91859_0 = v__91857; \n            } else {\n              v__91859_0 = v__91851[v_index_91908]; \n            }\n          }\n          v__91861[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_91844) + (-1 * v_i_91846) + (v_MWidthC_1 * v_l_id_91845))] = mult(v__91859_0, v__91850[(v_i_91846 + (64 * v_MWidthC_1 * v_wg_id_91844) + (v_MWidthC_1 * v_l_id_91845))]); \n        }\n        /* end map_seq */\n        float v_tmp_91909 = 0.0f; \n        v__91862 = v_tmp_91909; \n        /* reduce_seq */\n        for (int v_i_91847 = 0; v_i_91847 < v_MWidthC_1; v_i_91847 = (1 + v_i_91847)) {\n          v__91862 = add(v__91862, v__91861[(v_i_91847 + (64 * v_MWidthC_1 * v_wg_id_91844) + (v_MWidthC_1 * v_l_id_91845))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_91848 = 0; \n          v__91867[(v_l_id_91845 + (64 * v_wg_id_91844))] = doubleMultiplyAdd(v__91862, v__91853, v__91852[(v_l_id_91845 + (64 * v_wg_id_91844))], v__91854); \n        }\n        /* end map_seq */\n        v_l_id_91845 = atomic_inc(&(v_work_idx_7737)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__91849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91850",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__91851",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__91852",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__91853",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__91854",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__91861",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__91867",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}