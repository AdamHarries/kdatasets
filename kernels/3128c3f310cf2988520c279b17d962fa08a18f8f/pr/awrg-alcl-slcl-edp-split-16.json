{
  "name" : "awrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__87266, const global float* restrict v__87267, const global float* restrict v__87268, const global float* restrict v__87269, float v__87270, float v__87271, global float* v__87291, global int* v__87273, local float* v__87286, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87275; \n  float v__87277; \n  float v__81237; \n  /* Private Memory */\n  float v__87279_0;\n  \n  float v__87281_0;\n  \n  int v__87285_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7316 = v__87273; \n    local int v_w_id_87259; \n    if (get_local_id(0) == 0) {\n      v_w_id_87259 = atomic_inc(v_work_idx_7316); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_87259 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7314; \n        v_work_idx_7314 = 0; \n        int v_l_id_87260 = atomic_inc(&(v_work_idx_7314)); \n        while((v_l_id_87260 < v_MWidthC_1)){\n          float v_tmp_87349 = 0.0f; \n          v__87275 = v_tmp_87349; \n          /* reduce_while_seq */\n          for (int v_i_87261 = 0; v_i_87261 < 16; v_i_87261 = (1 + v_i_87261)) {\n            v__87285_0 = check(v__87275, v__87266[(v_l_id_87260 + (16 * v_MWidthC_1 * v_w_id_87259) + (v_MWidthC_1 * v_i_87261))]); \n            if (v__87285_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87350 = 0.0f; \n            v__87277 = v_tmp_87350; \n            int v_index_87351 = v__87266[(v_l_id_87260 + (16 * v_MWidthC_1 * v_w_id_87259) + (v_MWidthC_1 * v_i_87261))]; \n            if (v_index_87351 < 0) {\n              v__87279_0 = v__87277; \n            } else {\n              if (v_index_87351 >= v_VLength_3) {\n                v__87279_0 = v__87277; \n              } else {\n                v__87279_0 = v__87268[v_index_87351]; \n              }\n            }\n            v__87281_0 = mult(v__87279_0, v__87267[(v_l_id_87260 + (16 * v_MWidthC_1 * v_w_id_87259) + (v_MWidthC_1 * v_i_87261))]); \n            v__87275 = add(v__87281_0, v__87275); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_87262 = 0; \n            v__87286[v_l_id_87260] = id(v__87275); \n          }\n          /* end map_seq */\n          v_l_id_87260 = atomic_inc(&(v_work_idx_7314)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_87263 = get_local_id(0); \n        float v_tmp_87354 = 0.0f; \n        v__81237 = v_tmp_87354; \n        /* reduce_seq */\n        for (int v_i_87264 = 0; v_i_87264 < v_MWidthC_1; v_i_87264 = (1 + v_i_87264)) {\n          v__81237 = add(v__81237, v__87286[(v_i_87264 + (v_MWidthC_1 * v_l_id_87263))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_87265 = 0; \n          v__87291[v_w_id_87259] = doubleMultiplyAdd(v__81237, v__87270, v__87269[v_w_id_87259], v__87271); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_87259 = atomic_inc(v_work_idx_7316); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__87266",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87267",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87268",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87269",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87270",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87271",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__87273",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87291",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__87286",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}