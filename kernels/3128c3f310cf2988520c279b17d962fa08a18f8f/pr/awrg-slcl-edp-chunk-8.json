{
  "name" : "awrg-slcl-edp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82807, const global float* restrict v__82808, const global float* restrict v__82809, const global float* restrict v__82810, float v__82811, float v__82812, global float* v__82828, global int* v__82814, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82815; \n  float v__82818; \n  /* Private Memory */\n  float v__82820_0;\n  \n  float v__82822_0;\n  \n  int v__82826_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6892 = v__82814; \n    local int v_w_id_82803; \n    if (get_local_id(0) == 0) {\n      v_w_id_82803 = atomic_inc(v_work_idx_6892); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82803 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_82804 = get_local_id(0); v_l_id_82804 < 8; v_l_id_82804 = (v_l_id_82804 + get_local_size(0))) {\n        float v_tmp_82875 = 0.0f; \n        v__82815 = v_tmp_82875; \n        /* reduce_while_seq */\n        for (int v_i_82805 = 0; v_i_82805 < v_MWidthC_1; v_i_82805 = (1 + v_i_82805)) {\n          v__82826_0 = check(v__82815, v__82807[(v_i_82805 + (8 * v_MWidthC_1 * v_w_id_82803) + (v_MWidthC_1 * v_l_id_82804))]); \n          if (v__82826_0) {\n          } else {\n            break;\n          }\n          float v_tmp_82876 = 0.0f; \n          v__82818 = v_tmp_82876; \n          int v_index_82877 = v__82807[(v_i_82805 + (8 * v_MWidthC_1 * v_w_id_82803) + (v_MWidthC_1 * v_l_id_82804))]; \n          if (v_index_82877 < 0) {\n            v__82820_0 = v__82818; \n          } else {\n            if (v_index_82877 >= v_VLength_3) {\n              v__82820_0 = v__82818; \n            } else {\n              v__82820_0 = v__82809[v_index_82877]; \n            }\n          }\n          v__82822_0 = mult(v__82820_0, v__82808[(v_i_82805 + (8 * v_MWidthC_1 * v_w_id_82803) + (v_MWidthC_1 * v_l_id_82804))]); \n          v__82815 = add(v__82822_0, v__82815); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82806 = 0; \n          v__82828[(v_l_id_82804 + (8 * v_w_id_82803))] = doubleMultiplyAdd(v__82815, v__82811, v__82810[(v_l_id_82804 + (8 * v_w_id_82803))], v__82812); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_82803 = atomic_inc(v_work_idx_6892); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82807",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82808",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82809",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82810",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82811",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82812",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82814",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82828",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}