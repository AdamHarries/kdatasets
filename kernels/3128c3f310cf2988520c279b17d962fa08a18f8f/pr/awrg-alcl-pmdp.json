{
  "name" : "awrg-alcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80854, const global float* restrict v__80855, const global float* restrict v__80856, const global float* restrict v__80857, float v__80858, float v__80859, global float* v__80873, global float* v__80867, global int* v__80861, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80863; \n  float v__80868; \n  /* Private Memory */\n  float v__80865_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6722 = v__80861; \n    local int v_w_id_80850; \n    if (get_local_id(0) == 0) {\n      v_w_id_80850 = atomic_inc(v_work_idx_6722); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80850 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_l_id_6720; \n        v_l_id_6720 = 0; \n        int v_l_id_80851 = atomic_inc(&(v_l_id_6720)); \n        while((v_l_id_80851 < v_MWidthC_1)){\n          float v_tmp_80903 = 0.0f; \n          v__80863 = v_tmp_80903; \n          int v_index_80904 = v__80854[(v_l_id_80851 + (v_MWidthC_1 * v_w_id_80850))]; \n          if (v_index_80904 < 0) {\n            v__80865_0 = v__80863; \n          } else {\n            if (v_index_80904 >= v_VLength_3) {\n              v__80865_0 = v__80863; \n            } else {\n              v__80865_0 = v__80856[v_index_80904]; \n            }\n          }\n          v__80867[(-1 + v_MWidthC_1 + (-1 * v_l_id_80851) + (v_MWidthC_1 * v_w_id_80850))] = mult(v__80865_0, v__80855[(v_l_id_80851 + (v_MWidthC_1 * v_w_id_80850))]); \n          v_l_id_80851 = atomic_inc(&(v_l_id_6720)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      float v_tmp_80905 = 0.0f; \n      v__80868 = v_tmp_80905; \n      /* reduce_seq */\n      for (int v_i_80852 = 0; v_i_80852 < v_MWidthC_1; v_i_80852 = (1 + v_i_80852)) {\n        v__80868 = add(v__80868, v__80867[(v_i_80852 + (v_MWidthC_1 * v_w_id_80850))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_80853 = 0; \n        v__80873[v_w_id_80850] = doubleMultiplyAdd(v__80868, v__80858, v__80857[v_w_id_80850], v__80859); \n      }\n      /* end map_seq */\n      if (get_local_id(0) == 0) {\n        v_w_id_80850 = atomic_inc(v_work_idx_6722); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__80854",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80855",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80867",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80861",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80873",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}