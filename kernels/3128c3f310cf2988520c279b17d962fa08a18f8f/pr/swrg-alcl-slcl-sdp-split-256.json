{
  "name" : "swrg-alcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98734, const global float* restrict v__98735, const global float* restrict v__98736, const global float* restrict v__98737, float v__98738, float v__98739, global float* v__98756, global float* v__98746, local float* v__98751, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98742; \n  float v__98747; \n  float v__81237; \n  /* Private Memory */\n  float v__98744_0;\n  \n  for (int v_wg_id_98726 = get_group_id(0); v_wg_id_98726 < v_MHeight_2; v_wg_id_98726 = (v_wg_id_98726 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8383; \n      v_work_idx_8383 = 0; \n      int v_l_id_98727 = atomic_inc(&(v_work_idx_8383)); \n      while((v_l_id_98727 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_98728 = 0; v_i_98728 < 256; v_i_98728 = (1 + v_i_98728)) {\n          float v_tmp_98813 = 0.0f; \n          v__98742 = v_tmp_98813; \n          int v_index_98814 = v__98734[(v_l_id_98727 + (256 * v_MWidthC_1 * v_wg_id_98726) + (v_MWidthC_1 * v_i_98728))]; \n          if (v_index_98814 < 0) {\n            v__98744_0 = v__98742; \n          } else {\n            if (v_index_98814 >= v_VLength_3) {\n              v__98744_0 = v__98742; \n            } else {\n              v__98744_0 = v__98736[v_index_98814]; \n            }\n          }\n          v__98746[(255 + (256 * v_MWidthC_1 * v_wg_id_98726) + (-1 * v_i_98728) + (256 * v_l_id_98727))] = mult(v__98744_0, v__98735[(v_l_id_98727 + (256 * v_MWidthC_1 * v_wg_id_98726) + (v_MWidthC_1 * v_i_98728))]); \n        }\n        /* end map_seq */\n        float v_tmp_98815 = 0.0f; \n        v__98747 = v_tmp_98815; \n        /* reduce_seq */\n        for (int v_i_98729 = 0; v_i_98729 < 256; v_i_98729 = (1 + v_i_98729)) {\n          v__98747 = add(v__98747, v__98746[(v_i_98729 + (256 * v_MWidthC_1 * v_wg_id_98726) + (256 * v_l_id_98727))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98730 = 0; \n          v__98751[v_l_id_98727] = id(v__98747); \n        }\n        /* end map_seq */\n        v_l_id_98727 = atomic_inc(&(v_work_idx_8383)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_98731 = get_local_id(0); \n      float v_tmp_98818 = 0.0f; \n      v__81237 = v_tmp_98818; \n      /* reduce_seq */\n      for (int v_i_98732 = 0; v_i_98732 < v_MWidthC_1; v_i_98732 = (1 + v_i_98732)) {\n        v__81237 = add(v__81237, v__98751[(v_i_98732 + (v_MWidthC_1 * v_l_id_98731))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98733 = 0; \n        v__98756[v_wg_id_98726] = doubleMultiplyAdd(v__81237, v__98738, v__98737[v_wg_id_98726], v__98739); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__98734",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98735",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__98746",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__98756",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98751",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}