{
  "name" : "awrg-slcl-alcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__86747, const global float* restrict v__86748, const global float* restrict v__86749, const global float* restrict v__86750, float v__86751, float v__86752, global float* v__86772, global int* v__86754, local float* v__86767, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86756; \n  float v__86758; \n  float v__81237; \n  /* Private Memory */\n  float v__86760_0;\n  \n  float v__86762_0;\n  \n  int v__86766_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7263 = v__86754; \n    local int v_w_id_86740; \n    if (get_local_id(0) == 0) {\n      v_w_id_86740 = atomic_inc(v_work_idx_7263); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86740 < v_MHeight_2)){\n      for (int v_l_id_86741 = get_local_id(0); v_l_id_86741 < v_MWidthC_1; v_l_id_86741 = (v_l_id_86741 + get_local_size(0))) {\n        float v_tmp_86834 = 0.0f; \n        v__86756 = v_tmp_86834; \n        /* reduce_while_seq */\n        for (int v_i_86742 = 0; v_i_86742 < 16; v_i_86742 = (1 + v_i_86742)) {\n          v__86766_0 = check(v__86756, v__86747[(v_l_id_86741 + (16 * v_MWidthC_1 * v_w_id_86740) + (v_MWidthC_1 * v_i_86742))]); \n          if (v__86766_0) {\n          } else {\n            break;\n          }\n          float v_tmp_86835 = 0.0f; \n          v__86758 = v_tmp_86835; \n          int v_index_86836 = v__86747[(v_l_id_86741 + (16 * v_MWidthC_1 * v_w_id_86740) + (v_MWidthC_1 * v_i_86742))]; \n          if (v_index_86836 < 0) {\n            v__86760_0 = v__86758; \n          } else {\n            if (v_index_86836 >= v_VLength_3) {\n              v__86760_0 = v__86758; \n            } else {\n              v__86760_0 = v__86749[v_index_86836]; \n            }\n          }\n          v__86762_0 = mult(v__86760_0, v__86748[(v_l_id_86741 + (16 * v_MWidthC_1 * v_w_id_86740) + (v_MWidthC_1 * v_i_86742))]); \n          v__86756 = add(v__86762_0, v__86756); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_86743 = 0; \n          v__86767[v_l_id_86741] = id(v__86756); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7257; \n        v_work_idx_7257 = 0; \n        int v_l_id_86744 = atomic_inc(&(v_work_idx_7257)); \n        while((v_l_id_86744 < 1)){\n          float v_tmp_86839 = 0.0f; \n          v__81237 = v_tmp_86839; \n          /* reduce_seq */\n          for (int v_i_86745 = 0; v_i_86745 < v_MWidthC_1; v_i_86745 = (1 + v_i_86745)) {\n            v__81237 = add(v__81237, v__86767[(v_i_86745 + (v_MWidthC_1 * v_l_id_86744))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86746 = 0; \n            v__86772[v_w_id_86740] = doubleMultiplyAdd(v__81237, v__86751, v__86750[v_w_id_86740], v__86752); \n          }\n          /* end map_seq */\n          v_l_id_86744 = atomic_inc(&(v_work_idx_7257)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86740 = atomic_inc(v_work_idx_7263); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86747",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86748",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86749",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86750",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86751",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86752",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86754",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__86772",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__86767",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}