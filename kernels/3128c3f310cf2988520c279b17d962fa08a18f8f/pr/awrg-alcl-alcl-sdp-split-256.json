{
  "name" : "awrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__100697, const global float* restrict v__100698, const global float* restrict v__100699, const global float* restrict v__100700, float v__100701, float v__100702, global float* v__100720, global float* v__100710, global int* v__100704, local float* v__100715, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100706; \n  float v__100711; \n  float v__81237; \n  /* Private Memory */\n  float v__100708_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8576 = v__100704; \n    local int v_w_id_100689; \n    if (get_local_id(0) == 0) {\n      v_w_id_100689 = atomic_inc(v_work_idx_8576); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100689 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8574; \n        v_work_idx_8574 = 0; \n        int v_l_id_100690 = atomic_inc(&(v_work_idx_8574)); \n        while((v_l_id_100690 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_100691 = 0; v_i_100691 < 256; v_i_100691 = (1 + v_i_100691)) {\n            float v_tmp_100771 = 0.0f; \n            v__100706 = v_tmp_100771; \n            int v_index_100772 = v__100697[(v_l_id_100690 + (256 * v_MWidthC_1 * v_w_id_100689) + (v_MWidthC_1 * v_i_100691))]; \n            if (v_index_100772 < 0) {\n              v__100708_0 = v__100706; \n            } else {\n              if (v_index_100772 >= v_VLength_3) {\n                v__100708_0 = v__100706; \n              } else {\n                v__100708_0 = v__100699[v_index_100772]; \n              }\n            }\n            v__100710[(255 + (256 * v_MWidthC_1 * v_w_id_100689) + (-1 * v_i_100691) + (256 * v_l_id_100690))] = mult(v__100708_0, v__100698[(v_l_id_100690 + (256 * v_MWidthC_1 * v_w_id_100689) + (v_MWidthC_1 * v_i_100691))]); \n          }\n          /* end map_seq */\n          float v_tmp_100773 = 0.0f; \n          v__100711 = v_tmp_100773; \n          /* reduce_seq */\n          for (int v_i_100692 = 0; v_i_100692 < 256; v_i_100692 = (1 + v_i_100692)) {\n            v__100711 = add(v__100711, v__100710[(v_i_100692 + (256 * v_MWidthC_1 * v_w_id_100689) + (256 * v_l_id_100690))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100693 = 0; \n            v__100715[v_l_id_100690] = id(v__100711); \n          }\n          /* end map_seq */\n          v_l_id_100690 = atomic_inc(&(v_work_idx_8574)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8568; \n        v_work_idx_8568 = 0; \n        int v_l_id_100694 = atomic_inc(&(v_work_idx_8568)); \n        while((v_l_id_100694 < 1)){\n          float v_tmp_100776 = 0.0f; \n          v__81237 = v_tmp_100776; \n          /* reduce_seq */\n          for (int v_i_100695 = 0; v_i_100695 < v_MWidthC_1; v_i_100695 = (1 + v_i_100695)) {\n            v__81237 = add(v__81237, v__100715[(v_i_100695 + (v_MWidthC_1 * v_l_id_100694))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100696 = 0; \n            v__100720[v_w_id_100689] = doubleMultiplyAdd(v__81237, v__100701, v__100700[v_w_id_100689], v__100702); \n          }\n          /* end map_seq */\n          v_l_id_100694 = atomic_inc(&(v_work_idx_8568)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100689 = atomic_inc(v_work_idx_8576); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__100697",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100698",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100699",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100700",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100701",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100702",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100710",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100704",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100720",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100715",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}