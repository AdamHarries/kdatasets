{
  "name" : "swrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98306, const global float* restrict v__98307, const global float* restrict v__98308, const global float* restrict v__98309, float v__98310, float v__98311, global float* v__98328, local float* v__98323, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98314; \n  float v__98316; \n  float v__81237; \n  /* Private Memory */\n  float v__98318_0;\n  \n  float v__98320_0;\n  \n  for (int v_wg_id_98299 = get_group_id(0); v_wg_id_98299 < v_MHeight_2; v_wg_id_98299 = (v_wg_id_98299 + get_num_groups(0))) {\n    for (int v_l_id_98300 = get_local_id(0); v_l_id_98300 < v_MWidthC_1; v_l_id_98300 = (v_l_id_98300 + get_local_size(0))) {\n      float v_tmp_98389 = 0.0f; \n      v__98314 = v_tmp_98389; \n      /* reduce_seq */\n      for (int v_i_98301 = 0; v_i_98301 < 256; v_i_98301 = (1 + v_i_98301)) {\n        float v_tmp_98390 = 0.0f; \n        v__98316 = v_tmp_98390; \n        int v_index_98391 = v__98306[(v_l_id_98300 + (256 * v_MWidthC_1 * v_wg_id_98299) + (v_MWidthC_1 * v_i_98301))]; \n        if (v_index_98391 < 0) {\n          v__98318_0 = v__98316; \n        } else {\n          if (v_index_98391 >= v_VLength_3) {\n            v__98318_0 = v__98316; \n          } else {\n            v__98318_0 = v__98308[v_index_98391]; \n          }\n        }\n        v__98320_0 = mult(v__98318_0, v__98307[(v_l_id_98300 + (256 * v_MWidthC_1 * v_wg_id_98299) + (v_MWidthC_1 * v_i_98301))]); \n        v__98314 = add(v__98320_0, v__98314); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_98302 = 0; \n        v__98323[v_l_id_98300] = id(v__98314); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_8341; \n      v_work_idx_8341 = 0; \n      int v_l_id_98303 = atomic_inc(&(v_work_idx_8341)); \n      while((v_l_id_98303 < 1)){\n        float v_tmp_98394 = 0.0f; \n        v__81237 = v_tmp_98394; \n        /* reduce_seq */\n        for (int v_i_98304 = 0; v_i_98304 < v_MWidthC_1; v_i_98304 = (1 + v_i_98304)) {\n          v__81237 = add(v__81237, v__98323[(v_i_98304 + (v_MWidthC_1 * v_l_id_98303))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98305 = 0; \n          v__98328[v_wg_id_98299] = doubleMultiplyAdd(v__81237, v__98310, v__98309[v_wg_id_98299], v__98311); \n        }\n        /* end map_seq */\n        v_l_id_98303 = atomic_inc(&(v_work_idx_8341)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98306",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98307",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98308",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98309",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98310",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98311",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__98323",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}