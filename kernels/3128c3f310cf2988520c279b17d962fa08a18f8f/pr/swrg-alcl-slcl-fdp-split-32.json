{
  "name" : "swrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__88836, const global float* restrict v__88837, const global float* restrict v__88838, const global float* restrict v__88839, float v__88840, float v__88841, global float* v__88858, local float* v__88853, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__88844; \n  float v__88846; \n  float v__81237; \n  /* Private Memory */\n  float v__88848_0;\n  \n  float v__88850_0;\n  \n  for (int v_wg_id_88829 = get_group_id(0); v_wg_id_88829 < v_MHeight_2; v_wg_id_88829 = (v_wg_id_88829 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7456; \n      v_work_idx_7456 = 0; \n      int v_l_id_88830 = atomic_inc(&(v_work_idx_7456)); \n      while((v_l_id_88830 < v_MWidthC_1)){\n        float v_tmp_88915 = 0.0f; \n        v__88844 = v_tmp_88915; \n        /* reduce_seq */\n        for (int v_i_88831 = 0; v_i_88831 < 32; v_i_88831 = (1 + v_i_88831)) {\n          float v_tmp_88916 = 0.0f; \n          v__88846 = v_tmp_88916; \n          int v_index_88917 = v__88836[(v_l_id_88830 + (32 * v_MWidthC_1 * v_wg_id_88829) + (v_MWidthC_1 * v_i_88831))]; \n          if (v_index_88917 < 0) {\n            v__88848_0 = v__88846; \n          } else {\n            if (v_index_88917 >= v_VLength_3) {\n              v__88848_0 = v__88846; \n            } else {\n              v__88848_0 = v__88838[v_index_88917]; \n            }\n          }\n          v__88850_0 = mult(v__88848_0, v__88837[(v_l_id_88830 + (32 * v_MWidthC_1 * v_wg_id_88829) + (v_MWidthC_1 * v_i_88831))]); \n          v__88844 = add(v__88850_0, v__88844); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_88832 = 0; \n          v__88853[v_l_id_88830] = id(v__88844); \n        }\n        /* end map_seq */\n        v_l_id_88830 = atomic_inc(&(v_work_idx_7456)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_88833 = get_local_id(0); \n      float v_tmp_88920 = 0.0f; \n      v__81237 = v_tmp_88920; \n      /* reduce_seq */\n      for (int v_i_88834 = 0; v_i_88834 < v_MWidthC_1; v_i_88834 = (1 + v_i_88834)) {\n        v__81237 = add(v__81237, v__88853[(v_i_88834 + (v_MWidthC_1 * v_l_id_88833))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_88835 = 0; \n        v__88858[v_wg_id_88829] = doubleMultiplyAdd(v__81237, v__88840, v__88839[v_wg_id_88829], v__88841); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__88836",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88837",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__88838",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__88839",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__88840",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__88841",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88858",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88853",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}