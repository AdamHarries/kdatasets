{
  "name" : "swrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__87990, const global float* restrict v__87991, const global float* restrict v__87992, const global float* restrict v__87993, float v__87994, float v__87995, global float* v__88012, local float* v__88007, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__87998; \n  float v__88000; \n  float v__81237; \n  /* Private Memory */\n  float v__88002_0;\n  \n  float v__88004_0;\n  \n  for (int v_wg_id_87983 = get_group_id(0); v_wg_id_87983 < v_MHeight_2; v_wg_id_87983 = (v_wg_id_87983 + get_num_groups(0))) {\n    for (int v_l_id_87984 = get_local_id(0); v_l_id_87984 < v_MWidthC_1; v_l_id_87984 = (v_l_id_87984 + get_local_size(0))) {\n      float v_tmp_88077 = 0.0f; \n      v__87998 = v_tmp_88077; \n      /* reduce_seq */\n      for (int v_i_87985 = 0; v_i_87985 < 32; v_i_87985 = (1 + v_i_87985)) {\n        float v_tmp_88078 = 0.0f; \n        v__88000 = v_tmp_88078; \n        int v_index_88079 = v__87990[(v_l_id_87984 + (32 * v_MWidthC_1 * v_wg_id_87983) + (v_MWidthC_1 * v_i_87985))]; \n        if (v_index_88079 < 0) {\n          v__88002_0 = v__88000; \n        } else {\n          if (v_index_88079 >= v_VLength_3) {\n            v__88002_0 = v__88000; \n          } else {\n            v__88002_0 = v__87992[v_index_88079]; \n          }\n        }\n        v__88004_0 = mult(v__88002_0, v__87991[(v_l_id_87984 + (32 * v_MWidthC_1 * v_wg_id_87983) + (v_MWidthC_1 * v_i_87985))]); \n        v__87998 = add(v__88004_0, v__87998); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87986 = 0; \n        v__88007[v_l_id_87984] = id(v__87998); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_87987 = get_local_id(0); \n      float v_tmp_88082 = 0.0f; \n      v__81237 = v_tmp_88082; \n      /* reduce_seq */\n      for (int v_i_87988 = 0; v_i_87988 < v_MWidthC_1; v_i_87988 = (1 + v_i_87988)) {\n        v__81237 = add(v__81237, v__88007[(v_i_87988 + (v_MWidthC_1 * v_l_id_87987))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_87989 = 0; \n        v__88012[v_wg_id_87983] = doubleMultiplyAdd(v__81237, v__87994, v__87993[v_wg_id_87983], v__87995); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__87990",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87991",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__87992",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__87993",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__87994",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__87995",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__88012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__88007",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}