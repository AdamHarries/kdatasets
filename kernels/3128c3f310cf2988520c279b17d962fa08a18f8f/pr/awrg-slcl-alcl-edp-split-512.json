{
  "name" : "awrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__103407, const global float* restrict v__103408, const global float* restrict v__103409, const global float* restrict v__103410, float v__103411, float v__103412, global float* v__103432, global int* v__103414, local float* v__103427, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103416; \n  float v__103418; \n  float v__81237; \n  /* Private Memory */\n  float v__103420_0;\n  \n  float v__103422_0;\n  \n  int v__103426_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8823 = v__103414; \n    local int v_w_id_103400; \n    if (get_local_id(0) == 0) {\n      v_w_id_103400 = atomic_inc(v_work_idx_8823); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103400 < v_MHeight_2)){\n      for (int v_l_id_103401 = get_local_id(0); v_l_id_103401 < v_MWidthC_1; v_l_id_103401 = (v_l_id_103401 + get_local_size(0))) {\n        float v_tmp_103494 = 0.0f; \n        v__103416 = v_tmp_103494; \n        /* reduce_while_seq */\n        for (int v_i_103402 = 0; v_i_103402 < 512; v_i_103402 = (1 + v_i_103402)) {\n          v__103426_0 = check(v__103416, v__103407[(v_l_id_103401 + (512 * v_MWidthC_1 * v_w_id_103400) + (v_MWidthC_1 * v_i_103402))]); \n          if (v__103426_0) {\n          } else {\n            break;\n          }\n          float v_tmp_103495 = 0.0f; \n          v__103418 = v_tmp_103495; \n          int v_index_103496 = v__103407[(v_l_id_103401 + (512 * v_MWidthC_1 * v_w_id_103400) + (v_MWidthC_1 * v_i_103402))]; \n          if (v_index_103496 < 0) {\n            v__103420_0 = v__103418; \n          } else {\n            if (v_index_103496 >= v_VLength_3) {\n              v__103420_0 = v__103418; \n            } else {\n              v__103420_0 = v__103409[v_index_103496]; \n            }\n          }\n          v__103422_0 = mult(v__103420_0, v__103408[(v_l_id_103401 + (512 * v_MWidthC_1 * v_w_id_103400) + (v_MWidthC_1 * v_i_103402))]); \n          v__103416 = add(v__103422_0, v__103416); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103403 = 0; \n          v__103427[v_l_id_103401] = id(v__103416); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8817; \n        v_work_idx_8817 = 0; \n        int v_l_id_103404 = atomic_inc(&(v_work_idx_8817)); \n        while((v_l_id_103404 < 1)){\n          float v_tmp_103499 = 0.0f; \n          v__81237 = v_tmp_103499; \n          /* reduce_seq */\n          for (int v_i_103405 = 0; v_i_103405 < v_MWidthC_1; v_i_103405 = (1 + v_i_103405)) {\n            v__81237 = add(v__81237, v__103427[(v_i_103405 + (v_MWidthC_1 * v_l_id_103404))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103406 = 0; \n            v__103432[v_w_id_103400] = doubleMultiplyAdd(v__81237, v__103411, v__103410[v_w_id_103400], v__103412); \n          }\n          /* end map_seq */\n          v_l_id_103404 = atomic_inc(&(v_work_idx_8817)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103400 = atomic_inc(v_work_idx_8823); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__103407",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103408",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103409",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103410",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103411",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103412",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103414",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103432",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103427",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}