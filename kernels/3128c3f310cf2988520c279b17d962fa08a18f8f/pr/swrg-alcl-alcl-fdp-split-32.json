{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89132, const global float* restrict v__89133, const global float* restrict v__89134, const global float* restrict v__89135, float v__89136, float v__89137, global float* v__89154, local float* v__89149, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89140; \n  float v__89142; \n  float v__81237; \n  /* Private Memory */\n  float v__89144_0;\n  \n  float v__89146_0;\n  \n  for (int v_wg_id_89125 = get_group_id(0); v_wg_id_89125 < v_MHeight_2; v_wg_id_89125 = (v_wg_id_89125 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7486; \n      v_work_idx_7486 = 0; \n      int v_l_id_89126 = atomic_inc(&(v_work_idx_7486)); \n      while((v_l_id_89126 < v_MWidthC_1)){\n        float v_tmp_89207 = 0.0f; \n        v__89140 = v_tmp_89207; \n        /* reduce_seq */\n        for (int v_i_89127 = 0; v_i_89127 < 32; v_i_89127 = (1 + v_i_89127)) {\n          float v_tmp_89208 = 0.0f; \n          v__89142 = v_tmp_89208; \n          int v_index_89209 = v__89132[(v_l_id_89126 + (32 * v_MWidthC_1 * v_wg_id_89125) + (v_MWidthC_1 * v_i_89127))]; \n          if (v_index_89209 < 0) {\n            v__89144_0 = v__89142; \n          } else {\n            if (v_index_89209 >= v_VLength_3) {\n              v__89144_0 = v__89142; \n            } else {\n              v__89144_0 = v__89134[v_index_89209]; \n            }\n          }\n          v__89146_0 = mult(v__89144_0, v__89133[(v_l_id_89126 + (32 * v_MWidthC_1 * v_wg_id_89125) + (v_MWidthC_1 * v_i_89127))]); \n          v__89140 = add(v__89146_0, v__89140); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89128 = 0; \n          v__89149[v_l_id_89126] = id(v__89140); \n        }\n        /* end map_seq */\n        v_l_id_89126 = atomic_inc(&(v_work_idx_7486)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7481; \n      v_work_idx_7481 = 0; \n      int v_l_id_89129 = atomic_inc(&(v_work_idx_7481)); \n      while((v_l_id_89129 < 1)){\n        float v_tmp_89212 = 0.0f; \n        v__81237 = v_tmp_89212; \n        /* reduce_seq */\n        for (int v_i_89130 = 0; v_i_89130 < v_MWidthC_1; v_i_89130 = (1 + v_i_89130)) {\n          v__81237 = add(v__81237, v__89149[(v_i_89130 + (v_MWidthC_1 * v_l_id_89129))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89131 = 0; \n          v__89154[v_wg_id_89125] = doubleMultiplyAdd(v__81237, v__89136, v__89135[v_wg_id_89125], v__89137); \n        }\n        /* end map_seq */\n        v_l_id_89129 = atomic_inc(&(v_work_idx_7481)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89132",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89133",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89134",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89135",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89136",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89137",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__89154",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89149",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}