{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99974, const global float* restrict v__99975, const global float* restrict v__99976, const global float* restrict v__99977, float v__99978, float v__99979, global float* v__99997, global int* v__99981, local float* v__99992, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99983; \n  float v__99985; \n  float v__81237; \n  /* Private Memory */\n  float v__99987_0;\n  \n  float v__99989_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8501 = v__99981; \n    local int v_w_id_99967; \n    if (get_local_id(0) == 0) {\n      v_w_id_99967 = atomic_inc(v_work_idx_8501); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99967 < v_MHeight_2)){\n      for (int v_l_id_99968 = get_local_id(0); v_l_id_99968 < v_MWidthC_1; v_l_id_99968 = (v_l_id_99968 + get_local_size(0))) {\n        float v_tmp_100056 = 0.0f; \n        v__99983 = v_tmp_100056; \n        /* reduce_seq */\n        for (int v_i_99969 = 0; v_i_99969 < 256; v_i_99969 = (1 + v_i_99969)) {\n          float v_tmp_100057 = 0.0f; \n          v__99985 = v_tmp_100057; \n          int v_index_100058 = v__99974[(v_l_id_99968 + (256 * v_MWidthC_1 * v_w_id_99967) + (v_MWidthC_1 * v_i_99969))]; \n          if (v_index_100058 < 0) {\n            v__99987_0 = v__99985; \n          } else {\n            if (v_index_100058 >= v_VLength_3) {\n              v__99987_0 = v__99985; \n            } else {\n              v__99987_0 = v__99976[v_index_100058]; \n            }\n          }\n          v__99989_0 = mult(v__99987_0, v__99975[(v_l_id_99968 + (256 * v_MWidthC_1 * v_w_id_99967) + (v_MWidthC_1 * v_i_99969))]); \n          v__99983 = add(v__99989_0, v__99983); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99970 = 0; \n          v__99992[v_l_id_99968] = id(v__99983); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8495; \n        v_work_idx_8495 = 0; \n        int v_l_id_99971 = atomic_inc(&(v_work_idx_8495)); \n        while((v_l_id_99971 < 1)){\n          float v_tmp_100061 = 0.0f; \n          v__81237 = v_tmp_100061; \n          /* reduce_seq */\n          for (int v_i_99972 = 0; v_i_99972 < v_MWidthC_1; v_i_99972 = (1 + v_i_99972)) {\n            v__81237 = add(v__81237, v__99992[(v_i_99972 + (v_MWidthC_1 * v_l_id_99971))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_99973 = 0; \n            v__99997[v_w_id_99967] = doubleMultiplyAdd(v__81237, v__99978, v__99977[v_w_id_99967], v__99979); \n          }\n          /* end map_seq */\n          v_l_id_99971 = atomic_inc(&(v_work_idx_8495)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_99967 = atomic_inc(v_work_idx_8501); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99974",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99975",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99976",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99977",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99978",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99979",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99981",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99997",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__99992",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}