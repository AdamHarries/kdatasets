{
  "name" : "swrg-alcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__92558, const global float* restrict v__92559, const global float* restrict v__92560, const global float* restrict v__92561, float v__92562, float v__92563, global float* v__92582, local float* v__92577, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__92566; \n  float v__92568; \n  float v__81237; \n  /* Private Memory */\n  float v__92570_0;\n  \n  float v__92572_0;\n  \n  int v__92576_0;\n  \n  for (int v_wg_id_92551 = get_group_id(0); v_wg_id_92551 < v_MHeight_2; v_wg_id_92551 = (v_wg_id_92551 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7808; \n      v_work_idx_7808 = 0; \n      int v_l_id_92552 = atomic_inc(&(v_work_idx_7808)); \n      while((v_l_id_92552 < v_MWidthC_1)){\n        float v_tmp_92638 = 0.0f; \n        v__92566 = v_tmp_92638; \n        /* reduce_while_seq */\n        for (int v_i_92553 = 0; v_i_92553 < 64; v_i_92553 = (1 + v_i_92553)) {\n          v__92576_0 = check(v__92566, v__92558[(v_l_id_92552 + (64 * v_MWidthC_1 * v_wg_id_92551) + (v_MWidthC_1 * v_i_92553))]); \n          if (v__92576_0) {\n          } else {\n            break;\n          }\n          float v_tmp_92639 = 0.0f; \n          v__92568 = v_tmp_92639; \n          int v_index_92640 = v__92558[(v_l_id_92552 + (64 * v_MWidthC_1 * v_wg_id_92551) + (v_MWidthC_1 * v_i_92553))]; \n          if (v_index_92640 < 0) {\n            v__92570_0 = v__92568; \n          } else {\n            if (v_index_92640 >= v_VLength_3) {\n              v__92570_0 = v__92568; \n            } else {\n              v__92570_0 = v__92560[v_index_92640]; \n            }\n          }\n          v__92572_0 = mult(v__92570_0, v__92559[(v_l_id_92552 + (64 * v_MWidthC_1 * v_wg_id_92551) + (v_MWidthC_1 * v_i_92553))]); \n          v__92566 = add(v__92572_0, v__92566); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92554 = 0; \n          v__92577[v_l_id_92552] = id(v__92566); \n        }\n        /* end map_seq */\n        v_l_id_92552 = atomic_inc(&(v_work_idx_7808)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7803; \n      v_work_idx_7803 = 0; \n      int v_l_id_92555 = atomic_inc(&(v_work_idx_7803)); \n      while((v_l_id_92555 < 1)){\n        float v_tmp_92643 = 0.0f; \n        v__81237 = v_tmp_92643; \n        /* reduce_seq */\n        for (int v_i_92556 = 0; v_i_92556 < v_MWidthC_1; v_i_92556 = (1 + v_i_92556)) {\n          v__81237 = add(v__81237, v__92577[(v_i_92556 + (v_MWidthC_1 * v_l_id_92555))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_92557 = 0; \n          v__92582[v_wg_id_92551] = doubleMultiplyAdd(v__81237, v__92562, v__92561[v_wg_id_92551], v__92563); \n        }\n        /* end map_seq */\n        v_l_id_92555 = atomic_inc(&(v_work_idx_7803)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__92558",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92559",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__92560",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__92561",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__92562",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__92563",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__92582",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__92577",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}