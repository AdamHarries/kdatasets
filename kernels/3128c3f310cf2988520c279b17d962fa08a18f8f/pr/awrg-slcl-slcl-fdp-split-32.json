{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__89661, const global float* restrict v__89662, const global float* restrict v__89663, const global float* restrict v__89664, float v__89665, float v__89666, global float* v__89684, global int* v__89668, local float* v__89679, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__89670; \n  float v__89672; \n  float v__81237; \n  /* Private Memory */\n  float v__89674_0;\n  \n  float v__89676_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7535 = v__89668; \n    local int v_w_id_89654; \n    if (get_local_id(0) == 0) {\n      v_w_id_89654 = atomic_inc(v_work_idx_7535); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_89654 < v_MHeight_2)){\n      for (int v_l_id_89655 = get_local_id(0); v_l_id_89655 < v_MWidthC_1; v_l_id_89655 = (v_l_id_89655 + get_local_size(0))) {\n        float v_tmp_89747 = 0.0f; \n        v__89670 = v_tmp_89747; \n        /* reduce_seq */\n        for (int v_i_89656 = 0; v_i_89656 < 32; v_i_89656 = (1 + v_i_89656)) {\n          float v_tmp_89748 = 0.0f; \n          v__89672 = v_tmp_89748; \n          int v_index_89749 = v__89661[(v_l_id_89655 + (32 * v_MWidthC_1 * v_w_id_89654) + (v_MWidthC_1 * v_i_89656))]; \n          if (v_index_89749 < 0) {\n            v__89674_0 = v__89672; \n          } else {\n            if (v_index_89749 >= v_VLength_3) {\n              v__89674_0 = v__89672; \n            } else {\n              v__89674_0 = v__89663[v_index_89749]; \n            }\n          }\n          v__89676_0 = mult(v__89674_0, v__89662[(v_l_id_89655 + (32 * v_MWidthC_1 * v_w_id_89654) + (v_MWidthC_1 * v_i_89656))]); \n          v__89670 = add(v__89676_0, v__89670); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89657 = 0; \n          v__89679[v_l_id_89655] = id(v__89670); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_89658 = get_local_id(0); \n        float v_tmp_89752 = 0.0f; \n        v__81237 = v_tmp_89752; \n        /* reduce_seq */\n        for (int v_i_89659 = 0; v_i_89659 < v_MWidthC_1; v_i_89659 = (1 + v_i_89659)) {\n          v__81237 = add(v__81237, v__89679[(v_i_89659 + (v_MWidthC_1 * v_l_id_89658))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_89660 = 0; \n          v__89684[v_w_id_89654] = doubleMultiplyAdd(v__81237, v__89665, v__89664[v_w_id_89654], v__89666); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_89654 = atomic_inc(v_work_idx_7535); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__89661",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89662",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__89663",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__89664",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__89665",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__89666",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__89668",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__89684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__89679",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}