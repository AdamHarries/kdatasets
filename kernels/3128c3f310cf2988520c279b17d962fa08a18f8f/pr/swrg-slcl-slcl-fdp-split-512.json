{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101318, const global float* restrict v__101319, const global float* restrict v__101320, const global float* restrict v__101321, float v__101322, float v__101323, global float* v__101340, local float* v__101335, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101326; \n  float v__101328; \n  float v__81237; \n  /* Private Memory */\n  float v__101330_0;\n  \n  float v__101332_0;\n  \n  for (int v_wg_id_101311 = get_group_id(0); v_wg_id_101311 < v_MHeight_2; v_wg_id_101311 = (v_wg_id_101311 + get_num_groups(0))) {\n    for (int v_l_id_101312 = get_local_id(0); v_l_id_101312 < v_MWidthC_1; v_l_id_101312 = (v_l_id_101312 + get_local_size(0))) {\n      float v_tmp_101405 = 0.0f; \n      v__101326 = v_tmp_101405; \n      /* reduce_seq */\n      for (int v_i_101313 = 0; v_i_101313 < 512; v_i_101313 = (1 + v_i_101313)) {\n        float v_tmp_101406 = 0.0f; \n        v__101328 = v_tmp_101406; \n        int v_index_101407 = v__101318[(v_l_id_101312 + (512 * v_MWidthC_1 * v_wg_id_101311) + (v_MWidthC_1 * v_i_101313))]; \n        if (v_index_101407 < 0) {\n          v__101330_0 = v__101328; \n        } else {\n          if (v_index_101407 >= v_VLength_3) {\n            v__101330_0 = v__101328; \n          } else {\n            v__101330_0 = v__101320[v_index_101407]; \n          }\n        }\n        v__101332_0 = mult(v__101330_0, v__101319[(v_l_id_101312 + (512 * v_MWidthC_1 * v_wg_id_101311) + (v_MWidthC_1 * v_i_101313))]); \n        v__101326 = add(v__101332_0, v__101326); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101314 = 0; \n        v__101335[v_l_id_101312] = id(v__101326); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101315 = get_local_id(0); \n      float v_tmp_101410 = 0.0f; \n      v__81237 = v_tmp_101410; \n      /* reduce_seq */\n      for (int v_i_101316 = 0; v_i_101316 < v_MWidthC_1; v_i_101316 = (1 + v_i_101316)) {\n        v__81237 = add(v__81237, v__101335[(v_i_101316 + (v_MWidthC_1 * v_l_id_101315))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101317 = 0; \n        v__101340[v_wg_id_101311] = doubleMultiplyAdd(v__81237, v__101322, v__101321[v_wg_id_101311], v__101323); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__101318",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101319",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101320",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101322",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101323",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__101340",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101335",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}