{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96325, const global float* restrict v__96326, const global float* restrict v__96327, const global float* restrict v__96328, float v__96329, float v__96330, global float* v__96348, global int* v__96332, local float* v__96343, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96334; \n  float v__96336; \n  float v__81237; \n  /* Private Memory */\n  float v__96338_0;\n  \n  float v__96340_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8159 = v__96332; \n    local int v_w_id_96318; \n    if (get_local_id(0) == 0) {\n      v_w_id_96318 = atomic_inc(v_work_idx_8159); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96318 < v_MHeight_2)){\n      for (int v_l_id_96319 = get_local_id(0); v_l_id_96319 < v_MWidthC_1; v_l_id_96319 = (v_l_id_96319 + get_local_size(0))) {\n        float v_tmp_96411 = 0.0f; \n        v__96334 = v_tmp_96411; \n        /* reduce_seq */\n        for (int v_i_96320 = 0; v_i_96320 < 128; v_i_96320 = (1 + v_i_96320)) {\n          float v_tmp_96412 = 0.0f; \n          v__96336 = v_tmp_96412; \n          int v_index_96413 = v__96325[(v_l_id_96319 + (128 * v_MWidthC_1 * v_w_id_96318) + (v_MWidthC_1 * v_i_96320))]; \n          if (v_index_96413 < 0) {\n            v__96338_0 = v__96336; \n          } else {\n            if (v_index_96413 >= v_VLength_3) {\n              v__96338_0 = v__96336; \n            } else {\n              v__96338_0 = v__96327[v_index_96413]; \n            }\n          }\n          v__96340_0 = mult(v__96338_0, v__96326[(v_l_id_96319 + (128 * v_MWidthC_1 * v_w_id_96318) + (v_MWidthC_1 * v_i_96320))]); \n          v__96334 = add(v__96340_0, v__96334); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96321 = 0; \n          v__96343[v_l_id_96319] = id(v__96334); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96322 = get_local_id(0); \n        float v_tmp_96416 = 0.0f; \n        v__81237 = v_tmp_96416; \n        /* reduce_seq */\n        for (int v_i_96323 = 0; v_i_96323 < v_MWidthC_1; v_i_96323 = (1 + v_i_96323)) {\n          v__81237 = add(v__81237, v__96343[(v_i_96323 + (v_MWidthC_1 * v_l_id_96322))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96324 = 0; \n          v__96348[v_w_id_96318] = doubleMultiplyAdd(v__81237, v__96329, v__96328[v_w_id_96318], v__96330); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96318 = atomic_inc(v_work_idx_8159); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__96325",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96326",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96327",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96328",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96329",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96330",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96332",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96343",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}