{
  "name" : "glb-sdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__80462, const global float* restrict v__80463, const global float* restrict v__80464, const global float* restrict v__80465, float v__80466, float v__80467, global float* v__80480, global float* v__80474, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80470; \n  float v__80475; \n  /* Private Memory */\n  float v__80472_0;\n  \n  for (int v_gl_id_80458 = get_global_id(0); v_gl_id_80458 < v_MHeight_2; v_gl_id_80458 = (v_gl_id_80458 + get_global_size(0))) {\n    /* map_seq */\n    for (int v_i_80459 = 0; v_i_80459 < v_MWidthC_1; v_i_80459 = (1 + v_i_80459)) {\n      float v_tmp_80512 = 0.0f; \n      v__80470 = v_tmp_80512; \n      int v_index_80513 = v__80462[(v_i_80459 + (v_MWidthC_1 * v_gl_id_80458))]; \n      if (v_index_80513 < 0) {\n        v__80472_0 = v__80470; \n      } else {\n        if (v_index_80513 >= v_VLength_3) {\n          v__80472_0 = v__80470; \n        } else {\n          v__80472_0 = v__80464[v_index_80513]; \n        }\n      }\n      v__80474[(-1 + v_MWidthC_1 + (-1 * v_i_80459) + (v_MWidthC_1 * v_gl_id_80458))] = mult(v__80472_0, v__80463[(v_i_80459 + (v_MWidthC_1 * v_gl_id_80458))]); \n    }\n    /* end map_seq */\n    float v_tmp_80514 = 0.0f; \n    v__80475 = v_tmp_80514; \n    /* reduce_seq */\n    for (int v_i_80460 = 0; v_i_80460 < v_MWidthC_1; v_i_80460 = (1 + v_i_80460)) {\n      v__80475 = add(v__80475, v__80474[(v_i_80460 + (v_MWidthC_1 * v_gl_id_80458))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_80461 = 0; \n      v__80480[v_gl_id_80458] = doubleMultiplyAdd(v__80475, v__80466, v__80465[v_gl_id_80458], v__80467); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__80462",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80464",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80466",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80467",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80474",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__80480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}