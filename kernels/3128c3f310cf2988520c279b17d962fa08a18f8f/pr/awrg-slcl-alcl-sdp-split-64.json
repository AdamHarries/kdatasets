{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__93209, const global float* restrict v__93210, const global float* restrict v__93211, const global float* restrict v__93212, float v__93213, float v__93214, global float* v__93232, global float* v__93222, global int* v__93216, local float* v__93227, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__93218; \n  float v__93223; \n  float v__81237; \n  /* Private Memory */\n  float v__93220_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7867 = v__93216; \n    local int v_w_id_93201; \n    if (get_local_id(0) == 0) {\n      v_w_id_93201 = atomic_inc(v_work_idx_7867); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_93201 < v_MHeight_2)){\n      for (int v_l_id_93202 = get_local_id(0); v_l_id_93202 < v_MWidthC_1; v_l_id_93202 = (v_l_id_93202 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_93203 = 0; v_i_93203 < 64; v_i_93203 = (1 + v_i_93203)) {\n          float v_tmp_93291 = 0.0f; \n          v__93218 = v_tmp_93291; \n          int v_index_93292 = v__93209[(v_l_id_93202 + (64 * v_MWidthC_1 * v_w_id_93201) + (v_MWidthC_1 * v_i_93203))]; \n          if (v_index_93292 < 0) {\n            v__93220_0 = v__93218; \n          } else {\n            if (v_index_93292 >= v_VLength_3) {\n              v__93220_0 = v__93218; \n            } else {\n              v__93220_0 = v__93211[v_index_93292]; \n            }\n          }\n          v__93222[(63 + (64 * v_MWidthC_1 * v_w_id_93201) + (-1 * v_i_93203) + (64 * v_l_id_93202))] = mult(v__93220_0, v__93210[(v_l_id_93202 + (64 * v_MWidthC_1 * v_w_id_93201) + (v_MWidthC_1 * v_i_93203))]); \n        }\n        /* end map_seq */\n        float v_tmp_93293 = 0.0f; \n        v__93223 = v_tmp_93293; \n        /* reduce_seq */\n        for (int v_i_93204 = 0; v_i_93204 < 64; v_i_93204 = (1 + v_i_93204)) {\n          v__93223 = add(v__93223, v__93222[(v_i_93204 + (64 * v_MWidthC_1 * v_w_id_93201) + (64 * v_l_id_93202))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_93205 = 0; \n          v__93227[v_l_id_93202] = id(v__93223); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7860; \n        v_work_idx_7860 = 0; \n        int v_l_id_93206 = atomic_inc(&(v_work_idx_7860)); \n        while((v_l_id_93206 < 1)){\n          float v_tmp_93296 = 0.0f; \n          v__81237 = v_tmp_93296; \n          /* reduce_seq */\n          for (int v_i_93207 = 0; v_i_93207 < v_MWidthC_1; v_i_93207 = (1 + v_i_93207)) {\n            v__81237 = add(v__81237, v__93227[(v_i_93207 + (v_MWidthC_1 * v_l_id_93206))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_93208 = 0; \n            v__93232[v_w_id_93201] = doubleMultiplyAdd(v__81237, v__93213, v__93212[v_w_id_93201], v__93214); \n          }\n          /* end map_seq */\n          v_l_id_93206 = atomic_inc(&(v_work_idx_7860)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_93201 = atomic_inc(v_work_idx_7867); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__93209",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93210",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__93212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__93213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__93214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__93222",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__93216",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__93232",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__93227",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}