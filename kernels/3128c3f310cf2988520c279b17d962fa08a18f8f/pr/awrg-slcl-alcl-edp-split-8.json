{
  "name" : "awrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__83415, const global float* restrict v__83416, const global float* restrict v__83417, const global float* restrict v__83418, float v__83419, float v__83420, global float* v__83440, global int* v__83422, local float* v__83435, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83424; \n  float v__83426; \n  float v__81237; \n  /* Private Memory */\n  float v__83428_0;\n  \n  float v__83430_0;\n  \n  int v__83434_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6951 = v__83422; \n    local int v_w_id_83408; \n    if (get_local_id(0) == 0) {\n      v_w_id_83408 = atomic_inc(v_work_idx_6951); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83408 < v_MHeight_2)){\n      for (int v_l_id_83409 = get_local_id(0); v_l_id_83409 < v_MWidthC_1; v_l_id_83409 = (v_l_id_83409 + get_local_size(0))) {\n        float v_tmp_83502 = 0.0f; \n        v__83424 = v_tmp_83502; \n        /* reduce_while_seq */\n        for (int v_i_83410 = 0; v_i_83410 < 8; v_i_83410 = (1 + v_i_83410)) {\n          v__83434_0 = check(v__83424, v__83415[(v_l_id_83409 + (8 * v_MWidthC_1 * v_w_id_83408) + (v_MWidthC_1 * v_i_83410))]); \n          if (v__83434_0) {\n          } else {\n            break;\n          }\n          float v_tmp_83503 = 0.0f; \n          v__83426 = v_tmp_83503; \n          int v_index_83504 = v__83415[(v_l_id_83409 + (8 * v_MWidthC_1 * v_w_id_83408) + (v_MWidthC_1 * v_i_83410))]; \n          if (v_index_83504 < 0) {\n            v__83428_0 = v__83426; \n          } else {\n            if (v_index_83504 >= v_VLength_3) {\n              v__83428_0 = v__83426; \n            } else {\n              v__83428_0 = v__83417[v_index_83504]; \n            }\n          }\n          v__83430_0 = mult(v__83428_0, v__83416[(v_l_id_83409 + (8 * v_MWidthC_1 * v_w_id_83408) + (v_MWidthC_1 * v_i_83410))]); \n          v__83424 = add(v__83430_0, v__83424); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83411 = 0; \n          v__83435[v_l_id_83409] = id(v__83424); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6945; \n        v_work_idx_6945 = 0; \n        int v_l_id_83412 = atomic_inc(&(v_work_idx_6945)); \n        while((v_l_id_83412 < 1)){\n          float v_tmp_83507 = 0.0f; \n          v__81237 = v_tmp_83507; \n          /* reduce_seq */\n          for (int v_i_83413 = 0; v_i_83413 < v_MWidthC_1; v_i_83413 = (1 + v_i_83413)) {\n            v__81237 = add(v__81237, v__83435[(v_i_83413 + (v_MWidthC_1 * v_l_id_83412))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83414 = 0; \n            v__83440[v_w_id_83408] = doubleMultiplyAdd(v__81237, v__83419, v__83418[v_w_id_83408], v__83420); \n          }\n          /* end map_seq */\n          v_l_id_83412 = atomic_inc(&(v_work_idx_6945)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83408 = atomic_inc(v_work_idx_6951); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__83415",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83416",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83417",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83418",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83419",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83420",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83422",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83440",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83435",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}