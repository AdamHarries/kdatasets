{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__103926, const global float* restrict v__103927, const global float* restrict v__103928, const global float* restrict v__103929, float v__103930, float v__103931, global float* v__103951, global int* v__103933, local float* v__103946, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__103935; \n  float v__103937; \n  float v__81237; \n  /* Private Memory */\n  float v__103939_0;\n  \n  float v__103941_0;\n  \n  int v__103945_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8876 = v__103933; \n    local int v_w_id_103919; \n    if (get_local_id(0) == 0) {\n      v_w_id_103919 = atomic_inc(v_work_idx_8876); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_103919 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8874; \n        v_work_idx_8874 = 0; \n        int v_l_id_103920 = atomic_inc(&(v_work_idx_8874)); \n        while((v_l_id_103920 < v_MWidthC_1)){\n          float v_tmp_104009 = 0.0f; \n          v__103935 = v_tmp_104009; \n          /* reduce_while_seq */\n          for (int v_i_103921 = 0; v_i_103921 < 512; v_i_103921 = (1 + v_i_103921)) {\n            v__103945_0 = check(v__103935, v__103926[(v_l_id_103920 + (512 * v_MWidthC_1 * v_w_id_103919) + (v_MWidthC_1 * v_i_103921))]); \n            if (v__103945_0) {\n            } else {\n              break;\n            }\n            float v_tmp_104010 = 0.0f; \n            v__103937 = v_tmp_104010; \n            int v_index_104011 = v__103926[(v_l_id_103920 + (512 * v_MWidthC_1 * v_w_id_103919) + (v_MWidthC_1 * v_i_103921))]; \n            if (v_index_104011 < 0) {\n              v__103939_0 = v__103937; \n            } else {\n              if (v_index_104011 >= v_VLength_3) {\n                v__103939_0 = v__103937; \n              } else {\n                v__103939_0 = v__103928[v_index_104011]; \n              }\n            }\n            v__103941_0 = mult(v__103939_0, v__103927[(v_l_id_103920 + (512 * v_MWidthC_1 * v_w_id_103919) + (v_MWidthC_1 * v_i_103921))]); \n            v__103935 = add(v__103941_0, v__103935); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_103922 = 0; \n            v__103946[v_l_id_103920] = id(v__103935); \n          }\n          /* end map_seq */\n          v_l_id_103920 = atomic_inc(&(v_work_idx_8874)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_103923 = get_local_id(0); \n        float v_tmp_104014 = 0.0f; \n        v__81237 = v_tmp_104014; \n        /* reduce_seq */\n        for (int v_i_103924 = 0; v_i_103924 < v_MWidthC_1; v_i_103924 = (1 + v_i_103924)) {\n          v__81237 = add(v__81237, v__103946[(v_i_103924 + (v_MWidthC_1 * v_l_id_103923))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_103925 = 0; \n          v__103951[v_w_id_103919] = doubleMultiplyAdd(v__81237, v__103930, v__103929[v_w_id_103919], v__103931); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_103919 = atomic_inc(v_work_idx_8876); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__103926",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103927",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__103928",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__103929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__103930",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__103931",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__103933",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__103951",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__103946",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}