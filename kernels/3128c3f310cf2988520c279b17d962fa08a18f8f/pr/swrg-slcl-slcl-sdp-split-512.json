{
  "name" : "swrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101212, const global float* restrict v__101213, const global float* restrict v__101214, const global float* restrict v__101215, float v__101216, float v__101217, global float* v__101234, global float* v__101224, local float* v__101229, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101220; \n  float v__101225; \n  float v__81237; \n  /* Private Memory */\n  float v__101222_0;\n  \n  for (int v_wg_id_101204 = get_group_id(0); v_wg_id_101204 < v_MHeight_2; v_wg_id_101204 = (v_wg_id_101204 + get_num_groups(0))) {\n    for (int v_l_id_101205 = get_local_id(0); v_l_id_101205 < v_MWidthC_1; v_l_id_101205 = (v_l_id_101205 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_101206 = 0; v_i_101206 < 512; v_i_101206 = (1 + v_i_101206)) {\n        float v_tmp_101299 = 0.0f; \n        v__101220 = v_tmp_101299; \n        int v_index_101300 = v__101212[(v_l_id_101205 + (512 * v_MWidthC_1 * v_wg_id_101204) + (v_MWidthC_1 * v_i_101206))]; \n        if (v_index_101300 < 0) {\n          v__101222_0 = v__101220; \n        } else {\n          if (v_index_101300 >= v_VLength_3) {\n            v__101222_0 = v__101220; \n          } else {\n            v__101222_0 = v__101214[v_index_101300]; \n          }\n        }\n        v__101224[(511 + (512 * v_MWidthC_1 * v_wg_id_101204) + (-1 * v_i_101206) + (512 * v_l_id_101205))] = mult(v__101222_0, v__101213[(v_l_id_101205 + (512 * v_MWidthC_1 * v_wg_id_101204) + (v_MWidthC_1 * v_i_101206))]); \n      }\n      /* end map_seq */\n      float v_tmp_101301 = 0.0f; \n      v__101225 = v_tmp_101301; \n      /* reduce_seq */\n      for (int v_i_101207 = 0; v_i_101207 < 512; v_i_101207 = (1 + v_i_101207)) {\n        v__101225 = add(v__101225, v__101224[(v_i_101207 + (512 * v_MWidthC_1 * v_wg_id_101204) + (512 * v_l_id_101205))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101208 = 0; \n        v__101229[v_l_id_101205] = id(v__101225); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_101209 = get_local_id(0); \n      float v_tmp_101304 = 0.0f; \n      v__81237 = v_tmp_101304; \n      /* reduce_seq */\n      for (int v_i_101210 = 0; v_i_101210 < v_MWidthC_1; v_i_101210 = (1 + v_i_101210)) {\n        v__81237 = add(v__81237, v__101229[(v_i_101210 + (v_MWidthC_1 * v_l_id_101209))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_101211 = 0; \n        v__101234[v_wg_id_101204] = doubleMultiplyAdd(v__81237, v__101216, v__101215[v_wg_id_101204], v__101217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101212",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101213",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101214",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101215",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101216",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101217",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101224",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101234",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__101229",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}