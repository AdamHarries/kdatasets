{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__83740, const global float* restrict v__83741, const global float* restrict v__83742, const global float* restrict v__83743, float v__83744, float v__83745, global float* v__83763, global float* v__83753, global int* v__83747, local float* v__83758, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__83749; \n  float v__83754; \n  float v__81237; \n  /* Private Memory */\n  float v__83751_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6984 = v__83747; \n    local int v_w_id_83732; \n    if (get_local_id(0) == 0) {\n      v_w_id_83732 = atomic_inc(v_work_idx_6984); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_83732 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6982; \n        v_work_idx_6982 = 0; \n        int v_l_id_83733 = atomic_inc(&(v_work_idx_6982)); \n        while((v_l_id_83733 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_83734 = 0; v_i_83734 < 8; v_i_83734 = (1 + v_i_83734)) {\n            float v_tmp_83818 = 0.0f; \n            v__83749 = v_tmp_83818; \n            int v_index_83819 = v__83740[(v_l_id_83733 + (8 * v_MWidthC_1 * v_w_id_83732) + (v_MWidthC_1 * v_i_83734))]; \n            if (v_index_83819 < 0) {\n              v__83751_0 = v__83749; \n            } else {\n              if (v_index_83819 >= v_VLength_3) {\n                v__83751_0 = v__83749; \n              } else {\n                v__83751_0 = v__83742[v_index_83819]; \n              }\n            }\n            v__83753[(7 + (8 * v_MWidthC_1 * v_w_id_83732) + (-1 * v_i_83734) + (8 * v_l_id_83733))] = mult(v__83751_0, v__83741[(v_l_id_83733 + (8 * v_MWidthC_1 * v_w_id_83732) + (v_MWidthC_1 * v_i_83734))]); \n          }\n          /* end map_seq */\n          float v_tmp_83820 = 0.0f; \n          v__83754 = v_tmp_83820; \n          /* reduce_seq */\n          for (int v_i_83735 = 0; v_i_83735 < 8; v_i_83735 = (1 + v_i_83735)) {\n            v__83754 = add(v__83754, v__83753[(v_i_83735 + (8 * v_MWidthC_1 * v_w_id_83732) + (8 * v_l_id_83733))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_83736 = 0; \n            v__83758[v_l_id_83733] = id(v__83754); \n          }\n          /* end map_seq */\n          v_l_id_83733 = atomic_inc(&(v_work_idx_6982)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_83737 = get_local_id(0); \n        float v_tmp_83823 = 0.0f; \n        v__81237 = v_tmp_83823; \n        /* reduce_seq */\n        for (int v_i_83738 = 0; v_i_83738 < v_MWidthC_1; v_i_83738 = (1 + v_i_83738)) {\n          v__81237 = add(v__81237, v__83758[(v_i_83738 + (v_MWidthC_1 * v_l_id_83737))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_83739 = 0; \n          v__83763[v_w_id_83732] = doubleMultiplyAdd(v__81237, v__83744, v__83743[v_w_id_83732], v__83745); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_83732 = atomic_inc(v_work_idx_6984); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__83740",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83741",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83742",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__83743",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__83744",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__83745",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__83753",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__83747",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__83763",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__83758",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}