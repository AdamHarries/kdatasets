{
  "name" : "awrg-slcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__99394, const global float* restrict v__99395, const global float* restrict v__99396, const global float* restrict v__99397, float v__99398, float v__99399, global float* v__99413, global int* v__99401, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__99403; \n  float v__99405; \n  /* Private Memory */\n  float v__99407_0;\n  \n  float v__99409_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8446 = v__99401; \n    local int v_w_id_99390; \n    if (get_local_id(0) == 0) {\n      v_w_id_99390 = atomic_inc(v_work_idx_8446); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_99390 < ((v_MHeight_2)/(256)))){\n      for (int v_l_id_99391 = get_local_id(0); v_l_id_99391 < 256; v_l_id_99391 = (v_l_id_99391 + get_local_size(0))) {\n        float v_tmp_99454 = 0.0f; \n        v__99403 = v_tmp_99454; \n        /* reduce_seq */\n        for (int v_i_99392 = 0; v_i_99392 < v_MWidthC_1; v_i_99392 = (1 + v_i_99392)) {\n          float v_tmp_99455 = 0.0f; \n          v__99405 = v_tmp_99455; \n          int v_index_99456 = v__99394[(v_i_99392 + (256 * v_MWidthC_1 * v_w_id_99390) + (v_MWidthC_1 * v_l_id_99391))]; \n          if (v_index_99456 < 0) {\n            v__99407_0 = v__99405; \n          } else {\n            if (v_index_99456 >= v_VLength_3) {\n              v__99407_0 = v__99405; \n            } else {\n              v__99407_0 = v__99396[v_index_99456]; \n            }\n          }\n          v__99409_0 = mult(v__99407_0, v__99395[(v_i_99392 + (256 * v_MWidthC_1 * v_w_id_99390) + (v_MWidthC_1 * v_l_id_99391))]); \n          v__99403 = add(v__99409_0, v__99403); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_99393 = 0; \n          v__99413[(v_l_id_99391 + (256 * v_w_id_99390))] = doubleMultiplyAdd(v__99403, v__99398, v__99397[(v_l_id_99391 + (256 * v_w_id_99390))], v__99399); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_99390 = atomic_inc(v_work_idx_8446); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__99394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99395",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__99396",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__99397",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__99398",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__99399",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__99401",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__99413",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}