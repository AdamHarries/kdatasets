{
  "name" : "swrg-slcl-edp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__94463, const global float* restrict v__94464, const global float* restrict v__94465, const global float* restrict v__94466, float v__94467, float v__94468, global float* v__94483, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__94470; \n  float v__94473; \n  /* Private Memory */\n  float v__94475_0;\n  \n  float v__94477_0;\n  \n  int v__94481_0;\n  \n  for (int v_wg_id_94459 = get_group_id(0); v_wg_id_94459 < ((v_MHeight_2)/(128)); v_wg_id_94459 = (v_wg_id_94459 + get_num_groups(0))) {\n    for (int v_l_id_94460 = get_local_id(0); v_l_id_94460 < 128; v_l_id_94460 = (v_l_id_94460 + get_local_size(0))) {\n      float v_tmp_94531 = 0.0f; \n      v__94470 = v_tmp_94531; \n      /* reduce_while_seq */\n      for (int v_i_94461 = 0; v_i_94461 < v_MWidthC_1; v_i_94461 = (1 + v_i_94461)) {\n        v__94481_0 = check(v__94470, v__94463[(v_i_94461 + (128 * v_MWidthC_1 * v_wg_id_94459) + (v_MWidthC_1 * v_l_id_94460))]); \n        if (v__94481_0) {\n        } else {\n          break;\n        }\n        float v_tmp_94532 = 0.0f; \n        v__94473 = v_tmp_94532; \n        int v_index_94533 = v__94463[(v_i_94461 + (128 * v_MWidthC_1 * v_wg_id_94459) + (v_MWidthC_1 * v_l_id_94460))]; \n        if (v_index_94533 < 0) {\n          v__94475_0 = v__94473; \n        } else {\n          if (v_index_94533 >= v_VLength_3) {\n            v__94475_0 = v__94473; \n          } else {\n            v__94475_0 = v__94465[v_index_94533]; \n          }\n        }\n        v__94477_0 = mult(v__94475_0, v__94464[(v_i_94461 + (128 * v_MWidthC_1 * v_wg_id_94459) + (v_MWidthC_1 * v_l_id_94460))]); \n        v__94470 = add(v__94477_0, v__94470); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_94462 = 0; \n        v__94483[(v_l_id_94460 + (128 * v_wg_id_94459))] = doubleMultiplyAdd(v__94470, v__94467, v__94466[(v_l_id_94460 + (128 * v_wg_id_94459))], v__94468); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__94463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94464",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__94465",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__94466",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__94467",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__94468",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__94483",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}