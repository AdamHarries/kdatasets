{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__104029, const global float* restrict v__104030, const global float* restrict v__104031, const global float* restrict v__104032, float v__104033, float v__104034, global float* v__104052, global float* v__104042, global int* v__104036, local float* v__104047, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104038; \n  float v__104043; \n  float v__81237; \n  /* Private Memory */\n  float v__104040_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8888 = v__104036; \n    local int v_w_id_104021; \n    if (get_local_id(0) == 0) {\n      v_w_id_104021 = atomic_inc(v_work_idx_8888); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104021 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8886; \n        v_work_idx_8886 = 0; \n        int v_l_id_104022 = atomic_inc(&(v_work_idx_8886)); \n        while((v_l_id_104022 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_104023 = 0; v_i_104023 < 512; v_i_104023 = (1 + v_i_104023)) {\n            float v_tmp_104103 = 0.0f; \n            v__104038 = v_tmp_104103; \n            int v_index_104104 = v__104029[(v_l_id_104022 + (512 * v_MWidthC_1 * v_w_id_104021) + (v_MWidthC_1 * v_i_104023))]; \n            if (v_index_104104 < 0) {\n              v__104040_0 = v__104038; \n            } else {\n              if (v_index_104104 >= v_VLength_3) {\n                v__104040_0 = v__104038; \n              } else {\n                v__104040_0 = v__104031[v_index_104104]; \n              }\n            }\n            v__104042[(511 + (512 * v_MWidthC_1 * v_w_id_104021) + (-1 * v_i_104023) + (512 * v_l_id_104022))] = mult(v__104040_0, v__104030[(v_l_id_104022 + (512 * v_MWidthC_1 * v_w_id_104021) + (v_MWidthC_1 * v_i_104023))]); \n          }\n          /* end map_seq */\n          float v_tmp_104105 = 0.0f; \n          v__104043 = v_tmp_104105; \n          /* reduce_seq */\n          for (int v_i_104024 = 0; v_i_104024 < 512; v_i_104024 = (1 + v_i_104024)) {\n            v__104043 = add(v__104043, v__104042[(v_i_104024 + (512 * v_MWidthC_1 * v_w_id_104021) + (512 * v_l_id_104022))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104025 = 0; \n            v__104047[v_l_id_104022] = id(v__104043); \n          }\n          /* end map_seq */\n          v_l_id_104022 = atomic_inc(&(v_work_idx_8886)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8880; \n        v_work_idx_8880 = 0; \n        int v_l_id_104026 = atomic_inc(&(v_work_idx_8880)); \n        while((v_l_id_104026 < 1)){\n          float v_tmp_104108 = 0.0f; \n          v__81237 = v_tmp_104108; \n          /* reduce_seq */\n          for (int v_i_104027 = 0; v_i_104027 < v_MWidthC_1; v_i_104027 = (1 + v_i_104027)) {\n            v__81237 = add(v__81237, v__104047[(v_i_104027 + (v_MWidthC_1 * v_l_id_104026))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104028 = 0; \n            v__104052[v_w_id_104021] = doubleMultiplyAdd(v__81237, v__104033, v__104032[v_w_id_104021], v__104034); \n          }\n          /* end map_seq */\n          v_l_id_104026 = atomic_inc(&(v_work_idx_8880)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104021 = atomic_inc(v_work_idx_8888); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__104029",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104030",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104031",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104032",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104033",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104034",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104042",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104036",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104052",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104047",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}