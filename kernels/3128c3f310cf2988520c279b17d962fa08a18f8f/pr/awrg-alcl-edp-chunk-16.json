{
  "name" : "awrg-alcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__86991, const global float* restrict v__86992, const global float* restrict v__86993, const global float* restrict v__86994, float v__86995, float v__86996, global float* v__87012, global int* v__86998, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__86999; \n  float v__87002; \n  /* Private Memory */\n  float v__87004_0;\n  \n  float v__87006_0;\n  \n  int v__87010_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7285 = v__86998; \n    local int v_w_id_86987; \n    if (get_local_id(0) == 0) {\n      v_w_id_86987 = atomic_inc(v_work_idx_7285); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_86987 < ((v_MHeight_2)/(16)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7283; \n        v_work_idx_7283 = 0; \n        int v_l_id_86988 = atomic_inc(&(v_work_idx_7283)); \n        while((v_l_id_86988 < 16)){\n          float v_tmp_87055 = 0.0f; \n          v__86999 = v_tmp_87055; \n          /* reduce_while_seq */\n          for (int v_i_86989 = 0; v_i_86989 < v_MWidthC_1; v_i_86989 = (1 + v_i_86989)) {\n            v__87010_0 = check(v__86999, v__86991[(v_i_86989 + (16 * v_MWidthC_1 * v_w_id_86987) + (v_MWidthC_1 * v_l_id_86988))]); \n            if (v__87010_0) {\n            } else {\n              break;\n            }\n            float v_tmp_87056 = 0.0f; \n            v__87002 = v_tmp_87056; \n            int v_index_87057 = v__86991[(v_i_86989 + (16 * v_MWidthC_1 * v_w_id_86987) + (v_MWidthC_1 * v_l_id_86988))]; \n            if (v_index_87057 < 0) {\n              v__87004_0 = v__87002; \n            } else {\n              if (v_index_87057 >= v_VLength_3) {\n                v__87004_0 = v__87002; \n              } else {\n                v__87004_0 = v__86993[v_index_87057]; \n              }\n            }\n            v__87006_0 = mult(v__87004_0, v__86992[(v_i_86989 + (16 * v_MWidthC_1 * v_w_id_86987) + (v_MWidthC_1 * v_l_id_86988))]); \n            v__86999 = add(v__87006_0, v__86999); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_86990 = 0; \n            v__87012[(v_l_id_86988 + (16 * v_w_id_86987))] = doubleMultiplyAdd(v__86999, v__86995, v__86994[(v_l_id_86988 + (16 * v_w_id_86987))], v__86996); \n          }\n          /* end map_seq */\n          v_l_id_86988 = atomic_inc(&(v_work_idx_7283)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_86987 = atomic_inc(v_work_idx_7285); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__86991",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86992",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__86993",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__86994",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__86995",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__86996",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__86998",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__87012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}