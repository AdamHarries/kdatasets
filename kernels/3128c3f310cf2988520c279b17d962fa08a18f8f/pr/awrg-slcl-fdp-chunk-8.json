{
  "name" : "awrg-slcl-fdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__82734, const global float* restrict v__82735, const global float* restrict v__82736, const global float* restrict v__82737, float v__82738, float v__82739, global float* v__82753, global int* v__82741, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82743; \n  float v__82745; \n  /* Private Memory */\n  float v__82747_0;\n  \n  float v__82749_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6886 = v__82741; \n    local int v_w_id_82730; \n    if (get_local_id(0) == 0) {\n      v_w_id_82730 = atomic_inc(v_work_idx_6886); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82730 < ((v_MHeight_2)/(8)))){\n      for (int v_l_id_82731 = get_local_id(0); v_l_id_82731 < 8; v_l_id_82731 = (v_l_id_82731 + get_local_size(0))) {\n        float v_tmp_82794 = 0.0f; \n        v__82743 = v_tmp_82794; \n        /* reduce_seq */\n        for (int v_i_82732 = 0; v_i_82732 < v_MWidthC_1; v_i_82732 = (1 + v_i_82732)) {\n          float v_tmp_82795 = 0.0f; \n          v__82745 = v_tmp_82795; \n          int v_index_82796 = v__82734[(v_i_82732 + (8 * v_MWidthC_1 * v_w_id_82730) + (v_MWidthC_1 * v_l_id_82731))]; \n          if (v_index_82796 < 0) {\n            v__82747_0 = v__82745; \n          } else {\n            if (v_index_82796 >= v_VLength_3) {\n              v__82747_0 = v__82745; \n            } else {\n              v__82747_0 = v__82736[v_index_82796]; \n            }\n          }\n          v__82749_0 = mult(v__82747_0, v__82735[(v_i_82732 + (8 * v_MWidthC_1 * v_w_id_82730) + (v_MWidthC_1 * v_l_id_82731))]); \n          v__82743 = add(v__82749_0, v__82743); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_82733 = 0; \n          v__82753[(v_l_id_82731 + (8 * v_w_id_82730))] = doubleMultiplyAdd(v__82743, v__82738, v__82737[(v_l_id_82731 + (8 * v_w_id_82730))], v__82739); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_82730 = atomic_inc(v_work_idx_6886); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__82734",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82735",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82736",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82737",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82738",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82739",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82741",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82753",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}