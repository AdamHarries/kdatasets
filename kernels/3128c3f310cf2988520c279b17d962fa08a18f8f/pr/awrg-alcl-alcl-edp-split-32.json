{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90887, const global float* restrict v__90888, const global float* restrict v__90889, const global float* restrict v__90890, float v__90891, float v__90892, global float* v__90912, global int* v__90894, local float* v__90907, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90896; \n  float v__90898; \n  float v__81237; \n  /* Private Memory */\n  float v__90900_0;\n  \n  float v__90902_0;\n  \n  int v__90906_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7662 = v__90894; \n    local int v_w_id_90880; \n    if (get_local_id(0) == 0) {\n      v_w_id_90880 = atomic_inc(v_work_idx_7662); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90880 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_7660; \n        v_work_idx_7660 = 0; \n        int v_l_id_90881 = atomic_inc(&(v_work_idx_7660)); \n        while((v_l_id_90881 < v_MWidthC_1)){\n          float v_tmp_90966 = 0.0f; \n          v__90896 = v_tmp_90966; \n          /* reduce_while_seq */\n          for (int v_i_90882 = 0; v_i_90882 < 32; v_i_90882 = (1 + v_i_90882)) {\n            v__90906_0 = check(v__90896, v__90887[(v_l_id_90881 + (32 * v_MWidthC_1 * v_w_id_90880) + (v_MWidthC_1 * v_i_90882))]); \n            if (v__90906_0) {\n            } else {\n              break;\n            }\n            float v_tmp_90967 = 0.0f; \n            v__90898 = v_tmp_90967; \n            int v_index_90968 = v__90887[(v_l_id_90881 + (32 * v_MWidthC_1 * v_w_id_90880) + (v_MWidthC_1 * v_i_90882))]; \n            if (v_index_90968 < 0) {\n              v__90900_0 = v__90898; \n            } else {\n              if (v_index_90968 >= v_VLength_3) {\n                v__90900_0 = v__90898; \n              } else {\n                v__90900_0 = v__90889[v_index_90968]; \n              }\n            }\n            v__90902_0 = mult(v__90900_0, v__90888[(v_l_id_90881 + (32 * v_MWidthC_1 * v_w_id_90880) + (v_MWidthC_1 * v_i_90882))]); \n            v__90896 = add(v__90902_0, v__90896); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90883 = 0; \n            v__90907[v_l_id_90881] = id(v__90896); \n          }\n          /* end map_seq */\n          v_l_id_90881 = atomic_inc(&(v_work_idx_7660)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7655; \n        v_work_idx_7655 = 0; \n        int v_l_id_90884 = atomic_inc(&(v_work_idx_7655)); \n        while((v_l_id_90884 < 1)){\n          float v_tmp_90971 = 0.0f; \n          v__81237 = v_tmp_90971; \n          /* reduce_seq */\n          for (int v_i_90885 = 0; v_i_90885 < v_MWidthC_1; v_i_90885 = (1 + v_i_90885)) {\n            v__81237 = add(v__81237, v__90907[(v_i_90885 + (v_MWidthC_1 * v_l_id_90884))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90886 = 0; \n            v__90912[v_w_id_90880] = doubleMultiplyAdd(v__81237, v__90891, v__90890[v_w_id_90880], v__90892); \n          }\n          /* end map_seq */\n          v_l_id_90884 = atomic_inc(&(v_work_idx_7655)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90880 = atomic_inc(v_work_idx_7662); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90887",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90888",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90889",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90890",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90891",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90892",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90894",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90912",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90907",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}