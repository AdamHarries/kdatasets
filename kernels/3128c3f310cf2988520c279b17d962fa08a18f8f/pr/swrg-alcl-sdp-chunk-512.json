{
  "name" : "swrg-alcl-sdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__101845, const global float* restrict v__101846, const global float* restrict v__101847, const global float* restrict v__101848, float v__101849, float v__101850, global float* v__101863, global float* v__101857, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__101853; \n  float v__101858; \n  /* Private Memory */\n  float v__101855_0;\n  \n  for (int v_wg_id_101840 = get_group_id(0); v_wg_id_101840 < ((v_MHeight_2)/(512)); v_wg_id_101840 = (v_wg_id_101840 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8673; \n      v_work_idx_8673 = 0; \n      int v_l_id_101841 = atomic_inc(&(v_work_idx_8673)); \n      while((v_l_id_101841 < 512)){\n        /* map_seq */\n        for (int v_i_101842 = 0; v_i_101842 < v_MWidthC_1; v_i_101842 = (1 + v_i_101842)) {\n          float v_tmp_101903 = 0.0f; \n          v__101853 = v_tmp_101903; \n          int v_index_101904 = v__101845[(v_i_101842 + (512 * v_MWidthC_1 * v_wg_id_101840) + (v_MWidthC_1 * v_l_id_101841))]; \n          if (v_index_101904 < 0) {\n            v__101855_0 = v__101853; \n          } else {\n            if (v_index_101904 >= v_VLength_3) {\n              v__101855_0 = v__101853; \n            } else {\n              v__101855_0 = v__101847[v_index_101904]; \n            }\n          }\n          v__101857[(-1 + v_MWidthC_1 + (512 * v_MWidthC_1 * v_wg_id_101840) + (-1 * v_i_101842) + (v_MWidthC_1 * v_l_id_101841))] = mult(v__101855_0, v__101846[(v_i_101842 + (512 * v_MWidthC_1 * v_wg_id_101840) + (v_MWidthC_1 * v_l_id_101841))]); \n        }\n        /* end map_seq */\n        float v_tmp_101905 = 0.0f; \n        v__101858 = v_tmp_101905; \n        /* reduce_seq */\n        for (int v_i_101843 = 0; v_i_101843 < v_MWidthC_1; v_i_101843 = (1 + v_i_101843)) {\n          v__101858 = add(v__101858, v__101857[(v_i_101843 + (512 * v_MWidthC_1 * v_wg_id_101840) + (v_MWidthC_1 * v_l_id_101841))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_101844 = 0; \n          v__101863[(v_l_id_101841 + (512 * v_wg_id_101840))] = doubleMultiplyAdd(v__101858, v__101849, v__101848[(v_l_id_101841 + (512 * v_wg_id_101840))], v__101850); \n        }\n        /* end map_seq */\n        v_l_id_101841 = atomic_inc(&(v_work_idx_8673)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "512",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__101845",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101846",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__101847",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__101848",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__101849",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__101850",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__101857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__101863",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}