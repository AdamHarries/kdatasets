{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__85706, const global float* restrict v__85707, const global float* restrict v__85708, const global float* restrict v__85709, float v__85710, float v__85711, global float* v__85728, global float* v__85718, local float* v__85723, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__85714; \n  float v__85719; \n  float v__81237; \n  /* Private Memory */\n  float v__85716_0;\n  \n  for (int v_wg_id_85698 = get_group_id(0); v_wg_id_85698 < v_MHeight_2; v_wg_id_85698 = (v_wg_id_85698 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_7164; \n      v_work_idx_7164 = 0; \n      int v_l_id_85699 = atomic_inc(&(v_work_idx_7164)); \n      while((v_l_id_85699 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_85700 = 0; v_i_85700 < 16; v_i_85700 = (1 + v_i_85700)) {\n          float v_tmp_85781 = 0.0f; \n          v__85714 = v_tmp_85781; \n          int v_index_85782 = v__85706[(v_l_id_85699 + (16 * v_MWidthC_1 * v_wg_id_85698) + (v_MWidthC_1 * v_i_85700))]; \n          if (v_index_85782 < 0) {\n            v__85716_0 = v__85714; \n          } else {\n            if (v_index_85782 >= v_VLength_3) {\n              v__85716_0 = v__85714; \n            } else {\n              v__85716_0 = v__85708[v_index_85782]; \n            }\n          }\n          v__85718[(15 + (16 * v_MWidthC_1 * v_wg_id_85698) + (-1 * v_i_85700) + (16 * v_l_id_85699))] = mult(v__85716_0, v__85707[(v_l_id_85699 + (16 * v_MWidthC_1 * v_wg_id_85698) + (v_MWidthC_1 * v_i_85700))]); \n        }\n        /* end map_seq */\n        float v_tmp_85783 = 0.0f; \n        v__85719 = v_tmp_85783; \n        /* reduce_seq */\n        for (int v_i_85701 = 0; v_i_85701 < 16; v_i_85701 = (1 + v_i_85701)) {\n          v__85719 = add(v__85719, v__85718[(v_i_85701 + (16 * v_MWidthC_1 * v_wg_id_85698) + (16 * v_l_id_85699))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85702 = 0; \n          v__85723[v_l_id_85699] = id(v__85719); \n        }\n        /* end map_seq */\n        v_l_id_85699 = atomic_inc(&(v_work_idx_7164)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_7158; \n      v_work_idx_7158 = 0; \n      int v_l_id_85703 = atomic_inc(&(v_work_idx_7158)); \n      while((v_l_id_85703 < 1)){\n        float v_tmp_85786 = 0.0f; \n        v__81237 = v_tmp_85786; \n        /* reduce_seq */\n        for (int v_i_85704 = 0; v_i_85704 < v_MWidthC_1; v_i_85704 = (1 + v_i_85704)) {\n          v__81237 = add(v__81237, v__85723[(v_i_85704 + (v_MWidthC_1 * v_l_id_85703))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_85705 = 0; \n          v__85728[v_wg_id_85698] = doubleMultiplyAdd(v__81237, v__85710, v__85709[v_wg_id_85698], v__85711); \n        }\n        /* end map_seq */\n        v_l_id_85703 = atomic_inc(&(v_work_idx_7158)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__85706",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85707",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__85708",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__85709",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__85710",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__85711",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__85718",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__85728",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__85723",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}