{
  "name" : "awrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__100075, const global float* restrict v__100076, const global float* restrict v__100077, const global float* restrict v__100078, float v__100079, float v__100080, global float* v__100100, global int* v__100082, local float* v__100095, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__100084; \n  float v__100086; \n  float v__81237; \n  /* Private Memory */\n  float v__100088_0;\n  \n  float v__100090_0;\n  \n  int v__100094_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8511 = v__100082; \n    local int v_w_id_100068; \n    if (get_local_id(0) == 0) {\n      v_w_id_100068 = atomic_inc(v_work_idx_8511); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_100068 < v_MHeight_2)){\n      for (int v_l_id_100069 = get_local_id(0); v_l_id_100069 < v_MWidthC_1; v_l_id_100069 = (v_l_id_100069 + get_local_size(0))) {\n        float v_tmp_100162 = 0.0f; \n        v__100084 = v_tmp_100162; \n        /* reduce_while_seq */\n        for (int v_i_100070 = 0; v_i_100070 < 256; v_i_100070 = (1 + v_i_100070)) {\n          v__100094_0 = check(v__100084, v__100075[(v_l_id_100069 + (256 * v_MWidthC_1 * v_w_id_100068) + (v_MWidthC_1 * v_i_100070))]); \n          if (v__100094_0) {\n          } else {\n            break;\n          }\n          float v_tmp_100163 = 0.0f; \n          v__100086 = v_tmp_100163; \n          int v_index_100164 = v__100075[(v_l_id_100069 + (256 * v_MWidthC_1 * v_w_id_100068) + (v_MWidthC_1 * v_i_100070))]; \n          if (v_index_100164 < 0) {\n            v__100088_0 = v__100086; \n          } else {\n            if (v_index_100164 >= v_VLength_3) {\n              v__100088_0 = v__100086; \n            } else {\n              v__100088_0 = v__100077[v_index_100164]; \n            }\n          }\n          v__100090_0 = mult(v__100088_0, v__100076[(v_l_id_100069 + (256 * v_MWidthC_1 * v_w_id_100068) + (v_MWidthC_1 * v_i_100070))]); \n          v__100084 = add(v__100090_0, v__100084); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_100071 = 0; \n          v__100095[v_l_id_100069] = id(v__100084); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8505; \n        v_work_idx_8505 = 0; \n        int v_l_id_100072 = atomic_inc(&(v_work_idx_8505)); \n        while((v_l_id_100072 < 1)){\n          float v_tmp_100167 = 0.0f; \n          v__81237 = v_tmp_100167; \n          /* reduce_seq */\n          for (int v_i_100073 = 0; v_i_100073 < v_MWidthC_1; v_i_100073 = (1 + v_i_100073)) {\n            v__81237 = add(v__81237, v__100095[(v_i_100073 + (v_MWidthC_1 * v_l_id_100072))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_100074 = 0; \n            v__100100[v_w_id_100068] = doubleMultiplyAdd(v__81237, v__100079, v__100078[v_w_id_100068], v__100080); \n          }\n          /* end map_seq */\n          v_l_id_100072 = atomic_inc(&(v_work_idx_8505)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_100068 = atomic_inc(v_work_idx_8511); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__100075",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100076",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__100077",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__100078",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__100079",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__100080",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__100082",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__100100",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__100095",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}