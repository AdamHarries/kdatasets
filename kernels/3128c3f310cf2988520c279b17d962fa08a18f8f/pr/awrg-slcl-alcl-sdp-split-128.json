{
  "name" : "awrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96541, const global float* restrict v__96542, const global float* restrict v__96543, const global float* restrict v__96544, float v__96545, float v__96546, global float* v__96564, global float* v__96554, global int* v__96548, local float* v__96559, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96550; \n  float v__96555; \n  float v__81237; \n  /* Private Memory */\n  float v__96552_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8179 = v__96548; \n    local int v_w_id_96533; \n    if (get_local_id(0) == 0) {\n      v_w_id_96533 = atomic_inc(v_work_idx_8179); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96533 < v_MHeight_2)){\n      for (int v_l_id_96534 = get_local_id(0); v_l_id_96534 < v_MWidthC_1; v_l_id_96534 = (v_l_id_96534 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_96535 = 0; v_i_96535 < 128; v_i_96535 = (1 + v_i_96535)) {\n          float v_tmp_96623 = 0.0f; \n          v__96550 = v_tmp_96623; \n          int v_index_96624 = v__96541[(v_l_id_96534 + (128 * v_MWidthC_1 * v_w_id_96533) + (v_MWidthC_1 * v_i_96535))]; \n          if (v_index_96624 < 0) {\n            v__96552_0 = v__96550; \n          } else {\n            if (v_index_96624 >= v_VLength_3) {\n              v__96552_0 = v__96550; \n            } else {\n              v__96552_0 = v__96543[v_index_96624]; \n            }\n          }\n          v__96554[(127 + (128 * v_MWidthC_1 * v_w_id_96533) + (-1 * v_i_96535) + (128 * v_l_id_96534))] = mult(v__96552_0, v__96542[(v_l_id_96534 + (128 * v_MWidthC_1 * v_w_id_96533) + (v_MWidthC_1 * v_i_96535))]); \n        }\n        /* end map_seq */\n        float v_tmp_96625 = 0.0f; \n        v__96555 = v_tmp_96625; \n        /* reduce_seq */\n        for (int v_i_96536 = 0; v_i_96536 < 128; v_i_96536 = (1 + v_i_96536)) {\n          v__96555 = add(v__96555, v__96554[(v_i_96536 + (128 * v_MWidthC_1 * v_w_id_96533) + (128 * v_l_id_96534))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96537 = 0; \n          v__96559[v_l_id_96534] = id(v__96555); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8172; \n        v_work_idx_8172 = 0; \n        int v_l_id_96538 = atomic_inc(&(v_work_idx_8172)); \n        while((v_l_id_96538 < 1)){\n          float v_tmp_96628 = 0.0f; \n          v__81237 = v_tmp_96628; \n          /* reduce_seq */\n          for (int v_i_96539 = 0; v_i_96539 < v_MWidthC_1; v_i_96539 = (1 + v_i_96539)) {\n            v__81237 = add(v__81237, v__96559[(v_i_96539 + (v_MWidthC_1 * v_l_id_96538))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96540 = 0; \n            v__96564[v_w_id_96533] = doubleMultiplyAdd(v__81237, v__96545, v__96544[v_w_id_96533], v__96546); \n          }\n          /* end map_seq */\n          v_l_id_96538 = atomic_inc(&(v_work_idx_8172)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96533 = atomic_inc(v_work_idx_8179); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96541",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96542",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96543",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96544",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96545",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96546",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96554",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96548",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96564",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96559",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}