{
  "name" : "awrg-slcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__90079, const global float* restrict v__90080, const global float* restrict v__90081, const global float* restrict v__90082, float v__90083, float v__90084, global float* v__90104, global int* v__90086, local float* v__90099, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__90088; \n  float v__90090; \n  float v__81237; \n  /* Private Memory */\n  float v__90092_0;\n  \n  float v__90094_0;\n  \n  int v__90098_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_7575 = v__90086; \n    local int v_w_id_90072; \n    if (get_local_id(0) == 0) {\n      v_w_id_90072 = atomic_inc(v_work_idx_7575); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_90072 < v_MHeight_2)){\n      for (int v_l_id_90073 = get_local_id(0); v_l_id_90073 < v_MWidthC_1; v_l_id_90073 = (v_l_id_90073 + get_local_size(0))) {\n        float v_tmp_90166 = 0.0f; \n        v__90088 = v_tmp_90166; \n        /* reduce_while_seq */\n        for (int v_i_90074 = 0; v_i_90074 < 32; v_i_90074 = (1 + v_i_90074)) {\n          v__90098_0 = check(v__90088, v__90079[(v_l_id_90073 + (32 * v_MWidthC_1 * v_w_id_90072) + (v_MWidthC_1 * v_i_90074))]); \n          if (v__90098_0) {\n          } else {\n            break;\n          }\n          float v_tmp_90167 = 0.0f; \n          v__90090 = v_tmp_90167; \n          int v_index_90168 = v__90079[(v_l_id_90073 + (32 * v_MWidthC_1 * v_w_id_90072) + (v_MWidthC_1 * v_i_90074))]; \n          if (v_index_90168 < 0) {\n            v__90092_0 = v__90090; \n          } else {\n            if (v_index_90168 >= v_VLength_3) {\n              v__90092_0 = v__90090; \n            } else {\n              v__90092_0 = v__90081[v_index_90168]; \n            }\n          }\n          v__90094_0 = mult(v__90092_0, v__90080[(v_l_id_90073 + (32 * v_MWidthC_1 * v_w_id_90072) + (v_MWidthC_1 * v_i_90074))]); \n          v__90088 = add(v__90094_0, v__90088); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_90075 = 0; \n          v__90099[v_l_id_90073] = id(v__90088); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_7569; \n        v_work_idx_7569 = 0; \n        int v_l_id_90076 = atomic_inc(&(v_work_idx_7569)); \n        while((v_l_id_90076 < 1)){\n          float v_tmp_90171 = 0.0f; \n          v__81237 = v_tmp_90171; \n          /* reduce_seq */\n          for (int v_i_90077 = 0; v_i_90077 < v_MWidthC_1; v_i_90077 = (1 + v_i_90077)) {\n            v__81237 = add(v__81237, v__90099[(v_i_90077 + (v_MWidthC_1 * v_l_id_90076))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_90078 = 0; \n            v__90104[v_w_id_90072] = doubleMultiplyAdd(v__81237, v__90083, v__90082[v_w_id_90072], v__90084); \n          }\n          /* end map_seq */\n          v_l_id_90076 = atomic_inc(&(v_work_idx_7569)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_90072 = atomic_inc(v_work_idx_7575); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__90079",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90080",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__90081",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__90082",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__90083",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__90084",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__90086",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__90104",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__90099",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}