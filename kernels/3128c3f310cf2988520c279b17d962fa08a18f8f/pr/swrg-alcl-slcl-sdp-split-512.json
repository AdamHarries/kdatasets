{
  "name" : "swrg-alcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__102066, const global float* restrict v__102067, const global float* restrict v__102068, const global float* restrict v__102069, float v__102070, float v__102071, global float* v__102088, global float* v__102078, local float* v__102083, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__102074; \n  float v__102079; \n  float v__81237; \n  /* Private Memory */\n  float v__102076_0;\n  \n  for (int v_wg_id_102058 = get_group_id(0); v_wg_id_102058 < v_MHeight_2; v_wg_id_102058 = (v_wg_id_102058 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8695; \n      v_work_idx_8695 = 0; \n      int v_l_id_102059 = atomic_inc(&(v_work_idx_8695)); \n      while((v_l_id_102059 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_102060 = 0; v_i_102060 < 512; v_i_102060 = (1 + v_i_102060)) {\n          float v_tmp_102145 = 0.0f; \n          v__102074 = v_tmp_102145; \n          int v_index_102146 = v__102066[(v_l_id_102059 + (512 * v_MWidthC_1 * v_wg_id_102058) + (v_MWidthC_1 * v_i_102060))]; \n          if (v_index_102146 < 0) {\n            v__102076_0 = v__102074; \n          } else {\n            if (v_index_102146 >= v_VLength_3) {\n              v__102076_0 = v__102074; \n            } else {\n              v__102076_0 = v__102068[v_index_102146]; \n            }\n          }\n          v__102078[(511 + (512 * v_MWidthC_1 * v_wg_id_102058) + (-1 * v_i_102060) + (512 * v_l_id_102059))] = mult(v__102076_0, v__102067[(v_l_id_102059 + (512 * v_MWidthC_1 * v_wg_id_102058) + (v_MWidthC_1 * v_i_102060))]); \n        }\n        /* end map_seq */\n        float v_tmp_102147 = 0.0f; \n        v__102079 = v_tmp_102147; \n        /* reduce_seq */\n        for (int v_i_102061 = 0; v_i_102061 < 512; v_i_102061 = (1 + v_i_102061)) {\n          v__102079 = add(v__102079, v__102078[(v_i_102061 + (512 * v_MWidthC_1 * v_wg_id_102058) + (512 * v_l_id_102059))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_102062 = 0; \n          v__102083[v_l_id_102059] = id(v__102079); \n        }\n        /* end map_seq */\n        v_l_id_102059 = atomic_inc(&(v_work_idx_8695)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_102063 = get_local_id(0); \n      float v_tmp_102150 = 0.0f; \n      v__81237 = v_tmp_102150; \n      /* reduce_seq */\n      for (int v_i_102064 = 0; v_i_102064 < v_MWidthC_1; v_i_102064 = (1 + v_i_102064)) {\n        v__81237 = add(v__81237, v__102083[(v_i_102064 + (v_MWidthC_1 * v_l_id_102063))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_102065 = 0; \n        v__102088[v_wg_id_102058] = doubleMultiplyAdd(v__81237, v__102070, v__102069[v_wg_id_102058], v__102071); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__102066",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102067",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__102068",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__102069",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__102070",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__102071",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__102078",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__102088",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__102083",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}