{
  "name" : "awrg-slcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__96743, const global float* restrict v__96744, const global float* restrict v__96745, const global float* restrict v__96746, float v__96747, float v__96748, global float* v__96768, global int* v__96750, local float* v__96763, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96752; \n  float v__96754; \n  float v__81237; \n  /* Private Memory */\n  float v__96756_0;\n  \n  float v__96758_0;\n  \n  int v__96762_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8199 = v__96750; \n    local int v_w_id_96736; \n    if (get_local_id(0) == 0) {\n      v_w_id_96736 = atomic_inc(v_work_idx_8199); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96736 < v_MHeight_2)){\n      for (int v_l_id_96737 = get_local_id(0); v_l_id_96737 < v_MWidthC_1; v_l_id_96737 = (v_l_id_96737 + get_local_size(0))) {\n        float v_tmp_96830 = 0.0f; \n        v__96752 = v_tmp_96830; \n        /* reduce_while_seq */\n        for (int v_i_96738 = 0; v_i_96738 < 128; v_i_96738 = (1 + v_i_96738)) {\n          v__96762_0 = check(v__96752, v__96743[(v_l_id_96737 + (128 * v_MWidthC_1 * v_w_id_96736) + (v_MWidthC_1 * v_i_96738))]); \n          if (v__96762_0) {\n          } else {\n            break;\n          }\n          float v_tmp_96831 = 0.0f; \n          v__96754 = v_tmp_96831; \n          int v_index_96832 = v__96743[(v_l_id_96737 + (128 * v_MWidthC_1 * v_w_id_96736) + (v_MWidthC_1 * v_i_96738))]; \n          if (v_index_96832 < 0) {\n            v__96756_0 = v__96754; \n          } else {\n            if (v_index_96832 >= v_VLength_3) {\n              v__96756_0 = v__96754; \n            } else {\n              v__96756_0 = v__96745[v_index_96832]; \n            }\n          }\n          v__96758_0 = mult(v__96756_0, v__96744[(v_l_id_96737 + (128 * v_MWidthC_1 * v_w_id_96736) + (v_MWidthC_1 * v_i_96738))]); \n          v__96752 = add(v__96758_0, v__96752); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96739 = 0; \n          v__96763[v_l_id_96737] = id(v__96752); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8193; \n        v_work_idx_8193 = 0; \n        int v_l_id_96740 = atomic_inc(&(v_work_idx_8193)); \n        while((v_l_id_96740 < 1)){\n          float v_tmp_96835 = 0.0f; \n          v__81237 = v_tmp_96835; \n          /* reduce_seq */\n          for (int v_i_96741 = 0; v_i_96741 < v_MWidthC_1; v_i_96741 = (1 + v_i_96741)) {\n            v__81237 = add(v__81237, v__96763[(v_i_96741 + (v_MWidthC_1 * v_l_id_96740))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_96742 = 0; \n            v__96768[v_w_id_96736] = doubleMultiplyAdd(v__81237, v__96747, v__96746[v_w_id_96736], v__96748); \n          }\n          /* end map_seq */\n          v_l_id_96740 = atomic_inc(&(v_work_idx_8193)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96736 = atomic_inc(v_work_idx_8199); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__96743",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96744",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96745",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96746",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96747",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96748",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96750",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96768",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96763",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}