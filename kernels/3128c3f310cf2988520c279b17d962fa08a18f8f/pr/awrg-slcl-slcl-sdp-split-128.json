{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96220, const global float* restrict v__96221, const global float* restrict v__96222, const global float* restrict v__96223, float v__96224, float v__96225, global float* v__96243, global float* v__96233, global int* v__96227, local float* v__96238, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96229; \n  float v__96234; \n  float v__81237; \n  /* Private Memory */\n  float v__96231_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8150 = v__96227; \n    local int v_w_id_96212; \n    if (get_local_id(0) == 0) {\n      v_w_id_96212 = atomic_inc(v_work_idx_8150); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_96212 < v_MHeight_2)){\n      for (int v_l_id_96213 = get_local_id(0); v_l_id_96213 < v_MWidthC_1; v_l_id_96213 = (v_l_id_96213 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_96214 = 0; v_i_96214 < 128; v_i_96214 = (1 + v_i_96214)) {\n          float v_tmp_96306 = 0.0f; \n          v__96229 = v_tmp_96306; \n          int v_index_96307 = v__96220[(v_l_id_96213 + (128 * v_MWidthC_1 * v_w_id_96212) + (v_MWidthC_1 * v_i_96214))]; \n          if (v_index_96307 < 0) {\n            v__96231_0 = v__96229; \n          } else {\n            if (v_index_96307 >= v_VLength_3) {\n              v__96231_0 = v__96229; \n            } else {\n              v__96231_0 = v__96222[v_index_96307]; \n            }\n          }\n          v__96233[(127 + (128 * v_MWidthC_1 * v_w_id_96212) + (-1 * v_i_96214) + (128 * v_l_id_96213))] = mult(v__96231_0, v__96221[(v_l_id_96213 + (128 * v_MWidthC_1 * v_w_id_96212) + (v_MWidthC_1 * v_i_96214))]); \n        }\n        /* end map_seq */\n        float v_tmp_96308 = 0.0f; \n        v__96234 = v_tmp_96308; \n        /* reduce_seq */\n        for (int v_i_96215 = 0; v_i_96215 < 128; v_i_96215 = (1 + v_i_96215)) {\n          v__96234 = add(v__96234, v__96233[(v_i_96215 + (128 * v_MWidthC_1 * v_w_id_96212) + (128 * v_l_id_96213))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96216 = 0; \n          v__96238[v_l_id_96213] = id(v__96234); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_96217 = get_local_id(0); \n        float v_tmp_96311 = 0.0f; \n        v__81237 = v_tmp_96311; \n        /* reduce_seq */\n        for (int v_i_96218 = 0; v_i_96218 < v_MWidthC_1; v_i_96218 = (1 + v_i_96218)) {\n          v__81237 = add(v__81237, v__96238[(v_i_96218 + (v_MWidthC_1 * v_l_id_96217))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_96219 = 0; \n          v__96243[v_w_id_96212] = doubleMultiplyAdd(v__81237, v__96224, v__96223[v_w_id_96212], v__96225); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_96212 = atomic_inc(v_work_idx_8150); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96220",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96221",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96222",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96223",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96224",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96225",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96233",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96227",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__96243",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__96238",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}