{
  "name" : "swrg-alcl-fdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__98584, const global float* restrict v__98585, const global float* restrict v__98586, const global float* restrict v__98587, float v__98588, float v__98589, global float* v__98602, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__98592; \n  float v__98594; \n  /* Private Memory */\n  float v__98596_0;\n  \n  float v__98598_0;\n  \n  for (int v_wg_id_98580 = get_group_id(0); v_wg_id_98580 < ((v_MHeight_2)/(256)); v_wg_id_98580 = (v_wg_id_98580 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8367; \n      v_work_idx_8367 = 0; \n      int v_l_id_98581 = atomic_inc(&(v_work_idx_8367)); \n      while((v_l_id_98581 < 256)){\n        float v_tmp_98640 = 0.0f; \n        v__98592 = v_tmp_98640; \n        /* reduce_seq */\n        for (int v_i_98582 = 0; v_i_98582 < v_MWidthC_1; v_i_98582 = (1 + v_i_98582)) {\n          float v_tmp_98641 = 0.0f; \n          v__98594 = v_tmp_98641; \n          int v_index_98642 = v__98584[(v_i_98582 + (256 * v_MWidthC_1 * v_wg_id_98580) + (v_MWidthC_1 * v_l_id_98581))]; \n          if (v_index_98642 < 0) {\n            v__98596_0 = v__98594; \n          } else {\n            if (v_index_98642 >= v_VLength_3) {\n              v__98596_0 = v__98594; \n            } else {\n              v__98596_0 = v__98586[v_index_98642]; \n            }\n          }\n          v__98598_0 = mult(v__98596_0, v__98585[(v_i_98582 + (256 * v_MWidthC_1 * v_wg_id_98580) + (v_MWidthC_1 * v_l_id_98581))]); \n          v__98592 = add(v__98598_0, v__98592); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_98583 = 0; \n          v__98602[(v_l_id_98581 + (256 * v_wg_id_98580))] = doubleMultiplyAdd(v__98592, v__98588, v__98587[(v_l_id_98581 + (256 * v_wg_id_98580))], v__98589); \n        }\n        /* end map_seq */\n        v_l_id_98581 = atomic_inc(&(v_work_idx_8367)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "256",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__98584",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98585",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__98586",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__98587",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__98588",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__98589",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__98602",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}