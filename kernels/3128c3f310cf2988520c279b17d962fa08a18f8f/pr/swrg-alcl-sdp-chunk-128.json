{
  "name" : "swrg-alcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__95181, const global float* restrict v__95182, const global float* restrict v__95183, const global float* restrict v__95184, float v__95185, float v__95186, global float* v__95199, global float* v__95193, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__95189; \n  float v__95194; \n  /* Private Memory */\n  float v__95191_0;\n  \n  for (int v_wg_id_95176 = get_group_id(0); v_wg_id_95176 < ((v_MHeight_2)/(128)); v_wg_id_95176 = (v_wg_id_95176 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_8049; \n      v_work_idx_8049 = 0; \n      int v_l_id_95177 = atomic_inc(&(v_work_idx_8049)); \n      while((v_l_id_95177 < 128)){\n        /* map_seq */\n        for (int v_i_95178 = 0; v_i_95178 < v_MWidthC_1; v_i_95178 = (1 + v_i_95178)) {\n          float v_tmp_95239 = 0.0f; \n          v__95189 = v_tmp_95239; \n          int v_index_95240 = v__95181[(v_i_95178 + (128 * v_MWidthC_1 * v_wg_id_95176) + (v_MWidthC_1 * v_l_id_95177))]; \n          if (v_index_95240 < 0) {\n            v__95191_0 = v__95189; \n          } else {\n            if (v_index_95240 >= v_VLength_3) {\n              v__95191_0 = v__95189; \n            } else {\n              v__95191_0 = v__95183[v_index_95240]; \n            }\n          }\n          v__95193[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_95176) + (-1 * v_i_95178) + (v_MWidthC_1 * v_l_id_95177))] = mult(v__95191_0, v__95182[(v_i_95178 + (128 * v_MWidthC_1 * v_wg_id_95176) + (v_MWidthC_1 * v_l_id_95177))]); \n        }\n        /* end map_seq */\n        float v_tmp_95241 = 0.0f; \n        v__95194 = v_tmp_95241; \n        /* reduce_seq */\n        for (int v_i_95179 = 0; v_i_95179 < v_MWidthC_1; v_i_95179 = (1 + v_i_95179)) {\n          v__95194 = add(v__95194, v__95193[(v_i_95179 + (128 * v_MWidthC_1 * v_wg_id_95176) + (v_MWidthC_1 * v_l_id_95177))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_95180 = 0; \n          v__95199[(v_l_id_95177 + (128 * v_wg_id_95176))] = doubleMultiplyAdd(v__95194, v__95185, v__95184[(v_l_id_95177 + (128 * v_wg_id_95176))], v__95186); \n        }\n        /* end map_seq */\n        v_l_id_95177 = atomic_inc(&(v_work_idx_8049)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__95181",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95182",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__95183",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__95184",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__95185",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__95186",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__95193",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__95199",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}