{
  "name" : "swrg-slcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__81432, const global float* restrict v__81433, const global float* restrict v__81434, const global float* restrict v__81435, float v__81436, float v__81437, global float* v__81456, local float* v__81451, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__81440; \n  float v__81442; \n  float v__81237; \n  /* Private Memory */\n  float v__81444_0;\n  \n  float v__81446_0;\n  \n  int v__81450_0;\n  \n  for (int v_wg_id_81425 = get_group_id(0); v_wg_id_81425 < v_MHeight_2; v_wg_id_81425 = (v_wg_id_81425 + get_num_groups(0))) {\n    for (int v_l_id_81426 = get_local_id(0); v_l_id_81426 < v_MWidthC_1; v_l_id_81426 = (v_l_id_81426 + get_local_size(0))) {\n      float v_tmp_81524 = 0.0f; \n      v__81440 = v_tmp_81524; \n      /* reduce_while_seq */\n      for (int v_i_81427 = 0; v_i_81427 < 8; v_i_81427 = (1 + v_i_81427)) {\n        v__81450_0 = check(v__81440, v__81432[(v_l_id_81426 + (8 * v_MWidthC_1 * v_wg_id_81425) + (v_MWidthC_1 * v_i_81427))]); \n        if (v__81450_0) {\n        } else {\n          break;\n        }\n        float v_tmp_81525 = 0.0f; \n        v__81442 = v_tmp_81525; \n        int v_index_81526 = v__81432[(v_l_id_81426 + (8 * v_MWidthC_1 * v_wg_id_81425) + (v_MWidthC_1 * v_i_81427))]; \n        if (v_index_81526 < 0) {\n          v__81444_0 = v__81442; \n        } else {\n          if (v_index_81526 >= v_VLength_3) {\n            v__81444_0 = v__81442; \n          } else {\n            v__81444_0 = v__81434[v_index_81526]; \n          }\n        }\n        v__81446_0 = mult(v__81444_0, v__81433[(v_l_id_81426 + (8 * v_MWidthC_1 * v_wg_id_81425) + (v_MWidthC_1 * v_i_81427))]); \n        v__81440 = add(v__81446_0, v__81440); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81428 = 0; \n        v__81451[v_l_id_81426] = id(v__81440); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_81429 = get_local_id(0); \n      float v_tmp_81529 = 0.0f; \n      v__81237 = v_tmp_81529; \n      /* reduce_seq */\n      for (int v_i_81430 = 0; v_i_81430 < v_MWidthC_1; v_i_81430 = (1 + v_i_81430)) {\n        v__81237 = add(v__81237, v__81451[(v_i_81430 + (v_MWidthC_1 * v_l_id_81429))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_81431 = 0; \n        v__81456[v_wg_id_81425] = doubleMultiplyAdd(v__81237, v__81436, v__81435[v_wg_id_81425], v__81437); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__81432",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81433",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__81434",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__81435",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__81436",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__81437",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__81456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__81451",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}