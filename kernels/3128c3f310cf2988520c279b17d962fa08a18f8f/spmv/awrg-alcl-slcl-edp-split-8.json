{
  "name" : "awrg-alcl-slcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__12395, const global float* restrict v__12396, const global float* restrict v__12397, const global float* restrict v__12398, float v__12399, float v__12400, global float* v__12420, global int* v__12402, local float* v__12415, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12404; \n  float v__12406; \n  float v__9698; \n  /* Private Memory */\n  float v__12408_0;\n  \n  float v__12410_0;\n  \n  int v__12414_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_323 = v__12402; \n    local int v_w_id_12388; \n    if (get_local_id(0) == 0) {\n      v_w_id_12388 = atomic_inc(v_work_idx_323); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12388 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_321; \n        v_work_idx_321 = 0; \n        int v_l_id_12389 = atomic_inc(&(v_work_idx_321)); \n        while((v_l_id_12389 < v_MWidthC_1)){\n          float v_tmp_12478 = 0.0f; \n          v__12404 = v_tmp_12478; \n          /* reduce_while_seq */\n          for (int v_i_12390 = 0; v_i_12390 < 8; v_i_12390 = (1 + v_i_12390)) {\n            v__12414_0 = check(v__12404, v__12395[(v_l_id_12389 + (8 * v_MWidthC_1 * v_w_id_12388) + (v_MWidthC_1 * v_i_12390))]); \n            if (v__12414_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12479 = 0.0f; \n            v__12406 = v_tmp_12479; \n            int v_index_12480 = v__12395[(v_l_id_12389 + (8 * v_MWidthC_1 * v_w_id_12388) + (v_MWidthC_1 * v_i_12390))]; \n            if (v_index_12480 < 0) {\n              v__12408_0 = v__12406; \n            } else {\n              if (v_index_12480 >= v_VLength_3) {\n                v__12408_0 = v__12406; \n              } else {\n                v__12408_0 = v__12397[v_index_12480]; \n              }\n            }\n            v__12410_0 = mult(v__12408_0, v__12396[(v_l_id_12389 + (8 * v_MWidthC_1 * v_w_id_12388) + (v_MWidthC_1 * v_i_12390))]); \n            v__12404 = add(v__12410_0, v__12404); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12391 = 0; \n            v__12415[v_l_id_12389] = id(v__12404); \n          }\n          /* end map_seq */\n          v_l_id_12389 = atomic_inc(&(v_work_idx_321)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_12392 = get_local_id(0); \n        float v_tmp_12483 = 0.0f; \n        v__9698 = v_tmp_12483; \n        /* reduce_seq */\n        for (int v_i_12393 = 0; v_i_12393 < v_MWidthC_1; v_i_12393 = (1 + v_i_12393)) {\n          v__9698 = add(v__9698, v__12415[(v_i_12393 + (v_MWidthC_1 * v_l_id_12392))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_12394 = 0; \n          v__12420[v_w_id_12388] = doubleMultiplyAdd(v__9698, v__12399, v__12398[v_w_id_12388], v__12400); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12388 = atomic_inc(v_work_idx_323); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12395",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12396",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12397",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12398",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12399",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12400",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12402",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12420",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12415",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}