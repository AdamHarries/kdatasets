{
  "name" : "swrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13013, const global float* restrict v__13014, const global float* restrict v__13015, const global float* restrict v__13016, float v__13017, float v__13018, global float* v__13035, global float* v__13025, local float* v__13030, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13021; \n  float v__13026; \n  float v__9698; \n  /* Private Memory */\n  float v__13023_0;\n  \n  for (int v_wg_id_13005 = get_group_id(0); v_wg_id_13005 < v_MHeight_2; v_wg_id_13005 = (v_wg_id_13005 + get_num_groups(0))) {\n    for (int v_l_id_13006 = get_local_id(0); v_l_id_13006 < v_MWidthC_1; v_l_id_13006 = (v_l_id_13006 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_13007 = 0; v_i_13007 < 16; v_i_13007 = (1 + v_i_13007)) {\n        float v_tmp_13100 = 0.0f; \n        v__13021 = v_tmp_13100; \n        int v_index_13101 = v__13013[(v_l_id_13006 + (16 * v_MWidthC_1 * v_wg_id_13005) + (v_MWidthC_1 * v_i_13007))]; \n        if (v_index_13101 < 0) {\n          v__13023_0 = v__13021; \n        } else {\n          if (v_index_13101 >= v_VLength_3) {\n            v__13023_0 = v__13021; \n          } else {\n            v__13023_0 = v__13015[v_index_13101]; \n          }\n        }\n        v__13025[(15 + (16 * v_MWidthC_1 * v_wg_id_13005) + (-1 * v_i_13007) + (16 * v_l_id_13006))] = mult(v__13023_0, v__13014[(v_l_id_13006 + (16 * v_MWidthC_1 * v_wg_id_13005) + (v_MWidthC_1 * v_i_13007))]); \n      }\n      /* end map_seq */\n      float v_tmp_13102 = 0.0f; \n      v__13026 = v_tmp_13102; \n      /* reduce_seq */\n      for (int v_i_13008 = 0; v_i_13008 < 16; v_i_13008 = (1 + v_i_13008)) {\n        v__13026 = add(v__13026, v__13025[(v_i_13008 + (16 * v_MWidthC_1 * v_wg_id_13005) + (16 * v_l_id_13006))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13009 = 0; \n        v__13030[v_l_id_13006] = id(v__13026); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13010 = get_local_id(0); \n      float v_tmp_13105 = 0.0f; \n      v__9698 = v_tmp_13105; \n      /* reduce_seq */\n      for (int v_i_13011 = 0; v_i_13011 < v_MWidthC_1; v_i_13011 = (1 + v_i_13011)) {\n        v__9698 = add(v__9698, v__13030[(v_i_13011 + (v_MWidthC_1 * v_l_id_13010))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13012 = 0; \n        v__13035[v_wg_id_13005] = doubleMultiplyAdd(v__9698, v__13017, v__13016[v_wg_id_13005], v__13018); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13013",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13014",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13015",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13017",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13018",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13025",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13035",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13030",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}