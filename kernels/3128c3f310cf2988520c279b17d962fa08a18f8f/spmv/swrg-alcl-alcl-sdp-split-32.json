{
  "name" : "swrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17499, const global float* restrict v__17500, const global float* restrict v__17501, const global float* restrict v__17502, float v__17503, float v__17504, global float* v__17521, global float* v__17511, local float* v__17516, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17507; \n  float v__17512; \n  float v__9698; \n  /* Private Memory */\n  float v__17509_0;\n  \n  for (int v_wg_id_17491 = get_group_id(0); v_wg_id_17491 < v_MHeight_2; v_wg_id_17491 = (v_wg_id_17491 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_795; \n      v_work_idx_795 = 0; \n      int v_l_id_17492 = atomic_inc(&(v_work_idx_795)); \n      while((v_l_id_17492 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_17493 = 0; v_i_17493 < 32; v_i_17493 = (1 + v_i_17493)) {\n          float v_tmp_17574 = 0.0f; \n          v__17507 = v_tmp_17574; \n          int v_index_17575 = v__17499[(v_l_id_17492 + (32 * v_MWidthC_1 * v_wg_id_17491) + (v_MWidthC_1 * v_i_17493))]; \n          if (v_index_17575 < 0) {\n            v__17509_0 = v__17507; \n          } else {\n            if (v_index_17575 >= v_VLength_3) {\n              v__17509_0 = v__17507; \n            } else {\n              v__17509_0 = v__17501[v_index_17575]; \n            }\n          }\n          v__17511[(31 + (32 * v_MWidthC_1 * v_wg_id_17491) + (-1 * v_i_17493) + (32 * v_l_id_17492))] = mult(v__17509_0, v__17500[(v_l_id_17492 + (32 * v_MWidthC_1 * v_wg_id_17491) + (v_MWidthC_1 * v_i_17493))]); \n        }\n        /* end map_seq */\n        float v_tmp_17576 = 0.0f; \n        v__17512 = v_tmp_17576; \n        /* reduce_seq */\n        for (int v_i_17494 = 0; v_i_17494 < 32; v_i_17494 = (1 + v_i_17494)) {\n          v__17512 = add(v__17512, v__17511[(v_i_17494 + (32 * v_MWidthC_1 * v_wg_id_17491) + (32 * v_l_id_17492))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17495 = 0; \n          v__17516[v_l_id_17492] = id(v__17512); \n        }\n        /* end map_seq */\n        v_l_id_17492 = atomic_inc(&(v_work_idx_795)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_789; \n      v_work_idx_789 = 0; \n      int v_l_id_17496 = atomic_inc(&(v_work_idx_789)); \n      while((v_l_id_17496 < 1)){\n        float v_tmp_17579 = 0.0f; \n        v__9698 = v_tmp_17579; \n        /* reduce_seq */\n        for (int v_i_17497 = 0; v_i_17497 < v_MWidthC_1; v_i_17497 = (1 + v_i_17497)) {\n          v__9698 = add(v__9698, v__17516[(v_i_17497 + (v_MWidthC_1 * v_l_id_17496))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17498 = 0; \n          v__17521[v_wg_id_17491] = doubleMultiplyAdd(v__9698, v__17503, v__17502[v_wg_id_17491], v__17504); \n        }\n        /* end map_seq */\n        v_l_id_17496 = atomic_inc(&(v_work_idx_789)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__17499",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17500",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17501",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17502",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17503",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17504",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__17511",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__17521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17516",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}