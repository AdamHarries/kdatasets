{
  "name" : "awrg-alcl-slcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__22391, const global float* restrict v__22392, const global float* restrict v__22393, const global float* restrict v__22394, float v__22395, float v__22396, global float* v__22416, global int* v__22398, local float* v__22411, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22400; \n  float v__22402; \n  float v__9698; \n  /* Private Memory */\n  float v__22404_0;\n  \n  float v__22406_0;\n  \n  int v__22410_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1259 = v__22398; \n    local int v_w_id_22384; \n    if (get_local_id(0) == 0) {\n      v_w_id_22384 = atomic_inc(v_work_idx_1259); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22384 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1257; \n        v_work_idx_1257 = 0; \n        int v_l_id_22385 = atomic_inc(&(v_work_idx_1257)); \n        while((v_l_id_22385 < v_MWidthC_1)){\n          float v_tmp_22474 = 0.0f; \n          v__22400 = v_tmp_22474; \n          /* reduce_while_seq */\n          for (int v_i_22386 = 0; v_i_22386 < 64; v_i_22386 = (1 + v_i_22386)) {\n            v__22410_0 = check(v__22400, v__22391[(v_l_id_22385 + (64 * v_MWidthC_1 * v_w_id_22384) + (v_MWidthC_1 * v_i_22386))]); \n            if (v__22410_0) {\n            } else {\n              break;\n            }\n            float v_tmp_22475 = 0.0f; \n            v__22402 = v_tmp_22475; \n            int v_index_22476 = v__22391[(v_l_id_22385 + (64 * v_MWidthC_1 * v_w_id_22384) + (v_MWidthC_1 * v_i_22386))]; \n            if (v_index_22476 < 0) {\n              v__22404_0 = v__22402; \n            } else {\n              if (v_index_22476 >= v_VLength_3) {\n                v__22404_0 = v__22402; \n              } else {\n                v__22404_0 = v__22393[v_index_22476]; \n              }\n            }\n            v__22406_0 = mult(v__22404_0, v__22392[(v_l_id_22385 + (64 * v_MWidthC_1 * v_w_id_22384) + (v_MWidthC_1 * v_i_22386))]); \n            v__22400 = add(v__22406_0, v__22400); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22387 = 0; \n            v__22411[v_l_id_22385] = id(v__22400); \n          }\n          /* end map_seq */\n          v_l_id_22385 = atomic_inc(&(v_work_idx_1257)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_22388 = get_local_id(0); \n        float v_tmp_22479 = 0.0f; \n        v__9698 = v_tmp_22479; \n        /* reduce_seq */\n        for (int v_i_22389 = 0; v_i_22389 < v_MWidthC_1; v_i_22389 = (1 + v_i_22389)) {\n          v__9698 = add(v__9698, v__22411[(v_i_22389 + (v_MWidthC_1 * v_l_id_22388))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_22390 = 0; \n          v__22416[v_w_id_22384] = doubleMultiplyAdd(v__9698, v__22395, v__22394[v_w_id_22384], v__22396); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22384 = atomic_inc(v_work_idx_1259); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__22391",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22392",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22393",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22395",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22396",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22398",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22416",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22411",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}