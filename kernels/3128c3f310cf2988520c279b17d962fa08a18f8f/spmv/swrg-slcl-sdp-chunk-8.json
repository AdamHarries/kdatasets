{
  "name" : "swrg-slcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__9447, const global float* restrict v__9448, const global float* restrict v__9449, const global float* restrict v__9450, float v__9451, float v__9452, global float* v__9465, global float* v__9459, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__9455; \n  float v__9460; \n  /* Private Memory */\n  float v__9457_0;\n  \n  for (int v_wg_id_9442 = get_group_id(0); v_wg_id_9442 < ((v_MHeight_2)/(8)); v_wg_id_9442 = (v_wg_id_9442 + get_num_groups(0))) {\n    for (int v_l_id_9443 = get_local_id(0); v_l_id_9443 < 8; v_l_id_9443 = (v_l_id_9443 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_9444 = 0; v_i_9444 < v_MWidthC_1; v_i_9444 = (1 + v_i_9444)) {\n        float v_tmp_9509 = 0.0f; \n        v__9455 = v_tmp_9509; \n        int v_index_9510 = v__9447[(v_i_9444 + (8 * v_MWidthC_1 * v_wg_id_9442) + (v_MWidthC_1 * v_l_id_9443))]; \n        if (v_index_9510 < 0) {\n          v__9457_0 = v__9455; \n        } else {\n          if (v_index_9510 >= v_VLength_3) {\n            v__9457_0 = v__9455; \n          } else {\n            v__9457_0 = v__9449[v_index_9510]; \n          }\n        }\n        v__9459[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_9442) + (-1 * v_i_9444) + (v_MWidthC_1 * v_l_id_9443))] = mult(v__9457_0, v__9448[(v_i_9444 + (8 * v_MWidthC_1 * v_wg_id_9442) + (v_MWidthC_1 * v_l_id_9443))]); \n      }\n      /* end map_seq */\n      float v_tmp_9511 = 0.0f; \n      v__9460 = v_tmp_9511; \n      /* reduce_seq */\n      for (int v_i_9445 = 0; v_i_9445 < v_MWidthC_1; v_i_9445 = (1 + v_i_9445)) {\n        v__9460 = add(v__9460, v__9459[(v_i_9445 + (8 * v_MWidthC_1 * v_wg_id_9442) + (v_MWidthC_1 * v_l_id_9443))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_9446 = 0; \n        v__9465[(v_l_id_9443 + (8 * v_wg_id_9442))] = doubleMultiplyAdd(v__9460, v__9451, v__9450[(v_l_id_9443 + (8 * v_wg_id_9442))], v__9452); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__9447",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9448",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__9449",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__9450",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__9451",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__9452",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__9459",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__9465",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}