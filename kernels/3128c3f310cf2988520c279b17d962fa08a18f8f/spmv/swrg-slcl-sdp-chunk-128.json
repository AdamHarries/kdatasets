{
  "name" : "swrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22776, const global float* restrict v__22777, const global float* restrict v__22778, const global float* restrict v__22779, float v__22780, float v__22781, global float* v__22794, global float* v__22788, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22784; \n  float v__22789; \n  /* Private Memory */\n  float v__22786_0;\n  \n  for (int v_wg_id_22771 = get_group_id(0); v_wg_id_22771 < ((v_MHeight_2)/(128)); v_wg_id_22771 = (v_wg_id_22771 + get_num_groups(0))) {\n    for (int v_l_id_22772 = get_local_id(0); v_l_id_22772 < 128; v_l_id_22772 = (v_l_id_22772 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_22773 = 0; v_i_22773 < v_MWidthC_1; v_i_22773 = (1 + v_i_22773)) {\n        float v_tmp_22838 = 0.0f; \n        v__22784 = v_tmp_22838; \n        int v_index_22839 = v__22776[(v_i_22773 + (128 * v_MWidthC_1 * v_wg_id_22771) + (v_MWidthC_1 * v_l_id_22772))]; \n        if (v_index_22839 < 0) {\n          v__22786_0 = v__22784; \n        } else {\n          if (v_index_22839 >= v_VLength_3) {\n            v__22786_0 = v__22784; \n          } else {\n            v__22786_0 = v__22778[v_index_22839]; \n          }\n        }\n        v__22788[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_22771) + (-1 * v_i_22773) + (v_MWidthC_1 * v_l_id_22772))] = mult(v__22786_0, v__22777[(v_i_22773 + (128 * v_MWidthC_1 * v_wg_id_22771) + (v_MWidthC_1 * v_l_id_22772))]); \n      }\n      /* end map_seq */\n      float v_tmp_22840 = 0.0f; \n      v__22789 = v_tmp_22840; \n      /* reduce_seq */\n      for (int v_i_22774 = 0; v_i_22774 < v_MWidthC_1; v_i_22774 = (1 + v_i_22774)) {\n        v__22789 = add(v__22789, v__22788[(v_i_22774 + (128 * v_MWidthC_1 * v_wg_id_22771) + (v_MWidthC_1 * v_l_id_22772))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_22775 = 0; \n        v__22794[(v_l_id_22772 + (128 * v_wg_id_22771))] = doubleMultiplyAdd(v__22789, v__22780, v__22779[(v_l_id_22772 + (128 * v_wg_id_22771))], v__22781); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22776",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22777",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22778",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22779",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22780",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22781",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22788",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__22794",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}