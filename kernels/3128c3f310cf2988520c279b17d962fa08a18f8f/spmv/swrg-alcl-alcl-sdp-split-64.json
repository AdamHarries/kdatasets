{
  "name" : "swrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20831, const global float* restrict v__20832, const global float* restrict v__20833, const global float* restrict v__20834, float v__20835, float v__20836, global float* v__20853, global float* v__20843, local float* v__20848, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20839; \n  float v__20844; \n  float v__9698; \n  /* Private Memory */\n  float v__20841_0;\n  \n  for (int v_wg_id_20823 = get_group_id(0); v_wg_id_20823 < v_MHeight_2; v_wg_id_20823 = (v_wg_id_20823 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1107; \n      v_work_idx_1107 = 0; \n      int v_l_id_20824 = atomic_inc(&(v_work_idx_1107)); \n      while((v_l_id_20824 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_20825 = 0; v_i_20825 < 64; v_i_20825 = (1 + v_i_20825)) {\n          float v_tmp_20906 = 0.0f; \n          v__20839 = v_tmp_20906; \n          int v_index_20907 = v__20831[(v_l_id_20824 + (64 * v_MWidthC_1 * v_wg_id_20823) + (v_MWidthC_1 * v_i_20825))]; \n          if (v_index_20907 < 0) {\n            v__20841_0 = v__20839; \n          } else {\n            if (v_index_20907 >= v_VLength_3) {\n              v__20841_0 = v__20839; \n            } else {\n              v__20841_0 = v__20833[v_index_20907]; \n            }\n          }\n          v__20843[(63 + (64 * v_MWidthC_1 * v_wg_id_20823) + (-1 * v_i_20825) + (64 * v_l_id_20824))] = mult(v__20841_0, v__20832[(v_l_id_20824 + (64 * v_MWidthC_1 * v_wg_id_20823) + (v_MWidthC_1 * v_i_20825))]); \n        }\n        /* end map_seq */\n        float v_tmp_20908 = 0.0f; \n        v__20844 = v_tmp_20908; \n        /* reduce_seq */\n        for (int v_i_20826 = 0; v_i_20826 < 64; v_i_20826 = (1 + v_i_20826)) {\n          v__20844 = add(v__20844, v__20843[(v_i_20826 + (64 * v_MWidthC_1 * v_wg_id_20823) + (64 * v_l_id_20824))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20827 = 0; \n          v__20848[v_l_id_20824] = id(v__20844); \n        }\n        /* end map_seq */\n        v_l_id_20824 = atomic_inc(&(v_work_idx_1107)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1101; \n      v_work_idx_1101 = 0; \n      int v_l_id_20828 = atomic_inc(&(v_work_idx_1101)); \n      while((v_l_id_20828 < 1)){\n        float v_tmp_20911 = 0.0f; \n        v__9698 = v_tmp_20911; \n        /* reduce_seq */\n        for (int v_i_20829 = 0; v_i_20829 < v_MWidthC_1; v_i_20829 = (1 + v_i_20829)) {\n          v__9698 = add(v__9698, v__20848[(v_i_20829 + (v_MWidthC_1 * v_l_id_20828))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20830 = 0; \n          v__20853[v_wg_id_20823] = doubleMultiplyAdd(v__9698, v__20835, v__20834[v_wg_id_20823], v__20836); \n        }\n        /* end map_seq */\n        v_l_id_20828 = atomic_inc(&(v_work_idx_1101)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__20831",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20832",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20833",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20834",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20835",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20836",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__20843",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__20853",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20848",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}