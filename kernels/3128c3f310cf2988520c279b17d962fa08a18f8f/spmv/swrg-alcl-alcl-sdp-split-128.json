{
  "name" : "swrg-alcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24163, const global float* restrict v__24164, const global float* restrict v__24165, const global float* restrict v__24166, float v__24167, float v__24168, global float* v__24185, global float* v__24175, local float* v__24180, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24171; \n  float v__24176; \n  float v__9698; \n  /* Private Memory */\n  float v__24173_0;\n  \n  for (int v_wg_id_24155 = get_group_id(0); v_wg_id_24155 < v_MHeight_2; v_wg_id_24155 = (v_wg_id_24155 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1419; \n      v_work_idx_1419 = 0; \n      int v_l_id_24156 = atomic_inc(&(v_work_idx_1419)); \n      while((v_l_id_24156 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_24157 = 0; v_i_24157 < 128; v_i_24157 = (1 + v_i_24157)) {\n          float v_tmp_24238 = 0.0f; \n          v__24171 = v_tmp_24238; \n          int v_index_24239 = v__24163[(v_l_id_24156 + (128 * v_MWidthC_1 * v_wg_id_24155) + (v_MWidthC_1 * v_i_24157))]; \n          if (v_index_24239 < 0) {\n            v__24173_0 = v__24171; \n          } else {\n            if (v_index_24239 >= v_VLength_3) {\n              v__24173_0 = v__24171; \n            } else {\n              v__24173_0 = v__24165[v_index_24239]; \n            }\n          }\n          v__24175[(127 + (128 * v_MWidthC_1 * v_wg_id_24155) + (-1 * v_i_24157) + (128 * v_l_id_24156))] = mult(v__24173_0, v__24164[(v_l_id_24156 + (128 * v_MWidthC_1 * v_wg_id_24155) + (v_MWidthC_1 * v_i_24157))]); \n        }\n        /* end map_seq */\n        float v_tmp_24240 = 0.0f; \n        v__24176 = v_tmp_24240; \n        /* reduce_seq */\n        for (int v_i_24158 = 0; v_i_24158 < 128; v_i_24158 = (1 + v_i_24158)) {\n          v__24176 = add(v__24176, v__24175[(v_i_24158 + (128 * v_MWidthC_1 * v_wg_id_24155) + (128 * v_l_id_24156))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24159 = 0; \n          v__24180[v_l_id_24156] = id(v__24176); \n        }\n        /* end map_seq */\n        v_l_id_24156 = atomic_inc(&(v_work_idx_1419)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1413; \n      v_work_idx_1413 = 0; \n      int v_l_id_24160 = atomic_inc(&(v_work_idx_1413)); \n      while((v_l_id_24160 < 1)){\n        float v_tmp_24243 = 0.0f; \n        v__9698 = v_tmp_24243; \n        /* reduce_seq */\n        for (int v_i_24161 = 0; v_i_24161 < v_MWidthC_1; v_i_24161 = (1 + v_i_24161)) {\n          v__9698 = add(v__9698, v__24180[(v_i_24161 + (v_MWidthC_1 * v_l_id_24160))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24162 = 0; \n          v__24185[v_wg_id_24155] = doubleMultiplyAdd(v__9698, v__24167, v__24166[v_wg_id_24155], v__24168); \n        }\n        /* end map_seq */\n        v_l_id_24160 = atomic_inc(&(v_work_idx_1413)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24163",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24164",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24165",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24166",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24167",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24168",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24175",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__24185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24180",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}