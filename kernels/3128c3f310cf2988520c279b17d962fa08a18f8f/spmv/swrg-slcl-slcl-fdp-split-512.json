{
  "name" : "swrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__29779, const global float* restrict v__29780, const global float* restrict v__29781, const global float* restrict v__29782, float v__29783, float v__29784, global float* v__29801, local float* v__29796, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29787; \n  float v__29789; \n  float v__9698; \n  /* Private Memory */\n  float v__29791_0;\n  \n  float v__29793_0;\n  \n  for (int v_wg_id_29772 = get_group_id(0); v_wg_id_29772 < v_MHeight_2; v_wg_id_29772 = (v_wg_id_29772 + get_num_groups(0))) {\n    for (int v_l_id_29773 = get_local_id(0); v_l_id_29773 < v_MWidthC_1; v_l_id_29773 = (v_l_id_29773 + get_local_size(0))) {\n      float v_tmp_29866 = 0.0f; \n      v__29787 = v_tmp_29866; \n      /* reduce_seq */\n      for (int v_i_29774 = 0; v_i_29774 < 512; v_i_29774 = (1 + v_i_29774)) {\n        float v_tmp_29867 = 0.0f; \n        v__29789 = v_tmp_29867; \n        int v_index_29868 = v__29779[(v_l_id_29773 + (512 * v_MWidthC_1 * v_wg_id_29772) + (v_MWidthC_1 * v_i_29774))]; \n        if (v_index_29868 < 0) {\n          v__29791_0 = v__29789; \n        } else {\n          if (v_index_29868 >= v_VLength_3) {\n            v__29791_0 = v__29789; \n          } else {\n            v__29791_0 = v__29781[v_index_29868]; \n          }\n        }\n        v__29793_0 = mult(v__29791_0, v__29780[(v_l_id_29773 + (512 * v_MWidthC_1 * v_wg_id_29772) + (v_MWidthC_1 * v_i_29774))]); \n        v__29787 = add(v__29793_0, v__29787); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_29775 = 0; \n        v__29796[v_l_id_29773] = id(v__29787); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_29776 = get_local_id(0); \n      float v_tmp_29871 = 0.0f; \n      v__9698 = v_tmp_29871; \n      /* reduce_seq */\n      for (int v_i_29777 = 0; v_i_29777 < v_MWidthC_1; v_i_29777 = (1 + v_i_29777)) {\n        v__9698 = add(v__9698, v__29796[(v_i_29777 + (v_MWidthC_1 * v_l_id_29776))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_29778 = 0; \n        v__29801[v_wg_id_29772] = doubleMultiplyAdd(v__9698, v__29783, v__29782[v_wg_id_29772], v__29784); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__29779",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29780",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29781",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29782",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29783",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29784",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__29801",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29796",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}