{
  "name" : "awrg-alcl-slcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12201, const global float* restrict v__12202, const global float* restrict v__12203, const global float* restrict v__12204, float v__12205, float v__12206, global float* v__12224, global float* v__12214, global int* v__12208, local float* v__12219, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12210; \n  float v__12215; \n  float v__9698; \n  /* Private Memory */\n  float v__12212_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_303 = v__12208; \n    local int v_w_id_12193; \n    if (get_local_id(0) == 0) {\n      v_w_id_12193 = atomic_inc(v_work_idx_303); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12193 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_301; \n        v_work_idx_301 = 0; \n        int v_l_id_12194 = atomic_inc(&(v_work_idx_301)); \n        while((v_l_id_12194 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_12195 = 0; v_i_12195 < 8; v_i_12195 = (1 + v_i_12195)) {\n            float v_tmp_12279 = 0.0f; \n            v__12210 = v_tmp_12279; \n            int v_index_12280 = v__12201[(v_l_id_12194 + (8 * v_MWidthC_1 * v_w_id_12193) + (v_MWidthC_1 * v_i_12195))]; \n            if (v_index_12280 < 0) {\n              v__12212_0 = v__12210; \n            } else {\n              if (v_index_12280 >= v_VLength_3) {\n                v__12212_0 = v__12210; \n              } else {\n                v__12212_0 = v__12203[v_index_12280]; \n              }\n            }\n            v__12214[(7 + (8 * v_MWidthC_1 * v_w_id_12193) + (-1 * v_i_12195) + (8 * v_l_id_12194))] = mult(v__12212_0, v__12202[(v_l_id_12194 + (8 * v_MWidthC_1 * v_w_id_12193) + (v_MWidthC_1 * v_i_12195))]); \n          }\n          /* end map_seq */\n          float v_tmp_12281 = 0.0f; \n          v__12215 = v_tmp_12281; \n          /* reduce_seq */\n          for (int v_i_12196 = 0; v_i_12196 < 8; v_i_12196 = (1 + v_i_12196)) {\n            v__12215 = add(v__12215, v__12214[(v_i_12196 + (8 * v_MWidthC_1 * v_w_id_12193) + (8 * v_l_id_12194))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12197 = 0; \n            v__12219[v_l_id_12194] = id(v__12215); \n          }\n          /* end map_seq */\n          v_l_id_12194 = atomic_inc(&(v_work_idx_301)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_12198 = get_local_id(0); \n        float v_tmp_12284 = 0.0f; \n        v__9698 = v_tmp_12284; \n        /* reduce_seq */\n        for (int v_i_12199 = 0; v_i_12199 < v_MWidthC_1; v_i_12199 = (1 + v_i_12199)) {\n          v__9698 = add(v__9698, v__12219[(v_i_12199 + (v_MWidthC_1 * v_l_id_12198))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_12200 = 0; \n          v__12224[v_w_id_12193] = doubleMultiplyAdd(v__9698, v__12205, v__12204[v_w_id_12193], v__12206); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12193 = atomic_inc(v_work_idx_303); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12201",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12202",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12203",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12204",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12205",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12206",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12214",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12208",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12224",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12219",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}