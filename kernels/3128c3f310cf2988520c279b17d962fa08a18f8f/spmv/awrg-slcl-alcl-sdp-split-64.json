{
  "name" : "awrg-slcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21670, const global float* restrict v__21671, const global float* restrict v__21672, const global float* restrict v__21673, float v__21674, float v__21675, global float* v__21693, global float* v__21683, global int* v__21677, local float* v__21688, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21679; \n  float v__21684; \n  float v__9698; \n  /* Private Memory */\n  float v__21681_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1186 = v__21677; \n    local int v_w_id_21662; \n    if (get_local_id(0) == 0) {\n      v_w_id_21662 = atomic_inc(v_work_idx_1186); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21662 < v_MHeight_2)){\n      for (int v_l_id_21663 = get_local_id(0); v_l_id_21663 < v_MWidthC_1; v_l_id_21663 = (v_l_id_21663 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_21664 = 0; v_i_21664 < 64; v_i_21664 = (1 + v_i_21664)) {\n          float v_tmp_21752 = 0.0f; \n          v__21679 = v_tmp_21752; \n          int v_index_21753 = v__21670[(v_l_id_21663 + (64 * v_MWidthC_1 * v_w_id_21662) + (v_MWidthC_1 * v_i_21664))]; \n          if (v_index_21753 < 0) {\n            v__21681_0 = v__21679; \n          } else {\n            if (v_index_21753 >= v_VLength_3) {\n              v__21681_0 = v__21679; \n            } else {\n              v__21681_0 = v__21672[v_index_21753]; \n            }\n          }\n          v__21683[(63 + (64 * v_MWidthC_1 * v_w_id_21662) + (-1 * v_i_21664) + (64 * v_l_id_21663))] = mult(v__21681_0, v__21671[(v_l_id_21663 + (64 * v_MWidthC_1 * v_w_id_21662) + (v_MWidthC_1 * v_i_21664))]); \n        }\n        /* end map_seq */\n        float v_tmp_21754 = 0.0f; \n        v__21684 = v_tmp_21754; \n        /* reduce_seq */\n        for (int v_i_21665 = 0; v_i_21665 < 64; v_i_21665 = (1 + v_i_21665)) {\n          v__21684 = add(v__21684, v__21683[(v_i_21665 + (64 * v_MWidthC_1 * v_w_id_21662) + (64 * v_l_id_21663))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21666 = 0; \n          v__21688[v_l_id_21663] = id(v__21684); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1179; \n        v_work_idx_1179 = 0; \n        int v_l_id_21667 = atomic_inc(&(v_work_idx_1179)); \n        while((v_l_id_21667 < 1)){\n          float v_tmp_21757 = 0.0f; \n          v__9698 = v_tmp_21757; \n          /* reduce_seq */\n          for (int v_i_21668 = 0; v_i_21668 < v_MWidthC_1; v_i_21668 = (1 + v_i_21668)) {\n            v__9698 = add(v__9698, v__21688[(v_i_21668 + (v_MWidthC_1 * v_l_id_21667))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_21669 = 0; \n            v__21693[v_w_id_21662] = doubleMultiplyAdd(v__9698, v__21674, v__21673[v_w_id_21662], v__21675); \n          }\n          /* end map_seq */\n          v_l_id_21667 = atomic_inc(&(v_work_idx_1179)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_21662 = atomic_inc(v_work_idx_1186); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__21670",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21671",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21672",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21673",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21674",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21675",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21683",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21677",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21693",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__21688",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}