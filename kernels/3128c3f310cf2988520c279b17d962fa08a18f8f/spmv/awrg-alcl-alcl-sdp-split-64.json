{
  "name" : "awrg-alcl-alcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22494, const global float* restrict v__22495, const global float* restrict v__22496, const global float* restrict v__22497, float v__22498, float v__22499, global float* v__22517, global float* v__22507, global int* v__22501, local float* v__22512, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22503; \n  float v__22508; \n  float v__9698; \n  /* Private Memory */\n  float v__22505_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1271 = v__22501; \n    local int v_w_id_22486; \n    if (get_local_id(0) == 0) {\n      v_w_id_22486 = atomic_inc(v_work_idx_1271); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22486 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1269; \n        v_work_idx_1269 = 0; \n        int v_l_id_22487 = atomic_inc(&(v_work_idx_1269)); \n        while((v_l_id_22487 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22488 = 0; v_i_22488 < 64; v_i_22488 = (1 + v_i_22488)) {\n            float v_tmp_22568 = 0.0f; \n            v__22503 = v_tmp_22568; \n            int v_index_22569 = v__22494[(v_l_id_22487 + (64 * v_MWidthC_1 * v_w_id_22486) + (v_MWidthC_1 * v_i_22488))]; \n            if (v_index_22569 < 0) {\n              v__22505_0 = v__22503; \n            } else {\n              if (v_index_22569 >= v_VLength_3) {\n                v__22505_0 = v__22503; \n              } else {\n                v__22505_0 = v__22496[v_index_22569]; \n              }\n            }\n            v__22507[(63 + (64 * v_MWidthC_1 * v_w_id_22486) + (-1 * v_i_22488) + (64 * v_l_id_22487))] = mult(v__22505_0, v__22495[(v_l_id_22487 + (64 * v_MWidthC_1 * v_w_id_22486) + (v_MWidthC_1 * v_i_22488))]); \n          }\n          /* end map_seq */\n          float v_tmp_22570 = 0.0f; \n          v__22508 = v_tmp_22570; \n          /* reduce_seq */\n          for (int v_i_22489 = 0; v_i_22489 < 64; v_i_22489 = (1 + v_i_22489)) {\n            v__22508 = add(v__22508, v__22507[(v_i_22489 + (64 * v_MWidthC_1 * v_w_id_22486) + (64 * v_l_id_22487))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22490 = 0; \n            v__22512[v_l_id_22487] = id(v__22508); \n          }\n          /* end map_seq */\n          v_l_id_22487 = atomic_inc(&(v_work_idx_1269)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1263; \n        v_work_idx_1263 = 0; \n        int v_l_id_22491 = atomic_inc(&(v_work_idx_1263)); \n        while((v_l_id_22491 < 1)){\n          float v_tmp_22573 = 0.0f; \n          v__9698 = v_tmp_22573; \n          /* reduce_seq */\n          for (int v_i_22492 = 0; v_i_22492 < v_MWidthC_1; v_i_22492 = (1 + v_i_22492)) {\n            v__9698 = add(v__9698, v__22512[(v_i_22492 + (v_MWidthC_1 * v_l_id_22491))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22493 = 0; \n            v__22517[v_w_id_22486] = doubleMultiplyAdd(v__9698, v__22498, v__22497[v_w_id_22486], v__22499); \n          }\n          /* end map_seq */\n          v_l_id_22491 = atomic_inc(&(v_work_idx_1263)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22486 = atomic_inc(v_work_idx_1271); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22494",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22495",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22496",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22497",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22498",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22499",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22507",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22501",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22512",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}