{
  "name" : "awrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12498, const global float* restrict v__12499, const global float* restrict v__12500, const global float* restrict v__12501, float v__12502, float v__12503, global float* v__12521, global float* v__12511, global int* v__12505, local float* v__12516, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12507; \n  float v__12512; \n  float v__9698; \n  /* Private Memory */\n  float v__12509_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_335 = v__12505; \n    local int v_w_id_12490; \n    if (get_local_id(0) == 0) {\n      v_w_id_12490 = atomic_inc(v_work_idx_335); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12490 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_333; \n        v_work_idx_333 = 0; \n        int v_l_id_12491 = atomic_inc(&(v_work_idx_333)); \n        while((v_l_id_12491 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_12492 = 0; v_i_12492 < 8; v_i_12492 = (1 + v_i_12492)) {\n            float v_tmp_12572 = 0.0f; \n            v__12507 = v_tmp_12572; \n            int v_index_12573 = v__12498[(v_l_id_12491 + (8 * v_MWidthC_1 * v_w_id_12490) + (v_MWidthC_1 * v_i_12492))]; \n            if (v_index_12573 < 0) {\n              v__12509_0 = v__12507; \n            } else {\n              if (v_index_12573 >= v_VLength_3) {\n                v__12509_0 = v__12507; \n              } else {\n                v__12509_0 = v__12500[v_index_12573]; \n              }\n            }\n            v__12511[(7 + (8 * v_MWidthC_1 * v_w_id_12490) + (-1 * v_i_12492) + (8 * v_l_id_12491))] = mult(v__12509_0, v__12499[(v_l_id_12491 + (8 * v_MWidthC_1 * v_w_id_12490) + (v_MWidthC_1 * v_i_12492))]); \n          }\n          /* end map_seq */\n          float v_tmp_12574 = 0.0f; \n          v__12512 = v_tmp_12574; \n          /* reduce_seq */\n          for (int v_i_12493 = 0; v_i_12493 < 8; v_i_12493 = (1 + v_i_12493)) {\n            v__12512 = add(v__12512, v__12511[(v_i_12493 + (8 * v_MWidthC_1 * v_w_id_12490) + (8 * v_l_id_12491))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12494 = 0; \n            v__12516[v_l_id_12491] = id(v__12512); \n          }\n          /* end map_seq */\n          v_l_id_12491 = atomic_inc(&(v_work_idx_333)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_327; \n        v_work_idx_327 = 0; \n        int v_l_id_12495 = atomic_inc(&(v_work_idx_327)); \n        while((v_l_id_12495 < 1)){\n          float v_tmp_12577 = 0.0f; \n          v__9698 = v_tmp_12577; \n          /* reduce_seq */\n          for (int v_i_12496 = 0; v_i_12496 < v_MWidthC_1; v_i_12496 = (1 + v_i_12496)) {\n            v__9698 = add(v__9698, v__12516[(v_i_12496 + (v_MWidthC_1 * v_l_id_12495))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12497 = 0; \n            v__12521[v_w_id_12490] = doubleMultiplyAdd(v__9698, v__12502, v__12501[v_w_id_12490], v__12503); \n          }\n          /* end map_seq */\n          v_l_id_12495 = atomic_inc(&(v_work_idx_327)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12490 = atomic_inc(v_work_idx_335); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__12498",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12499",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12500",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12501",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12502",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12503",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12511",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12505",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12521",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12516",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}