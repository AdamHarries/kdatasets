{
  "name" : "awrg-slcl-alcl-fdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28435, const global float* restrict v__28436, const global float* restrict v__28437, const global float* restrict v__28438, float v__28439, float v__28440, global float* v__28458, global int* v__28442, local float* v__28453, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28444; \n  float v__28446; \n  float v__9698; \n  /* Private Memory */\n  float v__28448_0;\n  \n  float v__28450_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1820 = v__28442; \n    local int v_w_id_28428; \n    if (get_local_id(0) == 0) {\n      v_w_id_28428 = atomic_inc(v_work_idx_1820); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28428 < v_MHeight_2)){\n      for (int v_l_id_28429 = get_local_id(0); v_l_id_28429 < v_MWidthC_1; v_l_id_28429 = (v_l_id_28429 + get_local_size(0))) {\n        float v_tmp_28517 = 0.0f; \n        v__28444 = v_tmp_28517; \n        /* reduce_seq */\n        for (int v_i_28430 = 0; v_i_28430 < 256; v_i_28430 = (1 + v_i_28430)) {\n          float v_tmp_28518 = 0.0f; \n          v__28446 = v_tmp_28518; \n          int v_index_28519 = v__28435[(v_l_id_28429 + (256 * v_MWidthC_1 * v_w_id_28428) + (v_MWidthC_1 * v_i_28430))]; \n          if (v_index_28519 < 0) {\n            v__28448_0 = v__28446; \n          } else {\n            if (v_index_28519 >= v_VLength_3) {\n              v__28448_0 = v__28446; \n            } else {\n              v__28448_0 = v__28437[v_index_28519]; \n            }\n          }\n          v__28450_0 = mult(v__28448_0, v__28436[(v_l_id_28429 + (256 * v_MWidthC_1 * v_w_id_28428) + (v_MWidthC_1 * v_i_28430))]); \n          v__28444 = add(v__28450_0, v__28444); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28431 = 0; \n          v__28453[v_l_id_28429] = id(v__28444); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1814; \n        v_work_idx_1814 = 0; \n        int v_l_id_28432 = atomic_inc(&(v_work_idx_1814)); \n        while((v_l_id_28432 < 1)){\n          float v_tmp_28522 = 0.0f; \n          v__9698 = v_tmp_28522; \n          /* reduce_seq */\n          for (int v_i_28433 = 0; v_i_28433 < v_MWidthC_1; v_i_28433 = (1 + v_i_28433)) {\n            v__9698 = add(v__9698, v__28453[(v_i_28433 + (v_MWidthC_1 * v_l_id_28432))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28434 = 0; \n            v__28458[v_w_id_28428] = doubleMultiplyAdd(v__9698, v__28439, v__28438[v_w_id_28428], v__28440); \n          }\n          /* end map_seq */\n          v_l_id_28432 = atomic_inc(&(v_work_idx_1814)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28428 = atomic_inc(v_work_idx_1820); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__28435",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28436",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28437",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28438",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28439",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28440",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28442",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28458",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28453",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}