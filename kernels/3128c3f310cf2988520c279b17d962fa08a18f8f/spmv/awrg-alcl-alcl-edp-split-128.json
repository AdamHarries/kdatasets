{
  "name" : "awrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__26012, const global float* restrict v__26013, const global float* restrict v__26014, const global float* restrict v__26015, float v__26016, float v__26017, global float* v__26037, global int* v__26019, local float* v__26032, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26021; \n  float v__26023; \n  float v__9698; \n  /* Private Memory */\n  float v__26025_0;\n  \n  float v__26027_0;\n  \n  int v__26031_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1605 = v__26019; \n    local int v_w_id_26005; \n    if (get_local_id(0) == 0) {\n      v_w_id_26005 = atomic_inc(v_work_idx_1605); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_26005 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1603; \n        v_work_idx_1603 = 0; \n        int v_l_id_26006 = atomic_inc(&(v_work_idx_1603)); \n        while((v_l_id_26006 < v_MWidthC_1)){\n          float v_tmp_26091 = 0.0f; \n          v__26021 = v_tmp_26091; \n          /* reduce_while_seq */\n          for (int v_i_26007 = 0; v_i_26007 < 128; v_i_26007 = (1 + v_i_26007)) {\n            v__26031_0 = check(v__26021, v__26012[(v_l_id_26006 + (128 * v_MWidthC_1 * v_w_id_26005) + (v_MWidthC_1 * v_i_26007))]); \n            if (v__26031_0) {\n            } else {\n              break;\n            }\n            float v_tmp_26092 = 0.0f; \n            v__26023 = v_tmp_26092; \n            int v_index_26093 = v__26012[(v_l_id_26006 + (128 * v_MWidthC_1 * v_w_id_26005) + (v_MWidthC_1 * v_i_26007))]; \n            if (v_index_26093 < 0) {\n              v__26025_0 = v__26023; \n            } else {\n              if (v_index_26093 >= v_VLength_3) {\n                v__26025_0 = v__26023; \n              } else {\n                v__26025_0 = v__26014[v_index_26093]; \n              }\n            }\n            v__26027_0 = mult(v__26025_0, v__26013[(v_l_id_26006 + (128 * v_MWidthC_1 * v_w_id_26005) + (v_MWidthC_1 * v_i_26007))]); \n            v__26021 = add(v__26027_0, v__26021); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26008 = 0; \n            v__26032[v_l_id_26006] = id(v__26021); \n          }\n          /* end map_seq */\n          v_l_id_26006 = atomic_inc(&(v_work_idx_1603)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1598; \n        v_work_idx_1598 = 0; \n        int v_l_id_26009 = atomic_inc(&(v_work_idx_1598)); \n        while((v_l_id_26009 < 1)){\n          float v_tmp_26096 = 0.0f; \n          v__9698 = v_tmp_26096; \n          /* reduce_seq */\n          for (int v_i_26010 = 0; v_i_26010 < v_MWidthC_1; v_i_26010 = (1 + v_i_26010)) {\n            v__9698 = add(v__9698, v__26032[(v_i_26010 + (v_MWidthC_1 * v_l_id_26009))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_26011 = 0; \n            v__26037[v_w_id_26005] = doubleMultiplyAdd(v__9698, v__26016, v__26015[v_w_id_26005], v__26017); \n          }\n          /* end map_seq */\n          v_l_id_26009 = atomic_inc(&(v_work_idx_1598)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_26005 = atomic_inc(v_work_idx_1605); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__26012",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26013",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26014",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26015",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26016",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26017",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26019",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__26037",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26032",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}