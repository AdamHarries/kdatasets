{
  "name" : "swrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__31015, const global float* restrict v__31016, const global float* restrict v__31017, const global float* restrict v__31018, float v__31019, float v__31020, global float* v__31039, local float* v__31034, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31023; \n  float v__31025; \n  float v__9698; \n  /* Private Memory */\n  float v__31027_0;\n  \n  float v__31029_0;\n  \n  int v__31033_0;\n  \n  for (int v_wg_id_31008 = get_group_id(0); v_wg_id_31008 < v_MHeight_2; v_wg_id_31008 = (v_wg_id_31008 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2063; \n      v_work_idx_2063 = 0; \n      int v_l_id_31009 = atomic_inc(&(v_work_idx_2063)); \n      while((v_l_id_31009 < v_MWidthC_1)){\n        float v_tmp_31095 = 0.0f; \n        v__31023 = v_tmp_31095; \n        /* reduce_while_seq */\n        for (int v_i_31010 = 0; v_i_31010 < 512; v_i_31010 = (1 + v_i_31010)) {\n          v__31033_0 = check(v__31023, v__31015[(v_l_id_31009 + (512 * v_MWidthC_1 * v_wg_id_31008) + (v_MWidthC_1 * v_i_31010))]); \n          if (v__31033_0) {\n          } else {\n            break;\n          }\n          float v_tmp_31096 = 0.0f; \n          v__31025 = v_tmp_31096; \n          int v_index_31097 = v__31015[(v_l_id_31009 + (512 * v_MWidthC_1 * v_wg_id_31008) + (v_MWidthC_1 * v_i_31010))]; \n          if (v_index_31097 < 0) {\n            v__31027_0 = v__31025; \n          } else {\n            if (v_index_31097 >= v_VLength_3) {\n              v__31027_0 = v__31025; \n            } else {\n              v__31027_0 = v__31017[v_index_31097]; \n            }\n          }\n          v__31029_0 = mult(v__31027_0, v__31016[(v_l_id_31009 + (512 * v_MWidthC_1 * v_wg_id_31008) + (v_MWidthC_1 * v_i_31010))]); \n          v__31023 = add(v__31029_0, v__31023); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31011 = 0; \n          v__31034[v_l_id_31009] = id(v__31023); \n        }\n        /* end map_seq */\n        v_l_id_31009 = atomic_inc(&(v_work_idx_2063)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2058; \n      v_work_idx_2058 = 0; \n      int v_l_id_31012 = atomic_inc(&(v_work_idx_2058)); \n      while((v_l_id_31012 < 1)){\n        float v_tmp_31100 = 0.0f; \n        v__9698 = v_tmp_31100; \n        /* reduce_seq */\n        for (int v_i_31013 = 0; v_i_31013 < v_MWidthC_1; v_i_31013 = (1 + v_i_31013)) {\n          v__9698 = add(v__9698, v__31034[(v_i_31013 + (v_MWidthC_1 * v_l_id_31012))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31014 = 0; \n          v__31039[v_wg_id_31008] = doubleMultiplyAdd(v__9698, v__31019, v__31018[v_wg_id_31008], v__31020); \n        }\n        /* end map_seq */\n        v_l_id_31012 = atomic_inc(&(v_work_idx_2058)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__31015",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31016",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31017",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31018",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31019",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31020",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__31039",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31034",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}