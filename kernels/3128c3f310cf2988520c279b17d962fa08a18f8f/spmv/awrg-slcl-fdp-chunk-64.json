{
  "name" : "awrg-slcl-fdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__21191, const global float* restrict v__21192, const global float* restrict v__21193, const global float* restrict v__21194, float v__21195, float v__21196, global float* v__21210, global int* v__21198, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__21200; \n  float v__21202; \n  /* Private Memory */\n  float v__21204_0;\n  \n  float v__21206_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1141 = v__21198; \n    local int v_w_id_21187; \n    if (get_local_id(0) == 0) {\n      v_w_id_21187 = atomic_inc(v_work_idx_1141); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_21187 < ((v_MHeight_2)/(64)))){\n      for (int v_l_id_21188 = get_local_id(0); v_l_id_21188 < 64; v_l_id_21188 = (v_l_id_21188 + get_local_size(0))) {\n        float v_tmp_21251 = 0.0f; \n        v__21200 = v_tmp_21251; \n        /* reduce_seq */\n        for (int v_i_21189 = 0; v_i_21189 < v_MWidthC_1; v_i_21189 = (1 + v_i_21189)) {\n          float v_tmp_21252 = 0.0f; \n          v__21202 = v_tmp_21252; \n          int v_index_21253 = v__21191[(v_i_21189 + (64 * v_MWidthC_1 * v_w_id_21187) + (v_MWidthC_1 * v_l_id_21188))]; \n          if (v_index_21253 < 0) {\n            v__21204_0 = v__21202; \n          } else {\n            if (v_index_21253 >= v_VLength_3) {\n              v__21204_0 = v__21202; \n            } else {\n              v__21204_0 = v__21193[v_index_21253]; \n            }\n          }\n          v__21206_0 = mult(v__21204_0, v__21192[(v_i_21189 + (64 * v_MWidthC_1 * v_w_id_21187) + (v_MWidthC_1 * v_l_id_21188))]); \n          v__21200 = add(v__21206_0, v__21200); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_21190 = 0; \n          v__21210[(v_l_id_21188 + (64 * v_w_id_21187))] = doubleMultiplyAdd(v__21200, v__21195, v__21194[(v_l_id_21188 + (64 * v_w_id_21187))], v__21196); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_21187 = atomic_inc(v_work_idx_1141); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__21191",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21192",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__21193",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__21194",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__21195",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__21196",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__21198",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__21210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}