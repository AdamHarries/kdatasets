{
  "name" : "swrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26665, const global float* restrict v__26666, const global float* restrict v__26667, const global float* restrict v__26668, float v__26669, float v__26670, global float* v__26687, global float* v__26677, local float* v__26682, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26673; \n  float v__26678; \n  float v__9698; \n  /* Private Memory */\n  float v__26675_0;\n  \n  for (int v_wg_id_26657 = get_group_id(0); v_wg_id_26657 < v_MHeight_2; v_wg_id_26657 = (v_wg_id_26657 + get_num_groups(0))) {\n    for (int v_l_id_26658 = get_local_id(0); v_l_id_26658 < v_MWidthC_1; v_l_id_26658 = (v_l_id_26658 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_26659 = 0; v_i_26659 < 256; v_i_26659 = (1 + v_i_26659)) {\n        float v_tmp_26748 = 0.0f; \n        v__26673 = v_tmp_26748; \n        int v_index_26749 = v__26665[(v_l_id_26658 + (256 * v_MWidthC_1 * v_wg_id_26657) + (v_MWidthC_1 * v_i_26659))]; \n        if (v_index_26749 < 0) {\n          v__26675_0 = v__26673; \n        } else {\n          if (v_index_26749 >= v_VLength_3) {\n            v__26675_0 = v__26673; \n          } else {\n            v__26675_0 = v__26667[v_index_26749]; \n          }\n        }\n        v__26677[(255 + (256 * v_MWidthC_1 * v_wg_id_26657) + (-1 * v_i_26659) + (256 * v_l_id_26658))] = mult(v__26675_0, v__26666[(v_l_id_26658 + (256 * v_MWidthC_1 * v_wg_id_26657) + (v_MWidthC_1 * v_i_26659))]); \n      }\n      /* end map_seq */\n      float v_tmp_26750 = 0.0f; \n      v__26678 = v_tmp_26750; \n      /* reduce_seq */\n      for (int v_i_26660 = 0; v_i_26660 < 256; v_i_26660 = (1 + v_i_26660)) {\n        v__26678 = add(v__26678, v__26677[(v_i_26660 + (256 * v_MWidthC_1 * v_wg_id_26657) + (256 * v_l_id_26658))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26661 = 0; \n        v__26682[v_l_id_26658] = id(v__26678); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1650; \n      v_work_idx_1650 = 0; \n      int v_l_id_26662 = atomic_inc(&(v_work_idx_1650)); \n      while((v_l_id_26662 < 1)){\n        float v_tmp_26753 = 0.0f; \n        v__9698 = v_tmp_26753; \n        /* reduce_seq */\n        for (int v_i_26663 = 0; v_i_26663 < v_MWidthC_1; v_i_26663 = (1 + v_i_26663)) {\n          v__9698 = add(v__9698, v__26682[(v_i_26663 + (v_MWidthC_1 * v_l_id_26662))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26664 = 0; \n          v__26687[v_wg_id_26657] = doubleMultiplyAdd(v__9698, v__26669, v__26668[v_wg_id_26657], v__26670); \n        }\n        /* end map_seq */\n        v_l_id_26662 = atomic_inc(&(v_work_idx_1650)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26665",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26666",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26667",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26668",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26669",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26670",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26677",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__26687",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26682",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}