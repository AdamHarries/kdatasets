{
  "name" : "awrg-alcl-alcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19162, const global float* restrict v__19163, const global float* restrict v__19164, const global float* restrict v__19165, float v__19166, float v__19167, global float* v__19185, global float* v__19175, global int* v__19169, local float* v__19180, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19171; \n  float v__19176; \n  float v__9698; \n  /* Private Memory */\n  float v__19173_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_959 = v__19169; \n    local int v_w_id_19154; \n    if (get_local_id(0) == 0) {\n      v_w_id_19154 = atomic_inc(v_work_idx_959); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19154 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_957; \n        v_work_idx_957 = 0; \n        int v_l_id_19155 = atomic_inc(&(v_work_idx_957)); \n        while((v_l_id_19155 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_19156 = 0; v_i_19156 < 32; v_i_19156 = (1 + v_i_19156)) {\n            float v_tmp_19236 = 0.0f; \n            v__19171 = v_tmp_19236; \n            int v_index_19237 = v__19162[(v_l_id_19155 + (32 * v_MWidthC_1 * v_w_id_19154) + (v_MWidthC_1 * v_i_19156))]; \n            if (v_index_19237 < 0) {\n              v__19173_0 = v__19171; \n            } else {\n              if (v_index_19237 >= v_VLength_3) {\n                v__19173_0 = v__19171; \n              } else {\n                v__19173_0 = v__19164[v_index_19237]; \n              }\n            }\n            v__19175[(31 + (32 * v_MWidthC_1 * v_w_id_19154) + (-1 * v_i_19156) + (32 * v_l_id_19155))] = mult(v__19173_0, v__19163[(v_l_id_19155 + (32 * v_MWidthC_1 * v_w_id_19154) + (v_MWidthC_1 * v_i_19156))]); \n          }\n          /* end map_seq */\n          float v_tmp_19238 = 0.0f; \n          v__19176 = v_tmp_19238; \n          /* reduce_seq */\n          for (int v_i_19157 = 0; v_i_19157 < 32; v_i_19157 = (1 + v_i_19157)) {\n            v__19176 = add(v__19176, v__19175[(v_i_19157 + (32 * v_MWidthC_1 * v_w_id_19154) + (32 * v_l_id_19155))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19158 = 0; \n            v__19180[v_l_id_19155] = id(v__19176); \n          }\n          /* end map_seq */\n          v_l_id_19155 = atomic_inc(&(v_work_idx_957)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_951; \n        v_work_idx_951 = 0; \n        int v_l_id_19159 = atomic_inc(&(v_work_idx_951)); \n        while((v_l_id_19159 < 1)){\n          float v_tmp_19241 = 0.0f; \n          v__9698 = v_tmp_19241; \n          /* reduce_seq */\n          for (int v_i_19160 = 0; v_i_19160 < v_MWidthC_1; v_i_19160 = (1 + v_i_19160)) {\n            v__9698 = add(v__9698, v__19180[(v_i_19160 + (v_MWidthC_1 * v_l_id_19159))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19161 = 0; \n            v__19185[v_w_id_19154] = doubleMultiplyAdd(v__9698, v__19166, v__19165[v_w_id_19154], v__19167); \n          }\n          /* end map_seq */\n          v_l_id_19159 = atomic_inc(&(v_work_idx_951)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19154 = atomic_inc(v_work_idx_959); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19162",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19163",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19164",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19165",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19166",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19167",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19175",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19169",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19185",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19180",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}