{
  "name" : "swrg-alcl-alcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17593, const global float* restrict v__17594, const global float* restrict v__17595, const global float* restrict v__17596, float v__17597, float v__17598, global float* v__17615, local float* v__17610, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17601; \n  float v__17603; \n  float v__9698; \n  /* Private Memory */\n  float v__17605_0;\n  \n  float v__17607_0;\n  \n  for (int v_wg_id_17586 = get_group_id(0); v_wg_id_17586 < v_MHeight_2; v_wg_id_17586 = (v_wg_id_17586 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_805; \n      v_work_idx_805 = 0; \n      int v_l_id_17587 = atomic_inc(&(v_work_idx_805)); \n      while((v_l_id_17587 < v_MWidthC_1)){\n        float v_tmp_17668 = 0.0f; \n        v__17601 = v_tmp_17668; \n        /* reduce_seq */\n        for (int v_i_17588 = 0; v_i_17588 < 32; v_i_17588 = (1 + v_i_17588)) {\n          float v_tmp_17669 = 0.0f; \n          v__17603 = v_tmp_17669; \n          int v_index_17670 = v__17593[(v_l_id_17587 + (32 * v_MWidthC_1 * v_wg_id_17586) + (v_MWidthC_1 * v_i_17588))]; \n          if (v_index_17670 < 0) {\n            v__17605_0 = v__17603; \n          } else {\n            if (v_index_17670 >= v_VLength_3) {\n              v__17605_0 = v__17603; \n            } else {\n              v__17605_0 = v__17595[v_index_17670]; \n            }\n          }\n          v__17607_0 = mult(v__17605_0, v__17594[(v_l_id_17587 + (32 * v_MWidthC_1 * v_wg_id_17586) + (v_MWidthC_1 * v_i_17588))]); \n          v__17601 = add(v__17607_0, v__17601); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17589 = 0; \n          v__17610[v_l_id_17587] = id(v__17601); \n        }\n        /* end map_seq */\n        v_l_id_17587 = atomic_inc(&(v_work_idx_805)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_800; \n      v_work_idx_800 = 0; \n      int v_l_id_17590 = atomic_inc(&(v_work_idx_800)); \n      while((v_l_id_17590 < 1)){\n        float v_tmp_17673 = 0.0f; \n        v__9698 = v_tmp_17673; \n        /* reduce_seq */\n        for (int v_i_17591 = 0; v_i_17591 < v_MWidthC_1; v_i_17591 = (1 + v_i_17591)) {\n          v__9698 = add(v__9698, v__17610[(v_i_17591 + (v_MWidthC_1 * v_l_id_17590))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17592 = 0; \n          v__17615[v_wg_id_17586] = doubleMultiplyAdd(v__9698, v__17597, v__17596[v_wg_id_17586], v__17598); \n        }\n        /* end map_seq */\n        v_l_id_17590 = atomic_inc(&(v_work_idx_800)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17593",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17594",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17595",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17596",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17597",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17598",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17615",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17610",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}