{
  "name" : "awrg-slcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18122, const global float* restrict v__18123, const global float* restrict v__18124, const global float* restrict v__18125, float v__18126, float v__18127, global float* v__18145, global int* v__18129, local float* v__18140, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18131; \n  float v__18133; \n  float v__9698; \n  /* Private Memory */\n  float v__18135_0;\n  \n  float v__18137_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_854 = v__18129; \n    local int v_w_id_18115; \n    if (get_local_id(0) == 0) {\n      v_w_id_18115 = atomic_inc(v_work_idx_854); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18115 < v_MHeight_2)){\n      for (int v_l_id_18116 = get_local_id(0); v_l_id_18116 < v_MWidthC_1; v_l_id_18116 = (v_l_id_18116 + get_local_size(0))) {\n        float v_tmp_18208 = 0.0f; \n        v__18131 = v_tmp_18208; \n        /* reduce_seq */\n        for (int v_i_18117 = 0; v_i_18117 < 32; v_i_18117 = (1 + v_i_18117)) {\n          float v_tmp_18209 = 0.0f; \n          v__18133 = v_tmp_18209; \n          int v_index_18210 = v__18122[(v_l_id_18116 + (32 * v_MWidthC_1 * v_w_id_18115) + (v_MWidthC_1 * v_i_18117))]; \n          if (v_index_18210 < 0) {\n            v__18135_0 = v__18133; \n          } else {\n            if (v_index_18210 >= v_VLength_3) {\n              v__18135_0 = v__18133; \n            } else {\n              v__18135_0 = v__18124[v_index_18210]; \n            }\n          }\n          v__18137_0 = mult(v__18135_0, v__18123[(v_l_id_18116 + (32 * v_MWidthC_1 * v_w_id_18115) + (v_MWidthC_1 * v_i_18117))]); \n          v__18131 = add(v__18137_0, v__18131); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18118 = 0; \n          v__18140[v_l_id_18116] = id(v__18131); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18119 = get_local_id(0); \n        float v_tmp_18213 = 0.0f; \n        v__9698 = v_tmp_18213; \n        /* reduce_seq */\n        for (int v_i_18120 = 0; v_i_18120 < v_MWidthC_1; v_i_18120 = (1 + v_i_18120)) {\n          v__9698 = add(v__9698, v__18140[(v_i_18120 + (v_MWidthC_1 * v_l_id_18119))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18121 = 0; \n          v__18145[v_w_id_18115] = doubleMultiplyAdd(v__9698, v__18126, v__18125[v_w_id_18115], v__18127); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18115 = atomic_inc(v_work_idx_854); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__18122",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18123",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18124",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18125",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18126",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18127",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18129",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18145",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18140",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}