{
  "name" : "swrg-alcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__27495, const global float* restrict v__27496, const global float* restrict v__27497, const global float* restrict v__27498, float v__27499, float v__27500, global float* v__27517, global float* v__27507, local float* v__27512, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__27503; \n  float v__27508; \n  float v__9698; \n  /* Private Memory */\n  float v__27505_0;\n  \n  for (int v_wg_id_27487 = get_group_id(0); v_wg_id_27487 < v_MHeight_2; v_wg_id_27487 = (v_wg_id_27487 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1731; \n      v_work_idx_1731 = 0; \n      int v_l_id_27488 = atomic_inc(&(v_work_idx_1731)); \n      while((v_l_id_27488 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_27489 = 0; v_i_27489 < 256; v_i_27489 = (1 + v_i_27489)) {\n          float v_tmp_27570 = 0.0f; \n          v__27503 = v_tmp_27570; \n          int v_index_27571 = v__27495[(v_l_id_27488 + (256 * v_MWidthC_1 * v_wg_id_27487) + (v_MWidthC_1 * v_i_27489))]; \n          if (v_index_27571 < 0) {\n            v__27505_0 = v__27503; \n          } else {\n            if (v_index_27571 >= v_VLength_3) {\n              v__27505_0 = v__27503; \n            } else {\n              v__27505_0 = v__27497[v_index_27571]; \n            }\n          }\n          v__27507[(255 + (256 * v_MWidthC_1 * v_wg_id_27487) + (-1 * v_i_27489) + (256 * v_l_id_27488))] = mult(v__27505_0, v__27496[(v_l_id_27488 + (256 * v_MWidthC_1 * v_wg_id_27487) + (v_MWidthC_1 * v_i_27489))]); \n        }\n        /* end map_seq */\n        float v_tmp_27572 = 0.0f; \n        v__27508 = v_tmp_27572; \n        /* reduce_seq */\n        for (int v_i_27490 = 0; v_i_27490 < 256; v_i_27490 = (1 + v_i_27490)) {\n          v__27508 = add(v__27508, v__27507[(v_i_27490 + (256 * v_MWidthC_1 * v_wg_id_27487) + (256 * v_l_id_27488))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27491 = 0; \n          v__27512[v_l_id_27488] = id(v__27508); \n        }\n        /* end map_seq */\n        v_l_id_27488 = atomic_inc(&(v_work_idx_1731)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1725; \n      v_work_idx_1725 = 0; \n      int v_l_id_27492 = atomic_inc(&(v_work_idx_1725)); \n      while((v_l_id_27492 < 1)){\n        float v_tmp_27575 = 0.0f; \n        v__9698 = v_tmp_27575; \n        /* reduce_seq */\n        for (int v_i_27493 = 0; v_i_27493 < v_MWidthC_1; v_i_27493 = (1 + v_i_27493)) {\n          v__9698 = add(v__9698, v__27512[(v_i_27493 + (v_MWidthC_1 * v_l_id_27492))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_27494 = 0; \n          v__27517[v_wg_id_27487] = doubleMultiplyAdd(v__9698, v__27499, v__27498[v_wg_id_27487], v__27500); \n        }\n        /* end map_seq */\n        v_l_id_27492 = atomic_inc(&(v_work_idx_1725)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__27495",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27496",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__27497",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__27498",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__27499",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__27500",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__27507",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__27517",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__27512",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}