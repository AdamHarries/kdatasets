{
  "name" : "swrg-alcl-sdp-chunk-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10314, const global float* restrict v__10315, const global float* restrict v__10316, const global float* restrict v__10317, float v__10318, float v__10319, global float* v__10332, global float* v__10326, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10322; \n  float v__10327; \n  /* Private Memory */\n  float v__10324_0;\n  \n  for (int v_wg_id_10309 = get_group_id(0); v_wg_id_10309 < ((v_MHeight_2)/(8)); v_wg_id_10309 = (v_wg_id_10309 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_120; \n      v_work_idx_120 = 0; \n      int v_l_id_10310 = atomic_inc(&(v_work_idx_120)); \n      while((v_l_id_10310 < 8)){\n        /* map_seq */\n        for (int v_i_10311 = 0; v_i_10311 < v_MWidthC_1; v_i_10311 = (1 + v_i_10311)) {\n          float v_tmp_10372 = 0.0f; \n          v__10322 = v_tmp_10372; \n          int v_index_10373 = v__10314[(v_i_10311 + (8 * v_MWidthC_1 * v_wg_id_10309) + (v_MWidthC_1 * v_l_id_10310))]; \n          if (v_index_10373 < 0) {\n            v__10324_0 = v__10322; \n          } else {\n            if (v_index_10373 >= v_VLength_3) {\n              v__10324_0 = v__10322; \n            } else {\n              v__10324_0 = v__10316[v_index_10373]; \n            }\n          }\n          v__10326[(-1 + v_MWidthC_1 + (8 * v_MWidthC_1 * v_wg_id_10309) + (-1 * v_i_10311) + (v_MWidthC_1 * v_l_id_10310))] = mult(v__10324_0, v__10315[(v_i_10311 + (8 * v_MWidthC_1 * v_wg_id_10309) + (v_MWidthC_1 * v_l_id_10310))]); \n        }\n        /* end map_seq */\n        float v_tmp_10374 = 0.0f; \n        v__10327 = v_tmp_10374; \n        /* reduce_seq */\n        for (int v_i_10312 = 0; v_i_10312 < v_MWidthC_1; v_i_10312 = (1 + v_i_10312)) {\n          v__10327 = add(v__10327, v__10326[(v_i_10312 + (8 * v_MWidthC_1 * v_wg_id_10309) + (v_MWidthC_1 * v_l_id_10310))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10313 = 0; \n          v__10332[(v_l_id_10310 + (8 * v_wg_id_10309))] = doubleMultiplyAdd(v__10327, v__10318, v__10317[(v_l_id_10310 + (8 * v_wg_id_10309))], v__10319); \n        }\n        /* end map_seq */\n        v_l_id_10310 = atomic_inc(&(v_work_idx_120)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "8",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10314",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10315",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10316",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10317",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10318",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10319",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10326",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10332",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}