{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__32676, const global float* restrict v__32677, const global float* restrict v__32678, const global float* restrict v__32679, float v__32680, float v__32681, global float* v__32701, global int* v__32683, local float* v__32696, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32685; \n  float v__32687; \n  float v__9698; \n  /* Private Memory */\n  float v__32689_0;\n  \n  float v__32691_0;\n  \n  int v__32695_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2229 = v__32683; \n    local int v_w_id_32669; \n    if (get_local_id(0) == 0) {\n      v_w_id_32669 = atomic_inc(v_work_idx_2229); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32669 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2227; \n        v_work_idx_2227 = 0; \n        int v_l_id_32670 = atomic_inc(&(v_work_idx_2227)); \n        while((v_l_id_32670 < v_MWidthC_1)){\n          float v_tmp_32755 = 0.0f; \n          v__32685 = v_tmp_32755; \n          /* reduce_while_seq */\n          for (int v_i_32671 = 0; v_i_32671 < 512; v_i_32671 = (1 + v_i_32671)) {\n            v__32695_0 = check(v__32685, v__32676[(v_l_id_32670 + (512 * v_MWidthC_1 * v_w_id_32669) + (v_MWidthC_1 * v_i_32671))]); \n            if (v__32695_0) {\n            } else {\n              break;\n            }\n            float v_tmp_32756 = 0.0f; \n            v__32687 = v_tmp_32756; \n            int v_index_32757 = v__32676[(v_l_id_32670 + (512 * v_MWidthC_1 * v_w_id_32669) + (v_MWidthC_1 * v_i_32671))]; \n            if (v_index_32757 < 0) {\n              v__32689_0 = v__32687; \n            } else {\n              if (v_index_32757 >= v_VLength_3) {\n                v__32689_0 = v__32687; \n              } else {\n                v__32689_0 = v__32678[v_index_32757]; \n              }\n            }\n            v__32691_0 = mult(v__32689_0, v__32677[(v_l_id_32670 + (512 * v_MWidthC_1 * v_w_id_32669) + (v_MWidthC_1 * v_i_32671))]); \n            v__32685 = add(v__32691_0, v__32685); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32672 = 0; \n            v__32696[v_l_id_32670] = id(v__32685); \n          }\n          /* end map_seq */\n          v_l_id_32670 = atomic_inc(&(v_work_idx_2227)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2222; \n        v_work_idx_2222 = 0; \n        int v_l_id_32673 = atomic_inc(&(v_work_idx_2222)); \n        while((v_l_id_32673 < 1)){\n          float v_tmp_32760 = 0.0f; \n          v__9698 = v_tmp_32760; \n          /* reduce_seq */\n          for (int v_i_32674 = 0; v_i_32674 < v_MWidthC_1; v_i_32674 = (1 + v_i_32674)) {\n            v__9698 = add(v__9698, v__32696[(v_i_32674 + (v_MWidthC_1 * v_l_id_32673))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32675 = 0; \n            v__32701[v_w_id_32669] = doubleMultiplyAdd(v__9698, v__32680, v__32679[v_w_id_32669], v__32681); \n          }\n          /* end map_seq */\n          v_l_id_32673 = atomic_inc(&(v_work_idx_2222)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32669 = atomic_inc(v_work_idx_2229); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__32676",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32677",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32678",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32679",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32680",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32681",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32683",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32701",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32696",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}