{
  "name" : "awrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__15830, const global float* restrict v__15831, const global float* restrict v__15832, const global float* restrict v__15833, float v__15834, float v__15835, global float* v__15853, global float* v__15843, global int* v__15837, local float* v__15848, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__15839; \n  float v__15844; \n  float v__9698; \n  /* Private Memory */\n  float v__15841_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_647 = v__15837; \n    local int v_w_id_15822; \n    if (get_local_id(0) == 0) {\n      v_w_id_15822 = atomic_inc(v_work_idx_647); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_15822 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_645; \n        v_work_idx_645 = 0; \n        int v_l_id_15823 = atomic_inc(&(v_work_idx_645)); \n        while((v_l_id_15823 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_15824 = 0; v_i_15824 < 16; v_i_15824 = (1 + v_i_15824)) {\n            float v_tmp_15904 = 0.0f; \n            v__15839 = v_tmp_15904; \n            int v_index_15905 = v__15830[(v_l_id_15823 + (16 * v_MWidthC_1 * v_w_id_15822) + (v_MWidthC_1 * v_i_15824))]; \n            if (v_index_15905 < 0) {\n              v__15841_0 = v__15839; \n            } else {\n              if (v_index_15905 >= v_VLength_3) {\n                v__15841_0 = v__15839; \n              } else {\n                v__15841_0 = v__15832[v_index_15905]; \n              }\n            }\n            v__15843[(15 + (16 * v_MWidthC_1 * v_w_id_15822) + (-1 * v_i_15824) + (16 * v_l_id_15823))] = mult(v__15841_0, v__15831[(v_l_id_15823 + (16 * v_MWidthC_1 * v_w_id_15822) + (v_MWidthC_1 * v_i_15824))]); \n          }\n          /* end map_seq */\n          float v_tmp_15906 = 0.0f; \n          v__15844 = v_tmp_15906; \n          /* reduce_seq */\n          for (int v_i_15825 = 0; v_i_15825 < 16; v_i_15825 = (1 + v_i_15825)) {\n            v__15844 = add(v__15844, v__15843[(v_i_15825 + (16 * v_MWidthC_1 * v_w_id_15822) + (16 * v_l_id_15823))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15826 = 0; \n            v__15848[v_l_id_15823] = id(v__15844); \n          }\n          /* end map_seq */\n          v_l_id_15823 = atomic_inc(&(v_work_idx_645)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_639; \n        v_work_idx_639 = 0; \n        int v_l_id_15827 = atomic_inc(&(v_work_idx_639)); \n        while((v_l_id_15827 < 1)){\n          float v_tmp_15909 = 0.0f; \n          v__9698 = v_tmp_15909; \n          /* reduce_seq */\n          for (int v_i_15828 = 0; v_i_15828 < v_MWidthC_1; v_i_15828 = (1 + v_i_15828)) {\n            v__9698 = add(v__9698, v__15848[(v_i_15828 + (v_MWidthC_1 * v_l_id_15827))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_15829 = 0; \n            v__15853[v_w_id_15822] = doubleMultiplyAdd(v__9698, v__15834, v__15833[v_w_id_15822], v__15835); \n          }\n          /* end map_seq */\n          v_l_id_15827 = atomic_inc(&(v_work_idx_639)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_15822 = atomic_inc(v_work_idx_647); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__15830",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15831",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15832",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__15833",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__15834",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__15835",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__15843",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__15837",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__15853",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__15848",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}