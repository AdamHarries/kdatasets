{
  "name" : "awrg-alcl-slcl-fdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18962, const global float* restrict v__18963, const global float* restrict v__18964, const global float* restrict v__18965, float v__18966, float v__18967, global float* v__18985, global int* v__18969, local float* v__18980, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18971; \n  float v__18973; \n  float v__9698; \n  /* Private Memory */\n  float v__18975_0;\n  \n  float v__18977_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_937 = v__18969; \n    local int v_w_id_18955; \n    if (get_local_id(0) == 0) {\n      v_w_id_18955 = atomic_inc(v_work_idx_937); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18955 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_935; \n        v_work_idx_935 = 0; \n        int v_l_id_18956 = atomic_inc(&(v_work_idx_935)); \n        while((v_l_id_18956 < v_MWidthC_1)){\n          float v_tmp_19040 = 0.0f; \n          v__18971 = v_tmp_19040; \n          /* reduce_seq */\n          for (int v_i_18957 = 0; v_i_18957 < 32; v_i_18957 = (1 + v_i_18957)) {\n            float v_tmp_19041 = 0.0f; \n            v__18973 = v_tmp_19041; \n            int v_index_19042 = v__18962[(v_l_id_18956 + (32 * v_MWidthC_1 * v_w_id_18955) + (v_MWidthC_1 * v_i_18957))]; \n            if (v_index_19042 < 0) {\n              v__18975_0 = v__18973; \n            } else {\n              if (v_index_19042 >= v_VLength_3) {\n                v__18975_0 = v__18973; \n              } else {\n                v__18975_0 = v__18964[v_index_19042]; \n              }\n            }\n            v__18977_0 = mult(v__18975_0, v__18963[(v_l_id_18956 + (32 * v_MWidthC_1 * v_w_id_18955) + (v_MWidthC_1 * v_i_18957))]); \n            v__18971 = add(v__18977_0, v__18971); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18958 = 0; \n            v__18980[v_l_id_18956] = id(v__18971); \n          }\n          /* end map_seq */\n          v_l_id_18956 = atomic_inc(&(v_work_idx_935)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_18959 = get_local_id(0); \n        float v_tmp_19045 = 0.0f; \n        v__9698 = v_tmp_19045; \n        /* reduce_seq */\n        for (int v_i_18960 = 0; v_i_18960 < v_MWidthC_1; v_i_18960 = (1 + v_i_18960)) {\n          v__9698 = add(v__9698, v__18980[(v_i_18960 + (v_MWidthC_1 * v_l_id_18959))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_18961 = 0; \n          v__18985[v_w_id_18955] = doubleMultiplyAdd(v__9698, v__18966, v__18965[v_w_id_18955], v__18967); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18955 = atomic_inc(v_work_idx_937); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__18962",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18963",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18964",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18965",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18966",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18967",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18969",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18985",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18980",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}