{
  "name" : "swrg-slcl-slcl-sdp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16345, const global float* restrict v__16346, const global float* restrict v__16347, const global float* restrict v__16348, float v__16349, float v__16350, global float* v__16367, global float* v__16357, local float* v__16362, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16353; \n  float v__16358; \n  float v__9698; \n  /* Private Memory */\n  float v__16355_0;\n  \n  for (int v_wg_id_16337 = get_group_id(0); v_wg_id_16337 < v_MHeight_2; v_wg_id_16337 = (v_wg_id_16337 + get_num_groups(0))) {\n    for (int v_l_id_16338 = get_local_id(0); v_l_id_16338 < v_MWidthC_1; v_l_id_16338 = (v_l_id_16338 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_16339 = 0; v_i_16339 < 32; v_i_16339 = (1 + v_i_16339)) {\n        float v_tmp_16432 = 0.0f; \n        v__16353 = v_tmp_16432; \n        int v_index_16433 = v__16345[(v_l_id_16338 + (32 * v_MWidthC_1 * v_wg_id_16337) + (v_MWidthC_1 * v_i_16339))]; \n        if (v_index_16433 < 0) {\n          v__16355_0 = v__16353; \n        } else {\n          if (v_index_16433 >= v_VLength_3) {\n            v__16355_0 = v__16353; \n          } else {\n            v__16355_0 = v__16347[v_index_16433]; \n          }\n        }\n        v__16357[(31 + (32 * v_MWidthC_1 * v_wg_id_16337) + (-1 * v_i_16339) + (32 * v_l_id_16338))] = mult(v__16355_0, v__16346[(v_l_id_16338 + (32 * v_MWidthC_1 * v_wg_id_16337) + (v_MWidthC_1 * v_i_16339))]); \n      }\n      /* end map_seq */\n      float v_tmp_16434 = 0.0f; \n      v__16358 = v_tmp_16434; \n      /* reduce_seq */\n      for (int v_i_16340 = 0; v_i_16340 < 32; v_i_16340 = (1 + v_i_16340)) {\n        v__16358 = add(v__16358, v__16357[(v_i_16340 + (32 * v_MWidthC_1 * v_wg_id_16337) + (32 * v_l_id_16338))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16341 = 0; \n        v__16362[v_l_id_16338] = id(v__16358); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_16342 = get_local_id(0); \n      float v_tmp_16437 = 0.0f; \n      v__9698 = v_tmp_16437; \n      /* reduce_seq */\n      for (int v_i_16343 = 0; v_i_16343 < v_MWidthC_1; v_i_16343 = (1 + v_i_16343)) {\n        v__9698 = add(v__9698, v__16362[(v_i_16343 + (v_MWidthC_1 * v_l_id_16342))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_16344 = 0; \n        v__16367[v_wg_id_16337] = doubleMultiplyAdd(v__9698, v__16349, v__16348[v_wg_id_16337], v__16350); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16345",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16346",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16347",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16349",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16350",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16357",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16367",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__16362",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}