{
  "name" : "awrg-alcl-slcl-sdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22197, const global float* restrict v__22198, const global float* restrict v__22199, const global float* restrict v__22200, float v__22201, float v__22202, global float* v__22220, global float* v__22210, global int* v__22204, local float* v__22215, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22206; \n  float v__22211; \n  float v__9698; \n  /* Private Memory */\n  float v__22208_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1239 = v__22204; \n    local int v_w_id_22189; \n    if (get_local_id(0) == 0) {\n      v_w_id_22189 = atomic_inc(v_work_idx_1239); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22189 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1237; \n        v_work_idx_1237 = 0; \n        int v_l_id_22190 = atomic_inc(&(v_work_idx_1237)); \n        while((v_l_id_22190 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_22191 = 0; v_i_22191 < 64; v_i_22191 = (1 + v_i_22191)) {\n            float v_tmp_22275 = 0.0f; \n            v__22206 = v_tmp_22275; \n            int v_index_22276 = v__22197[(v_l_id_22190 + (64 * v_MWidthC_1 * v_w_id_22189) + (v_MWidthC_1 * v_i_22191))]; \n            if (v_index_22276 < 0) {\n              v__22208_0 = v__22206; \n            } else {\n              if (v_index_22276 >= v_VLength_3) {\n                v__22208_0 = v__22206; \n              } else {\n                v__22208_0 = v__22199[v_index_22276]; \n              }\n            }\n            v__22210[(63 + (64 * v_MWidthC_1 * v_w_id_22189) + (-1 * v_i_22191) + (64 * v_l_id_22190))] = mult(v__22208_0, v__22198[(v_l_id_22190 + (64 * v_MWidthC_1 * v_w_id_22189) + (v_MWidthC_1 * v_i_22191))]); \n          }\n          /* end map_seq */\n          float v_tmp_22277 = 0.0f; \n          v__22211 = v_tmp_22277; \n          /* reduce_seq */\n          for (int v_i_22192 = 0; v_i_22192 < 64; v_i_22192 = (1 + v_i_22192)) {\n            v__22211 = add(v__22211, v__22210[(v_i_22192 + (64 * v_MWidthC_1 * v_w_id_22189) + (64 * v_l_id_22190))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22193 = 0; \n            v__22215[v_l_id_22190] = id(v__22211); \n          }\n          /* end map_seq */\n          v_l_id_22190 = atomic_inc(&(v_work_idx_1237)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_22194 = get_local_id(0); \n        float v_tmp_22280 = 0.0f; \n        v__9698 = v_tmp_22280; \n        /* reduce_seq */\n        for (int v_i_22195 = 0; v_i_22195 < v_MWidthC_1; v_i_22195 = (1 + v_i_22195)) {\n          v__9698 = add(v__9698, v__22215[(v_i_22195 + (v_MWidthC_1 * v_l_id_22194))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_22196 = 0; \n          v__22220[v_w_id_22189] = doubleMultiplyAdd(v__9698, v__22201, v__22200[v_w_id_22189], v__22202); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22189 = atomic_inc(v_work_idx_1239); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__22197",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22198",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22199",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22200",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22201",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22202",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22210",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22204",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22220",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22215",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}