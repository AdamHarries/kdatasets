{
  "name" : "swrg-alcl-fdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__17049, const global float* restrict v__17050, const global float* restrict v__17051, const global float* restrict v__17052, float v__17053, float v__17054, global float* v__17067, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17057; \n  float v__17059; \n  /* Private Memory */\n  float v__17061_0;\n  \n  float v__17063_0;\n  \n  for (int v_wg_id_17045 = get_group_id(0); v_wg_id_17045 < ((v_MHeight_2)/(32)); v_wg_id_17045 = (v_wg_id_17045 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_750; \n      v_work_idx_750 = 0; \n      int v_l_id_17046 = atomic_inc(&(v_work_idx_750)); \n      while((v_l_id_17046 < 32)){\n        float v_tmp_17105 = 0.0f; \n        v__17057 = v_tmp_17105; \n        /* reduce_seq */\n        for (int v_i_17047 = 0; v_i_17047 < v_MWidthC_1; v_i_17047 = (1 + v_i_17047)) {\n          float v_tmp_17106 = 0.0f; \n          v__17059 = v_tmp_17106; \n          int v_index_17107 = v__17049[(v_i_17047 + (32 * v_MWidthC_1 * v_wg_id_17045) + (v_MWidthC_1 * v_l_id_17046))]; \n          if (v_index_17107 < 0) {\n            v__17061_0 = v__17059; \n          } else {\n            if (v_index_17107 >= v_VLength_3) {\n              v__17061_0 = v__17059; \n            } else {\n              v__17061_0 = v__17051[v_index_17107]; \n            }\n          }\n          v__17063_0 = mult(v__17061_0, v__17050[(v_i_17047 + (32 * v_MWidthC_1 * v_wg_id_17045) + (v_MWidthC_1 * v_l_id_17046))]); \n          v__17057 = add(v__17063_0, v__17057); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17048 = 0; \n          v__17067[(v_l_id_17046 + (32 * v_wg_id_17045))] = doubleMultiplyAdd(v__17057, v__17053, v__17052[(v_l_id_17046 + (32 * v_wg_id_17045))], v__17054); \n        }\n        /* end map_seq */\n        v_l_id_17046 = atomic_inc(&(v_work_idx_750)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__17049",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17050",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17051",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17052",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17053",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17054",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17067",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}