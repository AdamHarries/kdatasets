{
  "name" : "awrg-alcl-edp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18784, const global float* restrict v__18785, const global float* restrict v__18786, const global float* restrict v__18787, float v__18788, float v__18789, global float* v__18805, global int* v__18791, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18792; \n  float v__18795; \n  /* Private Memory */\n  float v__18797_0;\n  \n  float v__18799_0;\n  \n  int v__18803_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_916 = v__18791; \n    local int v_w_id_18780; \n    if (get_local_id(0) == 0) {\n      v_w_id_18780 = atomic_inc(v_work_idx_916); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18780 < ((v_MHeight_2)/(32)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_914; \n        v_work_idx_914 = 0; \n        int v_l_id_18781 = atomic_inc(&(v_work_idx_914)); \n        while((v_l_id_18781 < 32)){\n          float v_tmp_18848 = 0.0f; \n          v__18792 = v_tmp_18848; \n          /* reduce_while_seq */\n          for (int v_i_18782 = 0; v_i_18782 < v_MWidthC_1; v_i_18782 = (1 + v_i_18782)) {\n            v__18803_0 = check(v__18792, v__18784[(v_i_18782 + (32 * v_MWidthC_1 * v_w_id_18780) + (v_MWidthC_1 * v_l_id_18781))]); \n            if (v__18803_0) {\n            } else {\n              break;\n            }\n            float v_tmp_18849 = 0.0f; \n            v__18795 = v_tmp_18849; \n            int v_index_18850 = v__18784[(v_i_18782 + (32 * v_MWidthC_1 * v_w_id_18780) + (v_MWidthC_1 * v_l_id_18781))]; \n            if (v_index_18850 < 0) {\n              v__18797_0 = v__18795; \n            } else {\n              if (v_index_18850 >= v_VLength_3) {\n                v__18797_0 = v__18795; \n              } else {\n                v__18797_0 = v__18786[v_index_18850]; \n              }\n            }\n            v__18799_0 = mult(v__18797_0, v__18785[(v_i_18782 + (32 * v_MWidthC_1 * v_w_id_18780) + (v_MWidthC_1 * v_l_id_18781))]); \n            v__18792 = add(v__18799_0, v__18792); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18783 = 0; \n            v__18805[(v_l_id_18781 + (32 * v_w_id_18780))] = doubleMultiplyAdd(v__18792, v__18788, v__18787[(v_l_id_18781 + (32 * v_w_id_18780))], v__18789); \n          }\n          /* end map_seq */\n          v_l_id_18781 = atomic_inc(&(v_work_idx_914)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18780 = atomic_inc(v_work_idx_916); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__18784",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18785",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18786",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18787",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18788",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18789",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18791",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18805",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}