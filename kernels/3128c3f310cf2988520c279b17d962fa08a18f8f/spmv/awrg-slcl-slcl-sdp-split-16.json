{
  "name" : "awrg-slcl-slcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14685, const global float* restrict v__14686, const global float* restrict v__14687, const global float* restrict v__14688, float v__14689, float v__14690, global float* v__14708, global float* v__14698, global int* v__14692, local float* v__14703, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14694; \n  float v__14699; \n  float v__9698; \n  /* Private Memory */\n  float v__14696_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_533 = v__14692; \n    local int v_w_id_14677; \n    if (get_local_id(0) == 0) {\n      v_w_id_14677 = atomic_inc(v_work_idx_533); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_14677 < v_MHeight_2)){\n      for (int v_l_id_14678 = get_local_id(0); v_l_id_14678 < v_MWidthC_1; v_l_id_14678 = (v_l_id_14678 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_14679 = 0; v_i_14679 < 16; v_i_14679 = (1 + v_i_14679)) {\n          float v_tmp_14771 = 0.0f; \n          v__14694 = v_tmp_14771; \n          int v_index_14772 = v__14685[(v_l_id_14678 + (16 * v_MWidthC_1 * v_w_id_14677) + (v_MWidthC_1 * v_i_14679))]; \n          if (v_index_14772 < 0) {\n            v__14696_0 = v__14694; \n          } else {\n            if (v_index_14772 >= v_VLength_3) {\n              v__14696_0 = v__14694; \n            } else {\n              v__14696_0 = v__14687[v_index_14772]; \n            }\n          }\n          v__14698[(15 + (16 * v_MWidthC_1 * v_w_id_14677) + (-1 * v_i_14679) + (16 * v_l_id_14678))] = mult(v__14696_0, v__14686[(v_l_id_14678 + (16 * v_MWidthC_1 * v_w_id_14677) + (v_MWidthC_1 * v_i_14679))]); \n        }\n        /* end map_seq */\n        float v_tmp_14773 = 0.0f; \n        v__14699 = v_tmp_14773; \n        /* reduce_seq */\n        for (int v_i_14680 = 0; v_i_14680 < 16; v_i_14680 = (1 + v_i_14680)) {\n          v__14699 = add(v__14699, v__14698[(v_i_14680 + (16 * v_MWidthC_1 * v_w_id_14677) + (16 * v_l_id_14678))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14681 = 0; \n          v__14703[v_l_id_14678] = id(v__14699); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_14682 = get_local_id(0); \n        float v_tmp_14776 = 0.0f; \n        v__9698 = v_tmp_14776; \n        /* reduce_seq */\n        for (int v_i_14683 = 0; v_i_14683 < v_MWidthC_1; v_i_14683 = (1 + v_i_14683)) {\n          v__9698 = add(v__9698, v__14703[(v_i_14683 + (v_MWidthC_1 * v_l_id_14682))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14684 = 0; \n          v__14708[v_w_id_14677] = doubleMultiplyAdd(v__9698, v__14689, v__14688[v_w_id_14677], v__14690); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_14677 = atomic_inc(v_work_idx_533); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14685",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14686",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14687",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14688",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14689",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14690",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14698",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14692",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__14708",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14703",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}