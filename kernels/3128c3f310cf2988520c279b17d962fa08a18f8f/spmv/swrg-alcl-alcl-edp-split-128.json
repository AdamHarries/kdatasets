{
  "name" : "swrg-alcl-alcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__24351, const global float* restrict v__24352, const global float* restrict v__24353, const global float* restrict v__24354, float v__24355, float v__24356, global float* v__24375, local float* v__24370, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24359; \n  float v__24361; \n  float v__9698; \n  /* Private Memory */\n  float v__24363_0;\n  \n  float v__24365_0;\n  \n  int v__24369_0;\n  \n  for (int v_wg_id_24344 = get_group_id(0); v_wg_id_24344 < v_MHeight_2; v_wg_id_24344 = (v_wg_id_24344 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1439; \n      v_work_idx_1439 = 0; \n      int v_l_id_24345 = atomic_inc(&(v_work_idx_1439)); \n      while((v_l_id_24345 < v_MWidthC_1)){\n        float v_tmp_24431 = 0.0f; \n        v__24359 = v_tmp_24431; \n        /* reduce_while_seq */\n        for (int v_i_24346 = 0; v_i_24346 < 128; v_i_24346 = (1 + v_i_24346)) {\n          v__24369_0 = check(v__24359, v__24351[(v_l_id_24345 + (128 * v_MWidthC_1 * v_wg_id_24344) + (v_MWidthC_1 * v_i_24346))]); \n          if (v__24369_0) {\n          } else {\n            break;\n          }\n          float v_tmp_24432 = 0.0f; \n          v__24361 = v_tmp_24432; \n          int v_index_24433 = v__24351[(v_l_id_24345 + (128 * v_MWidthC_1 * v_wg_id_24344) + (v_MWidthC_1 * v_i_24346))]; \n          if (v_index_24433 < 0) {\n            v__24363_0 = v__24361; \n          } else {\n            if (v_index_24433 >= v_VLength_3) {\n              v__24363_0 = v__24361; \n            } else {\n              v__24363_0 = v__24353[v_index_24433]; \n            }\n          }\n          v__24365_0 = mult(v__24363_0, v__24352[(v_l_id_24345 + (128 * v_MWidthC_1 * v_wg_id_24344) + (v_MWidthC_1 * v_i_24346))]); \n          v__24359 = add(v__24365_0, v__24359); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24347 = 0; \n          v__24370[v_l_id_24345] = id(v__24359); \n        }\n        /* end map_seq */\n        v_l_id_24345 = atomic_inc(&(v_work_idx_1439)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1434; \n      v_work_idx_1434 = 0; \n      int v_l_id_24348 = atomic_inc(&(v_work_idx_1434)); \n      while((v_l_id_24348 < 1)){\n        float v_tmp_24436 = 0.0f; \n        v__9698 = v_tmp_24436; \n        /* reduce_seq */\n        for (int v_i_24349 = 0; v_i_24349 < v_MWidthC_1; v_i_24349 = (1 + v_i_24349)) {\n          v__9698 = add(v__9698, v__24370[(v_i_24349 + (v_MWidthC_1 * v_l_id_24348))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24350 = 0; \n          v__24375[v_wg_id_24344] = doubleMultiplyAdd(v__9698, v__24355, v__24354[v_wg_id_24344], v__24356); \n        }\n        /* end map_seq */\n        v_l_id_24348 = atomic_inc(&(v_work_idx_1434)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__24351",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24352",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24353",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24354",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24355",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24356",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__24375",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24370",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}