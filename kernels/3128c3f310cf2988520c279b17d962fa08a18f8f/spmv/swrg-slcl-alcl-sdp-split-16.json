{
  "name" : "swrg-slcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13337, const global float* restrict v__13338, const global float* restrict v__13339, const global float* restrict v__13340, float v__13341, float v__13342, global float* v__13359, global float* v__13349, local float* v__13354, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13345; \n  float v__13350; \n  float v__9698; \n  /* Private Memory */\n  float v__13347_0;\n  \n  for (int v_wg_id_13329 = get_group_id(0); v_wg_id_13329 < v_MHeight_2; v_wg_id_13329 = (v_wg_id_13329 + get_num_groups(0))) {\n    for (int v_l_id_13330 = get_local_id(0); v_l_id_13330 < v_MWidthC_1; v_l_id_13330 = (v_l_id_13330 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_13331 = 0; v_i_13331 < 16; v_i_13331 = (1 + v_i_13331)) {\n        float v_tmp_13420 = 0.0f; \n        v__13345 = v_tmp_13420; \n        int v_index_13421 = v__13337[(v_l_id_13330 + (16 * v_MWidthC_1 * v_wg_id_13329) + (v_MWidthC_1 * v_i_13331))]; \n        if (v_index_13421 < 0) {\n          v__13347_0 = v__13345; \n        } else {\n          if (v_index_13421 >= v_VLength_3) {\n            v__13347_0 = v__13345; \n          } else {\n            v__13347_0 = v__13339[v_index_13421]; \n          }\n        }\n        v__13349[(15 + (16 * v_MWidthC_1 * v_wg_id_13329) + (-1 * v_i_13331) + (16 * v_l_id_13330))] = mult(v__13347_0, v__13338[(v_l_id_13330 + (16 * v_MWidthC_1 * v_wg_id_13329) + (v_MWidthC_1 * v_i_13331))]); \n      }\n      /* end map_seq */\n      float v_tmp_13422 = 0.0f; \n      v__13350 = v_tmp_13422; \n      /* reduce_seq */\n      for (int v_i_13332 = 0; v_i_13332 < 16; v_i_13332 = (1 + v_i_13332)) {\n        v__13350 = add(v__13350, v__13349[(v_i_13332 + (16 * v_MWidthC_1 * v_wg_id_13329) + (16 * v_l_id_13330))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13333 = 0; \n        v__13354[v_l_id_13330] = id(v__13350); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_402; \n      v_work_idx_402 = 0; \n      int v_l_id_13334 = atomic_inc(&(v_work_idx_402)); \n      while((v_l_id_13334 < 1)){\n        float v_tmp_13425 = 0.0f; \n        v__9698 = v_tmp_13425; \n        /* reduce_seq */\n        for (int v_i_13335 = 0; v_i_13335 < v_MWidthC_1; v_i_13335 = (1 + v_i_13335)) {\n          v__9698 = add(v__9698, v__13354[(v_i_13335 + (v_MWidthC_1 * v_l_id_13334))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13336 = 0; \n          v__13359[v_wg_id_13329] = doubleMultiplyAdd(v__9698, v__13341, v__13340[v_wg_id_13329], v__13342); \n        }\n        /* end map_seq */\n        v_l_id_13334 = atomic_inc(&(v_work_idx_402)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__13337",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13338",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13339",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13340",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13341",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13342",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__13349",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__13359",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13354",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}