{
  "name" : "swrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__17687, const global float* restrict v__17688, const global float* restrict v__17689, const global float* restrict v__17690, float v__17691, float v__17692, global float* v__17711, local float* v__17706, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__17695; \n  float v__17697; \n  float v__9698; \n  /* Private Memory */\n  float v__17699_0;\n  \n  float v__17701_0;\n  \n  int v__17705_0;\n  \n  for (int v_wg_id_17680 = get_group_id(0); v_wg_id_17680 < v_MHeight_2; v_wg_id_17680 = (v_wg_id_17680 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_815; \n      v_work_idx_815 = 0; \n      int v_l_id_17681 = atomic_inc(&(v_work_idx_815)); \n      while((v_l_id_17681 < v_MWidthC_1)){\n        float v_tmp_17767 = 0.0f; \n        v__17695 = v_tmp_17767; \n        /* reduce_while_seq */\n        for (int v_i_17682 = 0; v_i_17682 < 32; v_i_17682 = (1 + v_i_17682)) {\n          v__17705_0 = check(v__17695, v__17687[(v_l_id_17681 + (32 * v_MWidthC_1 * v_wg_id_17680) + (v_MWidthC_1 * v_i_17682))]); \n          if (v__17705_0) {\n          } else {\n            break;\n          }\n          float v_tmp_17768 = 0.0f; \n          v__17697 = v_tmp_17768; \n          int v_index_17769 = v__17687[(v_l_id_17681 + (32 * v_MWidthC_1 * v_wg_id_17680) + (v_MWidthC_1 * v_i_17682))]; \n          if (v_index_17769 < 0) {\n            v__17699_0 = v__17697; \n          } else {\n            if (v_index_17769 >= v_VLength_3) {\n              v__17699_0 = v__17697; \n            } else {\n              v__17699_0 = v__17689[v_index_17769]; \n            }\n          }\n          v__17701_0 = mult(v__17699_0, v__17688[(v_l_id_17681 + (32 * v_MWidthC_1 * v_wg_id_17680) + (v_MWidthC_1 * v_i_17682))]); \n          v__17695 = add(v__17701_0, v__17695); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17683 = 0; \n          v__17706[v_l_id_17681] = id(v__17695); \n        }\n        /* end map_seq */\n        v_l_id_17681 = atomic_inc(&(v_work_idx_815)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_810; \n      v_work_idx_810 = 0; \n      int v_l_id_17684 = atomic_inc(&(v_work_idx_810)); \n      while((v_l_id_17684 < 1)){\n        float v_tmp_17772 = 0.0f; \n        v__9698 = v_tmp_17772; \n        /* reduce_seq */\n        for (int v_i_17685 = 0; v_i_17685 < v_MWidthC_1; v_i_17685 = (1 + v_i_17685)) {\n          v__9698 = add(v__9698, v__17706[(v_i_17685 + (v_MWidthC_1 * v_l_id_17684))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_17686 = 0; \n          v__17711[v_wg_id_17680] = doubleMultiplyAdd(v__9698, v__17691, v__17690[v_wg_id_17680], v__17692); \n        }\n        /* end map_seq */\n        v_l_id_17684 = atomic_inc(&(v_work_idx_810)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__17687",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17688",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__17689",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__17690",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__17691",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__17692",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__17711",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__17706",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}