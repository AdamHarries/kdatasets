{
  "name" : "swrg-slcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__30201, const global float* restrict v__30202, const global float* restrict v__30203, const global float* restrict v__30204, float v__30205, float v__30206, global float* v__30225, local float* v__30220, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30209; \n  float v__30211; \n  float v__9698; \n  /* Private Memory */\n  float v__30213_0;\n  \n  float v__30215_0;\n  \n  int v__30219_0;\n  \n  for (int v_wg_id_30194 = get_group_id(0); v_wg_id_30194 < v_MHeight_2; v_wg_id_30194 = (v_wg_id_30194 + get_num_groups(0))) {\n    for (int v_l_id_30195 = get_local_id(0); v_l_id_30195 < v_MWidthC_1; v_l_id_30195 = (v_l_id_30195 + get_local_size(0))) {\n      float v_tmp_30289 = 0.0f; \n      v__30209 = v_tmp_30289; \n      /* reduce_while_seq */\n      for (int v_i_30196 = 0; v_i_30196 < 512; v_i_30196 = (1 + v_i_30196)) {\n        v__30219_0 = check(v__30209, v__30201[(v_l_id_30195 + (512 * v_MWidthC_1 * v_wg_id_30194) + (v_MWidthC_1 * v_i_30196))]); \n        if (v__30219_0) {\n        } else {\n          break;\n        }\n        float v_tmp_30290 = 0.0f; \n        v__30211 = v_tmp_30290; \n        int v_index_30291 = v__30201[(v_l_id_30195 + (512 * v_MWidthC_1 * v_wg_id_30194) + (v_MWidthC_1 * v_i_30196))]; \n        if (v_index_30291 < 0) {\n          v__30213_0 = v__30211; \n        } else {\n          if (v_index_30291 >= v_VLength_3) {\n            v__30213_0 = v__30211; \n          } else {\n            v__30213_0 = v__30203[v_index_30291]; \n          }\n        }\n        v__30215_0 = mult(v__30213_0, v__30202[(v_l_id_30195 + (512 * v_MWidthC_1 * v_wg_id_30194) + (v_MWidthC_1 * v_i_30196))]); \n        v__30209 = add(v__30215_0, v__30209); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_30197 = 0; \n        v__30220[v_l_id_30195] = id(v__30209); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1981; \n      v_work_idx_1981 = 0; \n      int v_l_id_30198 = atomic_inc(&(v_work_idx_1981)); \n      while((v_l_id_30198 < 1)){\n        float v_tmp_30294 = 0.0f; \n        v__9698 = v_tmp_30294; \n        /* reduce_seq */\n        for (int v_i_30199 = 0; v_i_30199 < v_MWidthC_1; v_i_30199 = (1 + v_i_30199)) {\n          v__9698 = add(v__9698, v__30220[(v_i_30199 + (v_MWidthC_1 * v_l_id_30198))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30200 = 0; \n          v__30225[v_wg_id_30194] = doubleMultiplyAdd(v__9698, v__30205, v__30204[v_wg_id_30194], v__30206); \n        }\n        /* end map_seq */\n        v_l_id_30198 = atomic_inc(&(v_work_idx_1981)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__30201",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30202",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30203",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30204",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30205",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30206",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30225",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30220",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}