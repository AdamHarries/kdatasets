{
  "name" : "swrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30827, const global float* restrict v__30828, const global float* restrict v__30829, const global float* restrict v__30830, float v__30831, float v__30832, global float* v__30849, global float* v__30839, local float* v__30844, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30835; \n  float v__30840; \n  float v__9698; \n  /* Private Memory */\n  float v__30837_0;\n  \n  for (int v_wg_id_30819 = get_group_id(0); v_wg_id_30819 < v_MHeight_2; v_wg_id_30819 = (v_wg_id_30819 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2043; \n      v_work_idx_2043 = 0; \n      int v_l_id_30820 = atomic_inc(&(v_work_idx_2043)); \n      while((v_l_id_30820 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_30821 = 0; v_i_30821 < 512; v_i_30821 = (1 + v_i_30821)) {\n          float v_tmp_30902 = 0.0f; \n          v__30835 = v_tmp_30902; \n          int v_index_30903 = v__30827[(v_l_id_30820 + (512 * v_MWidthC_1 * v_wg_id_30819) + (v_MWidthC_1 * v_i_30821))]; \n          if (v_index_30903 < 0) {\n            v__30837_0 = v__30835; \n          } else {\n            if (v_index_30903 >= v_VLength_3) {\n              v__30837_0 = v__30835; \n            } else {\n              v__30837_0 = v__30829[v_index_30903]; \n            }\n          }\n          v__30839[(511 + (512 * v_MWidthC_1 * v_wg_id_30819) + (-1 * v_i_30821) + (512 * v_l_id_30820))] = mult(v__30837_0, v__30828[(v_l_id_30820 + (512 * v_MWidthC_1 * v_wg_id_30819) + (v_MWidthC_1 * v_i_30821))]); \n        }\n        /* end map_seq */\n        float v_tmp_30904 = 0.0f; \n        v__30840 = v_tmp_30904; \n        /* reduce_seq */\n        for (int v_i_30822 = 0; v_i_30822 < 512; v_i_30822 = (1 + v_i_30822)) {\n          v__30840 = add(v__30840, v__30839[(v_i_30822 + (512 * v_MWidthC_1 * v_wg_id_30819) + (512 * v_l_id_30820))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30823 = 0; \n          v__30844[v_l_id_30820] = id(v__30840); \n        }\n        /* end map_seq */\n        v_l_id_30820 = atomic_inc(&(v_work_idx_2043)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2037; \n      v_work_idx_2037 = 0; \n      int v_l_id_30824 = atomic_inc(&(v_work_idx_2037)); \n      while((v_l_id_30824 < 1)){\n        float v_tmp_30907 = 0.0f; \n        v__9698 = v_tmp_30907; \n        /* reduce_seq */\n        for (int v_i_30825 = 0; v_i_30825 < v_MWidthC_1; v_i_30825 = (1 + v_i_30825)) {\n          v__9698 = add(v__9698, v__30844[(v_i_30825 + (v_MWidthC_1 * v_l_id_30824))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30826 = 0; \n          v__30849[v_wg_id_30819] = doubleMultiplyAdd(v__9698, v__30831, v__30830[v_wg_id_30819], v__30832); \n        }\n        /* end map_seq */\n        v_l_id_30824 = atomic_inc(&(v_work_idx_2037)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__30827",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30828",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30829",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30830",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30831",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30832",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__30839",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__30849",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30844",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}