{
  "name" : "swrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10929, const global float* restrict v__10930, const global float* restrict v__10931, const global float* restrict v__10932, float v__10933, float v__10934, global float* v__10951, local float* v__10946, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10937; \n  float v__10939; \n  float v__9698; \n  /* Private Memory */\n  float v__10941_0;\n  \n  float v__10943_0;\n  \n  for (int v_wg_id_10922 = get_group_id(0); v_wg_id_10922 < v_MHeight_2; v_wg_id_10922 = (v_wg_id_10922 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_181; \n      v_work_idx_181 = 0; \n      int v_l_id_10923 = atomic_inc(&(v_work_idx_181)); \n      while((v_l_id_10923 < v_MWidthC_1)){\n        float v_tmp_11004 = 0.0f; \n        v__10937 = v_tmp_11004; \n        /* reduce_seq */\n        for (int v_i_10924 = 0; v_i_10924 < 8; v_i_10924 = (1 + v_i_10924)) {\n          float v_tmp_11005 = 0.0f; \n          v__10939 = v_tmp_11005; \n          int v_index_11006 = v__10929[(v_l_id_10923 + (8 * v_MWidthC_1 * v_wg_id_10922) + (v_MWidthC_1 * v_i_10924))]; \n          if (v_index_11006 < 0) {\n            v__10941_0 = v__10939; \n          } else {\n            if (v_index_11006 >= v_VLength_3) {\n              v__10941_0 = v__10939; \n            } else {\n              v__10941_0 = v__10931[v_index_11006]; \n            }\n          }\n          v__10943_0 = mult(v__10941_0, v__10930[(v_l_id_10923 + (8 * v_MWidthC_1 * v_wg_id_10922) + (v_MWidthC_1 * v_i_10924))]); \n          v__10937 = add(v__10943_0, v__10937); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10925 = 0; \n          v__10946[v_l_id_10923] = id(v__10937); \n        }\n        /* end map_seq */\n        v_l_id_10923 = atomic_inc(&(v_work_idx_181)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_176; \n      v_work_idx_176 = 0; \n      int v_l_id_10926 = atomic_inc(&(v_work_idx_176)); \n      while((v_l_id_10926 < 1)){\n        float v_tmp_11009 = 0.0f; \n        v__9698 = v_tmp_11009; \n        /* reduce_seq */\n        for (int v_i_10927 = 0; v_i_10927 < v_MWidthC_1; v_i_10927 = (1 + v_i_10927)) {\n          v__9698 = add(v__9698, v__10946[(v_i_10927 + (v_MWidthC_1 * v_l_id_10926))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10928 = 0; \n          v__10951[v_wg_id_10922] = doubleMultiplyAdd(v__9698, v__10933, v__10932[v_wg_id_10922], v__10934); \n        }\n        /* end map_seq */\n        v_l_id_10926 = atomic_inc(&(v_work_idx_176)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__10929",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10930",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10931",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10932",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10933",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10934",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10951",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10946",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}