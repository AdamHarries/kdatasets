{
  "name" : "awrg-alcl-alcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__32490, const global float* restrict v__32491, const global float* restrict v__32492, const global float* restrict v__32493, float v__32494, float v__32495, global float* v__32513, global float* v__32503, global int* v__32497, local float* v__32508, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32499; \n  float v__32504; \n  float v__9698; \n  /* Private Memory */\n  float v__32501_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2207 = v__32497; \n    local int v_w_id_32482; \n    if (get_local_id(0) == 0) {\n      v_w_id_32482 = atomic_inc(v_work_idx_2207); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32482 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2205; \n        v_work_idx_2205 = 0; \n        int v_l_id_32483 = atomic_inc(&(v_work_idx_2205)); \n        while((v_l_id_32483 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_32484 = 0; v_i_32484 < 512; v_i_32484 = (1 + v_i_32484)) {\n            float v_tmp_32564 = 0.0f; \n            v__32499 = v_tmp_32564; \n            int v_index_32565 = v__32490[(v_l_id_32483 + (512 * v_MWidthC_1 * v_w_id_32482) + (v_MWidthC_1 * v_i_32484))]; \n            if (v_index_32565 < 0) {\n              v__32501_0 = v__32499; \n            } else {\n              if (v_index_32565 >= v_VLength_3) {\n                v__32501_0 = v__32499; \n              } else {\n                v__32501_0 = v__32492[v_index_32565]; \n              }\n            }\n            v__32503[(511 + (512 * v_MWidthC_1 * v_w_id_32482) + (-1 * v_i_32484) + (512 * v_l_id_32483))] = mult(v__32501_0, v__32491[(v_l_id_32483 + (512 * v_MWidthC_1 * v_w_id_32482) + (v_MWidthC_1 * v_i_32484))]); \n          }\n          /* end map_seq */\n          float v_tmp_32566 = 0.0f; \n          v__32504 = v_tmp_32566; \n          /* reduce_seq */\n          for (int v_i_32485 = 0; v_i_32485 < 512; v_i_32485 = (1 + v_i_32485)) {\n            v__32504 = add(v__32504, v__32503[(v_i_32485 + (512 * v_MWidthC_1 * v_w_id_32482) + (512 * v_l_id_32483))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32486 = 0; \n            v__32508[v_l_id_32483] = id(v__32504); \n          }\n          /* end map_seq */\n          v_l_id_32483 = atomic_inc(&(v_work_idx_2205)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2199; \n        v_work_idx_2199 = 0; \n        int v_l_id_32487 = atomic_inc(&(v_work_idx_2199)); \n        while((v_l_id_32487 < 1)){\n          float v_tmp_32569 = 0.0f; \n          v__9698 = v_tmp_32569; \n          /* reduce_seq */\n          for (int v_i_32488 = 0; v_i_32488 < v_MWidthC_1; v_i_32488 = (1 + v_i_32488)) {\n            v__9698 = add(v__9698, v__32508[(v_i_32488 + (v_MWidthC_1 * v_l_id_32487))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32489 = 0; \n            v__32513[v_w_id_32482] = doubleMultiplyAdd(v__9698, v__32494, v__32493[v_w_id_32482], v__32495); \n          }\n          /* end map_seq */\n          v_l_id_32487 = atomic_inc(&(v_work_idx_2199)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32482 = atomic_inc(v_work_idx_2207); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__32490",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32491",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32492",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32493",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32494",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32495",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32503",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32497",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32513",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32508",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}