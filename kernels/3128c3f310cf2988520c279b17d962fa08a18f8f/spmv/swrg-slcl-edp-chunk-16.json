{
  "name" : "swrg-slcl-edp-chunk-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12928, const global float* restrict v__12929, const global float* restrict v__12930, const global float* restrict v__12931, float v__12932, float v__12933, global float* v__12948, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12935; \n  float v__12938; \n  /* Private Memory */\n  float v__12940_0;\n  \n  float v__12942_0;\n  \n  int v__12946_0;\n  \n  for (int v_wg_id_12924 = get_group_id(0); v_wg_id_12924 < ((v_MHeight_2)/(16)); v_wg_id_12924 = (v_wg_id_12924 + get_num_groups(0))) {\n    for (int v_l_id_12925 = get_local_id(0); v_l_id_12925 < 16; v_l_id_12925 = (v_l_id_12925 + get_local_size(0))) {\n      float v_tmp_12996 = 0.0f; \n      v__12935 = v_tmp_12996; \n      /* reduce_while_seq */\n      for (int v_i_12926 = 0; v_i_12926 < v_MWidthC_1; v_i_12926 = (1 + v_i_12926)) {\n        v__12946_0 = check(v__12935, v__12928[(v_i_12926 + (16 * v_MWidthC_1 * v_wg_id_12924) + (v_MWidthC_1 * v_l_id_12925))]); \n        if (v__12946_0) {\n        } else {\n          break;\n        }\n        float v_tmp_12997 = 0.0f; \n        v__12938 = v_tmp_12997; \n        int v_index_12998 = v__12928[(v_i_12926 + (16 * v_MWidthC_1 * v_wg_id_12924) + (v_MWidthC_1 * v_l_id_12925))]; \n        if (v_index_12998 < 0) {\n          v__12940_0 = v__12938; \n        } else {\n          if (v_index_12998 >= v_VLength_3) {\n            v__12940_0 = v__12938; \n          } else {\n            v__12940_0 = v__12930[v_index_12998]; \n          }\n        }\n        v__12942_0 = mult(v__12940_0, v__12929[(v_i_12926 + (16 * v_MWidthC_1 * v_wg_id_12924) + (v_MWidthC_1 * v_l_id_12925))]); \n        v__12935 = add(v__12942_0, v__12935); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_12927 = 0; \n        v__12948[(v_l_id_12925 + (16 * v_wg_id_12924))] = doubleMultiplyAdd(v__12935, v__12932, v__12931[(v_l_id_12925 + (16 * v_wg_id_12924))], v__12933); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "16",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12928",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12929",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12930",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12931",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12932",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12933",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__12948",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}