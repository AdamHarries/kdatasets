{
  "name" : "awrg-slcl-slcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31450, const global float* restrict v__31451, const global float* restrict v__31452, const global float* restrict v__31453, float v__31454, float v__31455, global float* v__31473, global int* v__31457, local float* v__31468, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31459; \n  float v__31461; \n  float v__9698; \n  /* Private Memory */\n  float v__31463_0;\n  \n  float v__31465_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2102 = v__31457; \n    local int v_w_id_31443; \n    if (get_local_id(0) == 0) {\n      v_w_id_31443 = atomic_inc(v_work_idx_2102); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31443 < v_MHeight_2)){\n      for (int v_l_id_31444 = get_local_id(0); v_l_id_31444 < v_MWidthC_1; v_l_id_31444 = (v_l_id_31444 + get_local_size(0))) {\n        float v_tmp_31536 = 0.0f; \n        v__31459 = v_tmp_31536; \n        /* reduce_seq */\n        for (int v_i_31445 = 0; v_i_31445 < 512; v_i_31445 = (1 + v_i_31445)) {\n          float v_tmp_31537 = 0.0f; \n          v__31461 = v_tmp_31537; \n          int v_index_31538 = v__31450[(v_l_id_31444 + (512 * v_MWidthC_1 * v_w_id_31443) + (v_MWidthC_1 * v_i_31445))]; \n          if (v_index_31538 < 0) {\n            v__31463_0 = v__31461; \n          } else {\n            if (v_index_31538 >= v_VLength_3) {\n              v__31463_0 = v__31461; \n            } else {\n              v__31463_0 = v__31452[v_index_31538]; \n            }\n          }\n          v__31465_0 = mult(v__31463_0, v__31451[(v_l_id_31444 + (512 * v_MWidthC_1 * v_w_id_31443) + (v_MWidthC_1 * v_i_31445))]); \n          v__31459 = add(v__31465_0, v__31459); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31446 = 0; \n          v__31468[v_l_id_31444] = id(v__31459); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_31447 = get_local_id(0); \n        float v_tmp_31541 = 0.0f; \n        v__9698 = v_tmp_31541; \n        /* reduce_seq */\n        for (int v_i_31448 = 0; v_i_31448 < v_MWidthC_1; v_i_31448 = (1 + v_i_31448)) {\n          v__9698 = add(v__9698, v__31468[(v_i_31448 + (v_MWidthC_1 * v_l_id_31447))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31449 = 0; \n          v__31473[v_w_id_31443] = doubleMultiplyAdd(v__9698, v__31454, v__31453[v_w_id_31443], v__31455); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31443 = atomic_inc(v_work_idx_2102); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__31450",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31451",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31452",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31453",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31454",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31455",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31457",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31473",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31468",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}