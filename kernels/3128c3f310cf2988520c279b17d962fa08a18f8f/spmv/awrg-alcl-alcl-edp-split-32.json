{
  "name" : "awrg-alcl-alcl-edp-split-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__19348, const global float* restrict v__19349, const global float* restrict v__19350, const global float* restrict v__19351, float v__19352, float v__19353, global float* v__19373, global int* v__19355, local float* v__19368, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19357; \n  float v__19359; \n  float v__9698; \n  /* Private Memory */\n  float v__19361_0;\n  \n  float v__19363_0;\n  \n  int v__19367_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_981 = v__19355; \n    local int v_w_id_19341; \n    if (get_local_id(0) == 0) {\n      v_w_id_19341 = atomic_inc(v_work_idx_981); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_19341 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_979; \n        v_work_idx_979 = 0; \n        int v_l_id_19342 = atomic_inc(&(v_work_idx_979)); \n        while((v_l_id_19342 < v_MWidthC_1)){\n          float v_tmp_19427 = 0.0f; \n          v__19357 = v_tmp_19427; \n          /* reduce_while_seq */\n          for (int v_i_19343 = 0; v_i_19343 < 32; v_i_19343 = (1 + v_i_19343)) {\n            v__19367_0 = check(v__19357, v__19348[(v_l_id_19342 + (32 * v_MWidthC_1 * v_w_id_19341) + (v_MWidthC_1 * v_i_19343))]); \n            if (v__19367_0) {\n            } else {\n              break;\n            }\n            float v_tmp_19428 = 0.0f; \n            v__19359 = v_tmp_19428; \n            int v_index_19429 = v__19348[(v_l_id_19342 + (32 * v_MWidthC_1 * v_w_id_19341) + (v_MWidthC_1 * v_i_19343))]; \n            if (v_index_19429 < 0) {\n              v__19361_0 = v__19359; \n            } else {\n              if (v_index_19429 >= v_VLength_3) {\n                v__19361_0 = v__19359; \n              } else {\n                v__19361_0 = v__19350[v_index_19429]; \n              }\n            }\n            v__19363_0 = mult(v__19361_0, v__19349[(v_l_id_19342 + (32 * v_MWidthC_1 * v_w_id_19341) + (v_MWidthC_1 * v_i_19343))]); \n            v__19357 = add(v__19363_0, v__19357); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19344 = 0; \n            v__19368[v_l_id_19342] = id(v__19357); \n          }\n          /* end map_seq */\n          v_l_id_19342 = atomic_inc(&(v_work_idx_979)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_974; \n        v_work_idx_974 = 0; \n        int v_l_id_19345 = atomic_inc(&(v_work_idx_974)); \n        while((v_l_id_19345 < 1)){\n          float v_tmp_19432 = 0.0f; \n          v__9698 = v_tmp_19432; \n          /* reduce_seq */\n          for (int v_i_19346 = 0; v_i_19346 < v_MWidthC_1; v_i_19346 = (1 + v_i_19346)) {\n            v__9698 = add(v__9698, v__19368[(v_i_19346 + (v_MWidthC_1 * v_l_id_19345))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_19347 = 0; \n            v__19373[v_w_id_19341] = doubleMultiplyAdd(v__9698, v__19352, v__19351[v_w_id_19341], v__19353); \n          }\n          /* end map_seq */\n          v_l_id_19345 = atomic_inc(&(v_work_idx_974)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_19341 = atomic_inc(v_work_idx_981); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "32",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__19348",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19349",
    "addressSpace" : "global",
    "size" : "(128*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19350",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19351",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19352",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19353",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19355",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__19373",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__19368",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}