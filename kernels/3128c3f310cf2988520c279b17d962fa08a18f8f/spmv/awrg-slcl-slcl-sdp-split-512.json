{
  "name" : "awrg-slcl-slcl-sdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31345, const global float* restrict v__31346, const global float* restrict v__31347, const global float* restrict v__31348, float v__31349, float v__31350, global float* v__31368, global float* v__31358, global int* v__31352, local float* v__31363, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31354; \n  float v__31359; \n  float v__9698; \n  /* Private Memory */\n  float v__31356_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2093 = v__31352; \n    local int v_w_id_31337; \n    if (get_local_id(0) == 0) {\n      v_w_id_31337 = atomic_inc(v_work_idx_2093); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31337 < v_MHeight_2)){\n      for (int v_l_id_31338 = get_local_id(0); v_l_id_31338 < v_MWidthC_1; v_l_id_31338 = (v_l_id_31338 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_31339 = 0; v_i_31339 < 512; v_i_31339 = (1 + v_i_31339)) {\n          float v_tmp_31431 = 0.0f; \n          v__31354 = v_tmp_31431; \n          int v_index_31432 = v__31345[(v_l_id_31338 + (512 * v_MWidthC_1 * v_w_id_31337) + (v_MWidthC_1 * v_i_31339))]; \n          if (v_index_31432 < 0) {\n            v__31356_0 = v__31354; \n          } else {\n            if (v_index_31432 >= v_VLength_3) {\n              v__31356_0 = v__31354; \n            } else {\n              v__31356_0 = v__31347[v_index_31432]; \n            }\n          }\n          v__31358[(511 + (512 * v_MWidthC_1 * v_w_id_31337) + (-1 * v_i_31339) + (512 * v_l_id_31338))] = mult(v__31356_0, v__31346[(v_l_id_31338 + (512 * v_MWidthC_1 * v_w_id_31337) + (v_MWidthC_1 * v_i_31339))]); \n        }\n        /* end map_seq */\n        float v_tmp_31433 = 0.0f; \n        v__31359 = v_tmp_31433; \n        /* reduce_seq */\n        for (int v_i_31340 = 0; v_i_31340 < 512; v_i_31340 = (1 + v_i_31340)) {\n          v__31359 = add(v__31359, v__31358[(v_i_31340 + (512 * v_MWidthC_1 * v_w_id_31337) + (512 * v_l_id_31338))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31341 = 0; \n          v__31363[v_l_id_31338] = id(v__31359); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_31342 = get_local_id(0); \n        float v_tmp_31436 = 0.0f; \n        v__9698 = v_tmp_31436; \n        /* reduce_seq */\n        for (int v_i_31343 = 0; v_i_31343 < v_MWidthC_1; v_i_31343 = (1 + v_i_31343)) {\n          v__9698 = add(v__9698, v__31363[(v_i_31343 + (v_MWidthC_1 * v_l_id_31342))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31344 = 0; \n          v__31368[v_w_id_31337] = doubleMultiplyAdd(v__9698, v__31349, v__31348[v_w_id_31337], v__31350); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31337 = atomic_inc(v_work_idx_2093); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__31345",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31346",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31347",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31348",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31349",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31350",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31358",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31352",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31368",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31363",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}