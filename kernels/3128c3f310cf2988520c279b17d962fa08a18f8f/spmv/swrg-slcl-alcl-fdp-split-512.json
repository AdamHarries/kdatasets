{
  "name" : "swrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30099, const global float* restrict v__30100, const global float* restrict v__30101, const global float* restrict v__30102, float v__30103, float v__30104, global float* v__30121, local float* v__30116, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30107; \n  float v__30109; \n  float v__9698; \n  /* Private Memory */\n  float v__30111_0;\n  \n  float v__30113_0;\n  \n  for (int v_wg_id_30092 = get_group_id(0); v_wg_id_30092 < v_MHeight_2; v_wg_id_30092 = (v_wg_id_30092 + get_num_groups(0))) {\n    for (int v_l_id_30093 = get_local_id(0); v_l_id_30093 < v_MWidthC_1; v_l_id_30093 = (v_l_id_30093 + get_local_size(0))) {\n      float v_tmp_30182 = 0.0f; \n      v__30107 = v_tmp_30182; \n      /* reduce_seq */\n      for (int v_i_30094 = 0; v_i_30094 < 512; v_i_30094 = (1 + v_i_30094)) {\n        float v_tmp_30183 = 0.0f; \n        v__30109 = v_tmp_30183; \n        int v_index_30184 = v__30099[(v_l_id_30093 + (512 * v_MWidthC_1 * v_wg_id_30092) + (v_MWidthC_1 * v_i_30094))]; \n        if (v_index_30184 < 0) {\n          v__30111_0 = v__30109; \n        } else {\n          if (v_index_30184 >= v_VLength_3) {\n            v__30111_0 = v__30109; \n          } else {\n            v__30111_0 = v__30101[v_index_30184]; \n          }\n        }\n        v__30113_0 = mult(v__30111_0, v__30100[(v_l_id_30093 + (512 * v_MWidthC_1 * v_wg_id_30092) + (v_MWidthC_1 * v_i_30094))]); \n        v__30107 = add(v__30113_0, v__30107); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_30095 = 0; \n        v__30116[v_l_id_30093] = id(v__30107); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1972; \n      v_work_idx_1972 = 0; \n      int v_l_id_30096 = atomic_inc(&(v_work_idx_1972)); \n      while((v_l_id_30096 < 1)){\n        float v_tmp_30187 = 0.0f; \n        v__9698 = v_tmp_30187; \n        /* reduce_seq */\n        for (int v_i_30097 = 0; v_i_30097 < v_MWidthC_1; v_i_30097 = (1 + v_i_30097)) {\n          v__9698 = add(v__9698, v__30116[(v_i_30097 + (v_MWidthC_1 * v_l_id_30096))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30098 = 0; \n          v__30121[v_wg_id_30092] = doubleMultiplyAdd(v__9698, v__30103, v__30102[v_wg_id_30092], v__30104); \n        }\n        /* end map_seq */\n        v_l_id_30096 = atomic_inc(&(v_work_idx_1972)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__30099",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30100",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30101",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30102",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30103",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30104",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30121",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30116",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}