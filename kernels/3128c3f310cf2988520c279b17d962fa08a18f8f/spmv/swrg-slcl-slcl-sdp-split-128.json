{
  "name" : "swrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23009, const global float* restrict v__23010, const global float* restrict v__23011, const global float* restrict v__23012, float v__23013, float v__23014, global float* v__23031, global float* v__23021, local float* v__23026, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23017; \n  float v__23022; \n  float v__9698; \n  /* Private Memory */\n  float v__23019_0;\n  \n  for (int v_wg_id_23001 = get_group_id(0); v_wg_id_23001 < v_MHeight_2; v_wg_id_23001 = (v_wg_id_23001 + get_num_groups(0))) {\n    for (int v_l_id_23002 = get_local_id(0); v_l_id_23002 < v_MWidthC_1; v_l_id_23002 = (v_l_id_23002 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_23003 = 0; v_i_23003 < 128; v_i_23003 = (1 + v_i_23003)) {\n        float v_tmp_23096 = 0.0f; \n        v__23017 = v_tmp_23096; \n        int v_index_23097 = v__23009[(v_l_id_23002 + (128 * v_MWidthC_1 * v_wg_id_23001) + (v_MWidthC_1 * v_i_23003))]; \n        if (v_index_23097 < 0) {\n          v__23019_0 = v__23017; \n        } else {\n          if (v_index_23097 >= v_VLength_3) {\n            v__23019_0 = v__23017; \n          } else {\n            v__23019_0 = v__23011[v_index_23097]; \n          }\n        }\n        v__23021[(127 + (128 * v_MWidthC_1 * v_wg_id_23001) + (-1 * v_i_23003) + (128 * v_l_id_23002))] = mult(v__23019_0, v__23010[(v_l_id_23002 + (128 * v_MWidthC_1 * v_wg_id_23001) + (v_MWidthC_1 * v_i_23003))]); \n      }\n      /* end map_seq */\n      float v_tmp_23098 = 0.0f; \n      v__23022 = v_tmp_23098; \n      /* reduce_seq */\n      for (int v_i_23004 = 0; v_i_23004 < 128; v_i_23004 = (1 + v_i_23004)) {\n        v__23022 = add(v__23022, v__23021[(v_i_23004 + (128 * v_MWidthC_1 * v_wg_id_23001) + (128 * v_l_id_23002))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23005 = 0; \n        v__23026[v_l_id_23002] = id(v__23022); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23006 = get_local_id(0); \n      float v_tmp_23101 = 0.0f; \n      v__9698 = v_tmp_23101; \n      /* reduce_seq */\n      for (int v_i_23007 = 0; v_i_23007 < v_MWidthC_1; v_i_23007 = (1 + v_i_23007)) {\n        v__9698 = add(v__9698, v__23026[(v_i_23007 + (v_MWidthC_1 * v_l_id_23006))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23008 = 0; \n        v__23031[v_wg_id_23001] = doubleMultiplyAdd(v__9698, v__23013, v__23012[v_wg_id_23001], v__23014); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23009",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23010",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23011",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23012",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23013",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23014",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23021",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23031",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23026",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}