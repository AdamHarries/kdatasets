{
  "name" : "swrg-alcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__14063, const global float* restrict v__14064, const global float* restrict v__14065, const global float* restrict v__14066, float v__14067, float v__14068, global float* v__14087, local float* v__14082, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14071; \n  float v__14073; \n  float v__9698; \n  /* Private Memory */\n  float v__14075_0;\n  \n  float v__14077_0;\n  \n  int v__14081_0;\n  \n  for (int v_wg_id_14056 = get_group_id(0); v_wg_id_14056 < v_MHeight_2; v_wg_id_14056 = (v_wg_id_14056 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_472; \n      v_work_idx_472 = 0; \n      int v_l_id_14057 = atomic_inc(&(v_work_idx_472)); \n      while((v_l_id_14057 < v_MWidthC_1)){\n        float v_tmp_14147 = 0.0f; \n        v__14071 = v_tmp_14147; \n        /* reduce_while_seq */\n        for (int v_i_14058 = 0; v_i_14058 < 16; v_i_14058 = (1 + v_i_14058)) {\n          v__14081_0 = check(v__14071, v__14063[(v_l_id_14057 + (16 * v_MWidthC_1 * v_wg_id_14056) + (v_MWidthC_1 * v_i_14058))]); \n          if (v__14081_0) {\n          } else {\n            break;\n          }\n          float v_tmp_14148 = 0.0f; \n          v__14073 = v_tmp_14148; \n          int v_index_14149 = v__14063[(v_l_id_14057 + (16 * v_MWidthC_1 * v_wg_id_14056) + (v_MWidthC_1 * v_i_14058))]; \n          if (v_index_14149 < 0) {\n            v__14075_0 = v__14073; \n          } else {\n            if (v_index_14149 >= v_VLength_3) {\n              v__14075_0 = v__14073; \n            } else {\n              v__14075_0 = v__14065[v_index_14149]; \n            }\n          }\n          v__14077_0 = mult(v__14075_0, v__14064[(v_l_id_14057 + (16 * v_MWidthC_1 * v_wg_id_14056) + (v_MWidthC_1 * v_i_14058))]); \n          v__14071 = add(v__14077_0, v__14071); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14059 = 0; \n          v__14082[v_l_id_14057] = id(v__14071); \n        }\n        /* end map_seq */\n        v_l_id_14057 = atomic_inc(&(v_work_idx_472)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_14060 = get_local_id(0); \n      float v_tmp_14152 = 0.0f; \n      v__9698 = v_tmp_14152; \n      /* reduce_seq */\n      for (int v_i_14061 = 0; v_i_14061 < v_MWidthC_1; v_i_14061 = (1 + v_i_14061)) {\n        v__9698 = add(v__9698, v__14082[(v_i_14061 + (v_MWidthC_1 * v_l_id_14060))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_14062 = 0; \n        v__14087[v_wg_id_14056] = doubleMultiplyAdd(v__9698, v__14067, v__14066[v_wg_id_14056], v__14068); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__14063",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14064",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14065",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14066",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14067",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14068",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__14087",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14082",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}