{
  "name" : "swrg-slcl-alcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23333, const global float* restrict v__23334, const global float* restrict v__23335, const global float* restrict v__23336, float v__23337, float v__23338, global float* v__23355, global float* v__23345, local float* v__23350, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23341; \n  float v__23346; \n  float v__9698; \n  /* Private Memory */\n  float v__23343_0;\n  \n  for (int v_wg_id_23325 = get_group_id(0); v_wg_id_23325 < v_MHeight_2; v_wg_id_23325 = (v_wg_id_23325 + get_num_groups(0))) {\n    for (int v_l_id_23326 = get_local_id(0); v_l_id_23326 < v_MWidthC_1; v_l_id_23326 = (v_l_id_23326 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_23327 = 0; v_i_23327 < 128; v_i_23327 = (1 + v_i_23327)) {\n        float v_tmp_23416 = 0.0f; \n        v__23341 = v_tmp_23416; \n        int v_index_23417 = v__23333[(v_l_id_23326 + (128 * v_MWidthC_1 * v_wg_id_23325) + (v_MWidthC_1 * v_i_23327))]; \n        if (v_index_23417 < 0) {\n          v__23343_0 = v__23341; \n        } else {\n          if (v_index_23417 >= v_VLength_3) {\n            v__23343_0 = v__23341; \n          } else {\n            v__23343_0 = v__23335[v_index_23417]; \n          }\n        }\n        v__23345[(127 + (128 * v_MWidthC_1 * v_wg_id_23325) + (-1 * v_i_23327) + (128 * v_l_id_23326))] = mult(v__23343_0, v__23334[(v_l_id_23326 + (128 * v_MWidthC_1 * v_wg_id_23325) + (v_MWidthC_1 * v_i_23327))]); \n      }\n      /* end map_seq */\n      float v_tmp_23418 = 0.0f; \n      v__23346 = v_tmp_23418; \n      /* reduce_seq */\n      for (int v_i_23328 = 0; v_i_23328 < 128; v_i_23328 = (1 + v_i_23328)) {\n        v__23346 = add(v__23346, v__23345[(v_i_23328 + (128 * v_MWidthC_1 * v_wg_id_23325) + (128 * v_l_id_23326))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23329 = 0; \n        v__23350[v_l_id_23326] = id(v__23346); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1338; \n      v_work_idx_1338 = 0; \n      int v_l_id_23330 = atomic_inc(&(v_work_idx_1338)); \n      while((v_l_id_23330 < 1)){\n        float v_tmp_23421 = 0.0f; \n        v__9698 = v_tmp_23421; \n        /* reduce_seq */\n        for (int v_i_23331 = 0; v_i_23331 < v_MWidthC_1; v_i_23331 = (1 + v_i_23331)) {\n          v__9698 = add(v__9698, v__23350[(v_i_23331 + (v_MWidthC_1 * v_l_id_23330))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_23332 = 0; \n          v__23355[v_wg_id_23325] = doubleMultiplyAdd(v__9698, v__23337, v__23336[v_wg_id_23325], v__23338); \n        }\n        /* end map_seq */\n        v_l_id_23330 = atomic_inc(&(v_work_idx_1338)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__23333",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23334",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23335",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23336",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23337",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23338",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__23345",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__23355",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23350",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}