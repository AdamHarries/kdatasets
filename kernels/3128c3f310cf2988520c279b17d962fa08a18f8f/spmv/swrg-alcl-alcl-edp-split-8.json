{
  "name" : "swrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__11023, const global float* restrict v__11024, const global float* restrict v__11025, const global float* restrict v__11026, float v__11027, float v__11028, global float* v__11047, local float* v__11042, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11031; \n  float v__11033; \n  float v__9698; \n  /* Private Memory */\n  float v__11035_0;\n  \n  float v__11037_0;\n  \n  int v__11041_0;\n  \n  for (int v_wg_id_11016 = get_group_id(0); v_wg_id_11016 < v_MHeight_2; v_wg_id_11016 = (v_wg_id_11016 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_191; \n      v_work_idx_191 = 0; \n      int v_l_id_11017 = atomic_inc(&(v_work_idx_191)); \n      while((v_l_id_11017 < v_MWidthC_1)){\n        float v_tmp_11103 = 0.0f; \n        v__11031 = v_tmp_11103; \n        /* reduce_while_seq */\n        for (int v_i_11018 = 0; v_i_11018 < 8; v_i_11018 = (1 + v_i_11018)) {\n          v__11041_0 = check(v__11031, v__11023[(v_l_id_11017 + (8 * v_MWidthC_1 * v_wg_id_11016) + (v_MWidthC_1 * v_i_11018))]); \n          if (v__11041_0) {\n          } else {\n            break;\n          }\n          float v_tmp_11104 = 0.0f; \n          v__11033 = v_tmp_11104; \n          int v_index_11105 = v__11023[(v_l_id_11017 + (8 * v_MWidthC_1 * v_wg_id_11016) + (v_MWidthC_1 * v_i_11018))]; \n          if (v_index_11105 < 0) {\n            v__11035_0 = v__11033; \n          } else {\n            if (v_index_11105 >= v_VLength_3) {\n              v__11035_0 = v__11033; \n            } else {\n              v__11035_0 = v__11025[v_index_11105]; \n            }\n          }\n          v__11037_0 = mult(v__11035_0, v__11024[(v_l_id_11017 + (8 * v_MWidthC_1 * v_wg_id_11016) + (v_MWidthC_1 * v_i_11018))]); \n          v__11031 = add(v__11037_0, v__11031); \n        }\n        /* end reduce_while_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11019 = 0; \n          v__11042[v_l_id_11017] = id(v__11031); \n        }\n        /* end map_seq */\n        v_l_id_11017 = atomic_inc(&(v_work_idx_191)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_186; \n      v_work_idx_186 = 0; \n      int v_l_id_11020 = atomic_inc(&(v_work_idx_186)); \n      while((v_l_id_11020 < 1)){\n        float v_tmp_11108 = 0.0f; \n        v__9698 = v_tmp_11108; \n        /* reduce_seq */\n        for (int v_i_11021 = 0; v_i_11021 < v_MWidthC_1; v_i_11021 = (1 + v_i_11021)) {\n          v__9698 = add(v__9698, v__11042[(v_i_11021 + (v_MWidthC_1 * v_l_id_11020))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_11022 = 0; \n          v__11047[v_wg_id_11016] = doubleMultiplyAdd(v__9698, v__11027, v__11026[v_wg_id_11016], v__11028); \n        }\n        /* end map_seq */\n        v_l_id_11020 = atomic_inc(&(v_work_idx_186)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__11023",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11024",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11025",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11026",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11027",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11028",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__11047",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__11042",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}