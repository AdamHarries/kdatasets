{
  "name" : "awrg-alcl-alcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__22587, const global float* restrict v__22588, const global float* restrict v__22589, const global float* restrict v__22590, float v__22591, float v__22592, global float* v__22610, global int* v__22594, local float* v__22605, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__22596; \n  float v__22598; \n  float v__9698; \n  /* Private Memory */\n  float v__22600_0;\n  \n  float v__22602_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1282 = v__22594; \n    local int v_w_id_22580; \n    if (get_local_id(0) == 0) {\n      v_w_id_22580 = atomic_inc(v_work_idx_1282); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_22580 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1280; \n        v_work_idx_1280 = 0; \n        int v_l_id_22581 = atomic_inc(&(v_work_idx_1280)); \n        while((v_l_id_22581 < v_MWidthC_1)){\n          float v_tmp_22661 = 0.0f; \n          v__22596 = v_tmp_22661; \n          /* reduce_seq */\n          for (int v_i_22582 = 0; v_i_22582 < 64; v_i_22582 = (1 + v_i_22582)) {\n            float v_tmp_22662 = 0.0f; \n            v__22598 = v_tmp_22662; \n            int v_index_22663 = v__22587[(v_l_id_22581 + (64 * v_MWidthC_1 * v_w_id_22580) + (v_MWidthC_1 * v_i_22582))]; \n            if (v_index_22663 < 0) {\n              v__22600_0 = v__22598; \n            } else {\n              if (v_index_22663 >= v_VLength_3) {\n                v__22600_0 = v__22598; \n              } else {\n                v__22600_0 = v__22589[v_index_22663]; \n              }\n            }\n            v__22602_0 = mult(v__22600_0, v__22588[(v_l_id_22581 + (64 * v_MWidthC_1 * v_w_id_22580) + (v_MWidthC_1 * v_i_22582))]); \n            v__22596 = add(v__22602_0, v__22596); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22583 = 0; \n            v__22605[v_l_id_22581] = id(v__22596); \n          }\n          /* end map_seq */\n          v_l_id_22581 = atomic_inc(&(v_work_idx_1280)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1275; \n        v_work_idx_1275 = 0; \n        int v_l_id_22584 = atomic_inc(&(v_work_idx_1275)); \n        while((v_l_id_22584 < 1)){\n          float v_tmp_22666 = 0.0f; \n          v__9698 = v_tmp_22666; \n          /* reduce_seq */\n          for (int v_i_22585 = 0; v_i_22585 < v_MWidthC_1; v_i_22585 = (1 + v_i_22585)) {\n            v__9698 = add(v__9698, v__22605[(v_i_22585 + (v_MWidthC_1 * v_l_id_22584))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_22586 = 0; \n            v__22610[v_w_id_22580] = doubleMultiplyAdd(v__9698, v__22591, v__22590[v_w_id_22580], v__22592); \n          }\n          /* end map_seq */\n          v_l_id_22584 = atomic_inc(&(v_work_idx_1275)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_22580 = atomic_inc(v_work_idx_1282); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__22587",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22588",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__22589",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__22590",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__22591",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__22592",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__22594",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__22610",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__22605",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}