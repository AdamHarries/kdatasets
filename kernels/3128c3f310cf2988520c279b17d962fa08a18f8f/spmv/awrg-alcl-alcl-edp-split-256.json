{
  "name" : "awrg-alcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__29344, const global float* restrict v__29345, const global float* restrict v__29346, const global float* restrict v__29347, float v__29348, float v__29349, global float* v__29369, global int* v__29351, local float* v__29364, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__29353; \n  float v__29355; \n  float v__9698; \n  /* Private Memory */\n  float v__29357_0;\n  \n  float v__29359_0;\n  \n  int v__29363_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1917 = v__29351; \n    local int v_w_id_29337; \n    if (get_local_id(0) == 0) {\n      v_w_id_29337 = atomic_inc(v_work_idx_1917); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_29337 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1915; \n        v_work_idx_1915 = 0; \n        int v_l_id_29338 = atomic_inc(&(v_work_idx_1915)); \n        while((v_l_id_29338 < v_MWidthC_1)){\n          float v_tmp_29423 = 0.0f; \n          v__29353 = v_tmp_29423; \n          /* reduce_while_seq */\n          for (int v_i_29339 = 0; v_i_29339 < 256; v_i_29339 = (1 + v_i_29339)) {\n            v__29363_0 = check(v__29353, v__29344[(v_l_id_29338 + (256 * v_MWidthC_1 * v_w_id_29337) + (v_MWidthC_1 * v_i_29339))]); \n            if (v__29363_0) {\n            } else {\n              break;\n            }\n            float v_tmp_29424 = 0.0f; \n            v__29355 = v_tmp_29424; \n            int v_index_29425 = v__29344[(v_l_id_29338 + (256 * v_MWidthC_1 * v_w_id_29337) + (v_MWidthC_1 * v_i_29339))]; \n            if (v_index_29425 < 0) {\n              v__29357_0 = v__29355; \n            } else {\n              if (v_index_29425 >= v_VLength_3) {\n                v__29357_0 = v__29355; \n              } else {\n                v__29357_0 = v__29346[v_index_29425]; \n              }\n            }\n            v__29359_0 = mult(v__29357_0, v__29345[(v_l_id_29338 + (256 * v_MWidthC_1 * v_w_id_29337) + (v_MWidthC_1 * v_i_29339))]); \n            v__29353 = add(v__29359_0, v__29353); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_29340 = 0; \n            v__29364[v_l_id_29338] = id(v__29353); \n          }\n          /* end map_seq */\n          v_l_id_29338 = atomic_inc(&(v_work_idx_1915)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1910; \n        v_work_idx_1910 = 0; \n        int v_l_id_29341 = atomic_inc(&(v_work_idx_1910)); \n        while((v_l_id_29341 < 1)){\n          float v_tmp_29428 = 0.0f; \n          v__9698 = v_tmp_29428; \n          /* reduce_seq */\n          for (int v_i_29342 = 0; v_i_29342 < v_MWidthC_1; v_i_29342 = (1 + v_i_29342)) {\n            v__9698 = add(v__9698, v__29364[(v_i_29342 + (v_MWidthC_1 * v_l_id_29341))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_29343 = 0; \n            v__29369[v_w_id_29337] = doubleMultiplyAdd(v__9698, v__29348, v__29347[v_w_id_29337], v__29349); \n          }\n          /* end map_seq */\n          v_l_id_29341 = atomic_inc(&(v_work_idx_1910)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_29337 = atomic_inc(v_work_idx_1917); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__29344",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29345",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__29346",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__29347",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__29348",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__29349",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__29351",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__29369",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__29364",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}