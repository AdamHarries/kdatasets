{
  "name" : "swrg-slcl-slcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13119, const global float* restrict v__13120, const global float* restrict v__13121, const global float* restrict v__13122, float v__13123, float v__13124, global float* v__13141, local float* v__13136, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13127; \n  float v__13129; \n  float v__9698; \n  /* Private Memory */\n  float v__13131_0;\n  \n  float v__13133_0;\n  \n  for (int v_wg_id_13112 = get_group_id(0); v_wg_id_13112 < v_MHeight_2; v_wg_id_13112 = (v_wg_id_13112 + get_num_groups(0))) {\n    for (int v_l_id_13113 = get_local_id(0); v_l_id_13113 < v_MWidthC_1; v_l_id_13113 = (v_l_id_13113 + get_local_size(0))) {\n      float v_tmp_13206 = 0.0f; \n      v__13127 = v_tmp_13206; \n      /* reduce_seq */\n      for (int v_i_13114 = 0; v_i_13114 < 16; v_i_13114 = (1 + v_i_13114)) {\n        float v_tmp_13207 = 0.0f; \n        v__13129 = v_tmp_13207; \n        int v_index_13208 = v__13119[(v_l_id_13113 + (16 * v_MWidthC_1 * v_wg_id_13112) + (v_MWidthC_1 * v_i_13114))]; \n        if (v_index_13208 < 0) {\n          v__13131_0 = v__13129; \n        } else {\n          if (v_index_13208 >= v_VLength_3) {\n            v__13131_0 = v__13129; \n          } else {\n            v__13131_0 = v__13121[v_index_13208]; \n          }\n        }\n        v__13133_0 = mult(v__13131_0, v__13120[(v_l_id_13113 + (16 * v_MWidthC_1 * v_wg_id_13112) + (v_MWidthC_1 * v_i_13114))]); \n        v__13127 = add(v__13133_0, v__13127); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13115 = 0; \n        v__13136[v_l_id_13113] = id(v__13127); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13116 = get_local_id(0); \n      float v_tmp_13211 = 0.0f; \n      v__9698 = v_tmp_13211; \n      /* reduce_seq */\n      for (int v_i_13117 = 0; v_i_13117 < v_MWidthC_1; v_i_13117 = (1 + v_i_13117)) {\n        v__9698 = add(v__9698, v__13136[(v_i_13117 + (v_MWidthC_1 * v_l_id_13116))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13118 = 0; \n        v__13141[v_wg_id_13112] = doubleMultiplyAdd(v__9698, v__13123, v__13122[v_wg_id_13112], v__13124); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__13119",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13120",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13121",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13122",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13123",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13124",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13141",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13136",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}