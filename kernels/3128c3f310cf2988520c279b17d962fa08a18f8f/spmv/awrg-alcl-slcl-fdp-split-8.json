{
  "name" : "awrg-alcl-slcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12298, const global float* restrict v__12299, const global float* restrict v__12300, const global float* restrict v__12301, float v__12302, float v__12303, global float* v__12321, global int* v__12305, local float* v__12316, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12307; \n  float v__12309; \n  float v__9698; \n  /* Private Memory */\n  float v__12311_0;\n  \n  float v__12313_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_313 = v__12305; \n    local int v_w_id_12291; \n    if (get_local_id(0) == 0) {\n      v_w_id_12291 = atomic_inc(v_work_idx_313); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12291 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_311; \n        v_work_idx_311 = 0; \n        int v_l_id_12292 = atomic_inc(&(v_work_idx_311)); \n        while((v_l_id_12292 < v_MWidthC_1)){\n          float v_tmp_12376 = 0.0f; \n          v__12307 = v_tmp_12376; \n          /* reduce_seq */\n          for (int v_i_12293 = 0; v_i_12293 < 8; v_i_12293 = (1 + v_i_12293)) {\n            float v_tmp_12377 = 0.0f; \n            v__12309 = v_tmp_12377; \n            int v_index_12378 = v__12298[(v_l_id_12292 + (8 * v_MWidthC_1 * v_w_id_12291) + (v_MWidthC_1 * v_i_12293))]; \n            if (v_index_12378 < 0) {\n              v__12311_0 = v__12309; \n            } else {\n              if (v_index_12378 >= v_VLength_3) {\n                v__12311_0 = v__12309; \n              } else {\n                v__12311_0 = v__12300[v_index_12378]; \n              }\n            }\n            v__12313_0 = mult(v__12311_0, v__12299[(v_l_id_12292 + (8 * v_MWidthC_1 * v_w_id_12291) + (v_MWidthC_1 * v_i_12293))]); \n            v__12307 = add(v__12313_0, v__12307); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12294 = 0; \n            v__12316[v_l_id_12292] = id(v__12307); \n          }\n          /* end map_seq */\n          v_l_id_12292 = atomic_inc(&(v_work_idx_311)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_12295 = get_local_id(0); \n        float v_tmp_12381 = 0.0f; \n        v__9698 = v_tmp_12381; \n        /* reduce_seq */\n        for (int v_i_12296 = 0; v_i_12296 < v_MWidthC_1; v_i_12296 = (1 + v_i_12296)) {\n          v__9698 = add(v__9698, v__12316[(v_i_12296 + (v_MWidthC_1 * v_l_id_12295))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_12297 = 0; \n          v__12321[v_w_id_12291] = doubleMultiplyAdd(v__9698, v__12302, v__12301[v_w_id_12291], v__12303); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12291 = atomic_inc(v_work_idx_313); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__12298",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12299",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12300",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12301",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12302",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12303",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12305",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12321",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12316",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}