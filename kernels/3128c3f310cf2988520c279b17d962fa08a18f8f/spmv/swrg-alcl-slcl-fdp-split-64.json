{
  "name" : "swrg-alcl-slcl-fdp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__20629, const global float* restrict v__20630, const global float* restrict v__20631, const global float* restrict v__20632, float v__20633, float v__20634, global float* v__20651, local float* v__20646, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20637; \n  float v__20639; \n  float v__9698; \n  /* Private Memory */\n  float v__20641_0;\n  \n  float v__20643_0;\n  \n  for (int v_wg_id_20622 = get_group_id(0); v_wg_id_20622 < v_MHeight_2; v_wg_id_20622 = (v_wg_id_20622 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_1087; \n      v_work_idx_1087 = 0; \n      int v_l_id_20623 = atomic_inc(&(v_work_idx_1087)); \n      while((v_l_id_20623 < v_MWidthC_1)){\n        float v_tmp_20708 = 0.0f; \n        v__20637 = v_tmp_20708; \n        /* reduce_seq */\n        for (int v_i_20624 = 0; v_i_20624 < 64; v_i_20624 = (1 + v_i_20624)) {\n          float v_tmp_20709 = 0.0f; \n          v__20639 = v_tmp_20709; \n          int v_index_20710 = v__20629[(v_l_id_20623 + (64 * v_MWidthC_1 * v_wg_id_20622) + (v_MWidthC_1 * v_i_20624))]; \n          if (v_index_20710 < 0) {\n            v__20641_0 = v__20639; \n          } else {\n            if (v_index_20710 >= v_VLength_3) {\n              v__20641_0 = v__20639; \n            } else {\n              v__20641_0 = v__20631[v_index_20710]; \n            }\n          }\n          v__20643_0 = mult(v__20641_0, v__20630[(v_l_id_20623 + (64 * v_MWidthC_1 * v_wg_id_20622) + (v_MWidthC_1 * v_i_20624))]); \n          v__20637 = add(v__20643_0, v__20637); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20625 = 0; \n          v__20646[v_l_id_20623] = id(v__20637); \n        }\n        /* end map_seq */\n        v_l_id_20623 = atomic_inc(&(v_work_idx_1087)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_20626 = get_local_id(0); \n      float v_tmp_20713 = 0.0f; \n      v__9698 = v_tmp_20713; \n      /* reduce_seq */\n      for (int v_i_20627 = 0; v_i_20627 < v_MWidthC_1; v_i_20627 = (1 + v_i_20627)) {\n        v__9698 = add(v__9698, v__20646[(v_i_20627 + (v_MWidthC_1 * v_l_id_20626))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20628 = 0; \n        v__20651[v_wg_id_20622] = doubleMultiplyAdd(v__9698, v__20633, v__20632[v_wg_id_20622], v__20634); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__20629",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20630",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20631",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20632",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20633",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20634",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20651",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20646",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}