{
  "name" : "awrg-alcl-slcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__32387, const global float* restrict v__32388, const global float* restrict v__32389, const global float* restrict v__32390, float v__32391, float v__32392, global float* v__32412, global int* v__32394, local float* v__32407, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__32396; \n  float v__32398; \n  float v__9698; \n  /* Private Memory */\n  float v__32400_0;\n  \n  float v__32402_0;\n  \n  int v__32406_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2195 = v__32394; \n    local int v_w_id_32380; \n    if (get_local_id(0) == 0) {\n      v_w_id_32380 = atomic_inc(v_work_idx_2195); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_32380 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2193; \n        v_work_idx_2193 = 0; \n        int v_l_id_32381 = atomic_inc(&(v_work_idx_2193)); \n        while((v_l_id_32381 < v_MWidthC_1)){\n          float v_tmp_32470 = 0.0f; \n          v__32396 = v_tmp_32470; \n          /* reduce_while_seq */\n          for (int v_i_32382 = 0; v_i_32382 < 512; v_i_32382 = (1 + v_i_32382)) {\n            v__32406_0 = check(v__32396, v__32387[(v_l_id_32381 + (512 * v_MWidthC_1 * v_w_id_32380) + (v_MWidthC_1 * v_i_32382))]); \n            if (v__32406_0) {\n            } else {\n              break;\n            }\n            float v_tmp_32471 = 0.0f; \n            v__32398 = v_tmp_32471; \n            int v_index_32472 = v__32387[(v_l_id_32381 + (512 * v_MWidthC_1 * v_w_id_32380) + (v_MWidthC_1 * v_i_32382))]; \n            if (v_index_32472 < 0) {\n              v__32400_0 = v__32398; \n            } else {\n              if (v_index_32472 >= v_VLength_3) {\n                v__32400_0 = v__32398; \n              } else {\n                v__32400_0 = v__32389[v_index_32472]; \n              }\n            }\n            v__32402_0 = mult(v__32400_0, v__32388[(v_l_id_32381 + (512 * v_MWidthC_1 * v_w_id_32380) + (v_MWidthC_1 * v_i_32382))]); \n            v__32396 = add(v__32402_0, v__32396); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_32383 = 0; \n            v__32407[v_l_id_32381] = id(v__32396); \n          }\n          /* end map_seq */\n          v_l_id_32381 = atomic_inc(&(v_work_idx_2193)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_32384 = get_local_id(0); \n        float v_tmp_32475 = 0.0f; \n        v__9698 = v_tmp_32475; \n        /* reduce_seq */\n        for (int v_i_32385 = 0; v_i_32385 < v_MWidthC_1; v_i_32385 = (1 + v_i_32385)) {\n          v__9698 = add(v__9698, v__32407[(v_i_32385 + (v_MWidthC_1 * v_l_id_32384))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_32386 = 0; \n          v__32412[v_w_id_32380] = doubleMultiplyAdd(v__9698, v__32391, v__32390[v_w_id_32380], v__32392); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_32380 = atomic_inc(v_work_idx_2195); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__32387",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32388",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__32389",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__32390",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__32391",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__32392",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__32394",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__32412",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__32407",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}