{
  "name" : "awrg-alcl-slcl-edp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__25723, const global float* restrict v__25724, const global float* restrict v__25725, const global float* restrict v__25726, float v__25727, float v__25728, global float* v__25748, global int* v__25730, local float* v__25743, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25732; \n  float v__25734; \n  float v__9698; \n  /* Private Memory */\n  float v__25736_0;\n  \n  float v__25738_0;\n  \n  int v__25742_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1571 = v__25730; \n    local int v_w_id_25716; \n    if (get_local_id(0) == 0) {\n      v_w_id_25716 = atomic_inc(v_work_idx_1571); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25716 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1569; \n        v_work_idx_1569 = 0; \n        int v_l_id_25717 = atomic_inc(&(v_work_idx_1569)); \n        while((v_l_id_25717 < v_MWidthC_1)){\n          float v_tmp_25806 = 0.0f; \n          v__25732 = v_tmp_25806; \n          /* reduce_while_seq */\n          for (int v_i_25718 = 0; v_i_25718 < 128; v_i_25718 = (1 + v_i_25718)) {\n            v__25742_0 = check(v__25732, v__25723[(v_l_id_25717 + (128 * v_MWidthC_1 * v_w_id_25716) + (v_MWidthC_1 * v_i_25718))]); \n            if (v__25742_0) {\n            } else {\n              break;\n            }\n            float v_tmp_25807 = 0.0f; \n            v__25734 = v_tmp_25807; \n            int v_index_25808 = v__25723[(v_l_id_25717 + (128 * v_MWidthC_1 * v_w_id_25716) + (v_MWidthC_1 * v_i_25718))]; \n            if (v_index_25808 < 0) {\n              v__25736_0 = v__25734; \n            } else {\n              if (v_index_25808 >= v_VLength_3) {\n                v__25736_0 = v__25734; \n              } else {\n                v__25736_0 = v__25725[v_index_25808]; \n              }\n            }\n            v__25738_0 = mult(v__25736_0, v__25724[(v_l_id_25717 + (128 * v_MWidthC_1 * v_w_id_25716) + (v_MWidthC_1 * v_i_25718))]); \n            v__25732 = add(v__25738_0, v__25732); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25719 = 0; \n            v__25743[v_l_id_25717] = id(v__25732); \n          }\n          /* end map_seq */\n          v_l_id_25717 = atomic_inc(&(v_work_idx_1569)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25720 = get_local_id(0); \n        float v_tmp_25811 = 0.0f; \n        v__9698 = v_tmp_25811; \n        /* reduce_seq */\n        for (int v_i_25721 = 0; v_i_25721 < v_MWidthC_1; v_i_25721 = (1 + v_i_25721)) {\n          v__9698 = add(v__9698, v__25743[(v_i_25721 + (v_MWidthC_1 * v_l_id_25720))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25722 = 0; \n          v__25748[v_w_id_25716] = doubleMultiplyAdd(v__9698, v__25727, v__25726[v_w_id_25716], v__25728); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25716 = atomic_inc(v_work_idx_1571); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__25723",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25724",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25725",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25726",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25727",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25728",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25730",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25748",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25743",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}