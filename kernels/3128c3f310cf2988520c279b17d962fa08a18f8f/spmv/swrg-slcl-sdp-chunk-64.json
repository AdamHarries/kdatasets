{
  "name" : "swrg-slcl-sdp-chunk-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__19444, const global float* restrict v__19445, const global float* restrict v__19446, const global float* restrict v__19447, float v__19448, float v__19449, global float* v__19462, global float* v__19456, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__19452; \n  float v__19457; \n  /* Private Memory */\n  float v__19454_0;\n  \n  for (int v_wg_id_19439 = get_group_id(0); v_wg_id_19439 < ((v_MHeight_2)/(64)); v_wg_id_19439 = (v_wg_id_19439 + get_num_groups(0))) {\n    for (int v_l_id_19440 = get_local_id(0); v_l_id_19440 < 64; v_l_id_19440 = (v_l_id_19440 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_19441 = 0; v_i_19441 < v_MWidthC_1; v_i_19441 = (1 + v_i_19441)) {\n        float v_tmp_19506 = 0.0f; \n        v__19452 = v_tmp_19506; \n        int v_index_19507 = v__19444[(v_i_19441 + (64 * v_MWidthC_1 * v_wg_id_19439) + (v_MWidthC_1 * v_l_id_19440))]; \n        if (v_index_19507 < 0) {\n          v__19454_0 = v__19452; \n        } else {\n          if (v_index_19507 >= v_VLength_3) {\n            v__19454_0 = v__19452; \n          } else {\n            v__19454_0 = v__19446[v_index_19507]; \n          }\n        }\n        v__19456[(-1 + v_MWidthC_1 + (64 * v_MWidthC_1 * v_wg_id_19439) + (-1 * v_i_19441) + (v_MWidthC_1 * v_l_id_19440))] = mult(v__19454_0, v__19445[(v_i_19441 + (64 * v_MWidthC_1 * v_wg_id_19439) + (v_MWidthC_1 * v_l_id_19440))]); \n      }\n      /* end map_seq */\n      float v_tmp_19508 = 0.0f; \n      v__19457 = v_tmp_19508; \n      /* reduce_seq */\n      for (int v_i_19442 = 0; v_i_19442 < v_MWidthC_1; v_i_19442 = (1 + v_i_19442)) {\n        v__19457 = add(v__19457, v__19456[(v_i_19442 + (64 * v_MWidthC_1 * v_wg_id_19439) + (v_MWidthC_1 * v_l_id_19440))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_19443 = 0; \n        v__19462[(v_l_id_19440 + (64 * v_wg_id_19439))] = doubleMultiplyAdd(v__19457, v__19448, v__19447[(v_l_id_19440 + (64 * v_wg_id_19439))], v__19449); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "64",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__19444",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__19446",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__19447",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__19448",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__19449",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__19456",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__19462",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}