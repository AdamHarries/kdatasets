{
  "name" : "swrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__23115, const global float* restrict v__23116, const global float* restrict v__23117, const global float* restrict v__23118, float v__23119, float v__23120, global float* v__23137, local float* v__23132, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__23123; \n  float v__23125; \n  float v__9698; \n  /* Private Memory */\n  float v__23127_0;\n  \n  float v__23129_0;\n  \n  for (int v_wg_id_23108 = get_group_id(0); v_wg_id_23108 < v_MHeight_2; v_wg_id_23108 = (v_wg_id_23108 + get_num_groups(0))) {\n    for (int v_l_id_23109 = get_local_id(0); v_l_id_23109 < v_MWidthC_1; v_l_id_23109 = (v_l_id_23109 + get_local_size(0))) {\n      float v_tmp_23202 = 0.0f; \n      v__23123 = v_tmp_23202; \n      /* reduce_seq */\n      for (int v_i_23110 = 0; v_i_23110 < 128; v_i_23110 = (1 + v_i_23110)) {\n        float v_tmp_23203 = 0.0f; \n        v__23125 = v_tmp_23203; \n        int v_index_23204 = v__23115[(v_l_id_23109 + (128 * v_MWidthC_1 * v_wg_id_23108) + (v_MWidthC_1 * v_i_23110))]; \n        if (v_index_23204 < 0) {\n          v__23127_0 = v__23125; \n        } else {\n          if (v_index_23204 >= v_VLength_3) {\n            v__23127_0 = v__23125; \n          } else {\n            v__23127_0 = v__23117[v_index_23204]; \n          }\n        }\n        v__23129_0 = mult(v__23127_0, v__23116[(v_l_id_23109 + (128 * v_MWidthC_1 * v_wg_id_23108) + (v_MWidthC_1 * v_i_23110))]); \n        v__23123 = add(v__23129_0, v__23123); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23111 = 0; \n        v__23132[v_l_id_23109] = id(v__23123); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_23112 = get_local_id(0); \n      float v_tmp_23207 = 0.0f; \n      v__9698 = v_tmp_23207; \n      /* reduce_seq */\n      for (int v_i_23113 = 0; v_i_23113 < v_MWidthC_1; v_i_23113 = (1 + v_i_23113)) {\n        v__9698 = add(v__9698, v__23132[(v_i_23113 + (v_MWidthC_1 * v_l_id_23112))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_23114 = 0; \n        v__23137[v_wg_id_23108] = doubleMultiplyAdd(v__9698, v__23119, v__23118[v_wg_id_23108], v__23120); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__23115",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23116",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__23117",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__23118",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__23119",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__23120",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__23137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__23132",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}