{
  "name" : "swrg-alcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10835, const global float* restrict v__10836, const global float* restrict v__10837, const global float* restrict v__10838, float v__10839, float v__10840, global float* v__10857, global float* v__10847, local float* v__10852, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10843; \n  float v__10848; \n  float v__9698; \n  /* Private Memory */\n  float v__10845_0;\n  \n  for (int v_wg_id_10827 = get_group_id(0); v_wg_id_10827 < v_MHeight_2; v_wg_id_10827 = (v_wg_id_10827 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_171; \n      v_work_idx_171 = 0; \n      int v_l_id_10828 = atomic_inc(&(v_work_idx_171)); \n      while((v_l_id_10828 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_10829 = 0; v_i_10829 < 8; v_i_10829 = (1 + v_i_10829)) {\n          float v_tmp_10910 = 0.0f; \n          v__10843 = v_tmp_10910; \n          int v_index_10911 = v__10835[(v_l_id_10828 + (8 * v_MWidthC_1 * v_wg_id_10827) + (v_MWidthC_1 * v_i_10829))]; \n          if (v_index_10911 < 0) {\n            v__10845_0 = v__10843; \n          } else {\n            if (v_index_10911 >= v_VLength_3) {\n              v__10845_0 = v__10843; \n            } else {\n              v__10845_0 = v__10837[v_index_10911]; \n            }\n          }\n          v__10847[(7 + (8 * v_MWidthC_1 * v_wg_id_10827) + (-1 * v_i_10829) + (8 * v_l_id_10828))] = mult(v__10845_0, v__10836[(v_l_id_10828 + (8 * v_MWidthC_1 * v_wg_id_10827) + (v_MWidthC_1 * v_i_10829))]); \n        }\n        /* end map_seq */\n        float v_tmp_10912 = 0.0f; \n        v__10848 = v_tmp_10912; \n        /* reduce_seq */\n        for (int v_i_10830 = 0; v_i_10830 < 8; v_i_10830 = (1 + v_i_10830)) {\n          v__10848 = add(v__10848, v__10847[(v_i_10830 + (8 * v_MWidthC_1 * v_wg_id_10827) + (8 * v_l_id_10828))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10831 = 0; \n          v__10852[v_l_id_10828] = id(v__10848); \n        }\n        /* end map_seq */\n        v_l_id_10828 = atomic_inc(&(v_work_idx_171)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_165; \n      v_work_idx_165 = 0; \n      int v_l_id_10832 = atomic_inc(&(v_work_idx_165)); \n      while((v_l_id_10832 < 1)){\n        float v_tmp_10915 = 0.0f; \n        v__9698 = v_tmp_10915; \n        /* reduce_seq */\n        for (int v_i_10833 = 0; v_i_10833 < v_MWidthC_1; v_i_10833 = (1 + v_i_10833)) {\n          v__9698 = add(v__9698, v__10852[(v_i_10833 + (v_MWidthC_1 * v_l_id_10832))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10834 = 0; \n          v__10857[v_wg_id_10827] = doubleMultiplyAdd(v__9698, v__10839, v__10838[v_wg_id_10827], v__10840); \n        }\n        /* end map_seq */\n        v_l_id_10832 = atomic_inc(&(v_work_idx_165)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10835",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10836",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10837",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10838",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10839",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10840",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10847",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10852",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}