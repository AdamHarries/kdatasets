{
  "name" : "swrg-slcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__10209, const global float* restrict v__10210, const global float* restrict v__10211, const global float* restrict v__10212, float v__10213, float v__10214, global float* v__10233, local float* v__10228, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10217; \n  float v__10219; \n  float v__9698; \n  /* Private Memory */\n  float v__10221_0;\n  \n  float v__10223_0;\n  \n  int v__10227_0;\n  \n  for (int v_wg_id_10202 = get_group_id(0); v_wg_id_10202 < v_MHeight_2; v_wg_id_10202 = (v_wg_id_10202 + get_num_groups(0))) {\n    for (int v_l_id_10203 = get_local_id(0); v_l_id_10203 < v_MWidthC_1; v_l_id_10203 = (v_l_id_10203 + get_local_size(0))) {\n      float v_tmp_10297 = 0.0f; \n      v__10217 = v_tmp_10297; \n      /* reduce_while_seq */\n      for (int v_i_10204 = 0; v_i_10204 < 8; v_i_10204 = (1 + v_i_10204)) {\n        v__10227_0 = check(v__10217, v__10209[(v_l_id_10203 + (8 * v_MWidthC_1 * v_wg_id_10202) + (v_MWidthC_1 * v_i_10204))]); \n        if (v__10227_0) {\n        } else {\n          break;\n        }\n        float v_tmp_10298 = 0.0f; \n        v__10219 = v_tmp_10298; \n        int v_index_10299 = v__10209[(v_l_id_10203 + (8 * v_MWidthC_1 * v_wg_id_10202) + (v_MWidthC_1 * v_i_10204))]; \n        if (v_index_10299 < 0) {\n          v__10221_0 = v__10219; \n        } else {\n          if (v_index_10299 >= v_VLength_3) {\n            v__10221_0 = v__10219; \n          } else {\n            v__10221_0 = v__10211[v_index_10299]; \n          }\n        }\n        v__10223_0 = mult(v__10221_0, v__10210[(v_l_id_10203 + (8 * v_MWidthC_1 * v_wg_id_10202) + (v_MWidthC_1 * v_i_10204))]); \n        v__10217 = add(v__10223_0, v__10217); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10205 = 0; \n        v__10228[v_l_id_10203] = id(v__10217); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_109; \n      v_work_idx_109 = 0; \n      int v_l_id_10206 = atomic_inc(&(v_work_idx_109)); \n      while((v_l_id_10206 < 1)){\n        float v_tmp_10302 = 0.0f; \n        v__9698 = v_tmp_10302; \n        /* reduce_seq */\n        for (int v_i_10207 = 0; v_i_10207 < v_MWidthC_1; v_i_10207 = (1 + v_i_10207)) {\n          v__9698 = add(v__9698, v__10228[(v_i_10207 + (v_MWidthC_1 * v_l_id_10206))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10208 = 0; \n          v__10233[v_wg_id_10202] = doubleMultiplyAdd(v__9698, v__10213, v__10212[v_wg_id_10202], v__10214); \n        }\n        /* end map_seq */\n        v_l_id_10206 = atomic_inc(&(v_work_idx_109)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__10209",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10210",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10211",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10212",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10213",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10214",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__10233",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10228",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}