{
  "name" : "swrg-slcl-alcl-edp-split-64",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__20205, const global float* restrict v__20206, const global float* restrict v__20207, const global float* restrict v__20208, float v__20209, float v__20210, global float* v__20229, local float* v__20224, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__20213; \n  float v__20215; \n  float v__9698; \n  /* Private Memory */\n  float v__20217_0;\n  \n  float v__20219_0;\n  \n  int v__20223_0;\n  \n  for (int v_wg_id_20198 = get_group_id(0); v_wg_id_20198 < v_MHeight_2; v_wg_id_20198 = (v_wg_id_20198 + get_num_groups(0))) {\n    for (int v_l_id_20199 = get_local_id(0); v_l_id_20199 < v_MWidthC_1; v_l_id_20199 = (v_l_id_20199 + get_local_size(0))) {\n      float v_tmp_20293 = 0.0f; \n      v__20213 = v_tmp_20293; \n      /* reduce_while_seq */\n      for (int v_i_20200 = 0; v_i_20200 < 64; v_i_20200 = (1 + v_i_20200)) {\n        v__20223_0 = check(v__20213, v__20205[(v_l_id_20199 + (64 * v_MWidthC_1 * v_wg_id_20198) + (v_MWidthC_1 * v_i_20200))]); \n        if (v__20223_0) {\n        } else {\n          break;\n        }\n        float v_tmp_20294 = 0.0f; \n        v__20215 = v_tmp_20294; \n        int v_index_20295 = v__20205[(v_l_id_20199 + (64 * v_MWidthC_1 * v_wg_id_20198) + (v_MWidthC_1 * v_i_20200))]; \n        if (v_index_20295 < 0) {\n          v__20217_0 = v__20215; \n        } else {\n          if (v_index_20295 >= v_VLength_3) {\n            v__20217_0 = v__20215; \n          } else {\n            v__20217_0 = v__20207[v_index_20295]; \n          }\n        }\n        v__20219_0 = mult(v__20217_0, v__20206[(v_l_id_20199 + (64 * v_MWidthC_1 * v_wg_id_20198) + (v_MWidthC_1 * v_i_20200))]); \n        v__20213 = add(v__20219_0, v__20213); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_20201 = 0; \n        v__20224[v_l_id_20199] = id(v__20213); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1045; \n      v_work_idx_1045 = 0; \n      int v_l_id_20202 = atomic_inc(&(v_work_idx_1045)); \n      while((v_l_id_20202 < 1)){\n        float v_tmp_20298 = 0.0f; \n        v__9698 = v_tmp_20298; \n        /* reduce_seq */\n        for (int v_i_20203 = 0; v_i_20203 < v_MWidthC_1; v_i_20203 = (1 + v_i_20203)) {\n          v__9698 = add(v__9698, v__20224[(v_i_20203 + (v_MWidthC_1 * v_l_id_20202))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_20204 = 0; \n          v__20229[v_wg_id_20198] = doubleMultiplyAdd(v__9698, v__20209, v__20208[v_wg_id_20198], v__20210); \n        }\n        /* end map_seq */\n        v_l_id_20202 = atomic_inc(&(v_work_idx_1045)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "64",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__20205",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20206",
    "addressSpace" : "global",
    "size" : "(256*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__20207",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__20208",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__20209",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__20210",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__20229",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__20224",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}