{
  "name" : "awrg-slcl-slcl-fdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24786, const global float* restrict v__24787, const global float* restrict v__24788, const global float* restrict v__24789, float v__24790, float v__24791, global float* v__24809, global int* v__24793, local float* v__24804, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24795; \n  float v__24797; \n  float v__9698; \n  /* Private Memory */\n  float v__24799_0;\n  \n  float v__24801_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1478 = v__24793; \n    local int v_w_id_24779; \n    if (get_local_id(0) == 0) {\n      v_w_id_24779 = atomic_inc(v_work_idx_1478); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24779 < v_MHeight_2)){\n      for (int v_l_id_24780 = get_local_id(0); v_l_id_24780 < v_MWidthC_1; v_l_id_24780 = (v_l_id_24780 + get_local_size(0))) {\n        float v_tmp_24872 = 0.0f; \n        v__24795 = v_tmp_24872; \n        /* reduce_seq */\n        for (int v_i_24781 = 0; v_i_24781 < 128; v_i_24781 = (1 + v_i_24781)) {\n          float v_tmp_24873 = 0.0f; \n          v__24797 = v_tmp_24873; \n          int v_index_24874 = v__24786[(v_l_id_24780 + (128 * v_MWidthC_1 * v_w_id_24779) + (v_MWidthC_1 * v_i_24781))]; \n          if (v_index_24874 < 0) {\n            v__24799_0 = v__24797; \n          } else {\n            if (v_index_24874 >= v_VLength_3) {\n              v__24799_0 = v__24797; \n            } else {\n              v__24799_0 = v__24788[v_index_24874]; \n            }\n          }\n          v__24801_0 = mult(v__24799_0, v__24787[(v_l_id_24780 + (128 * v_MWidthC_1 * v_w_id_24779) + (v_MWidthC_1 * v_i_24781))]); \n          v__24795 = add(v__24801_0, v__24795); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24782 = 0; \n          v__24804[v_l_id_24780] = id(v__24795); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_24783 = get_local_id(0); \n        float v_tmp_24877 = 0.0f; \n        v__9698 = v_tmp_24877; \n        /* reduce_seq */\n        for (int v_i_24784 = 0; v_i_24784 < v_MWidthC_1; v_i_24784 = (1 + v_i_24784)) {\n          v__9698 = add(v__9698, v__24804[(v_i_24784 + (v_MWidthC_1 * v_l_id_24783))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24785 = 0; \n          v__24809[v_w_id_24779] = doubleMultiplyAdd(v__9698, v__24790, v__24789[v_w_id_24779], v__24791); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24779 = atomic_inc(v_work_idx_1478); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__24786",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24787",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24788",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24789",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24790",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24791",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24793",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24809",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24804",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}