{
  "name" : "awrg-alcl-alcl-fdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__12591, const global float* restrict v__12592, const global float* restrict v__12593, const global float* restrict v__12594, float v__12595, float v__12596, global float* v__12614, global int* v__12598, local float* v__12609, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12600; \n  float v__12602; \n  float v__9698; \n  /* Private Memory */\n  float v__12604_0;\n  \n  float v__12606_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_346 = v__12598; \n    local int v_w_id_12584; \n    if (get_local_id(0) == 0) {\n      v_w_id_12584 = atomic_inc(v_work_idx_346); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12584 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_344; \n        v_work_idx_344 = 0; \n        int v_l_id_12585 = atomic_inc(&(v_work_idx_344)); \n        while((v_l_id_12585 < v_MWidthC_1)){\n          float v_tmp_12665 = 0.0f; \n          v__12600 = v_tmp_12665; \n          /* reduce_seq */\n          for (int v_i_12586 = 0; v_i_12586 < 8; v_i_12586 = (1 + v_i_12586)) {\n            float v_tmp_12666 = 0.0f; \n            v__12602 = v_tmp_12666; \n            int v_index_12667 = v__12591[(v_l_id_12585 + (8 * v_MWidthC_1 * v_w_id_12584) + (v_MWidthC_1 * v_i_12586))]; \n            if (v_index_12667 < 0) {\n              v__12604_0 = v__12602; \n            } else {\n              if (v_index_12667 >= v_VLength_3) {\n                v__12604_0 = v__12602; \n              } else {\n                v__12604_0 = v__12593[v_index_12667]; \n              }\n            }\n            v__12606_0 = mult(v__12604_0, v__12592[(v_l_id_12585 + (8 * v_MWidthC_1 * v_w_id_12584) + (v_MWidthC_1 * v_i_12586))]); \n            v__12600 = add(v__12606_0, v__12600); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12587 = 0; \n            v__12609[v_l_id_12585] = id(v__12600); \n          }\n          /* end map_seq */\n          v_l_id_12585 = atomic_inc(&(v_work_idx_344)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_339; \n        v_work_idx_339 = 0; \n        int v_l_id_12588 = atomic_inc(&(v_work_idx_339)); \n        while((v_l_id_12588 < 1)){\n          float v_tmp_12670 = 0.0f; \n          v__9698 = v_tmp_12670; \n          /* reduce_seq */\n          for (int v_i_12589 = 0; v_i_12589 < v_MWidthC_1; v_i_12589 = (1 + v_i_12589)) {\n            v__9698 = add(v__9698, v__12609[(v_i_12589 + (v_MWidthC_1 * v_l_id_12588))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12590 = 0; \n            v__12614[v_w_id_12584] = doubleMultiplyAdd(v__9698, v__12595, v__12594[v_w_id_12584], v__12596); \n          }\n          /* end map_seq */\n          v_l_id_12588 = atomic_inc(&(v_work_idx_339)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12584 = atomic_inc(v_work_idx_346); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__12591",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12592",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12593",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12594",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12595",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12596",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12598",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12614",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12609",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}