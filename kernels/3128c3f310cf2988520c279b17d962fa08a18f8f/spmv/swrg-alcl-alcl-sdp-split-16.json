{
  "name" : "swrg-alcl-alcl-sdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__14167, const global float* restrict v__14168, const global float* restrict v__14169, const global float* restrict v__14170, float v__14171, float v__14172, global float* v__14189, global float* v__14179, local float* v__14184, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__14175; \n  float v__14180; \n  float v__9698; \n  /* Private Memory */\n  float v__14177_0;\n  \n  for (int v_wg_id_14159 = get_group_id(0); v_wg_id_14159 < v_MHeight_2; v_wg_id_14159 = (v_wg_id_14159 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_483; \n      v_work_idx_483 = 0; \n      int v_l_id_14160 = atomic_inc(&(v_work_idx_483)); \n      while((v_l_id_14160 < v_MWidthC_1)){\n        /* map_seq */\n        for (int v_i_14161 = 0; v_i_14161 < 16; v_i_14161 = (1 + v_i_14161)) {\n          float v_tmp_14242 = 0.0f; \n          v__14175 = v_tmp_14242; \n          int v_index_14243 = v__14167[(v_l_id_14160 + (16 * v_MWidthC_1 * v_wg_id_14159) + (v_MWidthC_1 * v_i_14161))]; \n          if (v_index_14243 < 0) {\n            v__14177_0 = v__14175; \n          } else {\n            if (v_index_14243 >= v_VLength_3) {\n              v__14177_0 = v__14175; \n            } else {\n              v__14177_0 = v__14169[v_index_14243]; \n            }\n          }\n          v__14179[(15 + (16 * v_MWidthC_1 * v_wg_id_14159) + (-1 * v_i_14161) + (16 * v_l_id_14160))] = mult(v__14177_0, v__14168[(v_l_id_14160 + (16 * v_MWidthC_1 * v_wg_id_14159) + (v_MWidthC_1 * v_i_14161))]); \n        }\n        /* end map_seq */\n        float v_tmp_14244 = 0.0f; \n        v__14180 = v_tmp_14244; \n        /* reduce_seq */\n        for (int v_i_14162 = 0; v_i_14162 < 16; v_i_14162 = (1 + v_i_14162)) {\n          v__14180 = add(v__14180, v__14179[(v_i_14162 + (16 * v_MWidthC_1 * v_wg_id_14159) + (16 * v_l_id_14160))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14163 = 0; \n          v__14184[v_l_id_14160] = id(v__14180); \n        }\n        /* end map_seq */\n        v_l_id_14160 = atomic_inc(&(v_work_idx_483)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_477; \n      v_work_idx_477 = 0; \n      int v_l_id_14164 = atomic_inc(&(v_work_idx_477)); \n      while((v_l_id_14164 < 1)){\n        float v_tmp_14247 = 0.0f; \n        v__9698 = v_tmp_14247; \n        /* reduce_seq */\n        for (int v_i_14165 = 0; v_i_14165 < v_MWidthC_1; v_i_14165 = (1 + v_i_14165)) {\n          v__9698 = add(v__9698, v__14184[(v_i_14165 + (v_MWidthC_1 * v_l_id_14164))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_14166 = 0; \n          v__14189[v_wg_id_14159] = doubleMultiplyAdd(v__9698, v__14171, v__14170[v_wg_id_14159], v__14172); \n        }\n        /* end map_seq */\n        v_l_id_14164 = atomic_inc(&(v_work_idx_477)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__14167",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14168",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__14169",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__14170",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__14171",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__14172",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__14179",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__14189",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__14184",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}