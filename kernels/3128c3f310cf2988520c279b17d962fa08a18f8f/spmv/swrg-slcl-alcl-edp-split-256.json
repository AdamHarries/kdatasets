{
  "name" : "swrg-slcl-alcl-edp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__26869, const global float* restrict v__26870, const global float* restrict v__26871, const global float* restrict v__26872, float v__26873, float v__26874, global float* v__26893, local float* v__26888, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26877; \n  float v__26879; \n  float v__9698; \n  /* Private Memory */\n  float v__26881_0;\n  \n  float v__26883_0;\n  \n  int v__26887_0;\n  \n  for (int v_wg_id_26862 = get_group_id(0); v_wg_id_26862 < v_MHeight_2; v_wg_id_26862 = (v_wg_id_26862 + get_num_groups(0))) {\n    for (int v_l_id_26863 = get_local_id(0); v_l_id_26863 < v_MWidthC_1; v_l_id_26863 = (v_l_id_26863 + get_local_size(0))) {\n      float v_tmp_26957 = 0.0f; \n      v__26877 = v_tmp_26957; \n      /* reduce_while_seq */\n      for (int v_i_26864 = 0; v_i_26864 < 256; v_i_26864 = (1 + v_i_26864)) {\n        v__26887_0 = check(v__26877, v__26869[(v_l_id_26863 + (256 * v_MWidthC_1 * v_wg_id_26862) + (v_MWidthC_1 * v_i_26864))]); \n        if (v__26887_0) {\n        } else {\n          break;\n        }\n        float v_tmp_26958 = 0.0f; \n        v__26879 = v_tmp_26958; \n        int v_index_26959 = v__26869[(v_l_id_26863 + (256 * v_MWidthC_1 * v_wg_id_26862) + (v_MWidthC_1 * v_i_26864))]; \n        if (v_index_26959 < 0) {\n          v__26881_0 = v__26879; \n        } else {\n          if (v_index_26959 >= v_VLength_3) {\n            v__26881_0 = v__26879; \n          } else {\n            v__26881_0 = v__26871[v_index_26959]; \n          }\n        }\n        v__26883_0 = mult(v__26881_0, v__26870[(v_l_id_26863 + (256 * v_MWidthC_1 * v_wg_id_26862) + (v_MWidthC_1 * v_i_26864))]); \n        v__26877 = add(v__26883_0, v__26877); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26865 = 0; \n        v__26888[v_l_id_26863] = id(v__26877); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_1669; \n      v_work_idx_1669 = 0; \n      int v_l_id_26866 = atomic_inc(&(v_work_idx_1669)); \n      while((v_l_id_26866 < 1)){\n        float v_tmp_26962 = 0.0f; \n        v__9698 = v_tmp_26962; \n        /* reduce_seq */\n        for (int v_i_26867 = 0; v_i_26867 < v_MWidthC_1; v_i_26867 = (1 + v_i_26867)) {\n          v__9698 = add(v__9698, v__26888[(v_i_26867 + (v_MWidthC_1 * v_l_id_26866))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_26868 = 0; \n          v__26893[v_wg_id_26862] = doubleMultiplyAdd(v__9698, v__26873, v__26872[v_wg_id_26862], v__26874); \n        }\n        /* end map_seq */\n        v_l_id_26866 = atomic_inc(&(v_work_idx_1669)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__26869",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26870",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26871",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26872",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26873",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26874",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__26893",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__26888",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}