{
  "name" : "swrg-alcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__30921, const global float* restrict v__30922, const global float* restrict v__30923, const global float* restrict v__30924, float v__30925, float v__30926, global float* v__30943, local float* v__30938, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__30929; \n  float v__30931; \n  float v__9698; \n  /* Private Memory */\n  float v__30933_0;\n  \n  float v__30935_0;\n  \n  for (int v_wg_id_30914 = get_group_id(0); v_wg_id_30914 < v_MHeight_2; v_wg_id_30914 = (v_wg_id_30914 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_2053; \n      v_work_idx_2053 = 0; \n      int v_l_id_30915 = atomic_inc(&(v_work_idx_2053)); \n      while((v_l_id_30915 < v_MWidthC_1)){\n        float v_tmp_30996 = 0.0f; \n        v__30929 = v_tmp_30996; \n        /* reduce_seq */\n        for (int v_i_30916 = 0; v_i_30916 < 512; v_i_30916 = (1 + v_i_30916)) {\n          float v_tmp_30997 = 0.0f; \n          v__30931 = v_tmp_30997; \n          int v_index_30998 = v__30921[(v_l_id_30915 + (512 * v_MWidthC_1 * v_wg_id_30914) + (v_MWidthC_1 * v_i_30916))]; \n          if (v_index_30998 < 0) {\n            v__30933_0 = v__30931; \n          } else {\n            if (v_index_30998 >= v_VLength_3) {\n              v__30933_0 = v__30931; \n            } else {\n              v__30933_0 = v__30923[v_index_30998]; \n            }\n          }\n          v__30935_0 = mult(v__30933_0, v__30922[(v_l_id_30915 + (512 * v_MWidthC_1 * v_wg_id_30914) + (v_MWidthC_1 * v_i_30916))]); \n          v__30929 = add(v__30935_0, v__30929); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30917 = 0; \n          v__30938[v_l_id_30915] = id(v__30929); \n        }\n        /* end map_seq */\n        v_l_id_30915 = atomic_inc(&(v_work_idx_2053)); \n      }\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_2048; \n      v_work_idx_2048 = 0; \n      int v_l_id_30918 = atomic_inc(&(v_work_idx_2048)); \n      while((v_l_id_30918 < 1)){\n        float v_tmp_31001 = 0.0f; \n        v__9698 = v_tmp_31001; \n        /* reduce_seq */\n        for (int v_i_30919 = 0; v_i_30919 < v_MWidthC_1; v_i_30919 = (1 + v_i_30919)) {\n          v__9698 = add(v__9698, v__30938[(v_i_30919 + (v_MWidthC_1 * v_l_id_30918))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_30920 = 0; \n          v__30943[v_wg_id_30914] = doubleMultiplyAdd(v__9698, v__30925, v__30924[v_wg_id_30914], v__30926); \n        }\n        /* end map_seq */\n        v_l_id_30918 = atomic_inc(&(v_work_idx_2048)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__30921",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30922",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__30923",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__30924",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__30925",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__30926",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__30943",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__30938",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}