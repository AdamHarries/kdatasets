{
  "name" : "awrg-slcl-alcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28334, const global float* restrict v__28335, const global float* restrict v__28336, const global float* restrict v__28337, float v__28338, float v__28339, global float* v__28357, global float* v__28347, global int* v__28341, local float* v__28352, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28343; \n  float v__28348; \n  float v__9698; \n  /* Private Memory */\n  float v__28345_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1810 = v__28341; \n    local int v_w_id_28326; \n    if (get_local_id(0) == 0) {\n      v_w_id_28326 = atomic_inc(v_work_idx_1810); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28326 < v_MHeight_2)){\n      for (int v_l_id_28327 = get_local_id(0); v_l_id_28327 < v_MWidthC_1; v_l_id_28327 = (v_l_id_28327 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_28328 = 0; v_i_28328 < 256; v_i_28328 = (1 + v_i_28328)) {\n          float v_tmp_28416 = 0.0f; \n          v__28343 = v_tmp_28416; \n          int v_index_28417 = v__28334[(v_l_id_28327 + (256 * v_MWidthC_1 * v_w_id_28326) + (v_MWidthC_1 * v_i_28328))]; \n          if (v_index_28417 < 0) {\n            v__28345_0 = v__28343; \n          } else {\n            if (v_index_28417 >= v_VLength_3) {\n              v__28345_0 = v__28343; \n            } else {\n              v__28345_0 = v__28336[v_index_28417]; \n            }\n          }\n          v__28347[(255 + (256 * v_MWidthC_1 * v_w_id_28326) + (-1 * v_i_28328) + (256 * v_l_id_28327))] = mult(v__28345_0, v__28335[(v_l_id_28327 + (256 * v_MWidthC_1 * v_w_id_28326) + (v_MWidthC_1 * v_i_28328))]); \n        }\n        /* end map_seq */\n        float v_tmp_28418 = 0.0f; \n        v__28348 = v_tmp_28418; \n        /* reduce_seq */\n        for (int v_i_28329 = 0; v_i_28329 < 256; v_i_28329 = (1 + v_i_28329)) {\n          v__28348 = add(v__28348, v__28347[(v_i_28329 + (256 * v_MWidthC_1 * v_w_id_28326) + (256 * v_l_id_28327))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28330 = 0; \n          v__28352[v_l_id_28327] = id(v__28348); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_1803; \n        v_work_idx_1803 = 0; \n        int v_l_id_28331 = atomic_inc(&(v_work_idx_1803)); \n        while((v_l_id_28331 < 1)){\n          float v_tmp_28421 = 0.0f; \n          v__9698 = v_tmp_28421; \n          /* reduce_seq */\n          for (int v_i_28332 = 0; v_i_28332 < v_MWidthC_1; v_i_28332 = (1 + v_i_28332)) {\n            v__9698 = add(v__9698, v__28352[(v_i_28332 + (v_MWidthC_1 * v_l_id_28331))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_28333 = 0; \n            v__28357[v_w_id_28326] = doubleMultiplyAdd(v__9698, v__28338, v__28337[v_w_id_28326], v__28339); \n          }\n          /* end map_seq */\n          v_l_id_28331 = atomic_inc(&(v_work_idx_1803)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28326 = atomic_inc(v_work_idx_1810); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28334",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28335",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28336",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28337",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28338",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28339",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28347",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28341",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28357",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28352",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}