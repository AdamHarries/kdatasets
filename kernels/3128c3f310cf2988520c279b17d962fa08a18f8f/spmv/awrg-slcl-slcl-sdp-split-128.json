{
  "name" : "awrg-slcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__24681, const global float* restrict v__24682, const global float* restrict v__24683, const global float* restrict v__24684, float v__24685, float v__24686, global float* v__24704, global float* v__24694, global int* v__24688, local float* v__24699, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__24690; \n  float v__24695; \n  float v__9698; \n  /* Private Memory */\n  float v__24692_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1469 = v__24688; \n    local int v_w_id_24673; \n    if (get_local_id(0) == 0) {\n      v_w_id_24673 = atomic_inc(v_work_idx_1469); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_24673 < v_MHeight_2)){\n      for (int v_l_id_24674 = get_local_id(0); v_l_id_24674 < v_MWidthC_1; v_l_id_24674 = (v_l_id_24674 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_24675 = 0; v_i_24675 < 128; v_i_24675 = (1 + v_i_24675)) {\n          float v_tmp_24767 = 0.0f; \n          v__24690 = v_tmp_24767; \n          int v_index_24768 = v__24681[(v_l_id_24674 + (128 * v_MWidthC_1 * v_w_id_24673) + (v_MWidthC_1 * v_i_24675))]; \n          if (v_index_24768 < 0) {\n            v__24692_0 = v__24690; \n          } else {\n            if (v_index_24768 >= v_VLength_3) {\n              v__24692_0 = v__24690; \n            } else {\n              v__24692_0 = v__24683[v_index_24768]; \n            }\n          }\n          v__24694[(127 + (128 * v_MWidthC_1 * v_w_id_24673) + (-1 * v_i_24675) + (128 * v_l_id_24674))] = mult(v__24692_0, v__24682[(v_l_id_24674 + (128 * v_MWidthC_1 * v_w_id_24673) + (v_MWidthC_1 * v_i_24675))]); \n        }\n        /* end map_seq */\n        float v_tmp_24769 = 0.0f; \n        v__24695 = v_tmp_24769; \n        /* reduce_seq */\n        for (int v_i_24676 = 0; v_i_24676 < 128; v_i_24676 = (1 + v_i_24676)) {\n          v__24695 = add(v__24695, v__24694[(v_i_24676 + (128 * v_MWidthC_1 * v_w_id_24673) + (128 * v_l_id_24674))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24677 = 0; \n          v__24699[v_l_id_24674] = id(v__24695); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_24678 = get_local_id(0); \n        float v_tmp_24772 = 0.0f; \n        v__9698 = v_tmp_24772; \n        /* reduce_seq */\n        for (int v_i_24679 = 0; v_i_24679 < v_MWidthC_1; v_i_24679 = (1 + v_i_24679)) {\n          v__9698 = add(v__9698, v__24699[(v_i_24679 + (v_MWidthC_1 * v_l_id_24678))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_24680 = 0; \n          v__24704[v_w_id_24673] = doubleMultiplyAdd(v__9698, v__24685, v__24684[v_w_id_24673], v__24686); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_24673 = atomic_inc(v_work_idx_1469); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__24681",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24682",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24683",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__24684",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__24685",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__24686",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__24694",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__24688",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__24704",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__24699",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}