{
  "name" : "awrg-slcl-alcl-fdp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31767, const global float* restrict v__31768, const global float* restrict v__31769, const global float* restrict v__31770, float v__31771, float v__31772, global float* v__31790, global int* v__31774, local float* v__31785, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31776; \n  float v__31778; \n  float v__9698; \n  /* Private Memory */\n  float v__31780_0;\n  \n  float v__31782_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2132 = v__31774; \n    local int v_w_id_31760; \n    if (get_local_id(0) == 0) {\n      v_w_id_31760 = atomic_inc(v_work_idx_2132); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31760 < v_MHeight_2)){\n      for (int v_l_id_31761 = get_local_id(0); v_l_id_31761 < v_MWidthC_1; v_l_id_31761 = (v_l_id_31761 + get_local_size(0))) {\n        float v_tmp_31849 = 0.0f; \n        v__31776 = v_tmp_31849; \n        /* reduce_seq */\n        for (int v_i_31762 = 0; v_i_31762 < 512; v_i_31762 = (1 + v_i_31762)) {\n          float v_tmp_31850 = 0.0f; \n          v__31778 = v_tmp_31850; \n          int v_index_31851 = v__31767[(v_l_id_31761 + (512 * v_MWidthC_1 * v_w_id_31760) + (v_MWidthC_1 * v_i_31762))]; \n          if (v_index_31851 < 0) {\n            v__31780_0 = v__31778; \n          } else {\n            if (v_index_31851 >= v_VLength_3) {\n              v__31780_0 = v__31778; \n            } else {\n              v__31780_0 = v__31769[v_index_31851]; \n            }\n          }\n          v__31782_0 = mult(v__31780_0, v__31768[(v_l_id_31761 + (512 * v_MWidthC_1 * v_w_id_31760) + (v_MWidthC_1 * v_i_31762))]); \n          v__31776 = add(v__31782_0, v__31776); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31763 = 0; \n          v__31785[v_l_id_31761] = id(v__31776); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2126; \n        v_work_idx_2126 = 0; \n        int v_l_id_31764 = atomic_inc(&(v_work_idx_2126)); \n        while((v_l_id_31764 < 1)){\n          float v_tmp_31854 = 0.0f; \n          v__9698 = v_tmp_31854; \n          /* reduce_seq */\n          for (int v_i_31765 = 0; v_i_31765 < v_MWidthC_1; v_i_31765 = (1 + v_i_31765)) {\n            v__9698 = add(v__9698, v__31785[(v_i_31765 + (v_MWidthC_1 * v_l_id_31764))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_31766 = 0; \n            v__31790[v_w_id_31760] = doubleMultiplyAdd(v__9698, v__31771, v__31770[v_w_id_31760], v__31772); \n          }\n          /* end map_seq */\n          v_l_id_31764 = atomic_inc(&(v_work_idx_2126)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_31760 = atomic_inc(v_work_idx_2132); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__31767",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31768",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31769",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31770",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31771",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31772",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31774",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31790",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__31785",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}