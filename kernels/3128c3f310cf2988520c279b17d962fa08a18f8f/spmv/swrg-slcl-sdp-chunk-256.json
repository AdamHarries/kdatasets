{
  "name" : "swrg-slcl-sdp-chunk-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__26108, const global float* restrict v__26109, const global float* restrict v__26110, const global float* restrict v__26111, float v__26112, float v__26113, global float* v__26126, global float* v__26120, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__26116; \n  float v__26121; \n  /* Private Memory */\n  float v__26118_0;\n  \n  for (int v_wg_id_26103 = get_group_id(0); v_wg_id_26103 < ((v_MHeight_2)/(256)); v_wg_id_26103 = (v_wg_id_26103 + get_num_groups(0))) {\n    for (int v_l_id_26104 = get_local_id(0); v_l_id_26104 < 256; v_l_id_26104 = (v_l_id_26104 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_26105 = 0; v_i_26105 < v_MWidthC_1; v_i_26105 = (1 + v_i_26105)) {\n        float v_tmp_26170 = 0.0f; \n        v__26116 = v_tmp_26170; \n        int v_index_26171 = v__26108[(v_i_26105 + (256 * v_MWidthC_1 * v_wg_id_26103) + (v_MWidthC_1 * v_l_id_26104))]; \n        if (v_index_26171 < 0) {\n          v__26118_0 = v__26116; \n        } else {\n          if (v_index_26171 >= v_VLength_3) {\n            v__26118_0 = v__26116; \n          } else {\n            v__26118_0 = v__26110[v_index_26171]; \n          }\n        }\n        v__26120[(-1 + v_MWidthC_1 + (256 * v_MWidthC_1 * v_wg_id_26103) + (-1 * v_i_26105) + (v_MWidthC_1 * v_l_id_26104))] = mult(v__26118_0, v__26109[(v_i_26105 + (256 * v_MWidthC_1 * v_wg_id_26103) + (v_MWidthC_1 * v_l_id_26104))]); \n      }\n      /* end map_seq */\n      float v_tmp_26172 = 0.0f; \n      v__26121 = v_tmp_26172; \n      /* reduce_seq */\n      for (int v_i_26106 = 0; v_i_26106 < v_MWidthC_1; v_i_26106 = (1 + v_i_26106)) {\n        v__26121 = add(v__26121, v__26120[(v_i_26106 + (256 * v_MWidthC_1 * v_wg_id_26103) + (v_MWidthC_1 * v_l_id_26104))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_26107 = 0; \n        v__26126[(v_l_id_26104 + (256 * v_wg_id_26103))] = doubleMultiplyAdd(v__26121, v__26112, v__26111[(v_l_id_26104 + (256 * v_wg_id_26103))], v__26113); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "256",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__26108",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26109",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__26110",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__26111",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__26112",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__26113",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__26120",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__26126",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}