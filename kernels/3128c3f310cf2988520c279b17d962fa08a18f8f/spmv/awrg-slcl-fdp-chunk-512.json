{
  "name" : "awrg-slcl-fdp-chunk-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__31187, const global float* restrict v__31188, const global float* restrict v__31189, const global float* restrict v__31190, float v__31191, float v__31192, global float* v__31206, global int* v__31194, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__31196; \n  float v__31198; \n  /* Private Memory */\n  float v__31200_0;\n  \n  float v__31202_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2077 = v__31194; \n    local int v_w_id_31183; \n    if (get_local_id(0) == 0) {\n      v_w_id_31183 = atomic_inc(v_work_idx_2077); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_31183 < ((v_MHeight_2)/(512)))){\n      for (int v_l_id_31184 = get_local_id(0); v_l_id_31184 < 512; v_l_id_31184 = (v_l_id_31184 + get_local_size(0))) {\n        float v_tmp_31247 = 0.0f; \n        v__31196 = v_tmp_31247; \n        /* reduce_seq */\n        for (int v_i_31185 = 0; v_i_31185 < v_MWidthC_1; v_i_31185 = (1 + v_i_31185)) {\n          float v_tmp_31248 = 0.0f; \n          v__31198 = v_tmp_31248; \n          int v_index_31249 = v__31187[(v_i_31185 + (512 * v_MWidthC_1 * v_w_id_31183) + (v_MWidthC_1 * v_l_id_31184))]; \n          if (v_index_31249 < 0) {\n            v__31200_0 = v__31198; \n          } else {\n            if (v_index_31249 >= v_VLength_3) {\n              v__31200_0 = v__31198; \n            } else {\n              v__31200_0 = v__31189[v_index_31249]; \n            }\n          }\n          v__31202_0 = mult(v__31200_0, v__31188[(v_i_31185 + (512 * v_MWidthC_1 * v_w_id_31183) + (v_MWidthC_1 * v_l_id_31184))]); \n          v__31196 = add(v__31202_0, v__31196); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_31186 = 0; \n          v__31206[(v_l_id_31184 + (512 * v_w_id_31183))] = doubleMultiplyAdd(v__31196, v__31191, v__31190[(v_l_id_31184 + (512 * v_w_id_31183))], v__31192); \n        }\n        /* end map_seq */\n      }\n      if (get_local_id(0) == 0) {\n        v_w_id_31183 = atomic_inc(v_work_idx_2077); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "outerMap" : "awrg",
    "innerMap" : "slcl",
    "chunkSize" : "512",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__31187",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31188",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__31189",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__31190",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__31191",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__31192",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__31194",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__31206",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}