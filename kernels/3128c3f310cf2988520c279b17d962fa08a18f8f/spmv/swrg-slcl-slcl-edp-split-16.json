{
  "name" : "swrg-slcl-slcl-edp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nkernel void KERNEL(const global int* restrict v__13225, const global float* restrict v__13226, const global float* restrict v__13227, const global float* restrict v__13228, float v__13229, float v__13230, global float* v__13249, local float* v__13244, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13233; \n  float v__13235; \n  float v__9698; \n  /* Private Memory */\n  float v__13237_0;\n  \n  float v__13239_0;\n  \n  int v__13243_0;\n  \n  for (int v_wg_id_13218 = get_group_id(0); v_wg_id_13218 < v_MHeight_2; v_wg_id_13218 = (v_wg_id_13218 + get_num_groups(0))) {\n    for (int v_l_id_13219 = get_local_id(0); v_l_id_13219 < v_MWidthC_1; v_l_id_13219 = (v_l_id_13219 + get_local_size(0))) {\n      float v_tmp_13317 = 0.0f; \n      v__13233 = v_tmp_13317; \n      /* reduce_while_seq */\n      for (int v_i_13220 = 0; v_i_13220 < 16; v_i_13220 = (1 + v_i_13220)) {\n        v__13243_0 = check(v__13233, v__13225[(v_l_id_13219 + (16 * v_MWidthC_1 * v_wg_id_13218) + (v_MWidthC_1 * v_i_13220))]); \n        if (v__13243_0) {\n        } else {\n          break;\n        }\n        float v_tmp_13318 = 0.0f; \n        v__13235 = v_tmp_13318; \n        int v_index_13319 = v__13225[(v_l_id_13219 + (16 * v_MWidthC_1 * v_wg_id_13218) + (v_MWidthC_1 * v_i_13220))]; \n        if (v_index_13319 < 0) {\n          v__13237_0 = v__13235; \n        } else {\n          if (v_index_13319 >= v_VLength_3) {\n            v__13237_0 = v__13235; \n          } else {\n            v__13237_0 = v__13227[v_index_13319]; \n          }\n        }\n        v__13239_0 = mult(v__13237_0, v__13226[(v_l_id_13219 + (16 * v_MWidthC_1 * v_wg_id_13218) + (v_MWidthC_1 * v_i_13220))]); \n        v__13233 = add(v__13239_0, v__13233); \n      }\n      /* end reduce_while_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13221 = 0; \n        v__13244[v_l_id_13219] = id(v__13233); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* iteration count is exactly 1 or less, no loop emitted */\n    if (get_local_id(0) < 1) {\n      int v_l_id_13222 = get_local_id(0); \n      float v_tmp_13322 = 0.0f; \n      v__9698 = v_tmp_13322; \n      /* reduce_seq */\n      for (int v_i_13223 = 0; v_i_13223 < v_MWidthC_1; v_i_13223 = (1 + v_i_13223)) {\n        v__9698 = add(v__9698, v__13244[(v_i_13223 + (v_MWidthC_1 * v_l_id_13222))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13224 = 0; \n        v__13249[v_wg_id_13218] = doubleMultiplyAdd(v__9698, v__13229, v__13228[v_wg_id_13218], v__13230); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__13225",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13226",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13227",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13228",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13229",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13230",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13249",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13244",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}