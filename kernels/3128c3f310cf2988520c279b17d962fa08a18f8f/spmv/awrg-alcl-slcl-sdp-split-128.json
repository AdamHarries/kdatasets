{
  "name" : "awrg-alcl-slcl-sdp-split-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__25529, const global float* restrict v__25530, const global float* restrict v__25531, const global float* restrict v__25532, float v__25533, float v__25534, global float* v__25552, global float* v__25542, global int* v__25536, local float* v__25547, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__25538; \n  float v__25543; \n  float v__9698; \n  /* Private Memory */\n  float v__25540_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1551 = v__25536; \n    local int v_w_id_25521; \n    if (get_local_id(0) == 0) {\n      v_w_id_25521 = atomic_inc(v_work_idx_1551); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_25521 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_1549; \n        v_work_idx_1549 = 0; \n        int v_l_id_25522 = atomic_inc(&(v_work_idx_1549)); \n        while((v_l_id_25522 < v_MWidthC_1)){\n          /* map_seq */\n          for (int v_i_25523 = 0; v_i_25523 < 128; v_i_25523 = (1 + v_i_25523)) {\n            float v_tmp_25607 = 0.0f; \n            v__25538 = v_tmp_25607; \n            int v_index_25608 = v__25529[(v_l_id_25522 + (128 * v_MWidthC_1 * v_w_id_25521) + (v_MWidthC_1 * v_i_25523))]; \n            if (v_index_25608 < 0) {\n              v__25540_0 = v__25538; \n            } else {\n              if (v_index_25608 >= v_VLength_3) {\n                v__25540_0 = v__25538; \n              } else {\n                v__25540_0 = v__25531[v_index_25608]; \n              }\n            }\n            v__25542[(127 + (128 * v_MWidthC_1 * v_w_id_25521) + (-1 * v_i_25523) + (128 * v_l_id_25522))] = mult(v__25540_0, v__25530[(v_l_id_25522 + (128 * v_MWidthC_1 * v_w_id_25521) + (v_MWidthC_1 * v_i_25523))]); \n          }\n          /* end map_seq */\n          float v_tmp_25609 = 0.0f; \n          v__25543 = v_tmp_25609; \n          /* reduce_seq */\n          for (int v_i_25524 = 0; v_i_25524 < 128; v_i_25524 = (1 + v_i_25524)) {\n            v__25543 = add(v__25543, v__25542[(v_i_25524 + (128 * v_MWidthC_1 * v_w_id_25521) + (128 * v_l_id_25522))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_25525 = 0; \n            v__25547[v_l_id_25522] = id(v__25543); \n          }\n          /* end map_seq */\n          v_l_id_25522 = atomic_inc(&(v_work_idx_1549)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_25526 = get_local_id(0); \n        float v_tmp_25612 = 0.0f; \n        v__9698 = v_tmp_25612; \n        /* reduce_seq */\n        for (int v_i_25527 = 0; v_i_25527 < v_MWidthC_1; v_i_25527 = (1 + v_i_25527)) {\n          v__9698 = add(v__9698, v__25547[(v_i_25527 + (v_MWidthC_1 * v_l_id_25526))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_25528 = 0; \n          v__25552[v_w_id_25521] = doubleMultiplyAdd(v__9698, v__25533, v__25532[v_w_id_25521], v__25534); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_25521 = atomic_inc(v_work_idx_1551); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "128",
    "innerMap2" : "slcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__25529",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25530",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25531",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__25532",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__25533",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__25534",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__25542",
    "addressSpace" : "global",
    "size" : "(512*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__25536",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__25552",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__25547",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}