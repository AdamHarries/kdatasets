{
  "name" : "swrg-slcl-alcl-sdp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__10005, const global float* restrict v__10006, const global float* restrict v__10007, const global float* restrict v__10008, float v__10009, float v__10010, global float* v__10027, global float* v__10017, local float* v__10022, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__10013; \n  float v__10018; \n  float v__9698; \n  /* Private Memory */\n  float v__10015_0;\n  \n  for (int v_wg_id_9997 = get_group_id(0); v_wg_id_9997 < v_MHeight_2; v_wg_id_9997 = (v_wg_id_9997 + get_num_groups(0))) {\n    for (int v_l_id_9998 = get_local_id(0); v_l_id_9998 < v_MWidthC_1; v_l_id_9998 = (v_l_id_9998 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_9999 = 0; v_i_9999 < 8; v_i_9999 = (1 + v_i_9999)) {\n        float v_tmp_10088 = 0.0f; \n        v__10013 = v_tmp_10088; \n        int v_index_10089 = v__10005[(v_l_id_9998 + (8 * v_MWidthC_1 * v_wg_id_9997) + (v_MWidthC_1 * v_i_9999))]; \n        if (v_index_10089 < 0) {\n          v__10015_0 = v__10013; \n        } else {\n          if (v_index_10089 >= v_VLength_3) {\n            v__10015_0 = v__10013; \n          } else {\n            v__10015_0 = v__10007[v_index_10089]; \n          }\n        }\n        v__10017[(7 + (8 * v_MWidthC_1 * v_wg_id_9997) + (-1 * v_i_9999) + (8 * v_l_id_9998))] = mult(v__10015_0, v__10006[(v_l_id_9998 + (8 * v_MWidthC_1 * v_wg_id_9997) + (v_MWidthC_1 * v_i_9999))]); \n      }\n      /* end map_seq */\n      float v_tmp_10090 = 0.0f; \n      v__10018 = v_tmp_10090; \n      /* reduce_seq */\n      for (int v_i_10000 = 0; v_i_10000 < 8; v_i_10000 = (1 + v_i_10000)) {\n        v__10018 = add(v__10018, v__10017[(v_i_10000 + (8 * v_MWidthC_1 * v_wg_id_9997) + (8 * v_l_id_9998))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_10001 = 0; \n        v__10022[v_l_id_9998] = id(v__10018); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_90; \n      v_work_idx_90 = 0; \n      int v_l_id_10002 = atomic_inc(&(v_work_idx_90)); \n      while((v_l_id_10002 < 1)){\n        float v_tmp_10093 = 0.0f; \n        v__9698 = v_tmp_10093; \n        /* reduce_seq */\n        for (int v_i_10003 = 0; v_i_10003 < v_MWidthC_1; v_i_10003 = (1 + v_i_10003)) {\n          v__9698 = add(v__9698, v__10022[(v_i_10003 + (v_MWidthC_1 * v_l_id_10002))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_10004 = 0; \n          v__10027[v_wg_id_9997] = doubleMultiplyAdd(v__9698, v__10009, v__10008[v_wg_id_9997], v__10010); \n        }\n        /* end map_seq */\n        v_l_id_10002 = atomic_inc(&(v_work_idx_90)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__10005",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10006",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__10007",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__10008",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__10009",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__10010",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__10017",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__10027",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__10022",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}