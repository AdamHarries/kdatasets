{
  "name" : "swrg-slcl-alcl-fdp-split-16",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__13439, const global float* restrict v__13440, const global float* restrict v__13441, const global float* restrict v__13442, float v__13443, float v__13444, global float* v__13461, local float* v__13456, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__13447; \n  float v__13449; \n  float v__9698; \n  /* Private Memory */\n  float v__13451_0;\n  \n  float v__13453_0;\n  \n  for (int v_wg_id_13432 = get_group_id(0); v_wg_id_13432 < v_MHeight_2; v_wg_id_13432 = (v_wg_id_13432 + get_num_groups(0))) {\n    for (int v_l_id_13433 = get_local_id(0); v_l_id_13433 < v_MWidthC_1; v_l_id_13433 = (v_l_id_13433 + get_local_size(0))) {\n      float v_tmp_13522 = 0.0f; \n      v__13447 = v_tmp_13522; \n      /* reduce_seq */\n      for (int v_i_13434 = 0; v_i_13434 < 16; v_i_13434 = (1 + v_i_13434)) {\n        float v_tmp_13523 = 0.0f; \n        v__13449 = v_tmp_13523; \n        int v_index_13524 = v__13439[(v_l_id_13433 + (16 * v_MWidthC_1 * v_wg_id_13432) + (v_MWidthC_1 * v_i_13434))]; \n        if (v_index_13524 < 0) {\n          v__13451_0 = v__13449; \n        } else {\n          if (v_index_13524 >= v_VLength_3) {\n            v__13451_0 = v__13449; \n          } else {\n            v__13451_0 = v__13441[v_index_13524]; \n          }\n        }\n        v__13453_0 = mult(v__13451_0, v__13440[(v_l_id_13433 + (16 * v_MWidthC_1 * v_wg_id_13432) + (v_MWidthC_1 * v_i_13434))]); \n        v__13447 = add(v__13453_0, v__13447); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_13435 = 0; \n        v__13456[v_l_id_13433] = id(v__13447); \n      }\n      /* end map_seq */\n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    /* atomic_local_map */\n    {\n      local int v_work_idx_412; \n      v_work_idx_412 = 0; \n      int v_l_id_13436 = atomic_inc(&(v_work_idx_412)); \n      while((v_l_id_13436 < 1)){\n        float v_tmp_13527 = 0.0f; \n        v__9698 = v_tmp_13527; \n        /* reduce_seq */\n        for (int v_i_13437 = 0; v_i_13437 < v_MWidthC_1; v_i_13437 = (1 + v_i_13437)) {\n          v__9698 = add(v__9698, v__13456[(v_i_13437 + (v_MWidthC_1 * v_l_id_13436))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_13438 = 0; \n          v__13461[v_wg_id_13432] = doubleMultiplyAdd(v__9698, v__13443, v__13442[v_wg_id_13432], v__13444); \n        }\n        /* end map_seq */\n        v_l_id_13436 = atomic_inc(&(v_work_idx_412)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "splitSize" : "16",
    "innerMap2" : "alcl",
    "innerMap" : "slcl",
    "outerMap" : "swrg",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__13439",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13440",
    "addressSpace" : "global",
    "size" : "(64*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__13441",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__13442",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__13443",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__13444",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ ],
  "outputArg" : {
    "variable" : "v__13461",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__13456",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}