{
  "name" : "swrg-alcl-sdp-chunk-32",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__16978, const global float* restrict v__16979, const global float* restrict v__16980, const global float* restrict v__16981, float v__16982, float v__16983, global float* v__16996, global float* v__16990, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__16986; \n  float v__16991; \n  /* Private Memory */\n  float v__16988_0;\n  \n  for (int v_wg_id_16973 = get_group_id(0); v_wg_id_16973 < ((v_MHeight_2)/(32)); v_wg_id_16973 = (v_wg_id_16973 + get_num_groups(0))) {\n    /* atomic_local_map */\n    {\n      local int v_work_idx_744; \n      v_work_idx_744 = 0; \n      int v_l_id_16974 = atomic_inc(&(v_work_idx_744)); \n      while((v_l_id_16974 < 32)){\n        /* map_seq */\n        for (int v_i_16975 = 0; v_i_16975 < v_MWidthC_1; v_i_16975 = (1 + v_i_16975)) {\n          float v_tmp_17036 = 0.0f; \n          v__16986 = v_tmp_17036; \n          int v_index_17037 = v__16978[(v_i_16975 + (32 * v_MWidthC_1 * v_wg_id_16973) + (v_MWidthC_1 * v_l_id_16974))]; \n          if (v_index_17037 < 0) {\n            v__16988_0 = v__16986; \n          } else {\n            if (v_index_17037 >= v_VLength_3) {\n              v__16988_0 = v__16986; \n            } else {\n              v__16988_0 = v__16980[v_index_17037]; \n            }\n          }\n          v__16990[(-1 + v_MWidthC_1 + (32 * v_MWidthC_1 * v_wg_id_16973) + (-1 * v_i_16975) + (v_MWidthC_1 * v_l_id_16974))] = mult(v__16988_0, v__16979[(v_i_16975 + (32 * v_MWidthC_1 * v_wg_id_16973) + (v_MWidthC_1 * v_l_id_16974))]); \n        }\n        /* end map_seq */\n        float v_tmp_17038 = 0.0f; \n        v__16991 = v_tmp_17038; \n        /* reduce_seq */\n        for (int v_i_16976 = 0; v_i_16976 < v_MWidthC_1; v_i_16976 = (1 + v_i_16976)) {\n          v__16991 = add(v__16991, v__16990[(v_i_16976 + (32 * v_MWidthC_1 * v_wg_id_16973) + (v_MWidthC_1 * v_l_id_16974))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_16977 = 0; \n          v__16996[(v_l_id_16974 + (32 * v_wg_id_16973))] = doubleMultiplyAdd(v__16991, v__16982, v__16981[(v_l_id_16974 + (32 * v_wg_id_16973))], v__16983); \n        }\n        /* end map_seq */\n        v_l_id_16974 = atomic_inc(&(v_work_idx_744)); \n      }\n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "alcl",
    "chunkSize" : "32",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__16978",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16979",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__16980",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__16981",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__16982",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__16983",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__16990",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__16996",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}