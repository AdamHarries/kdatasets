{
  "name" : "awrg-slcl-slcl-sdp-split-256",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__28013, const global float* restrict v__28014, const global float* restrict v__28015, const global float* restrict v__28016, float v__28017, float v__28018, global float* v__28036, global float* v__28026, global int* v__28020, local float* v__28031, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__28022; \n  float v__28027; \n  float v__9698; \n  /* Private Memory */\n  float v__28024_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_1781 = v__28020; \n    local int v_w_id_28005; \n    if (get_local_id(0) == 0) {\n      v_w_id_28005 = atomic_inc(v_work_idx_1781); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_28005 < v_MHeight_2)){\n      for (int v_l_id_28006 = get_local_id(0); v_l_id_28006 < v_MWidthC_1; v_l_id_28006 = (v_l_id_28006 + get_local_size(0))) {\n        /* map_seq */\n        for (int v_i_28007 = 0; v_i_28007 < 256; v_i_28007 = (1 + v_i_28007)) {\n          float v_tmp_28099 = 0.0f; \n          v__28022 = v_tmp_28099; \n          int v_index_28100 = v__28013[(v_l_id_28006 + (256 * v_MWidthC_1 * v_w_id_28005) + (v_MWidthC_1 * v_i_28007))]; \n          if (v_index_28100 < 0) {\n            v__28024_0 = v__28022; \n          } else {\n            if (v_index_28100 >= v_VLength_3) {\n              v__28024_0 = v__28022; \n            } else {\n              v__28024_0 = v__28015[v_index_28100]; \n            }\n          }\n          v__28026[(255 + (256 * v_MWidthC_1 * v_w_id_28005) + (-1 * v_i_28007) + (256 * v_l_id_28006))] = mult(v__28024_0, v__28014[(v_l_id_28006 + (256 * v_MWidthC_1 * v_w_id_28005) + (v_MWidthC_1 * v_i_28007))]); \n        }\n        /* end map_seq */\n        float v_tmp_28101 = 0.0f; \n        v__28027 = v_tmp_28101; \n        /* reduce_seq */\n        for (int v_i_28008 = 0; v_i_28008 < 256; v_i_28008 = (1 + v_i_28008)) {\n          v__28027 = add(v__28027, v__28026[(v_i_28008 + (256 * v_MWidthC_1 * v_w_id_28005) + (256 * v_l_id_28006))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28009 = 0; \n          v__28031[v_l_id_28006] = id(v__28027); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* iteration count is exactly 1 or less, no loop emitted */\n      if (get_local_id(0) < 1) {\n        int v_l_id_28010 = get_local_id(0); \n        float v_tmp_28104 = 0.0f; \n        v__9698 = v_tmp_28104; \n        /* reduce_seq */\n        for (int v_i_28011 = 0; v_i_28011 < v_MWidthC_1; v_i_28011 = (1 + v_i_28011)) {\n          v__9698 = add(v__9698, v__28031[(v_i_28011 + (v_MWidthC_1 * v_l_id_28010))]); \n        }\n        /* end reduce_seq */\n        /* map_seq */\n        /* iteration count is exactly 1, no loop emitted */\n        {\n          int v_i_28012 = 0; \n          v__28036[v_w_id_28005] = doubleMultiplyAdd(v__9698, v__28017, v__28016[v_w_id_28005], v__28018); \n        }\n        /* end map_seq */\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_28005 = atomic_inc(v_work_idx_1781); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "256",
    "innerMap2" : "slcl",
    "innerMap" : "slcl",
    "outerMap" : "awrg",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__28013",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28014",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28015",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__28016",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__28017",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__28018",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__28026",
    "addressSpace" : "global",
    "size" : "(1024*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__28020",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__28036",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__28031",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}